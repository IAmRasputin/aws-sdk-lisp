;; DO NOT EDIT: File is generated by AWS-SDK/GENERATOR.

(common-lisp:defpackage #:aws-sdk/services/glue/api
  (:use)
  (:nicknames #:aws/glue)
  (:import-from #:aws-sdk/generator/shape)
  (:import-from #:aws-sdk/generator/operation)
  (:import-from #:aws-sdk/api)
  (:import-from #:aws-sdk/request)
  (:import-from #:aws-sdk/error))
(common-lisp:in-package #:aws-sdk/services/glue/api)
(common-lisp:progn
 (common-lisp:defclass glue-request (aws-sdk/request:request) common-lisp:nil
                       (:default-initargs :service "glue"))
 (common-lisp:export 'glue-request))
(common-lisp:progn
 (common-lisp:define-condition glue-error
     (aws-sdk/error:aws-error)
     common-lisp:nil)
 (common-lisp:export 'glue-error))
(common-lisp:defvar *error-map*
  '(("AccessDeniedException" . access-denied-exception)
    ("AlreadyExistsException" . already-exists-exception)
    ("ConcurrentModificationException" . concurrent-modification-exception)
    ("ConcurrentRunsExceededException" . concurrent-runs-exceeded-exception)
    ("ConditionCheckFailureException" . condition-check-failure-exception)
    ("ConflictException" . conflict-exception)
    ("CrawlerNotRunningException" . crawler-not-running-exception)
    ("CrawlerRunningException" . crawler-running-exception)
    ("CrawlerStoppingException" . crawler-stopping-exception)
    ("EntityNotFoundException" . entity-not-found-exception)
    ("GlueEncryptionException" . glue-encryption-exception)
    ("IdempotentParameterMismatchException"
     . idempotent-parameter-mismatch-exception)
    ("IllegalBlueprintStateException" . illegal-blueprint-state-exception)
    ("IllegalSessionStateException" . illegal-session-state-exception)
    ("IllegalWorkflowStateException" . illegal-workflow-state-exception)
    ("InternalServiceException" . internal-service-exception)
    ("InvalidInputException" . invalid-input-exception)
    ("InvalidStateException" . invalid-state-exception)
    ("MLTransformNotReadyException" . mltransform-not-ready-exception)
    ("NoScheduleException" . no-schedule-exception)
    ("OperationTimeoutException" . operation-timeout-exception)
    ("PermissionTypeMismatchException" . permission-type-mismatch-exception)
    ("ResourceNotReadyException" . resource-not-ready-exception)
    ("ResourceNumberLimitExceededException"
     . resource-number-limit-exceeded-exception)
    ("SchedulerNotRunningException" . scheduler-not-running-exception)
    ("SchedulerRunningException" . scheduler-running-exception)
    ("SchedulerTransitioningException" . scheduler-transitioning-exception)
    ("ValidationException" . validation-exception)
    ("VersionMismatchException" . version-mismatch-exception)))
(common-lisp:progn
 (common-lisp:define-condition access-denied-exception
     (glue-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       access-denied-exception-message)))
 (common-lisp:export
  (common-lisp:list 'access-denied-exception 'access-denied-exception-message)))
(common-lisp:deftype account-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (action (:copier common-lisp:nil) (:conc-name "struct-shape-action-"))
   (job-name common-lisp:nil :type
    (common-lisp:or name-string common-lisp:null))
   (arguments common-lisp:nil :type
    (common-lisp:or generic-map common-lisp:null))
   (timeout common-lisp:nil :type (common-lisp:or timeout common-lisp:null))
   (security-configuration common-lisp:nil :type
    (common-lisp:or name-string common-lisp:null))
   (notification-property common-lisp:nil :type
    (common-lisp:or notification-property common-lisp:null))
   (crawler-name common-lisp:nil :type
    (common-lisp:or name-string common-lisp:null)))
 (common-lisp:export (common-lisp:list 'action 'make-action))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input action))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input action))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-name))
      (common-lisp:list
       (common-lisp:cons "JobName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arguments))
      (common-lisp:list
       (common-lisp:cons "Arguments"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'timeout))
      (common-lisp:list
       (common-lisp:cons "Timeout"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'security-configuration))
      (common-lisp:list
       (common-lisp:cons "SecurityConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'notification-property))
      (common-lisp:list
       (common-lisp:cons "NotificationProperty"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'crawler-name))
      (common-lisp:list
       (common-lisp:cons "CrawlerName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input action))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype action-list () '(trivial-types:proper-list action))
 (common-lisp:defun |make-action-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list action))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype additional-options () 'common-lisp:hash-table)
 (common-lisp:defun |make-additional-options|
                    (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:progn
 (common-lisp:deftype additional-plan-options-map () 'common-lisp:hash-table)
 (common-lisp:defun |make-additional-plan-options-map|
                    (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:deftype agg-function () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (aggregate (:copier common-lisp:nil)
      (:conc-name "struct-shape-aggregate-"))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or node-name common-lisp:null))
   (inputs (common-lisp:error ":inputs is required") :type
    (common-lisp:or one-input common-lisp:null))
   (groups (common-lisp:error ":groups is required") :type
    (common-lisp:or glue-studio-path-list common-lisp:null))
   (aggs (common-lisp:error ":aggs is required") :type
    (common-lisp:or aggregate-operations common-lisp:null)))
 (common-lisp:export (common-lisp:list 'aggregate 'make-aggregate))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input aggregate))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input aggregate))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'inputs))
      (common-lisp:list
       (common-lisp:cons "Inputs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'groups))
      (common-lisp:list
       (common-lisp:cons "Groups"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'aggs))
      (common-lisp:list
       (common-lisp:cons "Aggs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input aggregate))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (aggregate-operation (:copier common-lisp:nil)
      (:conc-name "struct-shape-aggregate-operation-"))
   (column (common-lisp:error ":column is required") :type
    (common-lisp:or enclosed-in-string-properties common-lisp:null))
   (agg-func (common-lisp:error ":agg-func is required") :type
    (common-lisp:or agg-function common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'aggregate-operation 'make-aggregate-operation))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input aggregate-operation))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input aggregate-operation))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'column))
      (common-lisp:list
       (common-lisp:cons "Column"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'agg-func))
      (common-lisp:list
       (common-lisp:cons "AggFunc"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input aggregate-operation))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype aggregate-operations ()
   '(trivial-types:proper-list aggregate-operation))
 (common-lisp:defun |make-aggregate-operations|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list aggregate-operation))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition already-exists-exception
     (glue-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       already-exists-exception-message)))
 (common-lisp:export
  (common-lisp:list 'already-exists-exception
                    'already-exists-exception-message)))
(common-lisp:progn
 (common-lisp:defstruct
     (apply-mapping (:copier common-lisp:nil)
      (:conc-name "struct-shape-apply-mapping-"))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or node-name common-lisp:null))
   (inputs (common-lisp:error ":inputs is required") :type
    (common-lisp:or one-input common-lisp:null))
   (mapping (common-lisp:error ":mapping is required") :type
    (common-lisp:or mappings common-lisp:null)))
 (common-lisp:export (common-lisp:list 'apply-mapping 'make-apply-mapping))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input apply-mapping))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input apply-mapping))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'inputs))
      (common-lisp:list
       (common-lisp:cons "Inputs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'mapping))
      (common-lisp:list
       (common-lisp:cons "Mapping"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input apply-mapping))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (athena-connector-source (:copier common-lisp:nil)
      (:conc-name "struct-shape-athena-connector-source-"))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or node-name common-lisp:null))
   (connection-name (common-lisp:error ":connection-name is required") :type
    (common-lisp:or enclosed-in-string-property common-lisp:null))
   (connector-name (common-lisp:error ":connector-name is required") :type
    (common-lisp:or enclosed-in-string-property common-lisp:null))
   (connection-type (common-lisp:error ":connection-type is required") :type
    (common-lisp:or enclosed-in-string-property common-lisp:null))
   (connection-table common-lisp:nil :type
    (common-lisp:or enclosed-in-string-property-with-quote common-lisp:null))
   (schema-name (common-lisp:error ":schema-name is required") :type
    (common-lisp:or enclosed-in-string-property common-lisp:null))
   (output-schemas common-lisp:nil :type
    (common-lisp:or glue-schemas common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'athena-connector-source 'make-athena-connector-source))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          athena-connector-source))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          athena-connector-source))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'connection-name))
      (common-lisp:list
       (common-lisp:cons "ConnectionName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'connector-name))
      (common-lisp:list
       (common-lisp:cons "ConnectorName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'connection-type))
      (common-lisp:list
       (common-lisp:cons "ConnectionType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'connection-table))
      (common-lisp:list
       (common-lisp:cons "ConnectionTable"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'schema-name))
      (common-lisp:list
       (common-lisp:cons "SchemaName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'output-schemas))
      (common-lisp:list
       (common-lisp:cons "OutputSchemas"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          athena-connector-source))
   common-lisp:nil))
(common-lisp:deftype attempt-count () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:deftype audit-column-names-list ()
   '(trivial-types:proper-list column-name-string))
 (common-lisp:defun |make-audit-column-names-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list column-name-string))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (audit-context (:copier common-lisp:nil)
      (:conc-name "struct-shape-audit-context-"))
   (additional-audit-context common-lisp:nil :type
    (common-lisp:or audit-context-string common-lisp:null))
   (requested-columns common-lisp:nil :type
    (common-lisp:or audit-column-names-list common-lisp:null))
   (all-columns-requested common-lisp:nil :type
    (common-lisp:or nullable-boolean common-lisp:null)))
 (common-lisp:export (common-lisp:list 'audit-context 'make-audit-context))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input audit-context))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input audit-context))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'additional-audit-context))
      (common-lisp:list
       (common-lisp:cons "AdditionalAuditContext"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'requested-columns))
      (common-lisp:list
       (common-lisp:cons "RequestedColumns"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'all-columns-requested))
      (common-lisp:list
       (common-lisp:cons "AllColumnsRequested"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input audit-context))
   common-lisp:nil))
(common-lisp:deftype audit-context-string () 'common-lisp:string)
(common-lisp:deftype auth-token-string () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (backfill-error (:copier common-lisp:nil)
      (:conc-name "struct-shape-backfill-error-"))
   (code common-lisp:nil :type
    (common-lisp:or backfill-error-code common-lisp:null))
   (partitions common-lisp:nil :type
    (common-lisp:or backfill-errored-partitions-list common-lisp:null)))
 (common-lisp:export (common-lisp:list 'backfill-error 'make-backfill-error))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input backfill-error))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input backfill-error))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'code))
      (common-lisp:list
       (common-lisp:cons "Code"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'partitions))
      (common-lisp:list
       (common-lisp:cons "Partitions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input backfill-error))
   common-lisp:nil))
(common-lisp:deftype backfill-error-code () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype backfill-errored-partitions-list ()
   '(trivial-types:proper-list partition-value-list))
 (common-lisp:defun |make-backfill-errored-partitions-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list partition-value-list))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype backfill-errors ()
   '(trivial-types:proper-list backfill-error))
 (common-lisp:defun |make-backfill-errors|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list backfill-error))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (basic-catalog-target (:copier common-lisp:nil)
      (:conc-name "struct-shape-basic-catalog-target-"))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or node-name common-lisp:null))
   (inputs (common-lisp:error ":inputs is required") :type
    (common-lisp:or one-input common-lisp:null))
   (database (common-lisp:error ":database is required") :type
    (common-lisp:or enclosed-in-string-property common-lisp:null))
   (table (common-lisp:error ":table is required") :type
    (common-lisp:or enclosed-in-string-property common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'basic-catalog-target 'make-basic-catalog-target))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input basic-catalog-target))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input basic-catalog-target))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'inputs))
      (common-lisp:list
       (common-lisp:cons "Inputs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'database))
      (common-lisp:list
       (common-lisp:cons "Database"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'table))
      (common-lisp:list
       (common-lisp:cons "Table"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input basic-catalog-target))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (batch-create-partition-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-batch-create-partition-request-"))
   (catalog-id common-lisp:nil :type
    (common-lisp:or catalog-id-string common-lisp:null))
   (database-name (common-lisp:error ":database-name is required") :type
    (common-lisp:or name-string common-lisp:null))
   (table-name (common-lisp:error ":table-name is required") :type
    (common-lisp:or name-string common-lisp:null))
   (partition-input-list
    (common-lisp:error ":partition-input-list is required") :type
    (common-lisp:or partition-input-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'batch-create-partition-request
                    'make-batch-create-partition-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-create-partition-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-create-partition-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'catalog-id))
      (common-lisp:list
       (common-lisp:cons "CatalogId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'database-name))
      (common-lisp:list
       (common-lisp:cons "DatabaseName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'table-name))
      (common-lisp:list
       (common-lisp:cons "TableName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'partition-input-list))
      (common-lisp:list
       (common-lisp:cons "PartitionInputList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-create-partition-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (batch-create-partition-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-batch-create-partition-response-"))
   (errors common-lisp:nil :type
    (common-lisp:or partition-errors common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'batch-create-partition-response
                    'make-batch-create-partition-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-create-partition-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-create-partition-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'errors))
      (common-lisp:list
       (common-lisp:cons "Errors"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-create-partition-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (batch-delete-connection-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-batch-delete-connection-request-"))
   (catalog-id common-lisp:nil :type
    (common-lisp:or catalog-id-string common-lisp:null))
   (connection-name-list
    (common-lisp:error ":connection-name-list is required") :type
    (common-lisp:or delete-connection-name-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'batch-delete-connection-request
                    'make-batch-delete-connection-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-delete-connection-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-delete-connection-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'catalog-id))
      (common-lisp:list
       (common-lisp:cons "CatalogId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'connection-name-list))
      (common-lisp:list
       (common-lisp:cons "ConnectionNameList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-delete-connection-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (batch-delete-connection-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-batch-delete-connection-response-"))
   (succeeded common-lisp:nil :type
    (common-lisp:or name-string-list common-lisp:null))
   (errors common-lisp:nil :type
    (common-lisp:or error-by-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'batch-delete-connection-response
                    'make-batch-delete-connection-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-delete-connection-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-delete-connection-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'succeeded))
      (common-lisp:list
       (common-lisp:cons "Succeeded"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'errors))
      (common-lisp:list
       (common-lisp:cons "Errors"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-delete-connection-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (batch-delete-partition-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-batch-delete-partition-request-"))
   (catalog-id common-lisp:nil :type
    (common-lisp:or catalog-id-string common-lisp:null))
   (database-name (common-lisp:error ":database-name is required") :type
    (common-lisp:or name-string common-lisp:null))
   (table-name (common-lisp:error ":table-name is required") :type
    (common-lisp:or name-string common-lisp:null))
   (partitions-to-delete
    (common-lisp:error ":partitions-to-delete is required") :type
    (common-lisp:or batch-delete-partition-value-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'batch-delete-partition-request
                    'make-batch-delete-partition-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-delete-partition-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-delete-partition-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'catalog-id))
      (common-lisp:list
       (common-lisp:cons "CatalogId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'database-name))
      (common-lisp:list
       (common-lisp:cons "DatabaseName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'table-name))
      (common-lisp:list
       (common-lisp:cons "TableName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'partitions-to-delete))
      (common-lisp:list
       (common-lisp:cons "PartitionsToDelete"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-delete-partition-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (batch-delete-partition-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-batch-delete-partition-response-"))
   (errors common-lisp:nil :type
    (common-lisp:or partition-errors common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'batch-delete-partition-response
                    'make-batch-delete-partition-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-delete-partition-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-delete-partition-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'errors))
      (common-lisp:list
       (common-lisp:cons "Errors"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-delete-partition-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype batch-delete-partition-value-list ()
   '(trivial-types:proper-list partition-value-list))
 (common-lisp:defun |make-batch-delete-partition-value-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list partition-value-list))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype batch-delete-table-name-list ()
   '(trivial-types:proper-list name-string))
 (common-lisp:defun |make-batch-delete-table-name-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list name-string))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (batch-delete-table-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-batch-delete-table-request-"))
   (catalog-id common-lisp:nil :type
    (common-lisp:or catalog-id-string common-lisp:null))
   (database-name (common-lisp:error ":database-name is required") :type
    (common-lisp:or name-string common-lisp:null))
   (tables-to-delete (common-lisp:error ":tables-to-delete is required") :type
    (common-lisp:or batch-delete-table-name-list common-lisp:null))
   (transaction-id common-lisp:nil :type
    (common-lisp:or transaction-id-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'batch-delete-table-request
                    'make-batch-delete-table-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-delete-table-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-delete-table-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'catalog-id))
      (common-lisp:list
       (common-lisp:cons "CatalogId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'database-name))
      (common-lisp:list
       (common-lisp:cons "DatabaseName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tables-to-delete))
      (common-lisp:list
       (common-lisp:cons "TablesToDelete"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'transaction-id))
      (common-lisp:list
       (common-lisp:cons "TransactionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-delete-table-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (batch-delete-table-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-batch-delete-table-response-"))
   (errors common-lisp:nil :type
    (common-lisp:or table-errors common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'batch-delete-table-response
                    'make-batch-delete-table-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-delete-table-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-delete-table-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'errors))
      (common-lisp:list
       (common-lisp:cons "Errors"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-delete-table-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype batch-delete-table-version-list ()
   '(trivial-types:proper-list version-string))
 (common-lisp:defun |make-batch-delete-table-version-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list version-string))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (batch-delete-table-version-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-batch-delete-table-version-request-"))
   (catalog-id common-lisp:nil :type
    (common-lisp:or catalog-id-string common-lisp:null))
   (database-name (common-lisp:error ":database-name is required") :type
    (common-lisp:or name-string common-lisp:null))
   (table-name (common-lisp:error ":table-name is required") :type
    (common-lisp:or name-string common-lisp:null))
   (version-ids (common-lisp:error ":version-ids is required") :type
    (common-lisp:or batch-delete-table-version-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'batch-delete-table-version-request
                    'make-batch-delete-table-version-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-delete-table-version-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-delete-table-version-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'catalog-id))
      (common-lisp:list
       (common-lisp:cons "CatalogId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'database-name))
      (common-lisp:list
       (common-lisp:cons "DatabaseName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'table-name))
      (common-lisp:list
       (common-lisp:cons "TableName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version-ids))
      (common-lisp:list
       (common-lisp:cons "VersionIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-delete-table-version-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (batch-delete-table-version-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-batch-delete-table-version-response-"))
   (errors common-lisp:nil :type
    (common-lisp:or table-version-errors common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'batch-delete-table-version-response
                    'make-batch-delete-table-version-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-delete-table-version-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-delete-table-version-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'errors))
      (common-lisp:list
       (common-lisp:cons "Errors"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-delete-table-version-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype batch-get-blueprint-names ()
   '(trivial-types:proper-list orchestration-name-string))
 (common-lisp:defun |make-batch-get-blueprint-names|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            orchestration-name-string))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (batch-get-blueprints-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-batch-get-blueprints-request-"))
   (names (common-lisp:error ":names is required") :type
    (common-lisp:or batch-get-blueprint-names common-lisp:null))
   (include-blueprint common-lisp:nil :type
    (common-lisp:or nullable-boolean common-lisp:null))
   (include-parameter-spec common-lisp:nil :type
    (common-lisp:or nullable-boolean common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'batch-get-blueprints-request
                    'make-batch-get-blueprints-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-blueprints-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-blueprints-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'names))
      (common-lisp:list
       (common-lisp:cons "Names"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'include-blueprint))
      (common-lisp:list
       (common-lisp:cons "IncludeBlueprint"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'include-parameter-spec))
      (common-lisp:list
       (common-lisp:cons "IncludeParameterSpec"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-blueprints-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (batch-get-blueprints-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-batch-get-blueprints-response-"))
   (blueprints common-lisp:nil :type
    (common-lisp:or blueprints common-lisp:null))
   (missing-blueprints common-lisp:nil :type
    (common-lisp:or blueprint-names common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'batch-get-blueprints-response
                    'make-batch-get-blueprints-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-blueprints-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-blueprints-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'blueprints))
      (common-lisp:list
       (common-lisp:cons "Blueprints"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'missing-blueprints))
      (common-lisp:list
       (common-lisp:cons "MissingBlueprints"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-blueprints-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (batch-get-crawlers-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-batch-get-crawlers-request-"))
   (crawler-names (common-lisp:error ":crawler-names is required") :type
    (common-lisp:or crawler-name-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'batch-get-crawlers-request
                    'make-batch-get-crawlers-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-crawlers-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-crawlers-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'crawler-names))
      (common-lisp:list
       (common-lisp:cons "CrawlerNames"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-crawlers-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (batch-get-crawlers-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-batch-get-crawlers-response-"))
   (crawlers common-lisp:nil :type
    (common-lisp:or crawler-list common-lisp:null))
   (crawlers-not-found common-lisp:nil :type
    (common-lisp:or crawler-name-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'batch-get-crawlers-response
                    'make-batch-get-crawlers-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-crawlers-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-crawlers-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'crawlers))
      (common-lisp:list
       (common-lisp:cons "Crawlers"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'crawlers-not-found))
      (common-lisp:list
       (common-lisp:cons "CrawlersNotFound"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-crawlers-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (batch-get-custom-entity-types-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-batch-get-custom-entity-types-request-"))
   (names (common-lisp:error ":names is required") :type
    (common-lisp:or custom-entity-type-names common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'batch-get-custom-entity-types-request
                    'make-batch-get-custom-entity-types-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-custom-entity-types-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-custom-entity-types-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'names))
      (common-lisp:list
       (common-lisp:cons "Names"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-custom-entity-types-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (batch-get-custom-entity-types-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-batch-get-custom-entity-types-response-"))
   (custom-entity-types common-lisp:nil :type
    (common-lisp:or custom-entity-types common-lisp:null))
   (custom-entity-types-not-found common-lisp:nil :type
    (common-lisp:or custom-entity-type-names common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'batch-get-custom-entity-types-response
                    'make-batch-get-custom-entity-types-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-custom-entity-types-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-custom-entity-types-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'custom-entity-types))
      (common-lisp:list
       (common-lisp:cons "CustomEntityTypes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'custom-entity-types-not-found))
      (common-lisp:list
       (common-lisp:cons "CustomEntityTypesNotFound"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-custom-entity-types-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (batch-get-data-quality-result-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-batch-get-data-quality-result-request-"))
   (result-ids (common-lisp:error ":result-ids is required") :type
    (common-lisp:or data-quality-result-ids common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'batch-get-data-quality-result-request
                    'make-batch-get-data-quality-result-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-data-quality-result-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-data-quality-result-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'result-ids))
      (common-lisp:list
       (common-lisp:cons "ResultIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-data-quality-result-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (batch-get-data-quality-result-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-batch-get-data-quality-result-response-"))
   (results (common-lisp:error ":results is required") :type
    (common-lisp:or data-quality-results-list common-lisp:null))
   (results-not-found common-lisp:nil :type
    (common-lisp:or data-quality-result-ids common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'batch-get-data-quality-result-response
                    'make-batch-get-data-quality-result-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-data-quality-result-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-data-quality-result-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'results))
      (common-lisp:list
       (common-lisp:cons "Results"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'results-not-found))
      (common-lisp:list
       (common-lisp:cons "ResultsNotFound"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-data-quality-result-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (batch-get-dev-endpoints-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-batch-get-dev-endpoints-request-"))
   (dev-endpoint-names (common-lisp:error ":dev-endpoint-names is required")
    :type (common-lisp:or dev-endpoint-names common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'batch-get-dev-endpoints-request
                    'make-batch-get-dev-endpoints-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-dev-endpoints-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-dev-endpoints-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dev-endpoint-names))
      (common-lisp:list
       (common-lisp:cons "DevEndpointNames"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-dev-endpoints-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (batch-get-dev-endpoints-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-batch-get-dev-endpoints-response-"))
   (dev-endpoints common-lisp:nil :type
    (common-lisp:or dev-endpoint-list common-lisp:null))
   (dev-endpoints-not-found common-lisp:nil :type
    (common-lisp:or dev-endpoint-names common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'batch-get-dev-endpoints-response
                    'make-batch-get-dev-endpoints-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-dev-endpoints-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-dev-endpoints-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dev-endpoints))
      (common-lisp:list
       (common-lisp:cons "DevEndpoints"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dev-endpoints-not-found))
      (common-lisp:list
       (common-lisp:cons "DevEndpointsNotFound"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-dev-endpoints-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (batch-get-jobs-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-batch-get-jobs-request-"))
   (job-names (common-lisp:error ":job-names is required") :type
    (common-lisp:or job-name-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'batch-get-jobs-request 'make-batch-get-jobs-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-jobs-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-jobs-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-names))
      (common-lisp:list
       (common-lisp:cons "JobNames"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-jobs-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (batch-get-jobs-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-batch-get-jobs-response-"))
   (jobs common-lisp:nil :type (common-lisp:or job-list common-lisp:null))
   (jobs-not-found common-lisp:nil :type
    (common-lisp:or job-name-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'batch-get-jobs-response 'make-batch-get-jobs-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-jobs-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-jobs-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'jobs))
      (common-lisp:list
       (common-lisp:cons "Jobs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'jobs-not-found))
      (common-lisp:list
       (common-lisp:cons "JobsNotFound"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-jobs-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (batch-get-partition-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-batch-get-partition-request-"))
   (catalog-id common-lisp:nil :type
    (common-lisp:or catalog-id-string common-lisp:null))
   (database-name (common-lisp:error ":database-name is required") :type
    (common-lisp:or name-string common-lisp:null))
   (table-name (common-lisp:error ":table-name is required") :type
    (common-lisp:or name-string common-lisp:null))
   (partitions-to-get (common-lisp:error ":partitions-to-get is required")
    :type (common-lisp:or batch-get-partition-value-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'batch-get-partition-request
                    'make-batch-get-partition-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-partition-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-partition-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'catalog-id))
      (common-lisp:list
       (common-lisp:cons "CatalogId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'database-name))
      (common-lisp:list
       (common-lisp:cons "DatabaseName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'table-name))
      (common-lisp:list
       (common-lisp:cons "TableName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'partitions-to-get))
      (common-lisp:list
       (common-lisp:cons "PartitionsToGet"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-partition-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (batch-get-partition-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-batch-get-partition-response-"))
   (partitions common-lisp:nil :type
    (common-lisp:or partition-list common-lisp:null))
   (unprocessed-keys common-lisp:nil :type
    (common-lisp:or batch-get-partition-value-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'batch-get-partition-response
                    'make-batch-get-partition-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-partition-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-partition-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'partitions))
      (common-lisp:list
       (common-lisp:cons "Partitions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'unprocessed-keys))
      (common-lisp:list
       (common-lisp:cons "UnprocessedKeys"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-partition-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype batch-get-partition-value-list ()
   '(trivial-types:proper-list partition-value-list))
 (common-lisp:defun |make-batch-get-partition-value-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list partition-value-list))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (batch-get-triggers-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-batch-get-triggers-request-"))
   (trigger-names (common-lisp:error ":trigger-names is required") :type
    (common-lisp:or trigger-name-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'batch-get-triggers-request
                    'make-batch-get-triggers-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-triggers-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-triggers-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'trigger-names))
      (common-lisp:list
       (common-lisp:cons "TriggerNames"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-triggers-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (batch-get-triggers-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-batch-get-triggers-response-"))
   (triggers common-lisp:nil :type
    (common-lisp:or trigger-list common-lisp:null))
   (triggers-not-found common-lisp:nil :type
    (common-lisp:or trigger-name-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'batch-get-triggers-response
                    'make-batch-get-triggers-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-triggers-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-triggers-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'triggers))
      (common-lisp:list
       (common-lisp:cons "Triggers"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'triggers-not-found))
      (common-lisp:list
       (common-lisp:cons "TriggersNotFound"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-triggers-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (batch-get-workflows-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-batch-get-workflows-request-"))
   (names (common-lisp:error ":names is required") :type
    (common-lisp:or workflow-names common-lisp:null))
   (include-graph common-lisp:nil :type
    (common-lisp:or nullable-boolean common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'batch-get-workflows-request
                    'make-batch-get-workflows-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-workflows-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-workflows-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'names))
      (common-lisp:list
       (common-lisp:cons "Names"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'include-graph))
      (common-lisp:list
       (common-lisp:cons "IncludeGraph"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-workflows-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (batch-get-workflows-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-batch-get-workflows-response-"))
   (workflows common-lisp:nil :type
    (common-lisp:or workflows common-lisp:null))
   (missing-workflows common-lisp:nil :type
    (common-lisp:or workflow-names common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'batch-get-workflows-response
                    'make-batch-get-workflows-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-workflows-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-workflows-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'workflows))
      (common-lisp:list
       (common-lisp:cons "Workflows"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'missing-workflows))
      (common-lisp:list
       (common-lisp:cons "MissingWorkflows"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-workflows-response))
   common-lisp:nil))
(common-lisp:deftype batch-size () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defstruct
     (batch-stop-job-run-error (:copier common-lisp:nil)
      (:conc-name "struct-shape-batch-stop-job-run-error-"))
   (job-name common-lisp:nil :type
    (common-lisp:or name-string common-lisp:null))
   (job-run-id common-lisp:nil :type
    (common-lisp:or id-string common-lisp:null))
   (error-detail common-lisp:nil :type
    (common-lisp:or error-detail common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'batch-stop-job-run-error 'make-batch-stop-job-run-error))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-stop-job-run-error))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-stop-job-run-error))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-name))
      (common-lisp:list
       (common-lisp:cons "JobName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-run-id))
      (common-lisp:list
       (common-lisp:cons "JobRunId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error-detail))
      (common-lisp:list
       (common-lisp:cons "ErrorDetail"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-stop-job-run-error))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype batch-stop-job-run-error-list ()
   '(trivial-types:proper-list batch-stop-job-run-error))
 (common-lisp:defun |make-batch-stop-job-run-error-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            batch-stop-job-run-error))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype batch-stop-job-run-job-run-id-list ()
   '(trivial-types:proper-list id-string))
 (common-lisp:defun |make-batch-stop-job-run-job-run-id-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list id-string))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (batch-stop-job-run-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-batch-stop-job-run-request-"))
   (job-name (common-lisp:error ":job-name is required") :type
    (common-lisp:or name-string common-lisp:null))
   (job-run-ids (common-lisp:error ":job-run-ids is required") :type
    (common-lisp:or batch-stop-job-run-job-run-id-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'batch-stop-job-run-request
                    'make-batch-stop-job-run-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-stop-job-run-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-stop-job-run-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-name))
      (common-lisp:list
       (common-lisp:cons "JobName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-run-ids))
      (common-lisp:list
       (common-lisp:cons "JobRunIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-stop-job-run-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (batch-stop-job-run-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-batch-stop-job-run-response-"))
   (successful-submissions common-lisp:nil :type
    (common-lisp:or batch-stop-job-run-successful-submission-list
                    common-lisp:null))
   (errors common-lisp:nil :type
    (common-lisp:or batch-stop-job-run-error-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'batch-stop-job-run-response
                    'make-batch-stop-job-run-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-stop-job-run-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-stop-job-run-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'successful-submissions))
      (common-lisp:list
       (common-lisp:cons "SuccessfulSubmissions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'errors))
      (common-lisp:list
       (common-lisp:cons "Errors"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-stop-job-run-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (batch-stop-job-run-successful-submission (:copier common-lisp:nil)
      (:conc-name "struct-shape-batch-stop-job-run-successful-submission-"))
   (job-name common-lisp:nil :type
    (common-lisp:or name-string common-lisp:null))
   (job-run-id common-lisp:nil :type
    (common-lisp:or id-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'batch-stop-job-run-successful-submission
                    'make-batch-stop-job-run-successful-submission))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-stop-job-run-successful-submission))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-stop-job-run-successful-submission))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-name))
      (common-lisp:list
       (common-lisp:cons "JobName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-run-id))
      (common-lisp:list
       (common-lisp:cons "JobRunId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-stop-job-run-successful-submission))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype batch-stop-job-run-successful-submission-list ()
   '(trivial-types:proper-list batch-stop-job-run-successful-submission))
 (common-lisp:defun |make-batch-stop-job-run-successful-submission-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            batch-stop-job-run-successful-submission))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (batch-update-partition-failure-entry (:copier common-lisp:nil)
      (:conc-name "struct-shape-batch-update-partition-failure-entry-"))
   (partition-value-list common-lisp:nil :type
    (common-lisp:or bounded-partition-value-list common-lisp:null))
   (error-detail common-lisp:nil :type
    (common-lisp:or error-detail common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'batch-update-partition-failure-entry
                    'make-batch-update-partition-failure-entry))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-update-partition-failure-entry))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-update-partition-failure-entry))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'partition-value-list))
      (common-lisp:list
       (common-lisp:cons "PartitionValueList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error-detail))
      (common-lisp:list
       (common-lisp:cons "ErrorDetail"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-update-partition-failure-entry))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype batch-update-partition-failure-list ()
   '(trivial-types:proper-list batch-update-partition-failure-entry))
 (common-lisp:defun |make-batch-update-partition-failure-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            batch-update-partition-failure-entry))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (batch-update-partition-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-batch-update-partition-request-"))
   (catalog-id common-lisp:nil :type
    (common-lisp:or catalog-id-string common-lisp:null))
   (database-name (common-lisp:error ":database-name is required") :type
    (common-lisp:or name-string common-lisp:null))
   (table-name (common-lisp:error ":table-name is required") :type
    (common-lisp:or name-string common-lisp:null))
   (entries (common-lisp:error ":entries is required") :type
    (common-lisp:or batch-update-partition-request-entry-list
                    common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'batch-update-partition-request
                    'make-batch-update-partition-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-update-partition-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-update-partition-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'catalog-id))
      (common-lisp:list
       (common-lisp:cons "CatalogId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'database-name))
      (common-lisp:list
       (common-lisp:cons "DatabaseName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'table-name))
      (common-lisp:list
       (common-lisp:cons "TableName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'entries))
      (common-lisp:list
       (common-lisp:cons "Entries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-update-partition-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (batch-update-partition-request-entry (:copier common-lisp:nil)
      (:conc-name "struct-shape-batch-update-partition-request-entry-"))
   (partition-value-list
    (common-lisp:error ":partition-value-list is required") :type
    (common-lisp:or bounded-partition-value-list common-lisp:null))
   (partition-input (common-lisp:error ":partition-input is required") :type
    (common-lisp:or partition-input common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'batch-update-partition-request-entry
                    'make-batch-update-partition-request-entry))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-update-partition-request-entry))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-update-partition-request-entry))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'partition-value-list))
      (common-lisp:list
       (common-lisp:cons "PartitionValueList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'partition-input))
      (common-lisp:list
       (common-lisp:cons "PartitionInput"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-update-partition-request-entry))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype batch-update-partition-request-entry-list ()
   '(trivial-types:proper-list batch-update-partition-request-entry))
 (common-lisp:defun |make-batch-update-partition-request-entry-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            batch-update-partition-request-entry))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (batch-update-partition-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-batch-update-partition-response-"))
   (errors common-lisp:nil :type
    (common-lisp:or batch-update-partition-failure-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'batch-update-partition-response
                    'make-batch-update-partition-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-update-partition-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-update-partition-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'errors))
      (common-lisp:list
       (common-lisp:cons "Errors"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-update-partition-response))
   common-lisp:nil))
(common-lisp:deftype batch-window () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defstruct
     (binary-column-statistics-data (:copier common-lisp:nil)
      (:conc-name "struct-shape-binary-column-statistics-data-"))
   (maximum-length (common-lisp:error ":maximum-length is required") :type
    (common-lisp:or non-negative-long common-lisp:null))
   (average-length (common-lisp:error ":average-length is required") :type
    (common-lisp:or non-negative-double common-lisp:null))
   (number-of-nulls (common-lisp:error ":number-of-nulls is required") :type
    (common-lisp:or non-negative-long common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'binary-column-statistics-data
                    'make-binary-column-statistics-data))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          binary-column-statistics-data))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          binary-column-statistics-data))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'maximum-length))
      (common-lisp:list
       (common-lisp:cons "MaximumLength"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'average-length))
      (common-lisp:list
       (common-lisp:cons "AverageLength"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'number-of-nulls))
      (common-lisp:list
       (common-lisp:cons "NumberOfNulls"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          binary-column-statistics-data))
   common-lisp:nil))
(common-lisp:deftype blob ()
  '(common-lisp:simple-array (common-lisp:unsigned-byte 8) (common-lisp:*)))
(common-lisp:progn
 (common-lisp:defstruct
     (blueprint (:copier common-lisp:nil)
      (:conc-name "struct-shape-blueprint-"))
   (name common-lisp:nil :type
    (common-lisp:or orchestration-name-string common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or generic512char-string common-lisp:null))
   (created-on common-lisp:nil :type
    (common-lisp:or timestamp-value common-lisp:null))
   (last-modified-on common-lisp:nil :type
    (common-lisp:or timestamp-value common-lisp:null))
   (parameter-spec common-lisp:nil :type
    (common-lisp:or blueprint-parameter-spec common-lisp:null))
   (blueprint-location common-lisp:nil :type
    (common-lisp:or generic-string common-lisp:null))
   (blueprint-service-location common-lisp:nil :type
    (common-lisp:or generic-string common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or blueprint-status common-lisp:null))
   (error-message common-lisp:nil :type
    (common-lisp:or error-string common-lisp:null))
   (last-active-definition common-lisp:nil :type
    (common-lisp:or last-active-definition common-lisp:null)))
 (common-lisp:export (common-lisp:list 'blueprint 'make-blueprint))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input blueprint))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input blueprint))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-on))
      (common-lisp:list
       (common-lisp:cons "CreatedOn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-modified-on))
      (common-lisp:list
       (common-lisp:cons "LastModifiedOn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'parameter-spec))
      (common-lisp:list
       (common-lisp:cons "ParameterSpec"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'blueprint-location))
      (common-lisp:list
       (common-lisp:cons "BlueprintLocation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'blueprint-service-location))
      (common-lisp:list
       (common-lisp:cons "BlueprintServiceLocation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error-message))
      (common-lisp:list
       (common-lisp:cons "ErrorMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'last-active-definition))
      (common-lisp:list
       (common-lisp:cons "LastActiveDefinition"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input blueprint))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (blueprint-details (:copier common-lisp:nil)
      (:conc-name "struct-shape-blueprint-details-"))
   (blueprint-name common-lisp:nil :type
    (common-lisp:or orchestration-name-string common-lisp:null))
   (run-id common-lisp:nil :type (common-lisp:or id-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'blueprint-details 'make-blueprint-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input blueprint-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input blueprint-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'blueprint-name))
      (common-lisp:list
       (common-lisp:cons "BlueprintName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'run-id))
      (common-lisp:list
       (common-lisp:cons "RunId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input blueprint-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype blueprint-names ()
   '(trivial-types:proper-list orchestration-name-string))
 (common-lisp:defun |make-blueprint-names|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            orchestration-name-string))
   aws-sdk/generator/shape::members))
(common-lisp:deftype blueprint-parameter-spec () 'common-lisp:string)
(common-lisp:deftype blueprint-parameters () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (blueprint-run (:copier common-lisp:nil)
      (:conc-name "struct-shape-blueprint-run-"))
   (blueprint-name common-lisp:nil :type
    (common-lisp:or orchestration-name-string common-lisp:null))
   (run-id common-lisp:nil :type (common-lisp:or id-string common-lisp:null))
   (workflow-name common-lisp:nil :type
    (common-lisp:or name-string common-lisp:null))
   (state common-lisp:nil :type
    (common-lisp:or blueprint-run-state common-lisp:null))
   (started-on common-lisp:nil :type
    (common-lisp:or timestamp-value common-lisp:null))
   (completed-on common-lisp:nil :type
    (common-lisp:or timestamp-value common-lisp:null))
   (error-message common-lisp:nil :type
    (common-lisp:or message-string common-lisp:null))
   (rollback-error-message common-lisp:nil :type
    (common-lisp:or message-string common-lisp:null))
   (parameters common-lisp:nil :type
    (common-lisp:or blueprint-parameters common-lisp:null))
   (role-arn common-lisp:nil :type
    (common-lisp:or orchestration-iamrole-arn common-lisp:null)))
 (common-lisp:export (common-lisp:list 'blueprint-run 'make-blueprint-run))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input blueprint-run))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input blueprint-run))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'blueprint-name))
      (common-lisp:list
       (common-lisp:cons "BlueprintName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'run-id))
      (common-lisp:list
       (common-lisp:cons "RunId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'workflow-name))
      (common-lisp:list
       (common-lisp:cons "WorkflowName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "State"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'started-on))
      (common-lisp:list
       (common-lisp:cons "StartedOn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'completed-on))
      (common-lisp:list
       (common-lisp:cons "CompletedOn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error-message))
      (common-lisp:list
       (common-lisp:cons "ErrorMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'rollback-error-message))
      (common-lisp:list
       (common-lisp:cons "RollbackErrorMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'parameters))
      (common-lisp:list
       (common-lisp:cons "Parameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "RoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input blueprint-run))
   common-lisp:nil))
(common-lisp:deftype blueprint-run-state () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype blueprint-runs ()
   '(trivial-types:proper-list blueprint-run))
 (common-lisp:defun |make-blueprint-runs|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list blueprint-run))
   aws-sdk/generator/shape::members))
(common-lisp:deftype blueprint-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype blueprints () '(trivial-types:proper-list blueprint))
 (common-lisp:defun |make-blueprints|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list blueprint))
   aws-sdk/generator/shape::members))
(common-lisp:deftype boolean () 'common-lisp:boolean)
(common-lisp:progn
 (common-lisp:defstruct
     (boolean-column-statistics-data (:copier common-lisp:nil)
      (:conc-name "struct-shape-boolean-column-statistics-data-"))
   (number-of-trues (common-lisp:error ":number-of-trues is required") :type
    (common-lisp:or non-negative-long common-lisp:null))
   (number-of-falses (common-lisp:error ":number-of-falses is required") :type
    (common-lisp:or non-negative-long common-lisp:null))
   (number-of-nulls (common-lisp:error ":number-of-nulls is required") :type
    (common-lisp:or non-negative-long common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'boolean-column-statistics-data
                    'make-boolean-column-statistics-data))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          boolean-column-statistics-data))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          boolean-column-statistics-data))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'number-of-trues))
      (common-lisp:list
       (common-lisp:cons "NumberOfTrues"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'number-of-falses))
      (common-lisp:list
       (common-lisp:cons "NumberOfFalses"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'number-of-nulls))
      (common-lisp:list
       (common-lisp:cons "NumberOfNulls"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          boolean-column-statistics-data))
   common-lisp:nil))
(common-lisp:deftype boolean-nullable () 'common-lisp:boolean)
(common-lisp:deftype boolean-value () 'common-lisp:boolean)
(common-lisp:progn
 (common-lisp:deftype bounded-partition-value-list ()
   '(trivial-types:proper-list value-string))
 (common-lisp:defun |make-bounded-partition-value-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list value-string))
   aws-sdk/generator/shape::members))
(common-lisp:deftype boxed-boolean () 'common-lisp:boolean)
(common-lisp:deftype boxed-double-fraction () 'common-lisp:double-float)
(common-lisp:deftype boxed-long () 'common-lisp:integer)
(common-lisp:deftype boxed-non-negative-int () 'common-lisp:integer)
(common-lisp:deftype boxed-non-negative-long () 'common-lisp:integer)
(common-lisp:deftype boxed-positive-int () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defstruct
     (cancel-data-quality-rule-recommendation-run-request
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-cancel-data-quality-rule-recommendation-run-request-"))
   (run-id (common-lisp:error ":run-id is required") :type
    (common-lisp:or hash-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'cancel-data-quality-rule-recommendation-run-request
                    'make-cancel-data-quality-rule-recommendation-run-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          cancel-data-quality-rule-recommendation-run-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          cancel-data-quality-rule-recommendation-run-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'run-id))
      (common-lisp:list
       (common-lisp:cons "RunId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          cancel-data-quality-rule-recommendation-run-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (cancel-data-quality-rule-recommendation-run-response
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-cancel-data-quality-rule-recommendation-run-response-")))
 (common-lisp:export
  (common-lisp:list 'cancel-data-quality-rule-recommendation-run-response
                    'make-cancel-data-quality-rule-recommendation-run-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          cancel-data-quality-rule-recommendation-run-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          cancel-data-quality-rule-recommendation-run-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          cancel-data-quality-rule-recommendation-run-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (cancel-data-quality-ruleset-evaluation-run-request
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-cancel-data-quality-ruleset-evaluation-run-request-"))
   (run-id (common-lisp:error ":run-id is required") :type
    (common-lisp:or hash-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'cancel-data-quality-ruleset-evaluation-run-request
                    'make-cancel-data-quality-ruleset-evaluation-run-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          cancel-data-quality-ruleset-evaluation-run-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          cancel-data-quality-ruleset-evaluation-run-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'run-id))
      (common-lisp:list
       (common-lisp:cons "RunId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          cancel-data-quality-ruleset-evaluation-run-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (cancel-data-quality-ruleset-evaluation-run-response
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-cancel-data-quality-ruleset-evaluation-run-response-")))
 (common-lisp:export
  (common-lisp:list 'cancel-data-quality-ruleset-evaluation-run-response
                    'make-cancel-data-quality-ruleset-evaluation-run-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          cancel-data-quality-ruleset-evaluation-run-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          cancel-data-quality-ruleset-evaluation-run-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          cancel-data-quality-ruleset-evaluation-run-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (cancel-mltask-run-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-cancel-mltask-run-request-"))
   (transform-id (common-lisp:error ":transform-id is required") :type
    (common-lisp:or hash-string common-lisp:null))
   (task-run-id (common-lisp:error ":task-run-id is required") :type
    (common-lisp:or hash-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'cancel-mltask-run-request
                    'make-cancel-mltask-run-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          cancel-mltask-run-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          cancel-mltask-run-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'transform-id))
      (common-lisp:list
       (common-lisp:cons "TransformId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'task-run-id))
      (common-lisp:list
       (common-lisp:cons "TaskRunId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          cancel-mltask-run-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (cancel-mltask-run-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-cancel-mltask-run-response-"))
   (transform-id common-lisp:nil :type
    (common-lisp:or hash-string common-lisp:null))
   (task-run-id common-lisp:nil :type
    (common-lisp:or hash-string common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or task-status-type common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'cancel-mltask-run-response
                    'make-cancel-mltask-run-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          cancel-mltask-run-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          cancel-mltask-run-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'transform-id))
      (common-lisp:list
       (common-lisp:cons "TransformId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'task-run-id))
      (common-lisp:list
       (common-lisp:cons "TaskRunId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          cancel-mltask-run-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (cancel-statement-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-cancel-statement-request-"))
   (session-id (common-lisp:error ":session-id is required") :type
    (common-lisp:or name-string common-lisp:null))
   (id (common-lisp:error ":id is required") :type
    (common-lisp:or integer-value common-lisp:null))
   (request-origin common-lisp:nil :type
    (common-lisp:or orchestration-name-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'cancel-statement-request 'make-cancel-statement-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          cancel-statement-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          cancel-statement-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'session-id))
      (common-lisp:list
       (common-lisp:cons "SessionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-origin))
      (common-lisp:list
       (common-lisp:cons "RequestOrigin"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          cancel-statement-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (cancel-statement-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-cancel-statement-response-")))
 (common-lisp:export
  (common-lisp:list 'cancel-statement-response
                    'make-cancel-statement-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          cancel-statement-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          cancel-statement-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          cancel-statement-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (catalog-delta-source (:copier common-lisp:nil)
      (:conc-name "struct-shape-catalog-delta-source-"))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or node-name common-lisp:null))
   (database (common-lisp:error ":database is required") :type
    (common-lisp:or enclosed-in-string-property common-lisp:null))
   (table (common-lisp:error ":table is required") :type
    (common-lisp:or enclosed-in-string-property common-lisp:null))
   (additional-delta-options common-lisp:nil :type
    (common-lisp:or additional-options common-lisp:null))
   (output-schemas common-lisp:nil :type
    (common-lisp:or glue-schemas common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'catalog-delta-source 'make-catalog-delta-source))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input catalog-delta-source))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input catalog-delta-source))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'database))
      (common-lisp:list
       (common-lisp:cons "Database"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'table))
      (common-lisp:list
       (common-lisp:cons "Table"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'additional-delta-options))
      (common-lisp:list
       (common-lisp:cons "AdditionalDeltaOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'output-schemas))
      (common-lisp:list
       (common-lisp:cons "OutputSchemas"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input catalog-delta-source))
   common-lisp:nil))
(common-lisp:deftype catalog-encryption-mode () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype catalog-entries ()
   '(trivial-types:proper-list catalog-entry))
 (common-lisp:defun |make-catalog-entries|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list catalog-entry))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (catalog-entry (:copier common-lisp:nil)
      (:conc-name "struct-shape-catalog-entry-"))
   (database-name (common-lisp:error ":database-name is required") :type
    (common-lisp:or name-string common-lisp:null))
   (table-name (common-lisp:error ":table-name is required") :type
    (common-lisp:or name-string common-lisp:null)))
 (common-lisp:export (common-lisp:list 'catalog-entry 'make-catalog-entry))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input catalog-entry))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input catalog-entry))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'database-name))
      (common-lisp:list
       (common-lisp:cons "DatabaseName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'table-name))
      (common-lisp:list
       (common-lisp:cons "TableName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input catalog-entry))
   common-lisp:nil))
(common-lisp:deftype catalog-getter-page-size () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defstruct
     (catalog-hudi-source (:copier common-lisp:nil)
      (:conc-name "struct-shape-catalog-hudi-source-"))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or node-name common-lisp:null))
   (database (common-lisp:error ":database is required") :type
    (common-lisp:or enclosed-in-string-property common-lisp:null))
   (table (common-lisp:error ":table is required") :type
    (common-lisp:or enclosed-in-string-property common-lisp:null))
   (additional-hudi-options common-lisp:nil :type
    (common-lisp:or additional-options common-lisp:null))
   (output-schemas common-lisp:nil :type
    (common-lisp:or glue-schemas common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'catalog-hudi-source 'make-catalog-hudi-source))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input catalog-hudi-source))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input catalog-hudi-source))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'database))
      (common-lisp:list
       (common-lisp:cons "Database"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'table))
      (common-lisp:list
       (common-lisp:cons "Table"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'additional-hudi-options))
      (common-lisp:list
       (common-lisp:cons "AdditionalHudiOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'output-schemas))
      (common-lisp:list
       (common-lisp:cons "OutputSchemas"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input catalog-hudi-source))
   common-lisp:nil))
(common-lisp:deftype catalog-id-string () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (catalog-import-status (:copier common-lisp:nil)
      (:conc-name "struct-shape-catalog-import-status-"))
   (import-completed common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (import-time common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (imported-by common-lisp:nil :type
    (common-lisp:or name-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'catalog-import-status 'make-catalog-import-status))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          catalog-import-status))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          catalog-import-status))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'import-completed))
      (common-lisp:list
       (common-lisp:cons "ImportCompleted"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'import-time))
      (common-lisp:list
       (common-lisp:cons "ImportTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'imported-by))
      (common-lisp:list
       (common-lisp:cons "ImportedBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          catalog-import-status))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (catalog-kafka-source (:copier common-lisp:nil)
      (:conc-name "struct-shape-catalog-kafka-source-"))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or node-name common-lisp:null))
   (window-size common-lisp:nil :type
    (common-lisp:or boxed-positive-int common-lisp:null))
   (detect-schema common-lisp:nil :type
    (common-lisp:or boxed-boolean common-lisp:null))
   (table (common-lisp:error ":table is required") :type
    (common-lisp:or enclosed-in-string-property common-lisp:null))
   (database (common-lisp:error ":database is required") :type
    (common-lisp:or enclosed-in-string-property common-lisp:null))
   (streaming-options common-lisp:nil :type
    (common-lisp:or kafka-streaming-source-options common-lisp:null))
   (data-preview-options common-lisp:nil :type
    (common-lisp:or streaming-data-preview-options common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'catalog-kafka-source 'make-catalog-kafka-source))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input catalog-kafka-source))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input catalog-kafka-source))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'window-size))
      (common-lisp:list
       (common-lisp:cons "WindowSize"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'detect-schema))
      (common-lisp:list
       (common-lisp:cons "DetectSchema"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'table))
      (common-lisp:list
       (common-lisp:cons "Table"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'database))
      (common-lisp:list
       (common-lisp:cons "Database"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'streaming-options))
      (common-lisp:list
       (common-lisp:cons "StreamingOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'data-preview-options))
      (common-lisp:list
       (common-lisp:cons "DataPreviewOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input catalog-kafka-source))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (catalog-kinesis-source (:copier common-lisp:nil)
      (:conc-name "struct-shape-catalog-kinesis-source-"))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or node-name common-lisp:null))
   (window-size common-lisp:nil :type
    (common-lisp:or boxed-positive-int common-lisp:null))
   (detect-schema common-lisp:nil :type
    (common-lisp:or boxed-boolean common-lisp:null))
   (table (common-lisp:error ":table is required") :type
    (common-lisp:or enclosed-in-string-property common-lisp:null))
   (database (common-lisp:error ":database is required") :type
    (common-lisp:or enclosed-in-string-property common-lisp:null))
   (streaming-options common-lisp:nil :type
    (common-lisp:or kinesis-streaming-source-options common-lisp:null))
   (data-preview-options common-lisp:nil :type
    (common-lisp:or streaming-data-preview-options common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'catalog-kinesis-source 'make-catalog-kinesis-source))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          catalog-kinesis-source))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          catalog-kinesis-source))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'window-size))
      (common-lisp:list
       (common-lisp:cons "WindowSize"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'detect-schema))
      (common-lisp:list
       (common-lisp:cons "DetectSchema"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'table))
      (common-lisp:list
       (common-lisp:cons "Table"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'database))
      (common-lisp:list
       (common-lisp:cons "Database"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'streaming-options))
      (common-lisp:list
       (common-lisp:cons "StreamingOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'data-preview-options))
      (common-lisp:list
       (common-lisp:cons "DataPreviewOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          catalog-kinesis-source))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (catalog-schema-change-policy (:copier common-lisp:nil)
      (:conc-name "struct-shape-catalog-schema-change-policy-"))
   (enable-update-catalog common-lisp:nil :type
    (common-lisp:or boxed-boolean common-lisp:null))
   (update-behavior common-lisp:nil :type
    (common-lisp:or update-catalog-behavior common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'catalog-schema-change-policy
                    'make-catalog-schema-change-policy))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          catalog-schema-change-policy))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          catalog-schema-change-policy))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'enable-update-catalog))
      (common-lisp:list
       (common-lisp:cons "EnableUpdateCatalog"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'update-behavior))
      (common-lisp:list
       (common-lisp:cons "UpdateBehavior"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          catalog-schema-change-policy))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (catalog-source (:copier common-lisp:nil)
      (:conc-name "struct-shape-catalog-source-"))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or node-name common-lisp:null))
   (database (common-lisp:error ":database is required") :type
    (common-lisp:or enclosed-in-string-property common-lisp:null))
   (table (common-lisp:error ":table is required") :type
    (common-lisp:or enclosed-in-string-property common-lisp:null)))
 (common-lisp:export (common-lisp:list 'catalog-source 'make-catalog-source))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input catalog-source))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input catalog-source))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'database))
      (common-lisp:list
       (common-lisp:cons "Database"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'table))
      (common-lisp:list
       (common-lisp:cons "Table"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input catalog-source))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype catalog-tables-list ()
   '(trivial-types:proper-list name-string))
 (common-lisp:defun |make-catalog-tables-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list name-string))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (catalog-target (:copier common-lisp:nil)
      (:conc-name "struct-shape-catalog-target-"))
   (database-name (common-lisp:error ":database-name is required") :type
    (common-lisp:or name-string common-lisp:null))
   (tables (common-lisp:error ":tables is required") :type
    (common-lisp:or catalog-tables-list common-lisp:null))
   (connection-name common-lisp:nil :type
    (common-lisp:or connection-name common-lisp:null))
   (event-queue-arn common-lisp:nil :type
    (common-lisp:or event-queue-arn common-lisp:null))
   (dlq-event-queue-arn common-lisp:nil :type
    (common-lisp:or event-queue-arn common-lisp:null)))
 (common-lisp:export (common-lisp:list 'catalog-target 'make-catalog-target))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input catalog-target))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input catalog-target))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'database-name))
      (common-lisp:list
       (common-lisp:cons "DatabaseName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tables))
      (common-lisp:list
       (common-lisp:cons "Tables"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'connection-name))
      (common-lisp:list
       (common-lisp:cons "ConnectionName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'event-queue-arn))
      (common-lisp:list
       (common-lisp:cons "EventQueueArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dlq-event-queue-arn))
      (common-lisp:list
       (common-lisp:cons "DlqEventQueueArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input catalog-target))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype catalog-target-list ()
   '(trivial-types:proper-list catalog-target))
 (common-lisp:defun |make-catalog-target-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list catalog-target))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (check-schema-version-validity-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-check-schema-version-validity-input-"))
   (data-format (common-lisp:error ":data-format is required") :type
    (common-lisp:or data-format common-lisp:null))
   (schema-definition (common-lisp:error ":schema-definition is required")
    :type (common-lisp:or schema-definition-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'check-schema-version-validity-input
                    'make-check-schema-version-validity-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          check-schema-version-validity-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          check-schema-version-validity-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-format))
      (common-lisp:list
       (common-lisp:cons "DataFormat"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'schema-definition))
      (common-lisp:list
       (common-lisp:cons "SchemaDefinition"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          check-schema-version-validity-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (check-schema-version-validity-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-check-schema-version-validity-response-"))
   (valid common-lisp:nil :type
    (common-lisp:or is-version-valid common-lisp:null))
   (error common-lisp:nil :type
    (common-lisp:or schema-validation-error common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'check-schema-version-validity-response
                    'make-check-schema-version-validity-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          check-schema-version-validity-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          check-schema-version-validity-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'valid))
      (common-lisp:list
       (common-lisp:cons "Valid"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error))
      (common-lisp:list
       (common-lisp:cons "Error"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          check-schema-version-validity-response))
   common-lisp:nil))
(common-lisp:deftype classification () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (classifier (:copier common-lisp:nil)
      (:conc-name "struct-shape-classifier-"))
   (grok-classifier common-lisp:nil :type
    (common-lisp:or grok-classifier common-lisp:null))
   (xmlclassifier common-lisp:nil :type
    (common-lisp:or xmlclassifier common-lisp:null))
   (json-classifier common-lisp:nil :type
    (common-lisp:or json-classifier common-lisp:null))
   (csv-classifier common-lisp:nil :type
    (common-lisp:or csv-classifier common-lisp:null)))
 (common-lisp:export (common-lisp:list 'classifier 'make-classifier))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input classifier))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input classifier))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'grok-classifier))
      (common-lisp:list
       (common-lisp:cons "GrokClassifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'xmlclassifier))
      (common-lisp:list
       (common-lisp:cons "XMLClassifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'json-classifier))
      (common-lisp:list
       (common-lisp:cons "JsonClassifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'csv-classifier))
      (common-lisp:list
       (common-lisp:cons "CsvClassifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input classifier))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype classifier-list ()
   '(trivial-types:proper-list classifier))
 (common-lisp:defun |make-classifier-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list classifier))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype classifier-name-list ()
   '(trivial-types:proper-list name-string))
 (common-lisp:defun |make-classifier-name-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list name-string))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (cloud-watch-encryption (:copier common-lisp:nil)
      (:conc-name "struct-shape-cloud-watch-encryption-"))
   (cloud-watch-encryption-mode common-lisp:nil :type
    (common-lisp:or cloud-watch-encryption-mode common-lisp:null))
   (kms-key-arn common-lisp:nil :type
    (common-lisp:or kms-key-arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'cloud-watch-encryption 'make-cloud-watch-encryption))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          cloud-watch-encryption))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          cloud-watch-encryption))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cloud-watch-encryption-mode))
      (common-lisp:list
       (common-lisp:cons "CloudWatchEncryptionMode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kms-key-arn))
      (common-lisp:list
       (common-lisp:cons "KmsKeyArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          cloud-watch-encryption))
   common-lisp:nil))
(common-lisp:deftype cloud-watch-encryption-mode () 'common-lisp:string)
(common-lisp:deftype code-gen-arg-name () 'common-lisp:string)
(common-lisp:deftype code-gen-arg-value () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (code-gen-configuration-node (:copier common-lisp:nil)
      (:conc-name "struct-shape-code-gen-configuration-node-"))
   (athena-connector-source common-lisp:nil :type
    (common-lisp:or athena-connector-source common-lisp:null))
   (jdbcconnector-source common-lisp:nil :type
    (common-lisp:or jdbcconnector-source common-lisp:null))
   (spark-connector-source common-lisp:nil :type
    (common-lisp:or spark-connector-source common-lisp:null))
   (catalog-source common-lisp:nil :type
    (common-lisp:or catalog-source common-lisp:null))
   (redshift-source common-lisp:nil :type
    (common-lisp:or redshift-source common-lisp:null))
   (s3catalog-source common-lisp:nil :type
    (common-lisp:or s3catalog-source common-lisp:null))
   (s3csv-source common-lisp:nil :type
    (common-lisp:or s3csv-source common-lisp:null))
   (s3json-source common-lisp:nil :type
    (common-lisp:or s3json-source common-lisp:null))
   (s3parquet-source common-lisp:nil :type
    (common-lisp:or s3parquet-source common-lisp:null))
   (relational-catalog-source common-lisp:nil :type
    (common-lisp:or relational-catalog-source common-lisp:null))
   (dynamo-dbcatalog-source common-lisp:nil :type
    (common-lisp:or dynamo-dbcatalog-source common-lisp:null))
   (jdbcconnector-target common-lisp:nil :type
    (common-lisp:or jdbcconnector-target common-lisp:null))
   (spark-connector-target common-lisp:nil :type
    (common-lisp:or spark-connector-target common-lisp:null))
   (catalog-target common-lisp:nil :type
    (common-lisp:or basic-catalog-target common-lisp:null))
   (redshift-target common-lisp:nil :type
    (common-lisp:or redshift-target common-lisp:null))
   (s3catalog-target common-lisp:nil :type
    (common-lisp:or s3catalog-target common-lisp:null))
   (s3glue-parquet-target common-lisp:nil :type
    (common-lisp:or s3glue-parquet-target common-lisp:null))
   (s3direct-target common-lisp:nil :type
    (common-lisp:or s3direct-target common-lisp:null))
   (apply-mapping common-lisp:nil :type
    (common-lisp:or apply-mapping common-lisp:null))
   (select-fields common-lisp:nil :type
    (common-lisp:or select-fields common-lisp:null))
   (drop-fields common-lisp:nil :type
    (common-lisp:or drop-fields common-lisp:null))
   (rename-field common-lisp:nil :type
    (common-lisp:or rename-field common-lisp:null))
   (spigot common-lisp:nil :type (common-lisp:or spigot common-lisp:null))
   (join common-lisp:nil :type (common-lisp:or join common-lisp:null))
   (split-fields common-lisp:nil :type
    (common-lisp:or split-fields common-lisp:null))
   (select-from-collection common-lisp:nil :type
    (common-lisp:or select-from-collection common-lisp:null))
   (fill-missing-values common-lisp:nil :type
    (common-lisp:or fill-missing-values common-lisp:null))
   (filter common-lisp:nil :type (common-lisp:or filter common-lisp:null))
   (custom-code common-lisp:nil :type
    (common-lisp:or custom-code common-lisp:null))
   (spark-sql common-lisp:nil :type
    (common-lisp:or spark-sql common-lisp:null))
   (direct-kinesis-source common-lisp:nil :type
    (common-lisp:or direct-kinesis-source common-lisp:null))
   (direct-kafka-source common-lisp:nil :type
    (common-lisp:or direct-kafka-source common-lisp:null))
   (catalog-kinesis-source common-lisp:nil :type
    (common-lisp:or catalog-kinesis-source common-lisp:null))
   (catalog-kafka-source common-lisp:nil :type
    (common-lisp:or catalog-kafka-source common-lisp:null))
   (drop-null-fields common-lisp:nil :type
    (common-lisp:or drop-null-fields common-lisp:null))
   (merge common-lisp:nil :type (common-lisp:or merge common-lisp:null))
   (union common-lisp:nil :type (common-lisp:or union common-lisp:null))
   (piidetection common-lisp:nil :type
    (common-lisp:or piidetection common-lisp:null))
   (aggregate common-lisp:nil :type
    (common-lisp:or aggregate common-lisp:null))
   (drop-duplicates common-lisp:nil :type
    (common-lisp:or drop-duplicates common-lisp:null))
   (governed-catalog-target common-lisp:nil :type
    (common-lisp:or governed-catalog-target common-lisp:null))
   (governed-catalog-source common-lisp:nil :type
    (common-lisp:or governed-catalog-source common-lisp:null))
   (microsoft-sqlserver-catalog-source common-lisp:nil :type
    (common-lisp:or microsoft-sqlserver-catalog-source common-lisp:null))
   (my-sqlcatalog-source common-lisp:nil :type
    (common-lisp:or my-sqlcatalog-source common-lisp:null))
   (oracle-sqlcatalog-source common-lisp:nil :type
    (common-lisp:or oracle-sqlcatalog-source common-lisp:null))
   (postgre-sqlcatalog-source common-lisp:nil :type
    (common-lisp:or postgre-sqlcatalog-source common-lisp:null))
   (microsoft-sqlserver-catalog-target common-lisp:nil :type
    (common-lisp:or microsoft-sqlserver-catalog-target common-lisp:null))
   (my-sqlcatalog-target common-lisp:nil :type
    (common-lisp:or my-sqlcatalog-target common-lisp:null))
   (oracle-sqlcatalog-target common-lisp:nil :type
    (common-lisp:or oracle-sqlcatalog-target common-lisp:null))
   (postgre-sqlcatalog-target common-lisp:nil :type
    (common-lisp:or postgre-sqlcatalog-target common-lisp:null))
   (dynamic-transform common-lisp:nil :type
    (common-lisp:or dynamic-transform common-lisp:null))
   (evaluate-data-quality common-lisp:nil :type
    (common-lisp:or evaluate-data-quality common-lisp:null))
   (s3catalog-hudi-source common-lisp:nil :type
    (common-lisp:or s3catalog-hudi-source common-lisp:null))
   (catalog-hudi-source common-lisp:nil :type
    (common-lisp:or catalog-hudi-source common-lisp:null))
   (s3hudi-source common-lisp:nil :type
    (common-lisp:or s3hudi-source common-lisp:null))
   (s3hudi-catalog-target common-lisp:nil :type
    (common-lisp:or s3hudi-catalog-target common-lisp:null))
   (s3hudi-direct-target common-lisp:nil :type
    (common-lisp:or s3hudi-direct-target common-lisp:null))
   (direct-jdbcsource common-lisp:nil :type
    (common-lisp:or direct-jdbcsource common-lisp:null))
   (s3catalog-delta-source common-lisp:nil :type
    (common-lisp:or s3catalog-delta-source common-lisp:null))
   (catalog-delta-source common-lisp:nil :type
    (common-lisp:or catalog-delta-source common-lisp:null))
   (s3delta-source common-lisp:nil :type
    (common-lisp:or s3delta-source common-lisp:null))
   (s3delta-catalog-target common-lisp:nil :type
    (common-lisp:or s3delta-catalog-target common-lisp:null))
   (s3delta-direct-target common-lisp:nil :type
    (common-lisp:or s3delta-direct-target common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'code-gen-configuration-node
                    'make-code-gen-configuration-node))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          code-gen-configuration-node))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          code-gen-configuration-node))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'athena-connector-source))
      (common-lisp:list
       (common-lisp:cons "AthenaConnectorSource"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'jdbcconnector-source))
      (common-lisp:list
       (common-lisp:cons "JDBCConnectorSource"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'spark-connector-source))
      (common-lisp:list
       (common-lisp:cons "SparkConnectorSource"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'catalog-source))
      (common-lisp:list
       (common-lisp:cons "CatalogSource"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'redshift-source))
      (common-lisp:list
       (common-lisp:cons "RedshiftSource"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3catalog-source))
      (common-lisp:list
       (common-lisp:cons "S3CatalogSource"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3csv-source))
      (common-lisp:list
       (common-lisp:cons "S3CsvSource"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3json-source))
      (common-lisp:list
       (common-lisp:cons "S3JsonSource"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3parquet-source))
      (common-lisp:list
       (common-lisp:cons "S3ParquetSource"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'relational-catalog-source))
      (common-lisp:list
       (common-lisp:cons "RelationalCatalogSource"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dynamo-dbcatalog-source))
      (common-lisp:list
       (common-lisp:cons "DynamoDBCatalogSource"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'jdbcconnector-target))
      (common-lisp:list
       (common-lisp:cons "JDBCConnectorTarget"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'spark-connector-target))
      (common-lisp:list
       (common-lisp:cons "SparkConnectorTarget"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'catalog-target))
      (common-lisp:list
       (common-lisp:cons "CatalogTarget"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'redshift-target))
      (common-lisp:list
       (common-lisp:cons "RedshiftTarget"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3catalog-target))
      (common-lisp:list
       (common-lisp:cons "S3CatalogTarget"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           's3glue-parquet-target))
      (common-lisp:list
       (common-lisp:cons "S3GlueParquetTarget"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3direct-target))
      (common-lisp:list
       (common-lisp:cons "S3DirectTarget"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'apply-mapping))
      (common-lisp:list
       (common-lisp:cons "ApplyMapping"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'select-fields))
      (common-lisp:list
       (common-lisp:cons "SelectFields"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'drop-fields))
      (common-lisp:list
       (common-lisp:cons "DropFields"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rename-field))
      (common-lisp:list
       (common-lisp:cons "RenameField"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'spigot))
      (common-lisp:list
       (common-lisp:cons "Spigot"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'join))
      (common-lisp:list
       (common-lisp:cons "Join"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'split-fields))
      (common-lisp:list
       (common-lisp:cons "SplitFields"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'select-from-collection))
      (common-lisp:list
       (common-lisp:cons "SelectFromCollection"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'fill-missing-values))
      (common-lisp:list
       (common-lisp:cons "FillMissingValues"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filter))
      (common-lisp:list
       (common-lisp:cons "Filter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'custom-code))
      (common-lisp:list
       (common-lisp:cons "CustomCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'spark-sql))
      (common-lisp:list
       (common-lisp:cons "SparkSQL"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'direct-kinesis-source))
      (common-lisp:list
       (common-lisp:cons "DirectKinesisSource"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'direct-kafka-source))
      (common-lisp:list
       (common-lisp:cons "DirectKafkaSource"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'catalog-kinesis-source))
      (common-lisp:list
       (common-lisp:cons "CatalogKinesisSource"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'catalog-kafka-source))
      (common-lisp:list
       (common-lisp:cons "CatalogKafkaSource"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'drop-null-fields))
      (common-lisp:list
       (common-lisp:cons "DropNullFields"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'merge))
      (common-lisp:list
       (common-lisp:cons "Merge"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'union))
      (common-lisp:list
       (common-lisp:cons "Union"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'piidetection))
      (common-lisp:list
       (common-lisp:cons "PIIDetection"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'aggregate))
      (common-lisp:list
       (common-lisp:cons "Aggregate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'drop-duplicates))
      (common-lisp:list
       (common-lisp:cons "DropDuplicates"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'governed-catalog-target))
      (common-lisp:list
       (common-lisp:cons "GovernedCatalogTarget"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'governed-catalog-source))
      (common-lisp:list
       (common-lisp:cons "GovernedCatalogSource"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'microsoft-sqlserver-catalog-source))
      (common-lisp:list
       (common-lisp:cons "MicrosoftSQLServerCatalogSource"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'my-sqlcatalog-source))
      (common-lisp:list
       (common-lisp:cons "MySQLCatalogSource"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'oracle-sqlcatalog-source))
      (common-lisp:list
       (common-lisp:cons "OracleSQLCatalogSource"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'postgre-sqlcatalog-source))
      (common-lisp:list
       (common-lisp:cons "PostgreSQLCatalogSource"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'microsoft-sqlserver-catalog-target))
      (common-lisp:list
       (common-lisp:cons "MicrosoftSQLServerCatalogTarget"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'my-sqlcatalog-target))
      (common-lisp:list
       (common-lisp:cons "MySQLCatalogTarget"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'oracle-sqlcatalog-target))
      (common-lisp:list
       (common-lisp:cons "OracleSQLCatalogTarget"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'postgre-sqlcatalog-target))
      (common-lisp:list
       (common-lisp:cons "PostgreSQLCatalogTarget"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dynamic-transform))
      (common-lisp:list
       (common-lisp:cons "DynamicTransform"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'evaluate-data-quality))
      (common-lisp:list
       (common-lisp:cons "EvaluateDataQuality"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           's3catalog-hudi-source))
      (common-lisp:list
       (common-lisp:cons "S3CatalogHudiSource"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'catalog-hudi-source))
      (common-lisp:list
       (common-lisp:cons "CatalogHudiSource"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3hudi-source))
      (common-lisp:list
       (common-lisp:cons "S3HudiSource"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           's3hudi-catalog-target))
      (common-lisp:list
       (common-lisp:cons "S3HudiCatalogTarget"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           's3hudi-direct-target))
      (common-lisp:list
       (common-lisp:cons "S3HudiDirectTarget"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'direct-jdbcsource))
      (common-lisp:list
       (common-lisp:cons "DirectJDBCSource"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           's3catalog-delta-source))
      (common-lisp:list
       (common-lisp:cons "S3CatalogDeltaSource"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'catalog-delta-source))
      (common-lisp:list
       (common-lisp:cons "CatalogDeltaSource"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3delta-source))
      (common-lisp:list
       (common-lisp:cons "S3DeltaSource"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           's3delta-catalog-target))
      (common-lisp:list
       (common-lisp:cons "S3DeltaCatalogTarget"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           's3delta-direct-target))
      (common-lisp:list
       (common-lisp:cons "S3DeltaDirectTarget"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          code-gen-configuration-node))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype code-gen-configuration-nodes () 'common-lisp:hash-table)
 (common-lisp:defun |make-code-gen-configuration-nodes|
                    (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:progn
 (common-lisp:defstruct
     (code-gen-edge (:copier common-lisp:nil)
      (:conc-name "struct-shape-code-gen-edge-"))
   (source (common-lisp:error ":source is required") :type
    (common-lisp:or code-gen-identifier common-lisp:null))
   (target (common-lisp:error ":target is required") :type
    (common-lisp:or code-gen-identifier common-lisp:null))
   (target-parameter common-lisp:nil :type
    (common-lisp:or code-gen-arg-name common-lisp:null)))
 (common-lisp:export (common-lisp:list 'code-gen-edge 'make-code-gen-edge))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input code-gen-edge))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input code-gen-edge))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source))
      (common-lisp:list
       (common-lisp:cons "Source"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target))
      (common-lisp:list
       (common-lisp:cons "Target"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target-parameter))
      (common-lisp:list
       (common-lisp:cons "TargetParameter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input code-gen-edge))
   common-lisp:nil))
(common-lisp:deftype code-gen-identifier () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (code-gen-node (:copier common-lisp:nil)
      (:conc-name "struct-shape-code-gen-node-"))
   (id (common-lisp:error ":id is required") :type
    (common-lisp:or code-gen-identifier common-lisp:null))
   (node-type (common-lisp:error ":node-type is required") :type
    (common-lisp:or code-gen-node-type common-lisp:null))
   (args (common-lisp:error ":args is required") :type
    (common-lisp:or code-gen-node-args common-lisp:null))
   (line-number common-lisp:nil :type
    (common-lisp:or integer common-lisp:null)))
 (common-lisp:export (common-lisp:list 'code-gen-node 'make-code-gen-node))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input code-gen-node))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input code-gen-node))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'node-type))
      (common-lisp:list
       (common-lisp:cons "NodeType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'args))
      (common-lisp:list
       (common-lisp:cons "Args"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'line-number))
      (common-lisp:list
       (common-lisp:cons "LineNumber"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input code-gen-node))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (code-gen-node-arg (:copier common-lisp:nil)
      (:conc-name "struct-shape-code-gen-node-arg-"))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or code-gen-arg-name common-lisp:null))
   (value (common-lisp:error ":value is required") :type
    (common-lisp:or code-gen-arg-value common-lisp:null))
   (param common-lisp:nil :type (common-lisp:or boolean common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'code-gen-node-arg 'make-code-gen-node-arg))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input code-gen-node-arg))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input code-gen-node-arg))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "Value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'param))
      (common-lisp:list
       (common-lisp:cons "Param"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input code-gen-node-arg))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype code-gen-node-args ()
   '(trivial-types:proper-list code-gen-node-arg))
 (common-lisp:defun |make-code-gen-node-args|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list code-gen-node-arg))
   aws-sdk/generator/shape::members))
(common-lisp:deftype code-gen-node-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (column (:copier common-lisp:nil) (:conc-name "struct-shape-column-"))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or name-string common-lisp:null))
   (type common-lisp:nil :type
    (common-lisp:or column-type-string common-lisp:null))
   (comment common-lisp:nil :type
    (common-lisp:or comment-string common-lisp:null))
   (parameters common-lisp:nil :type
    (common-lisp:or parameters-map common-lisp:null)))
 (common-lisp:export (common-lisp:list 'column 'make-column))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input column))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input column))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'comment))
      (common-lisp:list
       (common-lisp:cons "Comment"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'parameters))
      (common-lisp:list
       (common-lisp:cons "Parameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input column))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (column-error (:copier common-lisp:nil)
      (:conc-name "struct-shape-column-error-"))
   (column-name common-lisp:nil :type
    (common-lisp:or name-string common-lisp:null))
   (error common-lisp:nil :type
    (common-lisp:or error-detail common-lisp:null)))
 (common-lisp:export (common-lisp:list 'column-error 'make-column-error))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input column-error))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input column-error))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'column-name))
      (common-lisp:list
       (common-lisp:cons "ColumnName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error))
      (common-lisp:list
       (common-lisp:cons "Error"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input column-error))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype column-errors ()
   '(trivial-types:proper-list column-error))
 (common-lisp:defun |make-column-errors|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list column-error))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (column-importance (:copier common-lisp:nil)
      (:conc-name "struct-shape-column-importance-"))
   (column-name common-lisp:nil :type
    (common-lisp:or name-string common-lisp:null))
   (importance common-lisp:nil :type
    (common-lisp:or generic-bounded-double common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'column-importance 'make-column-importance))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input column-importance))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input column-importance))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'column-name))
      (common-lisp:list
       (common-lisp:cons "ColumnName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'importance))
      (common-lisp:list
       (common-lisp:cons "Importance"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input column-importance))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype column-importance-list ()
   '(trivial-types:proper-list column-importance))
 (common-lisp:defun |make-column-importance-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list column-importance))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype column-list () '(trivial-types:proper-list column))
 (common-lisp:defun |make-column-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list column))
   aws-sdk/generator/shape::members))
(common-lisp:deftype column-name-string () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (column-row-filter (:copier common-lisp:nil)
      (:conc-name "struct-shape-column-row-filter-"))
   (column-name common-lisp:nil :type
    (common-lisp:or name-string common-lisp:null))
   (row-filter-expression common-lisp:nil :type
    (common-lisp:or predicate-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'column-row-filter 'make-column-row-filter))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input column-row-filter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input column-row-filter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'column-name))
      (common-lisp:list
       (common-lisp:cons "ColumnName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'row-filter-expression))
      (common-lisp:list
       (common-lisp:cons "RowFilterExpression"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input column-row-filter))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype column-row-filter-list ()
   '(trivial-types:proper-list column-row-filter))
 (common-lisp:defun |make-column-row-filter-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list column-row-filter))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (column-statistics (:copier common-lisp:nil)
      (:conc-name "struct-shape-column-statistics-"))
   (column-name (common-lisp:error ":column-name is required") :type
    (common-lisp:or name-string common-lisp:null))
   (column-type (common-lisp:error ":column-type is required") :type
    (common-lisp:or type-string common-lisp:null))
   (analyzed-time (common-lisp:error ":analyzed-time is required") :type
    (common-lisp:or timestamp common-lisp:null))
   (statistics-data (common-lisp:error ":statistics-data is required") :type
    (common-lisp:or column-statistics-data common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'column-statistics 'make-column-statistics))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input column-statistics))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input column-statistics))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'column-name))
      (common-lisp:list
       (common-lisp:cons "ColumnName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'column-type))
      (common-lisp:list
       (common-lisp:cons "ColumnType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'analyzed-time))
      (common-lisp:list
       (common-lisp:cons "AnalyzedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'statistics-data))
      (common-lisp:list
       (common-lisp:cons "StatisticsData"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input column-statistics))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (column-statistics-data (:copier common-lisp:nil)
      (:conc-name "struct-shape-column-statistics-data-"))
   (type (common-lisp:error ":type is required") :type
    (common-lisp:or column-statistics-type common-lisp:null))
   (boolean-column-statistics-data common-lisp:nil :type
    (common-lisp:or boolean-column-statistics-data common-lisp:null))
   (date-column-statistics-data common-lisp:nil :type
    (common-lisp:or date-column-statistics-data common-lisp:null))
   (decimal-column-statistics-data common-lisp:nil :type
    (common-lisp:or decimal-column-statistics-data common-lisp:null))
   (double-column-statistics-data common-lisp:nil :type
    (common-lisp:or double-column-statistics-data common-lisp:null))
   (long-column-statistics-data common-lisp:nil :type
    (common-lisp:or long-column-statistics-data common-lisp:null))
   (string-column-statistics-data common-lisp:nil :type
    (common-lisp:or string-column-statistics-data common-lisp:null))
   (binary-column-statistics-data common-lisp:nil :type
    (common-lisp:or binary-column-statistics-data common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'column-statistics-data 'make-column-statistics-data))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          column-statistics-data))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          column-statistics-data))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'boolean-column-statistics-data))
      (common-lisp:list
       (common-lisp:cons "BooleanColumnStatisticsData"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'date-column-statistics-data))
      (common-lisp:list
       (common-lisp:cons "DateColumnStatisticsData"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'decimal-column-statistics-data))
      (common-lisp:list
       (common-lisp:cons "DecimalColumnStatisticsData"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'double-column-statistics-data))
      (common-lisp:list
       (common-lisp:cons "DoubleColumnStatisticsData"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'long-column-statistics-data))
      (common-lisp:list
       (common-lisp:cons "LongColumnStatisticsData"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'string-column-statistics-data))
      (common-lisp:list
       (common-lisp:cons "StringColumnStatisticsData"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'binary-column-statistics-data))
      (common-lisp:list
       (common-lisp:cons "BinaryColumnStatisticsData"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          column-statistics-data))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (column-statistics-error (:copier common-lisp:nil)
      (:conc-name "struct-shape-column-statistics-error-"))
   (column-statistics common-lisp:nil :type
    (common-lisp:or column-statistics common-lisp:null))
   (error common-lisp:nil :type
    (common-lisp:or error-detail common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'column-statistics-error 'make-column-statistics-error))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          column-statistics-error))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          column-statistics-error))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'column-statistics))
      (common-lisp:list
       (common-lisp:cons "ColumnStatistics"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error))
      (common-lisp:list
       (common-lisp:cons "Error"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          column-statistics-error))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype column-statistics-errors ()
   '(trivial-types:proper-list column-statistics-error))
 (common-lisp:defun |make-column-statistics-errors|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list column-statistics-error))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype column-statistics-list ()
   '(trivial-types:proper-list column-statistics))
 (common-lisp:defun |make-column-statistics-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list column-statistics))
   aws-sdk/generator/shape::members))
(common-lisp:deftype column-statistics-type () 'common-lisp:string)
(common-lisp:deftype column-type-string () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype column-value-string-list ()
   '(trivial-types:proper-list column-values-string))
 (common-lisp:defun |make-column-value-string-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list column-values-string))
   aws-sdk/generator/shape::members))
(common-lisp:deftype column-values-string () 'common-lisp:string)
(common-lisp:deftype comment-string () 'common-lisp:string)
(common-lisp:deftype commit-id-string () 'common-lisp:string)
(common-lisp:deftype comparator () 'common-lisp:string)
(common-lisp:deftype compatibility () 'common-lisp:string)
(common-lisp:deftype compression-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition concurrent-modification-exception
     (glue-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       concurrent-modification-exception-message)))
 (common-lisp:export
  (common-lisp:list 'concurrent-modification-exception
                    'concurrent-modification-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition concurrent-runs-exceeded-exception
     (glue-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       concurrent-runs-exceeded-exception-message)))
 (common-lisp:export
  (common-lisp:list 'concurrent-runs-exceeded-exception
                    'concurrent-runs-exceeded-exception-message)))
(common-lisp:progn
 (common-lisp:defstruct
     (condition (:copier common-lisp:nil)
      (:conc-name "struct-shape-condition-"))
   (logical-operator common-lisp:nil :type
    (common-lisp:or logical-operator common-lisp:null))
   (job-name common-lisp:nil :type
    (common-lisp:or name-string common-lisp:null))
   (state common-lisp:nil :type
    (common-lisp:or job-run-state common-lisp:null))
   (crawler-name common-lisp:nil :type
    (common-lisp:or name-string common-lisp:null))
   (crawl-state common-lisp:nil :type
    (common-lisp:or crawl-state common-lisp:null)))
 (common-lisp:export (common-lisp:list 'condition 'make-condition))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input condition))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input condition))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'logical-operator))
      (common-lisp:list
       (common-lisp:cons "LogicalOperator"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-name))
      (common-lisp:list
       (common-lisp:cons "JobName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "State"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'crawler-name))
      (common-lisp:list
       (common-lisp:cons "CrawlerName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'crawl-state))
      (common-lisp:list
       (common-lisp:cons "CrawlState"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input condition))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition condition-check-failure-exception
     (glue-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       condition-check-failure-exception-message)))
 (common-lisp:export
  (common-lisp:list 'condition-check-failure-exception
                    'condition-check-failure-exception-message)))
(common-lisp:progn
 (common-lisp:deftype condition-list () '(trivial-types:proper-list condition))
 (common-lisp:defun |make-condition-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list condition))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition conflict-exception
     (glue-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       conflict-exception-message)))
 (common-lisp:export
  (common-lisp:list 'conflict-exception 'conflict-exception-message)))
(common-lisp:progn
 (common-lisp:defstruct
     (confusion-matrix (:copier common-lisp:nil)
      (:conc-name "struct-shape-confusion-matrix-"))
   (num-true-positives common-lisp:nil :type
    (common-lisp:or records-count common-lisp:null))
   (num-false-positives common-lisp:nil :type
    (common-lisp:or records-count common-lisp:null))
   (num-true-negatives common-lisp:nil :type
    (common-lisp:or records-count common-lisp:null))
   (num-false-negatives common-lisp:nil :type
    (common-lisp:or records-count common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'confusion-matrix 'make-confusion-matrix))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input confusion-matrix))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input confusion-matrix))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'num-true-positives))
      (common-lisp:list
       (common-lisp:cons "NumTruePositives"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'num-false-positives))
      (common-lisp:list
       (common-lisp:cons "NumFalsePositives"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'num-true-negatives))
      (common-lisp:list
       (common-lisp:cons "NumTrueNegatives"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'num-false-negatives))
      (common-lisp:list
       (common-lisp:cons "NumFalseNegatives"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input confusion-matrix))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (connection (:copier common-lisp:nil)
      (:conc-name "struct-shape-connection-"))
   (name common-lisp:nil :type (common-lisp:or name-string common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or description-string common-lisp:null))
   (connection-type common-lisp:nil :type
    (common-lisp:or connection-type common-lisp:null))
   (match-criteria common-lisp:nil :type
    (common-lisp:or match-criteria common-lisp:null))
   (connection-properties common-lisp:nil :type
    (common-lisp:or connection-properties common-lisp:null))
   (physical-connection-requirements common-lisp:nil :type
    (common-lisp:or physical-connection-requirements common-lisp:null))
   (creation-time common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (last-updated-time common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (last-updated-by common-lisp:nil :type
    (common-lisp:or name-string common-lisp:null)))
 (common-lisp:export (common-lisp:list 'connection 'make-connection))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input connection))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input connection))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'connection-type))
      (common-lisp:list
       (common-lisp:cons "ConnectionType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'match-criteria))
      (common-lisp:list
       (common-lisp:cons "MatchCriteria"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'connection-properties))
      (common-lisp:list
       (common-lisp:cons "ConnectionProperties"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'physical-connection-requirements))
      (common-lisp:list
       (common-lisp:cons "PhysicalConnectionRequirements"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-time))
      (common-lisp:list
       (common-lisp:cons "CreationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-updated-time))
      (common-lisp:list
       (common-lisp:cons "LastUpdatedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-updated-by))
      (common-lisp:list
       (common-lisp:cons "LastUpdatedBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input connection))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (connection-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-connection-input-"))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or name-string common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or description-string common-lisp:null))
   (connection-type (common-lisp:error ":connection-type is required") :type
    (common-lisp:or connection-type common-lisp:null))
   (match-criteria common-lisp:nil :type
    (common-lisp:or match-criteria common-lisp:null))
   (connection-properties
    (common-lisp:error ":connection-properties is required") :type
    (common-lisp:or connection-properties common-lisp:null))
   (physical-connection-requirements common-lisp:nil :type
    (common-lisp:or physical-connection-requirements common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'connection-input 'make-connection-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input connection-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input connection-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'connection-type))
      (common-lisp:list
       (common-lisp:cons "ConnectionType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'match-criteria))
      (common-lisp:list
       (common-lisp:cons "MatchCriteria"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'connection-properties))
      (common-lisp:list
       (common-lisp:cons "ConnectionProperties"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'physical-connection-requirements))
      (common-lisp:list
       (common-lisp:cons "PhysicalConnectionRequirements"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input connection-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype connection-list ()
   '(trivial-types:proper-list connection))
 (common-lisp:defun |make-connection-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list connection))
   aws-sdk/generator/shape::members))
(common-lisp:deftype connection-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (connection-password-encryption (:copier common-lisp:nil)
      (:conc-name "struct-shape-connection-password-encryption-"))
   (return-connection-password-encrypted
    (common-lisp:error ":return-connection-password-encrypted is required")
    :type (common-lisp:or boolean common-lisp:null))
   (aws-kms-key-id common-lisp:nil :type
    (common-lisp:or name-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'connection-password-encryption
                    'make-connection-password-encryption))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          connection-password-encryption))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          connection-password-encryption))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'return-connection-password-encrypted))
      (common-lisp:list
       (common-lisp:cons "ReturnConnectionPasswordEncrypted"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'aws-kms-key-id))
      (common-lisp:list
       (common-lisp:cons "AwsKmsKeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          connection-password-encryption))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype connection-properties () 'common-lisp:hash-table)
 (common-lisp:defun |make-connection-properties|
                    (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:deftype connection-property-key () 'common-lisp:string)
(common-lisp:deftype connection-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (connections-list (:copier common-lisp:nil)
      (:conc-name "struct-shape-connections-list-"))
   (connections common-lisp:nil :type
    (common-lisp:or orchestration-string-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'connections-list 'make-connections-list))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input connections-list))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input connections-list))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'connections))
      (common-lisp:list
       (common-lisp:cons "Connections"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input connections-list))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype context-words ()
   '(trivial-types:proper-list name-string))
 (common-lisp:defun |make-context-words|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list name-string))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (crawl (:copier common-lisp:nil) (:conc-name "struct-shape-crawl-"))
   (state common-lisp:nil :type (common-lisp:or crawl-state common-lisp:null))
   (started-on common-lisp:nil :type
    (common-lisp:or timestamp-value common-lisp:null))
   (completed-on common-lisp:nil :type
    (common-lisp:or timestamp-value common-lisp:null))
   (error-message common-lisp:nil :type
    (common-lisp:or description-string common-lisp:null))
   (log-group common-lisp:nil :type
    (common-lisp:or log-group common-lisp:null))
   (log-stream common-lisp:nil :type
    (common-lisp:or log-stream common-lisp:null)))
 (common-lisp:export (common-lisp:list 'crawl 'make-crawl))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input crawl))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input crawl))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "State"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'started-on))
      (common-lisp:list
       (common-lisp:cons "StartedOn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'completed-on))
      (common-lisp:list
       (common-lisp:cons "CompletedOn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error-message))
      (common-lisp:list
       (common-lisp:cons "ErrorMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'log-group))
      (common-lisp:list
       (common-lisp:cons "LogGroup"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'log-stream))
      (common-lisp:list
       (common-lisp:cons "LogStream"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input crawl))
   common-lisp:nil))
(common-lisp:deftype crawl-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype crawl-list () '(trivial-types:proper-list crawl))
 (common-lisp:defun |make-crawl-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list crawl))
   aws-sdk/generator/shape::members))
(common-lisp:deftype crawl-state () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (crawler (:copier common-lisp:nil) (:conc-name "struct-shape-crawler-"))
   (name common-lisp:nil :type (common-lisp:or name-string common-lisp:null))
   (role common-lisp:nil :type (common-lisp:or role common-lisp:null))
   (targets common-lisp:nil :type
    (common-lisp:or crawler-targets common-lisp:null))
   (database-name common-lisp:nil :type
    (common-lisp:or database-name common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or description-string common-lisp:null))
   (classifiers common-lisp:nil :type
    (common-lisp:or classifier-name-list common-lisp:null))
   (recrawl-policy common-lisp:nil :type
    (common-lisp:or recrawl-policy common-lisp:null))
   (schema-change-policy common-lisp:nil :type
    (common-lisp:or schema-change-policy common-lisp:null))
   (lineage-configuration common-lisp:nil :type
    (common-lisp:or lineage-configuration common-lisp:null))
   (state common-lisp:nil :type
    (common-lisp:or crawler-state common-lisp:null))
   (table-prefix common-lisp:nil :type
    (common-lisp:or table-prefix common-lisp:null))
   (schedule common-lisp:nil :type (common-lisp:or schedule common-lisp:null))
   (crawl-elapsed-time common-lisp:nil :type
    (common-lisp:or milliseconds-count common-lisp:null))
   (creation-time common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (last-updated common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (last-crawl common-lisp:nil :type
    (common-lisp:or last-crawl-info common-lisp:null))
   (version common-lisp:nil :type (common-lisp:or version-id common-lisp:null))
   (configuration common-lisp:nil :type
    (common-lisp:or crawler-configuration common-lisp:null))
   (crawler-security-configuration common-lisp:nil :type
    (common-lisp:or crawler-security-configuration common-lisp:null))
   (lake-formation-configuration common-lisp:nil :type
    (common-lisp:or lake-formation-configuration common-lisp:null)))
 (common-lisp:export (common-lisp:list 'crawler 'make-crawler))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input crawler))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input crawler))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role))
      (common-lisp:list
       (common-lisp:cons "Role"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'targets))
      (common-lisp:list
       (common-lisp:cons "Targets"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'database-name))
      (common-lisp:list
       (common-lisp:cons "DatabaseName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'classifiers))
      (common-lisp:list
       (common-lisp:cons "Classifiers"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'recrawl-policy))
      (common-lisp:list
       (common-lisp:cons "RecrawlPolicy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'schema-change-policy))
      (common-lisp:list
       (common-lisp:cons "SchemaChangePolicy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'lineage-configuration))
      (common-lisp:list
       (common-lisp:cons "LineageConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "State"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'table-prefix))
      (common-lisp:list
       (common-lisp:cons "TablePrefix"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'schedule))
      (common-lisp:list
       (common-lisp:cons "Schedule"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'crawl-elapsed-time))
      (common-lisp:list
       (common-lisp:cons "CrawlElapsedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-time))
      (common-lisp:list
       (common-lisp:cons "CreationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-updated))
      (common-lisp:list
       (common-lisp:cons "LastUpdated"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-crawl))
      (common-lisp:list
       (common-lisp:cons "LastCrawl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version))
      (common-lisp:list
       (common-lisp:cons "Version"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'configuration))
      (common-lisp:list
       (common-lisp:cons "Configuration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'crawler-security-configuration))
      (common-lisp:list
       (common-lisp:cons "CrawlerSecurityConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'lake-formation-configuration))
      (common-lisp:list
       (common-lisp:cons "LakeFormationConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input crawler))
   common-lisp:nil))
(common-lisp:deftype crawler-configuration () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (crawler-history (:copier common-lisp:nil)
      (:conc-name "struct-shape-crawler-history-"))
   (crawl-id common-lisp:nil :type (common-lisp:or crawl-id common-lisp:null))
   (state common-lisp:nil :type
    (common-lisp:or crawler-history-state common-lisp:null))
   (start-time common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (end-time common-lisp:nil :type (common-lisp:or timestamp common-lisp:null))
   (summary common-lisp:nil :type
    (common-lisp:or name-string common-lisp:null))
   (error-message common-lisp:nil :type
    (common-lisp:or description-string common-lisp:null))
   (log-group common-lisp:nil :type
    (common-lisp:or log-group common-lisp:null))
   (log-stream common-lisp:nil :type
    (common-lisp:or log-stream common-lisp:null))
   (message-prefix common-lisp:nil :type
    (common-lisp:or message-prefix common-lisp:null))
   (dpuhour common-lisp:nil :type
    (common-lisp:or non-negative-double common-lisp:null)))
 (common-lisp:export (common-lisp:list 'crawler-history 'make-crawler-history))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input crawler-history))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input crawler-history))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'crawl-id))
      (common-lisp:list
       (common-lisp:cons "CrawlId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "State"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start-time))
      (common-lisp:list
       (common-lisp:cons "StartTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'end-time))
      (common-lisp:list
       (common-lisp:cons "EndTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'summary))
      (common-lisp:list
       (common-lisp:cons "Summary"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error-message))
      (common-lisp:list
       (common-lisp:cons "ErrorMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'log-group))
      (common-lisp:list
       (common-lisp:cons "LogGroup"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'log-stream))
      (common-lisp:list
       (common-lisp:cons "LogStream"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message-prefix))
      (common-lisp:list
       (common-lisp:cons "MessagePrefix"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dpuhour))
      (common-lisp:list
       (common-lisp:cons "DPUHour"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input crawler-history))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype crawler-history-list ()
   '(trivial-types:proper-list crawler-history))
 (common-lisp:defun |make-crawler-history-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list crawler-history))
   aws-sdk/generator/shape::members))
(common-lisp:deftype crawler-history-state () 'common-lisp:string)
(common-lisp:deftype crawler-lineage-settings () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype crawler-list () '(trivial-types:proper-list crawler))
 (common-lisp:defun |make-crawler-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list crawler))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (crawler-metrics (:copier common-lisp:nil)
      (:conc-name "struct-shape-crawler-metrics-"))
   (crawler-name common-lisp:nil :type
    (common-lisp:or name-string common-lisp:null))
   (time-left-seconds common-lisp:nil :type
    (common-lisp:or non-negative-double common-lisp:null))
   (still-estimating common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (last-runtime-seconds common-lisp:nil :type
    (common-lisp:or non-negative-double common-lisp:null))
   (median-runtime-seconds common-lisp:nil :type
    (common-lisp:or non-negative-double common-lisp:null))
   (tables-created common-lisp:nil :type
    (common-lisp:or non-negative-integer common-lisp:null))
   (tables-updated common-lisp:nil :type
    (common-lisp:or non-negative-integer common-lisp:null))
   (tables-deleted common-lisp:nil :type
    (common-lisp:or non-negative-integer common-lisp:null)))
 (common-lisp:export (common-lisp:list 'crawler-metrics 'make-crawler-metrics))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input crawler-metrics))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input crawler-metrics))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'crawler-name))
      (common-lisp:list
       (common-lisp:cons "CrawlerName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'time-left-seconds))
      (common-lisp:list
       (common-lisp:cons "TimeLeftSeconds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'still-estimating))
      (common-lisp:list
       (common-lisp:cons "StillEstimating"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'last-runtime-seconds))
      (common-lisp:list
       (common-lisp:cons "LastRuntimeSeconds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'median-runtime-seconds))
      (common-lisp:list
       (common-lisp:cons "MedianRuntimeSeconds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tables-created))
      (common-lisp:list
       (common-lisp:cons "TablesCreated"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tables-updated))
      (common-lisp:list
       (common-lisp:cons "TablesUpdated"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tables-deleted))
      (common-lisp:list
       (common-lisp:cons "TablesDeleted"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input crawler-metrics))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype crawler-metrics-list ()
   '(trivial-types:proper-list crawler-metrics))
 (common-lisp:defun |make-crawler-metrics-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list crawler-metrics))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype crawler-name-list ()
   '(trivial-types:proper-list name-string))
 (common-lisp:defun |make-crawler-name-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list name-string))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (crawler-node-details (:copier common-lisp:nil)
      (:conc-name "struct-shape-crawler-node-details-"))
   (crawls common-lisp:nil :type (common-lisp:or crawl-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'crawler-node-details 'make-crawler-node-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input crawler-node-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input crawler-node-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'crawls))
      (common-lisp:list
       (common-lisp:cons "Crawls"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input crawler-node-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition crawler-not-running-exception
     (glue-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       crawler-not-running-exception-message)))
 (common-lisp:export
  (common-lisp:list 'crawler-not-running-exception
                    'crawler-not-running-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition crawler-running-exception
     (glue-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       crawler-running-exception-message)))
 (common-lisp:export
  (common-lisp:list 'crawler-running-exception
                    'crawler-running-exception-message)))
(common-lisp:deftype crawler-security-configuration () 'common-lisp:string)
(common-lisp:deftype crawler-state () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition crawler-stopping-exception
     (glue-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       crawler-stopping-exception-message)))
 (common-lisp:export
  (common-lisp:list 'crawler-stopping-exception
                    'crawler-stopping-exception-message)))
(common-lisp:progn
 (common-lisp:defstruct
     (crawler-targets (:copier common-lisp:nil)
      (:conc-name "struct-shape-crawler-targets-"))
   (s3targets common-lisp:nil :type
    (common-lisp:or s3target-list common-lisp:null))
   (jdbc-targets common-lisp:nil :type
    (common-lisp:or jdbc-target-list common-lisp:null))
   (mongo-dbtargets common-lisp:nil :type
    (common-lisp:or mongo-dbtarget-list common-lisp:null))
   (dynamo-dbtargets common-lisp:nil :type
    (common-lisp:or dynamo-dbtarget-list common-lisp:null))
   (catalog-targets common-lisp:nil :type
    (common-lisp:or catalog-target-list common-lisp:null))
   (delta-targets common-lisp:nil :type
    (common-lisp:or delta-target-list common-lisp:null)))
 (common-lisp:export (common-lisp:list 'crawler-targets 'make-crawler-targets))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input crawler-targets))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input crawler-targets))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3targets))
      (common-lisp:list
       (common-lisp:cons "S3Targets"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'jdbc-targets))
      (common-lisp:list
       (common-lisp:cons "JdbcTargets"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'mongo-dbtargets))
      (common-lisp:list
       (common-lisp:cons "MongoDBTargets"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dynamo-dbtargets))
      (common-lisp:list
       (common-lisp:cons "DynamoDBTargets"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'catalog-targets))
      (common-lisp:list
       (common-lisp:cons "CatalogTargets"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'delta-targets))
      (common-lisp:list
       (common-lisp:cons "DeltaTargets"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input crawler-targets))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (crawls-filter (:copier common-lisp:nil)
      (:conc-name "struct-shape-crawls-filter-"))
   (field-name common-lisp:nil :type
    (common-lisp:or field-name common-lisp:null))
   (filter-operator common-lisp:nil :type
    (common-lisp:or filter-operator common-lisp:null))
   (field-value common-lisp:nil :type
    (common-lisp:or generic-string common-lisp:null)))
 (common-lisp:export (common-lisp:list 'crawls-filter 'make-crawls-filter))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input crawls-filter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input crawls-filter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'field-name))
      (common-lisp:list
       (common-lisp:cons "FieldName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filter-operator))
      (common-lisp:list
       (common-lisp:cons "FilterOperator"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'field-value))
      (common-lisp:list
       (common-lisp:cons "FieldValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input crawls-filter))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype crawls-filter-list ()
   '(trivial-types:proper-list crawls-filter))
 (common-lisp:defun |make-crawls-filter-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list crawls-filter))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (create-blueprint-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-blueprint-request-"))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or orchestration-name-string common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or generic512char-string common-lisp:null))
   (blueprint-location (common-lisp:error ":blueprint-location is required")
    :type (common-lisp:or orchestration-s3location common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tags-map common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-blueprint-request 'make-create-blueprint-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-blueprint-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-blueprint-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'blueprint-location))
      (common-lisp:list
       (common-lisp:cons "BlueprintLocation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-blueprint-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-blueprint-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-blueprint-response-"))
   (name common-lisp:nil :type (common-lisp:or name-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-blueprint-response
                    'make-create-blueprint-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-blueprint-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-blueprint-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-blueprint-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-classifier-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-classifier-request-"))
   (grok-classifier common-lisp:nil :type
    (common-lisp:or create-grok-classifier-request common-lisp:null))
   (xmlclassifier common-lisp:nil :type
    (common-lisp:or create-xmlclassifier-request common-lisp:null))
   (json-classifier common-lisp:nil :type
    (common-lisp:or create-json-classifier-request common-lisp:null))
   (csv-classifier common-lisp:nil :type
    (common-lisp:or create-csv-classifier-request common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-classifier-request
                    'make-create-classifier-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-classifier-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-classifier-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'grok-classifier))
      (common-lisp:list
       (common-lisp:cons "GrokClassifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'xmlclassifier))
      (common-lisp:list
       (common-lisp:cons "XMLClassifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'json-classifier))
      (common-lisp:list
       (common-lisp:cons "JsonClassifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'csv-classifier))
      (common-lisp:list
       (common-lisp:cons "CsvClassifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-classifier-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-classifier-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-classifier-response-")))
 (common-lisp:export
  (common-lisp:list 'create-classifier-response
                    'make-create-classifier-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-classifier-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-classifier-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-classifier-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-connection-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-connection-request-"))
   (catalog-id common-lisp:nil :type
    (common-lisp:or catalog-id-string common-lisp:null))
   (connection-input (common-lisp:error ":connection-input is required") :type
    (common-lisp:or connection-input common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tags-map common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-connection-request
                    'make-create-connection-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-connection-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-connection-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'catalog-id))
      (common-lisp:list
       (common-lisp:cons "CatalogId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'connection-input))
      (common-lisp:list
       (common-lisp:cons "ConnectionInput"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-connection-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-connection-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-connection-response-")))
 (common-lisp:export
  (common-lisp:list 'create-connection-response
                    'make-create-connection-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-connection-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-connection-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-connection-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-crawler-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-crawler-request-"))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or name-string common-lisp:null))
   (role (common-lisp:error ":role is required") :type
    (common-lisp:or role common-lisp:null))
   (database-name common-lisp:nil :type
    (common-lisp:or database-name common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or description-string common-lisp:null))
   (targets (common-lisp:error ":targets is required") :type
    (common-lisp:or crawler-targets common-lisp:null))
   (schedule common-lisp:nil :type
    (common-lisp:or cron-expression common-lisp:null))
   (classifiers common-lisp:nil :type
    (common-lisp:or classifier-name-list common-lisp:null))
   (table-prefix common-lisp:nil :type
    (common-lisp:or table-prefix common-lisp:null))
   (schema-change-policy common-lisp:nil :type
    (common-lisp:or schema-change-policy common-lisp:null))
   (recrawl-policy common-lisp:nil :type
    (common-lisp:or recrawl-policy common-lisp:null))
   (lineage-configuration common-lisp:nil :type
    (common-lisp:or lineage-configuration common-lisp:null))
   (lake-formation-configuration common-lisp:nil :type
    (common-lisp:or lake-formation-configuration common-lisp:null))
   (configuration common-lisp:nil :type
    (common-lisp:or crawler-configuration common-lisp:null))
   (crawler-security-configuration common-lisp:nil :type
    (common-lisp:or crawler-security-configuration common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tags-map common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-crawler-request 'make-create-crawler-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-crawler-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-crawler-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role))
      (common-lisp:list
       (common-lisp:cons "Role"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'database-name))
      (common-lisp:list
       (common-lisp:cons "DatabaseName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'targets))
      (common-lisp:list
       (common-lisp:cons "Targets"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'schedule))
      (common-lisp:list
       (common-lisp:cons "Schedule"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'classifiers))
      (common-lisp:list
       (common-lisp:cons "Classifiers"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'table-prefix))
      (common-lisp:list
       (common-lisp:cons "TablePrefix"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'schema-change-policy))
      (common-lisp:list
       (common-lisp:cons "SchemaChangePolicy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'recrawl-policy))
      (common-lisp:list
       (common-lisp:cons "RecrawlPolicy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'lineage-configuration))
      (common-lisp:list
       (common-lisp:cons "LineageConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'lake-formation-configuration))
      (common-lisp:list
       (common-lisp:cons "LakeFormationConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'configuration))
      (common-lisp:list
       (common-lisp:cons "Configuration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'crawler-security-configuration))
      (common-lisp:list
       (common-lisp:cons "CrawlerSecurityConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-crawler-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-crawler-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-crawler-response-")))
 (common-lisp:export
  (common-lisp:list 'create-crawler-response 'make-create-crawler-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-crawler-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-crawler-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-crawler-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-csv-classifier-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-csv-classifier-request-"))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or name-string common-lisp:null))
   (delimiter common-lisp:nil :type
    (common-lisp:or csv-column-delimiter common-lisp:null))
   (quote-symbol common-lisp:nil :type
    (common-lisp:or csv-quote-symbol common-lisp:null))
   (contains-header common-lisp:nil :type
    (common-lisp:or csv-header-option common-lisp:null))
   (header common-lisp:nil :type (common-lisp:or csv-header common-lisp:null))
   (disable-value-trimming common-lisp:nil :type
    (common-lisp:or nullable-boolean common-lisp:null))
   (allow-single-column common-lisp:nil :type
    (common-lisp:or nullable-boolean common-lisp:null))
   (custom-datatype-configured common-lisp:nil :type
    (common-lisp:or nullable-boolean common-lisp:null))
   (custom-datatypes common-lisp:nil :type
    (common-lisp:or custom-datatypes common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-csv-classifier-request
                    'make-create-csv-classifier-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-csv-classifier-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-csv-classifier-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'delimiter))
      (common-lisp:list
       (common-lisp:cons "Delimiter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'quote-symbol))
      (common-lisp:list
       (common-lisp:cons "QuoteSymbol"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'contains-header))
      (common-lisp:list
       (common-lisp:cons "ContainsHeader"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'header))
      (common-lisp:list
       (common-lisp:cons "Header"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'disable-value-trimming))
      (common-lisp:list
       (common-lisp:cons "DisableValueTrimming"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'allow-single-column))
      (common-lisp:list
       (common-lisp:cons "AllowSingleColumn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'custom-datatype-configured))
      (common-lisp:list
       (common-lisp:cons "CustomDatatypeConfigured"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'custom-datatypes))
      (common-lisp:list
       (common-lisp:cons "CustomDatatypes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-csv-classifier-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-custom-entity-type-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-custom-entity-type-request-"))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or name-string common-lisp:null))
   (regex-string (common-lisp:error ":regex-string is required") :type
    (common-lisp:or name-string common-lisp:null))
   (context-words common-lisp:nil :type
    (common-lisp:or context-words common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-custom-entity-type-request
                    'make-create-custom-entity-type-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-custom-entity-type-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-custom-entity-type-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'regex-string))
      (common-lisp:list
       (common-lisp:cons "RegexString"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'context-words))
      (common-lisp:list
       (common-lisp:cons "ContextWords"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-custom-entity-type-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-custom-entity-type-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-custom-entity-type-response-"))
   (name common-lisp:nil :type (common-lisp:or name-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-custom-entity-type-response
                    'make-create-custom-entity-type-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-custom-entity-type-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-custom-entity-type-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-custom-entity-type-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-data-quality-ruleset-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-data-quality-ruleset-request-"))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or name-string common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or description-string common-lisp:null))
   (ruleset (common-lisp:error ":ruleset is required") :type
    (common-lisp:or data-quality-ruleset-string common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tags-map common-lisp:null))
   (target-table common-lisp:nil :type
    (common-lisp:or data-quality-target-table common-lisp:null))
   (client-token common-lisp:nil :type
    (common-lisp:or hash-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-data-quality-ruleset-request
                    'make-create-data-quality-ruleset-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-data-quality-ruleset-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-data-quality-ruleset-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ruleset))
      (common-lisp:list
       (common-lisp:cons "Ruleset"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target-table))
      (common-lisp:list
       (common-lisp:cons "TargetTable"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "ClientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-data-quality-ruleset-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-data-quality-ruleset-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-data-quality-ruleset-response-"))
   (name common-lisp:nil :type (common-lisp:or name-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-data-quality-ruleset-response
                    'make-create-data-quality-ruleset-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-data-quality-ruleset-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-data-quality-ruleset-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-data-quality-ruleset-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-database-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-database-request-"))
   (catalog-id common-lisp:nil :type
    (common-lisp:or catalog-id-string common-lisp:null))
   (database-input (common-lisp:error ":database-input is required") :type
    (common-lisp:or database-input common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tags-map common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-database-request 'make-create-database-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-database-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-database-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'catalog-id))
      (common-lisp:list
       (common-lisp:cons "CatalogId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'database-input))
      (common-lisp:list
       (common-lisp:cons "DatabaseInput"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-database-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-database-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-database-response-")))
 (common-lisp:export
  (common-lisp:list 'create-database-response 'make-create-database-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-database-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-database-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-database-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-dev-endpoint-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-dev-endpoint-request-"))
   (endpoint-name (common-lisp:error ":endpoint-name is required") :type
    (common-lisp:or generic-string common-lisp:null))
   (role-arn (common-lisp:error ":role-arn is required") :type
    (common-lisp:or role-arn common-lisp:null))
   (security-group-ids common-lisp:nil :type
    (common-lisp:or string-list common-lisp:null))
   (subnet-id common-lisp:nil :type
    (common-lisp:or generic-string common-lisp:null))
   (public-key common-lisp:nil :type
    (common-lisp:or generic-string common-lisp:null))
   (public-keys common-lisp:nil :type
    (common-lisp:or public-keys-list common-lisp:null))
   (number-of-nodes common-lisp:nil :type
    (common-lisp:or integer-value common-lisp:null))
   (worker-type common-lisp:nil :type
    (common-lisp:or worker-type common-lisp:null))
   (glue-version common-lisp:nil :type
    (common-lisp:or glue-version-string common-lisp:null))
   (number-of-workers common-lisp:nil :type
    (common-lisp:or nullable-integer common-lisp:null))
   (extra-python-libs-s3path common-lisp:nil :type
    (common-lisp:or generic-string common-lisp:null))
   (extra-jars-s3path common-lisp:nil :type
    (common-lisp:or generic-string common-lisp:null))
   (security-configuration common-lisp:nil :type
    (common-lisp:or name-string common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tags-map common-lisp:null))
   (arguments common-lisp:nil :type
    (common-lisp:or map-value common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-dev-endpoint-request
                    'make-create-dev-endpoint-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-dev-endpoint-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-dev-endpoint-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'endpoint-name))
      (common-lisp:list
       (common-lisp:cons "EndpointName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "RoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'security-group-ids))
      (common-lisp:list
       (common-lisp:cons "SecurityGroupIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subnet-id))
      (common-lisp:list
       (common-lisp:cons "SubnetId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'public-key))
      (common-lisp:list
       (common-lisp:cons "PublicKey"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'public-keys))
      (common-lisp:list
       (common-lisp:cons "PublicKeys"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'number-of-nodes))
      (common-lisp:list
       (common-lisp:cons "NumberOfNodes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'worker-type))
      (common-lisp:list
       (common-lisp:cons "WorkerType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'glue-version))
      (common-lisp:list
       (common-lisp:cons "GlueVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'number-of-workers))
      (common-lisp:list
       (common-lisp:cons "NumberOfWorkers"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'extra-python-libs-s3path))
      (common-lisp:list
       (common-lisp:cons "ExtraPythonLibsS3Path"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'extra-jars-s3path))
      (common-lisp:list
       (common-lisp:cons "ExtraJarsS3Path"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'security-configuration))
      (common-lisp:list
       (common-lisp:cons "SecurityConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arguments))
      (common-lisp:list
       (common-lisp:cons "Arguments"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-dev-endpoint-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-dev-endpoint-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-dev-endpoint-response-"))
   (endpoint-name common-lisp:nil :type
    (common-lisp:or generic-string common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or generic-string common-lisp:null))
   (security-group-ids common-lisp:nil :type
    (common-lisp:or string-list common-lisp:null))
   (subnet-id common-lisp:nil :type
    (common-lisp:or generic-string common-lisp:null))
   (role-arn common-lisp:nil :type (common-lisp:or role-arn common-lisp:null))
   (yarn-endpoint-address common-lisp:nil :type
    (common-lisp:or generic-string common-lisp:null))
   (zeppelin-remote-spark-interpreter-port common-lisp:nil :type
    (common-lisp:or integer-value common-lisp:null))
   (number-of-nodes common-lisp:nil :type
    (common-lisp:or integer-value common-lisp:null))
   (worker-type common-lisp:nil :type
    (common-lisp:or worker-type common-lisp:null))
   (glue-version common-lisp:nil :type
    (common-lisp:or glue-version-string common-lisp:null))
   (number-of-workers common-lisp:nil :type
    (common-lisp:or nullable-integer common-lisp:null))
   (availability-zone common-lisp:nil :type
    (common-lisp:or generic-string common-lisp:null))
   (vpc-id common-lisp:nil :type
    (common-lisp:or generic-string common-lisp:null))
   (extra-python-libs-s3path common-lisp:nil :type
    (common-lisp:or generic-string common-lisp:null))
   (extra-jars-s3path common-lisp:nil :type
    (common-lisp:or generic-string common-lisp:null))
   (failure-reason common-lisp:nil :type
    (common-lisp:or generic-string common-lisp:null))
   (security-configuration common-lisp:nil :type
    (common-lisp:or name-string common-lisp:null))
   (created-timestamp common-lisp:nil :type
    (common-lisp:or timestamp-value common-lisp:null))
   (arguments common-lisp:nil :type
    (common-lisp:or map-value common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-dev-endpoint-response
                    'make-create-dev-endpoint-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-dev-endpoint-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-dev-endpoint-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'endpoint-name))
      (common-lisp:list
       (common-lisp:cons "EndpointName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'security-group-ids))
      (common-lisp:list
       (common-lisp:cons "SecurityGroupIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subnet-id))
      (common-lisp:list
       (common-lisp:cons "SubnetId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "RoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'yarn-endpoint-address))
      (common-lisp:list
       (common-lisp:cons "YarnEndpointAddress"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'zeppelin-remote-spark-interpreter-port))
      (common-lisp:list
       (common-lisp:cons "ZeppelinRemoteSparkInterpreterPort"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'number-of-nodes))
      (common-lisp:list
       (common-lisp:cons "NumberOfNodes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'worker-type))
      (common-lisp:list
       (common-lisp:cons "WorkerType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'glue-version))
      (common-lisp:list
       (common-lisp:cons "GlueVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'number-of-workers))
      (common-lisp:list
       (common-lisp:cons "NumberOfWorkers"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'availability-zone))
      (common-lisp:list
       (common-lisp:cons "AvailabilityZone"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpc-id))
      (common-lisp:list
       (common-lisp:cons "VpcId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'extra-python-libs-s3path))
      (common-lisp:list
       (common-lisp:cons "ExtraPythonLibsS3Path"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'extra-jars-s3path))
      (common-lisp:list
       (common-lisp:cons "ExtraJarsS3Path"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'failure-reason))
      (common-lisp:list
       (common-lisp:cons "FailureReason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'security-configuration))
      (common-lisp:list
       (common-lisp:cons "SecurityConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-timestamp))
      (common-lisp:list
       (common-lisp:cons "CreatedTimestamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arguments))
      (common-lisp:list
       (common-lisp:cons "Arguments"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-dev-endpoint-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-grok-classifier-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-grok-classifier-request-"))
   (classification (common-lisp:error ":classification is required") :type
    (common-lisp:or classification common-lisp:null))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or name-string common-lisp:null))
   (grok-pattern (common-lisp:error ":grok-pattern is required") :type
    (common-lisp:or grok-pattern common-lisp:null))
   (custom-patterns common-lisp:nil :type
    (common-lisp:or custom-patterns common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-grok-classifier-request
                    'make-create-grok-classifier-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-grok-classifier-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-grok-classifier-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'classification))
      (common-lisp:list
       (common-lisp:cons "Classification"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'grok-pattern))
      (common-lisp:list
       (common-lisp:cons "GrokPattern"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'custom-patterns))
      (common-lisp:list
       (common-lisp:cons "CustomPatterns"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-grok-classifier-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-job-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-job-request-"))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or name-string common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or description-string common-lisp:null))
   (log-uri common-lisp:nil :type (common-lisp:or uri-string common-lisp:null))
   (role (common-lisp:error ":role is required") :type
    (common-lisp:or role-string common-lisp:null))
   (execution-property common-lisp:nil :type
    (common-lisp:or execution-property common-lisp:null))
   (command (common-lisp:error ":command is required") :type
    (common-lisp:or job-command common-lisp:null))
   (default-arguments common-lisp:nil :type
    (common-lisp:or generic-map common-lisp:null))
   (non-overridable-arguments common-lisp:nil :type
    (common-lisp:or generic-map common-lisp:null))
   (connections common-lisp:nil :type
    (common-lisp:or connections-list common-lisp:null))
   (max-retries common-lisp:nil :type
    (common-lisp:or max-retries common-lisp:null))
   (allocated-capacity common-lisp:nil :type
    (common-lisp:or integer-value common-lisp:null))
   (timeout common-lisp:nil :type (common-lisp:or timeout common-lisp:null))
   (max-capacity common-lisp:nil :type
    (common-lisp:or nullable-double common-lisp:null))
   (security-configuration common-lisp:nil :type
    (common-lisp:or name-string common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tags-map common-lisp:null))
   (notification-property common-lisp:nil :type
    (common-lisp:or notification-property common-lisp:null))
   (glue-version common-lisp:nil :type
    (common-lisp:or glue-version-string common-lisp:null))
   (number-of-workers common-lisp:nil :type
    (common-lisp:or nullable-integer common-lisp:null))
   (worker-type common-lisp:nil :type
    (common-lisp:or worker-type common-lisp:null))
   (code-gen-configuration-nodes common-lisp:nil :type
    (common-lisp:or code-gen-configuration-nodes common-lisp:null))
   (execution-class common-lisp:nil :type
    (common-lisp:or execution-class common-lisp:null))
   (source-control-details common-lisp:nil :type
    (common-lisp:or source-control-details common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-job-request 'make-create-job-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input create-job-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input create-job-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'log-uri))
      (common-lisp:list
       (common-lisp:cons "LogUri"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role))
      (common-lisp:list
       (common-lisp:cons "Role"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'execution-property))
      (common-lisp:list
       (common-lisp:cons "ExecutionProperty"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'command))
      (common-lisp:list
       (common-lisp:cons "Command"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'default-arguments))
      (common-lisp:list
       (common-lisp:cons "DefaultArguments"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'non-overridable-arguments))
      (common-lisp:list
       (common-lisp:cons "NonOverridableArguments"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'connections))
      (common-lisp:list
       (common-lisp:cons "Connections"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-retries))
      (common-lisp:list
       (common-lisp:cons "MaxRetries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'allocated-capacity))
      (common-lisp:list
       (common-lisp:cons "AllocatedCapacity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'timeout))
      (common-lisp:list
       (common-lisp:cons "Timeout"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-capacity))
      (common-lisp:list
       (common-lisp:cons "MaxCapacity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'security-configuration))
      (common-lisp:list
       (common-lisp:cons "SecurityConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'notification-property))
      (common-lisp:list
       (common-lisp:cons "NotificationProperty"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'glue-version))
      (common-lisp:list
       (common-lisp:cons "GlueVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'number-of-workers))
      (common-lisp:list
       (common-lisp:cons "NumberOfWorkers"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'worker-type))
      (common-lisp:list
       (common-lisp:cons "WorkerType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'code-gen-configuration-nodes))
      (common-lisp:list
       (common-lisp:cons "CodeGenConfigurationNodes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'execution-class))
      (common-lisp:list
       (common-lisp:cons "ExecutionClass"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'source-control-details))
      (common-lisp:list
       (common-lisp:cons "SourceControlDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input create-job-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-job-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-job-response-"))
   (name common-lisp:nil :type (common-lisp:or name-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-job-response 'make-create-job-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input create-job-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input create-job-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input create-job-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-json-classifier-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-json-classifier-request-"))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or name-string common-lisp:null))
   (json-path (common-lisp:error ":json-path is required") :type
    (common-lisp:or json-path common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-json-classifier-request
                    'make-create-json-classifier-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-json-classifier-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-json-classifier-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'json-path))
      (common-lisp:list
       (common-lisp:cons "JsonPath"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-json-classifier-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-mltransform-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-mltransform-request-"))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or name-string common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or description-string common-lisp:null))
   (input-record-tables (common-lisp:error ":input-record-tables is required")
    :type (common-lisp:or glue-tables common-lisp:null))
   (parameters (common-lisp:error ":parameters is required") :type
    (common-lisp:or transform-parameters common-lisp:null))
   (role (common-lisp:error ":role is required") :type
    (common-lisp:or role-string common-lisp:null))
   (glue-version common-lisp:nil :type
    (common-lisp:or glue-version-string common-lisp:null))
   (max-capacity common-lisp:nil :type
    (common-lisp:or nullable-double common-lisp:null))
   (worker-type common-lisp:nil :type
    (common-lisp:or worker-type common-lisp:null))
   (number-of-workers common-lisp:nil :type
    (common-lisp:or nullable-integer common-lisp:null))
   (timeout common-lisp:nil :type (common-lisp:or timeout common-lisp:null))
   (max-retries common-lisp:nil :type
    (common-lisp:or nullable-integer common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tags-map common-lisp:null))
   (transform-encryption common-lisp:nil :type
    (common-lisp:or transform-encryption common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-mltransform-request
                    'make-create-mltransform-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-mltransform-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-mltransform-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'input-record-tables))
      (common-lisp:list
       (common-lisp:cons "InputRecordTables"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'parameters))
      (common-lisp:list
       (common-lisp:cons "Parameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role))
      (common-lisp:list
       (common-lisp:cons "Role"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'glue-version))
      (common-lisp:list
       (common-lisp:cons "GlueVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-capacity))
      (common-lisp:list
       (common-lisp:cons "MaxCapacity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'worker-type))
      (common-lisp:list
       (common-lisp:cons "WorkerType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'number-of-workers))
      (common-lisp:list
       (common-lisp:cons "NumberOfWorkers"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'timeout))
      (common-lisp:list
       (common-lisp:cons "Timeout"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-retries))
      (common-lisp:list
       (common-lisp:cons "MaxRetries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'transform-encryption))
      (common-lisp:list
       (common-lisp:cons "TransformEncryption"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-mltransform-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-mltransform-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-mltransform-response-"))
   (transform-id common-lisp:nil :type
    (common-lisp:or hash-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-mltransform-response
                    'make-create-mltransform-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-mltransform-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-mltransform-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'transform-id))
      (common-lisp:list
       (common-lisp:cons "TransformId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-mltransform-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-partition-index-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-partition-index-request-"))
   (catalog-id common-lisp:nil :type
    (common-lisp:or catalog-id-string common-lisp:null))
   (database-name (common-lisp:error ":database-name is required") :type
    (common-lisp:or name-string common-lisp:null))
   (table-name (common-lisp:error ":table-name is required") :type
    (common-lisp:or name-string common-lisp:null))
   (partition-index (common-lisp:error ":partition-index is required") :type
    (common-lisp:or partition-index common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-partition-index-request
                    'make-create-partition-index-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-partition-index-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-partition-index-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'catalog-id))
      (common-lisp:list
       (common-lisp:cons "CatalogId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'database-name))
      (common-lisp:list
       (common-lisp:cons "DatabaseName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'table-name))
      (common-lisp:list
       (common-lisp:cons "TableName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'partition-index))
      (common-lisp:list
       (common-lisp:cons "PartitionIndex"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-partition-index-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-partition-index-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-partition-index-response-")))
 (common-lisp:export
  (common-lisp:list 'create-partition-index-response
                    'make-create-partition-index-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-partition-index-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-partition-index-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-partition-index-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-partition-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-partition-request-"))
   (catalog-id common-lisp:nil :type
    (common-lisp:or catalog-id-string common-lisp:null))
   (database-name (common-lisp:error ":database-name is required") :type
    (common-lisp:or name-string common-lisp:null))
   (table-name (common-lisp:error ":table-name is required") :type
    (common-lisp:or name-string common-lisp:null))
   (partition-input (common-lisp:error ":partition-input is required") :type
    (common-lisp:or partition-input common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-partition-request 'make-create-partition-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-partition-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-partition-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'catalog-id))
      (common-lisp:list
       (common-lisp:cons "CatalogId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'database-name))
      (common-lisp:list
       (common-lisp:cons "DatabaseName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'table-name))
      (common-lisp:list
       (common-lisp:cons "TableName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'partition-input))
      (common-lisp:list
       (common-lisp:cons "PartitionInput"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-partition-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-partition-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-partition-response-")))
 (common-lisp:export
  (common-lisp:list 'create-partition-response
                    'make-create-partition-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-partition-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-partition-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-partition-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-registry-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-registry-input-"))
   (registry-name (common-lisp:error ":registry-name is required") :type
    (common-lisp:or schema-registry-name-string common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or description-string common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tags-map common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-registry-input 'make-create-registry-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-registry-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-registry-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'registry-name))
      (common-lisp:list
       (common-lisp:cons "RegistryName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-registry-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-registry-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-registry-response-"))
   (registry-arn common-lisp:nil :type
    (common-lisp:or glue-resource-arn common-lisp:null))
   (registry-name common-lisp:nil :type
    (common-lisp:or schema-registry-name-string common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or description-string common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tags-map common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-registry-response 'make-create-registry-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-registry-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-registry-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'registry-arn))
      (common-lisp:list
       (common-lisp:cons "RegistryArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'registry-name))
      (common-lisp:list
       (common-lisp:cons "RegistryName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-registry-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-schema-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-schema-input-"))
   (registry-id common-lisp:nil :type
    (common-lisp:or registry-id common-lisp:null))
   (schema-name (common-lisp:error ":schema-name is required") :type
    (common-lisp:or schema-registry-name-string common-lisp:null))
   (data-format (common-lisp:error ":data-format is required") :type
    (common-lisp:or data-format common-lisp:null))
   (compatibility common-lisp:nil :type
    (common-lisp:or compatibility common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or description-string common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tags-map common-lisp:null))
   (schema-definition common-lisp:nil :type
    (common-lisp:or schema-definition-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-schema-input 'make-create-schema-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input create-schema-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input create-schema-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'registry-id))
      (common-lisp:list
       (common-lisp:cons "RegistryId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'schema-name))
      (common-lisp:list
       (common-lisp:cons "SchemaName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-format))
      (common-lisp:list
       (common-lisp:cons "DataFormat"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'compatibility))
      (common-lisp:list
       (common-lisp:cons "Compatibility"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'schema-definition))
      (common-lisp:list
       (common-lisp:cons "SchemaDefinition"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input create-schema-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-schema-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-schema-response-"))
   (registry-name common-lisp:nil :type
    (common-lisp:or schema-registry-name-string common-lisp:null))
   (registry-arn common-lisp:nil :type
    (common-lisp:or glue-resource-arn common-lisp:null))
   (schema-name common-lisp:nil :type
    (common-lisp:or schema-registry-name-string common-lisp:null))
   (schema-arn common-lisp:nil :type
    (common-lisp:or glue-resource-arn common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or description-string common-lisp:null))
   (data-format common-lisp:nil :type
    (common-lisp:or data-format common-lisp:null))
   (compatibility common-lisp:nil :type
    (common-lisp:or compatibility common-lisp:null))
   (schema-checkpoint common-lisp:nil :type
    (common-lisp:or schema-checkpoint-number common-lisp:null))
   (latest-schema-version common-lisp:nil :type
    (common-lisp:or version-long-number common-lisp:null))
   (next-schema-version common-lisp:nil :type
    (common-lisp:or version-long-number common-lisp:null))
   (schema-status common-lisp:nil :type
    (common-lisp:or schema-status common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tags-map common-lisp:null))
   (schema-version-id common-lisp:nil :type
    (common-lisp:or schema-version-id-string common-lisp:null))
   (schema-version-status common-lisp:nil :type
    (common-lisp:or schema-version-status common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-schema-response 'make-create-schema-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-schema-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-schema-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'registry-name))
      (common-lisp:list
       (common-lisp:cons "RegistryName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'registry-arn))
      (common-lisp:list
       (common-lisp:cons "RegistryArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'schema-name))
      (common-lisp:list
       (common-lisp:cons "SchemaName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'schema-arn))
      (common-lisp:list
       (common-lisp:cons "SchemaArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-format))
      (common-lisp:list
       (common-lisp:cons "DataFormat"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'compatibility))
      (common-lisp:list
       (common-lisp:cons "Compatibility"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'schema-checkpoint))
      (common-lisp:list
       (common-lisp:cons "SchemaCheckpoint"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'latest-schema-version))
      (common-lisp:list
       (common-lisp:cons "LatestSchemaVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-schema-version))
      (common-lisp:list
       (common-lisp:cons "NextSchemaVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'schema-status))
      (common-lisp:list
       (common-lisp:cons "SchemaStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'schema-version-id))
      (common-lisp:list
       (common-lisp:cons "SchemaVersionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'schema-version-status))
      (common-lisp:list
       (common-lisp:cons "SchemaVersionStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-schema-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-script-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-script-request-"))
   (dag-nodes common-lisp:nil :type
    (common-lisp:or dag-nodes common-lisp:null))
   (dag-edges common-lisp:nil :type
    (common-lisp:or dag-edges common-lisp:null))
   (language common-lisp:nil :type (common-lisp:or language common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-script-request 'make-create-script-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-script-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-script-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dag-nodes))
      (common-lisp:list
       (common-lisp:cons "DagNodes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dag-edges))
      (common-lisp:list
       (common-lisp:cons "DagEdges"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'language))
      (common-lisp:list
       (common-lisp:cons "Language"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-script-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-script-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-script-response-"))
   (python-script common-lisp:nil :type
    (common-lisp:or python-script common-lisp:null))
   (scala-code common-lisp:nil :type
    (common-lisp:or scala-code common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-script-response 'make-create-script-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-script-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-script-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'python-script))
      (common-lisp:list
       (common-lisp:cons "PythonScript"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'scala-code))
      (common-lisp:list
       (common-lisp:cons "ScalaCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-script-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-security-configuration-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-security-configuration-request-"))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or name-string common-lisp:null))
   (encryption-configuration
    (common-lisp:error ":encryption-configuration is required") :type
    (common-lisp:or encryption-configuration common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-security-configuration-request
                    'make-create-security-configuration-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-security-configuration-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-security-configuration-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'encryption-configuration))
      (common-lisp:list
       (common-lisp:cons "EncryptionConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-security-configuration-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-security-configuration-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-security-configuration-response-"))
   (name common-lisp:nil :type (common-lisp:or name-string common-lisp:null))
   (created-timestamp common-lisp:nil :type
    (common-lisp:or timestamp-value common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-security-configuration-response
                    'make-create-security-configuration-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-security-configuration-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-security-configuration-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-timestamp))
      (common-lisp:list
       (common-lisp:cons "CreatedTimestamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-security-configuration-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-session-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-session-request-"))
   (id (common-lisp:error ":id is required") :type
    (common-lisp:or name-string common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or description-string common-lisp:null))
   (role (common-lisp:error ":role is required") :type
    (common-lisp:or orchestration-role-arn common-lisp:null))
   (command (common-lisp:error ":command is required") :type
    (common-lisp:or session-command common-lisp:null))
   (timeout common-lisp:nil :type (common-lisp:or timeout common-lisp:null))
   (idle-timeout common-lisp:nil :type
    (common-lisp:or timeout common-lisp:null))
   (default-arguments common-lisp:nil :type
    (common-lisp:or orchestration-arguments-map common-lisp:null))
   (connections common-lisp:nil :type
    (common-lisp:or connections-list common-lisp:null))
   (max-capacity common-lisp:nil :type
    (common-lisp:or nullable-double common-lisp:null))
   (number-of-workers common-lisp:nil :type
    (common-lisp:or nullable-integer common-lisp:null))
   (worker-type common-lisp:nil :type
    (common-lisp:or worker-type common-lisp:null))
   (security-configuration common-lisp:nil :type
    (common-lisp:or name-string common-lisp:null))
   (glue-version common-lisp:nil :type
    (common-lisp:or glue-version-string common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tags-map common-lisp:null))
   (request-origin common-lisp:nil :type
    (common-lisp:or orchestration-name-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-session-request 'make-create-session-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-session-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-session-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role))
      (common-lisp:list
       (common-lisp:cons "Role"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'command))
      (common-lisp:list
       (common-lisp:cons "Command"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'timeout))
      (common-lisp:list
       (common-lisp:cons "Timeout"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'idle-timeout))
      (common-lisp:list
       (common-lisp:cons "IdleTimeout"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'default-arguments))
      (common-lisp:list
       (common-lisp:cons "DefaultArguments"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'connections))
      (common-lisp:list
       (common-lisp:cons "Connections"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-capacity))
      (common-lisp:list
       (common-lisp:cons "MaxCapacity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'number-of-workers))
      (common-lisp:list
       (common-lisp:cons "NumberOfWorkers"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'worker-type))
      (common-lisp:list
       (common-lisp:cons "WorkerType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'security-configuration))
      (common-lisp:list
       (common-lisp:cons "SecurityConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'glue-version))
      (common-lisp:list
       (common-lisp:cons "GlueVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-origin))
      (common-lisp:list
       (common-lisp:cons "RequestOrigin"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-session-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-session-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-session-response-"))
   (session common-lisp:nil :type (common-lisp:or session common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-session-response 'make-create-session-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-session-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-session-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'session))
      (common-lisp:list
       (common-lisp:cons "Session"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-session-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-table-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-table-request-"))
   (catalog-id common-lisp:nil :type
    (common-lisp:or catalog-id-string common-lisp:null))
   (database-name (common-lisp:error ":database-name is required") :type
    (common-lisp:or name-string common-lisp:null))
   (table-input (common-lisp:error ":table-input is required") :type
    (common-lisp:or table-input common-lisp:null))
   (partition-indexes common-lisp:nil :type
    (common-lisp:or partition-index-list common-lisp:null))
   (transaction-id common-lisp:nil :type
    (common-lisp:or transaction-id-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-table-request 'make-create-table-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input create-table-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input create-table-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'catalog-id))
      (common-lisp:list
       (common-lisp:cons "CatalogId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'database-name))
      (common-lisp:list
       (common-lisp:cons "DatabaseName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'table-input))
      (common-lisp:list
       (common-lisp:cons "TableInput"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'partition-indexes))
      (common-lisp:list
       (common-lisp:cons "PartitionIndexes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'transaction-id))
      (common-lisp:list
       (common-lisp:cons "TransactionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input create-table-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-table-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-table-response-")))
 (common-lisp:export
  (common-lisp:list 'create-table-response 'make-create-table-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-table-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-table-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-table-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-trigger-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-trigger-request-"))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or name-string common-lisp:null))
   (workflow-name common-lisp:nil :type
    (common-lisp:or name-string common-lisp:null))
   (type (common-lisp:error ":type is required") :type
    (common-lisp:or trigger-type common-lisp:null))
   (schedule common-lisp:nil :type
    (common-lisp:or generic-string common-lisp:null))
   (predicate common-lisp:nil :type
    (common-lisp:or predicate common-lisp:null))
   (actions (common-lisp:error ":actions is required") :type
    (common-lisp:or action-list common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or description-string common-lisp:null))
   (start-on-creation common-lisp:nil :type
    (common-lisp:or boolean-value common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tags-map common-lisp:null))
   (event-batching-condition common-lisp:nil :type
    (common-lisp:or event-batching-condition common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-trigger-request 'make-create-trigger-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-trigger-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-trigger-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'workflow-name))
      (common-lisp:list
       (common-lisp:cons "WorkflowName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'schedule))
      (common-lisp:list
       (common-lisp:cons "Schedule"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'predicate))
      (common-lisp:list
       (common-lisp:cons "Predicate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'actions))
      (common-lisp:list
       (common-lisp:cons "Actions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start-on-creation))
      (common-lisp:list
       (common-lisp:cons "StartOnCreation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'event-batching-condition))
      (common-lisp:list
       (common-lisp:cons "EventBatchingCondition"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-trigger-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-trigger-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-trigger-response-"))
   (name common-lisp:nil :type (common-lisp:or name-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-trigger-response 'make-create-trigger-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-trigger-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-trigger-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-trigger-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-user-defined-function-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-user-defined-function-request-"))
   (catalog-id common-lisp:nil :type
    (common-lisp:or catalog-id-string common-lisp:null))
   (database-name (common-lisp:error ":database-name is required") :type
    (common-lisp:or name-string common-lisp:null))
   (function-input (common-lisp:error ":function-input is required") :type
    (common-lisp:or user-defined-function-input common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-user-defined-function-request
                    'make-create-user-defined-function-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-user-defined-function-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-user-defined-function-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'catalog-id))
      (common-lisp:list
       (common-lisp:cons "CatalogId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'database-name))
      (common-lisp:list
       (common-lisp:cons "DatabaseName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'function-input))
      (common-lisp:list
       (common-lisp:cons "FunctionInput"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-user-defined-function-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-user-defined-function-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-user-defined-function-response-")))
 (common-lisp:export
  (common-lisp:list 'create-user-defined-function-response
                    'make-create-user-defined-function-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-user-defined-function-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-user-defined-function-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-user-defined-function-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-workflow-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-workflow-request-"))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or name-string common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or generic-string common-lisp:null))
   (default-run-properties common-lisp:nil :type
    (common-lisp:or workflow-run-properties common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tags-map common-lisp:null))
   (max-concurrent-runs common-lisp:nil :type
    (common-lisp:or nullable-integer common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-workflow-request 'make-create-workflow-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-workflow-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-workflow-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'default-run-properties))
      (common-lisp:list
       (common-lisp:cons "DefaultRunProperties"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-concurrent-runs))
      (common-lisp:list
       (common-lisp:cons "MaxConcurrentRuns"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-workflow-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-workflow-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-workflow-response-"))
   (name common-lisp:nil :type (common-lisp:or name-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-workflow-response 'make-create-workflow-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-workflow-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-workflow-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-workflow-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-xmlclassifier-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-xmlclassifier-request-"))
   (classification (common-lisp:error ":classification is required") :type
    (common-lisp:or classification common-lisp:null))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or name-string common-lisp:null))
   (row-tag common-lisp:nil :type (common-lisp:or row-tag common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-xmlclassifier-request
                    'make-create-xmlclassifier-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-xmlclassifier-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-xmlclassifier-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'classification))
      (common-lisp:list
       (common-lisp:cons "Classification"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'row-tag))
      (common-lisp:list
       (common-lisp:cons "RowTag"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-xmlclassifier-request))
   common-lisp:nil))
(common-lisp:deftype created-timestamp () 'common-lisp:string)
(common-lisp:deftype cron-expression () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (csv-classifier (:copier common-lisp:nil)
      (:conc-name "struct-shape-csv-classifier-"))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or name-string common-lisp:null))
   (creation-time common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (last-updated common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (version common-lisp:nil :type (common-lisp:or version-id common-lisp:null))
   (delimiter common-lisp:nil :type
    (common-lisp:or csv-column-delimiter common-lisp:null))
   (quote-symbol common-lisp:nil :type
    (common-lisp:or csv-quote-symbol common-lisp:null))
   (contains-header common-lisp:nil :type
    (common-lisp:or csv-header-option common-lisp:null))
   (header common-lisp:nil :type (common-lisp:or csv-header common-lisp:null))
   (disable-value-trimming common-lisp:nil :type
    (common-lisp:or nullable-boolean common-lisp:null))
   (allow-single-column common-lisp:nil :type
    (common-lisp:or nullable-boolean common-lisp:null))
   (custom-datatype-configured common-lisp:nil :type
    (common-lisp:or nullable-boolean common-lisp:null))
   (custom-datatypes common-lisp:nil :type
    (common-lisp:or custom-datatypes common-lisp:null)))
 (common-lisp:export (common-lisp:list 'csv-classifier 'make-csv-classifier))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input csv-classifier))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input csv-classifier))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-time))
      (common-lisp:list
       (common-lisp:cons "CreationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-updated))
      (common-lisp:list
       (common-lisp:cons "LastUpdated"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version))
      (common-lisp:list
       (common-lisp:cons "Version"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'delimiter))
      (common-lisp:list
       (common-lisp:cons "Delimiter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'quote-symbol))
      (common-lisp:list
       (common-lisp:cons "QuoteSymbol"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'contains-header))
      (common-lisp:list
       (common-lisp:cons "ContainsHeader"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'header))
      (common-lisp:list
       (common-lisp:cons "Header"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'disable-value-trimming))
      (common-lisp:list
       (common-lisp:cons "DisableValueTrimming"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'allow-single-column))
      (common-lisp:list
       (common-lisp:cons "AllowSingleColumn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'custom-datatype-configured))
      (common-lisp:list
       (common-lisp:cons "CustomDatatypeConfigured"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'custom-datatypes))
      (common-lisp:list
       (common-lisp:cons "CustomDatatypes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input csv-classifier))
   common-lisp:nil))
(common-lisp:deftype csv-column-delimiter () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype csv-header () '(trivial-types:proper-list name-string))
 (common-lisp:defun |make-csv-header|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list name-string))
   aws-sdk/generator/shape::members))
(common-lisp:deftype csv-header-option () 'common-lisp:string)
(common-lisp:deftype csv-quote-symbol () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (custom-code (:copier common-lisp:nil)
      (:conc-name "struct-shape-custom-code-"))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or node-name common-lisp:null))
   (inputs (common-lisp:error ":inputs is required") :type
    (common-lisp:or many-inputs common-lisp:null))
   (code (common-lisp:error ":code is required") :type
    (common-lisp:or extended-string common-lisp:null))
   (class-name (common-lisp:error ":class-name is required") :type
    (common-lisp:or enclosed-in-string-property common-lisp:null))
   (output-schemas common-lisp:nil :type
    (common-lisp:or glue-schemas common-lisp:null)))
 (common-lisp:export (common-lisp:list 'custom-code 'make-custom-code))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input custom-code))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input custom-code))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'inputs))
      (common-lisp:list
       (common-lisp:cons "Inputs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'code))
      (common-lisp:list
       (common-lisp:cons "Code"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'class-name))
      (common-lisp:list
       (common-lisp:cons "ClassName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'output-schemas))
      (common-lisp:list
       (common-lisp:cons "OutputSchemas"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input custom-code))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype custom-datatypes ()
   '(trivial-types:proper-list name-string))
 (common-lisp:defun |make-custom-datatypes|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list name-string))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (custom-entity-type (:copier common-lisp:nil)
      (:conc-name "struct-shape-custom-entity-type-"))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or name-string common-lisp:null))
   (regex-string (common-lisp:error ":regex-string is required") :type
    (common-lisp:or name-string common-lisp:null))
   (context-words common-lisp:nil :type
    (common-lisp:or context-words common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'custom-entity-type 'make-custom-entity-type))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input custom-entity-type))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input custom-entity-type))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'regex-string))
      (common-lisp:list
       (common-lisp:cons "RegexString"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'context-words))
      (common-lisp:list
       (common-lisp:cons "ContextWords"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input custom-entity-type))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype custom-entity-type-names ()
   '(trivial-types:proper-list name-string))
 (common-lisp:defun |make-custom-entity-type-names|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list name-string))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype custom-entity-types ()
   '(trivial-types:proper-list custom-entity-type))
 (common-lisp:defun |make-custom-entity-types|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list custom-entity-type))
   aws-sdk/generator/shape::members))
(common-lisp:deftype custom-patterns () 'common-lisp:string)
(common-lisp:deftype dqdlstring () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (dqresults-publishing-options (:copier common-lisp:nil)
      (:conc-name "struct-shape-dqresults-publishing-options-"))
   (evaluation-context common-lisp:nil :type
    (common-lisp:or generic-limited-string common-lisp:null))
   (results-s3prefix common-lisp:nil :type
    (common-lisp:or enclosed-in-string-property common-lisp:null))
   (cloud-watch-metrics-enabled common-lisp:nil :type
    (common-lisp:or boxed-boolean common-lisp:null))
   (results-publishing-enabled common-lisp:nil :type
    (common-lisp:or boxed-boolean common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'dqresults-publishing-options
                    'make-dqresults-publishing-options))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          dqresults-publishing-options))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          dqresults-publishing-options))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'evaluation-context))
      (common-lisp:list
       (common-lisp:cons "EvaluationContext"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'results-s3prefix))
      (common-lisp:list
       (common-lisp:cons "ResultsS3Prefix"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cloud-watch-metrics-enabled))
      (common-lisp:list
       (common-lisp:cons "CloudWatchMetricsEnabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'results-publishing-enabled))
      (common-lisp:list
       (common-lisp:cons "ResultsPublishingEnabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          dqresults-publishing-options))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (dqstop-job-on-failure-options (:copier common-lisp:nil)
      (:conc-name "struct-shape-dqstop-job-on-failure-options-"))
   (stop-job-on-failure-timing common-lisp:nil :type
    (common-lisp:or dqstop-job-on-failure-timing common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'dqstop-job-on-failure-options
                    'make-dqstop-job-on-failure-options))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          dqstop-job-on-failure-options))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          dqstop-job-on-failure-options))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'stop-job-on-failure-timing))
      (common-lisp:list
       (common-lisp:cons "StopJobOnFailureTiming"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          dqstop-job-on-failure-options))
   common-lisp:nil))
(common-lisp:deftype dqstop-job-on-failure-timing () 'common-lisp:string)
(common-lisp:deftype dqtransform-output () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype dag-edges () '(trivial-types:proper-list code-gen-edge))
 (common-lisp:defun |make-dag-edges|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list code-gen-edge))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype dag-nodes () '(trivial-types:proper-list code-gen-node))
 (common-lisp:defun |make-dag-nodes|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list code-gen-node))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (data-catalog-encryption-settings (:copier common-lisp:nil)
      (:conc-name "struct-shape-data-catalog-encryption-settings-"))
   (encryption-at-rest common-lisp:nil :type
    (common-lisp:or encryption-at-rest common-lisp:null))
   (connection-password-encryption common-lisp:nil :type
    (common-lisp:or connection-password-encryption common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'data-catalog-encryption-settings
                    'make-data-catalog-encryption-settings))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          data-catalog-encryption-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          data-catalog-encryption-settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'encryption-at-rest))
      (common-lisp:list
       (common-lisp:cons "EncryptionAtRest"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'connection-password-encryption))
      (common-lisp:list
       (common-lisp:cons "ConnectionPasswordEncryption"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          data-catalog-encryption-settings))
   common-lisp:nil))
(common-lisp:deftype data-format () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (data-lake-principal (:copier common-lisp:nil)
      (:conc-name "struct-shape-data-lake-principal-"))
   (data-lake-principal-identifier common-lisp:nil :type
    (common-lisp:or data-lake-principal-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'data-lake-principal 'make-data-lake-principal))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input data-lake-principal))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input data-lake-principal))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'data-lake-principal-identifier))
      (common-lisp:list
       (common-lisp:cons "DataLakePrincipalIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input data-lake-principal))
   common-lisp:nil))
(common-lisp:deftype data-lake-principal-string () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (data-quality-evaluation-run-additional-run-options
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-data-quality-evaluation-run-additional-run-options-"))
   (cloud-watch-metrics-enabled common-lisp:nil :type
    (common-lisp:or nullable-boolean common-lisp:null))
   (results-s3prefix common-lisp:nil :type
    (common-lisp:or uri-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'data-quality-evaluation-run-additional-run-options
                    'make-data-quality-evaluation-run-additional-run-options))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          data-quality-evaluation-run-additional-run-options))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          data-quality-evaluation-run-additional-run-options))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cloud-watch-metrics-enabled))
      (common-lisp:list
       (common-lisp:cons "CloudWatchMetricsEnabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'results-s3prefix))
      (common-lisp:list
       (common-lisp:cons "ResultsS3Prefix"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          data-quality-evaluation-run-additional-run-options))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (data-quality-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-data-quality-result-"))
   (result-id common-lisp:nil :type
    (common-lisp:or hash-string common-lisp:null))
   (score common-lisp:nil :type
    (common-lisp:or generic-bounded-double common-lisp:null))
   (data-source common-lisp:nil :type
    (common-lisp:or data-source common-lisp:null))
   (ruleset-name common-lisp:nil :type
    (common-lisp:or name-string common-lisp:null))
   (evaluation-context common-lisp:nil :type
    (common-lisp:or generic-string common-lisp:null))
   (started-on common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (completed-on common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (job-name common-lisp:nil :type
    (common-lisp:or name-string common-lisp:null))
   (job-run-id common-lisp:nil :type
    (common-lisp:or hash-string common-lisp:null))
   (ruleset-evaluation-run-id common-lisp:nil :type
    (common-lisp:or hash-string common-lisp:null))
   (rule-results common-lisp:nil :type
    (common-lisp:or data-quality-rule-results common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'data-quality-result 'make-data-quality-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input data-quality-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input data-quality-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'result-id))
      (common-lisp:list
       (common-lisp:cons "ResultId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'score))
      (common-lisp:list
       (common-lisp:cons "Score"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-source))
      (common-lisp:list
       (common-lisp:cons "DataSource"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ruleset-name))
      (common-lisp:list
       (common-lisp:cons "RulesetName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'evaluation-context))
      (common-lisp:list
       (common-lisp:cons "EvaluationContext"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'started-on))
      (common-lisp:list
       (common-lisp:cons "StartedOn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'completed-on))
      (common-lisp:list
       (common-lisp:cons "CompletedOn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-name))
      (common-lisp:list
       (common-lisp:cons "JobName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-run-id))
      (common-lisp:list
       (common-lisp:cons "JobRunId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'ruleset-evaluation-run-id))
      (common-lisp:list
       (common-lisp:cons "RulesetEvaluationRunId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rule-results))
      (common-lisp:list
       (common-lisp:cons "RuleResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input data-quality-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (data-quality-result-description (:copier common-lisp:nil)
      (:conc-name "struct-shape-data-quality-result-description-"))
   (result-id common-lisp:nil :type
    (common-lisp:or hash-string common-lisp:null))
   (data-source common-lisp:nil :type
    (common-lisp:or data-source common-lisp:null))
   (job-name common-lisp:nil :type
    (common-lisp:or name-string common-lisp:null))
   (job-run-id common-lisp:nil :type
    (common-lisp:or hash-string common-lisp:null))
   (started-on common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'data-quality-result-description
                    'make-data-quality-result-description))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          data-quality-result-description))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          data-quality-result-description))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'result-id))
      (common-lisp:list
       (common-lisp:cons "ResultId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-source))
      (common-lisp:list
       (common-lisp:cons "DataSource"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-name))
      (common-lisp:list
       (common-lisp:cons "JobName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-run-id))
      (common-lisp:list
       (common-lisp:cons "JobRunId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'started-on))
      (common-lisp:list
       (common-lisp:cons "StartedOn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          data-quality-result-description))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype data-quality-result-description-list ()
   '(trivial-types:proper-list data-quality-result-description))
 (common-lisp:defun |make-data-quality-result-description-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            data-quality-result-description))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (data-quality-result-filter-criteria (:copier common-lisp:nil)
      (:conc-name "struct-shape-data-quality-result-filter-criteria-"))
   (data-source common-lisp:nil :type
    (common-lisp:or data-source common-lisp:null))
   (job-name common-lisp:nil :type
    (common-lisp:or name-string common-lisp:null))
   (job-run-id common-lisp:nil :type
    (common-lisp:or hash-string common-lisp:null))
   (started-after common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (started-before common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'data-quality-result-filter-criteria
                    'make-data-quality-result-filter-criteria))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          data-quality-result-filter-criteria))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          data-quality-result-filter-criteria))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-source))
      (common-lisp:list
       (common-lisp:cons "DataSource"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-name))
      (common-lisp:list
       (common-lisp:cons "JobName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-run-id))
      (common-lisp:list
       (common-lisp:cons "JobRunId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'started-after))
      (common-lisp:list
       (common-lisp:cons "StartedAfter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'started-before))
      (common-lisp:list
       (common-lisp:cons "StartedBefore"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          data-quality-result-filter-criteria))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype data-quality-result-id-list ()
   '(trivial-types:proper-list hash-string))
 (common-lisp:defun |make-data-quality-result-id-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list hash-string))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype data-quality-result-ids ()
   '(trivial-types:proper-list hash-string))
 (common-lisp:defun |make-data-quality-result-ids|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list hash-string))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype data-quality-results-list ()
   '(trivial-types:proper-list data-quality-result))
 (common-lisp:defun |make-data-quality-results-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list data-quality-result))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (data-quality-rule-recommendation-run-description
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-data-quality-rule-recommendation-run-description-"))
   (run-id common-lisp:nil :type (common-lisp:or hash-string common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or task-status-type common-lisp:null))
   (started-on common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (data-source common-lisp:nil :type
    (common-lisp:or data-source common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'data-quality-rule-recommendation-run-description
                    'make-data-quality-rule-recommendation-run-description))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          data-quality-rule-recommendation-run-description))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          data-quality-rule-recommendation-run-description))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'run-id))
      (common-lisp:list
       (common-lisp:cons "RunId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'started-on))
      (common-lisp:list
       (common-lisp:cons "StartedOn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-source))
      (common-lisp:list
       (common-lisp:cons "DataSource"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          data-quality-rule-recommendation-run-description))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (data-quality-rule-recommendation-run-filter (:copier common-lisp:nil)
      (:conc-name "struct-shape-data-quality-rule-recommendation-run-filter-"))
   (data-source (common-lisp:error ":data-source is required") :type
    (common-lisp:or data-source common-lisp:null))
   (started-before common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (started-after common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'data-quality-rule-recommendation-run-filter
                    'make-data-quality-rule-recommendation-run-filter))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          data-quality-rule-recommendation-run-filter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          data-quality-rule-recommendation-run-filter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-source))
      (common-lisp:list
       (common-lisp:cons "DataSource"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'started-before))
      (common-lisp:list
       (common-lisp:cons "StartedBefore"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'started-after))
      (common-lisp:list
       (common-lisp:cons "StartedAfter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          data-quality-rule-recommendation-run-filter))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype data-quality-rule-recommendation-run-list ()
   '(trivial-types:proper-list
     data-quality-rule-recommendation-run-description))
 (common-lisp:defun |make-data-quality-rule-recommendation-run-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            data-quality-rule-recommendation-run-description))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (data-quality-rule-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-data-quality-rule-result-"))
   (name common-lisp:nil :type (common-lisp:or name-string common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or description-string common-lisp:null))
   (evaluation-message common-lisp:nil :type
    (common-lisp:or description-string common-lisp:null))
   (result common-lisp:nil :type
    (common-lisp:or data-quality-rule-result-status common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'data-quality-rule-result 'make-data-quality-rule-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          data-quality-rule-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          data-quality-rule-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'evaluation-message))
      (common-lisp:list
       (common-lisp:cons "EvaluationMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'result))
      (common-lisp:list
       (common-lisp:cons "Result"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          data-quality-rule-result))
   common-lisp:nil))
(common-lisp:deftype data-quality-rule-result-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype data-quality-rule-results ()
   '(trivial-types:proper-list data-quality-rule-result))
 (common-lisp:defun |make-data-quality-rule-results|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            data-quality-rule-result))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (data-quality-ruleset-evaluation-run-description (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-data-quality-ruleset-evaluation-run-description-"))
   (run-id common-lisp:nil :type (common-lisp:or hash-string common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or task-status-type common-lisp:null))
   (started-on common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (data-source common-lisp:nil :type
    (common-lisp:or data-source common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'data-quality-ruleset-evaluation-run-description
                    'make-data-quality-ruleset-evaluation-run-description))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          data-quality-ruleset-evaluation-run-description))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          data-quality-ruleset-evaluation-run-description))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'run-id))
      (common-lisp:list
       (common-lisp:cons "RunId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'started-on))
      (common-lisp:list
       (common-lisp:cons "StartedOn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-source))
      (common-lisp:list
       (common-lisp:cons "DataSource"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          data-quality-ruleset-evaluation-run-description))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (data-quality-ruleset-evaluation-run-filter (:copier common-lisp:nil)
      (:conc-name "struct-shape-data-quality-ruleset-evaluation-run-filter-"))
   (data-source (common-lisp:error ":data-source is required") :type
    (common-lisp:or data-source common-lisp:null))
   (started-before common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (started-after common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'data-quality-ruleset-evaluation-run-filter
                    'make-data-quality-ruleset-evaluation-run-filter))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          data-quality-ruleset-evaluation-run-filter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          data-quality-ruleset-evaluation-run-filter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-source))
      (common-lisp:list
       (common-lisp:cons "DataSource"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'started-before))
      (common-lisp:list
       (common-lisp:cons "StartedBefore"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'started-after))
      (common-lisp:list
       (common-lisp:cons "StartedAfter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          data-quality-ruleset-evaluation-run-filter))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype data-quality-ruleset-evaluation-run-list ()
   '(trivial-types:proper-list
     data-quality-ruleset-evaluation-run-description))
 (common-lisp:defun |make-data-quality-ruleset-evaluation-run-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            data-quality-ruleset-evaluation-run-description))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (data-quality-ruleset-filter-criteria (:copier common-lisp:nil)
      (:conc-name "struct-shape-data-quality-ruleset-filter-criteria-"))
   (name common-lisp:nil :type (common-lisp:or name-string common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or description-string common-lisp:null))
   (created-before common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (created-after common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (last-modified-before common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (last-modified-after common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (target-table common-lisp:nil :type
    (common-lisp:or data-quality-target-table common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'data-quality-ruleset-filter-criteria
                    'make-data-quality-ruleset-filter-criteria))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          data-quality-ruleset-filter-criteria))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          data-quality-ruleset-filter-criteria))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-before))
      (common-lisp:list
       (common-lisp:cons "CreatedBefore"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-after))
      (common-lisp:list
       (common-lisp:cons "CreatedAfter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'last-modified-before))
      (common-lisp:list
       (common-lisp:cons "LastModifiedBefore"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-modified-after))
      (common-lisp:list
       (common-lisp:cons "LastModifiedAfter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target-table))
      (common-lisp:list
       (common-lisp:cons "TargetTable"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          data-quality-ruleset-filter-criteria))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype data-quality-ruleset-list ()
   '(trivial-types:proper-list data-quality-ruleset-list-details))
 (common-lisp:defun |make-data-quality-ruleset-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            data-quality-ruleset-list-details))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (data-quality-ruleset-list-details (:copier common-lisp:nil)
      (:conc-name "struct-shape-data-quality-ruleset-list-details-"))
   (name common-lisp:nil :type (common-lisp:or name-string common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or description-string common-lisp:null))
   (created-on common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (last-modified-on common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (target-table common-lisp:nil :type
    (common-lisp:or data-quality-target-table common-lisp:null))
   (recommendation-run-id common-lisp:nil :type
    (common-lisp:or hash-string common-lisp:null))
   (rule-count common-lisp:nil :type
    (common-lisp:or nullable-integer common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'data-quality-ruleset-list-details
                    'make-data-quality-ruleset-list-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          data-quality-ruleset-list-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          data-quality-ruleset-list-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-on))
      (common-lisp:list
       (common-lisp:cons "CreatedOn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-modified-on))
      (common-lisp:list
       (common-lisp:cons "LastModifiedOn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target-table))
      (common-lisp:list
       (common-lisp:cons "TargetTable"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'recommendation-run-id))
      (common-lisp:list
       (common-lisp:cons "RecommendationRunId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rule-count))
      (common-lisp:list
       (common-lisp:cons "RuleCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          data-quality-ruleset-list-details))
   common-lisp:nil))
(common-lisp:deftype data-quality-ruleset-string () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (data-quality-target-table (:copier common-lisp:nil)
      (:conc-name "struct-shape-data-quality-target-table-"))
   (table-name (common-lisp:error ":table-name is required") :type
    (common-lisp:or name-string common-lisp:null))
   (database-name (common-lisp:error ":database-name is required") :type
    (common-lisp:or name-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'data-quality-target-table
                    'make-data-quality-target-table))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          data-quality-target-table))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          data-quality-target-table))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'table-name))
      (common-lisp:list
       (common-lisp:cons "TableName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'database-name))
      (common-lisp:list
       (common-lisp:cons "DatabaseName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          data-quality-target-table))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (data-source (:copier common-lisp:nil)
      (:conc-name "struct-shape-data-source-"))
   (glue-table (common-lisp:error ":glue-table is required") :type
    (common-lisp:or glue-table common-lisp:null)))
 (common-lisp:export (common-lisp:list 'data-source 'make-data-source))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input data-source))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input data-source))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'glue-table))
      (common-lisp:list
       (common-lisp:cons "GlueTable"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input data-source))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (database (:copier common-lisp:nil) (:conc-name "struct-shape-database-"))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or name-string common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or description-string common-lisp:null))
   (location-uri common-lisp:nil :type (common-lisp:or uri common-lisp:null))
   (parameters common-lisp:nil :type
    (common-lisp:or parameters-map common-lisp:null))
   (create-time common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (create-table-default-permissions common-lisp:nil :type
    (common-lisp:or principal-permissions-list common-lisp:null))
   (target-database common-lisp:nil :type
    (common-lisp:or database-identifier common-lisp:null))
   (catalog-id common-lisp:nil :type
    (common-lisp:or catalog-id-string common-lisp:null)))
 (common-lisp:export (common-lisp:list 'database 'make-database))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input database))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input database))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'location-uri))
      (common-lisp:list
       (common-lisp:cons "LocationUri"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'parameters))
      (common-lisp:list
       (common-lisp:cons "Parameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'create-time))
      (common-lisp:list
       (common-lisp:cons "CreateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'create-table-default-permissions))
      (common-lisp:list
       (common-lisp:cons "CreateTableDefaultPermissions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target-database))
      (common-lisp:list
       (common-lisp:cons "TargetDatabase"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'catalog-id))
      (common-lisp:list
       (common-lisp:cons "CatalogId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input database))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (database-identifier (:copier common-lisp:nil)
      (:conc-name "struct-shape-database-identifier-"))
   (catalog-id common-lisp:nil :type
    (common-lisp:or catalog-id-string common-lisp:null))
   (database-name common-lisp:nil :type
    (common-lisp:or name-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'database-identifier 'make-database-identifier))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input database-identifier))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input database-identifier))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'catalog-id))
      (common-lisp:list
       (common-lisp:cons "CatalogId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'database-name))
      (common-lisp:list
       (common-lisp:cons "DatabaseName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input database-identifier))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (database-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-database-input-"))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or name-string common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or description-string common-lisp:null))
   (location-uri common-lisp:nil :type (common-lisp:or uri common-lisp:null))
   (parameters common-lisp:nil :type
    (common-lisp:or parameters-map common-lisp:null))
   (create-table-default-permissions common-lisp:nil :type
    (common-lisp:or principal-permissions-list common-lisp:null))
   (target-database common-lisp:nil :type
    (common-lisp:or database-identifier common-lisp:null)))
 (common-lisp:export (common-lisp:list 'database-input 'make-database-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input database-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input database-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'location-uri))
      (common-lisp:list
       (common-lisp:cons "LocationUri"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'parameters))
      (common-lisp:list
       (common-lisp:cons "Parameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'create-table-default-permissions))
      (common-lisp:list
       (common-lisp:cons "CreateTableDefaultPermissions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target-database))
      (common-lisp:list
       (common-lisp:cons "TargetDatabase"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input database-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype database-list () '(trivial-types:proper-list database))
 (common-lisp:defun |make-database-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list database))
   aws-sdk/generator/shape::members))
(common-lisp:deftype database-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (datatype (:copier common-lisp:nil) (:conc-name "struct-shape-datatype-"))
   (id (common-lisp:error ":id is required") :type
    (common-lisp:or generic-limited-string common-lisp:null))
   (label (common-lisp:error ":label is required") :type
    (common-lisp:or generic-limited-string common-lisp:null)))
 (common-lisp:export (common-lisp:list 'datatype 'make-datatype))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input datatype))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input datatype))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'label))
      (common-lisp:list
       (common-lisp:cons "Label"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input datatype))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (date-column-statistics-data (:copier common-lisp:nil)
      (:conc-name "struct-shape-date-column-statistics-data-"))
   (minimum-value common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (maximum-value common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (number-of-nulls (common-lisp:error ":number-of-nulls is required") :type
    (common-lisp:or non-negative-long common-lisp:null))
   (number-of-distinct-values
    (common-lisp:error ":number-of-distinct-values is required") :type
    (common-lisp:or non-negative-long common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'date-column-statistics-data
                    'make-date-column-statistics-data))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          date-column-statistics-data))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          date-column-statistics-data))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'minimum-value))
      (common-lisp:list
       (common-lisp:cons "MinimumValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'maximum-value))
      (common-lisp:list
       (common-lisp:cons "MaximumValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'number-of-nulls))
      (common-lisp:list
       (common-lisp:cons "NumberOfNulls"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'number-of-distinct-values))
      (common-lisp:list
       (common-lisp:cons "NumberOfDistinctValues"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          date-column-statistics-data))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (decimal-column-statistics-data (:copier common-lisp:nil)
      (:conc-name "struct-shape-decimal-column-statistics-data-"))
   (minimum-value common-lisp:nil :type
    (common-lisp:or decimal-number common-lisp:null))
   (maximum-value common-lisp:nil :type
    (common-lisp:or decimal-number common-lisp:null))
   (number-of-nulls (common-lisp:error ":number-of-nulls is required") :type
    (common-lisp:or non-negative-long common-lisp:null))
   (number-of-distinct-values
    (common-lisp:error ":number-of-distinct-values is required") :type
    (common-lisp:or non-negative-long common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'decimal-column-statistics-data
                    'make-decimal-column-statistics-data))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          decimal-column-statistics-data))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          decimal-column-statistics-data))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'minimum-value))
      (common-lisp:list
       (common-lisp:cons "MinimumValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'maximum-value))
      (common-lisp:list
       (common-lisp:cons "MaximumValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'number-of-nulls))
      (common-lisp:list
       (common-lisp:cons "NumberOfNulls"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'number-of-distinct-values))
      (common-lisp:list
       (common-lisp:cons "NumberOfDistinctValues"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          decimal-column-statistics-data))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (decimal-number (:copier common-lisp:nil)
      (:conc-name "struct-shape-decimal-number-"))
   (unscaled-value (common-lisp:error ":unscaled-value is required") :type
    (common-lisp:or blob common-lisp:null))
   (scale (common-lisp:error ":scale is required") :type
    (common-lisp:or integer common-lisp:null)))
 (common-lisp:export (common-lisp:list 'decimal-number 'make-decimal-number))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input decimal-number))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input decimal-number))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'unscaled-value))
      (common-lisp:list
       (common-lisp:cons "UnscaledValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'scale))
      (common-lisp:list
       (common-lisp:cons "Scale"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input decimal-number))
   common-lisp:nil))
(common-lisp:deftype delete-behavior () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (delete-blueprint-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-blueprint-request-"))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or name-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-blueprint-request 'make-delete-blueprint-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-blueprint-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-blueprint-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-blueprint-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-blueprint-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-blueprint-response-"))
   (name common-lisp:nil :type (common-lisp:or name-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-blueprint-response
                    'make-delete-blueprint-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-blueprint-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-blueprint-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-blueprint-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-classifier-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-classifier-request-"))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or name-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-classifier-request
                    'make-delete-classifier-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-classifier-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-classifier-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-classifier-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-classifier-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-classifier-response-")))
 (common-lisp:export
  (common-lisp:list 'delete-classifier-response
                    'make-delete-classifier-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-classifier-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-classifier-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-classifier-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-column-statistics-for-partition-request (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-delete-column-statistics-for-partition-request-"))
   (catalog-id common-lisp:nil :type
    (common-lisp:or catalog-id-string common-lisp:null))
   (database-name (common-lisp:error ":database-name is required") :type
    (common-lisp:or name-string common-lisp:null))
   (table-name (common-lisp:error ":table-name is required") :type
    (common-lisp:or name-string common-lisp:null))
   (partition-values (common-lisp:error ":partition-values is required") :type
    (common-lisp:or value-string-list common-lisp:null))
   (column-name (common-lisp:error ":column-name is required") :type
    (common-lisp:or name-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-column-statistics-for-partition-request
                    'make-delete-column-statistics-for-partition-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-column-statistics-for-partition-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-column-statistics-for-partition-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'catalog-id))
      (common-lisp:list
       (common-lisp:cons "CatalogId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'database-name))
      (common-lisp:list
       (common-lisp:cons "DatabaseName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'table-name))
      (common-lisp:list
       (common-lisp:cons "TableName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'partition-values))
      (common-lisp:list
       (common-lisp:cons "PartitionValues"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'column-name))
      (common-lisp:list
       (common-lisp:cons "ColumnName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-column-statistics-for-partition-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-column-statistics-for-partition-response (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-delete-column-statistics-for-partition-response-")))
 (common-lisp:export
  (common-lisp:list 'delete-column-statistics-for-partition-response
                    'make-delete-column-statistics-for-partition-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-column-statistics-for-partition-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-column-statistics-for-partition-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-column-statistics-for-partition-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-column-statistics-for-table-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-column-statistics-for-table-request-"))
   (catalog-id common-lisp:nil :type
    (common-lisp:or catalog-id-string common-lisp:null))
   (database-name (common-lisp:error ":database-name is required") :type
    (common-lisp:or name-string common-lisp:null))
   (table-name (common-lisp:error ":table-name is required") :type
    (common-lisp:or name-string common-lisp:null))
   (column-name (common-lisp:error ":column-name is required") :type
    (common-lisp:or name-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-column-statistics-for-table-request
                    'make-delete-column-statistics-for-table-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-column-statistics-for-table-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-column-statistics-for-table-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'catalog-id))
      (common-lisp:list
       (common-lisp:cons "CatalogId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'database-name))
      (common-lisp:list
       (common-lisp:cons "DatabaseName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'table-name))
      (common-lisp:list
       (common-lisp:cons "TableName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'column-name))
      (common-lisp:list
       (common-lisp:cons "ColumnName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-column-statistics-for-table-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-column-statistics-for-table-response (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-delete-column-statistics-for-table-response-")))
 (common-lisp:export
  (common-lisp:list 'delete-column-statistics-for-table-response
                    'make-delete-column-statistics-for-table-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-column-statistics-for-table-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-column-statistics-for-table-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-column-statistics-for-table-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype delete-connection-name-list ()
   '(trivial-types:proper-list name-string))
 (common-lisp:defun |make-delete-connection-name-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list name-string))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-connection-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-connection-request-"))
   (catalog-id common-lisp:nil :type
    (common-lisp:or catalog-id-string common-lisp:null))
   (connection-name (common-lisp:error ":connection-name is required") :type
    (common-lisp:or name-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-connection-request
                    'make-delete-connection-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-connection-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-connection-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'catalog-id))
      (common-lisp:list
       (common-lisp:cons "CatalogId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'connection-name))
      (common-lisp:list
       (common-lisp:cons "ConnectionName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-connection-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-connection-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-connection-response-")))
 (common-lisp:export
  (common-lisp:list 'delete-connection-response
                    'make-delete-connection-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-connection-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-connection-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-connection-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-crawler-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-crawler-request-"))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or name-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-crawler-request 'make-delete-crawler-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-crawler-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-crawler-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-crawler-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-crawler-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-crawler-response-")))
 (common-lisp:export
  (common-lisp:list 'delete-crawler-response 'make-delete-crawler-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-crawler-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-crawler-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-crawler-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-custom-entity-type-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-custom-entity-type-request-"))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or name-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-custom-entity-type-request
                    'make-delete-custom-entity-type-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-custom-entity-type-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-custom-entity-type-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-custom-entity-type-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-custom-entity-type-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-custom-entity-type-response-"))
   (name common-lisp:nil :type (common-lisp:or name-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-custom-entity-type-response
                    'make-delete-custom-entity-type-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-custom-entity-type-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-custom-entity-type-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-custom-entity-type-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-data-quality-ruleset-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-data-quality-ruleset-request-"))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or name-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-data-quality-ruleset-request
                    'make-delete-data-quality-ruleset-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-data-quality-ruleset-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-data-quality-ruleset-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-data-quality-ruleset-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-data-quality-ruleset-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-data-quality-ruleset-response-")))
 (common-lisp:export
  (common-lisp:list 'delete-data-quality-ruleset-response
                    'make-delete-data-quality-ruleset-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-data-quality-ruleset-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-data-quality-ruleset-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-data-quality-ruleset-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-database-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-database-request-"))
   (catalog-id common-lisp:nil :type
    (common-lisp:or catalog-id-string common-lisp:null))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or name-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-database-request 'make-delete-database-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-database-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-database-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'catalog-id))
      (common-lisp:list
       (common-lisp:cons "CatalogId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-database-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-database-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-database-response-")))
 (common-lisp:export
  (common-lisp:list 'delete-database-response 'make-delete-database-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-database-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-database-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-database-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-dev-endpoint-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-dev-endpoint-request-"))
   (endpoint-name (common-lisp:error ":endpoint-name is required") :type
    (common-lisp:or generic-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-dev-endpoint-request
                    'make-delete-dev-endpoint-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-dev-endpoint-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-dev-endpoint-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'endpoint-name))
      (common-lisp:list
       (common-lisp:cons "EndpointName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-dev-endpoint-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-dev-endpoint-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-dev-endpoint-response-")))
 (common-lisp:export
  (common-lisp:list 'delete-dev-endpoint-response
                    'make-delete-dev-endpoint-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-dev-endpoint-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-dev-endpoint-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-dev-endpoint-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-job-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-job-request-"))
   (job-name (common-lisp:error ":job-name is required") :type
    (common-lisp:or name-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-job-request 'make-delete-job-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input delete-job-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input delete-job-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-name))
      (common-lisp:list
       (common-lisp:cons "JobName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input delete-job-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-job-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-job-response-"))
   (job-name common-lisp:nil :type
    (common-lisp:or name-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-job-response 'make-delete-job-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input delete-job-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input delete-job-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-name))
      (common-lisp:list
       (common-lisp:cons "JobName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input delete-job-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-mltransform-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-mltransform-request-"))
   (transform-id (common-lisp:error ":transform-id is required") :type
    (common-lisp:or hash-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-mltransform-request
                    'make-delete-mltransform-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-mltransform-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-mltransform-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'transform-id))
      (common-lisp:list
       (common-lisp:cons "TransformId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-mltransform-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-mltransform-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-mltransform-response-"))
   (transform-id common-lisp:nil :type
    (common-lisp:or hash-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-mltransform-response
                    'make-delete-mltransform-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-mltransform-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-mltransform-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'transform-id))
      (common-lisp:list
       (common-lisp:cons "TransformId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-mltransform-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-partition-index-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-partition-index-request-"))
   (catalog-id common-lisp:nil :type
    (common-lisp:or catalog-id-string common-lisp:null))
   (database-name (common-lisp:error ":database-name is required") :type
    (common-lisp:or name-string common-lisp:null))
   (table-name (common-lisp:error ":table-name is required") :type
    (common-lisp:or name-string common-lisp:null))
   (index-name (common-lisp:error ":index-name is required") :type
    (common-lisp:or name-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-partition-index-request
                    'make-delete-partition-index-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-partition-index-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-partition-index-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'catalog-id))
      (common-lisp:list
       (common-lisp:cons "CatalogId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'database-name))
      (common-lisp:list
       (common-lisp:cons "DatabaseName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'table-name))
      (common-lisp:list
       (common-lisp:cons "TableName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'index-name))
      (common-lisp:list
       (common-lisp:cons "IndexName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-partition-index-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-partition-index-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-partition-index-response-")))
 (common-lisp:export
  (common-lisp:list 'delete-partition-index-response
                    'make-delete-partition-index-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-partition-index-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-partition-index-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-partition-index-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-partition-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-partition-request-"))
   (catalog-id common-lisp:nil :type
    (common-lisp:or catalog-id-string common-lisp:null))
   (database-name (common-lisp:error ":database-name is required") :type
    (common-lisp:or name-string common-lisp:null))
   (table-name (common-lisp:error ":table-name is required") :type
    (common-lisp:or name-string common-lisp:null))
   (partition-values (common-lisp:error ":partition-values is required") :type
    (common-lisp:or value-string-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-partition-request 'make-delete-partition-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-partition-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-partition-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'catalog-id))
      (common-lisp:list
       (common-lisp:cons "CatalogId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'database-name))
      (common-lisp:list
       (common-lisp:cons "DatabaseName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'table-name))
      (common-lisp:list
       (common-lisp:cons "TableName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'partition-values))
      (common-lisp:list
       (common-lisp:cons "PartitionValues"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-partition-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-partition-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-partition-response-")))
 (common-lisp:export
  (common-lisp:list 'delete-partition-response
                    'make-delete-partition-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-partition-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-partition-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-partition-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-registry-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-registry-input-"))
   (registry-id (common-lisp:error ":registry-id is required") :type
    (common-lisp:or registry-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-registry-input 'make-delete-registry-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-registry-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-registry-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'registry-id))
      (common-lisp:list
       (common-lisp:cons "RegistryId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-registry-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-registry-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-registry-response-"))
   (registry-name common-lisp:nil :type
    (common-lisp:or schema-registry-name-string common-lisp:null))
   (registry-arn common-lisp:nil :type
    (common-lisp:or glue-resource-arn common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or registry-status common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-registry-response 'make-delete-registry-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-registry-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-registry-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'registry-name))
      (common-lisp:list
       (common-lisp:cons "RegistryName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'registry-arn))
      (common-lisp:list
       (common-lisp:cons "RegistryArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-registry-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-resource-policy-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-resource-policy-request-"))
   (policy-hash-condition common-lisp:nil :type
    (common-lisp:or hash-string common-lisp:null))
   (resource-arn common-lisp:nil :type
    (common-lisp:or glue-resource-arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-resource-policy-request
                    'make-delete-resource-policy-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-resource-policy-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-resource-policy-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'policy-hash-condition))
      (common-lisp:list
       (common-lisp:cons "PolicyHashCondition"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-arn))
      (common-lisp:list
       (common-lisp:cons "ResourceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-resource-policy-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-resource-policy-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-resource-policy-response-")))
 (common-lisp:export
  (common-lisp:list 'delete-resource-policy-response
                    'make-delete-resource-policy-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-resource-policy-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-resource-policy-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-resource-policy-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-schema-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-schema-input-"))
   (schema-id (common-lisp:error ":schema-id is required") :type
    (common-lisp:or schema-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-schema-input 'make-delete-schema-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input delete-schema-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input delete-schema-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'schema-id))
      (common-lisp:list
       (common-lisp:cons "SchemaId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input delete-schema-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-schema-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-schema-response-"))
   (schema-arn common-lisp:nil :type
    (common-lisp:or glue-resource-arn common-lisp:null))
   (schema-name common-lisp:nil :type
    (common-lisp:or schema-registry-name-string common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or schema-status common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-schema-response 'make-delete-schema-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-schema-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-schema-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'schema-arn))
      (common-lisp:list
       (common-lisp:cons "SchemaArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'schema-name))
      (common-lisp:list
       (common-lisp:cons "SchemaName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-schema-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-schema-versions-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-schema-versions-input-"))
   (schema-id (common-lisp:error ":schema-id is required") :type
    (common-lisp:or schema-id common-lisp:null))
   (versions (common-lisp:error ":versions is required") :type
    (common-lisp:or versions-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-schema-versions-input
                    'make-delete-schema-versions-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-schema-versions-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-schema-versions-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'schema-id))
      (common-lisp:list
       (common-lisp:cons "SchemaId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'versions))
      (common-lisp:list
       (common-lisp:cons "Versions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-schema-versions-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-schema-versions-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-schema-versions-response-"))
   (schema-version-errors common-lisp:nil :type
    (common-lisp:or schema-version-error-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-schema-versions-response
                    'make-delete-schema-versions-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-schema-versions-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-schema-versions-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'schema-version-errors))
      (common-lisp:list
       (common-lisp:cons "SchemaVersionErrors"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-schema-versions-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-security-configuration-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-security-configuration-request-"))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or name-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-security-configuration-request
                    'make-delete-security-configuration-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-security-configuration-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-security-configuration-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-security-configuration-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-security-configuration-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-security-configuration-response-")))
 (common-lisp:export
  (common-lisp:list 'delete-security-configuration-response
                    'make-delete-security-configuration-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-security-configuration-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-security-configuration-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-security-configuration-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-session-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-session-request-"))
   (id (common-lisp:error ":id is required") :type
    (common-lisp:or name-string common-lisp:null))
   (request-origin common-lisp:nil :type
    (common-lisp:or orchestration-name-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-session-request 'make-delete-session-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-session-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-session-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-origin))
      (common-lisp:list
       (common-lisp:cons "RequestOrigin"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-session-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-session-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-session-response-"))
   (id common-lisp:nil :type (common-lisp:or name-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-session-response 'make-delete-session-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-session-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-session-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-session-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-table-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-table-request-"))
   (catalog-id common-lisp:nil :type
    (common-lisp:or catalog-id-string common-lisp:null))
   (database-name (common-lisp:error ":database-name is required") :type
    (common-lisp:or name-string common-lisp:null))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or name-string common-lisp:null))
   (transaction-id common-lisp:nil :type
    (common-lisp:or transaction-id-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-table-request 'make-delete-table-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input delete-table-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input delete-table-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'catalog-id))
      (common-lisp:list
       (common-lisp:cons "CatalogId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'database-name))
      (common-lisp:list
       (common-lisp:cons "DatabaseName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'transaction-id))
      (common-lisp:list
       (common-lisp:cons "TransactionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input delete-table-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-table-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-table-response-")))
 (common-lisp:export
  (common-lisp:list 'delete-table-response 'make-delete-table-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-table-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-table-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-table-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-table-version-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-table-version-request-"))
   (catalog-id common-lisp:nil :type
    (common-lisp:or catalog-id-string common-lisp:null))
   (database-name (common-lisp:error ":database-name is required") :type
    (common-lisp:or name-string common-lisp:null))
   (table-name (common-lisp:error ":table-name is required") :type
    (common-lisp:or name-string common-lisp:null))
   (version-id (common-lisp:error ":version-id is required") :type
    (common-lisp:or version-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-table-version-request
                    'make-delete-table-version-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-table-version-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-table-version-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'catalog-id))
      (common-lisp:list
       (common-lisp:cons "CatalogId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'database-name))
      (common-lisp:list
       (common-lisp:cons "DatabaseName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'table-name))
      (common-lisp:list
       (common-lisp:cons "TableName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version-id))
      (common-lisp:list
       (common-lisp:cons "VersionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-table-version-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-table-version-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-table-version-response-")))
 (common-lisp:export
  (common-lisp:list 'delete-table-version-response
                    'make-delete-table-version-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-table-version-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-table-version-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-table-version-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-trigger-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-trigger-request-"))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or name-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-trigger-request 'make-delete-trigger-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-trigger-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-trigger-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-trigger-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-trigger-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-trigger-response-"))
   (name common-lisp:nil :type (common-lisp:or name-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-trigger-response 'make-delete-trigger-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-trigger-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-trigger-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-trigger-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-user-defined-function-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-user-defined-function-request-"))
   (catalog-id common-lisp:nil :type
    (common-lisp:or catalog-id-string common-lisp:null))
   (database-name (common-lisp:error ":database-name is required") :type
    (common-lisp:or name-string common-lisp:null))
   (function-name (common-lisp:error ":function-name is required") :type
    (common-lisp:or name-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-user-defined-function-request
                    'make-delete-user-defined-function-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-user-defined-function-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-user-defined-function-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'catalog-id))
      (common-lisp:list
       (common-lisp:cons "CatalogId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'database-name))
      (common-lisp:list
       (common-lisp:cons "DatabaseName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'function-name))
      (common-lisp:list
       (common-lisp:cons "FunctionName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-user-defined-function-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-user-defined-function-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-user-defined-function-response-")))
 (common-lisp:export
  (common-lisp:list 'delete-user-defined-function-response
                    'make-delete-user-defined-function-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-user-defined-function-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-user-defined-function-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-user-defined-function-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-workflow-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-workflow-request-"))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or name-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-workflow-request 'make-delete-workflow-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-workflow-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-workflow-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-workflow-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-workflow-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-workflow-response-"))
   (name common-lisp:nil :type (common-lisp:or name-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-workflow-response 'make-delete-workflow-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-workflow-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-workflow-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-workflow-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delta-target (:copier common-lisp:nil)
      (:conc-name "struct-shape-delta-target-"))
   (delta-tables common-lisp:nil :type
    (common-lisp:or path-list common-lisp:null))
   (connection-name common-lisp:nil :type
    (common-lisp:or connection-name common-lisp:null))
   (write-manifest common-lisp:nil :type
    (common-lisp:or nullable-boolean common-lisp:null))
   (create-native-delta-table common-lisp:nil :type
    (common-lisp:or nullable-boolean common-lisp:null)))
 (common-lisp:export (common-lisp:list 'delta-target 'make-delta-target))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input delta-target))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input delta-target))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'delta-tables))
      (common-lisp:list
       (common-lisp:cons "DeltaTables"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'connection-name))
      (common-lisp:list
       (common-lisp:cons "ConnectionName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'write-manifest))
      (common-lisp:list
       (common-lisp:cons "WriteManifest"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'create-native-delta-table))
      (common-lisp:list
       (common-lisp:cons "CreateNativeDeltaTable"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input delta-target))
   common-lisp:nil))
(common-lisp:deftype delta-target-compression-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype delta-target-list ()
   '(trivial-types:proper-list delta-target))
 (common-lisp:defun |make-delta-target-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list delta-target))
   aws-sdk/generator/shape::members))
(common-lisp:deftype description-string () 'common-lisp:string)
(common-lisp:deftype description-string-removable () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (dev-endpoint (:copier common-lisp:nil)
      (:conc-name "struct-shape-dev-endpoint-"))
   (endpoint-name common-lisp:nil :type
    (common-lisp:or generic-string common-lisp:null))
   (role-arn common-lisp:nil :type (common-lisp:or role-arn common-lisp:null))
   (security-group-ids common-lisp:nil :type
    (common-lisp:or string-list common-lisp:null))
   (subnet-id common-lisp:nil :type
    (common-lisp:or generic-string common-lisp:null))
   (yarn-endpoint-address common-lisp:nil :type
    (common-lisp:or generic-string common-lisp:null))
   (private-address common-lisp:nil :type
    (common-lisp:or generic-string common-lisp:null))
   (zeppelin-remote-spark-interpreter-port common-lisp:nil :type
    (common-lisp:or integer-value common-lisp:null))
   (public-address common-lisp:nil :type
    (common-lisp:or generic-string common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or generic-string common-lisp:null))
   (worker-type common-lisp:nil :type
    (common-lisp:or worker-type common-lisp:null))
   (glue-version common-lisp:nil :type
    (common-lisp:or glue-version-string common-lisp:null))
   (number-of-workers common-lisp:nil :type
    (common-lisp:or nullable-integer common-lisp:null))
   (number-of-nodes common-lisp:nil :type
    (common-lisp:or integer-value common-lisp:null))
   (availability-zone common-lisp:nil :type
    (common-lisp:or generic-string common-lisp:null))
   (vpc-id common-lisp:nil :type
    (common-lisp:or generic-string common-lisp:null))
   (extra-python-libs-s3path common-lisp:nil :type
    (common-lisp:or generic-string common-lisp:null))
   (extra-jars-s3path common-lisp:nil :type
    (common-lisp:or generic-string common-lisp:null))
   (failure-reason common-lisp:nil :type
    (common-lisp:or generic-string common-lisp:null))
   (last-update-status common-lisp:nil :type
    (common-lisp:or generic-string common-lisp:null))
   (created-timestamp common-lisp:nil :type
    (common-lisp:or timestamp-value common-lisp:null))
   (last-modified-timestamp common-lisp:nil :type
    (common-lisp:or timestamp-value common-lisp:null))
   (public-key common-lisp:nil :type
    (common-lisp:or generic-string common-lisp:null))
   (public-keys common-lisp:nil :type
    (common-lisp:or public-keys-list common-lisp:null))
   (security-configuration common-lisp:nil :type
    (common-lisp:or name-string common-lisp:null))
   (arguments common-lisp:nil :type
    (common-lisp:or map-value common-lisp:null)))
 (common-lisp:export (common-lisp:list 'dev-endpoint 'make-dev-endpoint))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input dev-endpoint))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input dev-endpoint))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'endpoint-name))
      (common-lisp:list
       (common-lisp:cons "EndpointName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "RoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'security-group-ids))
      (common-lisp:list
       (common-lisp:cons "SecurityGroupIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subnet-id))
      (common-lisp:list
       (common-lisp:cons "SubnetId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'yarn-endpoint-address))
      (common-lisp:list
       (common-lisp:cons "YarnEndpointAddress"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'private-address))
      (common-lisp:list
       (common-lisp:cons "PrivateAddress"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'zeppelin-remote-spark-interpreter-port))
      (common-lisp:list
       (common-lisp:cons "ZeppelinRemoteSparkInterpreterPort"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'public-address))
      (common-lisp:list
       (common-lisp:cons "PublicAddress"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'worker-type))
      (common-lisp:list
       (common-lisp:cons "WorkerType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'glue-version))
      (common-lisp:list
       (common-lisp:cons "GlueVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'number-of-workers))
      (common-lisp:list
       (common-lisp:cons "NumberOfWorkers"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'number-of-nodes))
      (common-lisp:list
       (common-lisp:cons "NumberOfNodes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'availability-zone))
      (common-lisp:list
       (common-lisp:cons "AvailabilityZone"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpc-id))
      (common-lisp:list
       (common-lisp:cons "VpcId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'extra-python-libs-s3path))
      (common-lisp:list
       (common-lisp:cons "ExtraPythonLibsS3Path"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'extra-jars-s3path))
      (common-lisp:list
       (common-lisp:cons "ExtraJarsS3Path"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'failure-reason))
      (common-lisp:list
       (common-lisp:cons "FailureReason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-update-status))
      (common-lisp:list
       (common-lisp:cons "LastUpdateStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-timestamp))
      (common-lisp:list
       (common-lisp:cons "CreatedTimestamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'last-modified-timestamp))
      (common-lisp:list
       (common-lisp:cons "LastModifiedTimestamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'public-key))
      (common-lisp:list
       (common-lisp:cons "PublicKey"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'public-keys))
      (common-lisp:list
       (common-lisp:cons "PublicKeys"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'security-configuration))
      (common-lisp:list
       (common-lisp:cons "SecurityConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arguments))
      (common-lisp:list
       (common-lisp:cons "Arguments"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input dev-endpoint))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (dev-endpoint-custom-libraries (:copier common-lisp:nil)
      (:conc-name "struct-shape-dev-endpoint-custom-libraries-"))
   (extra-python-libs-s3path common-lisp:nil :type
    (common-lisp:or generic-string common-lisp:null))
   (extra-jars-s3path common-lisp:nil :type
    (common-lisp:or generic-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'dev-endpoint-custom-libraries
                    'make-dev-endpoint-custom-libraries))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          dev-endpoint-custom-libraries))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          dev-endpoint-custom-libraries))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'extra-python-libs-s3path))
      (common-lisp:list
       (common-lisp:cons "ExtraPythonLibsS3Path"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'extra-jars-s3path))
      (common-lisp:list
       (common-lisp:cons "ExtraJarsS3Path"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          dev-endpoint-custom-libraries))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype dev-endpoint-list ()
   '(trivial-types:proper-list dev-endpoint))
 (common-lisp:defun |make-dev-endpoint-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list dev-endpoint))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype dev-endpoint-name-list ()
   '(trivial-types:proper-list name-string))
 (common-lisp:defun |make-dev-endpoint-name-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list name-string))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype dev-endpoint-names ()
   '(trivial-types:proper-list generic-string))
 (common-lisp:defun |make-dev-endpoint-names|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list generic-string))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (direct-jdbcsource (:copier common-lisp:nil)
      (:conc-name "struct-shape-direct-jdbcsource-"))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or node-name common-lisp:null))
   (database (common-lisp:error ":database is required") :type
    (common-lisp:or enclosed-in-string-property common-lisp:null))
   (table (common-lisp:error ":table is required") :type
    (common-lisp:or enclosed-in-string-property common-lisp:null))
   (connection-name (common-lisp:error ":connection-name is required") :type
    (common-lisp:or enclosed-in-string-property common-lisp:null))
   (connection-type (common-lisp:error ":connection-type is required") :type
    (common-lisp:or jdbcconnection-type common-lisp:null))
   (redshift-tmp-dir common-lisp:nil :type
    (common-lisp:or enclosed-in-string-property common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'direct-jdbcsource 'make-direct-jdbcsource))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input direct-jdbcsource))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input direct-jdbcsource))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'database))
      (common-lisp:list
       (common-lisp:cons "Database"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'table))
      (common-lisp:list
       (common-lisp:cons "Table"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'connection-name))
      (common-lisp:list
       (common-lisp:cons "ConnectionName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'connection-type))
      (common-lisp:list
       (common-lisp:cons "ConnectionType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'redshift-tmp-dir))
      (common-lisp:list
       (common-lisp:cons "RedshiftTmpDir"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input direct-jdbcsource))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (direct-kafka-source (:copier common-lisp:nil)
      (:conc-name "struct-shape-direct-kafka-source-"))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or node-name common-lisp:null))
   (streaming-options common-lisp:nil :type
    (common-lisp:or kafka-streaming-source-options common-lisp:null))
   (window-size common-lisp:nil :type
    (common-lisp:or boxed-positive-int common-lisp:null))
   (detect-schema common-lisp:nil :type
    (common-lisp:or boxed-boolean common-lisp:null))
   (data-preview-options common-lisp:nil :type
    (common-lisp:or streaming-data-preview-options common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'direct-kafka-source 'make-direct-kafka-source))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input direct-kafka-source))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input direct-kafka-source))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'streaming-options))
      (common-lisp:list
       (common-lisp:cons "StreamingOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'window-size))
      (common-lisp:list
       (common-lisp:cons "WindowSize"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'detect-schema))
      (common-lisp:list
       (common-lisp:cons "DetectSchema"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'data-preview-options))
      (common-lisp:list
       (common-lisp:cons "DataPreviewOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input direct-kafka-source))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (direct-kinesis-source (:copier common-lisp:nil)
      (:conc-name "struct-shape-direct-kinesis-source-"))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or node-name common-lisp:null))
   (window-size common-lisp:nil :type
    (common-lisp:or boxed-positive-int common-lisp:null))
   (detect-schema common-lisp:nil :type
    (common-lisp:or boxed-boolean common-lisp:null))
   (streaming-options common-lisp:nil :type
    (common-lisp:or kinesis-streaming-source-options common-lisp:null))
   (data-preview-options common-lisp:nil :type
    (common-lisp:or streaming-data-preview-options common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'direct-kinesis-source 'make-direct-kinesis-source))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          direct-kinesis-source))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          direct-kinesis-source))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'window-size))
      (common-lisp:list
       (common-lisp:cons "WindowSize"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'detect-schema))
      (common-lisp:list
       (common-lisp:cons "DetectSchema"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'streaming-options))
      (common-lisp:list
       (common-lisp:cons "StreamingOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'data-preview-options))
      (common-lisp:list
       (common-lisp:cons "DataPreviewOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          direct-kinesis-source))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (direct-schema-change-policy (:copier common-lisp:nil)
      (:conc-name "struct-shape-direct-schema-change-policy-"))
   (enable-update-catalog common-lisp:nil :type
    (common-lisp:or boxed-boolean common-lisp:null))
   (update-behavior common-lisp:nil :type
    (common-lisp:or update-catalog-behavior common-lisp:null))
   (table common-lisp:nil :type
    (common-lisp:or enclosed-in-string-property common-lisp:null))
   (database common-lisp:nil :type
    (common-lisp:or enclosed-in-string-property common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'direct-schema-change-policy
                    'make-direct-schema-change-policy))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          direct-schema-change-policy))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          direct-schema-change-policy))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'enable-update-catalog))
      (common-lisp:list
       (common-lisp:cons "EnableUpdateCatalog"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'update-behavior))
      (common-lisp:list
       (common-lisp:cons "UpdateBehavior"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'table))
      (common-lisp:list
       (common-lisp:cons "Table"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'database))
      (common-lisp:list
       (common-lisp:cons "Database"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          direct-schema-change-policy))
   common-lisp:nil))
(common-lisp:deftype double () 'common-lisp:double-float)
(common-lisp:progn
 (common-lisp:defstruct
     (double-column-statistics-data (:copier common-lisp:nil)
      (:conc-name "struct-shape-double-column-statistics-data-"))
   (minimum-value common-lisp:nil :type
    (common-lisp:or double common-lisp:null))
   (maximum-value common-lisp:nil :type
    (common-lisp:or double common-lisp:null))
   (number-of-nulls (common-lisp:error ":number-of-nulls is required") :type
    (common-lisp:or non-negative-long common-lisp:null))
   (number-of-distinct-values
    (common-lisp:error ":number-of-distinct-values is required") :type
    (common-lisp:or non-negative-long common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'double-column-statistics-data
                    'make-double-column-statistics-data))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          double-column-statistics-data))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          double-column-statistics-data))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'minimum-value))
      (common-lisp:list
       (common-lisp:cons "MinimumValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'maximum-value))
      (common-lisp:list
       (common-lisp:cons "MaximumValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'number-of-nulls))
      (common-lisp:list
       (common-lisp:cons "NumberOfNulls"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'number-of-distinct-values))
      (common-lisp:list
       (common-lisp:cons "NumberOfDistinctValues"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          double-column-statistics-data))
   common-lisp:nil))
(common-lisp:deftype double-value () 'common-lisp:double-float)
(common-lisp:progn
 (common-lisp:defstruct
     (drop-duplicates (:copier common-lisp:nil)
      (:conc-name "struct-shape-drop-duplicates-"))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or node-name common-lisp:null))
   (inputs (common-lisp:error ":inputs is required") :type
    (common-lisp:or one-input common-lisp:null))
   (columns common-lisp:nil :type
    (common-lisp:or limited-path-list common-lisp:null)))
 (common-lisp:export (common-lisp:list 'drop-duplicates 'make-drop-duplicates))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input drop-duplicates))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input drop-duplicates))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'inputs))
      (common-lisp:list
       (common-lisp:cons "Inputs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'columns))
      (common-lisp:list
       (common-lisp:cons "Columns"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input drop-duplicates))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (drop-fields (:copier common-lisp:nil)
      (:conc-name "struct-shape-drop-fields-"))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or node-name common-lisp:null))
   (inputs (common-lisp:error ":inputs is required") :type
    (common-lisp:or one-input common-lisp:null))
   (paths (common-lisp:error ":paths is required") :type
    (common-lisp:or glue-studio-path-list common-lisp:null)))
 (common-lisp:export (common-lisp:list 'drop-fields 'make-drop-fields))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input drop-fields))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input drop-fields))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'inputs))
      (common-lisp:list
       (common-lisp:cons "Inputs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'paths))
      (common-lisp:list
       (common-lisp:cons "Paths"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input drop-fields))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (drop-null-fields (:copier common-lisp:nil)
      (:conc-name "struct-shape-drop-null-fields-"))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or node-name common-lisp:null))
   (inputs (common-lisp:error ":inputs is required") :type
    (common-lisp:or one-input common-lisp:null))
   (null-check-box-list common-lisp:nil :type
    (common-lisp:or null-check-box-list common-lisp:null))
   (null-text-list common-lisp:nil :type
    (common-lisp:or null-value-fields common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'drop-null-fields 'make-drop-null-fields))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input drop-null-fields))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input drop-null-fields))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'inputs))
      (common-lisp:list
       (common-lisp:cons "Inputs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'null-check-box-list))
      (common-lisp:list
       (common-lisp:cons "NullCheckBoxList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'null-text-list))
      (common-lisp:list
       (common-lisp:cons "NullTextList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input drop-null-fields))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (dynamic-transform (:copier common-lisp:nil)
      (:conc-name "struct-shape-dynamic-transform-"))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or enclosed-in-string-property common-lisp:null))
   (transform-name (common-lisp:error ":transform-name is required") :type
    (common-lisp:or enclosed-in-string-property common-lisp:null))
   (inputs (common-lisp:error ":inputs is required") :type
    (common-lisp:or one-input common-lisp:null))
   (parameters common-lisp:nil :type
    (common-lisp:or transform-config-parameter-list common-lisp:null))
   (function-name (common-lisp:error ":function-name is required") :type
    (common-lisp:or enclosed-in-string-property common-lisp:null))
   (path (common-lisp:error ":path is required") :type
    (common-lisp:or enclosed-in-string-property common-lisp:null))
   (version common-lisp:nil :type
    (common-lisp:or enclosed-in-string-property common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'dynamic-transform 'make-dynamic-transform))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input dynamic-transform))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input dynamic-transform))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'transform-name))
      (common-lisp:list
       (common-lisp:cons "TransformName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'inputs))
      (common-lisp:list
       (common-lisp:cons "Inputs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'parameters))
      (common-lisp:list
       (common-lisp:cons "Parameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'function-name))
      (common-lisp:list
       (common-lisp:cons "FunctionName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'path))
      (common-lisp:list
       (common-lisp:cons "Path"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version))
      (common-lisp:list
       (common-lisp:cons "Version"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input dynamic-transform))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (dynamo-dbcatalog-source (:copier common-lisp:nil)
      (:conc-name "struct-shape-dynamo-dbcatalog-source-"))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or node-name common-lisp:null))
   (database (common-lisp:error ":database is required") :type
    (common-lisp:or enclosed-in-string-property common-lisp:null))
   (table (common-lisp:error ":table is required") :type
    (common-lisp:or enclosed-in-string-property common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'dynamo-dbcatalog-source 'make-dynamo-dbcatalog-source))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          dynamo-dbcatalog-source))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          dynamo-dbcatalog-source))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'database))
      (common-lisp:list
       (common-lisp:cons "Database"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'table))
      (common-lisp:list
       (common-lisp:cons "Table"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          dynamo-dbcatalog-source))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (dynamo-dbtarget (:copier common-lisp:nil)
      (:conc-name "struct-shape-dynamo-dbtarget-"))
   (path common-lisp:nil :type (common-lisp:or path common-lisp:null))
   (scan-all common-lisp:nil :type
    (common-lisp:or nullable-boolean common-lisp:null))
   (scan-rate common-lisp:nil :type
    (common-lisp:or nullable-double common-lisp:null)))
 (common-lisp:export (common-lisp:list 'dynamo-dbtarget 'make-dynamo-dbtarget))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input dynamo-dbtarget))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input dynamo-dbtarget))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'path))
      (common-lisp:list
       (common-lisp:cons "Path"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'scan-all))
      (common-lisp:list
       (common-lisp:cons "scanAll"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'scan-rate))
      (common-lisp:list
       (common-lisp:cons "scanRate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input dynamo-dbtarget))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype dynamo-dbtarget-list ()
   '(trivial-types:proper-list dynamo-dbtarget))
 (common-lisp:defun |make-dynamo-dbtarget-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list dynamo-dbtarget))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (edge (:copier common-lisp:nil) (:conc-name "struct-shape-edge-"))
   (source-id common-lisp:nil :type
    (common-lisp:or name-string common-lisp:null))
   (destination-id common-lisp:nil :type
    (common-lisp:or name-string common-lisp:null)))
 (common-lisp:export (common-lisp:list 'edge 'make-edge))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input edge))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input edge))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-id))
      (common-lisp:list
       (common-lisp:cons "SourceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'destination-id))
      (common-lisp:list
       (common-lisp:cons "DestinationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input edge))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype edge-list () '(trivial-types:proper-list edge))
 (common-lisp:defun |make-edge-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list edge))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype enable-additional-metadata ()
   '(trivial-types:proper-list jdbc-metadata-entry))
 (common-lisp:defun |make-enable-additional-metadata|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list jdbc-metadata-entry))
   aws-sdk/generator/shape::members))
(common-lisp:deftype enable-hybrid-values () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype enclosed-in-string-properties ()
   '(trivial-types:proper-list enclosed-in-string-property))
 (common-lisp:defun |make-enclosed-in-string-properties|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            enclosed-in-string-property))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype enclosed-in-string-properties-min-one ()
   '(trivial-types:proper-list enclosed-in-string-property))
 (common-lisp:defun |make-enclosed-in-string-properties-min-one|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            enclosed-in-string-property))
   aws-sdk/generator/shape::members))
(common-lisp:deftype enclosed-in-string-property () 'common-lisp:string)
(common-lisp:deftype enclosed-in-string-property-with-quote ()
  'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (encryption-at-rest (:copier common-lisp:nil)
      (:conc-name "struct-shape-encryption-at-rest-"))
   (catalog-encryption-mode
    (common-lisp:error ":catalog-encryption-mode is required") :type
    (common-lisp:or catalog-encryption-mode common-lisp:null))
   (sse-aws-kms-key-id common-lisp:nil :type
    (common-lisp:or name-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'encryption-at-rest 'make-encryption-at-rest))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input encryption-at-rest))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input encryption-at-rest))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'catalog-encryption-mode))
      (common-lisp:list
       (common-lisp:cons "CatalogEncryptionMode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sse-aws-kms-key-id))
      (common-lisp:list
       (common-lisp:cons "SseAwsKmsKeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input encryption-at-rest))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (encryption-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-encryption-configuration-"))
   (s3encryption common-lisp:nil :type
    (common-lisp:or s3encryption-list common-lisp:null))
   (cloud-watch-encryption common-lisp:nil :type
    (common-lisp:or cloud-watch-encryption common-lisp:null))
   (job-bookmarks-encryption common-lisp:nil :type
    (common-lisp:or job-bookmarks-encryption common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'encryption-configuration 'make-encryption-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          encryption-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          encryption-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3encryption))
      (common-lisp:list
       (common-lisp:cons "S3Encryption"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cloud-watch-encryption))
      (common-lisp:list
       (common-lisp:cons "CloudWatchEncryption"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'job-bookmarks-encryption))
      (common-lisp:list
       (common-lisp:cons "JobBookmarksEncryption"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          encryption-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition entity-not-found-exception
     (glue-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       entity-not-found-exception-message)))
 (common-lisp:export
  (common-lisp:list 'entity-not-found-exception
                    'entity-not-found-exception-message)))
(common-lisp:progn
 (common-lisp:deftype error-by-name () 'common-lisp:hash-table)
 (common-lisp:defun |make-error-by-name| (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:deftype error-code-string () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (error-detail (:copier common-lisp:nil)
      (:conc-name "struct-shape-error-detail-"))
   (error-code common-lisp:nil :type
    (common-lisp:or name-string common-lisp:null))
   (error-message common-lisp:nil :type
    (common-lisp:or description-string common-lisp:null)))
 (common-lisp:export (common-lisp:list 'error-detail 'make-error-detail))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input error-detail))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input error-detail))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error-code))
      (common-lisp:list
       (common-lisp:cons "ErrorCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error-message))
      (common-lisp:list
       (common-lisp:cons "ErrorMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input error-detail))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (error-details (:copier common-lisp:nil)
      (:conc-name "struct-shape-error-details-"))
   (error-code common-lisp:nil :type
    (common-lisp:or error-code-string common-lisp:null))
   (error-message common-lisp:nil :type
    (common-lisp:or error-message-string common-lisp:null)))
 (common-lisp:export (common-lisp:list 'error-details 'make-error-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input error-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input error-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error-code))
      (common-lisp:list
       (common-lisp:cons "ErrorCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error-message))
      (common-lisp:list
       (common-lisp:cons "ErrorMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input error-details))
   common-lisp:nil))
(common-lisp:deftype error-message-string () 'common-lisp:string)
(common-lisp:deftype error-string () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (evaluate-data-quality (:copier common-lisp:nil)
      (:conc-name "struct-shape-evaluate-data-quality-"))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or node-name common-lisp:null))
   (inputs (common-lisp:error ":inputs is required") :type
    (common-lisp:or one-input common-lisp:null))
   (ruleset (common-lisp:error ":ruleset is required") :type
    (common-lisp:or dqdlstring common-lisp:null))
   (output common-lisp:nil :type
    (common-lisp:or dqtransform-output common-lisp:null))
   (publishing-options common-lisp:nil :type
    (common-lisp:or dqresults-publishing-options common-lisp:null))
   (stop-job-on-failure-options common-lisp:nil :type
    (common-lisp:or dqstop-job-on-failure-options common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'evaluate-data-quality 'make-evaluate-data-quality))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          evaluate-data-quality))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          evaluate-data-quality))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'inputs))
      (common-lisp:list
       (common-lisp:cons "Inputs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ruleset))
      (common-lisp:list
       (common-lisp:cons "Ruleset"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'output))
      (common-lisp:list
       (common-lisp:cons "Output"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'publishing-options))
      (common-lisp:list
       (common-lisp:cons "PublishingOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'stop-job-on-failure-options))
      (common-lisp:list
       (common-lisp:cons "StopJobOnFailureOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          evaluate-data-quality))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (evaluation-metrics (:copier common-lisp:nil)
      (:conc-name "struct-shape-evaluation-metrics-"))
   (transform-type (common-lisp:error ":transform-type is required") :type
    (common-lisp:or transform-type common-lisp:null))
   (find-matches-metrics common-lisp:nil :type
    (common-lisp:or find-matches-metrics common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'evaluation-metrics 'make-evaluation-metrics))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input evaluation-metrics))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input evaluation-metrics))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'transform-type))
      (common-lisp:list
       (common-lisp:cons "TransformType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'find-matches-metrics))
      (common-lisp:list
       (common-lisp:cons "FindMatchesMetrics"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input evaluation-metrics))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (event-batching-condition (:copier common-lisp:nil)
      (:conc-name "struct-shape-event-batching-condition-"))
   (batch-size (common-lisp:error ":batch-size is required") :type
    (common-lisp:or batch-size common-lisp:null))
   (batch-window common-lisp:nil :type
    (common-lisp:or batch-window common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'event-batching-condition 'make-event-batching-condition))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          event-batching-condition))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          event-batching-condition))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'batch-size))
      (common-lisp:list
       (common-lisp:cons "BatchSize"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'batch-window))
      (common-lisp:list
       (common-lisp:cons "BatchWindow"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          event-batching-condition))
   common-lisp:nil))
(common-lisp:deftype event-queue-arn () 'common-lisp:string)
(common-lisp:deftype execution-class () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (execution-property (:copier common-lisp:nil)
      (:conc-name "struct-shape-execution-property-"))
   (max-concurrent-runs common-lisp:nil :type
    (common-lisp:or max-concurrent-runs common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'execution-property 'make-execution-property))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input execution-property))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input execution-property))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-concurrent-runs))
      (common-lisp:list
       (common-lisp:cons "MaxConcurrentRuns"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input execution-property))
   common-lisp:nil))
(common-lisp:deftype execution-time () 'common-lisp:integer)
(common-lisp:deftype exist-condition () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (export-labels-task-run-properties (:copier common-lisp:nil)
      (:conc-name "struct-shape-export-labels-task-run-properties-"))
   (output-s3path common-lisp:nil :type
    (common-lisp:or uri-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'export-labels-task-run-properties
                    'make-export-labels-task-run-properties))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          export-labels-task-run-properties))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          export-labels-task-run-properties))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'output-s3path))
      (common-lisp:list
       (common-lisp:cons "OutputS3Path"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          export-labels-task-run-properties))
   common-lisp:nil))
(common-lisp:deftype extended-string () 'common-lisp:string)
(common-lisp:deftype field-name () 'common-lisp:string)
(common-lisp:deftype field-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (fill-missing-values (:copier common-lisp:nil)
      (:conc-name "struct-shape-fill-missing-values-"))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or node-name common-lisp:null))
   (inputs (common-lisp:error ":inputs is required") :type
    (common-lisp:or one-input common-lisp:null))
   (imputed-path (common-lisp:error ":imputed-path is required") :type
    (common-lisp:or enclosed-in-string-property common-lisp:null))
   (filled-path common-lisp:nil :type
    (common-lisp:or enclosed-in-string-property common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'fill-missing-values 'make-fill-missing-values))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input fill-missing-values))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input fill-missing-values))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'inputs))
      (common-lisp:list
       (common-lisp:cons "Inputs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'imputed-path))
      (common-lisp:list
       (common-lisp:cons "ImputedPath"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filled-path))
      (common-lisp:list
       (common-lisp:cons "FilledPath"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input fill-missing-values))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (filter (:copier common-lisp:nil) (:conc-name "struct-shape-filter-"))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or node-name common-lisp:null))
   (inputs (common-lisp:error ":inputs is required") :type
    (common-lisp:or one-input common-lisp:null))
   (logical-operator (common-lisp:error ":logical-operator is required") :type
    (common-lisp:or filter-logical-operator common-lisp:null))
   (filters (common-lisp:error ":filters is required") :type
    (common-lisp:or filter-expressions common-lisp:null)))
 (common-lisp:export (common-lisp:list 'filter 'make-filter))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input filter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input filter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'inputs))
      (common-lisp:list
       (common-lisp:cons "Inputs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'logical-operator))
      (common-lisp:list
       (common-lisp:cons "LogicalOperator"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filters))
      (common-lisp:list
       (common-lisp:cons "Filters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input filter))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (filter-expression (:copier common-lisp:nil)
      (:conc-name "struct-shape-filter-expression-"))
   (operation (common-lisp:error ":operation is required") :type
    (common-lisp:or filter-operation common-lisp:null))
   (negated common-lisp:nil :type
    (common-lisp:or boxed-boolean common-lisp:null))
   (values (common-lisp:error ":values is required") :type
    (common-lisp:or filter-values common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'filter-expression 'make-filter-expression))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input filter-expression))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input filter-expression))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'operation))
      (common-lisp:list
       (common-lisp:cons "Operation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'negated))
      (common-lisp:list
       (common-lisp:cons "Negated"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'values))
      (common-lisp:list
       (common-lisp:cons "Values"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input filter-expression))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype filter-expressions ()
   '(trivial-types:proper-list filter-expression))
 (common-lisp:defun |make-filter-expressions|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list filter-expression))
   aws-sdk/generator/shape::members))
(common-lisp:deftype filter-logical-operator () 'common-lisp:string)
(common-lisp:deftype filter-operation () 'common-lisp:string)
(common-lisp:deftype filter-operator () 'common-lisp:string)
(common-lisp:deftype filter-string () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (filter-value (:copier common-lisp:nil)
      (:conc-name "struct-shape-filter-value-"))
   (type (common-lisp:error ":type is required") :type
    (common-lisp:or filter-value-type common-lisp:null))
   (value (common-lisp:error ":value is required") :type
    (common-lisp:or enclosed-in-string-properties common-lisp:null)))
 (common-lisp:export (common-lisp:list 'filter-value 'make-filter-value))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input filter-value))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input filter-value))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "Value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input filter-value))
   common-lisp:nil))
(common-lisp:deftype filter-value-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype filter-values ()
   '(trivial-types:proper-list filter-value))
 (common-lisp:defun |make-filter-values|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list filter-value))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (find-matches-metrics (:copier common-lisp:nil)
      (:conc-name "struct-shape-find-matches-metrics-"))
   (area-under-prcurve common-lisp:nil :type
    (common-lisp:or generic-bounded-double common-lisp:null))
   (precision common-lisp:nil :type
    (common-lisp:or generic-bounded-double common-lisp:null))
   (recall common-lisp:nil :type
    (common-lisp:or generic-bounded-double common-lisp:null))
   (f1 common-lisp:nil :type
    (common-lisp:or generic-bounded-double common-lisp:null))
   (confusion-matrix common-lisp:nil :type
    (common-lisp:or confusion-matrix common-lisp:null))
   (column-importances common-lisp:nil :type
    (common-lisp:or column-importance-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'find-matches-metrics 'make-find-matches-metrics))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input find-matches-metrics))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input find-matches-metrics))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'area-under-prcurve))
      (common-lisp:list
       (common-lisp:cons "AreaUnderPRCurve"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'precision))
      (common-lisp:list
       (common-lisp:cons "Precision"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'recall))
      (common-lisp:list
       (common-lisp:cons "Recall"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'f1))
      (common-lisp:list
       (common-lisp:cons "F1"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'confusion-matrix))
      (common-lisp:list
       (common-lisp:cons "ConfusionMatrix"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'column-importances))
      (common-lisp:list
       (common-lisp:cons "ColumnImportances"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input find-matches-metrics))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (find-matches-parameters (:copier common-lisp:nil)
      (:conc-name "struct-shape-find-matches-parameters-"))
   (primary-key-column-name common-lisp:nil :type
    (common-lisp:or column-name-string common-lisp:null))
   (precision-recall-tradeoff common-lisp:nil :type
    (common-lisp:or generic-bounded-double common-lisp:null))
   (accuracy-cost-tradeoff common-lisp:nil :type
    (common-lisp:or generic-bounded-double common-lisp:null))
   (enforce-provided-labels common-lisp:nil :type
    (common-lisp:or nullable-boolean common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'find-matches-parameters 'make-find-matches-parameters))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          find-matches-parameters))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          find-matches-parameters))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'primary-key-column-name))
      (common-lisp:list
       (common-lisp:cons "PrimaryKeyColumnName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'precision-recall-tradeoff))
      (common-lisp:list
       (common-lisp:cons "PrecisionRecallTradeoff"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'accuracy-cost-tradeoff))
      (common-lisp:list
       (common-lisp:cons "AccuracyCostTradeoff"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'enforce-provided-labels))
      (common-lisp:list
       (common-lisp:cons "EnforceProvidedLabels"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          find-matches-parameters))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (find-matches-task-run-properties (:copier common-lisp:nil)
      (:conc-name "struct-shape-find-matches-task-run-properties-"))
   (job-id common-lisp:nil :type (common-lisp:or hash-string common-lisp:null))
   (job-name common-lisp:nil :type
    (common-lisp:or name-string common-lisp:null))
   (job-run-id common-lisp:nil :type
    (common-lisp:or hash-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'find-matches-task-run-properties
                    'make-find-matches-task-run-properties))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          find-matches-task-run-properties))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          find-matches-task-run-properties))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-id))
      (common-lisp:list
       (common-lisp:cons "JobId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-name))
      (common-lisp:list
       (common-lisp:cons "JobName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-run-id))
      (common-lisp:list
       (common-lisp:cons "JobRunId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          find-matches-task-run-properties))
   common-lisp:nil))
(common-lisp:deftype format-string () 'common-lisp:string)
(common-lisp:deftype generic512char-string () 'common-lisp:string)
(common-lisp:deftype generic-bounded-double () 'common-lisp:double-float)
(common-lisp:deftype generic-limited-string () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype generic-map () 'common-lisp:hash-table)
 (common-lisp:defun |make-generic-map| (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:deftype generic-string () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (get-blueprint-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-blueprint-request-"))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or name-string common-lisp:null))
   (include-blueprint common-lisp:nil :type
    (common-lisp:or nullable-boolean common-lisp:null))
   (include-parameter-spec common-lisp:nil :type
    (common-lisp:or nullable-boolean common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-blueprint-request 'make-get-blueprint-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-blueprint-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-blueprint-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'include-blueprint))
      (common-lisp:list
       (common-lisp:cons "IncludeBlueprint"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'include-parameter-spec))
      (common-lisp:list
       (common-lisp:cons "IncludeParameterSpec"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-blueprint-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-blueprint-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-blueprint-response-"))
   (blueprint common-lisp:nil :type
    (common-lisp:or blueprint common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-blueprint-response 'make-get-blueprint-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-blueprint-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-blueprint-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'blueprint))
      (common-lisp:list
       (common-lisp:cons "Blueprint"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-blueprint-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-blueprint-run-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-blueprint-run-request-"))
   (blueprint-name (common-lisp:error ":blueprint-name is required") :type
    (common-lisp:or orchestration-name-string common-lisp:null))
   (run-id (common-lisp:error ":run-id is required") :type
    (common-lisp:or id-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-blueprint-run-request
                    'make-get-blueprint-run-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-blueprint-run-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-blueprint-run-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'blueprint-name))
      (common-lisp:list
       (common-lisp:cons "BlueprintName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'run-id))
      (common-lisp:list
       (common-lisp:cons "RunId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-blueprint-run-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-blueprint-run-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-blueprint-run-response-"))
   (blueprint-run common-lisp:nil :type
    (common-lisp:or blueprint-run common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-blueprint-run-response
                    'make-get-blueprint-run-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-blueprint-run-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-blueprint-run-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'blueprint-run))
      (common-lisp:list
       (common-lisp:cons "BlueprintRun"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-blueprint-run-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-blueprint-runs-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-blueprint-runs-request-"))
   (blueprint-name (common-lisp:error ":blueprint-name is required") :type
    (common-lisp:or name-string common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or generic-string common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or page-size common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-blueprint-runs-request
                    'make-get-blueprint-runs-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-blueprint-runs-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-blueprint-runs-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'blueprint-name))
      (common-lisp:list
       (common-lisp:cons "BlueprintName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-blueprint-runs-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-blueprint-runs-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-blueprint-runs-response-"))
   (blueprint-runs common-lisp:nil :type
    (common-lisp:or blueprint-runs common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or generic-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-blueprint-runs-response
                    'make-get-blueprint-runs-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-blueprint-runs-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-blueprint-runs-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'blueprint-runs))
      (common-lisp:list
       (common-lisp:cons "BlueprintRuns"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-blueprint-runs-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-catalog-import-status-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-catalog-import-status-request-"))
   (catalog-id common-lisp:nil :type
    (common-lisp:or catalog-id-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-catalog-import-status-request
                    'make-get-catalog-import-status-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-catalog-import-status-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-catalog-import-status-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'catalog-id))
      (common-lisp:list
       (common-lisp:cons "CatalogId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-catalog-import-status-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-catalog-import-status-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-catalog-import-status-response-"))
   (import-status common-lisp:nil :type
    (common-lisp:or catalog-import-status common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-catalog-import-status-response
                    'make-get-catalog-import-status-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-catalog-import-status-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-catalog-import-status-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'import-status))
      (common-lisp:list
       (common-lisp:cons "ImportStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-catalog-import-status-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-classifier-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-classifier-request-"))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or name-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-classifier-request 'make-get-classifier-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-classifier-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-classifier-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-classifier-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-classifier-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-classifier-response-"))
   (classifier common-lisp:nil :type
    (common-lisp:or classifier common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-classifier-response 'make-get-classifier-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-classifier-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-classifier-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'classifier))
      (common-lisp:list
       (common-lisp:cons "Classifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-classifier-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-classifiers-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-classifiers-request-"))
   (max-results common-lisp:nil :type
    (common-lisp:or page-size common-lisp:null))
   (next-token common-lisp:nil :type (common-lisp:or token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-classifiers-request 'make-get-classifiers-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-classifiers-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-classifiers-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-classifiers-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-classifiers-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-classifiers-response-"))
   (classifiers common-lisp:nil :type
    (common-lisp:or classifier-list common-lisp:null))
   (next-token common-lisp:nil :type (common-lisp:or token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-classifiers-response 'make-get-classifiers-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-classifiers-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-classifiers-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'classifiers))
      (common-lisp:list
       (common-lisp:cons "Classifiers"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-classifiers-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype get-column-names-list ()
   '(trivial-types:proper-list name-string))
 (common-lisp:defun |make-get-column-names-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list name-string))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (get-column-statistics-for-partition-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-column-statistics-for-partition-request-"))
   (catalog-id common-lisp:nil :type
    (common-lisp:or catalog-id-string common-lisp:null))
   (database-name (common-lisp:error ":database-name is required") :type
    (common-lisp:or name-string common-lisp:null))
   (table-name (common-lisp:error ":table-name is required") :type
    (common-lisp:or name-string common-lisp:null))
   (partition-values (common-lisp:error ":partition-values is required") :type
    (common-lisp:or value-string-list common-lisp:null))
   (column-names (common-lisp:error ":column-names is required") :type
    (common-lisp:or get-column-names-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-column-statistics-for-partition-request
                    'make-get-column-statistics-for-partition-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-column-statistics-for-partition-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-column-statistics-for-partition-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'catalog-id))
      (common-lisp:list
       (common-lisp:cons "CatalogId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'database-name))
      (common-lisp:list
       (common-lisp:cons "DatabaseName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'table-name))
      (common-lisp:list
       (common-lisp:cons "TableName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'partition-values))
      (common-lisp:list
       (common-lisp:cons "PartitionValues"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'column-names))
      (common-lisp:list
       (common-lisp:cons "ColumnNames"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-column-statistics-for-partition-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-column-statistics-for-partition-response (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-get-column-statistics-for-partition-response-"))
   (column-statistics-list common-lisp:nil :type
    (common-lisp:or column-statistics-list common-lisp:null))
   (errors common-lisp:nil :type
    (common-lisp:or column-errors common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-column-statistics-for-partition-response
                    'make-get-column-statistics-for-partition-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-column-statistics-for-partition-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-column-statistics-for-partition-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'column-statistics-list))
      (common-lisp:list
       (common-lisp:cons "ColumnStatisticsList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'errors))
      (common-lisp:list
       (common-lisp:cons "Errors"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-column-statistics-for-partition-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-column-statistics-for-table-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-column-statistics-for-table-request-"))
   (catalog-id common-lisp:nil :type
    (common-lisp:or catalog-id-string common-lisp:null))
   (database-name (common-lisp:error ":database-name is required") :type
    (common-lisp:or name-string common-lisp:null))
   (table-name (common-lisp:error ":table-name is required") :type
    (common-lisp:or name-string common-lisp:null))
   (column-names (common-lisp:error ":column-names is required") :type
    (common-lisp:or get-column-names-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-column-statistics-for-table-request
                    'make-get-column-statistics-for-table-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-column-statistics-for-table-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-column-statistics-for-table-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'catalog-id))
      (common-lisp:list
       (common-lisp:cons "CatalogId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'database-name))
      (common-lisp:list
       (common-lisp:cons "DatabaseName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'table-name))
      (common-lisp:list
       (common-lisp:cons "TableName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'column-names))
      (common-lisp:list
       (common-lisp:cons "ColumnNames"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-column-statistics-for-table-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-column-statistics-for-table-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-column-statistics-for-table-response-"))
   (column-statistics-list common-lisp:nil :type
    (common-lisp:or column-statistics-list common-lisp:null))
   (errors common-lisp:nil :type
    (common-lisp:or column-errors common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-column-statistics-for-table-response
                    'make-get-column-statistics-for-table-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-column-statistics-for-table-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-column-statistics-for-table-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'column-statistics-list))
      (common-lisp:list
       (common-lisp:cons "ColumnStatisticsList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'errors))
      (common-lisp:list
       (common-lisp:cons "Errors"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-column-statistics-for-table-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-connection-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-connection-request-"))
   (catalog-id common-lisp:nil :type
    (common-lisp:or catalog-id-string common-lisp:null))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or name-string common-lisp:null))
   (hide-password common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-connection-request 'make-get-connection-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-connection-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-connection-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'catalog-id))
      (common-lisp:list
       (common-lisp:cons "CatalogId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'hide-password))
      (common-lisp:list
       (common-lisp:cons "HidePassword"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-connection-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-connection-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-connection-response-"))
   (connection common-lisp:nil :type
    (common-lisp:or connection common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-connection-response 'make-get-connection-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-connection-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-connection-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'connection))
      (common-lisp:list
       (common-lisp:cons "Connection"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-connection-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-connections-filter (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-connections-filter-"))
   (match-criteria common-lisp:nil :type
    (common-lisp:or match-criteria common-lisp:null))
   (connection-type common-lisp:nil :type
    (common-lisp:or connection-type common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-connections-filter 'make-get-connections-filter))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-connections-filter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-connections-filter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'match-criteria))
      (common-lisp:list
       (common-lisp:cons "MatchCriteria"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'connection-type))
      (common-lisp:list
       (common-lisp:cons "ConnectionType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-connections-filter))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-connections-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-connections-request-"))
   (catalog-id common-lisp:nil :type
    (common-lisp:or catalog-id-string common-lisp:null))
   (filter common-lisp:nil :type
    (common-lisp:or get-connections-filter common-lisp:null))
   (hide-password common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (next-token common-lisp:nil :type (common-lisp:or token common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or page-size common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-connections-request 'make-get-connections-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-connections-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-connections-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'catalog-id))
      (common-lisp:list
       (common-lisp:cons "CatalogId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filter))
      (common-lisp:list
       (common-lisp:cons "Filter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'hide-password))
      (common-lisp:list
       (common-lisp:cons "HidePassword"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-connections-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-connections-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-connections-response-"))
   (connection-list common-lisp:nil :type
    (common-lisp:or connection-list common-lisp:null))
   (next-token common-lisp:nil :type (common-lisp:or token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-connections-response 'make-get-connections-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-connections-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-connections-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'connection-list))
      (common-lisp:list
       (common-lisp:cons "ConnectionList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-connections-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-crawler-metrics-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-crawler-metrics-request-"))
   (crawler-name-list common-lisp:nil :type
    (common-lisp:or crawler-name-list common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or page-size common-lisp:null))
   (next-token common-lisp:nil :type (common-lisp:or token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-crawler-metrics-request
                    'make-get-crawler-metrics-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-crawler-metrics-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-crawler-metrics-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'crawler-name-list))
      (common-lisp:list
       (common-lisp:cons "CrawlerNameList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-crawler-metrics-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-crawler-metrics-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-crawler-metrics-response-"))
   (crawler-metrics-list common-lisp:nil :type
    (common-lisp:or crawler-metrics-list common-lisp:null))
   (next-token common-lisp:nil :type (common-lisp:or token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-crawler-metrics-response
                    'make-get-crawler-metrics-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-crawler-metrics-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-crawler-metrics-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'crawler-metrics-list))
      (common-lisp:list
       (common-lisp:cons "CrawlerMetricsList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-crawler-metrics-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-crawler-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-crawler-request-"))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or name-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-crawler-request 'make-get-crawler-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-crawler-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-crawler-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-crawler-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-crawler-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-crawler-response-"))
   (crawler common-lisp:nil :type (common-lisp:or crawler common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-crawler-response 'make-get-crawler-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-crawler-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-crawler-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'crawler))
      (common-lisp:list
       (common-lisp:cons "Crawler"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-crawler-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-crawlers-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-crawlers-request-"))
   (max-results common-lisp:nil :type
    (common-lisp:or page-size common-lisp:null))
   (next-token common-lisp:nil :type (common-lisp:or token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-crawlers-request 'make-get-crawlers-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-crawlers-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-crawlers-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-crawlers-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-crawlers-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-crawlers-response-"))
   (crawlers common-lisp:nil :type
    (common-lisp:or crawler-list common-lisp:null))
   (next-token common-lisp:nil :type (common-lisp:or token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-crawlers-response 'make-get-crawlers-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-crawlers-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-crawlers-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'crawlers))
      (common-lisp:list
       (common-lisp:cons "Crawlers"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-crawlers-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-custom-entity-type-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-custom-entity-type-request-"))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or name-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-custom-entity-type-request
                    'make-get-custom-entity-type-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-custom-entity-type-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-custom-entity-type-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-custom-entity-type-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-custom-entity-type-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-custom-entity-type-response-"))
   (name common-lisp:nil :type (common-lisp:or name-string common-lisp:null))
   (regex-string common-lisp:nil :type
    (common-lisp:or name-string common-lisp:null))
   (context-words common-lisp:nil :type
    (common-lisp:or context-words common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-custom-entity-type-response
                    'make-get-custom-entity-type-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-custom-entity-type-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-custom-entity-type-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'regex-string))
      (common-lisp:list
       (common-lisp:cons "RegexString"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'context-words))
      (common-lisp:list
       (common-lisp:cons "ContextWords"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-custom-entity-type-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-data-catalog-encryption-settings-request (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-get-data-catalog-encryption-settings-request-"))
   (catalog-id common-lisp:nil :type
    (common-lisp:or catalog-id-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-data-catalog-encryption-settings-request
                    'make-get-data-catalog-encryption-settings-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-data-catalog-encryption-settings-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-data-catalog-encryption-settings-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'catalog-id))
      (common-lisp:list
       (common-lisp:cons "CatalogId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-data-catalog-encryption-settings-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-data-catalog-encryption-settings-response (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-get-data-catalog-encryption-settings-response-"))
   (data-catalog-encryption-settings common-lisp:nil :type
    (common-lisp:or data-catalog-encryption-settings common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-data-catalog-encryption-settings-response
                    'make-get-data-catalog-encryption-settings-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-data-catalog-encryption-settings-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-data-catalog-encryption-settings-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'data-catalog-encryption-settings))
      (common-lisp:list
       (common-lisp:cons "DataCatalogEncryptionSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-data-catalog-encryption-settings-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-data-quality-result-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-data-quality-result-request-"))
   (result-id (common-lisp:error ":result-id is required") :type
    (common-lisp:or hash-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-data-quality-result-request
                    'make-get-data-quality-result-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-data-quality-result-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-data-quality-result-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'result-id))
      (common-lisp:list
       (common-lisp:cons "ResultId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-data-quality-result-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-data-quality-result-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-data-quality-result-response-"))
   (result-id common-lisp:nil :type
    (common-lisp:or hash-string common-lisp:null))
   (score common-lisp:nil :type
    (common-lisp:or generic-bounded-double common-lisp:null))
   (data-source common-lisp:nil :type
    (common-lisp:or data-source common-lisp:null))
   (ruleset-name common-lisp:nil :type
    (common-lisp:or name-string common-lisp:null))
   (evaluation-context common-lisp:nil :type
    (common-lisp:or generic-string common-lisp:null))
   (started-on common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (completed-on common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (job-name common-lisp:nil :type
    (common-lisp:or name-string common-lisp:null))
   (job-run-id common-lisp:nil :type
    (common-lisp:or hash-string common-lisp:null))
   (ruleset-evaluation-run-id common-lisp:nil :type
    (common-lisp:or hash-string common-lisp:null))
   (rule-results common-lisp:nil :type
    (common-lisp:or data-quality-rule-results common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-data-quality-result-response
                    'make-get-data-quality-result-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-data-quality-result-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-data-quality-result-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'result-id))
      (common-lisp:list
       (common-lisp:cons "ResultId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'score))
      (common-lisp:list
       (common-lisp:cons "Score"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-source))
      (common-lisp:list
       (common-lisp:cons "DataSource"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ruleset-name))
      (common-lisp:list
       (common-lisp:cons "RulesetName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'evaluation-context))
      (common-lisp:list
       (common-lisp:cons "EvaluationContext"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'started-on))
      (common-lisp:list
       (common-lisp:cons "StartedOn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'completed-on))
      (common-lisp:list
       (common-lisp:cons "CompletedOn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-name))
      (common-lisp:list
       (common-lisp:cons "JobName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-run-id))
      (common-lisp:list
       (common-lisp:cons "JobRunId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'ruleset-evaluation-run-id))
      (common-lisp:list
       (common-lisp:cons "RulesetEvaluationRunId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rule-results))
      (common-lisp:list
       (common-lisp:cons "RuleResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-data-quality-result-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-data-quality-rule-recommendation-run-request
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-get-data-quality-rule-recommendation-run-request-"))
   (run-id (common-lisp:error ":run-id is required") :type
    (common-lisp:or hash-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-data-quality-rule-recommendation-run-request
                    'make-get-data-quality-rule-recommendation-run-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-data-quality-rule-recommendation-run-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-data-quality-rule-recommendation-run-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'run-id))
      (common-lisp:list
       (common-lisp:cons "RunId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-data-quality-rule-recommendation-run-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-data-quality-rule-recommendation-run-response
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-get-data-quality-rule-recommendation-run-response-"))
   (run-id common-lisp:nil :type (common-lisp:or hash-string common-lisp:null))
   (data-source common-lisp:nil :type
    (common-lisp:or data-source common-lisp:null))
   (role common-lisp:nil :type (common-lisp:or role-string common-lisp:null))
   (number-of-workers common-lisp:nil :type
    (common-lisp:or nullable-integer common-lisp:null))
   (timeout common-lisp:nil :type (common-lisp:or timeout common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or task-status-type common-lisp:null))
   (error-string common-lisp:nil :type
    (common-lisp:or generic-string common-lisp:null))
   (started-on common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (last-modified-on common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (completed-on common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (execution-time common-lisp:nil :type
    (common-lisp:or execution-time common-lisp:null))
   (recommended-ruleset common-lisp:nil :type
    (common-lisp:or data-quality-ruleset-string common-lisp:null))
   (created-ruleset-name common-lisp:nil :type
    (common-lisp:or name-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-data-quality-rule-recommendation-run-response
                    'make-get-data-quality-rule-recommendation-run-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-data-quality-rule-recommendation-run-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-data-quality-rule-recommendation-run-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'run-id))
      (common-lisp:list
       (common-lisp:cons "RunId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-source))
      (common-lisp:list
       (common-lisp:cons "DataSource"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role))
      (common-lisp:list
       (common-lisp:cons "Role"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'number-of-workers))
      (common-lisp:list
       (common-lisp:cons "NumberOfWorkers"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'timeout))
      (common-lisp:list
       (common-lisp:cons "Timeout"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error-string))
      (common-lisp:list
       (common-lisp:cons "ErrorString"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'started-on))
      (common-lisp:list
       (common-lisp:cons "StartedOn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-modified-on))
      (common-lisp:list
       (common-lisp:cons "LastModifiedOn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'completed-on))
      (common-lisp:list
       (common-lisp:cons "CompletedOn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'execution-time))
      (common-lisp:list
       (common-lisp:cons "ExecutionTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'recommended-ruleset))
      (common-lisp:list
       (common-lisp:cons "RecommendedRuleset"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'created-ruleset-name))
      (common-lisp:list
       (common-lisp:cons "CreatedRulesetName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-data-quality-rule-recommendation-run-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-data-quality-ruleset-evaluation-run-request (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-get-data-quality-ruleset-evaluation-run-request-"))
   (run-id (common-lisp:error ":run-id is required") :type
    (common-lisp:or hash-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-data-quality-ruleset-evaluation-run-request
                    'make-get-data-quality-ruleset-evaluation-run-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-data-quality-ruleset-evaluation-run-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-data-quality-ruleset-evaluation-run-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'run-id))
      (common-lisp:list
       (common-lisp:cons "RunId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-data-quality-ruleset-evaluation-run-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-data-quality-ruleset-evaluation-run-response
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-get-data-quality-ruleset-evaluation-run-response-"))
   (run-id common-lisp:nil :type (common-lisp:or hash-string common-lisp:null))
   (data-source common-lisp:nil :type
    (common-lisp:or data-source common-lisp:null))
   (role common-lisp:nil :type (common-lisp:or role-string common-lisp:null))
   (number-of-workers common-lisp:nil :type
    (common-lisp:or nullable-integer common-lisp:null))
   (timeout common-lisp:nil :type (common-lisp:or timeout common-lisp:null))
   (additional-run-options common-lisp:nil :type
    (common-lisp:or data-quality-evaluation-run-additional-run-options
                    common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or task-status-type common-lisp:null))
   (error-string common-lisp:nil :type
    (common-lisp:or generic-string common-lisp:null))
   (started-on common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (last-modified-on common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (completed-on common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (execution-time common-lisp:nil :type
    (common-lisp:or execution-time common-lisp:null))
   (ruleset-names common-lisp:nil :type
    (common-lisp:or ruleset-names common-lisp:null))
   (result-ids common-lisp:nil :type
    (common-lisp:or data-quality-result-id-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-data-quality-ruleset-evaluation-run-response
                    'make-get-data-quality-ruleset-evaluation-run-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-data-quality-ruleset-evaluation-run-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-data-quality-ruleset-evaluation-run-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'run-id))
      (common-lisp:list
       (common-lisp:cons "RunId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-source))
      (common-lisp:list
       (common-lisp:cons "DataSource"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role))
      (common-lisp:list
       (common-lisp:cons "Role"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'number-of-workers))
      (common-lisp:list
       (common-lisp:cons "NumberOfWorkers"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'timeout))
      (common-lisp:list
       (common-lisp:cons "Timeout"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'additional-run-options))
      (common-lisp:list
       (common-lisp:cons "AdditionalRunOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error-string))
      (common-lisp:list
       (common-lisp:cons "ErrorString"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'started-on))
      (common-lisp:list
       (common-lisp:cons "StartedOn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-modified-on))
      (common-lisp:list
       (common-lisp:cons "LastModifiedOn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'completed-on))
      (common-lisp:list
       (common-lisp:cons "CompletedOn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'execution-time))
      (common-lisp:list
       (common-lisp:cons "ExecutionTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ruleset-names))
      (common-lisp:list
       (common-lisp:cons "RulesetNames"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'result-ids))
      (common-lisp:list
       (common-lisp:cons "ResultIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-data-quality-ruleset-evaluation-run-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-data-quality-ruleset-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-data-quality-ruleset-request-"))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or name-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-data-quality-ruleset-request
                    'make-get-data-quality-ruleset-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-data-quality-ruleset-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-data-quality-ruleset-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-data-quality-ruleset-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-data-quality-ruleset-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-data-quality-ruleset-response-"))
   (name common-lisp:nil :type (common-lisp:or name-string common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or description-string common-lisp:null))
   (ruleset common-lisp:nil :type
    (common-lisp:or data-quality-ruleset-string common-lisp:null))
   (target-table common-lisp:nil :type
    (common-lisp:or data-quality-target-table common-lisp:null))
   (created-on common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (last-modified-on common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (recommendation-run-id common-lisp:nil :type
    (common-lisp:or hash-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-data-quality-ruleset-response
                    'make-get-data-quality-ruleset-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-data-quality-ruleset-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-data-quality-ruleset-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ruleset))
      (common-lisp:list
       (common-lisp:cons "Ruleset"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target-table))
      (common-lisp:list
       (common-lisp:cons "TargetTable"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-on))
      (common-lisp:list
       (common-lisp:cons "CreatedOn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-modified-on))
      (common-lisp:list
       (common-lisp:cons "LastModifiedOn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'recommendation-run-id))
      (common-lisp:list
       (common-lisp:cons "RecommendationRunId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-data-quality-ruleset-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-database-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-database-request-"))
   (catalog-id common-lisp:nil :type
    (common-lisp:or catalog-id-string common-lisp:null))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or name-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-database-request 'make-get-database-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-database-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-database-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'catalog-id))
      (common-lisp:list
       (common-lisp:cons "CatalogId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-database-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-database-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-database-response-"))
   (database common-lisp:nil :type (common-lisp:or database common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-database-response 'make-get-database-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-database-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-database-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'database))
      (common-lisp:list
       (common-lisp:cons "Database"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-database-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-databases-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-databases-request-"))
   (catalog-id common-lisp:nil :type
    (common-lisp:or catalog-id-string common-lisp:null))
   (next-token common-lisp:nil :type (common-lisp:or token common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or catalog-getter-page-size common-lisp:null))
   (resource-share-type common-lisp:nil :type
    (common-lisp:or resource-share-type common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-databases-request 'make-get-databases-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-databases-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-databases-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'catalog-id))
      (common-lisp:list
       (common-lisp:cons "CatalogId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-share-type))
      (common-lisp:list
       (common-lisp:cons "ResourceShareType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-databases-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-databases-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-databases-response-"))
   (database-list (common-lisp:error ":database-list is required") :type
    (common-lisp:or database-list common-lisp:null))
   (next-token common-lisp:nil :type (common-lisp:or token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-databases-response 'make-get-databases-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-databases-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-databases-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'database-list))
      (common-lisp:list
       (common-lisp:cons "DatabaseList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-databases-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-dataflow-graph-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-dataflow-graph-request-"))
   (python-script common-lisp:nil :type
    (common-lisp:or python-script common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-dataflow-graph-request
                    'make-get-dataflow-graph-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-dataflow-graph-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-dataflow-graph-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'python-script))
      (common-lisp:list
       (common-lisp:cons "PythonScript"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-dataflow-graph-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-dataflow-graph-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-dataflow-graph-response-"))
   (dag-nodes common-lisp:nil :type
    (common-lisp:or dag-nodes common-lisp:null))
   (dag-edges common-lisp:nil :type
    (common-lisp:or dag-edges common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-dataflow-graph-response
                    'make-get-dataflow-graph-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-dataflow-graph-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-dataflow-graph-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dag-nodes))
      (common-lisp:list
       (common-lisp:cons "DagNodes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dag-edges))
      (common-lisp:list
       (common-lisp:cons "DagEdges"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-dataflow-graph-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-dev-endpoint-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-dev-endpoint-request-"))
   (endpoint-name (common-lisp:error ":endpoint-name is required") :type
    (common-lisp:or generic-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-dev-endpoint-request 'make-get-dev-endpoint-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-dev-endpoint-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-dev-endpoint-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'endpoint-name))
      (common-lisp:list
       (common-lisp:cons "EndpointName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-dev-endpoint-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-dev-endpoint-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-dev-endpoint-response-"))
   (dev-endpoint common-lisp:nil :type
    (common-lisp:or dev-endpoint common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-dev-endpoint-response
                    'make-get-dev-endpoint-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-dev-endpoint-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-dev-endpoint-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dev-endpoint))
      (common-lisp:list
       (common-lisp:cons "DevEndpoint"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-dev-endpoint-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-dev-endpoints-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-dev-endpoints-request-"))
   (max-results common-lisp:nil :type
    (common-lisp:or page-size common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or generic-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-dev-endpoints-request
                    'make-get-dev-endpoints-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-dev-endpoints-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-dev-endpoints-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-dev-endpoints-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-dev-endpoints-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-dev-endpoints-response-"))
   (dev-endpoints common-lisp:nil :type
    (common-lisp:or dev-endpoint-list common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or generic-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-dev-endpoints-response
                    'make-get-dev-endpoints-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-dev-endpoints-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-dev-endpoints-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dev-endpoints))
      (common-lisp:list
       (common-lisp:cons "DevEndpoints"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-dev-endpoints-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-job-bookmark-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-job-bookmark-request-"))
   (job-name (common-lisp:error ":job-name is required") :type
    (common-lisp:or job-name common-lisp:null))
   (run-id common-lisp:nil :type (common-lisp:or run-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-job-bookmark-request 'make-get-job-bookmark-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-job-bookmark-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-job-bookmark-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-name))
      (common-lisp:list
       (common-lisp:cons "JobName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'run-id))
      (common-lisp:list
       (common-lisp:cons "RunId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-job-bookmark-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-job-bookmark-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-job-bookmark-response-"))
   (job-bookmark-entry common-lisp:nil :type
    (common-lisp:or job-bookmark-entry common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-job-bookmark-response
                    'make-get-job-bookmark-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-job-bookmark-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-job-bookmark-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-bookmark-entry))
      (common-lisp:list
       (common-lisp:cons "JobBookmarkEntry"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-job-bookmark-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-job-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-job-request-"))
   (job-name (common-lisp:error ":job-name is required") :type
    (common-lisp:or name-string common-lisp:null)))
 (common-lisp:export (common-lisp:list 'get-job-request 'make-get-job-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-job-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-job-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-name))
      (common-lisp:list
       (common-lisp:cons "JobName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-job-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-job-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-job-response-"))
   (job common-lisp:nil :type (common-lisp:or job common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-job-response 'make-get-job-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-job-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-job-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job))
      (common-lisp:list
       (common-lisp:cons "Job"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-job-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-job-run-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-job-run-request-"))
   (job-name (common-lisp:error ":job-name is required") :type
    (common-lisp:or name-string common-lisp:null))
   (run-id (common-lisp:error ":run-id is required") :type
    (common-lisp:or id-string common-lisp:null))
   (predecessors-included common-lisp:nil :type
    (common-lisp:or boolean-value common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-job-run-request 'make-get-job-run-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-job-run-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-job-run-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-name))
      (common-lisp:list
       (common-lisp:cons "JobName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'run-id))
      (common-lisp:list
       (common-lisp:cons "RunId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'predecessors-included))
      (common-lisp:list
       (common-lisp:cons "PredecessorsIncluded"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-job-run-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-job-run-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-job-run-response-"))
   (job-run common-lisp:nil :type (common-lisp:or job-run common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-job-run-response 'make-get-job-run-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-job-run-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-job-run-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-run))
      (common-lisp:list
       (common-lisp:cons "JobRun"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-job-run-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-job-runs-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-job-runs-request-"))
   (job-name (common-lisp:error ":job-name is required") :type
    (common-lisp:or name-string common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or generic-string common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or page-size common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-job-runs-request 'make-get-job-runs-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-job-runs-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-job-runs-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-name))
      (common-lisp:list
       (common-lisp:cons "JobName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-job-runs-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-job-runs-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-job-runs-response-"))
   (job-runs common-lisp:nil :type
    (common-lisp:or job-run-list common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or generic-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-job-runs-response 'make-get-job-runs-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-job-runs-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-job-runs-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-runs))
      (common-lisp:list
       (common-lisp:cons "JobRuns"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-job-runs-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-jobs-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-jobs-request-"))
   (next-token common-lisp:nil :type
    (common-lisp:or generic-string common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or page-size common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-jobs-request 'make-get-jobs-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-jobs-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-jobs-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-jobs-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-jobs-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-jobs-response-"))
   (jobs common-lisp:nil :type (common-lisp:or job-list common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or generic-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-jobs-response 'make-get-jobs-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-jobs-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-jobs-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'jobs))
      (common-lisp:list
       (common-lisp:cons "Jobs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-jobs-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-mltask-run-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-mltask-run-request-"))
   (transform-id (common-lisp:error ":transform-id is required") :type
    (common-lisp:or hash-string common-lisp:null))
   (task-run-id (common-lisp:error ":task-run-id is required") :type
    (common-lisp:or hash-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-mltask-run-request 'make-get-mltask-run-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-mltask-run-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-mltask-run-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'transform-id))
      (common-lisp:list
       (common-lisp:cons "TransformId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'task-run-id))
      (common-lisp:list
       (common-lisp:cons "TaskRunId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-mltask-run-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-mltask-run-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-mltask-run-response-"))
   (transform-id common-lisp:nil :type
    (common-lisp:or hash-string common-lisp:null))
   (task-run-id common-lisp:nil :type
    (common-lisp:or hash-string common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or task-status-type common-lisp:null))
   (log-group-name common-lisp:nil :type
    (common-lisp:or generic-string common-lisp:null))
   (properties common-lisp:nil :type
    (common-lisp:or task-run-properties common-lisp:null))
   (error-string common-lisp:nil :type
    (common-lisp:or generic-string common-lisp:null))
   (started-on common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (last-modified-on common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (completed-on common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (execution-time common-lisp:nil :type
    (common-lisp:or execution-time common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-mltask-run-response 'make-get-mltask-run-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-mltask-run-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-mltask-run-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'transform-id))
      (common-lisp:list
       (common-lisp:cons "TransformId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'task-run-id))
      (common-lisp:list
       (common-lisp:cons "TaskRunId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'log-group-name))
      (common-lisp:list
       (common-lisp:cons "LogGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'properties))
      (common-lisp:list
       (common-lisp:cons "Properties"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error-string))
      (common-lisp:list
       (common-lisp:cons "ErrorString"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'started-on))
      (common-lisp:list
       (common-lisp:cons "StartedOn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-modified-on))
      (common-lisp:list
       (common-lisp:cons "LastModifiedOn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'completed-on))
      (common-lisp:list
       (common-lisp:cons "CompletedOn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'execution-time))
      (common-lisp:list
       (common-lisp:cons "ExecutionTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-mltask-run-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-mltask-runs-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-mltask-runs-request-"))
   (transform-id (common-lisp:error ":transform-id is required") :type
    (common-lisp:or hash-string common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or pagination-token common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or page-size common-lisp:null))
   (filter common-lisp:nil :type
    (common-lisp:or task-run-filter-criteria common-lisp:null))
   (sort common-lisp:nil :type
    (common-lisp:or task-run-sort-criteria common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-mltask-runs-request 'make-get-mltask-runs-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-mltask-runs-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-mltask-runs-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'transform-id))
      (common-lisp:list
       (common-lisp:cons "TransformId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filter))
      (common-lisp:list
       (common-lisp:cons "Filter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sort))
      (common-lisp:list
       (common-lisp:cons "Sort"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-mltask-runs-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-mltask-runs-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-mltask-runs-response-"))
   (task-runs common-lisp:nil :type
    (common-lisp:or task-run-list common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or pagination-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-mltask-runs-response 'make-get-mltask-runs-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-mltask-runs-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-mltask-runs-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'task-runs))
      (common-lisp:list
       (common-lisp:cons "TaskRuns"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-mltask-runs-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-mltransform-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-mltransform-request-"))
   (transform-id (common-lisp:error ":transform-id is required") :type
    (common-lisp:or hash-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-mltransform-request 'make-get-mltransform-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-mltransform-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-mltransform-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'transform-id))
      (common-lisp:list
       (common-lisp:cons "TransformId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-mltransform-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-mltransform-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-mltransform-response-"))
   (transform-id common-lisp:nil :type
    (common-lisp:or hash-string common-lisp:null))
   (name common-lisp:nil :type (common-lisp:or name-string common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or description-string common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or transform-status-type common-lisp:null))
   (created-on common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (last-modified-on common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (input-record-tables common-lisp:nil :type
    (common-lisp:or glue-tables common-lisp:null))
   (parameters common-lisp:nil :type
    (common-lisp:or transform-parameters common-lisp:null))
   (evaluation-metrics common-lisp:nil :type
    (common-lisp:or evaluation-metrics common-lisp:null))
   (label-count common-lisp:nil :type
    (common-lisp:or label-count common-lisp:null))
   (schema common-lisp:nil :type
    (common-lisp:or transform-schema common-lisp:null))
   (role common-lisp:nil :type (common-lisp:or role-string common-lisp:null))
   (glue-version common-lisp:nil :type
    (common-lisp:or glue-version-string common-lisp:null))
   (max-capacity common-lisp:nil :type
    (common-lisp:or nullable-double common-lisp:null))
   (worker-type common-lisp:nil :type
    (common-lisp:or worker-type common-lisp:null))
   (number-of-workers common-lisp:nil :type
    (common-lisp:or nullable-integer common-lisp:null))
   (timeout common-lisp:nil :type (common-lisp:or timeout common-lisp:null))
   (max-retries common-lisp:nil :type
    (common-lisp:or nullable-integer common-lisp:null))
   (transform-encryption common-lisp:nil :type
    (common-lisp:or transform-encryption common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-mltransform-response 'make-get-mltransform-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-mltransform-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-mltransform-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'transform-id))
      (common-lisp:list
       (common-lisp:cons "TransformId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-on))
      (common-lisp:list
       (common-lisp:cons "CreatedOn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-modified-on))
      (common-lisp:list
       (common-lisp:cons "LastModifiedOn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'input-record-tables))
      (common-lisp:list
       (common-lisp:cons "InputRecordTables"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'parameters))
      (common-lisp:list
       (common-lisp:cons "Parameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'evaluation-metrics))
      (common-lisp:list
       (common-lisp:cons "EvaluationMetrics"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'label-count))
      (common-lisp:list
       (common-lisp:cons "LabelCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'schema))
      (common-lisp:list
       (common-lisp:cons "Schema"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role))
      (common-lisp:list
       (common-lisp:cons "Role"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'glue-version))
      (common-lisp:list
       (common-lisp:cons "GlueVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-capacity))
      (common-lisp:list
       (common-lisp:cons "MaxCapacity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'worker-type))
      (common-lisp:list
       (common-lisp:cons "WorkerType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'number-of-workers))
      (common-lisp:list
       (common-lisp:cons "NumberOfWorkers"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'timeout))
      (common-lisp:list
       (common-lisp:cons "Timeout"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-retries))
      (common-lisp:list
       (common-lisp:cons "MaxRetries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'transform-encryption))
      (common-lisp:list
       (common-lisp:cons "TransformEncryption"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-mltransform-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-mltransforms-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-mltransforms-request-"))
   (next-token common-lisp:nil :type
    (common-lisp:or pagination-token common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or page-size common-lisp:null))
   (filter common-lisp:nil :type
    (common-lisp:or transform-filter-criteria common-lisp:null))
   (sort common-lisp:nil :type
    (common-lisp:or transform-sort-criteria common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-mltransforms-request 'make-get-mltransforms-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-mltransforms-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-mltransforms-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filter))
      (common-lisp:list
       (common-lisp:cons "Filter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sort))
      (common-lisp:list
       (common-lisp:cons "Sort"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-mltransforms-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-mltransforms-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-mltransforms-response-"))
   (transforms (common-lisp:error ":transforms is required") :type
    (common-lisp:or transform-list common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or pagination-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-mltransforms-response
                    'make-get-mltransforms-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-mltransforms-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-mltransforms-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'transforms))
      (common-lisp:list
       (common-lisp:cons "Transforms"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-mltransforms-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-mapping-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-mapping-request-"))
   (source (common-lisp:error ":source is required") :type
    (common-lisp:or catalog-entry common-lisp:null))
   (sinks common-lisp:nil :type
    (common-lisp:or catalog-entries common-lisp:null))
   (location common-lisp:nil :type (common-lisp:or location common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-mapping-request 'make-get-mapping-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-mapping-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-mapping-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source))
      (common-lisp:list
       (common-lisp:cons "Source"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sinks))
      (common-lisp:list
       (common-lisp:cons "Sinks"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'location))
      (common-lisp:list
       (common-lisp:cons "Location"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-mapping-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-mapping-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-mapping-response-"))
   (mapping (common-lisp:error ":mapping is required") :type
    (common-lisp:or mapping-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-mapping-response 'make-get-mapping-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-mapping-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-mapping-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'mapping))
      (common-lisp:list
       (common-lisp:cons "Mapping"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-mapping-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-partition-indexes-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-partition-indexes-request-"))
   (catalog-id common-lisp:nil :type
    (common-lisp:or catalog-id-string common-lisp:null))
   (database-name (common-lisp:error ":database-name is required") :type
    (common-lisp:or name-string common-lisp:null))
   (table-name (common-lisp:error ":table-name is required") :type
    (common-lisp:or name-string common-lisp:null))
   (next-token common-lisp:nil :type (common-lisp:or token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-partition-indexes-request
                    'make-get-partition-indexes-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-partition-indexes-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-partition-indexes-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'catalog-id))
      (common-lisp:list
       (common-lisp:cons "CatalogId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'database-name))
      (common-lisp:list
       (common-lisp:cons "DatabaseName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'table-name))
      (common-lisp:list
       (common-lisp:cons "TableName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-partition-indexes-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-partition-indexes-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-partition-indexes-response-"))
   (partition-index-descriptor-list common-lisp:nil :type
    (common-lisp:or partition-index-descriptor-list common-lisp:null))
   (next-token common-lisp:nil :type (common-lisp:or token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-partition-indexes-response
                    'make-get-partition-indexes-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-partition-indexes-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-partition-indexes-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'partition-index-descriptor-list))
      (common-lisp:list
       (common-lisp:cons "PartitionIndexDescriptorList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-partition-indexes-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-partition-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-partition-request-"))
   (catalog-id common-lisp:nil :type
    (common-lisp:or catalog-id-string common-lisp:null))
   (database-name (common-lisp:error ":database-name is required") :type
    (common-lisp:or name-string common-lisp:null))
   (table-name (common-lisp:error ":table-name is required") :type
    (common-lisp:or name-string common-lisp:null))
   (partition-values (common-lisp:error ":partition-values is required") :type
    (common-lisp:or value-string-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-partition-request 'make-get-partition-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-partition-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-partition-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'catalog-id))
      (common-lisp:list
       (common-lisp:cons "CatalogId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'database-name))
      (common-lisp:list
       (common-lisp:cons "DatabaseName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'table-name))
      (common-lisp:list
       (common-lisp:cons "TableName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'partition-values))
      (common-lisp:list
       (common-lisp:cons "PartitionValues"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-partition-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-partition-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-partition-response-"))
   (partition common-lisp:nil :type
    (common-lisp:or partition common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-partition-response 'make-get-partition-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-partition-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-partition-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'partition))
      (common-lisp:list
       (common-lisp:cons "Partition"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-partition-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-partitions-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-partitions-request-"))
   (catalog-id common-lisp:nil :type
    (common-lisp:or catalog-id-string common-lisp:null))
   (database-name (common-lisp:error ":database-name is required") :type
    (common-lisp:or name-string common-lisp:null))
   (table-name (common-lisp:error ":table-name is required") :type
    (common-lisp:or name-string common-lisp:null))
   (expression common-lisp:nil :type
    (common-lisp:or predicate-string common-lisp:null))
   (next-token common-lisp:nil :type (common-lisp:or token common-lisp:null))
   (segment common-lisp:nil :type (common-lisp:or segment common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or page-size common-lisp:null))
   (exclude-column-schema common-lisp:nil :type
    (common-lisp:or boolean-nullable common-lisp:null))
   (transaction-id common-lisp:nil :type
    (common-lisp:or transaction-id-string common-lisp:null))
   (query-as-of-time common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-partitions-request 'make-get-partitions-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-partitions-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-partitions-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'catalog-id))
      (common-lisp:list
       (common-lisp:cons "CatalogId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'database-name))
      (common-lisp:list
       (common-lisp:cons "DatabaseName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'table-name))
      (common-lisp:list
       (common-lisp:cons "TableName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'expression))
      (common-lisp:list
       (common-lisp:cons "Expression"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'segment))
      (common-lisp:list
       (common-lisp:cons "Segment"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'exclude-column-schema))
      (common-lisp:list
       (common-lisp:cons "ExcludeColumnSchema"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'transaction-id))
      (common-lisp:list
       (common-lisp:cons "TransactionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'query-as-of-time))
      (common-lisp:list
       (common-lisp:cons "QueryAsOfTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-partitions-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-partitions-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-partitions-response-"))
   (partitions common-lisp:nil :type
    (common-lisp:or partition-list common-lisp:null))
   (next-token common-lisp:nil :type (common-lisp:or token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-partitions-response 'make-get-partitions-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-partitions-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-partitions-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'partitions))
      (common-lisp:list
       (common-lisp:cons "Partitions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-partitions-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-plan-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-plan-request-"))
   (mapping (common-lisp:error ":mapping is required") :type
    (common-lisp:or mapping-list common-lisp:null))
   (source (common-lisp:error ":source is required") :type
    (common-lisp:or catalog-entry common-lisp:null))
   (sinks common-lisp:nil :type
    (common-lisp:or catalog-entries common-lisp:null))
   (location common-lisp:nil :type (common-lisp:or location common-lisp:null))
   (language common-lisp:nil :type (common-lisp:or language common-lisp:null))
   (additional-plan-options-map common-lisp:nil :type
    (common-lisp:or additional-plan-options-map common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-plan-request 'make-get-plan-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-plan-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-plan-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'mapping))
      (common-lisp:list
       (common-lisp:cons "Mapping"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source))
      (common-lisp:list
       (common-lisp:cons "Source"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sinks))
      (common-lisp:list
       (common-lisp:cons "Sinks"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'location))
      (common-lisp:list
       (common-lisp:cons "Location"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'language))
      (common-lisp:list
       (common-lisp:cons "Language"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'additional-plan-options-map))
      (common-lisp:list
       (common-lisp:cons "AdditionalPlanOptionsMap"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-plan-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-plan-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-plan-response-"))
   (python-script common-lisp:nil :type
    (common-lisp:or python-script common-lisp:null))
   (scala-code common-lisp:nil :type
    (common-lisp:or scala-code common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-plan-response 'make-get-plan-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-plan-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-plan-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'python-script))
      (common-lisp:list
       (common-lisp:cons "PythonScript"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'scala-code))
      (common-lisp:list
       (common-lisp:cons "ScalaCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-plan-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-registry-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-registry-input-"))
   (registry-id (common-lisp:error ":registry-id is required") :type
    (common-lisp:or registry-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-registry-input 'make-get-registry-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-registry-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-registry-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'registry-id))
      (common-lisp:list
       (common-lisp:cons "RegistryId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-registry-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-registry-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-registry-response-"))
   (registry-name common-lisp:nil :type
    (common-lisp:or schema-registry-name-string common-lisp:null))
   (registry-arn common-lisp:nil :type
    (common-lisp:or glue-resource-arn common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or description-string common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or registry-status common-lisp:null))
   (created-time common-lisp:nil :type
    (common-lisp:or created-timestamp common-lisp:null))
   (updated-time common-lisp:nil :type
    (common-lisp:or updated-timestamp common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-registry-response 'make-get-registry-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-registry-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-registry-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'registry-name))
      (common-lisp:list
       (common-lisp:cons "RegistryName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'registry-arn))
      (common-lisp:list
       (common-lisp:cons "RegistryArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-time))
      (common-lisp:list
       (common-lisp:cons "CreatedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'updated-time))
      (common-lisp:list
       (common-lisp:cons "UpdatedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-registry-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-resource-policies-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-resource-policies-request-"))
   (next-token common-lisp:nil :type (common-lisp:or token common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or page-size common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-resource-policies-request
                    'make-get-resource-policies-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-resource-policies-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-resource-policies-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-resource-policies-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-resource-policies-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-resource-policies-response-"))
   (get-resource-policies-response-list common-lisp:nil :type
    (common-lisp:or get-resource-policies-response-list common-lisp:null))
   (next-token common-lisp:nil :type (common-lisp:or token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-resource-policies-response
                    'make-get-resource-policies-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-resource-policies-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-resource-policies-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'get-resource-policies-response-list))
      (common-lisp:list
       (common-lisp:cons "GetResourcePoliciesResponseList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-resource-policies-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype get-resource-policies-response-list ()
   '(trivial-types:proper-list glue-policy))
 (common-lisp:defun |make-get-resource-policies-response-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list glue-policy))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (get-resource-policy-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-resource-policy-request-"))
   (resource-arn common-lisp:nil :type
    (common-lisp:or glue-resource-arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-resource-policy-request
                    'make-get-resource-policy-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-resource-policy-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-resource-policy-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-arn))
      (common-lisp:list
       (common-lisp:cons "ResourceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-resource-policy-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-resource-policy-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-resource-policy-response-"))
   (policy-in-json common-lisp:nil :type
    (common-lisp:or policy-json-string common-lisp:null))
   (policy-hash common-lisp:nil :type
    (common-lisp:or hash-string common-lisp:null))
   (create-time common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (update-time common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-resource-policy-response
                    'make-get-resource-policy-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-resource-policy-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-resource-policy-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-in-json))
      (common-lisp:list
       (common-lisp:cons "PolicyInJson"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-hash))
      (common-lisp:list
       (common-lisp:cons "PolicyHash"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'create-time))
      (common-lisp:list
       (common-lisp:cons "CreateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'update-time))
      (common-lisp:list
       (common-lisp:cons "UpdateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-resource-policy-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-schema-by-definition-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-schema-by-definition-input-"))
   (schema-id (common-lisp:error ":schema-id is required") :type
    (common-lisp:or schema-id common-lisp:null))
   (schema-definition (common-lisp:error ":schema-definition is required")
    :type (common-lisp:or schema-definition-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-schema-by-definition-input
                    'make-get-schema-by-definition-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-schema-by-definition-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-schema-by-definition-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'schema-id))
      (common-lisp:list
       (common-lisp:cons "SchemaId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'schema-definition))
      (common-lisp:list
       (common-lisp:cons "SchemaDefinition"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-schema-by-definition-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-schema-by-definition-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-schema-by-definition-response-"))
   (schema-version-id common-lisp:nil :type
    (common-lisp:or schema-version-id-string common-lisp:null))
   (schema-arn common-lisp:nil :type
    (common-lisp:or glue-resource-arn common-lisp:null))
   (data-format common-lisp:nil :type
    (common-lisp:or data-format common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or schema-version-status common-lisp:null))
   (created-time common-lisp:nil :type
    (common-lisp:or created-timestamp common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-schema-by-definition-response
                    'make-get-schema-by-definition-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-schema-by-definition-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-schema-by-definition-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'schema-version-id))
      (common-lisp:list
       (common-lisp:cons "SchemaVersionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'schema-arn))
      (common-lisp:list
       (common-lisp:cons "SchemaArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-format))
      (common-lisp:list
       (common-lisp:cons "DataFormat"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-time))
      (common-lisp:list
       (common-lisp:cons "CreatedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-schema-by-definition-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-schema-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-schema-input-"))
   (schema-id (common-lisp:error ":schema-id is required") :type
    (common-lisp:or schema-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-schema-input 'make-get-schema-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-schema-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-schema-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'schema-id))
      (common-lisp:list
       (common-lisp:cons "SchemaId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-schema-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-schema-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-schema-response-"))
   (registry-name common-lisp:nil :type
    (common-lisp:or schema-registry-name-string common-lisp:null))
   (registry-arn common-lisp:nil :type
    (common-lisp:or glue-resource-arn common-lisp:null))
   (schema-name common-lisp:nil :type
    (common-lisp:or schema-registry-name-string common-lisp:null))
   (schema-arn common-lisp:nil :type
    (common-lisp:or glue-resource-arn common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or description-string common-lisp:null))
   (data-format common-lisp:nil :type
    (common-lisp:or data-format common-lisp:null))
   (compatibility common-lisp:nil :type
    (common-lisp:or compatibility common-lisp:null))
   (schema-checkpoint common-lisp:nil :type
    (common-lisp:or schema-checkpoint-number common-lisp:null))
   (latest-schema-version common-lisp:nil :type
    (common-lisp:or version-long-number common-lisp:null))
   (next-schema-version common-lisp:nil :type
    (common-lisp:or version-long-number common-lisp:null))
   (schema-status common-lisp:nil :type
    (common-lisp:or schema-status common-lisp:null))
   (created-time common-lisp:nil :type
    (common-lisp:or created-timestamp common-lisp:null))
   (updated-time common-lisp:nil :type
    (common-lisp:or updated-timestamp common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-schema-response 'make-get-schema-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-schema-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-schema-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'registry-name))
      (common-lisp:list
       (common-lisp:cons "RegistryName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'registry-arn))
      (common-lisp:list
       (common-lisp:cons "RegistryArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'schema-name))
      (common-lisp:list
       (common-lisp:cons "SchemaName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'schema-arn))
      (common-lisp:list
       (common-lisp:cons "SchemaArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-format))
      (common-lisp:list
       (common-lisp:cons "DataFormat"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'compatibility))
      (common-lisp:list
       (common-lisp:cons "Compatibility"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'schema-checkpoint))
      (common-lisp:list
       (common-lisp:cons "SchemaCheckpoint"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'latest-schema-version))
      (common-lisp:list
       (common-lisp:cons "LatestSchemaVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-schema-version))
      (common-lisp:list
       (common-lisp:cons "NextSchemaVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'schema-status))
      (common-lisp:list
       (common-lisp:cons "SchemaStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-time))
      (common-lisp:list
       (common-lisp:cons "CreatedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'updated-time))
      (common-lisp:list
       (common-lisp:cons "UpdatedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-schema-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-schema-version-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-schema-version-input-"))
   (schema-id common-lisp:nil :type
    (common-lisp:or schema-id common-lisp:null))
   (schema-version-id common-lisp:nil :type
    (common-lisp:or schema-version-id-string common-lisp:null))
   (schema-version-number common-lisp:nil :type
    (common-lisp:or schema-version-number common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-schema-version-input 'make-get-schema-version-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-schema-version-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-schema-version-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'schema-id))
      (common-lisp:list
       (common-lisp:cons "SchemaId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'schema-version-id))
      (common-lisp:list
       (common-lisp:cons "SchemaVersionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'schema-version-number))
      (common-lisp:list
       (common-lisp:cons "SchemaVersionNumber"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-schema-version-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-schema-version-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-schema-version-response-"))
   (schema-version-id common-lisp:nil :type
    (common-lisp:or schema-version-id-string common-lisp:null))
   (schema-definition common-lisp:nil :type
    (common-lisp:or schema-definition-string common-lisp:null))
   (data-format common-lisp:nil :type
    (common-lisp:or data-format common-lisp:null))
   (schema-arn common-lisp:nil :type
    (common-lisp:or glue-resource-arn common-lisp:null))
   (version-number common-lisp:nil :type
    (common-lisp:or version-long-number common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or schema-version-status common-lisp:null))
   (created-time common-lisp:nil :type
    (common-lisp:or created-timestamp common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-schema-version-response
                    'make-get-schema-version-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-schema-version-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-schema-version-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'schema-version-id))
      (common-lisp:list
       (common-lisp:cons "SchemaVersionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'schema-definition))
      (common-lisp:list
       (common-lisp:cons "SchemaDefinition"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-format))
      (common-lisp:list
       (common-lisp:cons "DataFormat"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'schema-arn))
      (common-lisp:list
       (common-lisp:cons "SchemaArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version-number))
      (common-lisp:list
       (common-lisp:cons "VersionNumber"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-time))
      (common-lisp:list
       (common-lisp:cons "CreatedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-schema-version-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-schema-versions-diff-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-schema-versions-diff-input-"))
   (schema-id (common-lisp:error ":schema-id is required") :type
    (common-lisp:or schema-id common-lisp:null))
   (first-schema-version-number
    (common-lisp:error ":first-schema-version-number is required") :type
    (common-lisp:or schema-version-number common-lisp:null))
   (second-schema-version-number
    (common-lisp:error ":second-schema-version-number is required") :type
    (common-lisp:or schema-version-number common-lisp:null))
   (schema-diff-type (common-lisp:error ":schema-diff-type is required") :type
    (common-lisp:or schema-diff-type common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-schema-versions-diff-input
                    'make-get-schema-versions-diff-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-schema-versions-diff-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-schema-versions-diff-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'schema-id))
      (common-lisp:list
       (common-lisp:cons "SchemaId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'first-schema-version-number))
      (common-lisp:list
       (common-lisp:cons "FirstSchemaVersionNumber"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'second-schema-version-number))
      (common-lisp:list
       (common-lisp:cons "SecondSchemaVersionNumber"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'schema-diff-type))
      (common-lisp:list
       (common-lisp:cons "SchemaDiffType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-schema-versions-diff-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-schema-versions-diff-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-schema-versions-diff-response-"))
   (diff common-lisp:nil :type
    (common-lisp:or schema-definition-diff common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-schema-versions-diff-response
                    'make-get-schema-versions-diff-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-schema-versions-diff-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-schema-versions-diff-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'diff))
      (common-lisp:list
       (common-lisp:cons "Diff"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-schema-versions-diff-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-security-configuration-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-security-configuration-request-"))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or name-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-security-configuration-request
                    'make-get-security-configuration-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-security-configuration-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-security-configuration-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-security-configuration-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-security-configuration-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-security-configuration-response-"))
   (security-configuration common-lisp:nil :type
    (common-lisp:or security-configuration common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-security-configuration-response
                    'make-get-security-configuration-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-security-configuration-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-security-configuration-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'security-configuration))
      (common-lisp:list
       (common-lisp:cons "SecurityConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-security-configuration-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-security-configurations-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-security-configurations-request-"))
   (max-results common-lisp:nil :type
    (common-lisp:or page-size common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or generic-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-security-configurations-request
                    'make-get-security-configurations-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-security-configurations-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-security-configurations-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-security-configurations-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-security-configurations-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-security-configurations-response-"))
   (security-configurations common-lisp:nil :type
    (common-lisp:or security-configuration-list common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or generic-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-security-configurations-response
                    'make-get-security-configurations-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-security-configurations-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-security-configurations-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'security-configurations))
      (common-lisp:list
       (common-lisp:cons "SecurityConfigurations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-security-configurations-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-session-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-session-request-"))
   (id (common-lisp:error ":id is required") :type
    (common-lisp:or name-string common-lisp:null))
   (request-origin common-lisp:nil :type
    (common-lisp:or orchestration-name-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-session-request 'make-get-session-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-session-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-session-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-origin))
      (common-lisp:list
       (common-lisp:cons "RequestOrigin"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-session-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-session-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-session-response-"))
   (session common-lisp:nil :type (common-lisp:or session common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-session-response 'make-get-session-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-session-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-session-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'session))
      (common-lisp:list
       (common-lisp:cons "Session"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-session-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-statement-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-statement-request-"))
   (session-id (common-lisp:error ":session-id is required") :type
    (common-lisp:or name-string common-lisp:null))
   (id (common-lisp:error ":id is required") :type
    (common-lisp:or integer-value common-lisp:null))
   (request-origin common-lisp:nil :type
    (common-lisp:or orchestration-name-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-statement-request 'make-get-statement-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-statement-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-statement-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'session-id))
      (common-lisp:list
       (common-lisp:cons "SessionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-origin))
      (common-lisp:list
       (common-lisp:cons "RequestOrigin"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-statement-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-statement-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-statement-response-"))
   (statement common-lisp:nil :type
    (common-lisp:or statement common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-statement-response 'make-get-statement-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-statement-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-statement-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'statement))
      (common-lisp:list
       (common-lisp:cons "Statement"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-statement-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-table-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-table-request-"))
   (catalog-id common-lisp:nil :type
    (common-lisp:or catalog-id-string common-lisp:null))
   (database-name (common-lisp:error ":database-name is required") :type
    (common-lisp:or name-string common-lisp:null))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or name-string common-lisp:null))
   (transaction-id common-lisp:nil :type
    (common-lisp:or transaction-id-string common-lisp:null))
   (query-as-of-time common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-table-request 'make-get-table-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-table-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-table-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'catalog-id))
      (common-lisp:list
       (common-lisp:cons "CatalogId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'database-name))
      (common-lisp:list
       (common-lisp:cons "DatabaseName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'transaction-id))
      (common-lisp:list
       (common-lisp:cons "TransactionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'query-as-of-time))
      (common-lisp:list
       (common-lisp:cons "QueryAsOfTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-table-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-table-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-table-response-"))
   (table common-lisp:nil :type (common-lisp:or table common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-table-response 'make-get-table-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-table-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-table-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'table))
      (common-lisp:list
       (common-lisp:cons "Table"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-table-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-table-version-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-table-version-request-"))
   (catalog-id common-lisp:nil :type
    (common-lisp:or catalog-id-string common-lisp:null))
   (database-name (common-lisp:error ":database-name is required") :type
    (common-lisp:or name-string common-lisp:null))
   (table-name (common-lisp:error ":table-name is required") :type
    (common-lisp:or name-string common-lisp:null))
   (version-id common-lisp:nil :type
    (common-lisp:or version-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-table-version-request
                    'make-get-table-version-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-table-version-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-table-version-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'catalog-id))
      (common-lisp:list
       (common-lisp:cons "CatalogId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'database-name))
      (common-lisp:list
       (common-lisp:cons "DatabaseName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'table-name))
      (common-lisp:list
       (common-lisp:cons "TableName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version-id))
      (common-lisp:list
       (common-lisp:cons "VersionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-table-version-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-table-version-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-table-version-response-"))
   (table-version common-lisp:nil :type
    (common-lisp:or table-version common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-table-version-response
                    'make-get-table-version-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-table-version-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-table-version-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'table-version))
      (common-lisp:list
       (common-lisp:cons "TableVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-table-version-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype get-table-versions-list ()
   '(trivial-types:proper-list table-version))
 (common-lisp:defun |make-get-table-versions-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list table-version))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (get-table-versions-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-table-versions-request-"))
   (catalog-id common-lisp:nil :type
    (common-lisp:or catalog-id-string common-lisp:null))
   (database-name (common-lisp:error ":database-name is required") :type
    (common-lisp:or name-string common-lisp:null))
   (table-name (common-lisp:error ":table-name is required") :type
    (common-lisp:or name-string common-lisp:null))
   (next-token common-lisp:nil :type (common-lisp:or token common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or catalog-getter-page-size common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-table-versions-request
                    'make-get-table-versions-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-table-versions-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-table-versions-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'catalog-id))
      (common-lisp:list
       (common-lisp:cons "CatalogId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'database-name))
      (common-lisp:list
       (common-lisp:cons "DatabaseName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'table-name))
      (common-lisp:list
       (common-lisp:cons "TableName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-table-versions-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-table-versions-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-table-versions-response-"))
   (table-versions common-lisp:nil :type
    (common-lisp:or get-table-versions-list common-lisp:null))
   (next-token common-lisp:nil :type (common-lisp:or token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-table-versions-response
                    'make-get-table-versions-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-table-versions-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-table-versions-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'table-versions))
      (common-lisp:list
       (common-lisp:cons "TableVersions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-table-versions-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-tables-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-tables-request-"))
   (catalog-id common-lisp:nil :type
    (common-lisp:or catalog-id-string common-lisp:null))
   (database-name (common-lisp:error ":database-name is required") :type
    (common-lisp:or name-string common-lisp:null))
   (expression common-lisp:nil :type
    (common-lisp:or filter-string common-lisp:null))
   (next-token common-lisp:nil :type (common-lisp:or token common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or catalog-getter-page-size common-lisp:null))
   (transaction-id common-lisp:nil :type
    (common-lisp:or transaction-id-string common-lisp:null))
   (query-as-of-time common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-tables-request 'make-get-tables-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-tables-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-tables-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'catalog-id))
      (common-lisp:list
       (common-lisp:cons "CatalogId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'database-name))
      (common-lisp:list
       (common-lisp:cons "DatabaseName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'expression))
      (common-lisp:list
       (common-lisp:cons "Expression"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'transaction-id))
      (common-lisp:list
       (common-lisp:cons "TransactionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'query-as-of-time))
      (common-lisp:list
       (common-lisp:cons "QueryAsOfTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-tables-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-tables-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-tables-response-"))
   (table-list common-lisp:nil :type
    (common-lisp:or table-list common-lisp:null))
   (next-token common-lisp:nil :type (common-lisp:or token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-tables-response 'make-get-tables-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-tables-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-tables-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'table-list))
      (common-lisp:list
       (common-lisp:cons "TableList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-tables-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-tags-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-tags-request-"))
   (resource-arn (common-lisp:error ":resource-arn is required") :type
    (common-lisp:or glue-resource-arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-tags-request 'make-get-tags-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-tags-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-tags-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-arn))
      (common-lisp:list
       (common-lisp:cons "ResourceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-tags-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-tags-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-tags-response-"))
   (tags common-lisp:nil :type (common-lisp:or tags-map common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-tags-response 'make-get-tags-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-tags-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-tags-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-tags-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-trigger-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-trigger-request-"))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or name-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-trigger-request 'make-get-trigger-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-trigger-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-trigger-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-trigger-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-trigger-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-trigger-response-"))
   (trigger common-lisp:nil :type (common-lisp:or trigger common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-trigger-response 'make-get-trigger-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-trigger-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-trigger-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'trigger))
      (common-lisp:list
       (common-lisp:cons "Trigger"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-trigger-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-triggers-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-triggers-request-"))
   (next-token common-lisp:nil :type
    (common-lisp:or generic-string common-lisp:null))
   (dependent-job-name common-lisp:nil :type
    (common-lisp:or name-string common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or page-size common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-triggers-request 'make-get-triggers-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-triggers-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-triggers-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dependent-job-name))
      (common-lisp:list
       (common-lisp:cons "DependentJobName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-triggers-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-triggers-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-triggers-response-"))
   (triggers common-lisp:nil :type
    (common-lisp:or trigger-list common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or generic-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-triggers-response 'make-get-triggers-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-triggers-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-triggers-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'triggers))
      (common-lisp:list
       (common-lisp:cons "Triggers"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-triggers-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-unfiltered-partition-metadata-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-unfiltered-partition-metadata-request-"))
   (catalog-id (common-lisp:error ":catalog-id is required") :type
    (common-lisp:or catalog-id-string common-lisp:null))
   (database-name (common-lisp:error ":database-name is required") :type
    (common-lisp:or name-string common-lisp:null))
   (table-name (common-lisp:error ":table-name is required") :type
    (common-lisp:or name-string common-lisp:null))
   (partition-values (common-lisp:error ":partition-values is required") :type
    (common-lisp:or value-string-list common-lisp:null))
   (audit-context common-lisp:nil :type
    (common-lisp:or audit-context common-lisp:null))
   (supported-permission-types
    (common-lisp:error ":supported-permission-types is required") :type
    (common-lisp:or permission-type-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-unfiltered-partition-metadata-request
                    'make-get-unfiltered-partition-metadata-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-unfiltered-partition-metadata-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-unfiltered-partition-metadata-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'catalog-id))
      (common-lisp:list
       (common-lisp:cons "CatalogId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'database-name))
      (common-lisp:list
       (common-lisp:cons "DatabaseName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'table-name))
      (common-lisp:list
       (common-lisp:cons "TableName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'partition-values))
      (common-lisp:list
       (common-lisp:cons "PartitionValues"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'audit-context))
      (common-lisp:list
       (common-lisp:cons "AuditContext"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'supported-permission-types))
      (common-lisp:list
       (common-lisp:cons "SupportedPermissionTypes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-unfiltered-partition-metadata-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-unfiltered-partition-metadata-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-unfiltered-partition-metadata-response-"))
   (partition common-lisp:nil :type
    (common-lisp:or partition common-lisp:null))
   (authorized-columns common-lisp:nil :type
    (common-lisp:or name-string-list common-lisp:null))
   (is-registered-with-lake-formation common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-unfiltered-partition-metadata-response
                    'make-get-unfiltered-partition-metadata-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-unfiltered-partition-metadata-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-unfiltered-partition-metadata-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'partition))
      (common-lisp:list
       (common-lisp:cons "Partition"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'authorized-columns))
      (common-lisp:list
       (common-lisp:cons "AuthorizedColumns"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'is-registered-with-lake-formation))
      (common-lisp:list
       (common-lisp:cons "IsRegisteredWithLakeFormation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-unfiltered-partition-metadata-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-unfiltered-partitions-metadata-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-unfiltered-partitions-metadata-request-"))
   (catalog-id (common-lisp:error ":catalog-id is required") :type
    (common-lisp:or catalog-id-string common-lisp:null))
   (database-name (common-lisp:error ":database-name is required") :type
    (common-lisp:or name-string common-lisp:null))
   (table-name (common-lisp:error ":table-name is required") :type
    (common-lisp:or name-string common-lisp:null))
   (expression common-lisp:nil :type
    (common-lisp:or predicate-string common-lisp:null))
   (audit-context common-lisp:nil :type
    (common-lisp:or audit-context common-lisp:null))
   (supported-permission-types
    (common-lisp:error ":supported-permission-types is required") :type
    (common-lisp:or permission-type-list common-lisp:null))
   (next-token common-lisp:nil :type (common-lisp:or token common-lisp:null))
   (segment common-lisp:nil :type (common-lisp:or segment common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or page-size common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-unfiltered-partitions-metadata-request
                    'make-get-unfiltered-partitions-metadata-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-unfiltered-partitions-metadata-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-unfiltered-partitions-metadata-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'catalog-id))
      (common-lisp:list
       (common-lisp:cons "CatalogId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'database-name))
      (common-lisp:list
       (common-lisp:cons "DatabaseName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'table-name))
      (common-lisp:list
       (common-lisp:cons "TableName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'expression))
      (common-lisp:list
       (common-lisp:cons "Expression"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'audit-context))
      (common-lisp:list
       (common-lisp:cons "AuditContext"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'supported-permission-types))
      (common-lisp:list
       (common-lisp:cons "SupportedPermissionTypes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'segment))
      (common-lisp:list
       (common-lisp:cons "Segment"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-unfiltered-partitions-metadata-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-unfiltered-partitions-metadata-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-unfiltered-partitions-metadata-response-"))
   (unfiltered-partitions common-lisp:nil :type
    (common-lisp:or unfiltered-partition-list common-lisp:null))
   (next-token common-lisp:nil :type (common-lisp:or token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-unfiltered-partitions-metadata-response
                    'make-get-unfiltered-partitions-metadata-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-unfiltered-partitions-metadata-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-unfiltered-partitions-metadata-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'unfiltered-partitions))
      (common-lisp:list
       (common-lisp:cons "UnfilteredPartitions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-unfiltered-partitions-metadata-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-unfiltered-table-metadata-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-unfiltered-table-metadata-request-"))
   (catalog-id (common-lisp:error ":catalog-id is required") :type
    (common-lisp:or catalog-id-string common-lisp:null))
   (database-name (common-lisp:error ":database-name is required") :type
    (common-lisp:or name-string common-lisp:null))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or name-string common-lisp:null))
   (audit-context common-lisp:nil :type
    (common-lisp:or audit-context common-lisp:null))
   (supported-permission-types
    (common-lisp:error ":supported-permission-types is required") :type
    (common-lisp:or permission-type-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-unfiltered-table-metadata-request
                    'make-get-unfiltered-table-metadata-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-unfiltered-table-metadata-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-unfiltered-table-metadata-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'catalog-id))
      (common-lisp:list
       (common-lisp:cons "CatalogId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'database-name))
      (common-lisp:list
       (common-lisp:cons "DatabaseName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'audit-context))
      (common-lisp:list
       (common-lisp:cons "AuditContext"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'supported-permission-types))
      (common-lisp:list
       (common-lisp:cons "SupportedPermissionTypes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-unfiltered-table-metadata-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-unfiltered-table-metadata-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-unfiltered-table-metadata-response-"))
   (table common-lisp:nil :type (common-lisp:or table common-lisp:null))
   (authorized-columns common-lisp:nil :type
    (common-lisp:or name-string-list common-lisp:null))
   (is-registered-with-lake-formation common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (cell-filters common-lisp:nil :type
    (common-lisp:or column-row-filter-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-unfiltered-table-metadata-response
                    'make-get-unfiltered-table-metadata-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-unfiltered-table-metadata-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-unfiltered-table-metadata-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'table))
      (common-lisp:list
       (common-lisp:cons "Table"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'authorized-columns))
      (common-lisp:list
       (common-lisp:cons "AuthorizedColumns"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'is-registered-with-lake-formation))
      (common-lisp:list
       (common-lisp:cons "IsRegisteredWithLakeFormation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cell-filters))
      (common-lisp:list
       (common-lisp:cons "CellFilters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-unfiltered-table-metadata-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-user-defined-function-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-user-defined-function-request-"))
   (catalog-id common-lisp:nil :type
    (common-lisp:or catalog-id-string common-lisp:null))
   (database-name (common-lisp:error ":database-name is required") :type
    (common-lisp:or name-string common-lisp:null))
   (function-name (common-lisp:error ":function-name is required") :type
    (common-lisp:or name-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-user-defined-function-request
                    'make-get-user-defined-function-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-user-defined-function-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-user-defined-function-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'catalog-id))
      (common-lisp:list
       (common-lisp:cons "CatalogId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'database-name))
      (common-lisp:list
       (common-lisp:cons "DatabaseName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'function-name))
      (common-lisp:list
       (common-lisp:cons "FunctionName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-user-defined-function-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-user-defined-function-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-user-defined-function-response-"))
   (user-defined-function common-lisp:nil :type
    (common-lisp:or user-defined-function common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-user-defined-function-response
                    'make-get-user-defined-function-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-user-defined-function-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-user-defined-function-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'user-defined-function))
      (common-lisp:list
       (common-lisp:cons "UserDefinedFunction"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-user-defined-function-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-user-defined-functions-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-user-defined-functions-request-"))
   (catalog-id common-lisp:nil :type
    (common-lisp:or catalog-id-string common-lisp:null))
   (database-name common-lisp:nil :type
    (common-lisp:or name-string common-lisp:null))
   (pattern (common-lisp:error ":pattern is required") :type
    (common-lisp:or name-string common-lisp:null))
   (next-token common-lisp:nil :type (common-lisp:or token common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or catalog-getter-page-size common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-user-defined-functions-request
                    'make-get-user-defined-functions-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-user-defined-functions-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-user-defined-functions-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'catalog-id))
      (common-lisp:list
       (common-lisp:cons "CatalogId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'database-name))
      (common-lisp:list
       (common-lisp:cons "DatabaseName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pattern))
      (common-lisp:list
       (common-lisp:cons "Pattern"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-user-defined-functions-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-user-defined-functions-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-user-defined-functions-response-"))
   (user-defined-functions common-lisp:nil :type
    (common-lisp:or user-defined-function-list common-lisp:null))
   (next-token common-lisp:nil :type (common-lisp:or token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-user-defined-functions-response
                    'make-get-user-defined-functions-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-user-defined-functions-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-user-defined-functions-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'user-defined-functions))
      (common-lisp:list
       (common-lisp:cons "UserDefinedFunctions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-user-defined-functions-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-workflow-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-workflow-request-"))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or name-string common-lisp:null))
   (include-graph common-lisp:nil :type
    (common-lisp:or nullable-boolean common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-workflow-request 'make-get-workflow-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-workflow-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-workflow-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'include-graph))
      (common-lisp:list
       (common-lisp:cons "IncludeGraph"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-workflow-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-workflow-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-workflow-response-"))
   (workflow common-lisp:nil :type (common-lisp:or workflow common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-workflow-response 'make-get-workflow-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-workflow-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-workflow-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'workflow))
      (common-lisp:list
       (common-lisp:cons "Workflow"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-workflow-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-workflow-run-properties-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-workflow-run-properties-request-"))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or name-string common-lisp:null))
   (run-id (common-lisp:error ":run-id is required") :type
    (common-lisp:or id-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-workflow-run-properties-request
                    'make-get-workflow-run-properties-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-workflow-run-properties-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-workflow-run-properties-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'run-id))
      (common-lisp:list
       (common-lisp:cons "RunId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-workflow-run-properties-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-workflow-run-properties-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-workflow-run-properties-response-"))
   (run-properties common-lisp:nil :type
    (common-lisp:or workflow-run-properties common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-workflow-run-properties-response
                    'make-get-workflow-run-properties-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-workflow-run-properties-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-workflow-run-properties-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'run-properties))
      (common-lisp:list
       (common-lisp:cons "RunProperties"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-workflow-run-properties-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-workflow-run-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-workflow-run-request-"))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or name-string common-lisp:null))
   (run-id (common-lisp:error ":run-id is required") :type
    (common-lisp:or id-string common-lisp:null))
   (include-graph common-lisp:nil :type
    (common-lisp:or nullable-boolean common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-workflow-run-request 'make-get-workflow-run-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-workflow-run-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-workflow-run-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'run-id))
      (common-lisp:list
       (common-lisp:cons "RunId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'include-graph))
      (common-lisp:list
       (common-lisp:cons "IncludeGraph"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-workflow-run-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-workflow-run-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-workflow-run-response-"))
   (run common-lisp:nil :type (common-lisp:or workflow-run common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-workflow-run-response
                    'make-get-workflow-run-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-workflow-run-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-workflow-run-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'run))
      (common-lisp:list
       (common-lisp:cons "Run"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-workflow-run-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-workflow-runs-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-workflow-runs-request-"))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or name-string common-lisp:null))
   (include-graph common-lisp:nil :type
    (common-lisp:or nullable-boolean common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or generic-string common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or page-size common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-workflow-runs-request
                    'make-get-workflow-runs-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-workflow-runs-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-workflow-runs-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'include-graph))
      (common-lisp:list
       (common-lisp:cons "IncludeGraph"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-workflow-runs-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-workflow-runs-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-workflow-runs-response-"))
   (runs common-lisp:nil :type (common-lisp:or workflow-runs common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or generic-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-workflow-runs-response
                    'make-get-workflow-runs-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-workflow-runs-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-workflow-runs-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'runs))
      (common-lisp:list
       (common-lisp:cons "Runs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-workflow-runs-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition glue-encryption-exception
     (glue-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       glue-encryption-exception-message)))
 (common-lisp:export
  (common-lisp:list 'glue-encryption-exception
                    'glue-encryption-exception-message)))
(common-lisp:progn
 (common-lisp:defstruct
     (glue-policy (:copier common-lisp:nil)
      (:conc-name "struct-shape-glue-policy-"))
   (policy-in-json common-lisp:nil :type
    (common-lisp:or policy-json-string common-lisp:null))
   (policy-hash common-lisp:nil :type
    (common-lisp:or hash-string common-lisp:null))
   (create-time common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (update-time common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null)))
 (common-lisp:export (common-lisp:list 'glue-policy 'make-glue-policy))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input glue-policy))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input glue-policy))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-in-json))
      (common-lisp:list
       (common-lisp:cons "PolicyInJson"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-hash))
      (common-lisp:list
       (common-lisp:cons "PolicyHash"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'create-time))
      (common-lisp:list
       (common-lisp:cons "CreateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'update-time))
      (common-lisp:list
       (common-lisp:cons "UpdateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input glue-policy))
   common-lisp:nil))
(common-lisp:deftype glue-record-type () 'common-lisp:string)
(common-lisp:deftype glue-resource-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (glue-schema (:copier common-lisp:nil)
      (:conc-name "struct-shape-glue-schema-"))
   (columns common-lisp:nil :type
    (common-lisp:or glue-studio-schema-column-list common-lisp:null)))
 (common-lisp:export (common-lisp:list 'glue-schema 'make-glue-schema))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input glue-schema))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input glue-schema))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'columns))
      (common-lisp:list
       (common-lisp:cons "Columns"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input glue-schema))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype glue-schemas () '(trivial-types:proper-list glue-schema))
 (common-lisp:defun |make-glue-schemas|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list glue-schema))
   aws-sdk/generator/shape::members))
(common-lisp:deftype glue-studio-column-name-string () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype glue-studio-path-list ()
   '(trivial-types:proper-list enclosed-in-string-properties))
 (common-lisp:defun |make-glue-studio-path-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            enclosed-in-string-properties))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (glue-studio-schema-column (:copier common-lisp:nil)
      (:conc-name "struct-shape-glue-studio-schema-column-"))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or glue-studio-column-name-string common-lisp:null))
   (type common-lisp:nil :type
    (common-lisp:or column-type-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'glue-studio-schema-column
                    'make-glue-studio-schema-column))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          glue-studio-schema-column))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          glue-studio-schema-column))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          glue-studio-schema-column))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype glue-studio-schema-column-list ()
   '(trivial-types:proper-list glue-studio-schema-column))
 (common-lisp:defun |make-glue-studio-schema-column-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            glue-studio-schema-column))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (glue-table (:copier common-lisp:nil)
      (:conc-name "struct-shape-glue-table-"))
   (database-name (common-lisp:error ":database-name is required") :type
    (common-lisp:or name-string common-lisp:null))
   (table-name (common-lisp:error ":table-name is required") :type
    (common-lisp:or name-string common-lisp:null))
   (catalog-id common-lisp:nil :type
    (common-lisp:or name-string common-lisp:null))
   (connection-name common-lisp:nil :type
    (common-lisp:or name-string common-lisp:null))
   (additional-options common-lisp:nil :type
    (common-lisp:or glue-table-additional-options common-lisp:null)))
 (common-lisp:export (common-lisp:list 'glue-table 'make-glue-table))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input glue-table))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input glue-table))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'database-name))
      (common-lisp:list
       (common-lisp:cons "DatabaseName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'table-name))
      (common-lisp:list
       (common-lisp:cons "TableName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'catalog-id))
      (common-lisp:list
       (common-lisp:cons "CatalogId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'connection-name))
      (common-lisp:list
       (common-lisp:cons "ConnectionName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'additional-options))
      (common-lisp:list
       (common-lisp:cons "AdditionalOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input glue-table))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype glue-table-additional-options () 'common-lisp:hash-table)
 (common-lisp:defun |make-glue-table-additional-options|
                    (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:progn
 (common-lisp:deftype glue-tables () '(trivial-types:proper-list glue-table))
 (common-lisp:defun |make-glue-tables|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list glue-table))
   aws-sdk/generator/shape::members))
(common-lisp:deftype glue-version-string () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (governed-catalog-source (:copier common-lisp:nil)
      (:conc-name "struct-shape-governed-catalog-source-"))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or node-name common-lisp:null))
   (database (common-lisp:error ":database is required") :type
    (common-lisp:or enclosed-in-string-property common-lisp:null))
   (table (common-lisp:error ":table is required") :type
    (common-lisp:or enclosed-in-string-property common-lisp:null))
   (partition-predicate common-lisp:nil :type
    (common-lisp:or enclosed-in-string-property common-lisp:null))
   (additional-options common-lisp:nil :type
    (common-lisp:or s3source-additional-options common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'governed-catalog-source 'make-governed-catalog-source))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          governed-catalog-source))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          governed-catalog-source))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'database))
      (common-lisp:list
       (common-lisp:cons "Database"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'table))
      (common-lisp:list
       (common-lisp:cons "Table"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'partition-predicate))
      (common-lisp:list
       (common-lisp:cons "PartitionPredicate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'additional-options))
      (common-lisp:list
       (common-lisp:cons "AdditionalOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          governed-catalog-source))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (governed-catalog-target (:copier common-lisp:nil)
      (:conc-name "struct-shape-governed-catalog-target-"))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or node-name common-lisp:null))
   (inputs (common-lisp:error ":inputs is required") :type
    (common-lisp:or one-input common-lisp:null))
   (partition-keys common-lisp:nil :type
    (common-lisp:or glue-studio-path-list common-lisp:null))
   (table (common-lisp:error ":table is required") :type
    (common-lisp:or enclosed-in-string-property common-lisp:null))
   (database (common-lisp:error ":database is required") :type
    (common-lisp:or enclosed-in-string-property common-lisp:null))
   (schema-change-policy common-lisp:nil :type
    (common-lisp:or catalog-schema-change-policy common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'governed-catalog-target 'make-governed-catalog-target))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          governed-catalog-target))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          governed-catalog-target))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'inputs))
      (common-lisp:list
       (common-lisp:cons "Inputs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'partition-keys))
      (common-lisp:list
       (common-lisp:cons "PartitionKeys"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'table))
      (common-lisp:list
       (common-lisp:cons "Table"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'database))
      (common-lisp:list
       (common-lisp:cons "Database"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'schema-change-policy))
      (common-lisp:list
       (common-lisp:cons "SchemaChangePolicy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          governed-catalog-target))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (grok-classifier (:copier common-lisp:nil)
      (:conc-name "struct-shape-grok-classifier-"))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or name-string common-lisp:null))
   (classification (common-lisp:error ":classification is required") :type
    (common-lisp:or classification common-lisp:null))
   (creation-time common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (last-updated common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (version common-lisp:nil :type (common-lisp:or version-id common-lisp:null))
   (grok-pattern (common-lisp:error ":grok-pattern is required") :type
    (common-lisp:or grok-pattern common-lisp:null))
   (custom-patterns common-lisp:nil :type
    (common-lisp:or custom-patterns common-lisp:null)))
 (common-lisp:export (common-lisp:list 'grok-classifier 'make-grok-classifier))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input grok-classifier))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input grok-classifier))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'classification))
      (common-lisp:list
       (common-lisp:cons "Classification"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-time))
      (common-lisp:list
       (common-lisp:cons "CreationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-updated))
      (common-lisp:list
       (common-lisp:cons "LastUpdated"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version))
      (common-lisp:list
       (common-lisp:cons "Version"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'grok-pattern))
      (common-lisp:list
       (common-lisp:cons "GrokPattern"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'custom-patterns))
      (common-lisp:list
       (common-lisp:cons "CustomPatterns"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input grok-classifier))
   common-lisp:nil))
(common-lisp:deftype grok-pattern () 'common-lisp:string)
(common-lisp:deftype hash-string () 'common-lisp:string)
(common-lisp:deftype hudi-target-compression-type () 'common-lisp:string)
(common-lisp:deftype id-string () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition idempotent-parameter-mismatch-exception
     (glue-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       idempotent-parameter-mismatch-exception-message)))
 (common-lisp:export
  (common-lisp:list 'idempotent-parameter-mismatch-exception
                    'idempotent-parameter-mismatch-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition illegal-blueprint-state-exception
     (glue-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       illegal-blueprint-state-exception-message)))
 (common-lisp:export
  (common-lisp:list 'illegal-blueprint-state-exception
                    'illegal-blueprint-state-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition illegal-session-state-exception
     (glue-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       illegal-session-state-exception-message)))
 (common-lisp:export
  (common-lisp:list 'illegal-session-state-exception
                    'illegal-session-state-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition illegal-workflow-state-exception
     (glue-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       illegal-workflow-state-exception-message)))
 (common-lisp:export
  (common-lisp:list 'illegal-workflow-state-exception
                    'illegal-workflow-state-exception-message)))
(common-lisp:progn
 (common-lisp:defstruct
     (import-catalog-to-glue-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-import-catalog-to-glue-request-"))
   (catalog-id common-lisp:nil :type
    (common-lisp:or catalog-id-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'import-catalog-to-glue-request
                    'make-import-catalog-to-glue-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          import-catalog-to-glue-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          import-catalog-to-glue-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'catalog-id))
      (common-lisp:list
       (common-lisp:cons "CatalogId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          import-catalog-to-glue-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (import-catalog-to-glue-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-import-catalog-to-glue-response-")))
 (common-lisp:export
  (common-lisp:list 'import-catalog-to-glue-response
                    'make-import-catalog-to-glue-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          import-catalog-to-glue-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          import-catalog-to-glue-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          import-catalog-to-glue-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (import-labels-task-run-properties (:copier common-lisp:nil)
      (:conc-name "struct-shape-import-labels-task-run-properties-"))
   (input-s3path common-lisp:nil :type
    (common-lisp:or uri-string common-lisp:null))
   (replace common-lisp:nil :type
    (common-lisp:or replace-boolean common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'import-labels-task-run-properties
                    'make-import-labels-task-run-properties))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          import-labels-task-run-properties))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          import-labels-task-run-properties))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'input-s3path))
      (common-lisp:list
       (common-lisp:cons "InputS3Path"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'replace))
      (common-lisp:list
       (common-lisp:cons "Replace"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          import-labels-task-run-properties))
   common-lisp:nil))
(common-lisp:deftype integer () 'common-lisp:integer)
(common-lisp:deftype integer-flag () 'common-lisp:integer)
(common-lisp:deftype integer-value () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:define-condition internal-service-exception
     (glue-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       internal-service-exception-message)))
 (common-lisp:export
  (common-lisp:list 'internal-service-exception
                    'internal-service-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition invalid-input-exception
     (glue-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       invalid-input-exception-message)))
 (common-lisp:export
  (common-lisp:list 'invalid-input-exception 'invalid-input-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition invalid-state-exception
     (glue-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       invalid-state-exception-message)))
 (common-lisp:export
  (common-lisp:list 'invalid-state-exception 'invalid-state-exception-message)))
(common-lisp:deftype is-version-valid () 'common-lisp:boolean)
(common-lisp:deftype jdbcconnection-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (jdbcconnector-options (:copier common-lisp:nil)
      (:conc-name "struct-shape-jdbcconnector-options-"))
   (filter-predicate common-lisp:nil :type
    (common-lisp:or enclosed-in-string-property common-lisp:null))
   (partition-column common-lisp:nil :type
    (common-lisp:or enclosed-in-string-property common-lisp:null))
   (lower-bound common-lisp:nil :type
    (common-lisp:or boxed-non-negative-long common-lisp:null))
   (upper-bound common-lisp:nil :type
    (common-lisp:or boxed-non-negative-long common-lisp:null))
   (num-partitions common-lisp:nil :type
    (common-lisp:or boxed-non-negative-long common-lisp:null))
   (job-bookmark-keys common-lisp:nil :type
    (common-lisp:or enclosed-in-string-properties common-lisp:null))
   (job-bookmark-keys-sort-order common-lisp:nil :type
    (common-lisp:or enclosed-in-string-property common-lisp:null))
   (data-type-mapping common-lisp:nil :type
    (common-lisp:or jdbcdata-type-mapping common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'jdbcconnector-options 'make-jdbcconnector-options))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          jdbcconnector-options))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          jdbcconnector-options))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filter-predicate))
      (common-lisp:list
       (common-lisp:cons "FilterPredicate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'partition-column))
      (common-lisp:list
       (common-lisp:cons "PartitionColumn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'lower-bound))
      (common-lisp:list
       (common-lisp:cons "LowerBound"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'upper-bound))
      (common-lisp:list
       (common-lisp:cons "UpperBound"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'num-partitions))
      (common-lisp:list
       (common-lisp:cons "NumPartitions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-bookmark-keys))
      (common-lisp:list
       (common-lisp:cons "JobBookmarkKeys"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'job-bookmark-keys-sort-order))
      (common-lisp:list
       (common-lisp:cons "JobBookmarkKeysSortOrder"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-type-mapping))
      (common-lisp:list
       (common-lisp:cons "DataTypeMapping"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          jdbcconnector-options))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (jdbcconnector-source (:copier common-lisp:nil)
      (:conc-name "struct-shape-jdbcconnector-source-"))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or node-name common-lisp:null))
   (connection-name (common-lisp:error ":connection-name is required") :type
    (common-lisp:or enclosed-in-string-property common-lisp:null))
   (connector-name (common-lisp:error ":connector-name is required") :type
    (common-lisp:or enclosed-in-string-property common-lisp:null))
   (connection-type (common-lisp:error ":connection-type is required") :type
    (common-lisp:or enclosed-in-string-property common-lisp:null))
   (additional-options common-lisp:nil :type
    (common-lisp:or jdbcconnector-options common-lisp:null))
   (connection-table common-lisp:nil :type
    (common-lisp:or enclosed-in-string-property-with-quote common-lisp:null))
   (query common-lisp:nil :type (common-lisp:or sql-query common-lisp:null))
   (output-schemas common-lisp:nil :type
    (common-lisp:or glue-schemas common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'jdbcconnector-source 'make-jdbcconnector-source))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input jdbcconnector-source))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input jdbcconnector-source))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'connection-name))
      (common-lisp:list
       (common-lisp:cons "ConnectionName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'connector-name))
      (common-lisp:list
       (common-lisp:cons "ConnectorName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'connection-type))
      (common-lisp:list
       (common-lisp:cons "ConnectionType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'additional-options))
      (common-lisp:list
       (common-lisp:cons "AdditionalOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'connection-table))
      (common-lisp:list
       (common-lisp:cons "ConnectionTable"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'query))
      (common-lisp:list
       (common-lisp:cons "Query"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'output-schemas))
      (common-lisp:list
       (common-lisp:cons "OutputSchemas"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input jdbcconnector-source))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (jdbcconnector-target (:copier common-lisp:nil)
      (:conc-name "struct-shape-jdbcconnector-target-"))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or node-name common-lisp:null))
   (inputs (common-lisp:error ":inputs is required") :type
    (common-lisp:or one-input common-lisp:null))
   (connection-name (common-lisp:error ":connection-name is required") :type
    (common-lisp:or enclosed-in-string-property common-lisp:null))
   (connection-table (common-lisp:error ":connection-table is required") :type
    (common-lisp:or enclosed-in-string-property-with-quote common-lisp:null))
   (connector-name (common-lisp:error ":connector-name is required") :type
    (common-lisp:or enclosed-in-string-property common-lisp:null))
   (connection-type (common-lisp:error ":connection-type is required") :type
    (common-lisp:or enclosed-in-string-property common-lisp:null))
   (additional-options common-lisp:nil :type
    (common-lisp:or additional-options common-lisp:null))
   (output-schemas common-lisp:nil :type
    (common-lisp:or glue-schemas common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'jdbcconnector-target 'make-jdbcconnector-target))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input jdbcconnector-target))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input jdbcconnector-target))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'inputs))
      (common-lisp:list
       (common-lisp:cons "Inputs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'connection-name))
      (common-lisp:list
       (common-lisp:cons "ConnectionName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'connection-table))
      (common-lisp:list
       (common-lisp:cons "ConnectionTable"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'connector-name))
      (common-lisp:list
       (common-lisp:cons "ConnectorName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'connection-type))
      (common-lisp:list
       (common-lisp:cons "ConnectionType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'additional-options))
      (common-lisp:list
       (common-lisp:cons "AdditionalOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'output-schemas))
      (common-lisp:list
       (common-lisp:cons "OutputSchemas"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input jdbcconnector-target))
   common-lisp:nil))
(common-lisp:deftype jdbcdata-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype jdbcdata-type-mapping () 'common-lisp:hash-table)
 (common-lisp:defun |make-jdbcdata-type-mapping|
                    (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:deftype jdbc-metadata-entry () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (jdbc-target (:copier common-lisp:nil)
      (:conc-name "struct-shape-jdbc-target-"))
   (connection-name common-lisp:nil :type
    (common-lisp:or connection-name common-lisp:null))
   (path common-lisp:nil :type (common-lisp:or path common-lisp:null))
   (exclusions common-lisp:nil :type
    (common-lisp:or path-list common-lisp:null))
   (enable-additional-metadata common-lisp:nil :type
    (common-lisp:or enable-additional-metadata common-lisp:null)))
 (common-lisp:export (common-lisp:list 'jdbc-target 'make-jdbc-target))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input jdbc-target))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input jdbc-target))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'connection-name))
      (common-lisp:list
       (common-lisp:cons "ConnectionName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'path))
      (common-lisp:list
       (common-lisp:cons "Path"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'exclusions))
      (common-lisp:list
       (common-lisp:cons "Exclusions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'enable-additional-metadata))
      (common-lisp:list
       (common-lisp:cons "EnableAdditionalMetadata"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input jdbc-target))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype jdbc-target-list ()
   '(trivial-types:proper-list jdbc-target))
 (common-lisp:defun |make-jdbc-target-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list jdbc-target))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (job (:copier common-lisp:nil) (:conc-name "struct-shape-job-"))
   (name common-lisp:nil :type (common-lisp:or name-string common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or description-string common-lisp:null))
   (log-uri common-lisp:nil :type (common-lisp:or uri-string common-lisp:null))
   (role common-lisp:nil :type (common-lisp:or role-string common-lisp:null))
   (created-on common-lisp:nil :type
    (common-lisp:or timestamp-value common-lisp:null))
   (last-modified-on common-lisp:nil :type
    (common-lisp:or timestamp-value common-lisp:null))
   (execution-property common-lisp:nil :type
    (common-lisp:or execution-property common-lisp:null))
   (command common-lisp:nil :type
    (common-lisp:or job-command common-lisp:null))
   (default-arguments common-lisp:nil :type
    (common-lisp:or generic-map common-lisp:null))
   (non-overridable-arguments common-lisp:nil :type
    (common-lisp:or generic-map common-lisp:null))
   (connections common-lisp:nil :type
    (common-lisp:or connections-list common-lisp:null))
   (max-retries common-lisp:nil :type
    (common-lisp:or max-retries common-lisp:null))
   (allocated-capacity common-lisp:nil :type
    (common-lisp:or integer-value common-lisp:null))
   (timeout common-lisp:nil :type (common-lisp:or timeout common-lisp:null))
   (max-capacity common-lisp:nil :type
    (common-lisp:or nullable-double common-lisp:null))
   (worker-type common-lisp:nil :type
    (common-lisp:or worker-type common-lisp:null))
   (number-of-workers common-lisp:nil :type
    (common-lisp:or nullable-integer common-lisp:null))
   (security-configuration common-lisp:nil :type
    (common-lisp:or name-string common-lisp:null))
   (notification-property common-lisp:nil :type
    (common-lisp:or notification-property common-lisp:null))
   (glue-version common-lisp:nil :type
    (common-lisp:or glue-version-string common-lisp:null))
   (code-gen-configuration-nodes common-lisp:nil :type
    (common-lisp:or code-gen-configuration-nodes common-lisp:null))
   (execution-class common-lisp:nil :type
    (common-lisp:or execution-class common-lisp:null))
   (source-control-details common-lisp:nil :type
    (common-lisp:or source-control-details common-lisp:null)))
 (common-lisp:export (common-lisp:list 'job 'make-job))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input job))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input job))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'log-uri))
      (common-lisp:list
       (common-lisp:cons "LogUri"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role))
      (common-lisp:list
       (common-lisp:cons "Role"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-on))
      (common-lisp:list
       (common-lisp:cons "CreatedOn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-modified-on))
      (common-lisp:list
       (common-lisp:cons "LastModifiedOn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'execution-property))
      (common-lisp:list
       (common-lisp:cons "ExecutionProperty"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'command))
      (common-lisp:list
       (common-lisp:cons "Command"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'default-arguments))
      (common-lisp:list
       (common-lisp:cons "DefaultArguments"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'non-overridable-arguments))
      (common-lisp:list
       (common-lisp:cons "NonOverridableArguments"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'connections))
      (common-lisp:list
       (common-lisp:cons "Connections"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-retries))
      (common-lisp:list
       (common-lisp:cons "MaxRetries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'allocated-capacity))
      (common-lisp:list
       (common-lisp:cons "AllocatedCapacity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'timeout))
      (common-lisp:list
       (common-lisp:cons "Timeout"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-capacity))
      (common-lisp:list
       (common-lisp:cons "MaxCapacity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'worker-type))
      (common-lisp:list
       (common-lisp:cons "WorkerType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'number-of-workers))
      (common-lisp:list
       (common-lisp:cons "NumberOfWorkers"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'security-configuration))
      (common-lisp:list
       (common-lisp:cons "SecurityConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'notification-property))
      (common-lisp:list
       (common-lisp:cons "NotificationProperty"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'glue-version))
      (common-lisp:list
       (common-lisp:cons "GlueVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'code-gen-configuration-nodes))
      (common-lisp:list
       (common-lisp:cons "CodeGenConfigurationNodes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'execution-class))
      (common-lisp:list
       (common-lisp:cons "ExecutionClass"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'source-control-details))
      (common-lisp:list
       (common-lisp:cons "SourceControlDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input job))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (job-bookmark-entry (:copier common-lisp:nil)
      (:conc-name "struct-shape-job-bookmark-entry-"))
   (job-name common-lisp:nil :type (common-lisp:or job-name common-lisp:null))
   (version common-lisp:nil :type
    (common-lisp:or integer-value common-lisp:null))
   (run common-lisp:nil :type (common-lisp:or integer-value common-lisp:null))
   (attempt common-lisp:nil :type
    (common-lisp:or integer-value common-lisp:null))
   (previous-run-id common-lisp:nil :type
    (common-lisp:or run-id common-lisp:null))
   (run-id common-lisp:nil :type (common-lisp:or run-id common-lisp:null))
   (job-bookmark common-lisp:nil :type
    (common-lisp:or json-value common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'job-bookmark-entry 'make-job-bookmark-entry))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input job-bookmark-entry))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input job-bookmark-entry))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-name))
      (common-lisp:list
       (common-lisp:cons "JobName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version))
      (common-lisp:list
       (common-lisp:cons "Version"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'run))
      (common-lisp:list
       (common-lisp:cons "Run"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'attempt))
      (common-lisp:list
       (common-lisp:cons "Attempt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'previous-run-id))
      (common-lisp:list
       (common-lisp:cons "PreviousRunId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'run-id))
      (common-lisp:list
       (common-lisp:cons "RunId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-bookmark))
      (common-lisp:list
       (common-lisp:cons "JobBookmark"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input job-bookmark-entry))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (job-bookmarks-encryption (:copier common-lisp:nil)
      (:conc-name "struct-shape-job-bookmarks-encryption-"))
   (job-bookmarks-encryption-mode common-lisp:nil :type
    (common-lisp:or job-bookmarks-encryption-mode common-lisp:null))
   (kms-key-arn common-lisp:nil :type
    (common-lisp:or kms-key-arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'job-bookmarks-encryption 'make-job-bookmarks-encryption))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          job-bookmarks-encryption))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          job-bookmarks-encryption))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'job-bookmarks-encryption-mode))
      (common-lisp:list
       (common-lisp:cons "JobBookmarksEncryptionMode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kms-key-arn))
      (common-lisp:list
       (common-lisp:cons "KmsKeyArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          job-bookmarks-encryption))
   common-lisp:nil))
(common-lisp:deftype job-bookmarks-encryption-mode () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (job-command (:copier common-lisp:nil)
      (:conc-name "struct-shape-job-command-"))
   (name common-lisp:nil :type
    (common-lisp:or generic-string common-lisp:null))
   (script-location common-lisp:nil :type
    (common-lisp:or script-location-string common-lisp:null))
   (python-version common-lisp:nil :type
    (common-lisp:or python-version-string common-lisp:null)))
 (common-lisp:export (common-lisp:list 'job-command 'make-job-command))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input job-command))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input job-command))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'script-location))
      (common-lisp:list
       (common-lisp:cons "ScriptLocation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'python-version))
      (common-lisp:list
       (common-lisp:cons "PythonVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input job-command))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype job-list () '(trivial-types:proper-list job))
 (common-lisp:defun |make-job-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list job))
   aws-sdk/generator/shape::members))
(common-lisp:deftype job-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype job-name-list ()
   '(trivial-types:proper-list name-string))
 (common-lisp:defun |make-job-name-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list name-string))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (job-node-details (:copier common-lisp:nil)
      (:conc-name "struct-shape-job-node-details-"))
   (job-runs common-lisp:nil :type
    (common-lisp:or job-run-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'job-node-details 'make-job-node-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input job-node-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input job-node-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-runs))
      (common-lisp:list
       (common-lisp:cons "JobRuns"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input job-node-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (job-run (:copier common-lisp:nil) (:conc-name "struct-shape-job-run-"))
   (id common-lisp:nil :type (common-lisp:or id-string common-lisp:null))
   (attempt common-lisp:nil :type
    (common-lisp:or attempt-count common-lisp:null))
   (previous-run-id common-lisp:nil :type
    (common-lisp:or id-string common-lisp:null))
   (trigger-name common-lisp:nil :type
    (common-lisp:or name-string common-lisp:null))
   (job-name common-lisp:nil :type
    (common-lisp:or name-string common-lisp:null))
   (started-on common-lisp:nil :type
    (common-lisp:or timestamp-value common-lisp:null))
   (last-modified-on common-lisp:nil :type
    (common-lisp:or timestamp-value common-lisp:null))
   (completed-on common-lisp:nil :type
    (common-lisp:or timestamp-value common-lisp:null))
   (job-run-state common-lisp:nil :type
    (common-lisp:or job-run-state common-lisp:null))
   (arguments common-lisp:nil :type
    (common-lisp:or generic-map common-lisp:null))
   (error-message common-lisp:nil :type
    (common-lisp:or error-string common-lisp:null))
   (predecessor-runs common-lisp:nil :type
    (common-lisp:or predecessor-list common-lisp:null))
   (allocated-capacity common-lisp:nil :type
    (common-lisp:or integer-value common-lisp:null))
   (execution-time common-lisp:nil :type
    (common-lisp:or execution-time common-lisp:null))
   (timeout common-lisp:nil :type (common-lisp:or timeout common-lisp:null))
   (max-capacity common-lisp:nil :type
    (common-lisp:or nullable-double common-lisp:null))
   (worker-type common-lisp:nil :type
    (common-lisp:or worker-type common-lisp:null))
   (number-of-workers common-lisp:nil :type
    (common-lisp:or nullable-integer common-lisp:null))
   (security-configuration common-lisp:nil :type
    (common-lisp:or name-string common-lisp:null))
   (log-group-name common-lisp:nil :type
    (common-lisp:or generic-string common-lisp:null))
   (notification-property common-lisp:nil :type
    (common-lisp:or notification-property common-lisp:null))
   (glue-version common-lisp:nil :type
    (common-lisp:or glue-version-string common-lisp:null))
   (dpuseconds common-lisp:nil :type
    (common-lisp:or nullable-double common-lisp:null))
   (execution-class common-lisp:nil :type
    (common-lisp:or execution-class common-lisp:null)))
 (common-lisp:export (common-lisp:list 'job-run 'make-job-run))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input job-run))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input job-run))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'attempt))
      (common-lisp:list
       (common-lisp:cons "Attempt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'previous-run-id))
      (common-lisp:list
       (common-lisp:cons "PreviousRunId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'trigger-name))
      (common-lisp:list
       (common-lisp:cons "TriggerName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-name))
      (common-lisp:list
       (common-lisp:cons "JobName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'started-on))
      (common-lisp:list
       (common-lisp:cons "StartedOn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-modified-on))
      (common-lisp:list
       (common-lisp:cons "LastModifiedOn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'completed-on))
      (common-lisp:list
       (common-lisp:cons "CompletedOn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-run-state))
      (common-lisp:list
       (common-lisp:cons "JobRunState"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arguments))
      (common-lisp:list
       (common-lisp:cons "Arguments"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error-message))
      (common-lisp:list
       (common-lisp:cons "ErrorMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'predecessor-runs))
      (common-lisp:list
       (common-lisp:cons "PredecessorRuns"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'allocated-capacity))
      (common-lisp:list
       (common-lisp:cons "AllocatedCapacity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'execution-time))
      (common-lisp:list
       (common-lisp:cons "ExecutionTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'timeout))
      (common-lisp:list
       (common-lisp:cons "Timeout"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-capacity))
      (common-lisp:list
       (common-lisp:cons "MaxCapacity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'worker-type))
      (common-lisp:list
       (common-lisp:cons "WorkerType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'number-of-workers))
      (common-lisp:list
       (common-lisp:cons "NumberOfWorkers"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'security-configuration))
      (common-lisp:list
       (common-lisp:cons "SecurityConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'log-group-name))
      (common-lisp:list
       (common-lisp:cons "LogGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'notification-property))
      (common-lisp:list
       (common-lisp:cons "NotificationProperty"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'glue-version))
      (common-lisp:list
       (common-lisp:cons "GlueVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dpuseconds))
      (common-lisp:list
       (common-lisp:cons "DPUSeconds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'execution-class))
      (common-lisp:list
       (common-lisp:cons "ExecutionClass"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input job-run))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype job-run-list () '(trivial-types:proper-list job-run))
 (common-lisp:defun |make-job-run-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list job-run))
   aws-sdk/generator/shape::members))
(common-lisp:deftype job-run-state () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (job-update (:copier common-lisp:nil)
      (:conc-name "struct-shape-job-update-"))
   (description common-lisp:nil :type
    (common-lisp:or description-string common-lisp:null))
   (log-uri common-lisp:nil :type (common-lisp:or uri-string common-lisp:null))
   (role common-lisp:nil :type (common-lisp:or role-string common-lisp:null))
   (execution-property common-lisp:nil :type
    (common-lisp:or execution-property common-lisp:null))
   (command common-lisp:nil :type
    (common-lisp:or job-command common-lisp:null))
   (default-arguments common-lisp:nil :type
    (common-lisp:or generic-map common-lisp:null))
   (non-overridable-arguments common-lisp:nil :type
    (common-lisp:or generic-map common-lisp:null))
   (connections common-lisp:nil :type
    (common-lisp:or connections-list common-lisp:null))
   (max-retries common-lisp:nil :type
    (common-lisp:or max-retries common-lisp:null))
   (allocated-capacity common-lisp:nil :type
    (common-lisp:or integer-value common-lisp:null))
   (timeout common-lisp:nil :type (common-lisp:or timeout common-lisp:null))
   (max-capacity common-lisp:nil :type
    (common-lisp:or nullable-double common-lisp:null))
   (worker-type common-lisp:nil :type
    (common-lisp:or worker-type common-lisp:null))
   (number-of-workers common-lisp:nil :type
    (common-lisp:or nullable-integer common-lisp:null))
   (security-configuration common-lisp:nil :type
    (common-lisp:or name-string common-lisp:null))
   (notification-property common-lisp:nil :type
    (common-lisp:or notification-property common-lisp:null))
   (glue-version common-lisp:nil :type
    (common-lisp:or glue-version-string common-lisp:null))
   (code-gen-configuration-nodes common-lisp:nil :type
    (common-lisp:or code-gen-configuration-nodes common-lisp:null))
   (execution-class common-lisp:nil :type
    (common-lisp:or execution-class common-lisp:null))
   (source-control-details common-lisp:nil :type
    (common-lisp:or source-control-details common-lisp:null)))
 (common-lisp:export (common-lisp:list 'job-update 'make-job-update))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input job-update))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input job-update))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'log-uri))
      (common-lisp:list
       (common-lisp:cons "LogUri"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role))
      (common-lisp:list
       (common-lisp:cons "Role"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'execution-property))
      (common-lisp:list
       (common-lisp:cons "ExecutionProperty"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'command))
      (common-lisp:list
       (common-lisp:cons "Command"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'default-arguments))
      (common-lisp:list
       (common-lisp:cons "DefaultArguments"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'non-overridable-arguments))
      (common-lisp:list
       (common-lisp:cons "NonOverridableArguments"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'connections))
      (common-lisp:list
       (common-lisp:cons "Connections"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-retries))
      (common-lisp:list
       (common-lisp:cons "MaxRetries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'allocated-capacity))
      (common-lisp:list
       (common-lisp:cons "AllocatedCapacity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'timeout))
      (common-lisp:list
       (common-lisp:cons "Timeout"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-capacity))
      (common-lisp:list
       (common-lisp:cons "MaxCapacity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'worker-type))
      (common-lisp:list
       (common-lisp:cons "WorkerType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'number-of-workers))
      (common-lisp:list
       (common-lisp:cons "NumberOfWorkers"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'security-configuration))
      (common-lisp:list
       (common-lisp:cons "SecurityConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'notification-property))
      (common-lisp:list
       (common-lisp:cons "NotificationProperty"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'glue-version))
      (common-lisp:list
       (common-lisp:cons "GlueVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'code-gen-configuration-nodes))
      (common-lisp:list
       (common-lisp:cons "CodeGenConfigurationNodes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'execution-class))
      (common-lisp:list
       (common-lisp:cons "ExecutionClass"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'source-control-details))
      (common-lisp:list
       (common-lisp:cons "SourceControlDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input job-update))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (join (:copier common-lisp:nil) (:conc-name "struct-shape-join-"))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or node-name common-lisp:null))
   (inputs (common-lisp:error ":inputs is required") :type
    (common-lisp:or two-inputs common-lisp:null))
   (join-type (common-lisp:error ":join-type is required") :type
    (common-lisp:or join-type common-lisp:null))
   (columns (common-lisp:error ":columns is required") :type
    (common-lisp:or join-columns common-lisp:null)))
 (common-lisp:export (common-lisp:list 'join 'make-join))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input join))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input join))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'inputs))
      (common-lisp:list
       (common-lisp:cons "Inputs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'join-type))
      (common-lisp:list
       (common-lisp:cons "JoinType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'columns))
      (common-lisp:list
       (common-lisp:cons "Columns"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input join))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (join-column (:copier common-lisp:nil)
      (:conc-name "struct-shape-join-column-"))
   (from (common-lisp:error ":from is required") :type
    (common-lisp:or enclosed-in-string-property common-lisp:null))
   (keys (common-lisp:error ":keys is required") :type
    (common-lisp:or glue-studio-path-list common-lisp:null)))
 (common-lisp:export (common-lisp:list 'join-column 'make-join-column))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input join-column))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input join-column))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'from))
      (common-lisp:list
       (common-lisp:cons "From"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'keys))
      (common-lisp:list
       (common-lisp:cons "Keys"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input join-column))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype join-columns () '(trivial-types:proper-list join-column))
 (common-lisp:defun |make-join-columns|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list join-column))
   aws-sdk/generator/shape::members))
(common-lisp:deftype join-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (json-classifier (:copier common-lisp:nil)
      (:conc-name "struct-shape-json-classifier-"))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or name-string common-lisp:null))
   (creation-time common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (last-updated common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (version common-lisp:nil :type (common-lisp:or version-id common-lisp:null))
   (json-path (common-lisp:error ":json-path is required") :type
    (common-lisp:or json-path common-lisp:null)))
 (common-lisp:export (common-lisp:list 'json-classifier 'make-json-classifier))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input json-classifier))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input json-classifier))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-time))
      (common-lisp:list
       (common-lisp:cons "CreationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-updated))
      (common-lisp:list
       (common-lisp:cons "LastUpdated"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version))
      (common-lisp:list
       (common-lisp:cons "Version"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'json-path))
      (common-lisp:list
       (common-lisp:cons "JsonPath"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input json-classifier))
   common-lisp:nil))
(common-lisp:deftype json-path () 'common-lisp:string)
(common-lisp:deftype json-value () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (kafka-streaming-source-options (:copier common-lisp:nil)
      (:conc-name "struct-shape-kafka-streaming-source-options-"))
   (bootstrap-servers common-lisp:nil :type
    (common-lisp:or enclosed-in-string-property common-lisp:null))
   (security-protocol common-lisp:nil :type
    (common-lisp:or enclosed-in-string-property common-lisp:null))
   (connection-name common-lisp:nil :type
    (common-lisp:or enclosed-in-string-property common-lisp:null))
   (topic-name common-lisp:nil :type
    (common-lisp:or enclosed-in-string-property common-lisp:null))
   (assign common-lisp:nil :type
    (common-lisp:or enclosed-in-string-property common-lisp:null))
   (subscribe-pattern common-lisp:nil :type
    (common-lisp:or enclosed-in-string-property common-lisp:null))
   (classification common-lisp:nil :type
    (common-lisp:or enclosed-in-string-property common-lisp:null))
   (delimiter common-lisp:nil :type
    (common-lisp:or enclosed-in-string-property common-lisp:null))
   (starting-offsets common-lisp:nil :type
    (common-lisp:or enclosed-in-string-property common-lisp:null))
   (ending-offsets common-lisp:nil :type
    (common-lisp:or enclosed-in-string-property common-lisp:null))
   (poll-timeout-ms common-lisp:nil :type
    (common-lisp:or boxed-non-negative-long common-lisp:null))
   (num-retries common-lisp:nil :type
    (common-lisp:or boxed-non-negative-int common-lisp:null))
   (retry-interval-ms common-lisp:nil :type
    (common-lisp:or boxed-non-negative-long common-lisp:null))
   (max-offsets-per-trigger common-lisp:nil :type
    (common-lisp:or boxed-non-negative-long common-lisp:null))
   (min-partitions common-lisp:nil :type
    (common-lisp:or boxed-non-negative-int common-lisp:null))
   (include-headers common-lisp:nil :type
    (common-lisp:or boxed-boolean common-lisp:null))
   (add-record-timestamp common-lisp:nil :type
    (common-lisp:or enclosed-in-string-property common-lisp:null))
   (emit-consumer-lag-metrics common-lisp:nil :type
    (common-lisp:or enclosed-in-string-property common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'kafka-streaming-source-options
                    'make-kafka-streaming-source-options))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          kafka-streaming-source-options))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          kafka-streaming-source-options))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bootstrap-servers))
      (common-lisp:list
       (common-lisp:cons "BootstrapServers"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'security-protocol))
      (common-lisp:list
       (common-lisp:cons "SecurityProtocol"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'connection-name))
      (common-lisp:list
       (common-lisp:cons "ConnectionName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'topic-name))
      (common-lisp:list
       (common-lisp:cons "TopicName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'assign))
      (common-lisp:list
       (common-lisp:cons "Assign"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subscribe-pattern))
      (common-lisp:list
       (common-lisp:cons "SubscribePattern"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'classification))
      (common-lisp:list
       (common-lisp:cons "Classification"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'delimiter))
      (common-lisp:list
       (common-lisp:cons "Delimiter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'starting-offsets))
      (common-lisp:list
       (common-lisp:cons "StartingOffsets"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ending-offsets))
      (common-lisp:list
       (common-lisp:cons "EndingOffsets"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'poll-timeout-ms))
      (common-lisp:list
       (common-lisp:cons "PollTimeoutMs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'num-retries))
      (common-lisp:list
       (common-lisp:cons "NumRetries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'retry-interval-ms))
      (common-lisp:list
       (common-lisp:cons "RetryIntervalMs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'max-offsets-per-trigger))
      (common-lisp:list
       (common-lisp:cons "MaxOffsetsPerTrigger"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'min-partitions))
      (common-lisp:list
       (common-lisp:cons "MinPartitions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'include-headers))
      (common-lisp:list
       (common-lisp:cons "IncludeHeaders"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'add-record-timestamp))
      (common-lisp:list
       (common-lisp:cons "AddRecordTimestamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'emit-consumer-lag-metrics))
      (common-lisp:list
       (common-lisp:cons "EmitConsumerLagMetrics"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          kafka-streaming-source-options))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype key-list () '(trivial-types:proper-list name-string))
 (common-lisp:defun |make-key-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list name-string))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (key-schema-element (:copier common-lisp:nil)
      (:conc-name "struct-shape-key-schema-element-"))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or name-string common-lisp:null))
   (type (common-lisp:error ":type is required") :type
    (common-lisp:or column-type-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'key-schema-element 'make-key-schema-element))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input key-schema-element))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input key-schema-element))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input key-schema-element))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype key-schema-element-list ()
   '(trivial-types:proper-list key-schema-element))
 (common-lisp:defun |make-key-schema-element-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list key-schema-element))
   aws-sdk/generator/shape::members))
(common-lisp:deftype key-string () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (kinesis-streaming-source-options (:copier common-lisp:nil)
      (:conc-name "struct-shape-kinesis-streaming-source-options-"))
   (endpoint-url common-lisp:nil :type
    (common-lisp:or enclosed-in-string-property common-lisp:null))
   (stream-name common-lisp:nil :type
    (common-lisp:or enclosed-in-string-property common-lisp:null))
   (classification common-lisp:nil :type
    (common-lisp:or enclosed-in-string-property common-lisp:null))
   (delimiter common-lisp:nil :type
    (common-lisp:or enclosed-in-string-property common-lisp:null))
   (starting-position common-lisp:nil :type
    (common-lisp:or starting-position common-lisp:null))
   (max-fetch-time-in-ms common-lisp:nil :type
    (common-lisp:or boxed-non-negative-long common-lisp:null))
   (max-fetch-records-per-shard common-lisp:nil :type
    (common-lisp:or boxed-non-negative-long common-lisp:null))
   (max-record-per-read common-lisp:nil :type
    (common-lisp:or boxed-non-negative-long common-lisp:null))
   (add-idle-time-between-reads common-lisp:nil :type
    (common-lisp:or boxed-boolean common-lisp:null))
   (idle-time-between-reads-in-ms common-lisp:nil :type
    (common-lisp:or boxed-non-negative-long common-lisp:null))
   (describe-shard-interval common-lisp:nil :type
    (common-lisp:or boxed-non-negative-long common-lisp:null))
   (num-retries common-lisp:nil :type
    (common-lisp:or boxed-non-negative-int common-lisp:null))
   (retry-interval-ms common-lisp:nil :type
    (common-lisp:or boxed-non-negative-long common-lisp:null))
   (max-retry-interval-ms common-lisp:nil :type
    (common-lisp:or boxed-non-negative-long common-lisp:null))
   (avoid-empty-batches common-lisp:nil :type
    (common-lisp:or boxed-boolean common-lisp:null))
   (stream-arn common-lisp:nil :type
    (common-lisp:or enclosed-in-string-property common-lisp:null))
   (role-arn common-lisp:nil :type
    (common-lisp:or enclosed-in-string-property common-lisp:null))
   (role-session-name common-lisp:nil :type
    (common-lisp:or enclosed-in-string-property common-lisp:null))
   (add-record-timestamp common-lisp:nil :type
    (common-lisp:or enclosed-in-string-property common-lisp:null))
   (emit-consumer-lag-metrics common-lisp:nil :type
    (common-lisp:or enclosed-in-string-property common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'kinesis-streaming-source-options
                    'make-kinesis-streaming-source-options))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          kinesis-streaming-source-options))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          kinesis-streaming-source-options))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'endpoint-url))
      (common-lisp:list
       (common-lisp:cons "EndpointUrl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stream-name))
      (common-lisp:list
       (common-lisp:cons "StreamName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'classification))
      (common-lisp:list
       (common-lisp:cons "Classification"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'delimiter))
      (common-lisp:list
       (common-lisp:cons "Delimiter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'starting-position))
      (common-lisp:list
       (common-lisp:cons "StartingPosition"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'max-fetch-time-in-ms))
      (common-lisp:list
       (common-lisp:cons "MaxFetchTimeInMs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'max-fetch-records-per-shard))
      (common-lisp:list
       (common-lisp:cons "MaxFetchRecordsPerShard"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-record-per-read))
      (common-lisp:list
       (common-lisp:cons "MaxRecordPerRead"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'add-idle-time-between-reads))
      (common-lisp:list
       (common-lisp:cons "AddIdleTimeBetweenReads"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'idle-time-between-reads-in-ms))
      (common-lisp:list
       (common-lisp:cons "IdleTimeBetweenReadsInMs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'describe-shard-interval))
      (common-lisp:list
       (common-lisp:cons "DescribeShardInterval"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'num-retries))
      (common-lisp:list
       (common-lisp:cons "NumRetries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'retry-interval-ms))
      (common-lisp:list
       (common-lisp:cons "RetryIntervalMs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'max-retry-interval-ms))
      (common-lisp:list
       (common-lisp:cons "MaxRetryIntervalMs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'avoid-empty-batches))
      (common-lisp:list
       (common-lisp:cons "AvoidEmptyBatches"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stream-arn))
      (common-lisp:list
       (common-lisp:cons "StreamArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "RoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-session-name))
      (common-lisp:list
       (common-lisp:cons "RoleSessionName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'add-record-timestamp))
      (common-lisp:list
       (common-lisp:cons "AddRecordTimestamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'emit-consumer-lag-metrics))
      (common-lisp:list
       (common-lisp:cons "EmitConsumerLagMetrics"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          kinesis-streaming-source-options))
   common-lisp:nil))
(common-lisp:deftype kms-key-arn () 'common-lisp:string)
(common-lisp:deftype label-count () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defstruct
     (labeling-set-generation-task-run-properties (:copier common-lisp:nil)
      (:conc-name "struct-shape-labeling-set-generation-task-run-properties-"))
   (output-s3path common-lisp:nil :type
    (common-lisp:or uri-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'labeling-set-generation-task-run-properties
                    'make-labeling-set-generation-task-run-properties))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          labeling-set-generation-task-run-properties))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          labeling-set-generation-task-run-properties))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'output-s3path))
      (common-lisp:list
       (common-lisp:cons "OutputS3Path"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          labeling-set-generation-task-run-properties))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (lake-formation-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-lake-formation-configuration-"))
   (use-lake-formation-credentials common-lisp:nil :type
    (common-lisp:or nullable-boolean common-lisp:null))
   (account-id common-lisp:nil :type
    (common-lisp:or account-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'lake-formation-configuration
                    'make-lake-formation-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          lake-formation-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          lake-formation-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'use-lake-formation-credentials))
      (common-lisp:list
       (common-lisp:cons "UseLakeFormationCredentials"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-id))
      (common-lisp:list
       (common-lisp:cons "AccountId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          lake-formation-configuration))
   common-lisp:nil))
(common-lisp:deftype language () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (last-active-definition (:copier common-lisp:nil)
      (:conc-name "struct-shape-last-active-definition-"))
   (description common-lisp:nil :type
    (common-lisp:or generic512char-string common-lisp:null))
   (last-modified-on common-lisp:nil :type
    (common-lisp:or timestamp-value common-lisp:null))
   (parameter-spec common-lisp:nil :type
    (common-lisp:or blueprint-parameter-spec common-lisp:null))
   (blueprint-location common-lisp:nil :type
    (common-lisp:or generic-string common-lisp:null))
   (blueprint-service-location common-lisp:nil :type
    (common-lisp:or generic-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'last-active-definition 'make-last-active-definition))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          last-active-definition))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          last-active-definition))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-modified-on))
      (common-lisp:list
       (common-lisp:cons "LastModifiedOn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'parameter-spec))
      (common-lisp:list
       (common-lisp:cons "ParameterSpec"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'blueprint-location))
      (common-lisp:list
       (common-lisp:cons "BlueprintLocation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'blueprint-service-location))
      (common-lisp:list
       (common-lisp:cons "BlueprintServiceLocation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          last-active-definition))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (last-crawl-info (:copier common-lisp:nil)
      (:conc-name "struct-shape-last-crawl-info-"))
   (status common-lisp:nil :type
    (common-lisp:or last-crawl-status common-lisp:null))
   (error-message common-lisp:nil :type
    (common-lisp:or description-string common-lisp:null))
   (log-group common-lisp:nil :type
    (common-lisp:or log-group common-lisp:null))
   (log-stream common-lisp:nil :type
    (common-lisp:or log-stream common-lisp:null))
   (message-prefix common-lisp:nil :type
    (common-lisp:or message-prefix common-lisp:null))
   (start-time common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null)))
 (common-lisp:export (common-lisp:list 'last-crawl-info 'make-last-crawl-info))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input last-crawl-info))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input last-crawl-info))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error-message))
      (common-lisp:list
       (common-lisp:cons "ErrorMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'log-group))
      (common-lisp:list
       (common-lisp:cons "LogGroup"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'log-stream))
      (common-lisp:list
       (common-lisp:cons "LogStream"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message-prefix))
      (common-lisp:list
       (common-lisp:cons "MessagePrefix"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start-time))
      (common-lisp:list
       (common-lisp:cons "StartTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input last-crawl-info))
   common-lisp:nil))
(common-lisp:deftype last-crawl-status () 'common-lisp:string)
(common-lisp:deftype latest-schema-version-boolean () 'common-lisp:boolean)
(common-lisp:progn
 (common-lisp:deftype limited-path-list ()
   '(trivial-types:proper-list limited-string-list))
 (common-lisp:defun |make-limited-path-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list limited-string-list))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype limited-string-list ()
   '(trivial-types:proper-list generic-limited-string))
 (common-lisp:defun |make-limited-string-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list generic-limited-string))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (lineage-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-lineage-configuration-"))
   (crawler-lineage-settings common-lisp:nil :type
    (common-lisp:or crawler-lineage-settings common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'lineage-configuration 'make-lineage-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          lineage-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          lineage-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'crawler-lineage-settings))
      (common-lisp:list
       (common-lisp:cons "CrawlerLineageSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          lineage-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-blueprints-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-blueprints-request-"))
   (next-token common-lisp:nil :type
    (common-lisp:or generic-string common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or page-size common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tags-map common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-blueprints-request 'make-list-blueprints-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-blueprints-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-blueprints-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-blueprints-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-blueprints-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-blueprints-response-"))
   (blueprints common-lisp:nil :type
    (common-lisp:or blueprint-names common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or generic-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-blueprints-response 'make-list-blueprints-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-blueprints-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-blueprints-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'blueprints))
      (common-lisp:list
       (common-lisp:cons "Blueprints"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-blueprints-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-crawlers-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-crawlers-request-"))
   (max-results common-lisp:nil :type
    (common-lisp:or page-size common-lisp:null))
   (next-token common-lisp:nil :type (common-lisp:or token common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tags-map common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-crawlers-request 'make-list-crawlers-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-crawlers-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-crawlers-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-crawlers-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-crawlers-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-crawlers-response-"))
   (crawler-names common-lisp:nil :type
    (common-lisp:or crawler-name-list common-lisp:null))
   (next-token common-lisp:nil :type (common-lisp:or token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-crawlers-response 'make-list-crawlers-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-crawlers-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-crawlers-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'crawler-names))
      (common-lisp:list
       (common-lisp:cons "CrawlerNames"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-crawlers-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-crawls-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-crawls-request-"))
   (crawler-name (common-lisp:error ":crawler-name is required") :type
    (common-lisp:or name-string common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or page-size common-lisp:null))
   (filters common-lisp:nil :type
    (common-lisp:or crawls-filter-list common-lisp:null))
   (next-token common-lisp:nil :type (common-lisp:or token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-crawls-request 'make-list-crawls-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-crawls-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-crawls-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'crawler-name))
      (common-lisp:list
       (common-lisp:cons "CrawlerName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filters))
      (common-lisp:list
       (common-lisp:cons "Filters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-crawls-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-crawls-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-crawls-response-"))
   (crawls common-lisp:nil :type
    (common-lisp:or crawler-history-list common-lisp:null))
   (next-token common-lisp:nil :type (common-lisp:or token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-crawls-response 'make-list-crawls-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-crawls-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-crawls-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'crawls))
      (common-lisp:list
       (common-lisp:cons "Crawls"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-crawls-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-custom-entity-types-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-custom-entity-types-request-"))
   (next-token common-lisp:nil :type
    (common-lisp:or pagination-token common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or page-size common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-custom-entity-types-request
                    'make-list-custom-entity-types-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-custom-entity-types-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-custom-entity-types-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-custom-entity-types-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-custom-entity-types-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-custom-entity-types-response-"))
   (custom-entity-types common-lisp:nil :type
    (common-lisp:or custom-entity-types common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or pagination-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-custom-entity-types-response
                    'make-list-custom-entity-types-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-custom-entity-types-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-custom-entity-types-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'custom-entity-types))
      (common-lisp:list
       (common-lisp:cons "CustomEntityTypes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-custom-entity-types-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-data-quality-results-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-data-quality-results-request-"))
   (filter common-lisp:nil :type
    (common-lisp:or data-quality-result-filter-criteria common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or pagination-token common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or page-size common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-data-quality-results-request
                    'make-list-data-quality-results-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-data-quality-results-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-data-quality-results-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filter))
      (common-lisp:list
       (common-lisp:cons "Filter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-data-quality-results-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-data-quality-results-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-data-quality-results-response-"))
   (results (common-lisp:error ":results is required") :type
    (common-lisp:or data-quality-result-description-list common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or pagination-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-data-quality-results-response
                    'make-list-data-quality-results-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-data-quality-results-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-data-quality-results-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'results))
      (common-lisp:list
       (common-lisp:cons "Results"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-data-quality-results-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-data-quality-rule-recommendation-runs-request
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-list-data-quality-rule-recommendation-runs-request-"))
   (filter common-lisp:nil :type
    (common-lisp:or data-quality-rule-recommendation-run-filter
                    common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or pagination-token common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or page-size common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-data-quality-rule-recommendation-runs-request
                    'make-list-data-quality-rule-recommendation-runs-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-data-quality-rule-recommendation-runs-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-data-quality-rule-recommendation-runs-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filter))
      (common-lisp:list
       (common-lisp:cons "Filter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-data-quality-rule-recommendation-runs-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-data-quality-rule-recommendation-runs-response
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-list-data-quality-rule-recommendation-runs-response-"))
   (runs common-lisp:nil :type
    (common-lisp:or data-quality-rule-recommendation-run-list
                    common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or pagination-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-data-quality-rule-recommendation-runs-response
                    'make-list-data-quality-rule-recommendation-runs-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-data-quality-rule-recommendation-runs-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-data-quality-rule-recommendation-runs-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'runs))
      (common-lisp:list
       (common-lisp:cons "Runs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-data-quality-rule-recommendation-runs-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-data-quality-ruleset-evaluation-runs-request
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-list-data-quality-ruleset-evaluation-runs-request-"))
   (filter common-lisp:nil :type
    (common-lisp:or data-quality-ruleset-evaluation-run-filter
                    common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or pagination-token common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or page-size common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-data-quality-ruleset-evaluation-runs-request
                    'make-list-data-quality-ruleset-evaluation-runs-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-data-quality-ruleset-evaluation-runs-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-data-quality-ruleset-evaluation-runs-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filter))
      (common-lisp:list
       (common-lisp:cons "Filter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-data-quality-ruleset-evaluation-runs-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-data-quality-ruleset-evaluation-runs-response
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-list-data-quality-ruleset-evaluation-runs-response-"))
   (runs common-lisp:nil :type
    (common-lisp:or data-quality-ruleset-evaluation-run-list common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or pagination-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-data-quality-ruleset-evaluation-runs-response
                    'make-list-data-quality-ruleset-evaluation-runs-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-data-quality-ruleset-evaluation-runs-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-data-quality-ruleset-evaluation-runs-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'runs))
      (common-lisp:list
       (common-lisp:cons "Runs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-data-quality-ruleset-evaluation-runs-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-data-quality-rulesets-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-data-quality-rulesets-request-"))
   (next-token common-lisp:nil :type
    (common-lisp:or pagination-token common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or page-size common-lisp:null))
   (filter common-lisp:nil :type
    (common-lisp:or data-quality-ruleset-filter-criteria common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tags-map common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-data-quality-rulesets-request
                    'make-list-data-quality-rulesets-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-data-quality-rulesets-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-data-quality-rulesets-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filter))
      (common-lisp:list
       (common-lisp:cons "Filter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-data-quality-rulesets-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-data-quality-rulesets-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-data-quality-rulesets-response-"))
   (rulesets common-lisp:nil :type
    (common-lisp:or data-quality-ruleset-list common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or pagination-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-data-quality-rulesets-response
                    'make-list-data-quality-rulesets-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-data-quality-rulesets-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-data-quality-rulesets-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rulesets))
      (common-lisp:list
       (common-lisp:cons "Rulesets"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-data-quality-rulesets-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-dev-endpoints-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-dev-endpoints-request-"))
   (next-token common-lisp:nil :type
    (common-lisp:or generic-string common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or page-size common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tags-map common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-dev-endpoints-request
                    'make-list-dev-endpoints-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-dev-endpoints-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-dev-endpoints-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-dev-endpoints-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-dev-endpoints-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-dev-endpoints-response-"))
   (dev-endpoint-names common-lisp:nil :type
    (common-lisp:or dev-endpoint-name-list common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or generic-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-dev-endpoints-response
                    'make-list-dev-endpoints-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-dev-endpoints-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-dev-endpoints-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dev-endpoint-names))
      (common-lisp:list
       (common-lisp:cons "DevEndpointNames"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-dev-endpoints-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-jobs-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-jobs-request-"))
   (next-token common-lisp:nil :type
    (common-lisp:or generic-string common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or page-size common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tags-map common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-jobs-request 'make-list-jobs-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-jobs-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-jobs-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-jobs-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-jobs-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-jobs-response-"))
   (job-names common-lisp:nil :type
    (common-lisp:or job-name-list common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or generic-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-jobs-response 'make-list-jobs-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-jobs-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-jobs-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-names))
      (common-lisp:list
       (common-lisp:cons "JobNames"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-jobs-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-mltransforms-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-mltransforms-request-"))
   (next-token common-lisp:nil :type
    (common-lisp:or pagination-token common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or page-size common-lisp:null))
   (filter common-lisp:nil :type
    (common-lisp:or transform-filter-criteria common-lisp:null))
   (sort common-lisp:nil :type
    (common-lisp:or transform-sort-criteria common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tags-map common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-mltransforms-request
                    'make-list-mltransforms-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-mltransforms-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-mltransforms-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filter))
      (common-lisp:list
       (common-lisp:cons "Filter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sort))
      (common-lisp:list
       (common-lisp:cons "Sort"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-mltransforms-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-mltransforms-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-mltransforms-response-"))
   (transform-ids (common-lisp:error ":transform-ids is required") :type
    (common-lisp:or transform-id-list common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or pagination-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-mltransforms-response
                    'make-list-mltransforms-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-mltransforms-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-mltransforms-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'transform-ids))
      (common-lisp:list
       (common-lisp:cons "TransformIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-mltransforms-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-registries-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-registries-input-"))
   (max-results common-lisp:nil :type
    (common-lisp:or max-results-number common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or schema-registry-token-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-registries-input 'make-list-registries-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-registries-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-registries-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-registries-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-registries-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-registries-response-"))
   (registries common-lisp:nil :type
    (common-lisp:or registry-list-definition common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or schema-registry-token-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-registries-response 'make-list-registries-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-registries-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-registries-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'registries))
      (common-lisp:list
       (common-lisp:cons "Registries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-registries-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-schema-versions-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-schema-versions-input-"))
   (schema-id (common-lisp:error ":schema-id is required") :type
    (common-lisp:or schema-id common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or max-results-number common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or schema-registry-token-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-schema-versions-input
                    'make-list-schema-versions-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-schema-versions-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-schema-versions-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'schema-id))
      (common-lisp:list
       (common-lisp:cons "SchemaId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-schema-versions-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-schema-versions-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-schema-versions-response-"))
   (schemas common-lisp:nil :type
    (common-lisp:or schema-version-list common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or schema-registry-token-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-schema-versions-response
                    'make-list-schema-versions-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-schema-versions-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-schema-versions-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'schemas))
      (common-lisp:list
       (common-lisp:cons "Schemas"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-schema-versions-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-schemas-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-schemas-input-"))
   (registry-id common-lisp:nil :type
    (common-lisp:or registry-id common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or max-results-number common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or schema-registry-token-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-schemas-input 'make-list-schemas-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-schemas-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-schemas-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'registry-id))
      (common-lisp:list
       (common-lisp:cons "RegistryId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-schemas-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-schemas-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-schemas-response-"))
   (schemas common-lisp:nil :type
    (common-lisp:or schema-list-definition common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or schema-registry-token-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-schemas-response 'make-list-schemas-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-schemas-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-schemas-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'schemas))
      (common-lisp:list
       (common-lisp:cons "Schemas"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-schemas-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-sessions-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-sessions-request-"))
   (next-token common-lisp:nil :type
    (common-lisp:or orchestration-token common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or page-size common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tags-map common-lisp:null))
   (request-origin common-lisp:nil :type
    (common-lisp:or orchestration-name-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-sessions-request 'make-list-sessions-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-sessions-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-sessions-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-origin))
      (common-lisp:list
       (common-lisp:cons "RequestOrigin"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-sessions-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-sessions-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-sessions-response-"))
   (ids common-lisp:nil :type
    (common-lisp:or session-id-list common-lisp:null))
   (sessions common-lisp:nil :type
    (common-lisp:or session-list common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or orchestration-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-sessions-response 'make-list-sessions-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-sessions-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-sessions-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ids))
      (common-lisp:list
       (common-lisp:cons "Ids"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sessions))
      (common-lisp:list
       (common-lisp:cons "Sessions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-sessions-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-statements-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-statements-request-"))
   (session-id (common-lisp:error ":session-id is required") :type
    (common-lisp:or name-string common-lisp:null))
   (request-origin common-lisp:nil :type
    (common-lisp:or orchestration-name-string common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or orchestration-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-statements-request 'make-list-statements-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-statements-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-statements-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'session-id))
      (common-lisp:list
       (common-lisp:cons "SessionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-origin))
      (common-lisp:list
       (common-lisp:cons "RequestOrigin"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-statements-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-statements-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-statements-response-"))
   (statements common-lisp:nil :type
    (common-lisp:or statement-list common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or orchestration-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-statements-response 'make-list-statements-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-statements-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-statements-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'statements))
      (common-lisp:list
       (common-lisp:cons "Statements"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-statements-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-triggers-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-triggers-request-"))
   (next-token common-lisp:nil :type
    (common-lisp:or generic-string common-lisp:null))
   (dependent-job-name common-lisp:nil :type
    (common-lisp:or name-string common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or page-size common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tags-map common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-triggers-request 'make-list-triggers-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-triggers-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-triggers-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dependent-job-name))
      (common-lisp:list
       (common-lisp:cons "DependentJobName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-triggers-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-triggers-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-triggers-response-"))
   (trigger-names common-lisp:nil :type
    (common-lisp:or trigger-name-list common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or generic-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-triggers-response 'make-list-triggers-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-triggers-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-triggers-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'trigger-names))
      (common-lisp:list
       (common-lisp:cons "TriggerNames"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-triggers-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-workflows-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-workflows-request-"))
   (next-token common-lisp:nil :type
    (common-lisp:or generic-string common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or page-size common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-workflows-request 'make-list-workflows-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-workflows-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-workflows-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-workflows-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-workflows-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-workflows-response-"))
   (workflows common-lisp:nil :type
    (common-lisp:or workflow-names common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or generic-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-workflows-response 'make-list-workflows-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-workflows-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-workflows-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'workflows))
      (common-lisp:list
       (common-lisp:cons "Workflows"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-workflows-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (location (:copier common-lisp:nil) (:conc-name "struct-shape-location-"))
   (jdbc common-lisp:nil :type
    (common-lisp:or code-gen-node-args common-lisp:null))
   (s3 common-lisp:nil :type
    (common-lisp:or code-gen-node-args common-lisp:null))
   (dynamo-db common-lisp:nil :type
    (common-lisp:or code-gen-node-args common-lisp:null)))
 (common-lisp:export (common-lisp:list 'location 'make-location))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input location))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input location))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'jdbc))
      (common-lisp:list
       (common-lisp:cons "Jdbc"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3))
      (common-lisp:list
       (common-lisp:cons "S3"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dynamo-db))
      (common-lisp:list
       (common-lisp:cons "DynamoDB"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input location))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype location-map () 'common-lisp:hash-table)
 (common-lisp:defun |make-location-map| (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:deftype location-string () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype location-string-list ()
   '(trivial-types:proper-list location-string))
 (common-lisp:defun |make-location-string-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list location-string))
   aws-sdk/generator/shape::members))
(common-lisp:deftype log-group () 'common-lisp:string)
(common-lisp:deftype log-stream () 'common-lisp:string)
(common-lisp:deftype logical () 'common-lisp:string)
(common-lisp:deftype logical-operator () 'common-lisp:string)
(common-lisp:deftype long () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defstruct
     (long-column-statistics-data (:copier common-lisp:nil)
      (:conc-name "struct-shape-long-column-statistics-data-"))
   (minimum-value common-lisp:nil :type (common-lisp:or long common-lisp:null))
   (maximum-value common-lisp:nil :type (common-lisp:or long common-lisp:null))
   (number-of-nulls (common-lisp:error ":number-of-nulls is required") :type
    (common-lisp:or non-negative-long common-lisp:null))
   (number-of-distinct-values
    (common-lisp:error ":number-of-distinct-values is required") :type
    (common-lisp:or non-negative-long common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'long-column-statistics-data
                    'make-long-column-statistics-data))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          long-column-statistics-data))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          long-column-statistics-data))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'minimum-value))
      (common-lisp:list
       (common-lisp:cons "MinimumValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'maximum-value))
      (common-lisp:list
       (common-lisp:cons "MaximumValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'number-of-nulls))
      (common-lisp:list
       (common-lisp:cons "NumberOfNulls"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'number-of-distinct-values))
      (common-lisp:list
       (common-lisp:cons "NumberOfDistinctValues"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          long-column-statistics-data))
   common-lisp:nil))
(common-lisp:deftype long-value () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defstruct
     (mltransform (:copier common-lisp:nil)
      (:conc-name "struct-shape-mltransform-"))
   (transform-id common-lisp:nil :type
    (common-lisp:or hash-string common-lisp:null))
   (name common-lisp:nil :type (common-lisp:or name-string common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or description-string common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or transform-status-type common-lisp:null))
   (created-on common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (last-modified-on common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (input-record-tables common-lisp:nil :type
    (common-lisp:or glue-tables common-lisp:null))
   (parameters common-lisp:nil :type
    (common-lisp:or transform-parameters common-lisp:null))
   (evaluation-metrics common-lisp:nil :type
    (common-lisp:or evaluation-metrics common-lisp:null))
   (label-count common-lisp:nil :type
    (common-lisp:or label-count common-lisp:null))
   (schema common-lisp:nil :type
    (common-lisp:or transform-schema common-lisp:null))
   (role common-lisp:nil :type (common-lisp:or role-string common-lisp:null))
   (glue-version common-lisp:nil :type
    (common-lisp:or glue-version-string common-lisp:null))
   (max-capacity common-lisp:nil :type
    (common-lisp:or nullable-double common-lisp:null))
   (worker-type common-lisp:nil :type
    (common-lisp:or worker-type common-lisp:null))
   (number-of-workers common-lisp:nil :type
    (common-lisp:or nullable-integer common-lisp:null))
   (timeout common-lisp:nil :type (common-lisp:or timeout common-lisp:null))
   (max-retries common-lisp:nil :type
    (common-lisp:or nullable-integer common-lisp:null))
   (transform-encryption common-lisp:nil :type
    (common-lisp:or transform-encryption common-lisp:null)))
 (common-lisp:export (common-lisp:list 'mltransform 'make-mltransform))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input mltransform))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input mltransform))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'transform-id))
      (common-lisp:list
       (common-lisp:cons "TransformId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-on))
      (common-lisp:list
       (common-lisp:cons "CreatedOn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-modified-on))
      (common-lisp:list
       (common-lisp:cons "LastModifiedOn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'input-record-tables))
      (common-lisp:list
       (common-lisp:cons "InputRecordTables"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'parameters))
      (common-lisp:list
       (common-lisp:cons "Parameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'evaluation-metrics))
      (common-lisp:list
       (common-lisp:cons "EvaluationMetrics"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'label-count))
      (common-lisp:list
       (common-lisp:cons "LabelCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'schema))
      (common-lisp:list
       (common-lisp:cons "Schema"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role))
      (common-lisp:list
       (common-lisp:cons "Role"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'glue-version))
      (common-lisp:list
       (common-lisp:cons "GlueVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-capacity))
      (common-lisp:list
       (common-lisp:cons "MaxCapacity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'worker-type))
      (common-lisp:list
       (common-lisp:cons "WorkerType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'number-of-workers))
      (common-lisp:list
       (common-lisp:cons "NumberOfWorkers"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'timeout))
      (common-lisp:list
       (common-lisp:cons "Timeout"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-retries))
      (common-lisp:list
       (common-lisp:cons "MaxRetries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'transform-encryption))
      (common-lisp:list
       (common-lisp:cons "TransformEncryption"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input mltransform))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition mltransform-not-ready-exception
     (glue-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       mltransform-not-ready-exception-message)))
 (common-lisp:export
  (common-lisp:list 'mltransform-not-ready-exception
                    'mltransform-not-ready-exception-message)))
(common-lisp:progn
 (common-lisp:defstruct
     (mluser-data-encryption (:copier common-lisp:nil)
      (:conc-name "struct-shape-mluser-data-encryption-"))
   (ml-user-data-encryption-mode
    (common-lisp:error ":ml-user-data-encryption-mode is required") :type
    (common-lisp:or mluser-data-encryption-mode-string common-lisp:null))
   (kms-key-id common-lisp:nil :type
    (common-lisp:or name-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'mluser-data-encryption 'make-mluser-data-encryption))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          mluser-data-encryption))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          mluser-data-encryption))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'ml-user-data-encryption-mode))
      (common-lisp:list
       (common-lisp:cons "MlUserDataEncryptionMode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kms-key-id))
      (common-lisp:list
       (common-lisp:cons "KmsKeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          mluser-data-encryption))
   common-lisp:nil))
(common-lisp:deftype mluser-data-encryption-mode-string () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype many-inputs () '(trivial-types:proper-list node-id))
 (common-lisp:defun |make-many-inputs|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list node-id))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype map-value () 'common-lisp:hash-table)
 (common-lisp:defun |make-map-value| (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:progn
 (common-lisp:defstruct
     (mapping (:copier common-lisp:nil) (:conc-name "struct-shape-mapping-"))
   (to-key common-lisp:nil :type
    (common-lisp:or enclosed-in-string-property common-lisp:null))
   (from-path common-lisp:nil :type
    (common-lisp:or enclosed-in-string-properties common-lisp:null))
   (from-type common-lisp:nil :type
    (common-lisp:or enclosed-in-string-property common-lisp:null))
   (to-type common-lisp:nil :type
    (common-lisp:or enclosed-in-string-property common-lisp:null))
   (dropped common-lisp:nil :type
    (common-lisp:or boxed-boolean common-lisp:null))
   (children common-lisp:nil :type (common-lisp:or mappings common-lisp:null)))
 (common-lisp:export (common-lisp:list 'mapping 'make-mapping))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input mapping))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input mapping))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'to-key))
      (common-lisp:list
       (common-lisp:cons "ToKey"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'from-path))
      (common-lisp:list
       (common-lisp:cons "FromPath"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'from-type))
      (common-lisp:list
       (common-lisp:cons "FromType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'to-type))
      (common-lisp:list
       (common-lisp:cons "ToType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dropped))
      (common-lisp:list
       (common-lisp:cons "Dropped"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'children))
      (common-lisp:list
       (common-lisp:cons "Children"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input mapping))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (mapping-entry (:copier common-lisp:nil)
      (:conc-name "struct-shape-mapping-entry-"))
   (source-table common-lisp:nil :type
    (common-lisp:or table-name common-lisp:null))
   (source-path common-lisp:nil :type
    (common-lisp:or schema-path-string common-lisp:null))
   (source-type common-lisp:nil :type
    (common-lisp:or field-type common-lisp:null))
   (target-table common-lisp:nil :type
    (common-lisp:or table-name common-lisp:null))
   (target-path common-lisp:nil :type
    (common-lisp:or schema-path-string common-lisp:null))
   (target-type common-lisp:nil :type
    (common-lisp:or field-type common-lisp:null)))
 (common-lisp:export (common-lisp:list 'mapping-entry 'make-mapping-entry))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input mapping-entry))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input mapping-entry))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-table))
      (common-lisp:list
       (common-lisp:cons "SourceTable"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-path))
      (common-lisp:list
       (common-lisp:cons "SourcePath"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-type))
      (common-lisp:list
       (common-lisp:cons "SourceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target-table))
      (common-lisp:list
       (common-lisp:cons "TargetTable"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target-path))
      (common-lisp:list
       (common-lisp:cons "TargetPath"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target-type))
      (common-lisp:list
       (common-lisp:cons "TargetType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input mapping-entry))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype mapping-list ()
   '(trivial-types:proper-list mapping-entry))
 (common-lisp:defun |make-mapping-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list mapping-entry))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype mappings () '(trivial-types:proper-list mapping))
 (common-lisp:defun |make-mappings|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list mapping))
   aws-sdk/generator/shape::members))
(common-lisp:deftype mask-value () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype match-criteria ()
   '(trivial-types:proper-list name-string))
 (common-lisp:defun |make-match-criteria|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list name-string))
   aws-sdk/generator/shape::members))
(common-lisp:deftype max-concurrent-runs () 'common-lisp:integer)
(common-lisp:deftype max-results-number () 'common-lisp:integer)
(common-lisp:deftype max-retries () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defstruct
     (merge (:copier common-lisp:nil) (:conc-name "struct-shape-merge-"))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or node-name common-lisp:null))
   (inputs (common-lisp:error ":inputs is required") :type
    (common-lisp:or two-inputs common-lisp:null))
   (source (common-lisp:error ":source is required") :type
    (common-lisp:or node-id common-lisp:null))
   (primary-keys (common-lisp:error ":primary-keys is required") :type
    (common-lisp:or glue-studio-path-list common-lisp:null)))
 (common-lisp:export (common-lisp:list 'merge 'make-merge))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input merge))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input merge))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'inputs))
      (common-lisp:list
       (common-lisp:cons "Inputs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source))
      (common-lisp:list
       (common-lisp:cons "Source"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'primary-keys))
      (common-lisp:list
       (common-lisp:cons "PrimaryKeys"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input merge))
   common-lisp:nil))
(common-lisp:deftype message-prefix () 'common-lisp:string)
(common-lisp:deftype message-string () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (metadata-info (:copier common-lisp:nil)
      (:conc-name "struct-shape-metadata-info-"))
   (metadata-value common-lisp:nil :type
    (common-lisp:or metadata-value-string common-lisp:null))
   (created-time common-lisp:nil :type
    (common-lisp:or created-timestamp common-lisp:null))
   (other-metadata-value-list common-lisp:nil :type
    (common-lisp:or other-metadata-value-list common-lisp:null)))
 (common-lisp:export (common-lisp:list 'metadata-info 'make-metadata-info))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input metadata-info))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input metadata-info))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metadata-value))
      (common-lisp:list
       (common-lisp:cons "MetadataValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-time))
      (common-lisp:list
       (common-lisp:cons "CreatedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'other-metadata-value-list))
      (common-lisp:list
       (common-lisp:cons "OtherMetadataValueList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input metadata-info))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype metadata-info-map () 'common-lisp:hash-table)
 (common-lisp:defun |make-metadata-info-map|
                    (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:deftype metadata-key-string () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (metadata-key-value-pair (:copier common-lisp:nil)
      (:conc-name "struct-shape-metadata-key-value-pair-"))
   (metadata-key common-lisp:nil :type
    (common-lisp:or metadata-key-string common-lisp:null))
   (metadata-value common-lisp:nil :type
    (common-lisp:or metadata-value-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'metadata-key-value-pair 'make-metadata-key-value-pair))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          metadata-key-value-pair))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          metadata-key-value-pair))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metadata-key))
      (common-lisp:list
       (common-lisp:cons "MetadataKey"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metadata-value))
      (common-lisp:list
       (common-lisp:cons "MetadataValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          metadata-key-value-pair))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype metadata-list ()
   '(trivial-types:proper-list metadata-key-value-pair))
 (common-lisp:defun |make-metadata-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list metadata-key-value-pair))
   aws-sdk/generator/shape::members))
(common-lisp:deftype metadata-value-string () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (microsoft-sqlserver-catalog-source (:copier common-lisp:nil)
      (:conc-name "struct-shape-microsoft-sqlserver-catalog-source-"))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or node-name common-lisp:null))
   (database (common-lisp:error ":database is required") :type
    (common-lisp:or enclosed-in-string-property common-lisp:null))
   (table (common-lisp:error ":table is required") :type
    (common-lisp:or enclosed-in-string-property common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'microsoft-sqlserver-catalog-source
                    'make-microsoft-sqlserver-catalog-source))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          microsoft-sqlserver-catalog-source))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          microsoft-sqlserver-catalog-source))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'database))
      (common-lisp:list
       (common-lisp:cons "Database"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'table))
      (common-lisp:list
       (common-lisp:cons "Table"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          microsoft-sqlserver-catalog-source))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (microsoft-sqlserver-catalog-target (:copier common-lisp:nil)
      (:conc-name "struct-shape-microsoft-sqlserver-catalog-target-"))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or node-name common-lisp:null))
   (inputs (common-lisp:error ":inputs is required") :type
    (common-lisp:or one-input common-lisp:null))
   (database (common-lisp:error ":database is required") :type
    (common-lisp:or enclosed-in-string-property common-lisp:null))
   (table (common-lisp:error ":table is required") :type
    (common-lisp:or enclosed-in-string-property common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'microsoft-sqlserver-catalog-target
                    'make-microsoft-sqlserver-catalog-target))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          microsoft-sqlserver-catalog-target))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          microsoft-sqlserver-catalog-target))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'inputs))
      (common-lisp:list
       (common-lisp:cons "Inputs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'database))
      (common-lisp:list
       (common-lisp:cons "Database"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'table))
      (common-lisp:list
       (common-lisp:cons "Table"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          microsoft-sqlserver-catalog-target))
   common-lisp:nil))
(common-lisp:deftype milliseconds-count () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defstruct
     (mongo-dbtarget (:copier common-lisp:nil)
      (:conc-name "struct-shape-mongo-dbtarget-"))
   (connection-name common-lisp:nil :type
    (common-lisp:or connection-name common-lisp:null))
   (path common-lisp:nil :type (common-lisp:or path common-lisp:null))
   (scan-all common-lisp:nil :type
    (common-lisp:or nullable-boolean common-lisp:null)))
 (common-lisp:export (common-lisp:list 'mongo-dbtarget 'make-mongo-dbtarget))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input mongo-dbtarget))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input mongo-dbtarget))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'connection-name))
      (common-lisp:list
       (common-lisp:cons "ConnectionName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'path))
      (common-lisp:list
       (common-lisp:cons "Path"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'scan-all))
      (common-lisp:list
       (common-lisp:cons "ScanAll"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input mongo-dbtarget))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype mongo-dbtarget-list ()
   '(trivial-types:proper-list mongo-dbtarget))
 (common-lisp:defun |make-mongo-dbtarget-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list mongo-dbtarget))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (my-sqlcatalog-source (:copier common-lisp:nil)
      (:conc-name "struct-shape-my-sqlcatalog-source-"))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or node-name common-lisp:null))
   (database (common-lisp:error ":database is required") :type
    (common-lisp:or enclosed-in-string-property common-lisp:null))
   (table (common-lisp:error ":table is required") :type
    (common-lisp:or enclosed-in-string-property common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'my-sqlcatalog-source 'make-my-sqlcatalog-source))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input my-sqlcatalog-source))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input my-sqlcatalog-source))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'database))
      (common-lisp:list
       (common-lisp:cons "Database"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'table))
      (common-lisp:list
       (common-lisp:cons "Table"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input my-sqlcatalog-source))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (my-sqlcatalog-target (:copier common-lisp:nil)
      (:conc-name "struct-shape-my-sqlcatalog-target-"))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or node-name common-lisp:null))
   (inputs (common-lisp:error ":inputs is required") :type
    (common-lisp:or one-input common-lisp:null))
   (database (common-lisp:error ":database is required") :type
    (common-lisp:or enclosed-in-string-property common-lisp:null))
   (table (common-lisp:error ":table is required") :type
    (common-lisp:or enclosed-in-string-property common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'my-sqlcatalog-target 'make-my-sqlcatalog-target))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input my-sqlcatalog-target))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input my-sqlcatalog-target))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'inputs))
      (common-lisp:list
       (common-lisp:cons "Inputs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'database))
      (common-lisp:list
       (common-lisp:cons "Database"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'table))
      (common-lisp:list
       (common-lisp:cons "Table"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input my-sqlcatalog-target))
   common-lisp:nil))
(common-lisp:deftype name-string () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype name-string-list ()
   '(trivial-types:proper-list name-string))
 (common-lisp:defun |make-name-string-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list name-string))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition no-schedule-exception
     (glue-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       no-schedule-exception-message)))
 (common-lisp:export
  (common-lisp:list 'no-schedule-exception 'no-schedule-exception-message)))
(common-lisp:progn
 (common-lisp:defstruct
     (node (:copier common-lisp:nil) (:conc-name "struct-shape-node-"))
   (type common-lisp:nil :type (common-lisp:or node-type common-lisp:null))
   (name common-lisp:nil :type (common-lisp:or name-string common-lisp:null))
   (unique-id common-lisp:nil :type
    (common-lisp:or name-string common-lisp:null))
   (trigger-details common-lisp:nil :type
    (common-lisp:or trigger-node-details common-lisp:null))
   (job-details common-lisp:nil :type
    (common-lisp:or job-node-details common-lisp:null))
   (crawler-details common-lisp:nil :type
    (common-lisp:or crawler-node-details common-lisp:null)))
 (common-lisp:export (common-lisp:list 'node 'make-node))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input node))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input node))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'unique-id))
      (common-lisp:list
       (common-lisp:cons "UniqueId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'trigger-details))
      (common-lisp:list
       (common-lisp:cons "TriggerDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-details))
      (common-lisp:list
       (common-lisp:cons "JobDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'crawler-details))
      (common-lisp:list
       (common-lisp:cons "CrawlerDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input node))
   common-lisp:nil))
(common-lisp:deftype node-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype node-id-list () '(trivial-types:proper-list name-string))
 (common-lisp:defun |make-node-id-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list name-string))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype node-list () '(trivial-types:proper-list node))
 (common-lisp:defun |make-node-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list node))
   aws-sdk/generator/shape::members))
(common-lisp:deftype node-name () 'common-lisp:string)
(common-lisp:deftype node-type () 'common-lisp:string)
(common-lisp:deftype non-negative-double () 'common-lisp:double-float)
(common-lisp:deftype non-negative-int () 'common-lisp:integer)
(common-lisp:deftype non-negative-integer () 'common-lisp:integer)
(common-lisp:deftype non-negative-long () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defstruct
     (notification-property (:copier common-lisp:nil)
      (:conc-name "struct-shape-notification-property-"))
   (notify-delay-after common-lisp:nil :type
    (common-lisp:or notify-delay-after common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'notification-property 'make-notification-property))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          notification-property))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          notification-property))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'notify-delay-after))
      (common-lisp:list
       (common-lisp:cons "NotifyDelayAfter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          notification-property))
   common-lisp:nil))
(common-lisp:deftype notify-delay-after () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defstruct
     (null-check-box-list (:copier common-lisp:nil)
      (:conc-name "struct-shape-null-check-box-list-"))
   (is-empty common-lisp:nil :type
    (common-lisp:or boxed-boolean common-lisp:null))
   (is-null-string common-lisp:nil :type
    (common-lisp:or boxed-boolean common-lisp:null))
   (is-neg-one common-lisp:nil :type
    (common-lisp:or boxed-boolean common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'null-check-box-list 'make-null-check-box-list))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input null-check-box-list))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input null-check-box-list))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'is-empty))
      (common-lisp:list
       (common-lisp:cons "IsEmpty"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'is-null-string))
      (common-lisp:list
       (common-lisp:cons "IsNullString"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'is-neg-one))
      (common-lisp:list
       (common-lisp:cons "IsNegOne"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input null-check-box-list))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (null-value-field (:copier common-lisp:nil)
      (:conc-name "struct-shape-null-value-field-"))
   (value (common-lisp:error ":value is required") :type
    (common-lisp:or enclosed-in-string-property common-lisp:null))
   (datatype (common-lisp:error ":datatype is required") :type
    (common-lisp:or datatype common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'null-value-field 'make-null-value-field))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input null-value-field))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input null-value-field))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "Value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'datatype))
      (common-lisp:list
       (common-lisp:cons "Datatype"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input null-value-field))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype null-value-fields ()
   '(trivial-types:proper-list null-value-field))
 (common-lisp:defun |make-null-value-fields|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list null-value-field))
   aws-sdk/generator/shape::members))
(common-lisp:deftype nullable-boolean () 'common-lisp:boolean)
(common-lisp:deftype nullable-double () 'common-lisp:double-float)
(common-lisp:deftype nullable-integer () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:deftype one-input () '(trivial-types:proper-list node-id))
 (common-lisp:defun |make-one-input|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list node-id))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition operation-timeout-exception
     (glue-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       operation-timeout-exception-message)))
 (common-lisp:export
  (common-lisp:list 'operation-timeout-exception
                    'operation-timeout-exception-message)))
(common-lisp:progn
 (common-lisp:defstruct
     (oracle-sqlcatalog-source (:copier common-lisp:nil)
      (:conc-name "struct-shape-oracle-sqlcatalog-source-"))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or node-name common-lisp:null))
   (database (common-lisp:error ":database is required") :type
    (common-lisp:or enclosed-in-string-property common-lisp:null))
   (table (common-lisp:error ":table is required") :type
    (common-lisp:or enclosed-in-string-property common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'oracle-sqlcatalog-source 'make-oracle-sqlcatalog-source))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          oracle-sqlcatalog-source))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          oracle-sqlcatalog-source))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'database))
      (common-lisp:list
       (common-lisp:cons "Database"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'table))
      (common-lisp:list
       (common-lisp:cons "Table"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          oracle-sqlcatalog-source))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (oracle-sqlcatalog-target (:copier common-lisp:nil)
      (:conc-name "struct-shape-oracle-sqlcatalog-target-"))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or node-name common-lisp:null))
   (inputs (common-lisp:error ":inputs is required") :type
    (common-lisp:or one-input common-lisp:null))
   (database (common-lisp:error ":database is required") :type
    (common-lisp:or enclosed-in-string-property common-lisp:null))
   (table (common-lisp:error ":table is required") :type
    (common-lisp:or enclosed-in-string-property common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'oracle-sqlcatalog-target 'make-oracle-sqlcatalog-target))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          oracle-sqlcatalog-target))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          oracle-sqlcatalog-target))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'inputs))
      (common-lisp:list
       (common-lisp:cons "Inputs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'database))
      (common-lisp:list
       (common-lisp:cons "Database"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'table))
      (common-lisp:list
       (common-lisp:cons "Table"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          oracle-sqlcatalog-target))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype orchestration-arguments-map () 'common-lisp:hash-table)
 (common-lisp:defun |make-orchestration-arguments-map|
                    (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:deftype orchestration-arguments-value () 'common-lisp:string)
(common-lisp:deftype orchestration-iamrole-arn () 'common-lisp:string)
(common-lisp:deftype orchestration-name-string () 'common-lisp:string)
(common-lisp:deftype orchestration-role-arn () 'common-lisp:string)
(common-lisp:deftype orchestration-s3location () 'common-lisp:string)
(common-lisp:deftype orchestration-statement-code-string () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype orchestration-string-list ()
   '(trivial-types:proper-list generic-string))
 (common-lisp:defun |make-orchestration-string-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list generic-string))
   aws-sdk/generator/shape::members))
(common-lisp:deftype orchestration-token () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (order (:copier common-lisp:nil) (:conc-name "struct-shape-order-"))
   (column (common-lisp:error ":column is required") :type
    (common-lisp:or name-string common-lisp:null))
   (sort-order (common-lisp:error ":sort-order is required") :type
    (common-lisp:or integer-flag common-lisp:null)))
 (common-lisp:export (common-lisp:list 'order 'make-order))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input order))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input order))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'column))
      (common-lisp:list
       (common-lisp:cons "Column"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sort-order))
      (common-lisp:list
       (common-lisp:cons "SortOrder"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input order))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype order-list () '(trivial-types:proper-list order))
 (common-lisp:defun |make-order-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list order))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype other-metadata-value-list ()
   '(trivial-types:proper-list other-metadata-value-list-item))
 (common-lisp:defun |make-other-metadata-value-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            other-metadata-value-list-item))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (other-metadata-value-list-item (:copier common-lisp:nil)
      (:conc-name "struct-shape-other-metadata-value-list-item-"))
   (metadata-value common-lisp:nil :type
    (common-lisp:or metadata-value-string common-lisp:null))
   (created-time common-lisp:nil :type
    (common-lisp:or created-timestamp common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'other-metadata-value-list-item
                    'make-other-metadata-value-list-item))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          other-metadata-value-list-item))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          other-metadata-value-list-item))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metadata-value))
      (common-lisp:list
       (common-lisp:cons "MetadataValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-time))
      (common-lisp:list
       (common-lisp:cons "CreatedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          other-metadata-value-list-item))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (piidetection (:copier common-lisp:nil)
      (:conc-name "struct-shape-piidetection-"))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or node-name common-lisp:null))
   (inputs (common-lisp:error ":inputs is required") :type
    (common-lisp:or one-input common-lisp:null))
   (pii-type (common-lisp:error ":pii-type is required") :type
    (common-lisp:or pii-type common-lisp:null))
   (entity-types-to-detect
    (common-lisp:error ":entity-types-to-detect is required") :type
    (common-lisp:or enclosed-in-string-properties common-lisp:null))
   (output-column-name common-lisp:nil :type
    (common-lisp:or enclosed-in-string-property common-lisp:null))
   (sample-fraction common-lisp:nil :type
    (common-lisp:or boxed-double-fraction common-lisp:null))
   (threshold-fraction common-lisp:nil :type
    (common-lisp:or boxed-double-fraction common-lisp:null))
   (mask-value common-lisp:nil :type
    (common-lisp:or mask-value common-lisp:null)))
 (common-lisp:export (common-lisp:list 'piidetection 'make-piidetection))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input piidetection))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input piidetection))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'inputs))
      (common-lisp:list
       (common-lisp:cons "Inputs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pii-type))
      (common-lisp:list
       (common-lisp:cons "PiiType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'entity-types-to-detect))
      (common-lisp:list
       (common-lisp:cons "EntityTypesToDetect"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'output-column-name))
      (common-lisp:list
       (common-lisp:cons "OutputColumnName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sample-fraction))
      (common-lisp:list
       (common-lisp:cons "SampleFraction"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'threshold-fraction))
      (common-lisp:list
       (common-lisp:cons "ThresholdFraction"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'mask-value))
      (common-lisp:list
       (common-lisp:cons "MaskValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input piidetection))
   common-lisp:nil))
(common-lisp:deftype page-size () 'common-lisp:integer)
(common-lisp:deftype pagination-token () 'common-lisp:string)
(common-lisp:deftype param-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype parameters-map () 'common-lisp:hash-table)
 (common-lisp:defun |make-parameters-map| (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:deftype parameters-map-value () 'common-lisp:string)
(common-lisp:deftype parquet-compression-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (partition (:copier common-lisp:nil)
      (:conc-name "struct-shape-partition-"))
   (values common-lisp:nil :type
    (common-lisp:or value-string-list common-lisp:null))
   (database-name common-lisp:nil :type
    (common-lisp:or name-string common-lisp:null))
   (table-name common-lisp:nil :type
    (common-lisp:or name-string common-lisp:null))
   (creation-time common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (last-access-time common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (storage-descriptor common-lisp:nil :type
    (common-lisp:or storage-descriptor common-lisp:null))
   (parameters common-lisp:nil :type
    (common-lisp:or parameters-map common-lisp:null))
   (last-analyzed-time common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (catalog-id common-lisp:nil :type
    (common-lisp:or catalog-id-string common-lisp:null)))
 (common-lisp:export (common-lisp:list 'partition 'make-partition))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input partition))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input partition))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'values))
      (common-lisp:list
       (common-lisp:cons "Values"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'database-name))
      (common-lisp:list
       (common-lisp:cons "DatabaseName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'table-name))
      (common-lisp:list
       (common-lisp:cons "TableName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-time))
      (common-lisp:list
       (common-lisp:cons "CreationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-access-time))
      (common-lisp:list
       (common-lisp:cons "LastAccessTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'storage-descriptor))
      (common-lisp:list
       (common-lisp:cons "StorageDescriptor"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'parameters))
      (common-lisp:list
       (common-lisp:cons "Parameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-analyzed-time))
      (common-lisp:list
       (common-lisp:cons "LastAnalyzedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'catalog-id))
      (common-lisp:list
       (common-lisp:cons "CatalogId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input partition))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (partition-error (:copier common-lisp:nil)
      (:conc-name "struct-shape-partition-error-"))
   (partition-values common-lisp:nil :type
    (common-lisp:or value-string-list common-lisp:null))
   (error-detail common-lisp:nil :type
    (common-lisp:or error-detail common-lisp:null)))
 (common-lisp:export (common-lisp:list 'partition-error 'make-partition-error))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input partition-error))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input partition-error))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'partition-values))
      (common-lisp:list
       (common-lisp:cons "PartitionValues"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error-detail))
      (common-lisp:list
       (common-lisp:cons "ErrorDetail"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input partition-error))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype partition-errors ()
   '(trivial-types:proper-list partition-error))
 (common-lisp:defun |make-partition-errors|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list partition-error))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (partition-index (:copier common-lisp:nil)
      (:conc-name "struct-shape-partition-index-"))
   (keys (common-lisp:error ":keys is required") :type
    (common-lisp:or key-list common-lisp:null))
   (index-name (common-lisp:error ":index-name is required") :type
    (common-lisp:or name-string common-lisp:null)))
 (common-lisp:export (common-lisp:list 'partition-index 'make-partition-index))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input partition-index))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input partition-index))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'keys))
      (common-lisp:list
       (common-lisp:cons "Keys"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'index-name))
      (common-lisp:list
       (common-lisp:cons "IndexName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input partition-index))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (partition-index-descriptor (:copier common-lisp:nil)
      (:conc-name "struct-shape-partition-index-descriptor-"))
   (index-name (common-lisp:error ":index-name is required") :type
    (common-lisp:or name-string common-lisp:null))
   (keys (common-lisp:error ":keys is required") :type
    (common-lisp:or key-schema-element-list common-lisp:null))
   (index-status (common-lisp:error ":index-status is required") :type
    (common-lisp:or partition-index-status common-lisp:null))
   (backfill-errors common-lisp:nil :type
    (common-lisp:or backfill-errors common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'partition-index-descriptor
                    'make-partition-index-descriptor))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          partition-index-descriptor))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          partition-index-descriptor))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'index-name))
      (common-lisp:list
       (common-lisp:cons "IndexName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'keys))
      (common-lisp:list
       (common-lisp:cons "Keys"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'index-status))
      (common-lisp:list
       (common-lisp:cons "IndexStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'backfill-errors))
      (common-lisp:list
       (common-lisp:cons "BackfillErrors"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          partition-index-descriptor))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype partition-index-descriptor-list ()
   '(trivial-types:proper-list partition-index-descriptor))
 (common-lisp:defun |make-partition-index-descriptor-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            partition-index-descriptor))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype partition-index-list ()
   '(trivial-types:proper-list partition-index))
 (common-lisp:defun |make-partition-index-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list partition-index))
   aws-sdk/generator/shape::members))
(common-lisp:deftype partition-index-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (partition-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-partition-input-"))
   (values common-lisp:nil :type
    (common-lisp:or value-string-list common-lisp:null))
   (last-access-time common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (storage-descriptor common-lisp:nil :type
    (common-lisp:or storage-descriptor common-lisp:null))
   (parameters common-lisp:nil :type
    (common-lisp:or parameters-map common-lisp:null))
   (last-analyzed-time common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null)))
 (common-lisp:export (common-lisp:list 'partition-input 'make-partition-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input partition-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input partition-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'values))
      (common-lisp:list
       (common-lisp:cons "Values"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-access-time))
      (common-lisp:list
       (common-lisp:cons "LastAccessTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'storage-descriptor))
      (common-lisp:list
       (common-lisp:cons "StorageDescriptor"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'parameters))
      (common-lisp:list
       (common-lisp:cons "Parameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-analyzed-time))
      (common-lisp:list
       (common-lisp:cons "LastAnalyzedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input partition-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype partition-input-list ()
   '(trivial-types:proper-list partition-input))
 (common-lisp:defun |make-partition-input-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list partition-input))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype partition-list () '(trivial-types:proper-list partition))
 (common-lisp:defun |make-partition-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list partition))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (partition-value-list (:copier common-lisp:nil)
      (:conc-name "struct-shape-partition-value-list-"))
   (values (common-lisp:error ":values is required") :type
    (common-lisp:or value-string-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'partition-value-list 'make-partition-value-list))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input partition-value-list))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input partition-value-list))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'values))
      (common-lisp:list
       (common-lisp:cons "Values"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input partition-value-list))
   common-lisp:nil))
(common-lisp:deftype path () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype path-list () '(trivial-types:proper-list path))
 (common-lisp:defun |make-path-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list path))
   aws-sdk/generator/shape::members))
(common-lisp:deftype permission () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype permission-list ()
   '(trivial-types:proper-list permission))
 (common-lisp:defun |make-permission-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list permission))
   aws-sdk/generator/shape::members))
(common-lisp:deftype permission-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype permission-type-list ()
   '(trivial-types:proper-list permission-type))
 (common-lisp:defun |make-permission-type-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list permission-type))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition permission-type-mismatch-exception
     (glue-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       permission-type-mismatch-exception-message)))
 (common-lisp:export
  (common-lisp:list 'permission-type-mismatch-exception
                    'permission-type-mismatch-exception-message)))
(common-lisp:progn
 (common-lisp:defstruct
     (physical-connection-requirements (:copier common-lisp:nil)
      (:conc-name "struct-shape-physical-connection-requirements-"))
   (subnet-id common-lisp:nil :type
    (common-lisp:or name-string common-lisp:null))
   (security-group-id-list common-lisp:nil :type
    (common-lisp:or security-group-id-list common-lisp:null))
   (availability-zone common-lisp:nil :type
    (common-lisp:or name-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'physical-connection-requirements
                    'make-physical-connection-requirements))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          physical-connection-requirements))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          physical-connection-requirements))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subnet-id))
      (common-lisp:list
       (common-lisp:cons "SubnetId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'security-group-id-list))
      (common-lisp:list
       (common-lisp:cons "SecurityGroupIdList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'availability-zone))
      (common-lisp:list
       (common-lisp:cons "AvailabilityZone"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          physical-connection-requirements))
   common-lisp:nil))
(common-lisp:deftype pii-type () 'common-lisp:string)
(common-lisp:deftype policy-json-string () 'common-lisp:string)
(common-lisp:deftype polling-time () 'common-lisp:integer)
(common-lisp:deftype positive-long () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defstruct
     (postgre-sqlcatalog-source (:copier common-lisp:nil)
      (:conc-name "struct-shape-postgre-sqlcatalog-source-"))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or node-name common-lisp:null))
   (database (common-lisp:error ":database is required") :type
    (common-lisp:or enclosed-in-string-property common-lisp:null))
   (table (common-lisp:error ":table is required") :type
    (common-lisp:or enclosed-in-string-property common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'postgre-sqlcatalog-source
                    'make-postgre-sqlcatalog-source))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          postgre-sqlcatalog-source))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          postgre-sqlcatalog-source))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'database))
      (common-lisp:list
       (common-lisp:cons "Database"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'table))
      (common-lisp:list
       (common-lisp:cons "Table"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          postgre-sqlcatalog-source))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (postgre-sqlcatalog-target (:copier common-lisp:nil)
      (:conc-name "struct-shape-postgre-sqlcatalog-target-"))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or node-name common-lisp:null))
   (inputs (common-lisp:error ":inputs is required") :type
    (common-lisp:or one-input common-lisp:null))
   (database (common-lisp:error ":database is required") :type
    (common-lisp:or enclosed-in-string-property common-lisp:null))
   (table (common-lisp:error ":table is required") :type
    (common-lisp:or enclosed-in-string-property common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'postgre-sqlcatalog-target
                    'make-postgre-sqlcatalog-target))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          postgre-sqlcatalog-target))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          postgre-sqlcatalog-target))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'inputs))
      (common-lisp:list
       (common-lisp:cons "Inputs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'database))
      (common-lisp:list
       (common-lisp:cons "Database"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'table))
      (common-lisp:list
       (common-lisp:cons "Table"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          postgre-sqlcatalog-target))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (predecessor (:copier common-lisp:nil)
      (:conc-name "struct-shape-predecessor-"))
   (job-name common-lisp:nil :type
    (common-lisp:or name-string common-lisp:null))
   (run-id common-lisp:nil :type (common-lisp:or id-string common-lisp:null)))
 (common-lisp:export (common-lisp:list 'predecessor 'make-predecessor))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input predecessor))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input predecessor))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-name))
      (common-lisp:list
       (common-lisp:cons "JobName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'run-id))
      (common-lisp:list
       (common-lisp:cons "RunId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input predecessor))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype predecessor-list ()
   '(trivial-types:proper-list predecessor))
 (common-lisp:defun |make-predecessor-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list predecessor))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (predicate (:copier common-lisp:nil)
      (:conc-name "struct-shape-predicate-"))
   (logical common-lisp:nil :type (common-lisp:or logical common-lisp:null))
   (conditions common-lisp:nil :type
    (common-lisp:or condition-list common-lisp:null)))
 (common-lisp:export (common-lisp:list 'predicate 'make-predicate))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input predicate))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input predicate))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'logical))
      (common-lisp:list
       (common-lisp:cons "Logical"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'conditions))
      (common-lisp:list
       (common-lisp:cons "Conditions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input predicate))
   common-lisp:nil))
(common-lisp:deftype predicate-string () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (principal-permissions (:copier common-lisp:nil)
      (:conc-name "struct-shape-principal-permissions-"))
   (principal common-lisp:nil :type
    (common-lisp:or data-lake-principal common-lisp:null))
   (permissions common-lisp:nil :type
    (common-lisp:or permission-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'principal-permissions 'make-principal-permissions))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          principal-permissions))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          principal-permissions))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'principal))
      (common-lisp:list
       (common-lisp:cons "Principal"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'permissions))
      (common-lisp:list
       (common-lisp:cons "Permissions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          principal-permissions))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype principal-permissions-list ()
   '(trivial-types:proper-list principal-permissions))
 (common-lisp:defun |make-principal-permissions-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list principal-permissions))
   aws-sdk/generator/shape::members))
(common-lisp:deftype principal-type () 'common-lisp:string)
(common-lisp:deftype prob () 'common-lisp:double-float)
(common-lisp:progn
 (common-lisp:defstruct
     (property-predicate (:copier common-lisp:nil)
      (:conc-name "struct-shape-property-predicate-"))
   (key common-lisp:nil :type (common-lisp:or value-string common-lisp:null))
   (value common-lisp:nil :type (common-lisp:or value-string common-lisp:null))
   (comparator common-lisp:nil :type
    (common-lisp:or comparator common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'property-predicate 'make-property-predicate))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input property-predicate))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input property-predicate))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key))
      (common-lisp:list
       (common-lisp:cons "Key"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "Value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'comparator))
      (common-lisp:list
       (common-lisp:cons "Comparator"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input property-predicate))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype public-keys-list ()
   '(trivial-types:proper-list generic-string))
 (common-lisp:defun |make-public-keys-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list generic-string))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (put-data-catalog-encryption-settings-request (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-put-data-catalog-encryption-settings-request-"))
   (catalog-id common-lisp:nil :type
    (common-lisp:or catalog-id-string common-lisp:null))
   (data-catalog-encryption-settings
    (common-lisp:error ":data-catalog-encryption-settings is required") :type
    (common-lisp:or data-catalog-encryption-settings common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'put-data-catalog-encryption-settings-request
                    'make-put-data-catalog-encryption-settings-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-data-catalog-encryption-settings-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-data-catalog-encryption-settings-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'catalog-id))
      (common-lisp:list
       (common-lisp:cons "CatalogId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'data-catalog-encryption-settings))
      (common-lisp:list
       (common-lisp:cons "DataCatalogEncryptionSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-data-catalog-encryption-settings-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (put-data-catalog-encryption-settings-response (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-put-data-catalog-encryption-settings-response-")))
 (common-lisp:export
  (common-lisp:list 'put-data-catalog-encryption-settings-response
                    'make-put-data-catalog-encryption-settings-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-data-catalog-encryption-settings-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-data-catalog-encryption-settings-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-data-catalog-encryption-settings-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (put-resource-policy-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-put-resource-policy-request-"))
   (policy-in-json (common-lisp:error ":policy-in-json is required") :type
    (common-lisp:or policy-json-string common-lisp:null))
   (resource-arn common-lisp:nil :type
    (common-lisp:or glue-resource-arn common-lisp:null))
   (policy-hash-condition common-lisp:nil :type
    (common-lisp:or hash-string common-lisp:null))
   (policy-exists-condition common-lisp:nil :type
    (common-lisp:or exist-condition common-lisp:null))
   (enable-hybrid common-lisp:nil :type
    (common-lisp:or enable-hybrid-values common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'put-resource-policy-request
                    'make-put-resource-policy-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-resource-policy-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-resource-policy-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-in-json))
      (common-lisp:list
       (common-lisp:cons "PolicyInJson"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-arn))
      (common-lisp:list
       (common-lisp:cons "ResourceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'policy-hash-condition))
      (common-lisp:list
       (common-lisp:cons "PolicyHashCondition"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'policy-exists-condition))
      (common-lisp:list
       (common-lisp:cons "PolicyExistsCondition"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'enable-hybrid))
      (common-lisp:list
       (common-lisp:cons "EnableHybrid"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-resource-policy-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (put-resource-policy-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-put-resource-policy-response-"))
   (policy-hash common-lisp:nil :type
    (common-lisp:or hash-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'put-resource-policy-response
                    'make-put-resource-policy-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-resource-policy-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-resource-policy-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-hash))
      (common-lisp:list
       (common-lisp:cons "PolicyHash"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-resource-policy-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (put-schema-version-metadata-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-put-schema-version-metadata-input-"))
   (schema-id common-lisp:nil :type
    (common-lisp:or schema-id common-lisp:null))
   (schema-version-number common-lisp:nil :type
    (common-lisp:or schema-version-number common-lisp:null))
   (schema-version-id common-lisp:nil :type
    (common-lisp:or schema-version-id-string common-lisp:null))
   (metadata-key-value (common-lisp:error ":metadata-key-value is required")
    :type (common-lisp:or metadata-key-value-pair common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'put-schema-version-metadata-input
                    'make-put-schema-version-metadata-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-schema-version-metadata-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-schema-version-metadata-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'schema-id))
      (common-lisp:list
       (common-lisp:cons "SchemaId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'schema-version-number))
      (common-lisp:list
       (common-lisp:cons "SchemaVersionNumber"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'schema-version-id))
      (common-lisp:list
       (common-lisp:cons "SchemaVersionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metadata-key-value))
      (common-lisp:list
       (common-lisp:cons "MetadataKeyValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-schema-version-metadata-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (put-schema-version-metadata-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-put-schema-version-metadata-response-"))
   (schema-arn common-lisp:nil :type
    (common-lisp:or glue-resource-arn common-lisp:null))
   (schema-name common-lisp:nil :type
    (common-lisp:or schema-registry-name-string common-lisp:null))
   (registry-name common-lisp:nil :type
    (common-lisp:or schema-registry-name-string common-lisp:null))
   (latest-version common-lisp:nil :type
    (common-lisp:or latest-schema-version-boolean common-lisp:null))
   (version-number common-lisp:nil :type
    (common-lisp:or version-long-number common-lisp:null))
   (schema-version-id common-lisp:nil :type
    (common-lisp:or schema-version-id-string common-lisp:null))
   (metadata-key common-lisp:nil :type
    (common-lisp:or metadata-key-string common-lisp:null))
   (metadata-value common-lisp:nil :type
    (common-lisp:or metadata-value-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'put-schema-version-metadata-response
                    'make-put-schema-version-metadata-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-schema-version-metadata-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-schema-version-metadata-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'schema-arn))
      (common-lisp:list
       (common-lisp:cons "SchemaArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'schema-name))
      (common-lisp:list
       (common-lisp:cons "SchemaName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'registry-name))
      (common-lisp:list
       (common-lisp:cons "RegistryName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'latest-version))
      (common-lisp:list
       (common-lisp:cons "LatestVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version-number))
      (common-lisp:list
       (common-lisp:cons "VersionNumber"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'schema-version-id))
      (common-lisp:list
       (common-lisp:cons "SchemaVersionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metadata-key))
      (common-lisp:list
       (common-lisp:cons "MetadataKey"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metadata-value))
      (common-lisp:list
       (common-lisp:cons "MetadataValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-schema-version-metadata-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (put-workflow-run-properties-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-put-workflow-run-properties-request-"))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or name-string common-lisp:null))
   (run-id (common-lisp:error ":run-id is required") :type
    (common-lisp:or id-string common-lisp:null))
   (run-properties (common-lisp:error ":run-properties is required") :type
    (common-lisp:or workflow-run-properties common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'put-workflow-run-properties-request
                    'make-put-workflow-run-properties-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-workflow-run-properties-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-workflow-run-properties-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'run-id))
      (common-lisp:list
       (common-lisp:cons "RunId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'run-properties))
      (common-lisp:list
       (common-lisp:cons "RunProperties"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-workflow-run-properties-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (put-workflow-run-properties-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-put-workflow-run-properties-response-")))
 (common-lisp:export
  (common-lisp:list 'put-workflow-run-properties-response
                    'make-put-workflow-run-properties-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-workflow-run-properties-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-workflow-run-properties-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-workflow-run-properties-response))
   common-lisp:nil))
(common-lisp:deftype python-script () 'common-lisp:string)
(common-lisp:deftype python-version-string () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (query-schema-version-metadata-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-query-schema-version-metadata-input-"))
   (schema-id common-lisp:nil :type
    (common-lisp:or schema-id common-lisp:null))
   (schema-version-number common-lisp:nil :type
    (common-lisp:or schema-version-number common-lisp:null))
   (schema-version-id common-lisp:nil :type
    (common-lisp:or schema-version-id-string common-lisp:null))
   (metadata-list common-lisp:nil :type
    (common-lisp:or metadata-list common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or query-schema-version-metadata-max-results
                    common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or schema-registry-token-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'query-schema-version-metadata-input
                    'make-query-schema-version-metadata-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          query-schema-version-metadata-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          query-schema-version-metadata-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'schema-id))
      (common-lisp:list
       (common-lisp:cons "SchemaId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'schema-version-number))
      (common-lisp:list
       (common-lisp:cons "SchemaVersionNumber"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'schema-version-id))
      (common-lisp:list
       (common-lisp:cons "SchemaVersionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metadata-list))
      (common-lisp:list
       (common-lisp:cons "MetadataList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          query-schema-version-metadata-input))
   common-lisp:nil))
(common-lisp:deftype query-schema-version-metadata-max-results ()
  'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defstruct
     (query-schema-version-metadata-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-query-schema-version-metadata-response-"))
   (metadata-info-map common-lisp:nil :type
    (common-lisp:or metadata-info-map common-lisp:null))
   (schema-version-id common-lisp:nil :type
    (common-lisp:or schema-version-id-string common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or schema-registry-token-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'query-schema-version-metadata-response
                    'make-query-schema-version-metadata-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          query-schema-version-metadata-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          query-schema-version-metadata-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metadata-info-map))
      (common-lisp:list
       (common-lisp:cons "MetadataInfoMap"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'schema-version-id))
      (common-lisp:list
       (common-lisp:cons "SchemaVersionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          query-schema-version-metadata-response))
   common-lisp:nil))
(common-lisp:deftype quote-char () 'common-lisp:string)
(common-lisp:deftype records-count () 'common-lisp:integer)
(common-lisp:deftype recrawl-behavior () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (recrawl-policy (:copier common-lisp:nil)
      (:conc-name "struct-shape-recrawl-policy-"))
   (recrawl-behavior common-lisp:nil :type
    (common-lisp:or recrawl-behavior common-lisp:null)))
 (common-lisp:export (common-lisp:list 'recrawl-policy 'make-recrawl-policy))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input recrawl-policy))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input recrawl-policy))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'recrawl-behavior))
      (common-lisp:list
       (common-lisp:cons "RecrawlBehavior"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input recrawl-policy))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (redshift-source (:copier common-lisp:nil)
      (:conc-name "struct-shape-redshift-source-"))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or node-name common-lisp:null))
   (database (common-lisp:error ":database is required") :type
    (common-lisp:or enclosed-in-string-property common-lisp:null))
   (table (common-lisp:error ":table is required") :type
    (common-lisp:or enclosed-in-string-property common-lisp:null))
   (redshift-tmp-dir common-lisp:nil :type
    (common-lisp:or enclosed-in-string-property common-lisp:null))
   (tmp-dir-iamrole common-lisp:nil :type
    (common-lisp:or enclosed-in-string-property common-lisp:null)))
 (common-lisp:export (common-lisp:list 'redshift-source 'make-redshift-source))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input redshift-source))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input redshift-source))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'database))
      (common-lisp:list
       (common-lisp:cons "Database"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'table))
      (common-lisp:list
       (common-lisp:cons "Table"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'redshift-tmp-dir))
      (common-lisp:list
       (common-lisp:cons "RedshiftTmpDir"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tmp-dir-iamrole))
      (common-lisp:list
       (common-lisp:cons "TmpDirIAMRole"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input redshift-source))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (redshift-target (:copier common-lisp:nil)
      (:conc-name "struct-shape-redshift-target-"))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or node-name common-lisp:null))
   (inputs (common-lisp:error ":inputs is required") :type
    (common-lisp:or one-input common-lisp:null))
   (database (common-lisp:error ":database is required") :type
    (common-lisp:or enclosed-in-string-property common-lisp:null))
   (table (common-lisp:error ":table is required") :type
    (common-lisp:or enclosed-in-string-property common-lisp:null))
   (redshift-tmp-dir common-lisp:nil :type
    (common-lisp:or enclosed-in-string-property common-lisp:null))
   (tmp-dir-iamrole common-lisp:nil :type
    (common-lisp:or enclosed-in-string-property common-lisp:null))
   (upsert-redshift-options common-lisp:nil :type
    (common-lisp:or upsert-redshift-target-options common-lisp:null)))
 (common-lisp:export (common-lisp:list 'redshift-target 'make-redshift-target))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input redshift-target))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input redshift-target))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'inputs))
      (common-lisp:list
       (common-lisp:cons "Inputs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'database))
      (common-lisp:list
       (common-lisp:cons "Database"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'table))
      (common-lisp:list
       (common-lisp:cons "Table"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'redshift-tmp-dir))
      (common-lisp:list
       (common-lisp:cons "RedshiftTmpDir"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tmp-dir-iamrole))
      (common-lisp:list
       (common-lisp:cons "TmpDirIAMRole"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'upsert-redshift-options))
      (common-lisp:list
       (common-lisp:cons "UpsertRedshiftOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input redshift-target))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (register-schema-version-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-register-schema-version-input-"))
   (schema-id (common-lisp:error ":schema-id is required") :type
    (common-lisp:or schema-id common-lisp:null))
   (schema-definition (common-lisp:error ":schema-definition is required")
    :type (common-lisp:or schema-definition-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'register-schema-version-input
                    'make-register-schema-version-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          register-schema-version-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          register-schema-version-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'schema-id))
      (common-lisp:list
       (common-lisp:cons "SchemaId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'schema-definition))
      (common-lisp:list
       (common-lisp:cons "SchemaDefinition"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          register-schema-version-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (register-schema-version-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-register-schema-version-response-"))
   (schema-version-id common-lisp:nil :type
    (common-lisp:or schema-version-id-string common-lisp:null))
   (version-number common-lisp:nil :type
    (common-lisp:or version-long-number common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or schema-version-status common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'register-schema-version-response
                    'make-register-schema-version-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          register-schema-version-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          register-schema-version-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'schema-version-id))
      (common-lisp:list
       (common-lisp:cons "SchemaVersionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version-number))
      (common-lisp:list
       (common-lisp:cons "VersionNumber"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          register-schema-version-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (registry-id (:copier common-lisp:nil)
      (:conc-name "struct-shape-registry-id-"))
   (registry-name common-lisp:nil :type
    (common-lisp:or schema-registry-name-string common-lisp:null))
   (registry-arn common-lisp:nil :type
    (common-lisp:or glue-resource-arn common-lisp:null)))
 (common-lisp:export (common-lisp:list 'registry-id 'make-registry-id))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input registry-id))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input registry-id))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'registry-name))
      (common-lisp:list
       (common-lisp:cons "RegistryName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'registry-arn))
      (common-lisp:list
       (common-lisp:cons "RegistryArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input registry-id))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype registry-list-definition ()
   '(trivial-types:proper-list registry-list-item))
 (common-lisp:defun |make-registry-list-definition|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list registry-list-item))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (registry-list-item (:copier common-lisp:nil)
      (:conc-name "struct-shape-registry-list-item-"))
   (registry-name common-lisp:nil :type
    (common-lisp:or schema-registry-name-string common-lisp:null))
   (registry-arn common-lisp:nil :type
    (common-lisp:or glue-resource-arn common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or description-string common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or registry-status common-lisp:null))
   (created-time common-lisp:nil :type
    (common-lisp:or created-timestamp common-lisp:null))
   (updated-time common-lisp:nil :type
    (common-lisp:or updated-timestamp common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'registry-list-item 'make-registry-list-item))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input registry-list-item))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input registry-list-item))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'registry-name))
      (common-lisp:list
       (common-lisp:cons "RegistryName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'registry-arn))
      (common-lisp:list
       (common-lisp:cons "RegistryArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-time))
      (common-lisp:list
       (common-lisp:cons "CreatedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'updated-time))
      (common-lisp:list
       (common-lisp:cons "UpdatedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input registry-list-item))
   common-lisp:nil))
(common-lisp:deftype registry-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (relational-catalog-source (:copier common-lisp:nil)
      (:conc-name "struct-shape-relational-catalog-source-"))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or node-name common-lisp:null))
   (database (common-lisp:error ":database is required") :type
    (common-lisp:or enclosed-in-string-property common-lisp:null))
   (table (common-lisp:error ":table is required") :type
    (common-lisp:or enclosed-in-string-property common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'relational-catalog-source
                    'make-relational-catalog-source))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          relational-catalog-source))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          relational-catalog-source))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'database))
      (common-lisp:list
       (common-lisp:cons "Database"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'table))
      (common-lisp:list
       (common-lisp:cons "Table"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          relational-catalog-source))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (remove-schema-version-metadata-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-remove-schema-version-metadata-input-"))
   (schema-id common-lisp:nil :type
    (common-lisp:or schema-id common-lisp:null))
   (schema-version-number common-lisp:nil :type
    (common-lisp:or schema-version-number common-lisp:null))
   (schema-version-id common-lisp:nil :type
    (common-lisp:or schema-version-id-string common-lisp:null))
   (metadata-key-value (common-lisp:error ":metadata-key-value is required")
    :type (common-lisp:or metadata-key-value-pair common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'remove-schema-version-metadata-input
                    'make-remove-schema-version-metadata-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          remove-schema-version-metadata-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          remove-schema-version-metadata-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'schema-id))
      (common-lisp:list
       (common-lisp:cons "SchemaId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'schema-version-number))
      (common-lisp:list
       (common-lisp:cons "SchemaVersionNumber"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'schema-version-id))
      (common-lisp:list
       (common-lisp:cons "SchemaVersionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metadata-key-value))
      (common-lisp:list
       (common-lisp:cons "MetadataKeyValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          remove-schema-version-metadata-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (remove-schema-version-metadata-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-remove-schema-version-metadata-response-"))
   (schema-arn common-lisp:nil :type
    (common-lisp:or glue-resource-arn common-lisp:null))
   (schema-name common-lisp:nil :type
    (common-lisp:or schema-registry-name-string common-lisp:null))
   (registry-name common-lisp:nil :type
    (common-lisp:or schema-registry-name-string common-lisp:null))
   (latest-version common-lisp:nil :type
    (common-lisp:or latest-schema-version-boolean common-lisp:null))
   (version-number common-lisp:nil :type
    (common-lisp:or version-long-number common-lisp:null))
   (schema-version-id common-lisp:nil :type
    (common-lisp:or schema-version-id-string common-lisp:null))
   (metadata-key common-lisp:nil :type
    (common-lisp:or metadata-key-string common-lisp:null))
   (metadata-value common-lisp:nil :type
    (common-lisp:or metadata-value-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'remove-schema-version-metadata-response
                    'make-remove-schema-version-metadata-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          remove-schema-version-metadata-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          remove-schema-version-metadata-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'schema-arn))
      (common-lisp:list
       (common-lisp:cons "SchemaArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'schema-name))
      (common-lisp:list
       (common-lisp:cons "SchemaName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'registry-name))
      (common-lisp:list
       (common-lisp:cons "RegistryName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'latest-version))
      (common-lisp:list
       (common-lisp:cons "LatestVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version-number))
      (common-lisp:list
       (common-lisp:cons "VersionNumber"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'schema-version-id))
      (common-lisp:list
       (common-lisp:cons "SchemaVersionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metadata-key))
      (common-lisp:list
       (common-lisp:cons "MetadataKey"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metadata-value))
      (common-lisp:list
       (common-lisp:cons "MetadataValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          remove-schema-version-metadata-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (rename-field (:copier common-lisp:nil)
      (:conc-name "struct-shape-rename-field-"))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or node-name common-lisp:null))
   (inputs (common-lisp:error ":inputs is required") :type
    (common-lisp:or one-input common-lisp:null))
   (source-path (common-lisp:error ":source-path is required") :type
    (common-lisp:or enclosed-in-string-properties common-lisp:null))
   (target-path (common-lisp:error ":target-path is required") :type
    (common-lisp:or enclosed-in-string-properties common-lisp:null)))
 (common-lisp:export (common-lisp:list 'rename-field 'make-rename-field))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input rename-field))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input rename-field))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'inputs))
      (common-lisp:list
       (common-lisp:cons "Inputs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-path))
      (common-lisp:list
       (common-lisp:cons "SourcePath"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target-path))
      (common-lisp:list
       (common-lisp:cons "TargetPath"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input rename-field))
   common-lisp:nil))
(common-lisp:deftype replace-boolean () 'common-lisp:boolean)
(common-lisp:progn
 (common-lisp:defstruct
     (reset-job-bookmark-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-reset-job-bookmark-request-"))
   (job-name (common-lisp:error ":job-name is required") :type
    (common-lisp:or job-name common-lisp:null))
   (run-id common-lisp:nil :type (common-lisp:or run-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'reset-job-bookmark-request
                    'make-reset-job-bookmark-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          reset-job-bookmark-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          reset-job-bookmark-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-name))
      (common-lisp:list
       (common-lisp:cons "JobName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'run-id))
      (common-lisp:list
       (common-lisp:cons "RunId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          reset-job-bookmark-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (reset-job-bookmark-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-reset-job-bookmark-response-"))
   (job-bookmark-entry common-lisp:nil :type
    (common-lisp:or job-bookmark-entry common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'reset-job-bookmark-response
                    'make-reset-job-bookmark-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          reset-job-bookmark-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          reset-job-bookmark-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-bookmark-entry))
      (common-lisp:list
       (common-lisp:cons "JobBookmarkEntry"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          reset-job-bookmark-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition resource-not-ready-exception
     (glue-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       resource-not-ready-exception-message)))
 (common-lisp:export
  (common-lisp:list 'resource-not-ready-exception
                    'resource-not-ready-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition resource-number-limit-exceeded-exception
     (glue-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       resource-number-limit-exceeded-exception-message)))
 (common-lisp:export
  (common-lisp:list 'resource-number-limit-exceeded-exception
                    'resource-number-limit-exceeded-exception-message)))
(common-lisp:deftype resource-share-type () 'common-lisp:string)
(common-lisp:deftype resource-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (resource-uri (:copier common-lisp:nil)
      (:conc-name "struct-shape-resource-uri-"))
   (resource-type common-lisp:nil :type
    (common-lisp:or resource-type common-lisp:null))
   (uri common-lisp:nil :type (common-lisp:or uri common-lisp:null)))
 (common-lisp:export (common-lisp:list 'resource-uri 'make-resource-uri))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input resource-uri))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input resource-uri))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-type))
      (common-lisp:list
       (common-lisp:cons "ResourceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'uri))
      (common-lisp:list
       (common-lisp:cons "Uri"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input resource-uri))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype resource-uri-list ()
   '(trivial-types:proper-list resource-uri))
 (common-lisp:defun |make-resource-uri-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list resource-uri))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (resume-workflow-run-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-resume-workflow-run-request-"))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or name-string common-lisp:null))
   (run-id (common-lisp:error ":run-id is required") :type
    (common-lisp:or id-string common-lisp:null))
   (node-ids (common-lisp:error ":node-ids is required") :type
    (common-lisp:or node-id-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'resume-workflow-run-request
                    'make-resume-workflow-run-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          resume-workflow-run-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          resume-workflow-run-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'run-id))
      (common-lisp:list
       (common-lisp:cons "RunId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'node-ids))
      (common-lisp:list
       (common-lisp:cons "NodeIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          resume-workflow-run-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (resume-workflow-run-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-resume-workflow-run-response-"))
   (run-id common-lisp:nil :type (common-lisp:or id-string common-lisp:null))
   (node-ids common-lisp:nil :type
    (common-lisp:or node-id-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'resume-workflow-run-response
                    'make-resume-workflow-run-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          resume-workflow-run-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          resume-workflow-run-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'run-id))
      (common-lisp:list
       (common-lisp:cons "RunId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'node-ids))
      (common-lisp:list
       (common-lisp:cons "NodeIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          resume-workflow-run-response))
   common-lisp:nil))
(common-lisp:deftype role () 'common-lisp:string)
(common-lisp:deftype role-arn () 'common-lisp:string)
(common-lisp:deftype role-string () 'common-lisp:string)
(common-lisp:deftype row-tag () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype ruleset-names ()
   '(trivial-types:proper-list name-string))
 (common-lisp:defun |make-ruleset-names|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list name-string))
   aws-sdk/generator/shape::members))
(common-lisp:deftype run-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (run-statement-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-run-statement-request-"))
   (session-id (common-lisp:error ":session-id is required") :type
    (common-lisp:or name-string common-lisp:null))
   (code (common-lisp:error ":code is required") :type
    (common-lisp:or orchestration-statement-code-string common-lisp:null))
   (request-origin common-lisp:nil :type
    (common-lisp:or orchestration-name-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'run-statement-request 'make-run-statement-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          run-statement-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          run-statement-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'session-id))
      (common-lisp:list
       (common-lisp:cons "SessionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'code))
      (common-lisp:list
       (common-lisp:cons "Code"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-origin))
      (common-lisp:list
       (common-lisp:cons "RequestOrigin"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          run-statement-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (run-statement-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-run-statement-response-"))
   (id common-lisp:nil :type (common-lisp:or integer-value common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'run-statement-response 'make-run-statement-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          run-statement-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          run-statement-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          run-statement-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (s3catalog-delta-source (:copier common-lisp:nil)
      (:conc-name "struct-shape-s3catalog-delta-source-"))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or node-name common-lisp:null))
   (database (common-lisp:error ":database is required") :type
    (common-lisp:or enclosed-in-string-property common-lisp:null))
   (table (common-lisp:error ":table is required") :type
    (common-lisp:or enclosed-in-string-property common-lisp:null))
   (additional-delta-options common-lisp:nil :type
    (common-lisp:or additional-options common-lisp:null))
   (output-schemas common-lisp:nil :type
    (common-lisp:or glue-schemas common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 's3catalog-delta-source 'make-s3catalog-delta-source))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          s3catalog-delta-source))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          s3catalog-delta-source))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'database))
      (common-lisp:list
       (common-lisp:cons "Database"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'table))
      (common-lisp:list
       (common-lisp:cons "Table"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'additional-delta-options))
      (common-lisp:list
       (common-lisp:cons "AdditionalDeltaOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'output-schemas))
      (common-lisp:list
       (common-lisp:cons "OutputSchemas"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          s3catalog-delta-source))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (s3catalog-hudi-source (:copier common-lisp:nil)
      (:conc-name "struct-shape-s3catalog-hudi-source-"))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or node-name common-lisp:null))
   (database (common-lisp:error ":database is required") :type
    (common-lisp:or enclosed-in-string-property common-lisp:null))
   (table (common-lisp:error ":table is required") :type
    (common-lisp:or enclosed-in-string-property common-lisp:null))
   (additional-hudi-options common-lisp:nil :type
    (common-lisp:or additional-options common-lisp:null))
   (output-schemas common-lisp:nil :type
    (common-lisp:or glue-schemas common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 's3catalog-hudi-source 'make-s3catalog-hudi-source))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          s3catalog-hudi-source))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          s3catalog-hudi-source))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'database))
      (common-lisp:list
       (common-lisp:cons "Database"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'table))
      (common-lisp:list
       (common-lisp:cons "Table"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'additional-hudi-options))
      (common-lisp:list
       (common-lisp:cons "AdditionalHudiOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'output-schemas))
      (common-lisp:list
       (common-lisp:cons "OutputSchemas"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          s3catalog-hudi-source))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (s3catalog-source (:copier common-lisp:nil)
      (:conc-name "struct-shape-s3catalog-source-"))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or node-name common-lisp:null))
   (database (common-lisp:error ":database is required") :type
    (common-lisp:or enclosed-in-string-property common-lisp:null))
   (table (common-lisp:error ":table is required") :type
    (common-lisp:or enclosed-in-string-property common-lisp:null))
   (partition-predicate common-lisp:nil :type
    (common-lisp:or enclosed-in-string-property common-lisp:null))
   (additional-options common-lisp:nil :type
    (common-lisp:or s3source-additional-options common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 's3catalog-source 'make-s3catalog-source))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input s3catalog-source))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input s3catalog-source))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'database))
      (common-lisp:list
       (common-lisp:cons "Database"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'table))
      (common-lisp:list
       (common-lisp:cons "Table"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'partition-predicate))
      (common-lisp:list
       (common-lisp:cons "PartitionPredicate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'additional-options))
      (common-lisp:list
       (common-lisp:cons "AdditionalOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input s3catalog-source))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (s3catalog-target (:copier common-lisp:nil)
      (:conc-name "struct-shape-s3catalog-target-"))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or node-name common-lisp:null))
   (inputs (common-lisp:error ":inputs is required") :type
    (common-lisp:or one-input common-lisp:null))
   (partition-keys common-lisp:nil :type
    (common-lisp:or glue-studio-path-list common-lisp:null))
   (table (common-lisp:error ":table is required") :type
    (common-lisp:or enclosed-in-string-property common-lisp:null))
   (database (common-lisp:error ":database is required") :type
    (common-lisp:or enclosed-in-string-property common-lisp:null))
   (schema-change-policy common-lisp:nil :type
    (common-lisp:or catalog-schema-change-policy common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 's3catalog-target 'make-s3catalog-target))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input s3catalog-target))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input s3catalog-target))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'inputs))
      (common-lisp:list
       (common-lisp:cons "Inputs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'partition-keys))
      (common-lisp:list
       (common-lisp:cons "PartitionKeys"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'table))
      (common-lisp:list
       (common-lisp:cons "Table"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'database))
      (common-lisp:list
       (common-lisp:cons "Database"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'schema-change-policy))
      (common-lisp:list
       (common-lisp:cons "SchemaChangePolicy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input s3catalog-target))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (s3csv-source (:copier common-lisp:nil)
      (:conc-name "struct-shape-s3csv-source-"))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or node-name common-lisp:null))
   (paths (common-lisp:error ":paths is required") :type
    (common-lisp:or enclosed-in-string-properties common-lisp:null))
   (compression-type common-lisp:nil :type
    (common-lisp:or compression-type common-lisp:null))
   (exclusions common-lisp:nil :type
    (common-lisp:or enclosed-in-string-properties common-lisp:null))
   (group-size common-lisp:nil :type
    (common-lisp:or enclosed-in-string-property common-lisp:null))
   (group-files common-lisp:nil :type
    (common-lisp:or enclosed-in-string-property common-lisp:null))
   (recurse common-lisp:nil :type
    (common-lisp:or boxed-boolean common-lisp:null))
   (max-band common-lisp:nil :type
    (common-lisp:or boxed-non-negative-int common-lisp:null))
   (max-files-in-band common-lisp:nil :type
    (common-lisp:or boxed-non-negative-int common-lisp:null))
   (additional-options common-lisp:nil :type
    (common-lisp:or s3direct-source-additional-options common-lisp:null))
   (separator (common-lisp:error ":separator is required") :type
    (common-lisp:or separator common-lisp:null))
   (escaper common-lisp:nil :type
    (common-lisp:or enclosed-in-string-property-with-quote common-lisp:null))
   (quote-char (common-lisp:error ":quote-char is required") :type
    (common-lisp:or quote-char common-lisp:null))
   (multiline common-lisp:nil :type
    (common-lisp:or boxed-boolean common-lisp:null))
   (with-header common-lisp:nil :type
    (common-lisp:or boxed-boolean common-lisp:null))
   (write-header common-lisp:nil :type
    (common-lisp:or boxed-boolean common-lisp:null))
   (skip-first common-lisp:nil :type
    (common-lisp:or boxed-boolean common-lisp:null))
   (optimize-performance common-lisp:nil :type
    (common-lisp:or boolean-value common-lisp:null))
   (output-schemas common-lisp:nil :type
    (common-lisp:or glue-schemas common-lisp:null)))
 (common-lisp:export (common-lisp:list 's3csv-source 'make-s3csv-source))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input s3csv-source))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input s3csv-source))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'paths))
      (common-lisp:list
       (common-lisp:cons "Paths"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'compression-type))
      (common-lisp:list
       (common-lisp:cons "CompressionType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'exclusions))
      (common-lisp:list
       (common-lisp:cons "Exclusions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'group-size))
      (common-lisp:list
       (common-lisp:cons "GroupSize"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'group-files))
      (common-lisp:list
       (common-lisp:cons "GroupFiles"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'recurse))
      (common-lisp:list
       (common-lisp:cons "Recurse"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-band))
      (common-lisp:list
       (common-lisp:cons "MaxBand"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-files-in-band))
      (common-lisp:list
       (common-lisp:cons "MaxFilesInBand"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'additional-options))
      (common-lisp:list
       (common-lisp:cons "AdditionalOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'separator))
      (common-lisp:list
       (common-lisp:cons "Separator"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'escaper))
      (common-lisp:list
       (common-lisp:cons "Escaper"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'quote-char))
      (common-lisp:list
       (common-lisp:cons "QuoteChar"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'multiline))
      (common-lisp:list
       (common-lisp:cons "Multiline"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'with-header))
      (common-lisp:list
       (common-lisp:cons "WithHeader"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'write-header))
      (common-lisp:list
       (common-lisp:cons "WriteHeader"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'skip-first))
      (common-lisp:list
       (common-lisp:cons "SkipFirst"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'optimize-performance))
      (common-lisp:list
       (common-lisp:cons "OptimizePerformance"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'output-schemas))
      (common-lisp:list
       (common-lisp:cons "OutputSchemas"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input s3csv-source))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (s3delta-catalog-target (:copier common-lisp:nil)
      (:conc-name "struct-shape-s3delta-catalog-target-"))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or node-name common-lisp:null))
   (inputs (common-lisp:error ":inputs is required") :type
    (common-lisp:or one-input common-lisp:null))
   (partition-keys common-lisp:nil :type
    (common-lisp:or glue-studio-path-list common-lisp:null))
   (table (common-lisp:error ":table is required") :type
    (common-lisp:or enclosed-in-string-property common-lisp:null))
   (database (common-lisp:error ":database is required") :type
    (common-lisp:or enclosed-in-string-property common-lisp:null))
   (additional-options common-lisp:nil :type
    (common-lisp:or additional-options common-lisp:null))
   (schema-change-policy common-lisp:nil :type
    (common-lisp:or catalog-schema-change-policy common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 's3delta-catalog-target 'make-s3delta-catalog-target))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          s3delta-catalog-target))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          s3delta-catalog-target))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'inputs))
      (common-lisp:list
       (common-lisp:cons "Inputs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'partition-keys))
      (common-lisp:list
       (common-lisp:cons "PartitionKeys"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'table))
      (common-lisp:list
       (common-lisp:cons "Table"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'database))
      (common-lisp:list
       (common-lisp:cons "Database"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'additional-options))
      (common-lisp:list
       (common-lisp:cons "AdditionalOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'schema-change-policy))
      (common-lisp:list
       (common-lisp:cons "SchemaChangePolicy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          s3delta-catalog-target))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (s3delta-direct-target (:copier common-lisp:nil)
      (:conc-name "struct-shape-s3delta-direct-target-"))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or node-name common-lisp:null))
   (inputs (common-lisp:error ":inputs is required") :type
    (common-lisp:or one-input common-lisp:null))
   (partition-keys common-lisp:nil :type
    (common-lisp:or glue-studio-path-list common-lisp:null))
   (path (common-lisp:error ":path is required") :type
    (common-lisp:or enclosed-in-string-property common-lisp:null))
   (compression (common-lisp:error ":compression is required") :type
    (common-lisp:or delta-target-compression-type common-lisp:null))
   (format (common-lisp:error ":format is required") :type
    (common-lisp:or target-format common-lisp:null))
   (additional-options common-lisp:nil :type
    (common-lisp:or additional-options common-lisp:null))
   (schema-change-policy common-lisp:nil :type
    (common-lisp:or direct-schema-change-policy common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 's3delta-direct-target 'make-s3delta-direct-target))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          s3delta-direct-target))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          s3delta-direct-target))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'inputs))
      (common-lisp:list
       (common-lisp:cons "Inputs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'partition-keys))
      (common-lisp:list
       (common-lisp:cons "PartitionKeys"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'path))
      (common-lisp:list
       (common-lisp:cons "Path"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'compression))
      (common-lisp:list
       (common-lisp:cons "Compression"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'format))
      (common-lisp:list
       (common-lisp:cons "Format"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'additional-options))
      (common-lisp:list
       (common-lisp:cons "AdditionalOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'schema-change-policy))
      (common-lisp:list
       (common-lisp:cons "SchemaChangePolicy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          s3delta-direct-target))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (s3delta-source (:copier common-lisp:nil)
      (:conc-name "struct-shape-s3delta-source-"))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or node-name common-lisp:null))
   (paths (common-lisp:error ":paths is required") :type
    (common-lisp:or enclosed-in-string-properties common-lisp:null))
   (additional-delta-options common-lisp:nil :type
    (common-lisp:or additional-options common-lisp:null))
   (additional-options common-lisp:nil :type
    (common-lisp:or s3direct-source-additional-options common-lisp:null))
   (output-schemas common-lisp:nil :type
    (common-lisp:or glue-schemas common-lisp:null)))
 (common-lisp:export (common-lisp:list 's3delta-source 'make-s3delta-source))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input s3delta-source))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input s3delta-source))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'paths))
      (common-lisp:list
       (common-lisp:cons "Paths"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'additional-delta-options))
      (common-lisp:list
       (common-lisp:cons "AdditionalDeltaOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'additional-options))
      (common-lisp:list
       (common-lisp:cons "AdditionalOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'output-schemas))
      (common-lisp:list
       (common-lisp:cons "OutputSchemas"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input s3delta-source))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (s3direct-source-additional-options (:copier common-lisp:nil)
      (:conc-name "struct-shape-s3direct-source-additional-options-"))
   (bounded-size common-lisp:nil :type
    (common-lisp:or boxed-long common-lisp:null))
   (bounded-files common-lisp:nil :type
    (common-lisp:or boxed-long common-lisp:null))
   (enable-sample-path common-lisp:nil :type
    (common-lisp:or boxed-boolean common-lisp:null))
   (sample-path common-lisp:nil :type
    (common-lisp:or enclosed-in-string-property common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 's3direct-source-additional-options
                    'make-s3direct-source-additional-options))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          s3direct-source-additional-options))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          s3direct-source-additional-options))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bounded-size))
      (common-lisp:list
       (common-lisp:cons "BoundedSize"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bounded-files))
      (common-lisp:list
       (common-lisp:cons "BoundedFiles"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'enable-sample-path))
      (common-lisp:list
       (common-lisp:cons "EnableSamplePath"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sample-path))
      (common-lisp:list
       (common-lisp:cons "SamplePath"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          s3direct-source-additional-options))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (s3direct-target (:copier common-lisp:nil)
      (:conc-name "struct-shape-s3direct-target-"))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or node-name common-lisp:null))
   (inputs (common-lisp:error ":inputs is required") :type
    (common-lisp:or one-input common-lisp:null))
   (partition-keys common-lisp:nil :type
    (common-lisp:or glue-studio-path-list common-lisp:null))
   (path (common-lisp:error ":path is required") :type
    (common-lisp:or enclosed-in-string-property common-lisp:null))
   (compression common-lisp:nil :type
    (common-lisp:or enclosed-in-string-property common-lisp:null))
   (format (common-lisp:error ":format is required") :type
    (common-lisp:or target-format common-lisp:null))
   (schema-change-policy common-lisp:nil :type
    (common-lisp:or direct-schema-change-policy common-lisp:null)))
 (common-lisp:export (common-lisp:list 's3direct-target 'make-s3direct-target))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input s3direct-target))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input s3direct-target))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'inputs))
      (common-lisp:list
       (common-lisp:cons "Inputs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'partition-keys))
      (common-lisp:list
       (common-lisp:cons "PartitionKeys"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'path))
      (common-lisp:list
       (common-lisp:cons "Path"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'compression))
      (common-lisp:list
       (common-lisp:cons "Compression"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'format))
      (common-lisp:list
       (common-lisp:cons "Format"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'schema-change-policy))
      (common-lisp:list
       (common-lisp:cons "SchemaChangePolicy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input s3direct-target))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (s3encryption (:copier common-lisp:nil)
      (:conc-name "struct-shape-s3encryption-"))
   (s3encryption-mode common-lisp:nil :type
    (common-lisp:or s3encryption-mode common-lisp:null))
   (kms-key-arn common-lisp:nil :type
    (common-lisp:or kms-key-arn common-lisp:null)))
 (common-lisp:export (common-lisp:list 's3encryption 'make-s3encryption))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input s3encryption))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input s3encryption))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3encryption-mode))
      (common-lisp:list
       (common-lisp:cons "S3EncryptionMode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kms-key-arn))
      (common-lisp:list
       (common-lisp:cons "KmsKeyArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input s3encryption))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype s3encryption-list ()
   '(trivial-types:proper-list s3encryption))
 (common-lisp:defun |make-s3encryption-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list s3encryption))
   aws-sdk/generator/shape::members))
(common-lisp:deftype s3encryption-mode () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (s3glue-parquet-target (:copier common-lisp:nil)
      (:conc-name "struct-shape-s3glue-parquet-target-"))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or node-name common-lisp:null))
   (inputs (common-lisp:error ":inputs is required") :type
    (common-lisp:or one-input common-lisp:null))
   (partition-keys common-lisp:nil :type
    (common-lisp:or glue-studio-path-list common-lisp:null))
   (path (common-lisp:error ":path is required") :type
    (common-lisp:or enclosed-in-string-property common-lisp:null))
   (compression common-lisp:nil :type
    (common-lisp:or parquet-compression-type common-lisp:null))
   (schema-change-policy common-lisp:nil :type
    (common-lisp:or direct-schema-change-policy common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 's3glue-parquet-target 'make-s3glue-parquet-target))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          s3glue-parquet-target))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          s3glue-parquet-target))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'inputs))
      (common-lisp:list
       (common-lisp:cons "Inputs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'partition-keys))
      (common-lisp:list
       (common-lisp:cons "PartitionKeys"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'path))
      (common-lisp:list
       (common-lisp:cons "Path"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'compression))
      (common-lisp:list
       (common-lisp:cons "Compression"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'schema-change-policy))
      (common-lisp:list
       (common-lisp:cons "SchemaChangePolicy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          s3glue-parquet-target))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (s3hudi-catalog-target (:copier common-lisp:nil)
      (:conc-name "struct-shape-s3hudi-catalog-target-"))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or node-name common-lisp:null))
   (inputs (common-lisp:error ":inputs is required") :type
    (common-lisp:or one-input common-lisp:null))
   (partition-keys common-lisp:nil :type
    (common-lisp:or glue-studio-path-list common-lisp:null))
   (table (common-lisp:error ":table is required") :type
    (common-lisp:or enclosed-in-string-property common-lisp:null))
   (database (common-lisp:error ":database is required") :type
    (common-lisp:or enclosed-in-string-property common-lisp:null))
   (additional-options (common-lisp:error ":additional-options is required")
    :type (common-lisp:or additional-options common-lisp:null))
   (schema-change-policy common-lisp:nil :type
    (common-lisp:or catalog-schema-change-policy common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 's3hudi-catalog-target 'make-s3hudi-catalog-target))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          s3hudi-catalog-target))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          s3hudi-catalog-target))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'inputs))
      (common-lisp:list
       (common-lisp:cons "Inputs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'partition-keys))
      (common-lisp:list
       (common-lisp:cons "PartitionKeys"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'table))
      (common-lisp:list
       (common-lisp:cons "Table"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'database))
      (common-lisp:list
       (common-lisp:cons "Database"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'additional-options))
      (common-lisp:list
       (common-lisp:cons "AdditionalOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'schema-change-policy))
      (common-lisp:list
       (common-lisp:cons "SchemaChangePolicy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          s3hudi-catalog-target))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (s3hudi-direct-target (:copier common-lisp:nil)
      (:conc-name "struct-shape-s3hudi-direct-target-"))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or node-name common-lisp:null))
   (inputs (common-lisp:error ":inputs is required") :type
    (common-lisp:or one-input common-lisp:null))
   (path (common-lisp:error ":path is required") :type
    (common-lisp:or enclosed-in-string-property common-lisp:null))
   (compression (common-lisp:error ":compression is required") :type
    (common-lisp:or hudi-target-compression-type common-lisp:null))
   (partition-keys common-lisp:nil :type
    (common-lisp:or glue-studio-path-list common-lisp:null))
   (format (common-lisp:error ":format is required") :type
    (common-lisp:or target-format common-lisp:null))
   (additional-options (common-lisp:error ":additional-options is required")
    :type (common-lisp:or additional-options common-lisp:null))
   (schema-change-policy common-lisp:nil :type
    (common-lisp:or direct-schema-change-policy common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 's3hudi-direct-target 'make-s3hudi-direct-target))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input s3hudi-direct-target))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input s3hudi-direct-target))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'inputs))
      (common-lisp:list
       (common-lisp:cons "Inputs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'path))
      (common-lisp:list
       (common-lisp:cons "Path"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'compression))
      (common-lisp:list
       (common-lisp:cons "Compression"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'partition-keys))
      (common-lisp:list
       (common-lisp:cons "PartitionKeys"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'format))
      (common-lisp:list
       (common-lisp:cons "Format"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'additional-options))
      (common-lisp:list
       (common-lisp:cons "AdditionalOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'schema-change-policy))
      (common-lisp:list
       (common-lisp:cons "SchemaChangePolicy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input s3hudi-direct-target))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (s3hudi-source (:copier common-lisp:nil)
      (:conc-name "struct-shape-s3hudi-source-"))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or node-name common-lisp:null))
   (paths (common-lisp:error ":paths is required") :type
    (common-lisp:or enclosed-in-string-properties common-lisp:null))
   (additional-hudi-options common-lisp:nil :type
    (common-lisp:or additional-options common-lisp:null))
   (additional-options common-lisp:nil :type
    (common-lisp:or s3direct-source-additional-options common-lisp:null))
   (output-schemas common-lisp:nil :type
    (common-lisp:or glue-schemas common-lisp:null)))
 (common-lisp:export (common-lisp:list 's3hudi-source 'make-s3hudi-source))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input s3hudi-source))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input s3hudi-source))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'paths))
      (common-lisp:list
       (common-lisp:cons "Paths"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'additional-hudi-options))
      (common-lisp:list
       (common-lisp:cons "AdditionalHudiOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'additional-options))
      (common-lisp:list
       (common-lisp:cons "AdditionalOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'output-schemas))
      (common-lisp:list
       (common-lisp:cons "OutputSchemas"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input s3hudi-source))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (s3json-source (:copier common-lisp:nil)
      (:conc-name "struct-shape-s3json-source-"))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or node-name common-lisp:null))
   (paths (common-lisp:error ":paths is required") :type
    (common-lisp:or enclosed-in-string-properties common-lisp:null))
   (compression-type common-lisp:nil :type
    (common-lisp:or compression-type common-lisp:null))
   (exclusions common-lisp:nil :type
    (common-lisp:or enclosed-in-string-properties common-lisp:null))
   (group-size common-lisp:nil :type
    (common-lisp:or enclosed-in-string-property common-lisp:null))
   (group-files common-lisp:nil :type
    (common-lisp:or enclosed-in-string-property common-lisp:null))
   (recurse common-lisp:nil :type
    (common-lisp:or boxed-boolean common-lisp:null))
   (max-band common-lisp:nil :type
    (common-lisp:or boxed-non-negative-int common-lisp:null))
   (max-files-in-band common-lisp:nil :type
    (common-lisp:or boxed-non-negative-int common-lisp:null))
   (additional-options common-lisp:nil :type
    (common-lisp:or s3direct-source-additional-options common-lisp:null))
   (json-path common-lisp:nil :type
    (common-lisp:or enclosed-in-string-property common-lisp:null))
   (multiline common-lisp:nil :type
    (common-lisp:or boxed-boolean common-lisp:null))
   (output-schemas common-lisp:nil :type
    (common-lisp:or glue-schemas common-lisp:null)))
 (common-lisp:export (common-lisp:list 's3json-source 'make-s3json-source))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input s3json-source))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input s3json-source))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'paths))
      (common-lisp:list
       (common-lisp:cons "Paths"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'compression-type))
      (common-lisp:list
       (common-lisp:cons "CompressionType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'exclusions))
      (common-lisp:list
       (common-lisp:cons "Exclusions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'group-size))
      (common-lisp:list
       (common-lisp:cons "GroupSize"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'group-files))
      (common-lisp:list
       (common-lisp:cons "GroupFiles"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'recurse))
      (common-lisp:list
       (common-lisp:cons "Recurse"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-band))
      (common-lisp:list
       (common-lisp:cons "MaxBand"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-files-in-band))
      (common-lisp:list
       (common-lisp:cons "MaxFilesInBand"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'additional-options))
      (common-lisp:list
       (common-lisp:cons "AdditionalOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'json-path))
      (common-lisp:list
       (common-lisp:cons "JsonPath"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'multiline))
      (common-lisp:list
       (common-lisp:cons "Multiline"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'output-schemas))
      (common-lisp:list
       (common-lisp:cons "OutputSchemas"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input s3json-source))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (s3parquet-source (:copier common-lisp:nil)
      (:conc-name "struct-shape-s3parquet-source-"))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or node-name common-lisp:null))
   (paths (common-lisp:error ":paths is required") :type
    (common-lisp:or enclosed-in-string-properties common-lisp:null))
   (compression-type common-lisp:nil :type
    (common-lisp:or parquet-compression-type common-lisp:null))
   (exclusions common-lisp:nil :type
    (common-lisp:or enclosed-in-string-properties common-lisp:null))
   (group-size common-lisp:nil :type
    (common-lisp:or enclosed-in-string-property common-lisp:null))
   (group-files common-lisp:nil :type
    (common-lisp:or enclosed-in-string-property common-lisp:null))
   (recurse common-lisp:nil :type
    (common-lisp:or boxed-boolean common-lisp:null))
   (max-band common-lisp:nil :type
    (common-lisp:or boxed-non-negative-int common-lisp:null))
   (max-files-in-band common-lisp:nil :type
    (common-lisp:or boxed-non-negative-int common-lisp:null))
   (additional-options common-lisp:nil :type
    (common-lisp:or s3direct-source-additional-options common-lisp:null))
   (output-schemas common-lisp:nil :type
    (common-lisp:or glue-schemas common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 's3parquet-source 'make-s3parquet-source))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input s3parquet-source))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input s3parquet-source))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'paths))
      (common-lisp:list
       (common-lisp:cons "Paths"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'compression-type))
      (common-lisp:list
       (common-lisp:cons "CompressionType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'exclusions))
      (common-lisp:list
       (common-lisp:cons "Exclusions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'group-size))
      (common-lisp:list
       (common-lisp:cons "GroupSize"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'group-files))
      (common-lisp:list
       (common-lisp:cons "GroupFiles"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'recurse))
      (common-lisp:list
       (common-lisp:cons "Recurse"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-band))
      (common-lisp:list
       (common-lisp:cons "MaxBand"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-files-in-band))
      (common-lisp:list
       (common-lisp:cons "MaxFilesInBand"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'additional-options))
      (common-lisp:list
       (common-lisp:cons "AdditionalOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'output-schemas))
      (common-lisp:list
       (common-lisp:cons "OutputSchemas"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input s3parquet-source))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (s3source-additional-options (:copier common-lisp:nil)
      (:conc-name "struct-shape-s3source-additional-options-"))
   (bounded-size common-lisp:nil :type
    (common-lisp:or boxed-long common-lisp:null))
   (bounded-files common-lisp:nil :type
    (common-lisp:or boxed-long common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 's3source-additional-options
                    'make-s3source-additional-options))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          s3source-additional-options))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          s3source-additional-options))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bounded-size))
      (common-lisp:list
       (common-lisp:cons "BoundedSize"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bounded-files))
      (common-lisp:list
       (common-lisp:cons "BoundedFiles"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          s3source-additional-options))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (s3target (:copier common-lisp:nil) (:conc-name "struct-shape-s3target-"))
   (path common-lisp:nil :type (common-lisp:or path common-lisp:null))
   (exclusions common-lisp:nil :type
    (common-lisp:or path-list common-lisp:null))
   (connection-name common-lisp:nil :type
    (common-lisp:or connection-name common-lisp:null))
   (sample-size common-lisp:nil :type
    (common-lisp:or nullable-integer common-lisp:null))
   (event-queue-arn common-lisp:nil :type
    (common-lisp:or event-queue-arn common-lisp:null))
   (dlq-event-queue-arn common-lisp:nil :type
    (common-lisp:or event-queue-arn common-lisp:null)))
 (common-lisp:export (common-lisp:list 's3target 'make-s3target))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input s3target))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input s3target))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'path))
      (common-lisp:list
       (common-lisp:cons "Path"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'exclusions))
      (common-lisp:list
       (common-lisp:cons "Exclusions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'connection-name))
      (common-lisp:list
       (common-lisp:cons "ConnectionName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sample-size))
      (common-lisp:list
       (common-lisp:cons "SampleSize"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'event-queue-arn))
      (common-lisp:list
       (common-lisp:cons "EventQueueArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dlq-event-queue-arn))
      (common-lisp:list
       (common-lisp:cons "DlqEventQueueArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input s3target))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype s3target-list () '(trivial-types:proper-list s3target))
 (common-lisp:defun |make-s3target-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list s3target))
   aws-sdk/generator/shape::members))
(common-lisp:deftype scala-code () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (schedule (:copier common-lisp:nil) (:conc-name "struct-shape-schedule-"))
   (schedule-expression common-lisp:nil :type
    (common-lisp:or cron-expression common-lisp:null))
   (state common-lisp:nil :type
    (common-lisp:or schedule-state common-lisp:null)))
 (common-lisp:export (common-lisp:list 'schedule 'make-schedule))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input schedule))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input schedule))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'schedule-expression))
      (common-lisp:list
       (common-lisp:cons "ScheduleExpression"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "State"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input schedule))
   common-lisp:nil))
(common-lisp:deftype schedule-state () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition scheduler-not-running-exception
     (glue-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       scheduler-not-running-exception-message)))
 (common-lisp:export
  (common-lisp:list 'scheduler-not-running-exception
                    'scheduler-not-running-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition scheduler-running-exception
     (glue-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       scheduler-running-exception-message)))
 (common-lisp:export
  (common-lisp:list 'scheduler-running-exception
                    'scheduler-running-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition scheduler-transitioning-exception
     (glue-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       scheduler-transitioning-exception-message)))
 (common-lisp:export
  (common-lisp:list 'scheduler-transitioning-exception
                    'scheduler-transitioning-exception-message)))
(common-lisp:progn
 (common-lisp:defstruct
     (schema-change-policy (:copier common-lisp:nil)
      (:conc-name "struct-shape-schema-change-policy-"))
   (update-behavior common-lisp:nil :type
    (common-lisp:or update-behavior common-lisp:null))
   (delete-behavior common-lisp:nil :type
    (common-lisp:or delete-behavior common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'schema-change-policy 'make-schema-change-policy))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input schema-change-policy))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input schema-change-policy))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'update-behavior))
      (common-lisp:list
       (common-lisp:cons "UpdateBehavior"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'delete-behavior))
      (common-lisp:list
       (common-lisp:cons "DeleteBehavior"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input schema-change-policy))
   common-lisp:nil))
(common-lisp:deftype schema-checkpoint-number () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defstruct
     (schema-column (:copier common-lisp:nil)
      (:conc-name "struct-shape-schema-column-"))
   (name common-lisp:nil :type
    (common-lisp:or column-name-string common-lisp:null))
   (data-type common-lisp:nil :type
    (common-lisp:or column-type-string common-lisp:null)))
 (common-lisp:export (common-lisp:list 'schema-column 'make-schema-column))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input schema-column))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input schema-column))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-type))
      (common-lisp:list
       (common-lisp:cons "DataType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input schema-column))
   common-lisp:nil))
(common-lisp:deftype schema-definition-diff () 'common-lisp:string)
(common-lisp:deftype schema-definition-string () 'common-lisp:string)
(common-lisp:deftype schema-diff-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (schema-id (:copier common-lisp:nil)
      (:conc-name "struct-shape-schema-id-"))
   (schema-arn common-lisp:nil :type
    (common-lisp:or glue-resource-arn common-lisp:null))
   (schema-name common-lisp:nil :type
    (common-lisp:or schema-registry-name-string common-lisp:null))
   (registry-name common-lisp:nil :type
    (common-lisp:or schema-registry-name-string common-lisp:null)))
 (common-lisp:export (common-lisp:list 'schema-id 'make-schema-id))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input schema-id))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input schema-id))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'schema-arn))
      (common-lisp:list
       (common-lisp:cons "SchemaArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'schema-name))
      (common-lisp:list
       (common-lisp:cons "SchemaName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'registry-name))
      (common-lisp:list
       (common-lisp:cons "RegistryName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input schema-id))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype schema-list-definition ()
   '(trivial-types:proper-list schema-list-item))
 (common-lisp:defun |make-schema-list-definition|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list schema-list-item))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (schema-list-item (:copier common-lisp:nil)
      (:conc-name "struct-shape-schema-list-item-"))
   (registry-name common-lisp:nil :type
    (common-lisp:or schema-registry-name-string common-lisp:null))
   (schema-name common-lisp:nil :type
    (common-lisp:or schema-registry-name-string common-lisp:null))
   (schema-arn common-lisp:nil :type
    (common-lisp:or glue-resource-arn common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or description-string common-lisp:null))
   (schema-status common-lisp:nil :type
    (common-lisp:or schema-status common-lisp:null))
   (created-time common-lisp:nil :type
    (common-lisp:or created-timestamp common-lisp:null))
   (updated-time common-lisp:nil :type
    (common-lisp:or updated-timestamp common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'schema-list-item 'make-schema-list-item))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input schema-list-item))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input schema-list-item))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'registry-name))
      (common-lisp:list
       (common-lisp:cons "RegistryName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'schema-name))
      (common-lisp:list
       (common-lisp:cons "SchemaName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'schema-arn))
      (common-lisp:list
       (common-lisp:cons "SchemaArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'schema-status))
      (common-lisp:list
       (common-lisp:cons "SchemaStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-time))
      (common-lisp:list
       (common-lisp:cons "CreatedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'updated-time))
      (common-lisp:list
       (common-lisp:cons "UpdatedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input schema-list-item))
   common-lisp:nil))
(common-lisp:deftype schema-path-string () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (schema-reference (:copier common-lisp:nil)
      (:conc-name "struct-shape-schema-reference-"))
   (schema-id common-lisp:nil :type
    (common-lisp:or schema-id common-lisp:null))
   (schema-version-id common-lisp:nil :type
    (common-lisp:or schema-version-id-string common-lisp:null))
   (schema-version-number common-lisp:nil :type
    (common-lisp:or version-long-number common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'schema-reference 'make-schema-reference))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input schema-reference))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input schema-reference))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'schema-id))
      (common-lisp:list
       (common-lisp:cons "SchemaId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'schema-version-id))
      (common-lisp:list
       (common-lisp:cons "SchemaVersionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'schema-version-number))
      (common-lisp:list
       (common-lisp:cons "SchemaVersionNumber"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input schema-reference))
   common-lisp:nil))
(common-lisp:deftype schema-registry-name-string () 'common-lisp:string)
(common-lisp:deftype schema-registry-token-string () 'common-lisp:string)
(common-lisp:deftype schema-status () 'common-lisp:string)
(common-lisp:deftype schema-validation-error () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (schema-version-error-item (:copier common-lisp:nil)
      (:conc-name "struct-shape-schema-version-error-item-"))
   (version-number common-lisp:nil :type
    (common-lisp:or version-long-number common-lisp:null))
   (error-details common-lisp:nil :type
    (common-lisp:or error-details common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'schema-version-error-item
                    'make-schema-version-error-item))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          schema-version-error-item))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          schema-version-error-item))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version-number))
      (common-lisp:list
       (common-lisp:cons "VersionNumber"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error-details))
      (common-lisp:list
       (common-lisp:cons "ErrorDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          schema-version-error-item))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype schema-version-error-list ()
   '(trivial-types:proper-list schema-version-error-item))
 (common-lisp:defun |make-schema-version-error-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            schema-version-error-item))
   aws-sdk/generator/shape::members))
(common-lisp:deftype schema-version-id-string () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype schema-version-list ()
   '(trivial-types:proper-list schema-version-list-item))
 (common-lisp:defun |make-schema-version-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            schema-version-list-item))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (schema-version-list-item (:copier common-lisp:nil)
      (:conc-name "struct-shape-schema-version-list-item-"))
   (schema-arn common-lisp:nil :type
    (common-lisp:or glue-resource-arn common-lisp:null))
   (schema-version-id common-lisp:nil :type
    (common-lisp:or schema-version-id-string common-lisp:null))
   (version-number common-lisp:nil :type
    (common-lisp:or version-long-number common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or schema-version-status common-lisp:null))
   (created-time common-lisp:nil :type
    (common-lisp:or created-timestamp common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'schema-version-list-item 'make-schema-version-list-item))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          schema-version-list-item))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          schema-version-list-item))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'schema-arn))
      (common-lisp:list
       (common-lisp:cons "SchemaArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'schema-version-id))
      (common-lisp:list
       (common-lisp:cons "SchemaVersionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version-number))
      (common-lisp:list
       (common-lisp:cons "VersionNumber"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-time))
      (common-lisp:list
       (common-lisp:cons "CreatedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          schema-version-list-item))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (schema-version-number (:copier common-lisp:nil)
      (:conc-name "struct-shape-schema-version-number-"))
   (latest-version common-lisp:nil :type
    (common-lisp:or latest-schema-version-boolean common-lisp:null))
   (version-number common-lisp:nil :type
    (common-lisp:or version-long-number common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'schema-version-number 'make-schema-version-number))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          schema-version-number))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          schema-version-number))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'latest-version))
      (common-lisp:list
       (common-lisp:cons "LatestVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version-number))
      (common-lisp:list
       (common-lisp:cons "VersionNumber"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          schema-version-number))
   common-lisp:nil))
(common-lisp:deftype schema-version-status () 'common-lisp:string)
(common-lisp:deftype script-location-string () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype search-property-predicates ()
   '(trivial-types:proper-list property-predicate))
 (common-lisp:defun |make-search-property-predicates|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list property-predicate))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (search-tables-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-search-tables-request-"))
   (catalog-id common-lisp:nil :type
    (common-lisp:or catalog-id-string common-lisp:null))
   (next-token common-lisp:nil :type (common-lisp:or token common-lisp:null))
   (filters common-lisp:nil :type
    (common-lisp:or search-property-predicates common-lisp:null))
   (search-text common-lisp:nil :type
    (common-lisp:or value-string common-lisp:null))
   (sort-criteria common-lisp:nil :type
    (common-lisp:or sort-criteria common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or page-size common-lisp:null))
   (resource-share-type common-lisp:nil :type
    (common-lisp:or resource-share-type common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'search-tables-request 'make-search-tables-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          search-tables-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          search-tables-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'catalog-id))
      (common-lisp:list
       (common-lisp:cons "CatalogId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filters))
      (common-lisp:list
       (common-lisp:cons "Filters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'search-text))
      (common-lisp:list
       (common-lisp:cons "SearchText"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sort-criteria))
      (common-lisp:list
       (common-lisp:cons "SortCriteria"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-share-type))
      (common-lisp:list
       (common-lisp:cons "ResourceShareType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          search-tables-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (search-tables-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-search-tables-response-"))
   (next-token common-lisp:nil :type (common-lisp:or token common-lisp:null))
   (table-list common-lisp:nil :type
    (common-lisp:or table-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'search-tables-response 'make-search-tables-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          search-tables-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          search-tables-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'table-list))
      (common-lisp:list
       (common-lisp:cons "TableList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          search-tables-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (security-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-security-configuration-"))
   (name common-lisp:nil :type (common-lisp:or name-string common-lisp:null))
   (created-time-stamp common-lisp:nil :type
    (common-lisp:or timestamp-value common-lisp:null))
   (encryption-configuration common-lisp:nil :type
    (common-lisp:or encryption-configuration common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'security-configuration 'make-security-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          security-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          security-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-time-stamp))
      (common-lisp:list
       (common-lisp:cons "CreatedTimeStamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'encryption-configuration))
      (common-lisp:list
       (common-lisp:cons "EncryptionConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          security-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype security-configuration-list ()
   '(trivial-types:proper-list security-configuration))
 (common-lisp:defun |make-security-configuration-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list security-configuration))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype security-group-id-list ()
   '(trivial-types:proper-list name-string))
 (common-lisp:defun |make-security-group-id-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list name-string))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (segment (:copier common-lisp:nil) (:conc-name "struct-shape-segment-"))
   (segment-number (common-lisp:error ":segment-number is required") :type
    (common-lisp:or non-negative-integer common-lisp:null))
   (total-segments (common-lisp:error ":total-segments is required") :type
    (common-lisp:or total-segments-integer common-lisp:null)))
 (common-lisp:export (common-lisp:list 'segment 'make-segment))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input segment))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input segment))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'segment-number))
      (common-lisp:list
       (common-lisp:cons "SegmentNumber"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'total-segments))
      (common-lisp:list
       (common-lisp:cons "TotalSegments"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input segment))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (select-fields (:copier common-lisp:nil)
      (:conc-name "struct-shape-select-fields-"))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or node-name common-lisp:null))
   (inputs (common-lisp:error ":inputs is required") :type
    (common-lisp:or one-input common-lisp:null))
   (paths (common-lisp:error ":paths is required") :type
    (common-lisp:or glue-studio-path-list common-lisp:null)))
 (common-lisp:export (common-lisp:list 'select-fields 'make-select-fields))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input select-fields))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input select-fields))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'inputs))
      (common-lisp:list
       (common-lisp:cons "Inputs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'paths))
      (common-lisp:list
       (common-lisp:cons "Paths"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input select-fields))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (select-from-collection (:copier common-lisp:nil)
      (:conc-name "struct-shape-select-from-collection-"))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or node-name common-lisp:null))
   (inputs (common-lisp:error ":inputs is required") :type
    (common-lisp:or one-input common-lisp:null))
   (index (common-lisp:error ":index is required") :type
    (common-lisp:or non-negative-int common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'select-from-collection 'make-select-from-collection))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          select-from-collection))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          select-from-collection))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'inputs))
      (common-lisp:list
       (common-lisp:cons "Inputs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'index))
      (common-lisp:list
       (common-lisp:cons "Index"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          select-from-collection))
   common-lisp:nil))
(common-lisp:deftype separator () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (ser-de-info (:copier common-lisp:nil)
      (:conc-name "struct-shape-ser-de-info-"))
   (name common-lisp:nil :type (common-lisp:or name-string common-lisp:null))
   (serialization-library common-lisp:nil :type
    (common-lisp:or name-string common-lisp:null))
   (parameters common-lisp:nil :type
    (common-lisp:or parameters-map common-lisp:null)))
 (common-lisp:export (common-lisp:list 'ser-de-info 'make-ser-de-info))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input ser-de-info))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input ser-de-info))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'serialization-library))
      (common-lisp:list
       (common-lisp:cons "SerializationLibrary"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'parameters))
      (common-lisp:list
       (common-lisp:cons "Parameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input ser-de-info))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (session (:copier common-lisp:nil) (:conc-name "struct-shape-session-"))
   (id common-lisp:nil :type (common-lisp:or name-string common-lisp:null))
   (created-on common-lisp:nil :type
    (common-lisp:or timestamp-value common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or session-status common-lisp:null))
   (error-message common-lisp:nil :type
    (common-lisp:or description-string common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or description-string common-lisp:null))
   (role common-lisp:nil :type
    (common-lisp:or orchestration-role-arn common-lisp:null))
   (command common-lisp:nil :type
    (common-lisp:or session-command common-lisp:null))
   (default-arguments common-lisp:nil :type
    (common-lisp:or orchestration-arguments-map common-lisp:null))
   (connections common-lisp:nil :type
    (common-lisp:or connections-list common-lisp:null))
   (progress common-lisp:nil :type
    (common-lisp:or double-value common-lisp:null))
   (max-capacity common-lisp:nil :type
    (common-lisp:or nullable-double common-lisp:null))
   (security-configuration common-lisp:nil :type
    (common-lisp:or name-string common-lisp:null))
   (glue-version common-lisp:nil :type
    (common-lisp:or glue-version-string common-lisp:null)))
 (common-lisp:export (common-lisp:list 'session 'make-session))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input session))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input session))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-on))
      (common-lisp:list
       (common-lisp:cons "CreatedOn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error-message))
      (common-lisp:list
       (common-lisp:cons "ErrorMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role))
      (common-lisp:list
       (common-lisp:cons "Role"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'command))
      (common-lisp:list
       (common-lisp:cons "Command"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'default-arguments))
      (common-lisp:list
       (common-lisp:cons "DefaultArguments"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'connections))
      (common-lisp:list
       (common-lisp:cons "Connections"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'progress))
      (common-lisp:list
       (common-lisp:cons "Progress"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-capacity))
      (common-lisp:list
       (common-lisp:cons "MaxCapacity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'security-configuration))
      (common-lisp:list
       (common-lisp:cons "SecurityConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'glue-version))
      (common-lisp:list
       (common-lisp:cons "GlueVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input session))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (session-command (:copier common-lisp:nil)
      (:conc-name "struct-shape-session-command-"))
   (name common-lisp:nil :type (common-lisp:or name-string common-lisp:null))
   (python-version common-lisp:nil :type
    (common-lisp:or python-version-string common-lisp:null)))
 (common-lisp:export (common-lisp:list 'session-command 'make-session-command))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input session-command))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input session-command))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'python-version))
      (common-lisp:list
       (common-lisp:cons "PythonVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input session-command))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype session-id-list ()
   '(trivial-types:proper-list name-string))
 (common-lisp:defun |make-session-id-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list name-string))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype session-list () '(trivial-types:proper-list session))
 (common-lisp:defun |make-session-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list session))
   aws-sdk/generator/shape::members))
(common-lisp:deftype session-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (skewed-info (:copier common-lisp:nil)
      (:conc-name "struct-shape-skewed-info-"))
   (skewed-column-names common-lisp:nil :type
    (common-lisp:or name-string-list common-lisp:null))
   (skewed-column-values common-lisp:nil :type
    (common-lisp:or column-value-string-list common-lisp:null))
   (skewed-column-value-location-maps common-lisp:nil :type
    (common-lisp:or location-map common-lisp:null)))
 (common-lisp:export (common-lisp:list 'skewed-info 'make-skewed-info))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input skewed-info))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input skewed-info))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'skewed-column-names))
      (common-lisp:list
       (common-lisp:cons "SkewedColumnNames"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'skewed-column-values))
      (common-lisp:list
       (common-lisp:cons "SkewedColumnValues"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'skewed-column-value-location-maps))
      (common-lisp:list
       (common-lisp:cons "SkewedColumnValueLocationMaps"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input skewed-info))
   common-lisp:nil))
(common-lisp:deftype sort () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype sort-criteria ()
   '(trivial-types:proper-list sort-criterion))
 (common-lisp:defun |make-sort-criteria|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list sort-criterion))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (sort-criterion (:copier common-lisp:nil)
      (:conc-name "struct-shape-sort-criterion-"))
   (field-name common-lisp:nil :type
    (common-lisp:or value-string common-lisp:null))
   (sort common-lisp:nil :type (common-lisp:or sort common-lisp:null)))
 (common-lisp:export (common-lisp:list 'sort-criterion 'make-sort-criterion))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input sort-criterion))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input sort-criterion))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'field-name))
      (common-lisp:list
       (common-lisp:cons "FieldName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sort))
      (common-lisp:list
       (common-lisp:cons "Sort"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input sort-criterion))
   common-lisp:nil))
(common-lisp:deftype sort-direction-type () 'common-lisp:string)
(common-lisp:deftype source-control-auth-strategy () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (source-control-details (:copier common-lisp:nil)
      (:conc-name "struct-shape-source-control-details-"))
   (provider common-lisp:nil :type
    (common-lisp:or source-control-provider common-lisp:null))
   (repository common-lisp:nil :type
    (common-lisp:or generic512char-string common-lisp:null))
   (owner common-lisp:nil :type
    (common-lisp:or generic512char-string common-lisp:null))
   (branch common-lisp:nil :type
    (common-lisp:or generic512char-string common-lisp:null))
   (folder common-lisp:nil :type
    (common-lisp:or generic512char-string common-lisp:null))
   (last-commit-id common-lisp:nil :type
    (common-lisp:or generic512char-string common-lisp:null))
   (auth-strategy common-lisp:nil :type
    (common-lisp:or source-control-auth-strategy common-lisp:null))
   (auth-token common-lisp:nil :type
    (common-lisp:or generic512char-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'source-control-details 'make-source-control-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          source-control-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          source-control-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'provider))
      (common-lisp:list
       (common-lisp:cons "Provider"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'repository))
      (common-lisp:list
       (common-lisp:cons "Repository"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'owner))
      (common-lisp:list
       (common-lisp:cons "Owner"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'branch))
      (common-lisp:list
       (common-lisp:cons "Branch"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'folder))
      (common-lisp:list
       (common-lisp:cons "Folder"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-commit-id))
      (common-lisp:list
       (common-lisp:cons "LastCommitId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'auth-strategy))
      (common-lisp:list
       (common-lisp:cons "AuthStrategy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'auth-token))
      (common-lisp:list
       (common-lisp:cons "AuthToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          source-control-details))
   common-lisp:nil))
(common-lisp:deftype source-control-provider () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (spark-connector-source (:copier common-lisp:nil)
      (:conc-name "struct-shape-spark-connector-source-"))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or node-name common-lisp:null))
   (connection-name (common-lisp:error ":connection-name is required") :type
    (common-lisp:or enclosed-in-string-property common-lisp:null))
   (connector-name (common-lisp:error ":connector-name is required") :type
    (common-lisp:or enclosed-in-string-property common-lisp:null))
   (connection-type (common-lisp:error ":connection-type is required") :type
    (common-lisp:or enclosed-in-string-property common-lisp:null))
   (additional-options common-lisp:nil :type
    (common-lisp:or additional-options common-lisp:null))
   (output-schemas common-lisp:nil :type
    (common-lisp:or glue-schemas common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'spark-connector-source 'make-spark-connector-source))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          spark-connector-source))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          spark-connector-source))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'connection-name))
      (common-lisp:list
       (common-lisp:cons "ConnectionName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'connector-name))
      (common-lisp:list
       (common-lisp:cons "ConnectorName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'connection-type))
      (common-lisp:list
       (common-lisp:cons "ConnectionType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'additional-options))
      (common-lisp:list
       (common-lisp:cons "AdditionalOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'output-schemas))
      (common-lisp:list
       (common-lisp:cons "OutputSchemas"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          spark-connector-source))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (spark-connector-target (:copier common-lisp:nil)
      (:conc-name "struct-shape-spark-connector-target-"))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or node-name common-lisp:null))
   (inputs (common-lisp:error ":inputs is required") :type
    (common-lisp:or one-input common-lisp:null))
   (connection-name (common-lisp:error ":connection-name is required") :type
    (common-lisp:or enclosed-in-string-property common-lisp:null))
   (connector-name (common-lisp:error ":connector-name is required") :type
    (common-lisp:or enclosed-in-string-property common-lisp:null))
   (connection-type (common-lisp:error ":connection-type is required") :type
    (common-lisp:or enclosed-in-string-property common-lisp:null))
   (additional-options common-lisp:nil :type
    (common-lisp:or additional-options common-lisp:null))
   (output-schemas common-lisp:nil :type
    (common-lisp:or glue-schemas common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'spark-connector-target 'make-spark-connector-target))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          spark-connector-target))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          spark-connector-target))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'inputs))
      (common-lisp:list
       (common-lisp:cons "Inputs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'connection-name))
      (common-lisp:list
       (common-lisp:cons "ConnectionName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'connector-name))
      (common-lisp:list
       (common-lisp:cons "ConnectorName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'connection-type))
      (common-lisp:list
       (common-lisp:cons "ConnectionType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'additional-options))
      (common-lisp:list
       (common-lisp:cons "AdditionalOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'output-schemas))
      (common-lisp:list
       (common-lisp:cons "OutputSchemas"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          spark-connector-target))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (spark-sql (:copier common-lisp:nil)
      (:conc-name "struct-shape-spark-sql-"))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or node-name common-lisp:null))
   (inputs (common-lisp:error ":inputs is required") :type
    (common-lisp:or many-inputs common-lisp:null))
   (sql-query (common-lisp:error ":sql-query is required") :type
    (common-lisp:or sql-query common-lisp:null))
   (sql-aliases (common-lisp:error ":sql-aliases is required") :type
    (common-lisp:or sql-aliases common-lisp:null))
   (output-schemas common-lisp:nil :type
    (common-lisp:or glue-schemas common-lisp:null)))
 (common-lisp:export (common-lisp:list 'spark-sql 'make-spark-sql))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input spark-sql))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input spark-sql))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'inputs))
      (common-lisp:list
       (common-lisp:cons "Inputs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sql-query))
      (common-lisp:list
       (common-lisp:cons "SqlQuery"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sql-aliases))
      (common-lisp:list
       (common-lisp:cons "SqlAliases"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'output-schemas))
      (common-lisp:list
       (common-lisp:cons "OutputSchemas"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input spark-sql))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (spigot (:copier common-lisp:nil) (:conc-name "struct-shape-spigot-"))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or node-name common-lisp:null))
   (inputs (common-lisp:error ":inputs is required") :type
    (common-lisp:or one-input common-lisp:null))
   (path (common-lisp:error ":path is required") :type
    (common-lisp:or enclosed-in-string-property common-lisp:null))
   (topk common-lisp:nil :type (common-lisp:or topk common-lisp:null))
   (prob common-lisp:nil :type (common-lisp:or prob common-lisp:null)))
 (common-lisp:export (common-lisp:list 'spigot 'make-spigot))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input spigot))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input spigot))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'inputs))
      (common-lisp:list
       (common-lisp:cons "Inputs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'path))
      (common-lisp:list
       (common-lisp:cons "Path"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'topk))
      (common-lisp:list
       (common-lisp:cons "Topk"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'prob))
      (common-lisp:list
       (common-lisp:cons "Prob"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input spigot))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (split-fields (:copier common-lisp:nil)
      (:conc-name "struct-shape-split-fields-"))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or node-name common-lisp:null))
   (inputs (common-lisp:error ":inputs is required") :type
    (common-lisp:or one-input common-lisp:null))
   (paths (common-lisp:error ":paths is required") :type
    (common-lisp:or glue-studio-path-list common-lisp:null)))
 (common-lisp:export (common-lisp:list 'split-fields 'make-split-fields))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input split-fields))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input split-fields))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'inputs))
      (common-lisp:list
       (common-lisp:cons "Inputs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'paths))
      (common-lisp:list
       (common-lisp:cons "Paths"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input split-fields))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (sql-alias (:copier common-lisp:nil)
      (:conc-name "struct-shape-sql-alias-"))
   (from (common-lisp:error ":from is required") :type
    (common-lisp:or node-id common-lisp:null))
   (alias (common-lisp:error ":alias is required") :type
    (common-lisp:or enclosed-in-string-property-with-quote common-lisp:null)))
 (common-lisp:export (common-lisp:list 'sql-alias 'make-sql-alias))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input sql-alias))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input sql-alias))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'from))
      (common-lisp:list
       (common-lisp:cons "From"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'alias))
      (common-lisp:list
       (common-lisp:cons "Alias"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input sql-alias))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype sql-aliases () '(trivial-types:proper-list sql-alias))
 (common-lisp:defun |make-sql-aliases|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list sql-alias))
   aws-sdk/generator/shape::members))
(common-lisp:deftype sql-query () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (start-blueprint-run-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-start-blueprint-run-request-"))
   (blueprint-name (common-lisp:error ":blueprint-name is required") :type
    (common-lisp:or orchestration-name-string common-lisp:null))
   (parameters common-lisp:nil :type
    (common-lisp:or blueprint-parameters common-lisp:null))
   (role-arn (common-lisp:error ":role-arn is required") :type
    (common-lisp:or orchestration-iamrole-arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'start-blueprint-run-request
                    'make-start-blueprint-run-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-blueprint-run-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-blueprint-run-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'blueprint-name))
      (common-lisp:list
       (common-lisp:cons "BlueprintName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'parameters))
      (common-lisp:list
       (common-lisp:cons "Parameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "RoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-blueprint-run-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (start-blueprint-run-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-start-blueprint-run-response-"))
   (run-id common-lisp:nil :type (common-lisp:or id-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'start-blueprint-run-response
                    'make-start-blueprint-run-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-blueprint-run-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-blueprint-run-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'run-id))
      (common-lisp:list
       (common-lisp:cons "RunId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-blueprint-run-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (start-crawler-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-start-crawler-request-"))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or name-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'start-crawler-request 'make-start-crawler-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-crawler-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-crawler-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-crawler-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (start-crawler-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-start-crawler-response-")))
 (common-lisp:export
  (common-lisp:list 'start-crawler-response 'make-start-crawler-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-crawler-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-crawler-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-crawler-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (start-crawler-schedule-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-start-crawler-schedule-request-"))
   (crawler-name (common-lisp:error ":crawler-name is required") :type
    (common-lisp:or name-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'start-crawler-schedule-request
                    'make-start-crawler-schedule-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-crawler-schedule-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-crawler-schedule-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'crawler-name))
      (common-lisp:list
       (common-lisp:cons "CrawlerName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-crawler-schedule-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (start-crawler-schedule-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-start-crawler-schedule-response-")))
 (common-lisp:export
  (common-lisp:list 'start-crawler-schedule-response
                    'make-start-crawler-schedule-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-crawler-schedule-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-crawler-schedule-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-crawler-schedule-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (start-data-quality-rule-recommendation-run-request
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-start-data-quality-rule-recommendation-run-request-"))
   (data-source (common-lisp:error ":data-source is required") :type
    (common-lisp:or data-source common-lisp:null))
   (role (common-lisp:error ":role is required") :type
    (common-lisp:or role-string common-lisp:null))
   (number-of-workers common-lisp:nil :type
    (common-lisp:or nullable-integer common-lisp:null))
   (timeout common-lisp:nil :type (common-lisp:or timeout common-lisp:null))
   (created-ruleset-name common-lisp:nil :type
    (common-lisp:or name-string common-lisp:null))
   (client-token common-lisp:nil :type
    (common-lisp:or hash-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'start-data-quality-rule-recommendation-run-request
                    'make-start-data-quality-rule-recommendation-run-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-data-quality-rule-recommendation-run-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-data-quality-rule-recommendation-run-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-source))
      (common-lisp:list
       (common-lisp:cons "DataSource"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role))
      (common-lisp:list
       (common-lisp:cons "Role"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'number-of-workers))
      (common-lisp:list
       (common-lisp:cons "NumberOfWorkers"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'timeout))
      (common-lisp:list
       (common-lisp:cons "Timeout"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'created-ruleset-name))
      (common-lisp:list
       (common-lisp:cons "CreatedRulesetName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "ClientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-data-quality-rule-recommendation-run-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (start-data-quality-rule-recommendation-run-response
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-start-data-quality-rule-recommendation-run-response-"))
   (run-id common-lisp:nil :type
    (common-lisp:or hash-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'start-data-quality-rule-recommendation-run-response
                    'make-start-data-quality-rule-recommendation-run-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-data-quality-rule-recommendation-run-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-data-quality-rule-recommendation-run-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'run-id))
      (common-lisp:list
       (common-lisp:cons "RunId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-data-quality-rule-recommendation-run-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (start-data-quality-ruleset-evaluation-run-request
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-start-data-quality-ruleset-evaluation-run-request-"))
   (data-source (common-lisp:error ":data-source is required") :type
    (common-lisp:or data-source common-lisp:null))
   (role (common-lisp:error ":role is required") :type
    (common-lisp:or role-string common-lisp:null))
   (number-of-workers common-lisp:nil :type
    (common-lisp:or nullable-integer common-lisp:null))
   (timeout common-lisp:nil :type (common-lisp:or timeout common-lisp:null))
   (client-token common-lisp:nil :type
    (common-lisp:or hash-string common-lisp:null))
   (additional-run-options common-lisp:nil :type
    (common-lisp:or data-quality-evaluation-run-additional-run-options
                    common-lisp:null))
   (ruleset-names (common-lisp:error ":ruleset-names is required") :type
    (common-lisp:or ruleset-names common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'start-data-quality-ruleset-evaluation-run-request
                    'make-start-data-quality-ruleset-evaluation-run-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-data-quality-ruleset-evaluation-run-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-data-quality-ruleset-evaluation-run-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-source))
      (common-lisp:list
       (common-lisp:cons "DataSource"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role))
      (common-lisp:list
       (common-lisp:cons "Role"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'number-of-workers))
      (common-lisp:list
       (common-lisp:cons "NumberOfWorkers"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'timeout))
      (common-lisp:list
       (common-lisp:cons "Timeout"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "ClientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'additional-run-options))
      (common-lisp:list
       (common-lisp:cons "AdditionalRunOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ruleset-names))
      (common-lisp:list
       (common-lisp:cons "RulesetNames"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-data-quality-ruleset-evaluation-run-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (start-data-quality-ruleset-evaluation-run-response
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-start-data-quality-ruleset-evaluation-run-response-"))
   (run-id common-lisp:nil :type
    (common-lisp:or hash-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'start-data-quality-ruleset-evaluation-run-response
                    'make-start-data-quality-ruleset-evaluation-run-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-data-quality-ruleset-evaluation-run-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-data-quality-ruleset-evaluation-run-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'run-id))
      (common-lisp:list
       (common-lisp:cons "RunId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-data-quality-ruleset-evaluation-run-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (start-export-labels-task-run-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-start-export-labels-task-run-request-"))
   (transform-id (common-lisp:error ":transform-id is required") :type
    (common-lisp:or hash-string common-lisp:null))
   (output-s3path (common-lisp:error ":output-s3path is required") :type
    (common-lisp:or uri-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'start-export-labels-task-run-request
                    'make-start-export-labels-task-run-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-export-labels-task-run-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-export-labels-task-run-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'transform-id))
      (common-lisp:list
       (common-lisp:cons "TransformId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'output-s3path))
      (common-lisp:list
       (common-lisp:cons "OutputS3Path"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-export-labels-task-run-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (start-export-labels-task-run-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-start-export-labels-task-run-response-"))
   (task-run-id common-lisp:nil :type
    (common-lisp:or hash-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'start-export-labels-task-run-response
                    'make-start-export-labels-task-run-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-export-labels-task-run-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-export-labels-task-run-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'task-run-id))
      (common-lisp:list
       (common-lisp:cons "TaskRunId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-export-labels-task-run-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (start-import-labels-task-run-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-start-import-labels-task-run-request-"))
   (transform-id (common-lisp:error ":transform-id is required") :type
    (common-lisp:or hash-string common-lisp:null))
   (input-s3path (common-lisp:error ":input-s3path is required") :type
    (common-lisp:or uri-string common-lisp:null))
   (replace-all-labels common-lisp:nil :type
    (common-lisp:or replace-boolean common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'start-import-labels-task-run-request
                    'make-start-import-labels-task-run-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-import-labels-task-run-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-import-labels-task-run-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'transform-id))
      (common-lisp:list
       (common-lisp:cons "TransformId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'input-s3path))
      (common-lisp:list
       (common-lisp:cons "InputS3Path"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'replace-all-labels))
      (common-lisp:list
       (common-lisp:cons "ReplaceAllLabels"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-import-labels-task-run-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (start-import-labels-task-run-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-start-import-labels-task-run-response-"))
   (task-run-id common-lisp:nil :type
    (common-lisp:or hash-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'start-import-labels-task-run-response
                    'make-start-import-labels-task-run-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-import-labels-task-run-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-import-labels-task-run-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'task-run-id))
      (common-lisp:list
       (common-lisp:cons "TaskRunId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-import-labels-task-run-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (start-job-run-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-start-job-run-request-"))
   (job-name (common-lisp:error ":job-name is required") :type
    (common-lisp:or name-string common-lisp:null))
   (job-run-id common-lisp:nil :type
    (common-lisp:or id-string common-lisp:null))
   (arguments common-lisp:nil :type
    (common-lisp:or generic-map common-lisp:null))
   (allocated-capacity common-lisp:nil :type
    (common-lisp:or integer-value common-lisp:null))
   (timeout common-lisp:nil :type (common-lisp:or timeout common-lisp:null))
   (max-capacity common-lisp:nil :type
    (common-lisp:or nullable-double common-lisp:null))
   (security-configuration common-lisp:nil :type
    (common-lisp:or name-string common-lisp:null))
   (notification-property common-lisp:nil :type
    (common-lisp:or notification-property common-lisp:null))
   (worker-type common-lisp:nil :type
    (common-lisp:or worker-type common-lisp:null))
   (number-of-workers common-lisp:nil :type
    (common-lisp:or nullable-integer common-lisp:null))
   (execution-class common-lisp:nil :type
    (common-lisp:or execution-class common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'start-job-run-request 'make-start-job-run-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-job-run-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-job-run-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-name))
      (common-lisp:list
       (common-lisp:cons "JobName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-run-id))
      (common-lisp:list
       (common-lisp:cons "JobRunId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arguments))
      (common-lisp:list
       (common-lisp:cons "Arguments"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'allocated-capacity))
      (common-lisp:list
       (common-lisp:cons "AllocatedCapacity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'timeout))
      (common-lisp:list
       (common-lisp:cons "Timeout"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-capacity))
      (common-lisp:list
       (common-lisp:cons "MaxCapacity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'security-configuration))
      (common-lisp:list
       (common-lisp:cons "SecurityConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'notification-property))
      (common-lisp:list
       (common-lisp:cons "NotificationProperty"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'worker-type))
      (common-lisp:list
       (common-lisp:cons "WorkerType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'number-of-workers))
      (common-lisp:list
       (common-lisp:cons "NumberOfWorkers"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'execution-class))
      (common-lisp:list
       (common-lisp:cons "ExecutionClass"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-job-run-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (start-job-run-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-start-job-run-response-"))
   (job-run-id common-lisp:nil :type
    (common-lisp:or id-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'start-job-run-response 'make-start-job-run-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-job-run-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-job-run-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-run-id))
      (common-lisp:list
       (common-lisp:cons "JobRunId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-job-run-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (start-mlevaluation-task-run-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-start-mlevaluation-task-run-request-"))
   (transform-id (common-lisp:error ":transform-id is required") :type
    (common-lisp:or hash-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'start-mlevaluation-task-run-request
                    'make-start-mlevaluation-task-run-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-mlevaluation-task-run-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-mlevaluation-task-run-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'transform-id))
      (common-lisp:list
       (common-lisp:cons "TransformId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-mlevaluation-task-run-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (start-mlevaluation-task-run-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-start-mlevaluation-task-run-response-"))
   (task-run-id common-lisp:nil :type
    (common-lisp:or hash-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'start-mlevaluation-task-run-response
                    'make-start-mlevaluation-task-run-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-mlevaluation-task-run-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-mlevaluation-task-run-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'task-run-id))
      (common-lisp:list
       (common-lisp:cons "TaskRunId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-mlevaluation-task-run-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (start-mllabeling-set-generation-task-run-request
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-start-mllabeling-set-generation-task-run-request-"))
   (transform-id (common-lisp:error ":transform-id is required") :type
    (common-lisp:or hash-string common-lisp:null))
   (output-s3path (common-lisp:error ":output-s3path is required") :type
    (common-lisp:or uri-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'start-mllabeling-set-generation-task-run-request
                    'make-start-mllabeling-set-generation-task-run-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-mllabeling-set-generation-task-run-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-mllabeling-set-generation-task-run-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'transform-id))
      (common-lisp:list
       (common-lisp:cons "TransformId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'output-s3path))
      (common-lisp:list
       (common-lisp:cons "OutputS3Path"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-mllabeling-set-generation-task-run-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (start-mllabeling-set-generation-task-run-response
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-start-mllabeling-set-generation-task-run-response-"))
   (task-run-id common-lisp:nil :type
    (common-lisp:or hash-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'start-mllabeling-set-generation-task-run-response
                    'make-start-mllabeling-set-generation-task-run-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-mllabeling-set-generation-task-run-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-mllabeling-set-generation-task-run-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'task-run-id))
      (common-lisp:list
       (common-lisp:cons "TaskRunId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-mllabeling-set-generation-task-run-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (start-trigger-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-start-trigger-request-"))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or name-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'start-trigger-request 'make-start-trigger-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-trigger-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-trigger-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-trigger-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (start-trigger-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-start-trigger-response-"))
   (name common-lisp:nil :type (common-lisp:or name-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'start-trigger-response 'make-start-trigger-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-trigger-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-trigger-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-trigger-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (start-workflow-run-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-start-workflow-run-request-"))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or name-string common-lisp:null))
   (run-properties common-lisp:nil :type
    (common-lisp:or workflow-run-properties common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'start-workflow-run-request
                    'make-start-workflow-run-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-workflow-run-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-workflow-run-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'run-properties))
      (common-lisp:list
       (common-lisp:cons "RunProperties"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-workflow-run-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (start-workflow-run-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-start-workflow-run-response-"))
   (run-id common-lisp:nil :type (common-lisp:or id-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'start-workflow-run-response
                    'make-start-workflow-run-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-workflow-run-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-workflow-run-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'run-id))
      (common-lisp:list
       (common-lisp:cons "RunId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-workflow-run-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (starting-event-batch-condition (:copier common-lisp:nil)
      (:conc-name "struct-shape-starting-event-batch-condition-"))
   (batch-size common-lisp:nil :type
    (common-lisp:or nullable-integer common-lisp:null))
   (batch-window common-lisp:nil :type
    (common-lisp:or nullable-integer common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'starting-event-batch-condition
                    'make-starting-event-batch-condition))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          starting-event-batch-condition))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          starting-event-batch-condition))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'batch-size))
      (common-lisp:list
       (common-lisp:cons "BatchSize"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'batch-window))
      (common-lisp:list
       (common-lisp:cons "BatchWindow"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          starting-event-batch-condition))
   common-lisp:nil))
(common-lisp:deftype starting-position () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (statement (:copier common-lisp:nil)
      (:conc-name "struct-shape-statement-"))
   (id common-lisp:nil :type (common-lisp:or integer-value common-lisp:null))
   (code common-lisp:nil :type
    (common-lisp:or generic-string common-lisp:null))
   (state common-lisp:nil :type
    (common-lisp:or statement-state common-lisp:null))
   (output common-lisp:nil :type
    (common-lisp:or statement-output common-lisp:null))
   (progress common-lisp:nil :type
    (common-lisp:or double-value common-lisp:null))
   (started-on common-lisp:nil :type
    (common-lisp:or long-value common-lisp:null))
   (completed-on common-lisp:nil :type
    (common-lisp:or long-value common-lisp:null)))
 (common-lisp:export (common-lisp:list 'statement 'make-statement))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input statement))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input statement))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'code))
      (common-lisp:list
       (common-lisp:cons "Code"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "State"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'output))
      (common-lisp:list
       (common-lisp:cons "Output"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'progress))
      (common-lisp:list
       (common-lisp:cons "Progress"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'started-on))
      (common-lisp:list
       (common-lisp:cons "StartedOn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'completed-on))
      (common-lisp:list
       (common-lisp:cons "CompletedOn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input statement))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype statement-list () '(trivial-types:proper-list statement))
 (common-lisp:defun |make-statement-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list statement))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (statement-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-statement-output-"))
   (data common-lisp:nil :type
    (common-lisp:or statement-output-data common-lisp:null))
   (execution-count common-lisp:nil :type
    (common-lisp:or integer-value common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or statement-state common-lisp:null))
   (error-name common-lisp:nil :type
    (common-lisp:or generic-string common-lisp:null))
   (error-value common-lisp:nil :type
    (common-lisp:or generic-string common-lisp:null))
   (traceback common-lisp:nil :type
    (common-lisp:or orchestration-string-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'statement-output 'make-statement-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input statement-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input statement-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data))
      (common-lisp:list
       (common-lisp:cons "Data"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'execution-count))
      (common-lisp:list
       (common-lisp:cons "ExecutionCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error-name))
      (common-lisp:list
       (common-lisp:cons "ErrorName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error-value))
      (common-lisp:list
       (common-lisp:cons "ErrorValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'traceback))
      (common-lisp:list
       (common-lisp:cons "Traceback"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input statement-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (statement-output-data (:copier common-lisp:nil)
      (:conc-name "struct-shape-statement-output-data-"))
   (text-plain common-lisp:nil :type
    (common-lisp:or generic-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'statement-output-data 'make-statement-output-data))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          statement-output-data))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          statement-output-data))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'text-plain))
      (common-lisp:list
       (common-lisp:cons "TextPlain"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          statement-output-data))
   common-lisp:nil))
(common-lisp:deftype statement-state () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (stop-crawler-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-stop-crawler-request-"))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or name-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'stop-crawler-request 'make-stop-crawler-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input stop-crawler-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input stop-crawler-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input stop-crawler-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (stop-crawler-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-stop-crawler-response-")))
 (common-lisp:export
  (common-lisp:list 'stop-crawler-response 'make-stop-crawler-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          stop-crawler-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          stop-crawler-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          stop-crawler-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (stop-crawler-schedule-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-stop-crawler-schedule-request-"))
   (crawler-name (common-lisp:error ":crawler-name is required") :type
    (common-lisp:or name-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'stop-crawler-schedule-request
                    'make-stop-crawler-schedule-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          stop-crawler-schedule-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          stop-crawler-schedule-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'crawler-name))
      (common-lisp:list
       (common-lisp:cons "CrawlerName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          stop-crawler-schedule-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (stop-crawler-schedule-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-stop-crawler-schedule-response-")))
 (common-lisp:export
  (common-lisp:list 'stop-crawler-schedule-response
                    'make-stop-crawler-schedule-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          stop-crawler-schedule-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          stop-crawler-schedule-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          stop-crawler-schedule-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (stop-session-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-stop-session-request-"))
   (id (common-lisp:error ":id is required") :type
    (common-lisp:or name-string common-lisp:null))
   (request-origin common-lisp:nil :type
    (common-lisp:or orchestration-name-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'stop-session-request 'make-stop-session-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input stop-session-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input stop-session-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-origin))
      (common-lisp:list
       (common-lisp:cons "RequestOrigin"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input stop-session-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (stop-session-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-stop-session-response-"))
   (id common-lisp:nil :type (common-lisp:or name-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'stop-session-response 'make-stop-session-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          stop-session-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          stop-session-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          stop-session-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (stop-trigger-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-stop-trigger-request-"))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or name-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'stop-trigger-request 'make-stop-trigger-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input stop-trigger-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input stop-trigger-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input stop-trigger-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (stop-trigger-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-stop-trigger-response-"))
   (name common-lisp:nil :type (common-lisp:or name-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'stop-trigger-response 'make-stop-trigger-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          stop-trigger-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          stop-trigger-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          stop-trigger-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (stop-workflow-run-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-stop-workflow-run-request-"))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or name-string common-lisp:null))
   (run-id (common-lisp:error ":run-id is required") :type
    (common-lisp:or id-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'stop-workflow-run-request
                    'make-stop-workflow-run-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          stop-workflow-run-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          stop-workflow-run-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'run-id))
      (common-lisp:list
       (common-lisp:cons "RunId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          stop-workflow-run-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (stop-workflow-run-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-stop-workflow-run-response-")))
 (common-lisp:export
  (common-lisp:list 'stop-workflow-run-response
                    'make-stop-workflow-run-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          stop-workflow-run-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          stop-workflow-run-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          stop-workflow-run-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (storage-descriptor (:copier common-lisp:nil)
      (:conc-name "struct-shape-storage-descriptor-"))
   (columns common-lisp:nil :type
    (common-lisp:or column-list common-lisp:null))
   (location common-lisp:nil :type
    (common-lisp:or location-string common-lisp:null))
   (additional-locations common-lisp:nil :type
    (common-lisp:or location-string-list common-lisp:null))
   (input-format common-lisp:nil :type
    (common-lisp:or format-string common-lisp:null))
   (output-format common-lisp:nil :type
    (common-lisp:or format-string common-lisp:null))
   (compressed common-lisp:nil :type (common-lisp:or boolean common-lisp:null))
   (number-of-buckets common-lisp:nil :type
    (common-lisp:or integer common-lisp:null))
   (serde-info common-lisp:nil :type
    (common-lisp:or ser-de-info common-lisp:null))
   (bucket-columns common-lisp:nil :type
    (common-lisp:or name-string-list common-lisp:null))
   (sort-columns common-lisp:nil :type
    (common-lisp:or order-list common-lisp:null))
   (parameters common-lisp:nil :type
    (common-lisp:or parameters-map common-lisp:null))
   (skewed-info common-lisp:nil :type
    (common-lisp:or skewed-info common-lisp:null))
   (stored-as-sub-directories common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (schema-reference common-lisp:nil :type
    (common-lisp:or schema-reference common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'storage-descriptor 'make-storage-descriptor))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input storage-descriptor))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input storage-descriptor))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'columns))
      (common-lisp:list
       (common-lisp:cons "Columns"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'location))
      (common-lisp:list
       (common-lisp:cons "Location"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'additional-locations))
      (common-lisp:list
       (common-lisp:cons "AdditionalLocations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'input-format))
      (common-lisp:list
       (common-lisp:cons "InputFormat"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'output-format))
      (common-lisp:list
       (common-lisp:cons "OutputFormat"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'compressed))
      (common-lisp:list
       (common-lisp:cons "Compressed"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'number-of-buckets))
      (common-lisp:list
       (common-lisp:cons "NumberOfBuckets"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'serde-info))
      (common-lisp:list
       (common-lisp:cons "SerdeInfo"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bucket-columns))
      (common-lisp:list
       (common-lisp:cons "BucketColumns"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sort-columns))
      (common-lisp:list
       (common-lisp:cons "SortColumns"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'parameters))
      (common-lisp:list
       (common-lisp:cons "Parameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'skewed-info))
      (common-lisp:list
       (common-lisp:cons "SkewedInfo"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'stored-as-sub-directories))
      (common-lisp:list
       (common-lisp:cons "StoredAsSubDirectories"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'schema-reference))
      (common-lisp:list
       (common-lisp:cons "SchemaReference"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input storage-descriptor))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (streaming-data-preview-options (:copier common-lisp:nil)
      (:conc-name "struct-shape-streaming-data-preview-options-"))
   (polling-time common-lisp:nil :type
    (common-lisp:or polling-time common-lisp:null))
   (record-polling-limit common-lisp:nil :type
    (common-lisp:or positive-long common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'streaming-data-preview-options
                    'make-streaming-data-preview-options))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          streaming-data-preview-options))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          streaming-data-preview-options))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'polling-time))
      (common-lisp:list
       (common-lisp:cons "PollingTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'record-polling-limit))
      (common-lisp:list
       (common-lisp:cons "RecordPollingLimit"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          streaming-data-preview-options))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (string-column-statistics-data (:copier common-lisp:nil)
      (:conc-name "struct-shape-string-column-statistics-data-"))
   (maximum-length (common-lisp:error ":maximum-length is required") :type
    (common-lisp:or non-negative-long common-lisp:null))
   (average-length (common-lisp:error ":average-length is required") :type
    (common-lisp:or non-negative-double common-lisp:null))
   (number-of-nulls (common-lisp:error ":number-of-nulls is required") :type
    (common-lisp:or non-negative-long common-lisp:null))
   (number-of-distinct-values
    (common-lisp:error ":number-of-distinct-values is required") :type
    (common-lisp:or non-negative-long common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'string-column-statistics-data
                    'make-string-column-statistics-data))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          string-column-statistics-data))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          string-column-statistics-data))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'maximum-length))
      (common-lisp:list
       (common-lisp:cons "MaximumLength"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'average-length))
      (common-lisp:list
       (common-lisp:cons "AverageLength"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'number-of-nulls))
      (common-lisp:list
       (common-lisp:cons "NumberOfNulls"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'number-of-distinct-values))
      (common-lisp:list
       (common-lisp:cons "NumberOfDistinctValues"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          string-column-statistics-data))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype string-list ()
   '(trivial-types:proper-list generic-string))
 (common-lisp:defun |make-string-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list generic-string))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (table (:copier common-lisp:nil) (:conc-name "struct-shape-table-"))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or name-string common-lisp:null))
   (database-name common-lisp:nil :type
    (common-lisp:or name-string common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or description-string common-lisp:null))
   (owner common-lisp:nil :type (common-lisp:or name-string common-lisp:null))
   (create-time common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (update-time common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (last-access-time common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (last-analyzed-time common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (retention common-lisp:nil :type
    (common-lisp:or non-negative-integer common-lisp:null))
   (storage-descriptor common-lisp:nil :type
    (common-lisp:or storage-descriptor common-lisp:null))
   (partition-keys common-lisp:nil :type
    (common-lisp:or column-list common-lisp:null))
   (view-original-text common-lisp:nil :type
    (common-lisp:or view-text-string common-lisp:null))
   (view-expanded-text common-lisp:nil :type
    (common-lisp:or view-text-string common-lisp:null))
   (table-type common-lisp:nil :type
    (common-lisp:or table-type-string common-lisp:null))
   (parameters common-lisp:nil :type
    (common-lisp:or parameters-map common-lisp:null))
   (created-by common-lisp:nil :type
    (common-lisp:or name-string common-lisp:null))
   (is-registered-with-lake-formation common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (target-table common-lisp:nil :type
    (common-lisp:or table-identifier common-lisp:null))
   (catalog-id common-lisp:nil :type
    (common-lisp:or catalog-id-string common-lisp:null))
   (version-id common-lisp:nil :type
    (common-lisp:or version-string common-lisp:null)))
 (common-lisp:export (common-lisp:list 'table 'make-table))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input table))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input table))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'database-name))
      (common-lisp:list
       (common-lisp:cons "DatabaseName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'owner))
      (common-lisp:list
       (common-lisp:cons "Owner"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'create-time))
      (common-lisp:list
       (common-lisp:cons "CreateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'update-time))
      (common-lisp:list
       (common-lisp:cons "UpdateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-access-time))
      (common-lisp:list
       (common-lisp:cons "LastAccessTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-analyzed-time))
      (common-lisp:list
       (common-lisp:cons "LastAnalyzedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'retention))
      (common-lisp:list
       (common-lisp:cons "Retention"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'storage-descriptor))
      (common-lisp:list
       (common-lisp:cons "StorageDescriptor"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'partition-keys))
      (common-lisp:list
       (common-lisp:cons "PartitionKeys"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'view-original-text))
      (common-lisp:list
       (common-lisp:cons "ViewOriginalText"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'view-expanded-text))
      (common-lisp:list
       (common-lisp:cons "ViewExpandedText"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'table-type))
      (common-lisp:list
       (common-lisp:cons "TableType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'parameters))
      (common-lisp:list
       (common-lisp:cons "Parameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-by))
      (common-lisp:list
       (common-lisp:cons "CreatedBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'is-registered-with-lake-formation))
      (common-lisp:list
       (common-lisp:cons "IsRegisteredWithLakeFormation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target-table))
      (common-lisp:list
       (common-lisp:cons "TargetTable"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'catalog-id))
      (common-lisp:list
       (common-lisp:cons "CatalogId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version-id))
      (common-lisp:list
       (common-lisp:cons "VersionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input table))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (table-error (:copier common-lisp:nil)
      (:conc-name "struct-shape-table-error-"))
   (table-name common-lisp:nil :type
    (common-lisp:or name-string common-lisp:null))
   (error-detail common-lisp:nil :type
    (common-lisp:or error-detail common-lisp:null)))
 (common-lisp:export (common-lisp:list 'table-error 'make-table-error))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input table-error))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input table-error))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'table-name))
      (common-lisp:list
       (common-lisp:cons "TableName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error-detail))
      (common-lisp:list
       (common-lisp:cons "ErrorDetail"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input table-error))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype table-errors () '(trivial-types:proper-list table-error))
 (common-lisp:defun |make-table-errors|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list table-error))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (table-identifier (:copier common-lisp:nil)
      (:conc-name "struct-shape-table-identifier-"))
   (catalog-id common-lisp:nil :type
    (common-lisp:or catalog-id-string common-lisp:null))
   (database-name common-lisp:nil :type
    (common-lisp:or name-string common-lisp:null))
   (name common-lisp:nil :type (common-lisp:or name-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'table-identifier 'make-table-identifier))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input table-identifier))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input table-identifier))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'catalog-id))
      (common-lisp:list
       (common-lisp:cons "CatalogId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'database-name))
      (common-lisp:list
       (common-lisp:cons "DatabaseName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input table-identifier))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (table-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-table-input-"))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or name-string common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or description-string common-lisp:null))
   (owner common-lisp:nil :type (common-lisp:or name-string common-lisp:null))
   (last-access-time common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (last-analyzed-time common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (retention common-lisp:nil :type
    (common-lisp:or non-negative-integer common-lisp:null))
   (storage-descriptor common-lisp:nil :type
    (common-lisp:or storage-descriptor common-lisp:null))
   (partition-keys common-lisp:nil :type
    (common-lisp:or column-list common-lisp:null))
   (view-original-text common-lisp:nil :type
    (common-lisp:or view-text-string common-lisp:null))
   (view-expanded-text common-lisp:nil :type
    (common-lisp:or view-text-string common-lisp:null))
   (table-type common-lisp:nil :type
    (common-lisp:or table-type-string common-lisp:null))
   (parameters common-lisp:nil :type
    (common-lisp:or parameters-map common-lisp:null))
   (target-table common-lisp:nil :type
    (common-lisp:or table-identifier common-lisp:null)))
 (common-lisp:export (common-lisp:list 'table-input 'make-table-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input table-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input table-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'owner))
      (common-lisp:list
       (common-lisp:cons "Owner"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-access-time))
      (common-lisp:list
       (common-lisp:cons "LastAccessTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-analyzed-time))
      (common-lisp:list
       (common-lisp:cons "LastAnalyzedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'retention))
      (common-lisp:list
       (common-lisp:cons "Retention"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'storage-descriptor))
      (common-lisp:list
       (common-lisp:cons "StorageDescriptor"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'partition-keys))
      (common-lisp:list
       (common-lisp:cons "PartitionKeys"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'view-original-text))
      (common-lisp:list
       (common-lisp:cons "ViewOriginalText"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'view-expanded-text))
      (common-lisp:list
       (common-lisp:cons "ViewExpandedText"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'table-type))
      (common-lisp:list
       (common-lisp:cons "TableType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'parameters))
      (common-lisp:list
       (common-lisp:cons "Parameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target-table))
      (common-lisp:list
       (common-lisp:cons "TargetTable"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input table-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype table-list () '(trivial-types:proper-list table))
 (common-lisp:defun |make-table-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list table))
   aws-sdk/generator/shape::members))
(common-lisp:deftype table-name () 'common-lisp:string)
(common-lisp:deftype table-prefix () 'common-lisp:string)
(common-lisp:deftype table-type-string () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (table-version (:copier common-lisp:nil)
      (:conc-name "struct-shape-table-version-"))
   (table common-lisp:nil :type (common-lisp:or table common-lisp:null))
   (version-id common-lisp:nil :type
    (common-lisp:or version-string common-lisp:null)))
 (common-lisp:export (common-lisp:list 'table-version 'make-table-version))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input table-version))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input table-version))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'table))
      (common-lisp:list
       (common-lisp:cons "Table"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version-id))
      (common-lisp:list
       (common-lisp:cons "VersionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input table-version))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (table-version-error (:copier common-lisp:nil)
      (:conc-name "struct-shape-table-version-error-"))
   (table-name common-lisp:nil :type
    (common-lisp:or name-string common-lisp:null))
   (version-id common-lisp:nil :type
    (common-lisp:or version-string common-lisp:null))
   (error-detail common-lisp:nil :type
    (common-lisp:or error-detail common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'table-version-error 'make-table-version-error))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input table-version-error))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input table-version-error))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'table-name))
      (common-lisp:list
       (common-lisp:cons "TableName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version-id))
      (common-lisp:list
       (common-lisp:cons "VersionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error-detail))
      (common-lisp:list
       (common-lisp:cons "ErrorDetail"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input table-version-error))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype table-version-errors ()
   '(trivial-types:proper-list table-version-error))
 (common-lisp:defun |make-table-version-errors|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list table-version-error))
   aws-sdk/generator/shape::members))
(common-lisp:deftype tag-key () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype tag-keys-list () '(trivial-types:proper-list tag-key))
 (common-lisp:defun |make-tag-keys-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list tag-key))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (tag-resource-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-tag-resource-request-"))
   (resource-arn (common-lisp:error ":resource-arn is required") :type
    (common-lisp:or glue-resource-arn common-lisp:null))
   (tags-to-add (common-lisp:error ":tags-to-add is required") :type
    (common-lisp:or tags-map common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'tag-resource-request 'make-tag-resource-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input tag-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input tag-resource-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-arn))
      (common-lisp:list
       (common-lisp:cons "ResourceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags-to-add))
      (common-lisp:list
       (common-lisp:cons "TagsToAdd"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input tag-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (tag-resource-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-tag-resource-response-")))
 (common-lisp:export
  (common-lisp:list 'tag-resource-response 'make-tag-resource-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          tag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          tag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          tag-resource-response))
   common-lisp:nil))
(common-lisp:deftype tag-value () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype tags-map () 'common-lisp:hash-table)
 (common-lisp:defun |make-tags-map| (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:deftype target-format () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (task-run (:copier common-lisp:nil) (:conc-name "struct-shape-task-run-"))
   (transform-id common-lisp:nil :type
    (common-lisp:or hash-string common-lisp:null))
   (task-run-id common-lisp:nil :type
    (common-lisp:or hash-string common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or task-status-type common-lisp:null))
   (log-group-name common-lisp:nil :type
    (common-lisp:or generic-string common-lisp:null))
   (properties common-lisp:nil :type
    (common-lisp:or task-run-properties common-lisp:null))
   (error-string common-lisp:nil :type
    (common-lisp:or generic-string common-lisp:null))
   (started-on common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (last-modified-on common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (completed-on common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (execution-time common-lisp:nil :type
    (common-lisp:or execution-time common-lisp:null)))
 (common-lisp:export (common-lisp:list 'task-run 'make-task-run))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input task-run))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input task-run))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'transform-id))
      (common-lisp:list
       (common-lisp:cons "TransformId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'task-run-id))
      (common-lisp:list
       (common-lisp:cons "TaskRunId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'log-group-name))
      (common-lisp:list
       (common-lisp:cons "LogGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'properties))
      (common-lisp:list
       (common-lisp:cons "Properties"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error-string))
      (common-lisp:list
       (common-lisp:cons "ErrorString"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'started-on))
      (common-lisp:list
       (common-lisp:cons "StartedOn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-modified-on))
      (common-lisp:list
       (common-lisp:cons "LastModifiedOn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'completed-on))
      (common-lisp:list
       (common-lisp:cons "CompletedOn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'execution-time))
      (common-lisp:list
       (common-lisp:cons "ExecutionTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input task-run))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (task-run-filter-criteria (:copier common-lisp:nil)
      (:conc-name "struct-shape-task-run-filter-criteria-"))
   (task-run-type common-lisp:nil :type
    (common-lisp:or task-type common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or task-status-type common-lisp:null))
   (started-before common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (started-after common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'task-run-filter-criteria 'make-task-run-filter-criteria))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          task-run-filter-criteria))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          task-run-filter-criteria))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'task-run-type))
      (common-lisp:list
       (common-lisp:cons "TaskRunType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'started-before))
      (common-lisp:list
       (common-lisp:cons "StartedBefore"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'started-after))
      (common-lisp:list
       (common-lisp:cons "StartedAfter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          task-run-filter-criteria))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype task-run-list () '(trivial-types:proper-list task-run))
 (common-lisp:defun |make-task-run-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list task-run))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (task-run-properties (:copier common-lisp:nil)
      (:conc-name "struct-shape-task-run-properties-"))
   (task-type common-lisp:nil :type
    (common-lisp:or task-type common-lisp:null))
   (import-labels-task-run-properties common-lisp:nil :type
    (common-lisp:or import-labels-task-run-properties common-lisp:null))
   (export-labels-task-run-properties common-lisp:nil :type
    (common-lisp:or export-labels-task-run-properties common-lisp:null))
   (labeling-set-generation-task-run-properties common-lisp:nil :type
    (common-lisp:or labeling-set-generation-task-run-properties
                    common-lisp:null))
   (find-matches-task-run-properties common-lisp:nil :type
    (common-lisp:or find-matches-task-run-properties common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'task-run-properties 'make-task-run-properties))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input task-run-properties))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input task-run-properties))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'task-type))
      (common-lisp:list
       (common-lisp:cons "TaskType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'import-labels-task-run-properties))
      (common-lisp:list
       (common-lisp:cons "ImportLabelsTaskRunProperties"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'export-labels-task-run-properties))
      (common-lisp:list
       (common-lisp:cons "ExportLabelsTaskRunProperties"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'labeling-set-generation-task-run-properties))
      (common-lisp:list
       (common-lisp:cons "LabelingSetGenerationTaskRunProperties"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'find-matches-task-run-properties))
      (common-lisp:list
       (common-lisp:cons "FindMatchesTaskRunProperties"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input task-run-properties))
   common-lisp:nil))
(common-lisp:deftype task-run-sort-column-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (task-run-sort-criteria (:copier common-lisp:nil)
      (:conc-name "struct-shape-task-run-sort-criteria-"))
   (column (common-lisp:error ":column is required") :type
    (common-lisp:or task-run-sort-column-type common-lisp:null))
   (sort-direction (common-lisp:error ":sort-direction is required") :type
    (common-lisp:or sort-direction-type common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'task-run-sort-criteria 'make-task-run-sort-criteria))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          task-run-sort-criteria))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          task-run-sort-criteria))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'column))
      (common-lisp:list
       (common-lisp:cons "Column"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sort-direction))
      (common-lisp:list
       (common-lisp:cons "SortDirection"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          task-run-sort-criteria))
   common-lisp:nil))
(common-lisp:deftype task-status-type () 'common-lisp:string)
(common-lisp:deftype task-type () 'common-lisp:string)
(common-lisp:deftype timeout () 'common-lisp:integer)
(common-lisp:deftype timestamp () 'common-lisp:string)
(common-lisp:deftype timestamp-value () 'common-lisp:string)
(common-lisp:deftype token () 'common-lisp:string)
(common-lisp:deftype topk () 'common-lisp:integer)
(common-lisp:deftype total-segments-integer () 'common-lisp:integer)
(common-lisp:deftype transaction-id-string () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (transform-config-parameter (:copier common-lisp:nil)
      (:conc-name "struct-shape-transform-config-parameter-"))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or enclosed-in-string-property common-lisp:null))
   (type (common-lisp:error ":type is required") :type
    (common-lisp:or param-type common-lisp:null))
   (validation-rule common-lisp:nil :type
    (common-lisp:or enclosed-in-string-property common-lisp:null))
   (validation-message common-lisp:nil :type
    (common-lisp:or enclosed-in-string-property common-lisp:null))
   (value common-lisp:nil :type
    (common-lisp:or enclosed-in-string-properties common-lisp:null))
   (list-type common-lisp:nil :type
    (common-lisp:or param-type common-lisp:null))
   (is-optional common-lisp:nil :type
    (common-lisp:or boxed-boolean common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'transform-config-parameter
                    'make-transform-config-parameter))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          transform-config-parameter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          transform-config-parameter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'validation-rule))
      (common-lisp:list
       (common-lisp:cons "ValidationRule"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'validation-message))
      (common-lisp:list
       (common-lisp:cons "ValidationMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "Value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'list-type))
      (common-lisp:list
       (common-lisp:cons "ListType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'is-optional))
      (common-lisp:list
       (common-lisp:cons "IsOptional"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          transform-config-parameter))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype transform-config-parameter-list ()
   '(trivial-types:proper-list transform-config-parameter))
 (common-lisp:defun |make-transform-config-parameter-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            transform-config-parameter))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (transform-encryption (:copier common-lisp:nil)
      (:conc-name "struct-shape-transform-encryption-"))
   (ml-user-data-encryption common-lisp:nil :type
    (common-lisp:or mluser-data-encryption common-lisp:null))
   (task-run-security-configuration-name common-lisp:nil :type
    (common-lisp:or name-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'transform-encryption 'make-transform-encryption))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input transform-encryption))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input transform-encryption))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'ml-user-data-encryption))
      (common-lisp:list
       (common-lisp:cons "MlUserDataEncryption"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'task-run-security-configuration-name))
      (common-lisp:list
       (common-lisp:cons "TaskRunSecurityConfigurationName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input transform-encryption))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (transform-filter-criteria (:copier common-lisp:nil)
      (:conc-name "struct-shape-transform-filter-criteria-"))
   (name common-lisp:nil :type (common-lisp:or name-string common-lisp:null))
   (transform-type common-lisp:nil :type
    (common-lisp:or transform-type common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or transform-status-type common-lisp:null))
   (glue-version common-lisp:nil :type
    (common-lisp:or glue-version-string common-lisp:null))
   (created-before common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (created-after common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (last-modified-before common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (last-modified-after common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (schema common-lisp:nil :type
    (common-lisp:or transform-schema common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'transform-filter-criteria
                    'make-transform-filter-criteria))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          transform-filter-criteria))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          transform-filter-criteria))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'transform-type))
      (common-lisp:list
       (common-lisp:cons "TransformType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'glue-version))
      (common-lisp:list
       (common-lisp:cons "GlueVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-before))
      (common-lisp:list
       (common-lisp:cons "CreatedBefore"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-after))
      (common-lisp:list
       (common-lisp:cons "CreatedAfter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'last-modified-before))
      (common-lisp:list
       (common-lisp:cons "LastModifiedBefore"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-modified-after))
      (common-lisp:list
       (common-lisp:cons "LastModifiedAfter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'schema))
      (common-lisp:list
       (common-lisp:cons "Schema"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          transform-filter-criteria))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype transform-id-list ()
   '(trivial-types:proper-list hash-string))
 (common-lisp:defun |make-transform-id-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list hash-string))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype transform-list ()
   '(trivial-types:proper-list mltransform))
 (common-lisp:defun |make-transform-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list mltransform))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (transform-parameters (:copier common-lisp:nil)
      (:conc-name "struct-shape-transform-parameters-"))
   (transform-type (common-lisp:error ":transform-type is required") :type
    (common-lisp:or transform-type common-lisp:null))
   (find-matches-parameters common-lisp:nil :type
    (common-lisp:or find-matches-parameters common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'transform-parameters 'make-transform-parameters))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input transform-parameters))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input transform-parameters))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'transform-type))
      (common-lisp:list
       (common-lisp:cons "TransformType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'find-matches-parameters))
      (common-lisp:list
       (common-lisp:cons "FindMatchesParameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input transform-parameters))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype transform-schema ()
   '(trivial-types:proper-list schema-column))
 (common-lisp:defun |make-transform-schema|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list schema-column))
   aws-sdk/generator/shape::members))
(common-lisp:deftype transform-sort-column-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (transform-sort-criteria (:copier common-lisp:nil)
      (:conc-name "struct-shape-transform-sort-criteria-"))
   (column (common-lisp:error ":column is required") :type
    (common-lisp:or transform-sort-column-type common-lisp:null))
   (sort-direction (common-lisp:error ":sort-direction is required") :type
    (common-lisp:or sort-direction-type common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'transform-sort-criteria 'make-transform-sort-criteria))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          transform-sort-criteria))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          transform-sort-criteria))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'column))
      (common-lisp:list
       (common-lisp:cons "Column"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sort-direction))
      (common-lisp:list
       (common-lisp:cons "SortDirection"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          transform-sort-criteria))
   common-lisp:nil))
(common-lisp:deftype transform-status-type () 'common-lisp:string)
(common-lisp:deftype transform-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (trigger (:copier common-lisp:nil) (:conc-name "struct-shape-trigger-"))
   (name common-lisp:nil :type (common-lisp:or name-string common-lisp:null))
   (workflow-name common-lisp:nil :type
    (common-lisp:or name-string common-lisp:null))
   (id common-lisp:nil :type (common-lisp:or id-string common-lisp:null))
   (type common-lisp:nil :type (common-lisp:or trigger-type common-lisp:null))
   (state common-lisp:nil :type
    (common-lisp:or trigger-state common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or description-string common-lisp:null))
   (schedule common-lisp:nil :type
    (common-lisp:or generic-string common-lisp:null))
   (actions common-lisp:nil :type
    (common-lisp:or action-list common-lisp:null))
   (predicate common-lisp:nil :type
    (common-lisp:or predicate common-lisp:null))
   (event-batching-condition common-lisp:nil :type
    (common-lisp:or event-batching-condition common-lisp:null)))
 (common-lisp:export (common-lisp:list 'trigger 'make-trigger))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input trigger))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input trigger))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'workflow-name))
      (common-lisp:list
       (common-lisp:cons "WorkflowName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "State"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'schedule))
      (common-lisp:list
       (common-lisp:cons "Schedule"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'actions))
      (common-lisp:list
       (common-lisp:cons "Actions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'predicate))
      (common-lisp:list
       (common-lisp:cons "Predicate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'event-batching-condition))
      (common-lisp:list
       (common-lisp:cons "EventBatchingCondition"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input trigger))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype trigger-list () '(trivial-types:proper-list trigger))
 (common-lisp:defun |make-trigger-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list trigger))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype trigger-name-list ()
   '(trivial-types:proper-list name-string))
 (common-lisp:defun |make-trigger-name-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list name-string))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (trigger-node-details (:copier common-lisp:nil)
      (:conc-name "struct-shape-trigger-node-details-"))
   (trigger common-lisp:nil :type (common-lisp:or trigger common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'trigger-node-details 'make-trigger-node-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input trigger-node-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input trigger-node-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'trigger))
      (common-lisp:list
       (common-lisp:cons "Trigger"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input trigger-node-details))
   common-lisp:nil))
(common-lisp:deftype trigger-state () 'common-lisp:string)
(common-lisp:deftype trigger-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (trigger-update (:copier common-lisp:nil)
      (:conc-name "struct-shape-trigger-update-"))
   (name common-lisp:nil :type (common-lisp:or name-string common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or description-string common-lisp:null))
   (schedule common-lisp:nil :type
    (common-lisp:or generic-string common-lisp:null))
   (actions common-lisp:nil :type
    (common-lisp:or action-list common-lisp:null))
   (predicate common-lisp:nil :type
    (common-lisp:or predicate common-lisp:null))
   (event-batching-condition common-lisp:nil :type
    (common-lisp:or event-batching-condition common-lisp:null)))
 (common-lisp:export (common-lisp:list 'trigger-update 'make-trigger-update))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input trigger-update))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input trigger-update))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'schedule))
      (common-lisp:list
       (common-lisp:cons "Schedule"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'actions))
      (common-lisp:list
       (common-lisp:cons "Actions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'predicate))
      (common-lisp:list
       (common-lisp:cons "Predicate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'event-batching-condition))
      (common-lisp:list
       (common-lisp:cons "EventBatchingCondition"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input trigger-update))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype two-inputs () '(trivial-types:proper-list node-id))
 (common-lisp:defun |make-two-inputs|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list node-id))
   aws-sdk/generator/shape::members))
(common-lisp:deftype type-string () 'common-lisp:string)
(common-lisp:deftype uri () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (unfiltered-partition (:copier common-lisp:nil)
      (:conc-name "struct-shape-unfiltered-partition-"))
   (partition common-lisp:nil :type
    (common-lisp:or partition common-lisp:null))
   (authorized-columns common-lisp:nil :type
    (common-lisp:or name-string-list common-lisp:null))
   (is-registered-with-lake-formation common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'unfiltered-partition 'make-unfiltered-partition))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input unfiltered-partition))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input unfiltered-partition))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'partition))
      (common-lisp:list
       (common-lisp:cons "Partition"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'authorized-columns))
      (common-lisp:list
       (common-lisp:cons "AuthorizedColumns"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'is-registered-with-lake-formation))
      (common-lisp:list
       (common-lisp:cons "IsRegisteredWithLakeFormation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input unfiltered-partition))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype unfiltered-partition-list ()
   '(trivial-types:proper-list unfiltered-partition))
 (common-lisp:defun |make-unfiltered-partition-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list unfiltered-partition))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (union (:copier common-lisp:nil) (:conc-name "struct-shape-union-"))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or node-name common-lisp:null))
   (inputs (common-lisp:error ":inputs is required") :type
    (common-lisp:or two-inputs common-lisp:null))
   (union-type (common-lisp:error ":union-type is required") :type
    (common-lisp:or union-type common-lisp:null)))
 (common-lisp:export (common-lisp:list 'union 'make-union))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input union))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input union))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'inputs))
      (common-lisp:list
       (common-lisp:cons "Inputs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'union-type))
      (common-lisp:list
       (common-lisp:cons "UnionType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input union))
   common-lisp:nil))
(common-lisp:deftype union-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (untag-resource-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-untag-resource-request-"))
   (resource-arn (common-lisp:error ":resource-arn is required") :type
    (common-lisp:or glue-resource-arn common-lisp:null))
   (tags-to-remove (common-lisp:error ":tags-to-remove is required") :type
    (common-lisp:or tag-keys-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'untag-resource-request 'make-untag-resource-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-arn))
      (common-lisp:list
       (common-lisp:cons "ResourceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags-to-remove))
      (common-lisp:list
       (common-lisp:cons "TagsToRemove"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (untag-resource-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-untag-resource-response-")))
 (common-lisp:export
  (common-lisp:list 'untag-resource-response 'make-untag-resource-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-response))
   common-lisp:nil))
(common-lisp:deftype update-behavior () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (update-blueprint-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-blueprint-request-"))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or orchestration-name-string common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or generic512char-string common-lisp:null))
   (blueprint-location (common-lisp:error ":blueprint-location is required")
    :type (common-lisp:or orchestration-s3location common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-blueprint-request 'make-update-blueprint-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-blueprint-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-blueprint-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'blueprint-location))
      (common-lisp:list
       (common-lisp:cons "BlueprintLocation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-blueprint-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-blueprint-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-blueprint-response-"))
   (name common-lisp:nil :type (common-lisp:or name-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-blueprint-response
                    'make-update-blueprint-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-blueprint-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-blueprint-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-blueprint-response))
   common-lisp:nil))
(common-lisp:deftype update-catalog-behavior () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (update-classifier-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-classifier-request-"))
   (grok-classifier common-lisp:nil :type
    (common-lisp:or update-grok-classifier-request common-lisp:null))
   (xmlclassifier common-lisp:nil :type
    (common-lisp:or update-xmlclassifier-request common-lisp:null))
   (json-classifier common-lisp:nil :type
    (common-lisp:or update-json-classifier-request common-lisp:null))
   (csv-classifier common-lisp:nil :type
    (common-lisp:or update-csv-classifier-request common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-classifier-request
                    'make-update-classifier-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-classifier-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-classifier-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'grok-classifier))
      (common-lisp:list
       (common-lisp:cons "GrokClassifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'xmlclassifier))
      (common-lisp:list
       (common-lisp:cons "XMLClassifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'json-classifier))
      (common-lisp:list
       (common-lisp:cons "JsonClassifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'csv-classifier))
      (common-lisp:list
       (common-lisp:cons "CsvClassifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-classifier-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-classifier-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-classifier-response-")))
 (common-lisp:export
  (common-lisp:list 'update-classifier-response
                    'make-update-classifier-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-classifier-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-classifier-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-classifier-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-column-statistics-for-partition-request (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-update-column-statistics-for-partition-request-"))
   (catalog-id common-lisp:nil :type
    (common-lisp:or catalog-id-string common-lisp:null))
   (database-name (common-lisp:error ":database-name is required") :type
    (common-lisp:or name-string common-lisp:null))
   (table-name (common-lisp:error ":table-name is required") :type
    (common-lisp:or name-string common-lisp:null))
   (partition-values (common-lisp:error ":partition-values is required") :type
    (common-lisp:or value-string-list common-lisp:null))
   (column-statistics-list
    (common-lisp:error ":column-statistics-list is required") :type
    (common-lisp:or update-column-statistics-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-column-statistics-for-partition-request
                    'make-update-column-statistics-for-partition-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-column-statistics-for-partition-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-column-statistics-for-partition-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'catalog-id))
      (common-lisp:list
       (common-lisp:cons "CatalogId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'database-name))
      (common-lisp:list
       (common-lisp:cons "DatabaseName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'table-name))
      (common-lisp:list
       (common-lisp:cons "TableName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'partition-values))
      (common-lisp:list
       (common-lisp:cons "PartitionValues"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'column-statistics-list))
      (common-lisp:list
       (common-lisp:cons "ColumnStatisticsList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-column-statistics-for-partition-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-column-statistics-for-partition-response (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-update-column-statistics-for-partition-response-"))
   (errors common-lisp:nil :type
    (common-lisp:or column-statistics-errors common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-column-statistics-for-partition-response
                    'make-update-column-statistics-for-partition-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-column-statistics-for-partition-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-column-statistics-for-partition-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'errors))
      (common-lisp:list
       (common-lisp:cons "Errors"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-column-statistics-for-partition-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-column-statistics-for-table-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-column-statistics-for-table-request-"))
   (catalog-id common-lisp:nil :type
    (common-lisp:or catalog-id-string common-lisp:null))
   (database-name (common-lisp:error ":database-name is required") :type
    (common-lisp:or name-string common-lisp:null))
   (table-name (common-lisp:error ":table-name is required") :type
    (common-lisp:or name-string common-lisp:null))
   (column-statistics-list
    (common-lisp:error ":column-statistics-list is required") :type
    (common-lisp:or update-column-statistics-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-column-statistics-for-table-request
                    'make-update-column-statistics-for-table-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-column-statistics-for-table-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-column-statistics-for-table-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'catalog-id))
      (common-lisp:list
       (common-lisp:cons "CatalogId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'database-name))
      (common-lisp:list
       (common-lisp:cons "DatabaseName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'table-name))
      (common-lisp:list
       (common-lisp:cons "TableName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'column-statistics-list))
      (common-lisp:list
       (common-lisp:cons "ColumnStatisticsList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-column-statistics-for-table-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-column-statistics-for-table-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-column-statistics-for-table-response-"))
   (errors common-lisp:nil :type
    (common-lisp:or column-statistics-errors common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-column-statistics-for-table-response
                    'make-update-column-statistics-for-table-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-column-statistics-for-table-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-column-statistics-for-table-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'errors))
      (common-lisp:list
       (common-lisp:cons "Errors"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-column-statistics-for-table-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype update-column-statistics-list ()
   '(trivial-types:proper-list column-statistics))
 (common-lisp:defun |make-update-column-statistics-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list column-statistics))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (update-connection-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-connection-request-"))
   (catalog-id common-lisp:nil :type
    (common-lisp:or catalog-id-string common-lisp:null))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or name-string common-lisp:null))
   (connection-input (common-lisp:error ":connection-input is required") :type
    (common-lisp:or connection-input common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-connection-request
                    'make-update-connection-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-connection-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-connection-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'catalog-id))
      (common-lisp:list
       (common-lisp:cons "CatalogId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'connection-input))
      (common-lisp:list
       (common-lisp:cons "ConnectionInput"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-connection-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-connection-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-connection-response-")))
 (common-lisp:export
  (common-lisp:list 'update-connection-response
                    'make-update-connection-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-connection-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-connection-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-connection-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-crawler-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-crawler-request-"))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or name-string common-lisp:null))
   (role common-lisp:nil :type (common-lisp:or role common-lisp:null))
   (database-name common-lisp:nil :type
    (common-lisp:or database-name common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or description-string-removable common-lisp:null))
   (targets common-lisp:nil :type
    (common-lisp:or crawler-targets common-lisp:null))
   (schedule common-lisp:nil :type
    (common-lisp:or cron-expression common-lisp:null))
   (classifiers common-lisp:nil :type
    (common-lisp:or classifier-name-list common-lisp:null))
   (table-prefix common-lisp:nil :type
    (common-lisp:or table-prefix common-lisp:null))
   (schema-change-policy common-lisp:nil :type
    (common-lisp:or schema-change-policy common-lisp:null))
   (recrawl-policy common-lisp:nil :type
    (common-lisp:or recrawl-policy common-lisp:null))
   (lineage-configuration common-lisp:nil :type
    (common-lisp:or lineage-configuration common-lisp:null))
   (lake-formation-configuration common-lisp:nil :type
    (common-lisp:or lake-formation-configuration common-lisp:null))
   (configuration common-lisp:nil :type
    (common-lisp:or crawler-configuration common-lisp:null))
   (crawler-security-configuration common-lisp:nil :type
    (common-lisp:or crawler-security-configuration common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-crawler-request 'make-update-crawler-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-crawler-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-crawler-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role))
      (common-lisp:list
       (common-lisp:cons "Role"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'database-name))
      (common-lisp:list
       (common-lisp:cons "DatabaseName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'targets))
      (common-lisp:list
       (common-lisp:cons "Targets"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'schedule))
      (common-lisp:list
       (common-lisp:cons "Schedule"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'classifiers))
      (common-lisp:list
       (common-lisp:cons "Classifiers"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'table-prefix))
      (common-lisp:list
       (common-lisp:cons "TablePrefix"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'schema-change-policy))
      (common-lisp:list
       (common-lisp:cons "SchemaChangePolicy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'recrawl-policy))
      (common-lisp:list
       (common-lisp:cons "RecrawlPolicy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'lineage-configuration))
      (common-lisp:list
       (common-lisp:cons "LineageConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'lake-formation-configuration))
      (common-lisp:list
       (common-lisp:cons "LakeFormationConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'configuration))
      (common-lisp:list
       (common-lisp:cons "Configuration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'crawler-security-configuration))
      (common-lisp:list
       (common-lisp:cons "CrawlerSecurityConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-crawler-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-crawler-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-crawler-response-")))
 (common-lisp:export
  (common-lisp:list 'update-crawler-response 'make-update-crawler-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-crawler-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-crawler-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-crawler-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-crawler-schedule-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-crawler-schedule-request-"))
   (crawler-name (common-lisp:error ":crawler-name is required") :type
    (common-lisp:or name-string common-lisp:null))
   (schedule common-lisp:nil :type
    (common-lisp:or cron-expression common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-crawler-schedule-request
                    'make-update-crawler-schedule-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-crawler-schedule-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-crawler-schedule-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'crawler-name))
      (common-lisp:list
       (common-lisp:cons "CrawlerName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'schedule))
      (common-lisp:list
       (common-lisp:cons "Schedule"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-crawler-schedule-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-crawler-schedule-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-crawler-schedule-response-")))
 (common-lisp:export
  (common-lisp:list 'update-crawler-schedule-response
                    'make-update-crawler-schedule-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-crawler-schedule-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-crawler-schedule-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-crawler-schedule-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-csv-classifier-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-csv-classifier-request-"))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or name-string common-lisp:null))
   (delimiter common-lisp:nil :type
    (common-lisp:or csv-column-delimiter common-lisp:null))
   (quote-symbol common-lisp:nil :type
    (common-lisp:or csv-quote-symbol common-lisp:null))
   (contains-header common-lisp:nil :type
    (common-lisp:or csv-header-option common-lisp:null))
   (header common-lisp:nil :type (common-lisp:or csv-header common-lisp:null))
   (disable-value-trimming common-lisp:nil :type
    (common-lisp:or nullable-boolean common-lisp:null))
   (allow-single-column common-lisp:nil :type
    (common-lisp:or nullable-boolean common-lisp:null))
   (custom-datatype-configured common-lisp:nil :type
    (common-lisp:or nullable-boolean common-lisp:null))
   (custom-datatypes common-lisp:nil :type
    (common-lisp:or custom-datatypes common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-csv-classifier-request
                    'make-update-csv-classifier-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-csv-classifier-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-csv-classifier-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'delimiter))
      (common-lisp:list
       (common-lisp:cons "Delimiter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'quote-symbol))
      (common-lisp:list
       (common-lisp:cons "QuoteSymbol"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'contains-header))
      (common-lisp:list
       (common-lisp:cons "ContainsHeader"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'header))
      (common-lisp:list
       (common-lisp:cons "Header"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'disable-value-trimming))
      (common-lisp:list
       (common-lisp:cons "DisableValueTrimming"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'allow-single-column))
      (common-lisp:list
       (common-lisp:cons "AllowSingleColumn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'custom-datatype-configured))
      (common-lisp:list
       (common-lisp:cons "CustomDatatypeConfigured"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'custom-datatypes))
      (common-lisp:list
       (common-lisp:cons "CustomDatatypes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-csv-classifier-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-data-quality-ruleset-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-data-quality-ruleset-request-"))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or name-string common-lisp:null))
   (updated-name common-lisp:nil :type
    (common-lisp:or name-string common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or description-string common-lisp:null))
   (ruleset common-lisp:nil :type
    (common-lisp:or data-quality-ruleset-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-data-quality-ruleset-request
                    'make-update-data-quality-ruleset-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-data-quality-ruleset-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-data-quality-ruleset-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'updated-name))
      (common-lisp:list
       (common-lisp:cons "UpdatedName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ruleset))
      (common-lisp:list
       (common-lisp:cons "Ruleset"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-data-quality-ruleset-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-data-quality-ruleset-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-data-quality-ruleset-response-"))
   (name common-lisp:nil :type (common-lisp:or name-string common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or description-string common-lisp:null))
   (ruleset common-lisp:nil :type
    (common-lisp:or data-quality-ruleset-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-data-quality-ruleset-response
                    'make-update-data-quality-ruleset-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-data-quality-ruleset-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-data-quality-ruleset-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ruleset))
      (common-lisp:list
       (common-lisp:cons "Ruleset"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-data-quality-ruleset-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-database-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-database-request-"))
   (catalog-id common-lisp:nil :type
    (common-lisp:or catalog-id-string common-lisp:null))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or name-string common-lisp:null))
   (database-input (common-lisp:error ":database-input is required") :type
    (common-lisp:or database-input common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-database-request 'make-update-database-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-database-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-database-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'catalog-id))
      (common-lisp:list
       (common-lisp:cons "CatalogId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'database-input))
      (common-lisp:list
       (common-lisp:cons "DatabaseInput"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-database-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-database-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-database-response-")))
 (common-lisp:export
  (common-lisp:list 'update-database-response 'make-update-database-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-database-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-database-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-database-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-dev-endpoint-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-dev-endpoint-request-"))
   (endpoint-name (common-lisp:error ":endpoint-name is required") :type
    (common-lisp:or generic-string common-lisp:null))
   (public-key common-lisp:nil :type
    (common-lisp:or generic-string common-lisp:null))
   (add-public-keys common-lisp:nil :type
    (common-lisp:or public-keys-list common-lisp:null))
   (delete-public-keys common-lisp:nil :type
    (common-lisp:or public-keys-list common-lisp:null))
   (custom-libraries common-lisp:nil :type
    (common-lisp:or dev-endpoint-custom-libraries common-lisp:null))
   (update-etl-libraries common-lisp:nil :type
    (common-lisp:or boolean-value common-lisp:null))
   (delete-arguments common-lisp:nil :type
    (common-lisp:or string-list common-lisp:null))
   (add-arguments common-lisp:nil :type
    (common-lisp:or map-value common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-dev-endpoint-request
                    'make-update-dev-endpoint-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-dev-endpoint-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-dev-endpoint-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'endpoint-name))
      (common-lisp:list
       (common-lisp:cons "EndpointName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'public-key))
      (common-lisp:list
       (common-lisp:cons "PublicKey"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'add-public-keys))
      (common-lisp:list
       (common-lisp:cons "AddPublicKeys"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'delete-public-keys))
      (common-lisp:list
       (common-lisp:cons "DeletePublicKeys"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'custom-libraries))
      (common-lisp:list
       (common-lisp:cons "CustomLibraries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'update-etl-libraries))
      (common-lisp:list
       (common-lisp:cons "UpdateEtlLibraries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'delete-arguments))
      (common-lisp:list
       (common-lisp:cons "DeleteArguments"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'add-arguments))
      (common-lisp:list
       (common-lisp:cons "AddArguments"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-dev-endpoint-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-dev-endpoint-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-dev-endpoint-response-")))
 (common-lisp:export
  (common-lisp:list 'update-dev-endpoint-response
                    'make-update-dev-endpoint-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-dev-endpoint-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-dev-endpoint-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-dev-endpoint-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-grok-classifier-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-grok-classifier-request-"))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or name-string common-lisp:null))
   (classification common-lisp:nil :type
    (common-lisp:or classification common-lisp:null))
   (grok-pattern common-lisp:nil :type
    (common-lisp:or grok-pattern common-lisp:null))
   (custom-patterns common-lisp:nil :type
    (common-lisp:or custom-patterns common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-grok-classifier-request
                    'make-update-grok-classifier-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-grok-classifier-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-grok-classifier-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'classification))
      (common-lisp:list
       (common-lisp:cons "Classification"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'grok-pattern))
      (common-lisp:list
       (common-lisp:cons "GrokPattern"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'custom-patterns))
      (common-lisp:list
       (common-lisp:cons "CustomPatterns"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-grok-classifier-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-job-from-source-control-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-job-from-source-control-request-"))
   (job-name common-lisp:nil :type
    (common-lisp:or name-string common-lisp:null))
   (provider common-lisp:nil :type
    (common-lisp:or source-control-provider common-lisp:null))
   (repository-name common-lisp:nil :type
    (common-lisp:or name-string common-lisp:null))
   (repository-owner common-lisp:nil :type
    (common-lisp:or name-string common-lisp:null))
   (branch-name common-lisp:nil :type
    (common-lisp:or name-string common-lisp:null))
   (folder common-lisp:nil :type (common-lisp:or name-string common-lisp:null))
   (commit-id common-lisp:nil :type
    (common-lisp:or commit-id-string common-lisp:null))
   (auth-strategy common-lisp:nil :type
    (common-lisp:or source-control-auth-strategy common-lisp:null))
   (auth-token common-lisp:nil :type
    (common-lisp:or auth-token-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-job-from-source-control-request
                    'make-update-job-from-source-control-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-job-from-source-control-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-job-from-source-control-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-name))
      (common-lisp:list
       (common-lisp:cons "JobName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'provider))
      (common-lisp:list
       (common-lisp:cons "Provider"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'repository-name))
      (common-lisp:list
       (common-lisp:cons "RepositoryName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'repository-owner))
      (common-lisp:list
       (common-lisp:cons "RepositoryOwner"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'branch-name))
      (common-lisp:list
       (common-lisp:cons "BranchName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'folder))
      (common-lisp:list
       (common-lisp:cons "Folder"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'commit-id))
      (common-lisp:list
       (common-lisp:cons "CommitId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'auth-strategy))
      (common-lisp:list
       (common-lisp:cons "AuthStrategy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'auth-token))
      (common-lisp:list
       (common-lisp:cons "AuthToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-job-from-source-control-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-job-from-source-control-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-job-from-source-control-response-"))
   (job-name common-lisp:nil :type
    (common-lisp:or name-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-job-from-source-control-response
                    'make-update-job-from-source-control-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-job-from-source-control-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-job-from-source-control-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-name))
      (common-lisp:list
       (common-lisp:cons "JobName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-job-from-source-control-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-job-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-job-request-"))
   (job-name (common-lisp:error ":job-name is required") :type
    (common-lisp:or name-string common-lisp:null))
   (job-update (common-lisp:error ":job-update is required") :type
    (common-lisp:or job-update common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-job-request 'make-update-job-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input update-job-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input update-job-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-name))
      (common-lisp:list
       (common-lisp:cons "JobName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-update))
      (common-lisp:list
       (common-lisp:cons "JobUpdate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input update-job-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-job-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-job-response-"))
   (job-name common-lisp:nil :type
    (common-lisp:or name-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-job-response 'make-update-job-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input update-job-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input update-job-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-name))
      (common-lisp:list
       (common-lisp:cons "JobName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input update-job-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-json-classifier-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-json-classifier-request-"))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or name-string common-lisp:null))
   (json-path common-lisp:nil :type
    (common-lisp:or json-path common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-json-classifier-request
                    'make-update-json-classifier-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-json-classifier-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-json-classifier-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'json-path))
      (common-lisp:list
       (common-lisp:cons "JsonPath"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-json-classifier-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-mltransform-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-mltransform-request-"))
   (transform-id (common-lisp:error ":transform-id is required") :type
    (common-lisp:or hash-string common-lisp:null))
   (name common-lisp:nil :type (common-lisp:or name-string common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or description-string common-lisp:null))
   (parameters common-lisp:nil :type
    (common-lisp:or transform-parameters common-lisp:null))
   (role common-lisp:nil :type (common-lisp:or role-string common-lisp:null))
   (glue-version common-lisp:nil :type
    (common-lisp:or glue-version-string common-lisp:null))
   (max-capacity common-lisp:nil :type
    (common-lisp:or nullable-double common-lisp:null))
   (worker-type common-lisp:nil :type
    (common-lisp:or worker-type common-lisp:null))
   (number-of-workers common-lisp:nil :type
    (common-lisp:or nullable-integer common-lisp:null))
   (timeout common-lisp:nil :type (common-lisp:or timeout common-lisp:null))
   (max-retries common-lisp:nil :type
    (common-lisp:or nullable-integer common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-mltransform-request
                    'make-update-mltransform-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-mltransform-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-mltransform-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'transform-id))
      (common-lisp:list
       (common-lisp:cons "TransformId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'parameters))
      (common-lisp:list
       (common-lisp:cons "Parameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role))
      (common-lisp:list
       (common-lisp:cons "Role"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'glue-version))
      (common-lisp:list
       (common-lisp:cons "GlueVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-capacity))
      (common-lisp:list
       (common-lisp:cons "MaxCapacity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'worker-type))
      (common-lisp:list
       (common-lisp:cons "WorkerType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'number-of-workers))
      (common-lisp:list
       (common-lisp:cons "NumberOfWorkers"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'timeout))
      (common-lisp:list
       (common-lisp:cons "Timeout"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-retries))
      (common-lisp:list
       (common-lisp:cons "MaxRetries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-mltransform-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-mltransform-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-mltransform-response-"))
   (transform-id common-lisp:nil :type
    (common-lisp:or hash-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-mltransform-response
                    'make-update-mltransform-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-mltransform-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-mltransform-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'transform-id))
      (common-lisp:list
       (common-lisp:cons "TransformId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-mltransform-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-partition-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-partition-request-"))
   (catalog-id common-lisp:nil :type
    (common-lisp:or catalog-id-string common-lisp:null))
   (database-name (common-lisp:error ":database-name is required") :type
    (common-lisp:or name-string common-lisp:null))
   (table-name (common-lisp:error ":table-name is required") :type
    (common-lisp:or name-string common-lisp:null))
   (partition-value-list
    (common-lisp:error ":partition-value-list is required") :type
    (common-lisp:or bounded-partition-value-list common-lisp:null))
   (partition-input (common-lisp:error ":partition-input is required") :type
    (common-lisp:or partition-input common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-partition-request 'make-update-partition-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-partition-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-partition-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'catalog-id))
      (common-lisp:list
       (common-lisp:cons "CatalogId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'database-name))
      (common-lisp:list
       (common-lisp:cons "DatabaseName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'table-name))
      (common-lisp:list
       (common-lisp:cons "TableName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'partition-value-list))
      (common-lisp:list
       (common-lisp:cons "PartitionValueList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'partition-input))
      (common-lisp:list
       (common-lisp:cons "PartitionInput"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-partition-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-partition-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-partition-response-")))
 (common-lisp:export
  (common-lisp:list 'update-partition-response
                    'make-update-partition-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-partition-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-partition-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-partition-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-registry-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-registry-input-"))
   (registry-id (common-lisp:error ":registry-id is required") :type
    (common-lisp:or registry-id common-lisp:null))
   (description (common-lisp:error ":description is required") :type
    (common-lisp:or description-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-registry-input 'make-update-registry-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-registry-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-registry-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'registry-id))
      (common-lisp:list
       (common-lisp:cons "RegistryId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-registry-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-registry-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-registry-response-"))
   (registry-name common-lisp:nil :type
    (common-lisp:or schema-registry-name-string common-lisp:null))
   (registry-arn common-lisp:nil :type
    (common-lisp:or glue-resource-arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-registry-response 'make-update-registry-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-registry-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-registry-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'registry-name))
      (common-lisp:list
       (common-lisp:cons "RegistryName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'registry-arn))
      (common-lisp:list
       (common-lisp:cons "RegistryArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-registry-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-schema-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-schema-input-"))
   (schema-id (common-lisp:error ":schema-id is required") :type
    (common-lisp:or schema-id common-lisp:null))
   (schema-version-number common-lisp:nil :type
    (common-lisp:or schema-version-number common-lisp:null))
   (compatibility common-lisp:nil :type
    (common-lisp:or compatibility common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or description-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-schema-input 'make-update-schema-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input update-schema-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input update-schema-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'schema-id))
      (common-lisp:list
       (common-lisp:cons "SchemaId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'schema-version-number))
      (common-lisp:list
       (common-lisp:cons "SchemaVersionNumber"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'compatibility))
      (common-lisp:list
       (common-lisp:cons "Compatibility"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input update-schema-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-schema-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-schema-response-"))
   (schema-arn common-lisp:nil :type
    (common-lisp:or glue-resource-arn common-lisp:null))
   (schema-name common-lisp:nil :type
    (common-lisp:or schema-registry-name-string common-lisp:null))
   (registry-name common-lisp:nil :type
    (common-lisp:or schema-registry-name-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-schema-response 'make-update-schema-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-schema-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-schema-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'schema-arn))
      (common-lisp:list
       (common-lisp:cons "SchemaArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'schema-name))
      (common-lisp:list
       (common-lisp:cons "SchemaName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'registry-name))
      (common-lisp:list
       (common-lisp:cons "RegistryName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-schema-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-source-control-from-job-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-source-control-from-job-request-"))
   (job-name common-lisp:nil :type
    (common-lisp:or name-string common-lisp:null))
   (provider common-lisp:nil :type
    (common-lisp:or source-control-provider common-lisp:null))
   (repository-name common-lisp:nil :type
    (common-lisp:or name-string common-lisp:null))
   (repository-owner common-lisp:nil :type
    (common-lisp:or name-string common-lisp:null))
   (branch-name common-lisp:nil :type
    (common-lisp:or name-string common-lisp:null))
   (folder common-lisp:nil :type (common-lisp:or name-string common-lisp:null))
   (commit-id common-lisp:nil :type
    (common-lisp:or commit-id-string common-lisp:null))
   (auth-strategy common-lisp:nil :type
    (common-lisp:or source-control-auth-strategy common-lisp:null))
   (auth-token common-lisp:nil :type
    (common-lisp:or auth-token-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-source-control-from-job-request
                    'make-update-source-control-from-job-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-source-control-from-job-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-source-control-from-job-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-name))
      (common-lisp:list
       (common-lisp:cons "JobName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'provider))
      (common-lisp:list
       (common-lisp:cons "Provider"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'repository-name))
      (common-lisp:list
       (common-lisp:cons "RepositoryName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'repository-owner))
      (common-lisp:list
       (common-lisp:cons "RepositoryOwner"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'branch-name))
      (common-lisp:list
       (common-lisp:cons "BranchName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'folder))
      (common-lisp:list
       (common-lisp:cons "Folder"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'commit-id))
      (common-lisp:list
       (common-lisp:cons "CommitId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'auth-strategy))
      (common-lisp:list
       (common-lisp:cons "AuthStrategy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'auth-token))
      (common-lisp:list
       (common-lisp:cons "AuthToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-source-control-from-job-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-source-control-from-job-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-source-control-from-job-response-"))
   (job-name common-lisp:nil :type
    (common-lisp:or name-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-source-control-from-job-response
                    'make-update-source-control-from-job-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-source-control-from-job-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-source-control-from-job-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-name))
      (common-lisp:list
       (common-lisp:cons "JobName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-source-control-from-job-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-table-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-table-request-"))
   (catalog-id common-lisp:nil :type
    (common-lisp:or catalog-id-string common-lisp:null))
   (database-name (common-lisp:error ":database-name is required") :type
    (common-lisp:or name-string common-lisp:null))
   (table-input (common-lisp:error ":table-input is required") :type
    (common-lisp:or table-input common-lisp:null))
   (skip-archive common-lisp:nil :type
    (common-lisp:or boolean-nullable common-lisp:null))
   (transaction-id common-lisp:nil :type
    (common-lisp:or transaction-id-string common-lisp:null))
   (version-id common-lisp:nil :type
    (common-lisp:or version-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-table-request 'make-update-table-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input update-table-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input update-table-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'catalog-id))
      (common-lisp:list
       (common-lisp:cons "CatalogId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'database-name))
      (common-lisp:list
       (common-lisp:cons "DatabaseName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'table-input))
      (common-lisp:list
       (common-lisp:cons "TableInput"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'skip-archive))
      (common-lisp:list
       (common-lisp:cons "SkipArchive"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'transaction-id))
      (common-lisp:list
       (common-lisp:cons "TransactionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version-id))
      (common-lisp:list
       (common-lisp:cons "VersionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input update-table-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-table-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-table-response-")))
 (common-lisp:export
  (common-lisp:list 'update-table-response 'make-update-table-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-table-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-table-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-table-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-trigger-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-trigger-request-"))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or name-string common-lisp:null))
   (trigger-update (common-lisp:error ":trigger-update is required") :type
    (common-lisp:or trigger-update common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-trigger-request 'make-update-trigger-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-trigger-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-trigger-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'trigger-update))
      (common-lisp:list
       (common-lisp:cons "TriggerUpdate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-trigger-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-trigger-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-trigger-response-"))
   (trigger common-lisp:nil :type (common-lisp:or trigger common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-trigger-response 'make-update-trigger-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-trigger-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-trigger-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'trigger))
      (common-lisp:list
       (common-lisp:cons "Trigger"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-trigger-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-user-defined-function-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-user-defined-function-request-"))
   (catalog-id common-lisp:nil :type
    (common-lisp:or catalog-id-string common-lisp:null))
   (database-name (common-lisp:error ":database-name is required") :type
    (common-lisp:or name-string common-lisp:null))
   (function-name (common-lisp:error ":function-name is required") :type
    (common-lisp:or name-string common-lisp:null))
   (function-input (common-lisp:error ":function-input is required") :type
    (common-lisp:or user-defined-function-input common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-user-defined-function-request
                    'make-update-user-defined-function-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-user-defined-function-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-user-defined-function-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'catalog-id))
      (common-lisp:list
       (common-lisp:cons "CatalogId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'database-name))
      (common-lisp:list
       (common-lisp:cons "DatabaseName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'function-name))
      (common-lisp:list
       (common-lisp:cons "FunctionName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'function-input))
      (common-lisp:list
       (common-lisp:cons "FunctionInput"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-user-defined-function-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-user-defined-function-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-user-defined-function-response-")))
 (common-lisp:export
  (common-lisp:list 'update-user-defined-function-response
                    'make-update-user-defined-function-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-user-defined-function-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-user-defined-function-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-user-defined-function-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-workflow-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-workflow-request-"))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or name-string common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or generic-string common-lisp:null))
   (default-run-properties common-lisp:nil :type
    (common-lisp:or workflow-run-properties common-lisp:null))
   (max-concurrent-runs common-lisp:nil :type
    (common-lisp:or nullable-integer common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-workflow-request 'make-update-workflow-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-workflow-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-workflow-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'default-run-properties))
      (common-lisp:list
       (common-lisp:cons "DefaultRunProperties"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-concurrent-runs))
      (common-lisp:list
       (common-lisp:cons "MaxConcurrentRuns"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-workflow-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-workflow-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-workflow-response-"))
   (name common-lisp:nil :type (common-lisp:or name-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-workflow-response 'make-update-workflow-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-workflow-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-workflow-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-workflow-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-xmlclassifier-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-xmlclassifier-request-"))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or name-string common-lisp:null))
   (classification common-lisp:nil :type
    (common-lisp:or classification common-lisp:null))
   (row-tag common-lisp:nil :type (common-lisp:or row-tag common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-xmlclassifier-request
                    'make-update-xmlclassifier-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-xmlclassifier-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-xmlclassifier-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'classification))
      (common-lisp:list
       (common-lisp:cons "Classification"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'row-tag))
      (common-lisp:list
       (common-lisp:cons "RowTag"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-xmlclassifier-request))
   common-lisp:nil))
(common-lisp:deftype updated-timestamp () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (upsert-redshift-target-options (:copier common-lisp:nil)
      (:conc-name "struct-shape-upsert-redshift-target-options-"))
   (table-location common-lisp:nil :type
    (common-lisp:or enclosed-in-string-property common-lisp:null))
   (connection-name common-lisp:nil :type
    (common-lisp:or enclosed-in-string-property common-lisp:null))
   (upsert-keys common-lisp:nil :type
    (common-lisp:or enclosed-in-string-properties-min-one common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'upsert-redshift-target-options
                    'make-upsert-redshift-target-options))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          upsert-redshift-target-options))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          upsert-redshift-target-options))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'table-location))
      (common-lisp:list
       (common-lisp:cons "TableLocation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'connection-name))
      (common-lisp:list
       (common-lisp:cons "ConnectionName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'upsert-keys))
      (common-lisp:list
       (common-lisp:cons "UpsertKeys"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          upsert-redshift-target-options))
   common-lisp:nil))
(common-lisp:deftype uri-string () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (user-defined-function (:copier common-lisp:nil)
      (:conc-name "struct-shape-user-defined-function-"))
   (function-name common-lisp:nil :type
    (common-lisp:or name-string common-lisp:null))
   (database-name common-lisp:nil :type
    (common-lisp:or name-string common-lisp:null))
   (class-name common-lisp:nil :type
    (common-lisp:or name-string common-lisp:null))
   (owner-name common-lisp:nil :type
    (common-lisp:or name-string common-lisp:null))
   (owner-type common-lisp:nil :type
    (common-lisp:or principal-type common-lisp:null))
   (create-time common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (resource-uris common-lisp:nil :type
    (common-lisp:or resource-uri-list common-lisp:null))
   (catalog-id common-lisp:nil :type
    (common-lisp:or catalog-id-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'user-defined-function 'make-user-defined-function))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          user-defined-function))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          user-defined-function))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'function-name))
      (common-lisp:list
       (common-lisp:cons "FunctionName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'database-name))
      (common-lisp:list
       (common-lisp:cons "DatabaseName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'class-name))
      (common-lisp:list
       (common-lisp:cons "ClassName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'owner-name))
      (common-lisp:list
       (common-lisp:cons "OwnerName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'owner-type))
      (common-lisp:list
       (common-lisp:cons "OwnerType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'create-time))
      (common-lisp:list
       (common-lisp:cons "CreateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-uris))
      (common-lisp:list
       (common-lisp:cons "ResourceUris"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'catalog-id))
      (common-lisp:list
       (common-lisp:cons "CatalogId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          user-defined-function))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (user-defined-function-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-user-defined-function-input-"))
   (function-name common-lisp:nil :type
    (common-lisp:or name-string common-lisp:null))
   (class-name common-lisp:nil :type
    (common-lisp:or name-string common-lisp:null))
   (owner-name common-lisp:nil :type
    (common-lisp:or name-string common-lisp:null))
   (owner-type common-lisp:nil :type
    (common-lisp:or principal-type common-lisp:null))
   (resource-uris common-lisp:nil :type
    (common-lisp:or resource-uri-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'user-defined-function-input
                    'make-user-defined-function-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          user-defined-function-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          user-defined-function-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'function-name))
      (common-lisp:list
       (common-lisp:cons "FunctionName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'class-name))
      (common-lisp:list
       (common-lisp:cons "ClassName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'owner-name))
      (common-lisp:list
       (common-lisp:cons "OwnerName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'owner-type))
      (common-lisp:list
       (common-lisp:cons "OwnerType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-uris))
      (common-lisp:list
       (common-lisp:cons "ResourceUris"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          user-defined-function-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype user-defined-function-list ()
   '(trivial-types:proper-list user-defined-function))
 (common-lisp:defun |make-user-defined-function-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list user-defined-function))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition validation-exception
     (glue-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       validation-exception-message)))
 (common-lisp:export
  (common-lisp:list 'validation-exception 'validation-exception-message)))
(common-lisp:deftype value-string () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype value-string-list ()
   '(trivial-types:proper-list value-string))
 (common-lisp:defun |make-value-string-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list value-string))
   aws-sdk/generator/shape::members))
(common-lisp:deftype version-id () 'common-lisp:integer)
(common-lisp:deftype version-long-number () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:define-condition version-mismatch-exception
     (glue-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       version-mismatch-exception-message)))
 (common-lisp:export
  (common-lisp:list 'version-mismatch-exception
                    'version-mismatch-exception-message)))
(common-lisp:deftype version-string () 'common-lisp:string)
(common-lisp:deftype versions-string () 'common-lisp:string)
(common-lisp:deftype view-text-string () 'common-lisp:string)
(common-lisp:deftype worker-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (workflow (:copier common-lisp:nil) (:conc-name "struct-shape-workflow-"))
   (name common-lisp:nil :type (common-lisp:or name-string common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or generic-string common-lisp:null))
   (default-run-properties common-lisp:nil :type
    (common-lisp:or workflow-run-properties common-lisp:null))
   (created-on common-lisp:nil :type
    (common-lisp:or timestamp-value common-lisp:null))
   (last-modified-on common-lisp:nil :type
    (common-lisp:or timestamp-value common-lisp:null))
   (last-run common-lisp:nil :type
    (common-lisp:or workflow-run common-lisp:null))
   (graph common-lisp:nil :type
    (common-lisp:or workflow-graph common-lisp:null))
   (max-concurrent-runs common-lisp:nil :type
    (common-lisp:or nullable-integer common-lisp:null))
   (blueprint-details common-lisp:nil :type
    (common-lisp:or blueprint-details common-lisp:null)))
 (common-lisp:export (common-lisp:list 'workflow 'make-workflow))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input workflow))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input workflow))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'default-run-properties))
      (common-lisp:list
       (common-lisp:cons "DefaultRunProperties"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-on))
      (common-lisp:list
       (common-lisp:cons "CreatedOn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-modified-on))
      (common-lisp:list
       (common-lisp:cons "LastModifiedOn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-run))
      (common-lisp:list
       (common-lisp:cons "LastRun"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'graph))
      (common-lisp:list
       (common-lisp:cons "Graph"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-concurrent-runs))
      (common-lisp:list
       (common-lisp:cons "MaxConcurrentRuns"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'blueprint-details))
      (common-lisp:list
       (common-lisp:cons "BlueprintDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input workflow))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (workflow-graph (:copier common-lisp:nil)
      (:conc-name "struct-shape-workflow-graph-"))
   (nodes common-lisp:nil :type (common-lisp:or node-list common-lisp:null))
   (edges common-lisp:nil :type (common-lisp:or edge-list common-lisp:null)))
 (common-lisp:export (common-lisp:list 'workflow-graph 'make-workflow-graph))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input workflow-graph))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input workflow-graph))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'nodes))
      (common-lisp:list
       (common-lisp:cons "Nodes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'edges))
      (common-lisp:list
       (common-lisp:cons "Edges"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input workflow-graph))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype workflow-names ()
   '(trivial-types:proper-list name-string))
 (common-lisp:defun |make-workflow-names|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list name-string))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (workflow-run (:copier common-lisp:nil)
      (:conc-name "struct-shape-workflow-run-"))
   (name common-lisp:nil :type (common-lisp:or name-string common-lisp:null))
   (workflow-run-id common-lisp:nil :type
    (common-lisp:or id-string common-lisp:null))
   (previous-run-id common-lisp:nil :type
    (common-lisp:or id-string common-lisp:null))
   (workflow-run-properties common-lisp:nil :type
    (common-lisp:or workflow-run-properties common-lisp:null))
   (started-on common-lisp:nil :type
    (common-lisp:or timestamp-value common-lisp:null))
   (completed-on common-lisp:nil :type
    (common-lisp:or timestamp-value common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or workflow-run-status common-lisp:null))
   (error-message common-lisp:nil :type
    (common-lisp:or error-string common-lisp:null))
   (statistics common-lisp:nil :type
    (common-lisp:or workflow-run-statistics common-lisp:null))
   (graph common-lisp:nil :type
    (common-lisp:or workflow-graph common-lisp:null))
   (starting-event-batch-condition common-lisp:nil :type
    (common-lisp:or starting-event-batch-condition common-lisp:null)))
 (common-lisp:export (common-lisp:list 'workflow-run 'make-workflow-run))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input workflow-run))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input workflow-run))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'workflow-run-id))
      (common-lisp:list
       (common-lisp:cons "WorkflowRunId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'previous-run-id))
      (common-lisp:list
       (common-lisp:cons "PreviousRunId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'workflow-run-properties))
      (common-lisp:list
       (common-lisp:cons "WorkflowRunProperties"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'started-on))
      (common-lisp:list
       (common-lisp:cons "StartedOn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'completed-on))
      (common-lisp:list
       (common-lisp:cons "CompletedOn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error-message))
      (common-lisp:list
       (common-lisp:cons "ErrorMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'statistics))
      (common-lisp:list
       (common-lisp:cons "Statistics"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'graph))
      (common-lisp:list
       (common-lisp:cons "Graph"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'starting-event-batch-condition))
      (common-lisp:list
       (common-lisp:cons "StartingEventBatchCondition"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input workflow-run))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype workflow-run-properties () 'common-lisp:hash-table)
 (common-lisp:defun |make-workflow-run-properties|
                    (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:progn
 (common-lisp:defstruct
     (workflow-run-statistics (:copier common-lisp:nil)
      (:conc-name "struct-shape-workflow-run-statistics-"))
   (total-actions common-lisp:nil :type
    (common-lisp:or integer-value common-lisp:null))
   (timeout-actions common-lisp:nil :type
    (common-lisp:or integer-value common-lisp:null))
   (failed-actions common-lisp:nil :type
    (common-lisp:or integer-value common-lisp:null))
   (stopped-actions common-lisp:nil :type
    (common-lisp:or integer-value common-lisp:null))
   (succeeded-actions common-lisp:nil :type
    (common-lisp:or integer-value common-lisp:null))
   (running-actions common-lisp:nil :type
    (common-lisp:or integer-value common-lisp:null))
   (errored-actions common-lisp:nil :type
    (common-lisp:or integer-value common-lisp:null))
   (waiting-actions common-lisp:nil :type
    (common-lisp:or integer-value common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'workflow-run-statistics 'make-workflow-run-statistics))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          workflow-run-statistics))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          workflow-run-statistics))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'total-actions))
      (common-lisp:list
       (common-lisp:cons "TotalActions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'timeout-actions))
      (common-lisp:list
       (common-lisp:cons "TimeoutActions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'failed-actions))
      (common-lisp:list
       (common-lisp:cons "FailedActions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stopped-actions))
      (common-lisp:list
       (common-lisp:cons "StoppedActions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'succeeded-actions))
      (common-lisp:list
       (common-lisp:cons "SucceededActions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'running-actions))
      (common-lisp:list
       (common-lisp:cons "RunningActions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'errored-actions))
      (common-lisp:list
       (common-lisp:cons "ErroredActions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'waiting-actions))
      (common-lisp:list
       (common-lisp:cons "WaitingActions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          workflow-run-statistics))
   common-lisp:nil))
(common-lisp:deftype workflow-run-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype workflow-runs ()
   '(trivial-types:proper-list workflow-run))
 (common-lisp:defun |make-workflow-runs|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list workflow-run))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype workflows () '(trivial-types:proper-list workflow))
 (common-lisp:defun |make-workflows|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list workflow))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (xmlclassifier (:copier common-lisp:nil)
      (:conc-name "struct-shape-xmlclassifier-"))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or name-string common-lisp:null))
   (classification (common-lisp:error ":classification is required") :type
    (common-lisp:or classification common-lisp:null))
   (creation-time common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (last-updated common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (version common-lisp:nil :type (common-lisp:or version-id common-lisp:null))
   (row-tag common-lisp:nil :type (common-lisp:or row-tag common-lisp:null)))
 (common-lisp:export (common-lisp:list 'xmlclassifier 'make-xmlclassifier))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input xmlclassifier))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input xmlclassifier))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'classification))
      (common-lisp:list
       (common-lisp:cons "Classification"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-time))
      (common-lisp:list
       (common-lisp:cons "CreationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-updated))
      (common-lisp:list
       (common-lisp:cons "LastUpdated"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version))
      (common-lisp:list
       (common-lisp:cons "Version"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'row-tag))
      (common-lisp:list
       (common-lisp:cons "RowTag"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input xmlclassifier))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defun batch-create-partition
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key catalog-id database-name table-name
                     partition-input-list)
   (common-lisp:declare
    (common-lisp:ignorable catalog-id database-name table-name
     partition-input-list))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-batch-create-partition-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'glue-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "BatchCreatePartition"
                                                        "2017-03-31"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'batch-create-partition))
(common-lisp:progn
 (common-lisp:defun batch-delete-connection
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key catalog-id connection-name-list)
   (common-lisp:declare
    (common-lisp:ignorable catalog-id connection-name-list))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-batch-delete-connection-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'glue-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "BatchDeleteConnection"
                                                        "2017-03-31"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'batch-delete-connection))
(common-lisp:progn
 (common-lisp:defun batch-delete-partition
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key catalog-id database-name table-name
                     partitions-to-delete)
   (common-lisp:declare
    (common-lisp:ignorable catalog-id database-name table-name
     partitions-to-delete))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-batch-delete-partition-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'glue-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "BatchDeletePartition"
                                                        "2017-03-31"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'batch-delete-partition))
(common-lisp:progn
 (common-lisp:defun batch-delete-table
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key catalog-id database-name tables-to-delete
                     transaction-id)
   (common-lisp:declare
    (common-lisp:ignorable catalog-id database-name tables-to-delete
     transaction-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-batch-delete-table-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'glue-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "BatchDeleteTable"
                                                        "2017-03-31"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'batch-delete-table))
(common-lisp:progn
 (common-lisp:defun batch-delete-table-version
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key catalog-id database-name table-name
                     version-ids)
   (common-lisp:declare
    (common-lisp:ignorable catalog-id database-name table-name version-ids))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-batch-delete-table-version-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'glue-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "BatchDeleteTableVersion"
                                                        "2017-03-31"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'batch-delete-table-version))
(common-lisp:progn
 (common-lisp:defun batch-get-blueprints
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key names include-blueprint
                     include-parameter-spec)
   (common-lisp:declare
    (common-lisp:ignorable names include-blueprint include-parameter-spec))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-batch-get-blueprints-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'glue-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "BatchGetBlueprints"
                                                        "2017-03-31"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'batch-get-blueprints))
(common-lisp:progn
 (common-lisp:defun batch-get-crawlers
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key crawler-names)
   (common-lisp:declare (common-lisp:ignorable crawler-names))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-batch-get-crawlers-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'glue-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "BatchGetCrawlers"
                                                        "2017-03-31"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'batch-get-crawlers))
(common-lisp:progn
 (common-lisp:defun batch-get-custom-entity-types
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key names)
   (common-lisp:declare (common-lisp:ignorable names))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-batch-get-custom-entity-types-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'glue-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "BatchGetCustomEntityTypes"
                                                        "2017-03-31"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'batch-get-custom-entity-types))
(common-lisp:progn
 (common-lisp:defun batch-get-data-quality-result
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key result-ids)
   (common-lisp:declare (common-lisp:ignorable result-ids))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-batch-get-data-quality-result-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'glue-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "BatchGetDataQualityResult"
                                                        "2017-03-31"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'batch-get-data-quality-result))
(common-lisp:progn
 (common-lisp:defun batch-get-dev-endpoints
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key dev-endpoint-names)
   (common-lisp:declare (common-lisp:ignorable dev-endpoint-names))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-batch-get-dev-endpoints-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'glue-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "BatchGetDevEndpoints"
                                                        "2017-03-31"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'batch-get-dev-endpoints))
(common-lisp:progn
 (common-lisp:defun batch-get-jobs
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key job-names)
   (common-lisp:declare (common-lisp:ignorable job-names))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-batch-get-jobs-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'glue-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "BatchGetJobs"
                                                        "2017-03-31"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'batch-get-jobs))
(common-lisp:progn
 (common-lisp:defun batch-get-partition
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key catalog-id database-name table-name
                     partitions-to-get)
   (common-lisp:declare
    (common-lisp:ignorable catalog-id database-name table-name
     partitions-to-get))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-batch-get-partition-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'glue-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "BatchGetPartition"
                                                        "2017-03-31"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'batch-get-partition))
(common-lisp:progn
 (common-lisp:defun batch-get-triggers
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key trigger-names)
   (common-lisp:declare (common-lisp:ignorable trigger-names))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-batch-get-triggers-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'glue-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "BatchGetTriggers"
                                                        "2017-03-31"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'batch-get-triggers))
(common-lisp:progn
 (common-lisp:defun batch-get-workflows
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key names include-graph)
   (common-lisp:declare (common-lisp:ignorable names include-graph))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-batch-get-workflows-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'glue-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "BatchGetWorkflows"
                                                        "2017-03-31"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'batch-get-workflows))
(common-lisp:progn
 (common-lisp:defun batch-stop-job-run
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key job-name job-run-ids)
   (common-lisp:declare (common-lisp:ignorable job-name job-run-ids))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-batch-stop-job-run-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'glue-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "BatchStopJobRun"
                                                        "2017-03-31"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'batch-stop-job-run))
(common-lisp:progn
 (common-lisp:defun batch-update-partition
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key catalog-id database-name table-name
                     entries)
   (common-lisp:declare
    (common-lisp:ignorable catalog-id database-name table-name entries))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-batch-update-partition-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'glue-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "BatchUpdatePartition"
                                                        "2017-03-31"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'batch-update-partition))
(common-lisp:progn
 (common-lisp:defun cancel-data-quality-rule-recommendation-run
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key run-id)
   (common-lisp:declare (common-lisp:ignorable run-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-cancel-data-quality-rule-recommendation-run-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'glue-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CancelDataQualityRuleRecommendationRun"
                                                        "2017-03-31"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'cancel-data-quality-rule-recommendation-run))
(common-lisp:progn
 (common-lisp:defun cancel-data-quality-ruleset-evaluation-run
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key run-id)
   (common-lisp:declare (common-lisp:ignorable run-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-cancel-data-quality-ruleset-evaluation-run-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'glue-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CancelDataQualityRulesetEvaluationRun"
                                                        "2017-03-31"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'cancel-data-quality-ruleset-evaluation-run))
(common-lisp:progn
 (common-lisp:defun cancel-mltask-run
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key transform-id task-run-id)
   (common-lisp:declare (common-lisp:ignorable transform-id task-run-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-cancel-mltask-run-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'glue-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CancelMLTaskRun"
                                                        "2017-03-31"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'cancel-mltask-run))
(common-lisp:progn
 (common-lisp:defun cancel-statement
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key session-id id request-origin)
   (common-lisp:declare (common-lisp:ignorable session-id id request-origin))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-cancel-statement-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'glue-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CancelStatement"
                                                        "2017-03-31"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'cancel-statement))
(common-lisp:progn
 (common-lisp:defun check-schema-version-validity
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key data-format schema-definition)
   (common-lisp:declare (common-lisp:ignorable data-format schema-definition))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-check-schema-version-validity-input
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'glue-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CheckSchemaVersionValidity"
                                                        "2017-03-31"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'check-schema-version-validity))
(common-lisp:progn
 (common-lisp:defun create-blueprint
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name description blueprint-location tags)
   (common-lisp:declare
    (common-lisp:ignorable name description blueprint-location tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-blueprint-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'glue-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CreateBlueprint"
                                                        "2017-03-31"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-blueprint))
(common-lisp:progn
 (common-lisp:defun create-classifier
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key grok-classifier xmlclassifier
                     json-classifier csv-classifier)
   (common-lisp:declare
    (common-lisp:ignorable grok-classifier xmlclassifier json-classifier
     csv-classifier))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-classifier-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'glue-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CreateClassifier"
                                                        "2017-03-31"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-classifier))
(common-lisp:progn
 (common-lisp:defun create-connection
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key catalog-id connection-input tags)
   (common-lisp:declare
    (common-lisp:ignorable catalog-id connection-input tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-connection-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'glue-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CreateConnection"
                                                        "2017-03-31"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-connection))
(common-lisp:progn
 (common-lisp:defun create-crawler
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name role database-name description
                     targets schedule classifiers table-prefix
                     schema-change-policy recrawl-policy lineage-configuration
                     lake-formation-configuration configuration
                     crawler-security-configuration tags)
   (common-lisp:declare
    (common-lisp:ignorable name role database-name description targets schedule
     classifiers table-prefix schema-change-policy recrawl-policy
     lineage-configuration lake-formation-configuration configuration
     crawler-security-configuration tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-crawler-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'glue-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CreateCrawler"
                                                        "2017-03-31"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-crawler))
(common-lisp:progn
 (common-lisp:defun create-custom-entity-type
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name regex-string context-words)
   (common-lisp:declare
    (common-lisp:ignorable name regex-string context-words))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-create-custom-entity-type-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'glue-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CreateCustomEntityType"
                                                        "2017-03-31"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-custom-entity-type))
(common-lisp:progn
 (common-lisp:defun create-data-quality-ruleset
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name description ruleset tags
                     target-table client-token)
   (common-lisp:declare
    (common-lisp:ignorable name description ruleset tags target-table
     client-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-create-data-quality-ruleset-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'glue-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CreateDataQualityRuleset"
                                                        "2017-03-31"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-data-quality-ruleset))
(common-lisp:progn
 (common-lisp:defun create-database
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key catalog-id database-input tags)
   (common-lisp:declare (common-lisp:ignorable catalog-id database-input tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-database-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'glue-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CreateDatabase"
                                                        "2017-03-31"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-database))
(common-lisp:progn
 (common-lisp:defun create-dev-endpoint
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key endpoint-name role-arn security-group-ids
                     subnet-id public-key public-keys number-of-nodes
                     worker-type glue-version number-of-workers
                     extra-python-libs-s3path extra-jars-s3path
                     security-configuration tags arguments)
   (common-lisp:declare
    (common-lisp:ignorable endpoint-name role-arn security-group-ids subnet-id
     public-key public-keys number-of-nodes worker-type glue-version
     number-of-workers extra-python-libs-s3path extra-jars-s3path
     security-configuration tags arguments))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-dev-endpoint-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'glue-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CreateDevEndpoint"
                                                        "2017-03-31"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-dev-endpoint))
(common-lisp:progn
 (common-lisp:defun create-job
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name description log-uri role
                     execution-property command default-arguments
                     non-overridable-arguments connections max-retries
                     allocated-capacity timeout max-capacity
                     security-configuration tags notification-property
                     glue-version number-of-workers worker-type
                     code-gen-configuration-nodes execution-class
                     source-control-details)
   (common-lisp:declare
    (common-lisp:ignorable name description log-uri role execution-property
     command default-arguments non-overridable-arguments connections
     max-retries allocated-capacity timeout max-capacity security-configuration
     tags notification-property glue-version number-of-workers worker-type
     code-gen-configuration-nodes execution-class source-control-details))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-job-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'glue-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/" "CreateJob"
                                                        "2017-03-31"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-job))
(common-lisp:progn
 (common-lisp:defun create-mltransform
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name description input-record-tables
                     parameters role glue-version max-capacity worker-type
                     number-of-workers timeout max-retries tags
                     transform-encryption)
   (common-lisp:declare
    (common-lisp:ignorable name description input-record-tables parameters role
     glue-version max-capacity worker-type number-of-workers timeout
     max-retries tags transform-encryption))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-mltransform-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'glue-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CreateMLTransform"
                                                        "2017-03-31"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-mltransform))
(common-lisp:progn
 (common-lisp:defun create-partition
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key catalog-id database-name table-name
                     partition-input)
   (common-lisp:declare
    (common-lisp:ignorable catalog-id database-name table-name
     partition-input))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-partition-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'glue-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CreatePartition"
                                                        "2017-03-31"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-partition))
(common-lisp:progn
 (common-lisp:defun create-partition-index
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key catalog-id database-name table-name
                     partition-index)
   (common-lisp:declare
    (common-lisp:ignorable catalog-id database-name table-name
     partition-index))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-partition-index-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'glue-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CreatePartitionIndex"
                                                        "2017-03-31"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-partition-index))
(common-lisp:progn
 (common-lisp:defun create-registry
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key registry-name description tags)
   (common-lisp:declare (common-lisp:ignorable registry-name description tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-registry-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'glue-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CreateRegistry"
                                                        "2017-03-31"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-registry))
(common-lisp:progn
 (common-lisp:defun create-schema
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key registry-id schema-name data-format
                     compatibility description tags schema-definition)
   (common-lisp:declare
    (common-lisp:ignorable registry-id schema-name data-format compatibility
     description tags schema-definition))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-schema-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'glue-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CreateSchema"
                                                        "2017-03-31"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-schema))
(common-lisp:progn
 (common-lisp:defun create-script
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key dag-nodes dag-edges language)
   (common-lisp:declare (common-lisp:ignorable dag-nodes dag-edges language))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-script-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'glue-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CreateScript"
                                                        "2017-03-31"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-script))
(common-lisp:progn
 (common-lisp:defun create-security-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name encryption-configuration)
   (common-lisp:declare (common-lisp:ignorable name encryption-configuration))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-create-security-configuration-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'glue-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CreateSecurityConfiguration"
                                                        "2017-03-31"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-security-configuration))
(common-lisp:progn
 (common-lisp:defun create-session
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key id description role command timeout
                     idle-timeout default-arguments connections max-capacity
                     number-of-workers worker-type security-configuration
                     glue-version tags request-origin)
   (common-lisp:declare
    (common-lisp:ignorable id description role command timeout idle-timeout
     default-arguments connections max-capacity number-of-workers worker-type
     security-configuration glue-version tags request-origin))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-session-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'glue-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CreateSession"
                                                        "2017-03-31"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-session))
(common-lisp:progn
 (common-lisp:defun create-table
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key catalog-id database-name table-input
                     partition-indexes transaction-id)
   (common-lisp:declare
    (common-lisp:ignorable catalog-id database-name table-input
     partition-indexes transaction-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-table-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'glue-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CreateTable"
                                                        "2017-03-31"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-table))
(common-lisp:progn
 (common-lisp:defun create-trigger
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name workflow-name type schedule
                     predicate actions description start-on-creation tags
                     event-batching-condition)
   (common-lisp:declare
    (common-lisp:ignorable name workflow-name type schedule predicate actions
     description start-on-creation tags event-batching-condition))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-trigger-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'glue-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CreateTrigger"
                                                        "2017-03-31"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-trigger))
(common-lisp:progn
 (common-lisp:defun create-user-defined-function
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key catalog-id database-name function-input)
   (common-lisp:declare
    (common-lisp:ignorable catalog-id database-name function-input))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-create-user-defined-function-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'glue-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CreateUserDefinedFunction"
                                                        "2017-03-31"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-user-defined-function))
(common-lisp:progn
 (common-lisp:defun create-workflow
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name description default-run-properties
                     tags max-concurrent-runs)
   (common-lisp:declare
    (common-lisp:ignorable name description default-run-properties tags
     max-concurrent-runs))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-workflow-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'glue-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CreateWorkflow"
                                                        "2017-03-31"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-workflow))
(common-lisp:progn
 (common-lisp:defun delete-blueprint
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name)
   (common-lisp:declare (common-lisp:ignorable name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-blueprint-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'glue-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteBlueprint"
                                                        "2017-03-31"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-blueprint))
(common-lisp:progn
 (common-lisp:defun delete-classifier
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name)
   (common-lisp:declare (common-lisp:ignorable name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-classifier-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'glue-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteClassifier"
                                                        "2017-03-31"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-classifier))
(common-lisp:progn
 (common-lisp:defun delete-column-statistics-for-partition
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key catalog-id database-name table-name
                     partition-values column-name)
   (common-lisp:declare
    (common-lisp:ignorable catalog-id database-name table-name partition-values
     column-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-delete-column-statistics-for-partition-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'glue-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteColumnStatisticsForPartition"
                                                        "2017-03-31"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-column-statistics-for-partition))
(common-lisp:progn
 (common-lisp:defun delete-column-statistics-for-table
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key catalog-id database-name table-name
                     column-name)
   (common-lisp:declare
    (common-lisp:ignorable catalog-id database-name table-name column-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-delete-column-statistics-for-table-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'glue-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteColumnStatisticsForTable"
                                                        "2017-03-31"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-column-statistics-for-table))
(common-lisp:progn
 (common-lisp:defun delete-connection
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key catalog-id connection-name)
   (common-lisp:declare (common-lisp:ignorable catalog-id connection-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-connection-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'glue-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteConnection"
                                                        "2017-03-31"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-connection))
(common-lisp:progn
 (common-lisp:defun delete-crawler
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name)
   (common-lisp:declare (common-lisp:ignorable name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-crawler-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'glue-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteCrawler"
                                                        "2017-03-31"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-crawler))
(common-lisp:progn
 (common-lisp:defun delete-custom-entity-type
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name)
   (common-lisp:declare (common-lisp:ignorable name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-delete-custom-entity-type-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'glue-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteCustomEntityType"
                                                        "2017-03-31"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-custom-entity-type))
(common-lisp:progn
 (common-lisp:defun delete-data-quality-ruleset
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name)
   (common-lisp:declare (common-lisp:ignorable name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-delete-data-quality-ruleset-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'glue-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteDataQualityRuleset"
                                                        "2017-03-31"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-data-quality-ruleset))
(common-lisp:progn
 (common-lisp:defun delete-database
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key catalog-id name)
   (common-lisp:declare (common-lisp:ignorable catalog-id name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-database-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'glue-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteDatabase"
                                                        "2017-03-31"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-database))
(common-lisp:progn
 (common-lisp:defun delete-dev-endpoint
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key endpoint-name)
   (common-lisp:declare (common-lisp:ignorable endpoint-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-dev-endpoint-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'glue-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteDevEndpoint"
                                                        "2017-03-31"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-dev-endpoint))
(common-lisp:progn
 (common-lisp:defun delete-job
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key job-name)
   (common-lisp:declare (common-lisp:ignorable job-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-job-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'glue-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/" "DeleteJob"
                                                        "2017-03-31"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-job))
(common-lisp:progn
 (common-lisp:defun delete-mltransform
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key transform-id)
   (common-lisp:declare (common-lisp:ignorable transform-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-mltransform-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'glue-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteMLTransform"
                                                        "2017-03-31"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-mltransform))
(common-lisp:progn
 (common-lisp:defun delete-partition
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key catalog-id database-name table-name
                     partition-values)
   (common-lisp:declare
    (common-lisp:ignorable catalog-id database-name table-name
     partition-values))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-partition-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'glue-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeletePartition"
                                                        "2017-03-31"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-partition))
(common-lisp:progn
 (common-lisp:defun delete-partition-index
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key catalog-id database-name table-name
                     index-name)
   (common-lisp:declare
    (common-lisp:ignorable catalog-id database-name table-name index-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-partition-index-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'glue-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeletePartitionIndex"
                                                        "2017-03-31"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-partition-index))
(common-lisp:progn
 (common-lisp:defun delete-registry
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key registry-id)
   (common-lisp:declare (common-lisp:ignorable registry-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-registry-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'glue-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteRegistry"
                                                        "2017-03-31"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-registry))
(common-lisp:progn
 (common-lisp:defun delete-resource-policy
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key policy-hash-condition resource-arn)
   (common-lisp:declare
    (common-lisp:ignorable policy-hash-condition resource-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-resource-policy-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'glue-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteResourcePolicy"
                                                        "2017-03-31"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-resource-policy))
(common-lisp:progn
 (common-lisp:defun delete-schema
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key schema-id)
   (common-lisp:declare (common-lisp:ignorable schema-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-schema-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'glue-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteSchema"
                                                        "2017-03-31"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-schema))
(common-lisp:progn
 (common-lisp:defun delete-schema-versions
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key schema-id versions)
   (common-lisp:declare (common-lisp:ignorable schema-id versions))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-schema-versions-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'glue-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteSchemaVersions"
                                                        "2017-03-31"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-schema-versions))
(common-lisp:progn
 (common-lisp:defun delete-security-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name)
   (common-lisp:declare (common-lisp:ignorable name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-delete-security-configuration-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'glue-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteSecurityConfiguration"
                                                        "2017-03-31"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-security-configuration))
(common-lisp:progn
 (common-lisp:defun delete-session
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key id request-origin)
   (common-lisp:declare (common-lisp:ignorable id request-origin))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-session-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'glue-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteSession"
                                                        "2017-03-31"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-session))
(common-lisp:progn
 (common-lisp:defun delete-table
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key catalog-id database-name name
                     transaction-id)
   (common-lisp:declare
    (common-lisp:ignorable catalog-id database-name name transaction-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-table-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'glue-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteTable"
                                                        "2017-03-31"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-table))
(common-lisp:progn
 (common-lisp:defun delete-table-version
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key catalog-id database-name table-name
                     version-id)
   (common-lisp:declare
    (common-lisp:ignorable catalog-id database-name table-name version-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-table-version-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'glue-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteTableVersion"
                                                        "2017-03-31"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-table-version))
(common-lisp:progn
 (common-lisp:defun delete-trigger
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name)
   (common-lisp:declare (common-lisp:ignorable name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-trigger-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'glue-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteTrigger"
                                                        "2017-03-31"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-trigger))
(common-lisp:progn
 (common-lisp:defun delete-user-defined-function
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key catalog-id database-name function-name)
   (common-lisp:declare
    (common-lisp:ignorable catalog-id database-name function-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-delete-user-defined-function-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'glue-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteUserDefinedFunction"
                                                        "2017-03-31"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-user-defined-function))
(common-lisp:progn
 (common-lisp:defun delete-workflow
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name)
   (common-lisp:declare (common-lisp:ignorable name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-workflow-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'glue-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteWorkflow"
                                                        "2017-03-31"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-workflow))
(common-lisp:progn
 (common-lisp:defun get-blueprint
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name include-blueprint
                     include-parameter-spec)
   (common-lisp:declare
    (common-lisp:ignorable name include-blueprint include-parameter-spec))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-blueprint-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'glue-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetBlueprint"
                                                        "2017-03-31"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-blueprint))
(common-lisp:progn
 (common-lisp:defun get-blueprint-run
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key blueprint-name run-id)
   (common-lisp:declare (common-lisp:ignorable blueprint-name run-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-blueprint-run-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'glue-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetBlueprintRun"
                                                        "2017-03-31"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-blueprint-run))
(common-lisp:progn
 (common-lisp:defun get-blueprint-runs
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key blueprint-name next-token max-results)
   (common-lisp:declare
    (common-lisp:ignorable blueprint-name next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-blueprint-runs-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'glue-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetBlueprintRuns"
                                                        "2017-03-31"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-blueprint-runs))
(common-lisp:progn
 (common-lisp:defun get-catalog-import-status
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key catalog-id)
   (common-lisp:declare (common-lisp:ignorable catalog-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-get-catalog-import-status-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'glue-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetCatalogImportStatus"
                                                        "2017-03-31"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-catalog-import-status))
(common-lisp:progn
 (common-lisp:defun get-classifier
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name)
   (common-lisp:declare (common-lisp:ignorable name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-classifier-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'glue-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetClassifier"
                                                        "2017-03-31"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-classifier))
(common-lisp:progn
 (common-lisp:defun get-classifiers
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key max-results next-token)
   (common-lisp:declare (common-lisp:ignorable max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-classifiers-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'glue-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetClassifiers"
                                                        "2017-03-31"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-classifiers))
(common-lisp:progn
 (common-lisp:defun get-column-statistics-for-partition
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key catalog-id database-name table-name
                     partition-values column-names)
   (common-lisp:declare
    (common-lisp:ignorable catalog-id database-name table-name partition-values
     column-names))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-get-column-statistics-for-partition-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'glue-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetColumnStatisticsForPartition"
                                                        "2017-03-31"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-column-statistics-for-partition))
(common-lisp:progn
 (common-lisp:defun get-column-statistics-for-table
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key catalog-id database-name table-name
                     column-names)
   (common-lisp:declare
    (common-lisp:ignorable catalog-id database-name table-name column-names))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-get-column-statistics-for-table-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'glue-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetColumnStatisticsForTable"
                                                        "2017-03-31"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-column-statistics-for-table))
(common-lisp:progn
 (common-lisp:defun get-connection
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key catalog-id name hide-password)
   (common-lisp:declare (common-lisp:ignorable catalog-id name hide-password))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-connection-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'glue-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetConnection"
                                                        "2017-03-31"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-connection))
(common-lisp:progn
 (common-lisp:defun get-connections
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key catalog-id filter hide-password
                     next-token max-results)
   (common-lisp:declare
    (common-lisp:ignorable catalog-id filter hide-password next-token
     max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-connections-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'glue-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetConnections"
                                                        "2017-03-31"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-connections))
(common-lisp:progn
 (common-lisp:defun get-crawler
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name)
   (common-lisp:declare (common-lisp:ignorable name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-crawler-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'glue-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/" "GetCrawler"
                                                        "2017-03-31"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-crawler))
(common-lisp:progn
 (common-lisp:defun get-crawler-metrics
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key crawler-name-list max-results next-token)
   (common-lisp:declare
    (common-lisp:ignorable crawler-name-list max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-crawler-metrics-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'glue-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetCrawlerMetrics"
                                                        "2017-03-31"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-crawler-metrics))
(common-lisp:progn
 (common-lisp:defun get-crawlers
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key max-results next-token)
   (common-lisp:declare (common-lisp:ignorable max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-crawlers-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'glue-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetCrawlers"
                                                        "2017-03-31"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-crawlers))
(common-lisp:progn
 (common-lisp:defun get-custom-entity-type
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name)
   (common-lisp:declare (common-lisp:ignorable name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-custom-entity-type-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'glue-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetCustomEntityType"
                                                        "2017-03-31"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-custom-entity-type))
(common-lisp:progn
 (common-lisp:defun get-data-catalog-encryption-settings
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key catalog-id)
   (common-lisp:declare (common-lisp:ignorable catalog-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-get-data-catalog-encryption-settings-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'glue-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetDataCatalogEncryptionSettings"
                                                        "2017-03-31"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-data-catalog-encryption-settings))
(common-lisp:progn
 (common-lisp:defun get-data-quality-result
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key result-id)
   (common-lisp:declare (common-lisp:ignorable result-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-data-quality-result-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'glue-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetDataQualityResult"
                                                        "2017-03-31"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-data-quality-result))
(common-lisp:progn
 (common-lisp:defun get-data-quality-rule-recommendation-run
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key run-id)
   (common-lisp:declare (common-lisp:ignorable run-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-get-data-quality-rule-recommendation-run-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'glue-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetDataQualityRuleRecommendationRun"
                                                        "2017-03-31"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-data-quality-rule-recommendation-run))
(common-lisp:progn
 (common-lisp:defun get-data-quality-ruleset
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name)
   (common-lisp:declare (common-lisp:ignorable name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-data-quality-ruleset-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'glue-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetDataQualityRuleset"
                                                        "2017-03-31"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-data-quality-ruleset))
(common-lisp:progn
 (common-lisp:defun get-data-quality-ruleset-evaluation-run
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key run-id)
   (common-lisp:declare (common-lisp:ignorable run-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-get-data-quality-ruleset-evaluation-run-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'glue-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetDataQualityRulesetEvaluationRun"
                                                        "2017-03-31"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-data-quality-ruleset-evaluation-run))
(common-lisp:progn
 (common-lisp:defun get-database
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key catalog-id name)
   (common-lisp:declare (common-lisp:ignorable catalog-id name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-database-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'glue-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetDatabase"
                                                        "2017-03-31"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-database))
(common-lisp:progn
 (common-lisp:defun get-databases
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key catalog-id next-token max-results
                     resource-share-type)
   (common-lisp:declare
    (common-lisp:ignorable catalog-id next-token max-results
     resource-share-type))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-databases-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'glue-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetDatabases"
                                                        "2017-03-31"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-databases))
(common-lisp:progn
 (common-lisp:defun get-dataflow-graph
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key python-script)
   (common-lisp:declare (common-lisp:ignorable python-script))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-dataflow-graph-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'glue-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetDataflowGraph"
                                                        "2017-03-31"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-dataflow-graph))
(common-lisp:progn
 (common-lisp:defun get-dev-endpoint
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key endpoint-name)
   (common-lisp:declare (common-lisp:ignorable endpoint-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-dev-endpoint-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'glue-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetDevEndpoint"
                                                        "2017-03-31"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-dev-endpoint))
(common-lisp:progn
 (common-lisp:defun get-dev-endpoints
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key max-results next-token)
   (common-lisp:declare (common-lisp:ignorable max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-dev-endpoints-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'glue-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetDevEndpoints"
                                                        "2017-03-31"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-dev-endpoints))
(common-lisp:progn
 (common-lisp:defun get-job
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key job-name)
   (common-lisp:declare (common-lisp:ignorable job-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-job-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'glue-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/" "GetJob"
                                                        "2017-03-31"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-job))
(common-lisp:progn
 (common-lisp:defun get-job-bookmark
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key job-name run-id)
   (common-lisp:declare (common-lisp:ignorable job-name run-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-job-bookmark-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'glue-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetJobBookmark"
                                                        "2017-03-31"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-job-bookmark))
(common-lisp:progn
 (common-lisp:defun get-job-run
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key job-name run-id predecessors-included)
   (common-lisp:declare
    (common-lisp:ignorable job-name run-id predecessors-included))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-job-run-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'glue-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/" "GetJobRun"
                                                        "2017-03-31"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-job-run))
(common-lisp:progn
 (common-lisp:defun get-job-runs
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key job-name next-token max-results)
   (common-lisp:declare
    (common-lisp:ignorable job-name next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-job-runs-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'glue-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/" "GetJobRuns"
                                                        "2017-03-31"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-job-runs))
(common-lisp:progn
 (common-lisp:defun get-jobs
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key next-token max-results)
   (common-lisp:declare (common-lisp:ignorable next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-jobs-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'glue-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/" "GetJobs"
                                                        "2017-03-31"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-jobs))
(common-lisp:progn
 (common-lisp:defun get-mltask-run
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key transform-id task-run-id)
   (common-lisp:declare (common-lisp:ignorable transform-id task-run-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-mltask-run-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'glue-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetMLTaskRun"
                                                        "2017-03-31"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-mltask-run))
(common-lisp:progn
 (common-lisp:defun get-mltask-runs
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key transform-id next-token max-results
                     filter sort)
   (common-lisp:declare
    (common-lisp:ignorable transform-id next-token max-results filter sort))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-mltask-runs-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'glue-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetMLTaskRuns"
                                                        "2017-03-31"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-mltask-runs))
(common-lisp:progn
 (common-lisp:defun get-mltransform
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key transform-id)
   (common-lisp:declare (common-lisp:ignorable transform-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-mltransform-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'glue-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetMLTransform"
                                                        "2017-03-31"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-mltransform))
(common-lisp:progn
 (common-lisp:defun get-mltransforms
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key next-token max-results filter sort)
   (common-lisp:declare
    (common-lisp:ignorable next-token max-results filter sort))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-mltransforms-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'glue-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetMLTransforms"
                                                        "2017-03-31"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-mltransforms))
(common-lisp:progn
 (common-lisp:defun get-mapping
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key source sinks location)
   (common-lisp:declare (common-lisp:ignorable source sinks location))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-mapping-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'glue-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/" "GetMapping"
                                                        "2017-03-31"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-mapping))
(common-lisp:progn
 (common-lisp:defun get-partition
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key catalog-id database-name table-name
                     partition-values)
   (common-lisp:declare
    (common-lisp:ignorable catalog-id database-name table-name
     partition-values))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-partition-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'glue-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetPartition"
                                                        "2017-03-31"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-partition))
(common-lisp:progn
 (common-lisp:defun get-partition-indexes
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key catalog-id database-name table-name
                     next-token)
   (common-lisp:declare
    (common-lisp:ignorable catalog-id database-name table-name next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-partition-indexes-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'glue-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetPartitionIndexes"
                                                        "2017-03-31"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-partition-indexes))
(common-lisp:progn
 (common-lisp:defun get-partitions
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key catalog-id database-name table-name
                     expression next-token segment max-results
                     exclude-column-schema transaction-id query-as-of-time)
   (common-lisp:declare
    (common-lisp:ignorable catalog-id database-name table-name expression
     next-token segment max-results exclude-column-schema transaction-id
     query-as-of-time))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-partitions-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'glue-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetPartitions"
                                                        "2017-03-31"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-partitions))
(common-lisp:progn
 (common-lisp:defun get-plan
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key mapping source sinks location language
                     additional-plan-options-map)
   (common-lisp:declare
    (common-lisp:ignorable mapping source sinks location language
     additional-plan-options-map))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-plan-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'glue-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/" "GetPlan"
                                                        "2017-03-31"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-plan))
(common-lisp:progn
 (common-lisp:defun get-registry
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key registry-id)
   (common-lisp:declare (common-lisp:ignorable registry-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-registry-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'glue-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetRegistry"
                                                        "2017-03-31"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-registry))
(common-lisp:progn
 (common-lisp:defun get-resource-policies
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key next-token max-results)
   (common-lisp:declare (common-lisp:ignorable next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-resource-policies-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'glue-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetResourcePolicies"
                                                        "2017-03-31"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-resource-policies))
(common-lisp:progn
 (common-lisp:defun get-resource-policy
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn)
   (common-lisp:declare (common-lisp:ignorable resource-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-resource-policy-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'glue-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetResourcePolicy"
                                                        "2017-03-31"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-resource-policy))
(common-lisp:progn
 (common-lisp:defun get-schema
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key schema-id)
   (common-lisp:declare (common-lisp:ignorable schema-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-schema-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'glue-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/" "GetSchema"
                                                        "2017-03-31"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-schema))
(common-lisp:progn
 (common-lisp:defun get-schema-by-definition
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key schema-id schema-definition)
   (common-lisp:declare (common-lisp:ignorable schema-id schema-definition))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-schema-by-definition-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'glue-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetSchemaByDefinition"
                                                        "2017-03-31"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-schema-by-definition))
(common-lisp:progn
 (common-lisp:defun get-schema-version
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key schema-id schema-version-id
                     schema-version-number)
   (common-lisp:declare
    (common-lisp:ignorable schema-id schema-version-id schema-version-number))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-schema-version-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'glue-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetSchemaVersion"
                                                        "2017-03-31"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-schema-version))
(common-lisp:progn
 (common-lisp:defun get-schema-versions-diff
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key schema-id first-schema-version-number
                     second-schema-version-number schema-diff-type)
   (common-lisp:declare
    (common-lisp:ignorable schema-id first-schema-version-number
     second-schema-version-number schema-diff-type))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-schema-versions-diff-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'glue-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetSchemaVersionsDiff"
                                                        "2017-03-31"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-schema-versions-diff))
(common-lisp:progn
 (common-lisp:defun get-security-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name)
   (common-lisp:declare (common-lisp:ignorable name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-get-security-configuration-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'glue-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetSecurityConfiguration"
                                                        "2017-03-31"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-security-configuration))
(common-lisp:progn
 (common-lisp:defun get-security-configurations
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key max-results next-token)
   (common-lisp:declare (common-lisp:ignorable max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-get-security-configurations-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'glue-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetSecurityConfigurations"
                                                        "2017-03-31"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-security-configurations))
(common-lisp:progn
 (common-lisp:defun get-session
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key id request-origin)
   (common-lisp:declare (common-lisp:ignorable id request-origin))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-session-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'glue-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/" "GetSession"
                                                        "2017-03-31"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-session))
(common-lisp:progn
 (common-lisp:defun get-statement
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key session-id id request-origin)
   (common-lisp:declare (common-lisp:ignorable session-id id request-origin))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-statement-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'glue-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetStatement"
                                                        "2017-03-31"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-statement))
(common-lisp:progn
 (common-lisp:defun get-table
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key catalog-id database-name name
                     transaction-id query-as-of-time)
   (common-lisp:declare
    (common-lisp:ignorable catalog-id database-name name transaction-id
     query-as-of-time))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-table-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'glue-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/" "GetTable"
                                                        "2017-03-31"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-table))
(common-lisp:progn
 (common-lisp:defun get-table-version
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key catalog-id database-name table-name
                     version-id)
   (common-lisp:declare
    (common-lisp:ignorable catalog-id database-name table-name version-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-table-version-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'glue-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetTableVersion"
                                                        "2017-03-31"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-table-version))
(common-lisp:progn
 (common-lisp:defun get-table-versions
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key catalog-id database-name table-name
                     next-token max-results)
   (common-lisp:declare
    (common-lisp:ignorable catalog-id database-name table-name next-token
     max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-table-versions-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'glue-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetTableVersions"
                                                        "2017-03-31"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-table-versions))
(common-lisp:progn
 (common-lisp:defun get-tables
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key catalog-id database-name expression
                     next-token max-results transaction-id query-as-of-time)
   (common-lisp:declare
    (common-lisp:ignorable catalog-id database-name expression next-token
     max-results transaction-id query-as-of-time))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-tables-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'glue-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/" "GetTables"
                                                        "2017-03-31"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-tables))
(common-lisp:progn
 (common-lisp:defun get-tags
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn)
   (common-lisp:declare (common-lisp:ignorable resource-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-tags-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'glue-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/" "GetTags"
                                                        "2017-03-31"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-tags))
(common-lisp:progn
 (common-lisp:defun get-trigger
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name)
   (common-lisp:declare (common-lisp:ignorable name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-trigger-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'glue-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/" "GetTrigger"
                                                        "2017-03-31"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-trigger))
(common-lisp:progn
 (common-lisp:defun get-triggers
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key next-token dependent-job-name
                     max-results)
   (common-lisp:declare
    (common-lisp:ignorable next-token dependent-job-name max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-triggers-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'glue-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetTriggers"
                                                        "2017-03-31"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-triggers))
(common-lisp:progn
 (common-lisp:defun get-unfiltered-partition-metadata
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key catalog-id database-name table-name
                     partition-values audit-context supported-permission-types)
   (common-lisp:declare
    (common-lisp:ignorable catalog-id database-name table-name partition-values
     audit-context supported-permission-types))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-get-unfiltered-partition-metadata-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'glue-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetUnfilteredPartitionMetadata"
                                                        "2017-03-31"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-unfiltered-partition-metadata))
(common-lisp:progn
 (common-lisp:defun get-unfiltered-partitions-metadata
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key catalog-id database-name table-name
                     expression audit-context supported-permission-types
                     next-token segment max-results)
   (common-lisp:declare
    (common-lisp:ignorable catalog-id database-name table-name expression
     audit-context supported-permission-types next-token segment max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-get-unfiltered-partitions-metadata-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'glue-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetUnfilteredPartitionsMetadata"
                                                        "2017-03-31"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-unfiltered-partitions-metadata))
(common-lisp:progn
 (common-lisp:defun get-unfiltered-table-metadata
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key catalog-id database-name name
                     audit-context supported-permission-types)
   (common-lisp:declare
    (common-lisp:ignorable catalog-id database-name name audit-context
     supported-permission-types))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-get-unfiltered-table-metadata-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'glue-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetUnfilteredTableMetadata"
                                                        "2017-03-31"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-unfiltered-table-metadata))
(common-lisp:progn
 (common-lisp:defun get-user-defined-function
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key catalog-id database-name function-name)
   (common-lisp:declare
    (common-lisp:ignorable catalog-id database-name function-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-get-user-defined-function-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'glue-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetUserDefinedFunction"
                                                        "2017-03-31"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-user-defined-function))
(common-lisp:progn
 (common-lisp:defun get-user-defined-functions
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key catalog-id database-name pattern
                     next-token max-results)
   (common-lisp:declare
    (common-lisp:ignorable catalog-id database-name pattern next-token
     max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-get-user-defined-functions-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'glue-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetUserDefinedFunctions"
                                                        "2017-03-31"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-user-defined-functions))
(common-lisp:progn
 (common-lisp:defun get-workflow
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name include-graph)
   (common-lisp:declare (common-lisp:ignorable name include-graph))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-workflow-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'glue-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetWorkflow"
                                                        "2017-03-31"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-workflow))
(common-lisp:progn
 (common-lisp:defun get-workflow-run
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name run-id include-graph)
   (common-lisp:declare (common-lisp:ignorable name run-id include-graph))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-workflow-run-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'glue-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetWorkflowRun"
                                                        "2017-03-31"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-workflow-run))
(common-lisp:progn
 (common-lisp:defun get-workflow-run-properties
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name run-id)
   (common-lisp:declare (common-lisp:ignorable name run-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-get-workflow-run-properties-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'glue-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetWorkflowRunProperties"
                                                        "2017-03-31"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-workflow-run-properties))
(common-lisp:progn
 (common-lisp:defun get-workflow-runs
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name include-graph next-token
                     max-results)
   (common-lisp:declare
    (common-lisp:ignorable name include-graph next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-workflow-runs-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'glue-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetWorkflowRuns"
                                                        "2017-03-31"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-workflow-runs))
(common-lisp:progn
 (common-lisp:defun import-catalog-to-glue
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key catalog-id)
   (common-lisp:declare (common-lisp:ignorable catalog-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-import-catalog-to-glue-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'glue-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ImportCatalogToGlue"
                                                        "2017-03-31"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'import-catalog-to-glue))
(common-lisp:progn
 (common-lisp:defun list-blueprints
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key next-token max-results tags)
   (common-lisp:declare (common-lisp:ignorable next-token max-results tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-blueprints-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'glue-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ListBlueprints"
                                                        "2017-03-31"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-blueprints))
(common-lisp:progn
 (common-lisp:defun list-crawlers
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key max-results next-token tags)
   (common-lisp:declare (common-lisp:ignorable max-results next-token tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-crawlers-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'glue-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ListCrawlers"
                                                        "2017-03-31"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-crawlers))
(common-lisp:progn
 (common-lisp:defun list-crawls
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key crawler-name max-results filters
                     next-token)
   (common-lisp:declare
    (common-lisp:ignorable crawler-name max-results filters next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-crawls-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'glue-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/" "ListCrawls"
                                                        "2017-03-31"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-crawls))
(common-lisp:progn
 (common-lisp:defun list-custom-entity-types
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key next-token max-results)
   (common-lisp:declare (common-lisp:ignorable next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-custom-entity-types-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'glue-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ListCustomEntityTypes"
                                                        "2017-03-31"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-custom-entity-types))
(common-lisp:progn
 (common-lisp:defun list-data-quality-results
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key filter next-token max-results)
   (common-lisp:declare (common-lisp:ignorable filter next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-data-quality-results-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'glue-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ListDataQualityResults"
                                                        "2017-03-31"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-data-quality-results))
(common-lisp:progn
 (common-lisp:defun list-data-quality-rule-recommendation-runs
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key filter next-token max-results)
   (common-lisp:declare (common-lisp:ignorable filter next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-data-quality-rule-recommendation-runs-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'glue-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ListDataQualityRuleRecommendationRuns"
                                                        "2017-03-31"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-data-quality-rule-recommendation-runs))
(common-lisp:progn
 (common-lisp:defun list-data-quality-ruleset-evaluation-runs
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key filter next-token max-results)
   (common-lisp:declare (common-lisp:ignorable filter next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-data-quality-ruleset-evaluation-runs-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'glue-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ListDataQualityRulesetEvaluationRuns"
                                                        "2017-03-31"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-data-quality-ruleset-evaluation-runs))
(common-lisp:progn
 (common-lisp:defun list-data-quality-rulesets
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key next-token max-results filter tags)
   (common-lisp:declare
    (common-lisp:ignorable next-token max-results filter tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-data-quality-rulesets-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'glue-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ListDataQualityRulesets"
                                                        "2017-03-31"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-data-quality-rulesets))
(common-lisp:progn
 (common-lisp:defun list-dev-endpoints
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key next-token max-results tags)
   (common-lisp:declare (common-lisp:ignorable next-token max-results tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-dev-endpoints-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'glue-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ListDevEndpoints"
                                                        "2017-03-31"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-dev-endpoints))
(common-lisp:progn
 (common-lisp:defun list-jobs
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key next-token max-results tags)
   (common-lisp:declare (common-lisp:ignorable next-token max-results tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-jobs-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'glue-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/" "ListJobs"
                                                        "2017-03-31"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-jobs))
(common-lisp:progn
 (common-lisp:defun list-mltransforms
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key next-token max-results filter sort tags)
   (common-lisp:declare
    (common-lisp:ignorable next-token max-results filter sort tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-mltransforms-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'glue-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ListMLTransforms"
                                                        "2017-03-31"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-mltransforms))
(common-lisp:progn
 (common-lisp:defun list-registries
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key max-results next-token)
   (common-lisp:declare (common-lisp:ignorable max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-registries-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'glue-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ListRegistries"
                                                        "2017-03-31"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-registries))
(common-lisp:progn
 (common-lisp:defun list-schema-versions
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key schema-id max-results next-token)
   (common-lisp:declare
    (common-lisp:ignorable schema-id max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-schema-versions-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'glue-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ListSchemaVersions"
                                                        "2017-03-31"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-schema-versions))
(common-lisp:progn
 (common-lisp:defun list-schemas
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key registry-id max-results next-token)
   (common-lisp:declare
    (common-lisp:ignorable registry-id max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-schemas-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'glue-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ListSchemas"
                                                        "2017-03-31"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-schemas))
(common-lisp:progn
 (common-lisp:defun list-sessions
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key next-token max-results tags
                     request-origin)
   (common-lisp:declare
    (common-lisp:ignorable next-token max-results tags request-origin))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-sessions-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'glue-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ListSessions"
                                                        "2017-03-31"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-sessions))
(common-lisp:progn
 (common-lisp:defun list-statements
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key session-id request-origin next-token)
   (common-lisp:declare
    (common-lisp:ignorable session-id request-origin next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-statements-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'glue-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ListStatements"
                                                        "2017-03-31"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-statements))
(common-lisp:progn
 (common-lisp:defun list-triggers
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key next-token dependent-job-name max-results
                     tags)
   (common-lisp:declare
    (common-lisp:ignorable next-token dependent-job-name max-results tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-triggers-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'glue-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ListTriggers"
                                                        "2017-03-31"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-triggers))
(common-lisp:progn
 (common-lisp:defun list-workflows
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key next-token max-results)
   (common-lisp:declare (common-lisp:ignorable next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-workflows-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'glue-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ListWorkflows"
                                                        "2017-03-31"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-workflows))
(common-lisp:progn
 (common-lisp:defun put-data-catalog-encryption-settings
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key catalog-id
                     data-catalog-encryption-settings)
   (common-lisp:declare
    (common-lisp:ignorable catalog-id data-catalog-encryption-settings))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-put-data-catalog-encryption-settings-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'glue-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "PutDataCatalogEncryptionSettings"
                                                        "2017-03-31"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'put-data-catalog-encryption-settings))
(common-lisp:progn
 (common-lisp:defun put-resource-policy
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key policy-in-json resource-arn
                     policy-hash-condition policy-exists-condition
                     enable-hybrid)
   (common-lisp:declare
    (common-lisp:ignorable policy-in-json resource-arn policy-hash-condition
     policy-exists-condition enable-hybrid))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-put-resource-policy-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'glue-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "PutResourcePolicy"
                                                        "2017-03-31"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'put-resource-policy))
(common-lisp:progn
 (common-lisp:defun put-schema-version-metadata
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key schema-id schema-version-number
                     schema-version-id metadata-key-value)
   (common-lisp:declare
    (common-lisp:ignorable schema-id schema-version-number schema-version-id
     metadata-key-value))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-put-schema-version-metadata-input
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'glue-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "PutSchemaVersionMetadata"
                                                        "2017-03-31"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'put-schema-version-metadata))
(common-lisp:progn
 (common-lisp:defun put-workflow-run-properties
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name run-id run-properties)
   (common-lisp:declare (common-lisp:ignorable name run-id run-properties))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-put-workflow-run-properties-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'glue-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "PutWorkflowRunProperties"
                                                        "2017-03-31"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'put-workflow-run-properties))
(common-lisp:progn
 (common-lisp:defun query-schema-version-metadata
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key schema-id schema-version-number
                     schema-version-id metadata-list max-results next-token)
   (common-lisp:declare
    (common-lisp:ignorable schema-id schema-version-number schema-version-id
     metadata-list max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-query-schema-version-metadata-input
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'glue-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "QuerySchemaVersionMetadata"
                                                        "2017-03-31"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'query-schema-version-metadata))
(common-lisp:progn
 (common-lisp:defun register-schema-version
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key schema-id schema-definition)
   (common-lisp:declare (common-lisp:ignorable schema-id schema-definition))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-register-schema-version-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'glue-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "RegisterSchemaVersion"
                                                        "2017-03-31"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'register-schema-version))
(common-lisp:progn
 (common-lisp:defun remove-schema-version-metadata
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key schema-id schema-version-number
                     schema-version-id metadata-key-value)
   (common-lisp:declare
    (common-lisp:ignorable schema-id schema-version-number schema-version-id
     metadata-key-value))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-remove-schema-version-metadata-input
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'glue-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "RemoveSchemaVersionMetadata"
                                                        "2017-03-31"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'remove-schema-version-metadata))
(common-lisp:progn
 (common-lisp:defun reset-job-bookmark
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key job-name run-id)
   (common-lisp:declare (common-lisp:ignorable job-name run-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-reset-job-bookmark-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'glue-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ResetJobBookmark"
                                                        "2017-03-31"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'reset-job-bookmark))
(common-lisp:progn
 (common-lisp:defun resume-workflow-run
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name run-id node-ids)
   (common-lisp:declare (common-lisp:ignorable name run-id node-ids))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-resume-workflow-run-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'glue-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ResumeWorkflowRun"
                                                        "2017-03-31"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'resume-workflow-run))
(common-lisp:progn
 (common-lisp:defun run-statement
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key session-id code request-origin)
   (common-lisp:declare (common-lisp:ignorable session-id code request-origin))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-run-statement-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'glue-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "RunStatement"
                                                        "2017-03-31"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'run-statement))
(common-lisp:progn
 (common-lisp:defun search-tables
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key catalog-id next-token filters search-text
                     sort-criteria max-results resource-share-type)
   (common-lisp:declare
    (common-lisp:ignorable catalog-id next-token filters search-text
     sort-criteria max-results resource-share-type))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-search-tables-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'glue-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "SearchTables"
                                                        "2017-03-31"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'search-tables))
(common-lisp:progn
 (common-lisp:defun start-blueprint-run
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key blueprint-name parameters role-arn)
   (common-lisp:declare
    (common-lisp:ignorable blueprint-name parameters role-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-start-blueprint-run-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'glue-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "StartBlueprintRun"
                                                        "2017-03-31"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'start-blueprint-run))
(common-lisp:progn
 (common-lisp:defun start-crawler
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name)
   (common-lisp:declare (common-lisp:ignorable name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-start-crawler-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'glue-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "StartCrawler"
                                                        "2017-03-31"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'start-crawler))
(common-lisp:progn
 (common-lisp:defun start-crawler-schedule
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key crawler-name)
   (common-lisp:declare (common-lisp:ignorable crawler-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-start-crawler-schedule-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'glue-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "StartCrawlerSchedule"
                                                        "2017-03-31"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'start-crawler-schedule))
(common-lisp:progn
 (common-lisp:defun start-data-quality-rule-recommendation-run
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key data-source role number-of-workers
                     timeout created-ruleset-name client-token)
   (common-lisp:declare
    (common-lisp:ignorable data-source role number-of-workers timeout
     created-ruleset-name client-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-start-data-quality-rule-recommendation-run-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'glue-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "StartDataQualityRuleRecommendationRun"
                                                        "2017-03-31"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'start-data-quality-rule-recommendation-run))
(common-lisp:progn
 (common-lisp:defun start-data-quality-ruleset-evaluation-run
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key data-source role number-of-workers
                     timeout client-token additional-run-options ruleset-names)
   (common-lisp:declare
    (common-lisp:ignorable data-source role number-of-workers timeout
     client-token additional-run-options ruleset-names))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-start-data-quality-ruleset-evaluation-run-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'glue-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "StartDataQualityRulesetEvaluationRun"
                                                        "2017-03-31"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'start-data-quality-ruleset-evaluation-run))
(common-lisp:progn
 (common-lisp:defun start-export-labels-task-run
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key transform-id output-s3path)
   (common-lisp:declare (common-lisp:ignorable transform-id output-s3path))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-start-export-labels-task-run-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'glue-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "StartExportLabelsTaskRun"
                                                        "2017-03-31"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'start-export-labels-task-run))
(common-lisp:progn
 (common-lisp:defun start-import-labels-task-run
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key transform-id input-s3path
                     replace-all-labels)
   (common-lisp:declare
    (common-lisp:ignorable transform-id input-s3path replace-all-labels))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-start-import-labels-task-run-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'glue-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "StartImportLabelsTaskRun"
                                                        "2017-03-31"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'start-import-labels-task-run))
(common-lisp:progn
 (common-lisp:defun start-job-run
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key job-name job-run-id arguments
                     allocated-capacity timeout max-capacity
                     security-configuration notification-property worker-type
                     number-of-workers execution-class)
   (common-lisp:declare
    (common-lisp:ignorable job-name job-run-id arguments allocated-capacity
     timeout max-capacity security-configuration notification-property
     worker-type number-of-workers execution-class))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-start-job-run-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'glue-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "StartJobRun"
                                                        "2017-03-31"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'start-job-run))
(common-lisp:progn
 (common-lisp:defun start-mlevaluation-task-run
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key transform-id)
   (common-lisp:declare (common-lisp:ignorable transform-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-start-mlevaluation-task-run-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'glue-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "StartMLEvaluationTaskRun"
                                                        "2017-03-31"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'start-mlevaluation-task-run))
(common-lisp:progn
 (common-lisp:defun start-mllabeling-set-generation-task-run
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key transform-id output-s3path)
   (common-lisp:declare (common-lisp:ignorable transform-id output-s3path))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-start-mllabeling-set-generation-task-run-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'glue-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "StartMLLabelingSetGenerationTaskRun"
                                                        "2017-03-31"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'start-mllabeling-set-generation-task-run))
(common-lisp:progn
 (common-lisp:defun start-trigger
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name)
   (common-lisp:declare (common-lisp:ignorable name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-start-trigger-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'glue-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "StartTrigger"
                                                        "2017-03-31"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'start-trigger))
(common-lisp:progn
 (common-lisp:defun start-workflow-run
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name run-properties)
   (common-lisp:declare (common-lisp:ignorable name run-properties))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-start-workflow-run-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'glue-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "StartWorkflowRun"
                                                        "2017-03-31"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'start-workflow-run))
(common-lisp:progn
 (common-lisp:defun stop-crawler
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name)
   (common-lisp:declare (common-lisp:ignorable name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-stop-crawler-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'glue-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "StopCrawler"
                                                        "2017-03-31"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'stop-crawler))
(common-lisp:progn
 (common-lisp:defun stop-crawler-schedule
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key crawler-name)
   (common-lisp:declare (common-lisp:ignorable crawler-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-stop-crawler-schedule-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'glue-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "StopCrawlerSchedule"
                                                        "2017-03-31"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'stop-crawler-schedule))
(common-lisp:progn
 (common-lisp:defun stop-session
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key id request-origin)
   (common-lisp:declare (common-lisp:ignorable id request-origin))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-stop-session-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'glue-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "StopSession"
                                                        "2017-03-31"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'stop-session))
(common-lisp:progn
 (common-lisp:defun stop-trigger
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name)
   (common-lisp:declare (common-lisp:ignorable name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-stop-trigger-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'glue-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "StopTrigger"
                                                        "2017-03-31"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'stop-trigger))
(common-lisp:progn
 (common-lisp:defun stop-workflow-run
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name run-id)
   (common-lisp:declare (common-lisp:ignorable name run-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-stop-workflow-run-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'glue-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "StopWorkflowRun"
                                                        "2017-03-31"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'stop-workflow-run))
(common-lisp:progn
 (common-lisp:defun tag-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn tags-to-add)
   (common-lisp:declare (common-lisp:ignorable resource-arn tags-to-add))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-tag-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'glue-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "TagResource"
                                                        "2017-03-31"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'tag-resource))
(common-lisp:progn
 (common-lisp:defun untag-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn tags-to-remove)
   (common-lisp:declare (common-lisp:ignorable resource-arn tags-to-remove))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-untag-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'glue-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "UntagResource"
                                                        "2017-03-31"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'untag-resource))
(common-lisp:progn
 (common-lisp:defun update-blueprint
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name description blueprint-location)
   (common-lisp:declare
    (common-lisp:ignorable name description blueprint-location))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-blueprint-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'glue-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "UpdateBlueprint"
                                                        "2017-03-31"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-blueprint))
(common-lisp:progn
 (common-lisp:defun update-classifier
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key grok-classifier xmlclassifier
                     json-classifier csv-classifier)
   (common-lisp:declare
    (common-lisp:ignorable grok-classifier xmlclassifier json-classifier
     csv-classifier))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-classifier-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'glue-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "UpdateClassifier"
                                                        "2017-03-31"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-classifier))
(common-lisp:progn
 (common-lisp:defun update-column-statistics-for-partition
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key catalog-id database-name table-name
                     partition-values column-statistics-list)
   (common-lisp:declare
    (common-lisp:ignorable catalog-id database-name table-name partition-values
     column-statistics-list))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-update-column-statistics-for-partition-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'glue-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "UpdateColumnStatisticsForPartition"
                                                        "2017-03-31"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-column-statistics-for-partition))
(common-lisp:progn
 (common-lisp:defun update-column-statistics-for-table
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key catalog-id database-name table-name
                     column-statistics-list)
   (common-lisp:declare
    (common-lisp:ignorable catalog-id database-name table-name
     column-statistics-list))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-update-column-statistics-for-table-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'glue-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "UpdateColumnStatisticsForTable"
                                                        "2017-03-31"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-column-statistics-for-table))
(common-lisp:progn
 (common-lisp:defun update-connection
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key catalog-id name connection-input)
   (common-lisp:declare
    (common-lisp:ignorable catalog-id name connection-input))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-connection-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'glue-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "UpdateConnection"
                                                        "2017-03-31"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-connection))
(common-lisp:progn
 (common-lisp:defun update-crawler
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name role database-name description
                     targets schedule classifiers table-prefix
                     schema-change-policy recrawl-policy lineage-configuration
                     lake-formation-configuration configuration
                     crawler-security-configuration)
   (common-lisp:declare
    (common-lisp:ignorable name role database-name description targets schedule
     classifiers table-prefix schema-change-policy recrawl-policy
     lineage-configuration lake-formation-configuration configuration
     crawler-security-configuration))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-crawler-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'glue-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "UpdateCrawler"
                                                        "2017-03-31"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-crawler))
(common-lisp:progn
 (common-lisp:defun update-crawler-schedule
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key crawler-name schedule)
   (common-lisp:declare (common-lisp:ignorable crawler-name schedule))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-crawler-schedule-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'glue-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "UpdateCrawlerSchedule"
                                                        "2017-03-31"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-crawler-schedule))
(common-lisp:progn
 (common-lisp:defun update-data-quality-ruleset
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name updated-name description ruleset)
   (common-lisp:declare
    (common-lisp:ignorable name updated-name description ruleset))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-update-data-quality-ruleset-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'glue-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "UpdateDataQualityRuleset"
                                                        "2017-03-31"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-data-quality-ruleset))
(common-lisp:progn
 (common-lisp:defun update-database
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key catalog-id name database-input)
   (common-lisp:declare (common-lisp:ignorable catalog-id name database-input))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-database-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'glue-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "UpdateDatabase"
                                                        "2017-03-31"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-database))
(common-lisp:progn
 (common-lisp:defun update-dev-endpoint
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key endpoint-name public-key add-public-keys
                     delete-public-keys custom-libraries update-etl-libraries
                     delete-arguments add-arguments)
   (common-lisp:declare
    (common-lisp:ignorable endpoint-name public-key add-public-keys
     delete-public-keys custom-libraries update-etl-libraries delete-arguments
     add-arguments))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-dev-endpoint-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'glue-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "UpdateDevEndpoint"
                                                        "2017-03-31"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-dev-endpoint))
(common-lisp:progn
 (common-lisp:defun update-job
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key job-name job-update)
   (common-lisp:declare (common-lisp:ignorable job-name job-update))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-job-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'glue-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/" "UpdateJob"
                                                        "2017-03-31"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-job))
(common-lisp:progn
 (common-lisp:defun update-job-from-source-control
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key job-name provider repository-name
                     repository-owner branch-name folder commit-id
                     auth-strategy auth-token)
   (common-lisp:declare
    (common-lisp:ignorable job-name provider repository-name repository-owner
     branch-name folder commit-id auth-strategy auth-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-update-job-from-source-control-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'glue-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "UpdateJobFromSourceControl"
                                                        "2017-03-31"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-job-from-source-control))
(common-lisp:progn
 (common-lisp:defun update-mltransform
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key transform-id name description parameters
                     role glue-version max-capacity worker-type
                     number-of-workers timeout max-retries)
   (common-lisp:declare
    (common-lisp:ignorable transform-id name description parameters role
     glue-version max-capacity worker-type number-of-workers timeout
     max-retries))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-mltransform-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'glue-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "UpdateMLTransform"
                                                        "2017-03-31"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-mltransform))
(common-lisp:progn
 (common-lisp:defun update-partition
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key catalog-id database-name table-name
                     partition-value-list partition-input)
   (common-lisp:declare
    (common-lisp:ignorable catalog-id database-name table-name
     partition-value-list partition-input))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-partition-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'glue-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "UpdatePartition"
                                                        "2017-03-31"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-partition))
(common-lisp:progn
 (common-lisp:defun update-registry
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key registry-id description)
   (common-lisp:declare (common-lisp:ignorable registry-id description))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-registry-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'glue-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "UpdateRegistry"
                                                        "2017-03-31"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-registry))
(common-lisp:progn
 (common-lisp:defun update-schema
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key schema-id schema-version-number
                     compatibility description)
   (common-lisp:declare
    (common-lisp:ignorable schema-id schema-version-number compatibility
     description))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-schema-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'glue-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "UpdateSchema"
                                                        "2017-03-31"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-schema))
(common-lisp:progn
 (common-lisp:defun update-source-control-from-job
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key job-name provider repository-name
                     repository-owner branch-name folder commit-id
                     auth-strategy auth-token)
   (common-lisp:declare
    (common-lisp:ignorable job-name provider repository-name repository-owner
     branch-name folder commit-id auth-strategy auth-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-update-source-control-from-job-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'glue-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "UpdateSourceControlFromJob"
                                                        "2017-03-31"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-source-control-from-job))
(common-lisp:progn
 (common-lisp:defun update-table
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key catalog-id database-name table-input
                     skip-archive transaction-id version-id)
   (common-lisp:declare
    (common-lisp:ignorable catalog-id database-name table-input skip-archive
     transaction-id version-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-table-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'glue-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "UpdateTable"
                                                        "2017-03-31"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-table))
(common-lisp:progn
 (common-lisp:defun update-trigger
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name trigger-update)
   (common-lisp:declare (common-lisp:ignorable name trigger-update))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-trigger-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'glue-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "UpdateTrigger"
                                                        "2017-03-31"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-trigger))
(common-lisp:progn
 (common-lisp:defun update-user-defined-function
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key catalog-id database-name function-name
                     function-input)
   (common-lisp:declare
    (common-lisp:ignorable catalog-id database-name function-name
     function-input))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-update-user-defined-function-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'glue-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "UpdateUserDefinedFunction"
                                                        "2017-03-31"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-user-defined-function))
(common-lisp:progn
 (common-lisp:defun update-workflow
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name description default-run-properties
                     max-concurrent-runs)
   (common-lisp:declare
    (common-lisp:ignorable name description default-run-properties
     max-concurrent-runs))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-workflow-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'glue-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "UpdateWorkflow"
                                                        "2017-03-31"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-workflow))
