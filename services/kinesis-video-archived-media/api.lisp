;; DO NOT EDIT: File is generated by AWS-SDK/GENERATOR.

(common-lisp:defpackage #:aws-sdk/services/kinesis-video-archived-media/api
  (:use)
  (:nicknames #:aws/kinesis-video-archived-media)
  (:import-from #:aws-sdk/generator/shape)
  (:import-from #:aws-sdk/generator/operation)
  (:import-from #:aws-sdk/api)
  (:import-from #:aws-sdk/request)
  (:import-from #:aws-sdk/error))
(common-lisp:in-package #:aws-sdk/services/kinesis-video-archived-media/api)
(common-lisp:progn
 (common-lisp:defclass kinesis-video-archived-media-request
                       (aws-sdk/request:request) common-lisp:nil
                       (:default-initargs :service
                        "kinesis-video-archived-media" :protocol :rest-json))
 (common-lisp:export 'kinesis-video-archived-media-request))
(common-lisp:progn
 (common-lisp:define-condition kinesis-video-archived-media-error
     (aws-sdk/error:aws-error)
     common-lisp:nil)
 (common-lisp:export 'kinesis-video-archived-media-error))
(common-lisp:defvar *error-map*
  '(("ClientLimitExceededException" . client-limit-exceeded-exception)
    ("InvalidArgumentException" . invalid-argument-exception)
    ("InvalidCodecPrivateDataException" . invalid-codec-private-data-exception)
    ("InvalidMediaFrameException" . invalid-media-frame-exception)
    ("MissingCodecPrivateDataException" . missing-codec-private-data-exception)
    ("NoDataRetentionException" . no-data-retention-exception)
    ("NotAuthorizedException" . not-authorized-exception)
    ("ResourceNotFoundException" . resource-not-found-exception)
    ("UnsupportedStreamMediaTypeException"
     . unsupported-stream-media-type-exception)))
(common-lisp:progn
 (common-lisp:define-condition client-limit-exceeded-exception
     (kinesis-video-archived-media-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       client-limit-exceeded-exception-message)))
 (common-lisp:export
  (common-lisp:list 'client-limit-exceeded-exception
                    'client-limit-exceeded-exception-message)))
(common-lisp:progn
 (common-lisp:defclass clip-fragment-selector common-lisp:nil
                       ((timestamp-range :initarg :timestamp-range :type
                         (common-lisp:or clip-timestamp-range common-lisp:null)
                         :accessor %clip-fragment-selector-timestamp-range
                         :initform
                         (common-lisp:error ":timestamp-range is required"))
                        (fragment-selector-type :initarg
                         :fragment-selector-type :type
                         (common-lisp:or clip-fragment-selector-type
                                         common-lisp:null)
                         :accessor
                         %clip-fragment-selector-fragment-selector-type
                         :initform
                         (common-lisp:error
                          ":fragment-selector-type is required"))))
 (common-lisp:export
  (common-lisp:list 'clip-fragment-selector 'make-clip-fragment-selector))
 (common-lisp:defun make-clip-fragment-selector
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key timestamp-range fragment-selector-type)
   (common-lisp:apply #'common-lisp:make-instance 'clip-fragment-selector
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          clip-fragment-selector))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          clip-fragment-selector))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'fragment-selector-type))
      (common-lisp:list
       (common-lisp:cons "FragmentSelectorType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'timestamp-range))
      (common-lisp:list
       (common-lisp:cons "TimestampRange"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          clip-fragment-selector))
   common-lisp:nil))
(common-lisp:deftype clip-fragment-selector-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass clip-timestamp-range common-lisp:nil
                       ((end-timestamp :initarg :end-timestamp :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %clip-timestamp-range-end-timestamp :initform
                         (common-lisp:error ":end-timestamp is required"))
                        (start-timestamp :initarg :start-timestamp :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %clip-timestamp-range-start-timestamp :initform
                         (common-lisp:error ":start-timestamp is required"))))
 (common-lisp:export
  (common-lisp:list 'clip-timestamp-range 'make-clip-timestamp-range))
 (common-lisp:defun make-clip-timestamp-range
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key end-timestamp start-timestamp)
   (common-lisp:apply #'common-lisp:make-instance 'clip-timestamp-range
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input clip-timestamp-range))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input clip-timestamp-range))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start-timestamp))
      (common-lisp:list
       (common-lisp:cons "StartTimestamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'end-timestamp))
      (common-lisp:list
       (common-lisp:cons "EndTimestamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input clip-timestamp-range))
   common-lisp:nil))
(common-lisp:deftype container-format () 'common-lisp:string)
(common-lisp:deftype content-type () 'common-lisp:string)
(common-lisp:deftype dashdisplay-fragment-number () 'common-lisp:string)
(common-lisp:deftype dashdisplay-fragment-timestamp () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass dashfragment-selector common-lisp:nil
                       ((timestamp-range :initarg :timestamp-range :type
                         (common-lisp:or dashtimestamp-range common-lisp:null)
                         :accessor %dashfragment-selector-timestamp-range
                         :initform common-lisp:nil)
                        (fragment-selector-type :initarg
                         :fragment-selector-type :type
                         (common-lisp:or dashfragment-selector-type
                                         common-lisp:null)
                         :accessor
                         %dashfragment-selector-fragment-selector-type
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'dashfragment-selector 'make-dashfragment-selector))
 (common-lisp:defun make-dashfragment-selector
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key timestamp-range fragment-selector-type)
   (common-lisp:apply #'common-lisp:make-instance 'dashfragment-selector
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          dashfragment-selector))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          dashfragment-selector))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'fragment-selector-type))
      (common-lisp:list
       (common-lisp:cons "FragmentSelectorType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'timestamp-range))
      (common-lisp:list
       (common-lisp:cons "TimestampRange"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          dashfragment-selector))
   common-lisp:nil))
(common-lisp:deftype dashfragment-selector-type () 'common-lisp:string)
(common-lisp:deftype dashmax-results () 'common-lisp:integer)
(common-lisp:deftype dashplayback-mode () 'common-lisp:string)
(common-lisp:deftype dashstreaming-session-url () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass dashtimestamp-range common-lisp:nil
                       ((end-timestamp :initarg :end-timestamp :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %dashtimestamp-range-end-timestamp :initform
                         common-lisp:nil)
                        (start-timestamp :initarg :start-timestamp :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %dashtimestamp-range-start-timestamp :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'dashtimestamp-range 'make-dashtimestamp-range))
 (common-lisp:defun make-dashtimestamp-range
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key end-timestamp start-timestamp)
   (common-lisp:apply #'common-lisp:make-instance 'dashtimestamp-range
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input dashtimestamp-range))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input dashtimestamp-range))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start-timestamp))
      (common-lisp:list
       (common-lisp:cons "StartTimestamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'end-timestamp))
      (common-lisp:list
       (common-lisp:cons "EndTimestamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input dashtimestamp-range))
   common-lisp:nil))
(common-lisp:deftype error-message () 'common-lisp:string)
(common-lisp:deftype expires () 'common-lisp:integer)
(common-lisp:deftype format () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype format-config () 'common-lisp:hash-table)
 (common-lisp:defun |make-format-config| (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:deftype format-config-key () 'common-lisp:string)
(common-lisp:deftype format-config-value () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass fragment common-lisp:nil
                       ((fragment-length-in-milliseconds :initarg
                         :fragment-length-in-milliseconds :type
                         (common-lisp:or long common-lisp:null) :accessor
                         %fragment-fragment-length-in-milliseconds :initform
                         common-lisp:nil)
                        (server-timestamp :initarg :server-timestamp :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %fragment-server-timestamp :initform common-lisp:nil)
                        (producer-timestamp :initarg :producer-timestamp :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %fragment-producer-timestamp :initform
                         common-lisp:nil)
                        (fragment-size-in-bytes :initarg
                         :fragment-size-in-bytes :type
                         (common-lisp:or long common-lisp:null) :accessor
                         %fragment-fragment-size-in-bytes :initform
                         common-lisp:nil)
                        (fragment-number :initarg :fragment-number :type
                         (common-lisp:or fragment-number-string
                                         common-lisp:null)
                         :accessor %fragment-fragment-number :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'fragment 'make-fragment))
 (common-lisp:defun make-fragment
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key fragment-length-in-milliseconds
                     server-timestamp producer-timestamp fragment-size-in-bytes
                     fragment-number)
   (common-lisp:apply #'common-lisp:make-instance 'fragment
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input fragment))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input fragment))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'fragment-number))
      (common-lisp:list
       (common-lisp:cons "FragmentNumber"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'fragment-size-in-bytes))
      (common-lisp:list
       (common-lisp:cons "FragmentSizeInBytes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'producer-timestamp))
      (common-lisp:list
       (common-lisp:cons "ProducerTimestamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'server-timestamp))
      (common-lisp:list
       (common-lisp:cons "ServerTimestamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'fragment-length-in-milliseconds))
      (common-lisp:list
       (common-lisp:cons "FragmentLengthInMilliseconds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input fragment))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype fragment-list () '(trivial-types:proper-list fragment))
 (common-lisp:defun |make-fragment-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list fragment))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype fragment-number-list ()
   '(trivial-types:proper-list fragment-number-string))
 (common-lisp:defun |make-fragment-number-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list fragment-number-string))
   aws-sdk/generator/shape::members))
(common-lisp:deftype fragment-number-string () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass fragment-selector common-lisp:nil
                       ((timestamp-range :initarg :timestamp-range :type
                         (common-lisp:or timestamp-range common-lisp:null)
                         :accessor %fragment-selector-timestamp-range :initform
                         (common-lisp:error ":timestamp-range is required"))
                        (fragment-selector-type :initarg
                         :fragment-selector-type :type
                         (common-lisp:or fragment-selector-type
                                         common-lisp:null)
                         :accessor %fragment-selector-fragment-selector-type
                         :initform
                         (common-lisp:error
                          ":fragment-selector-type is required"))))
 (common-lisp:export
  (common-lisp:list 'fragment-selector 'make-fragment-selector))
 (common-lisp:defun make-fragment-selector
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key timestamp-range fragment-selector-type)
   (common-lisp:apply #'common-lisp:make-instance 'fragment-selector
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input fragment-selector))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input fragment-selector))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'fragment-selector-type))
      (common-lisp:list
       (common-lisp:cons "FragmentSelectorType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'timestamp-range))
      (common-lisp:list
       (common-lisp:cons "TimestampRange"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input fragment-selector))
   common-lisp:nil))
(common-lisp:deftype fragment-selector-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass get-clip-input common-lisp:nil
                       ((clip-fragment-selector :initarg
                         :clip-fragment-selector :type
                         (common-lisp:or clip-fragment-selector
                                         common-lisp:null)
                         :accessor %get-clip-input-clip-fragment-selector
                         :initform
                         (common-lisp:error
                          ":clip-fragment-selector is required"))
                        (stream-arn :initarg :stream-arn :type
                         (common-lisp:or resource-arn common-lisp:null)
                         :accessor %get-clip-input-stream-arn :initform
                         common-lisp:nil)
                        (stream-name :initarg :stream-name :type
                         (common-lisp:or stream-name common-lisp:null)
                         :accessor %get-clip-input-stream-name :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'get-clip-input 'make-get-clip-input))
 (common-lisp:defun make-get-clip-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key clip-fragment-selector stream-arn
                     stream-name)
   (common-lisp:apply #'common-lisp:make-instance 'get-clip-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-clip-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-clip-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stream-name))
      (common-lisp:list
       (common-lisp:cons "StreamName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stream-arn))
      (common-lisp:list
       (common-lisp:cons "StreamARN"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'clip-fragment-selector))
      (common-lisp:list
       (common-lisp:cons "ClipFragmentSelector"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-clip-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-clip-output common-lisp:nil
                       ((payload :initarg :payload :type
                         (common-lisp:or payload common-lisp:null) :accessor
                         %get-clip-output-payload :initform common-lisp:nil)
                        (content-type :initarg :content-type :type
                         (common-lisp:or content-type common-lisp:null)
                         :accessor %get-clip-output-content-type :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'get-clip-output 'make-get-clip-output))
 (common-lisp:defun make-get-clip-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key payload content-type)
   (common-lisp:apply #'common-lisp:make-instance 'get-clip-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-clip-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'content-type))
      (common-lisp:cons "Content-Type" aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-clip-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'payload))
      (common-lisp:list
       (common-lisp:cons "Payload"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-clip-output))
   (com.inuoe.jzon:stringify
    (common-lisp:slot-value aws-sdk/generator/shape::input 'payload))))
(common-lisp:progn
 (common-lisp:defclass get-dashstreaming-session-urlinput common-lisp:nil
                       ((max-manifest-fragment-results :initarg
                         :max-manifest-fragment-results :type
                         (common-lisp:or dashmax-results common-lisp:null)
                         :accessor
                         %get-dashstreaming-session-urlinput-max-manifest-fragment-results
                         :initform common-lisp:nil)
                        (expires :initarg :expires :type
                         (common-lisp:or expires common-lisp:null) :accessor
                         %get-dashstreaming-session-urlinput-expires :initform
                         common-lisp:nil)
                        (dashfragment-selector :initarg :dashfragment-selector
                         :type
                         (common-lisp:or dashfragment-selector
                                         common-lisp:null)
                         :accessor
                         %get-dashstreaming-session-urlinput-dashfragment-selector
                         :initform common-lisp:nil)
                        (display-fragment-number :initarg
                         :display-fragment-number :type
                         (common-lisp:or dashdisplay-fragment-number
                                         common-lisp:null)
                         :accessor
                         %get-dashstreaming-session-urlinput-display-fragment-number
                         :initform common-lisp:nil)
                        (display-fragment-timestamp :initarg
                         :display-fragment-timestamp :type
                         (common-lisp:or dashdisplay-fragment-timestamp
                                         common-lisp:null)
                         :accessor
                         %get-dashstreaming-session-urlinput-display-fragment-timestamp
                         :initform common-lisp:nil)
                        (playback-mode :initarg :playback-mode :type
                         (common-lisp:or dashplayback-mode common-lisp:null)
                         :accessor
                         %get-dashstreaming-session-urlinput-playback-mode
                         :initform common-lisp:nil)
                        (stream-arn :initarg :stream-arn :type
                         (common-lisp:or resource-arn common-lisp:null)
                         :accessor
                         %get-dashstreaming-session-urlinput-stream-arn
                         :initform common-lisp:nil)
                        (stream-name :initarg :stream-name :type
                         (common-lisp:or stream-name common-lisp:null)
                         :accessor
                         %get-dashstreaming-session-urlinput-stream-name
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'get-dashstreaming-session-urlinput
                    'make-get-dashstreaming-session-urlinput))
 (common-lisp:defun make-get-dashstreaming-session-urlinput
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key max-manifest-fragment-results expires
                     dashfragment-selector display-fragment-number
                     display-fragment-timestamp playback-mode stream-arn
                     stream-name)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-dashstreaming-session-urlinput
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-dashstreaming-session-urlinput))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-dashstreaming-session-urlinput))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stream-name))
      (common-lisp:list
       (common-lisp:cons "StreamName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stream-arn))
      (common-lisp:list
       (common-lisp:cons "StreamARN"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'playback-mode))
      (common-lisp:list
       (common-lisp:cons "PlaybackMode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'display-fragment-timestamp))
      (common-lisp:list
       (common-lisp:cons "DisplayFragmentTimestamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'display-fragment-number))
      (common-lisp:list
       (common-lisp:cons "DisplayFragmentNumber"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dashfragment-selector))
      (common-lisp:list
       (common-lisp:cons "DASHFragmentSelector"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'expires))
      (common-lisp:list
       (common-lisp:cons "Expires"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'max-manifest-fragment-results))
      (common-lisp:list
       (common-lisp:cons "MaxManifestFragmentResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-dashstreaming-session-urlinput))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-dashstreaming-session-urloutput common-lisp:nil
                       ((dashstreaming-session-url :initarg
                         :dashstreaming-session-url :type
                         (common-lisp:or dashstreaming-session-url
                                         common-lisp:null)
                         :accessor
                         %get-dashstreaming-session-urloutput-dashstreaming-session-url
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'get-dashstreaming-session-urloutput
                    'make-get-dashstreaming-session-urloutput))
 (common-lisp:defun make-get-dashstreaming-session-urloutput
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key dashstreaming-session-url)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-dashstreaming-session-urloutput
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-dashstreaming-session-urloutput))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-dashstreaming-session-urloutput))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dashstreaming-session-url))
      (common-lisp:list
       (common-lisp:cons "DASHStreamingSessionURL"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-dashstreaming-session-urloutput))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-hlsstreaming-session-urlinput common-lisp:nil
                       ((max-media-playlist-fragment-results :initarg
                         :max-media-playlist-fragment-results :type
                         (common-lisp:or hlsmax-results common-lisp:null)
                         :accessor
                         %get-hlsstreaming-session-urlinput-max-media-playlist-fragment-results
                         :initform common-lisp:nil)
                        (expires :initarg :expires :type
                         (common-lisp:or expires common-lisp:null) :accessor
                         %get-hlsstreaming-session-urlinput-expires :initform
                         common-lisp:nil)
                        (display-fragment-timestamp :initarg
                         :display-fragment-timestamp :type
                         (common-lisp:or hlsdisplay-fragment-timestamp
                                         common-lisp:null)
                         :accessor
                         %get-hlsstreaming-session-urlinput-display-fragment-timestamp
                         :initform common-lisp:nil)
                        (discontinuity-mode :initarg :discontinuity-mode :type
                         (common-lisp:or hlsdiscontinuity-mode
                                         common-lisp:null)
                         :accessor
                         %get-hlsstreaming-session-urlinput-discontinuity-mode
                         :initform common-lisp:nil)
                        (container-format :initarg :container-format :type
                         (common-lisp:or container-format common-lisp:null)
                         :accessor
                         %get-hlsstreaming-session-urlinput-container-format
                         :initform common-lisp:nil)
                        (hlsfragment-selector :initarg :hlsfragment-selector
                         :type
                         (common-lisp:or hlsfragment-selector common-lisp:null)
                         :accessor
                         %get-hlsstreaming-session-urlinput-hlsfragment-selector
                         :initform common-lisp:nil)
                        (playback-mode :initarg :playback-mode :type
                         (common-lisp:or hlsplayback-mode common-lisp:null)
                         :accessor
                         %get-hlsstreaming-session-urlinput-playback-mode
                         :initform common-lisp:nil)
                        (stream-arn :initarg :stream-arn :type
                         (common-lisp:or resource-arn common-lisp:null)
                         :accessor
                         %get-hlsstreaming-session-urlinput-stream-arn
                         :initform common-lisp:nil)
                        (stream-name :initarg :stream-name :type
                         (common-lisp:or stream-name common-lisp:null)
                         :accessor
                         %get-hlsstreaming-session-urlinput-stream-name
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'get-hlsstreaming-session-urlinput
                    'make-get-hlsstreaming-session-urlinput))
 (common-lisp:defun make-get-hlsstreaming-session-urlinput
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key max-media-playlist-fragment-results
                     expires display-fragment-timestamp discontinuity-mode
                     container-format hlsfragment-selector playback-mode
                     stream-arn stream-name)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-hlsstreaming-session-urlinput
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-hlsstreaming-session-urlinput))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-hlsstreaming-session-urlinput))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stream-name))
      (common-lisp:list
       (common-lisp:cons "StreamName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stream-arn))
      (common-lisp:list
       (common-lisp:cons "StreamARN"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'playback-mode))
      (common-lisp:list
       (common-lisp:cons "PlaybackMode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'hlsfragment-selector))
      (common-lisp:list
       (common-lisp:cons "HLSFragmentSelector"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'container-format))
      (common-lisp:list
       (common-lisp:cons "ContainerFormat"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'discontinuity-mode))
      (common-lisp:list
       (common-lisp:cons "DiscontinuityMode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'display-fragment-timestamp))
      (common-lisp:list
       (common-lisp:cons "DisplayFragmentTimestamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'expires))
      (common-lisp:list
       (common-lisp:cons "Expires"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'max-media-playlist-fragment-results))
      (common-lisp:list
       (common-lisp:cons "MaxMediaPlaylistFragmentResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-hlsstreaming-session-urlinput))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-hlsstreaming-session-urloutput common-lisp:nil
                       ((hlsstreaming-session-url :initarg
                         :hlsstreaming-session-url :type
                         (common-lisp:or hlsstreaming-session-url
                                         common-lisp:null)
                         :accessor
                         %get-hlsstreaming-session-urloutput-hlsstreaming-session-url
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'get-hlsstreaming-session-urloutput
                    'make-get-hlsstreaming-session-urloutput))
 (common-lisp:defun make-get-hlsstreaming-session-urloutput
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key hlsstreaming-session-url)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-hlsstreaming-session-urloutput
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-hlsstreaming-session-urloutput))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-hlsstreaming-session-urloutput))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'hlsstreaming-session-url))
      (common-lisp:list
       (common-lisp:cons "HLSStreamingSessionURL"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-hlsstreaming-session-urloutput))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-images-input common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %get-images-input-next-token :initform
                         common-lisp:nil)
                        (max-results :initarg :max-results :type
                         (common-lisp:or get-images-max-results
                                         common-lisp:null)
                         :accessor %get-images-input-max-results :initform
                         common-lisp:nil)
                        (height-pixels :initarg :height-pixels :type
                         (common-lisp:or height-pixels common-lisp:null)
                         :accessor %get-images-input-height-pixels :initform
                         common-lisp:nil)
                        (width-pixels :initarg :width-pixels :type
                         (common-lisp:or width-pixels common-lisp:null)
                         :accessor %get-images-input-width-pixels :initform
                         common-lisp:nil)
                        (format-config :initarg :format-config :type
                         (common-lisp:or format-config common-lisp:null)
                         :accessor %get-images-input-format-config :initform
                         common-lisp:nil)
                        (format :initarg :format :type
                         (common-lisp:or format common-lisp:null) :accessor
                         %get-images-input-format :initform
                         (common-lisp:error ":format is required"))
                        (sampling-interval :initarg :sampling-interval :type
                         (common-lisp:or sampling-interval common-lisp:null)
                         :accessor %get-images-input-sampling-interval
                         :initform
                         (common-lisp:error ":sampling-interval is required"))
                        (end-timestamp :initarg :end-timestamp :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %get-images-input-end-timestamp :initform
                         (common-lisp:error ":end-timestamp is required"))
                        (start-timestamp :initarg :start-timestamp :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %get-images-input-start-timestamp :initform
                         (common-lisp:error ":start-timestamp is required"))
                        (image-selector-type :initarg :image-selector-type
                         :type
                         (common-lisp:or image-selector-type common-lisp:null)
                         :accessor %get-images-input-image-selector-type
                         :initform
                         (common-lisp:error
                          ":image-selector-type is required"))
                        (stream-arn :initarg :stream-arn :type
                         (common-lisp:or resource-arn common-lisp:null)
                         :accessor %get-images-input-stream-arn :initform
                         common-lisp:nil)
                        (stream-name :initarg :stream-name :type
                         (common-lisp:or stream-name common-lisp:null)
                         :accessor %get-images-input-stream-name :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'get-images-input 'make-get-images-input))
 (common-lisp:defun make-get-images-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token max-results height-pixels
                     width-pixels format-config format sampling-interval
                     end-timestamp start-timestamp image-selector-type
                     stream-arn stream-name)
   (common-lisp:apply #'common-lisp:make-instance 'get-images-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-images-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-images-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stream-name))
      (common-lisp:list
       (common-lisp:cons "StreamName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stream-arn))
      (common-lisp:list
       (common-lisp:cons "StreamARN"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'image-selector-type))
      (common-lisp:list
       (common-lisp:cons "ImageSelectorType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start-timestamp))
      (common-lisp:list
       (common-lisp:cons "StartTimestamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'end-timestamp))
      (common-lisp:list
       (common-lisp:cons "EndTimestamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sampling-interval))
      (common-lisp:list
       (common-lisp:cons "SamplingInterval"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'format))
      (common-lisp:list
       (common-lisp:cons "Format"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'format-config))
      (common-lisp:list
       (common-lisp:cons "FormatConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'width-pixels))
      (common-lisp:list
       (common-lisp:cons "WidthPixels"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'height-pixels))
      (common-lisp:list
       (common-lisp:cons "HeightPixels"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-images-input))
   common-lisp:nil))
(common-lisp:deftype get-images-max-results () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass get-images-output common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %get-images-output-next-token :initform
                         common-lisp:nil)
                        (images :initarg :images :type
                         (common-lisp:or images common-lisp:null) :accessor
                         %get-images-output-images :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'get-images-output 'make-get-images-output))
 (common-lisp:defun make-get-images-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token images)
   (common-lisp:apply #'common-lisp:make-instance 'get-images-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-images-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-images-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'images))
      (common-lisp:list
       (common-lisp:cons "Images"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-images-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-media-for-fragment-list-input common-lisp:nil
                       ((fragments :initarg :fragments :type
                         (common-lisp:or fragment-number-list common-lisp:null)
                         :accessor %get-media-for-fragment-list-input-fragments
                         :initform
                         (common-lisp:error ":fragments is required"))
                        (stream-arn :initarg :stream-arn :type
                         (common-lisp:or resource-arn common-lisp:null)
                         :accessor
                         %get-media-for-fragment-list-input-stream-arn
                         :initform common-lisp:nil)
                        (stream-name :initarg :stream-name :type
                         (common-lisp:or stream-name common-lisp:null)
                         :accessor
                         %get-media-for-fragment-list-input-stream-name
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'get-media-for-fragment-list-input
                    'make-get-media-for-fragment-list-input))
 (common-lisp:defun make-get-media-for-fragment-list-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key fragments stream-arn stream-name)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-media-for-fragment-list-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-media-for-fragment-list-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-media-for-fragment-list-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stream-name))
      (common-lisp:list
       (common-lisp:cons "StreamName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stream-arn))
      (common-lisp:list
       (common-lisp:cons "StreamARN"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'fragments))
      (common-lisp:list
       (common-lisp:cons "Fragments"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-media-for-fragment-list-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-media-for-fragment-list-output common-lisp:nil
                       ((payload :initarg :payload :type
                         (common-lisp:or payload common-lisp:null) :accessor
                         %get-media-for-fragment-list-output-payload :initform
                         common-lisp:nil)
                        (content-type :initarg :content-type :type
                         (common-lisp:or content-type common-lisp:null)
                         :accessor
                         %get-media-for-fragment-list-output-content-type
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'get-media-for-fragment-list-output
                    'make-get-media-for-fragment-list-output))
 (common-lisp:defun make-get-media-for-fragment-list-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key payload content-type)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-media-for-fragment-list-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-media-for-fragment-list-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'content-type))
      (common-lisp:cons "Content-Type" aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-media-for-fragment-list-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'payload))
      (common-lisp:list
       (common-lisp:cons "Payload"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-media-for-fragment-list-output))
   (com.inuoe.jzon:stringify
    (common-lisp:slot-value aws-sdk/generator/shape::input 'payload))))
(common-lisp:deftype hlsdiscontinuity-mode () 'common-lisp:string)
(common-lisp:deftype hlsdisplay-fragment-timestamp () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass hlsfragment-selector common-lisp:nil
                       ((timestamp-range :initarg :timestamp-range :type
                         (common-lisp:or hlstimestamp-range common-lisp:null)
                         :accessor %hlsfragment-selector-timestamp-range
                         :initform common-lisp:nil)
                        (fragment-selector-type :initarg
                         :fragment-selector-type :type
                         (common-lisp:or hlsfragment-selector-type
                                         common-lisp:null)
                         :accessor %hlsfragment-selector-fragment-selector-type
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'hlsfragment-selector 'make-hlsfragment-selector))
 (common-lisp:defun make-hlsfragment-selector
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key timestamp-range fragment-selector-type)
   (common-lisp:apply #'common-lisp:make-instance 'hlsfragment-selector
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input hlsfragment-selector))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input hlsfragment-selector))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'fragment-selector-type))
      (common-lisp:list
       (common-lisp:cons "FragmentSelectorType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'timestamp-range))
      (common-lisp:list
       (common-lisp:cons "TimestampRange"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input hlsfragment-selector))
   common-lisp:nil))
(common-lisp:deftype hlsfragment-selector-type () 'common-lisp:string)
(common-lisp:deftype hlsmax-results () 'common-lisp:integer)
(common-lisp:deftype hlsplayback-mode () 'common-lisp:string)
(common-lisp:deftype hlsstreaming-session-url () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass hlstimestamp-range common-lisp:nil
                       ((end-timestamp :initarg :end-timestamp :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %hlstimestamp-range-end-timestamp :initform
                         common-lisp:nil)
                        (start-timestamp :initarg :start-timestamp :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %hlstimestamp-range-start-timestamp :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'hlstimestamp-range 'make-hlstimestamp-range))
 (common-lisp:defun make-hlstimestamp-range
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key end-timestamp start-timestamp)
   (common-lisp:apply #'common-lisp:make-instance 'hlstimestamp-range
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input hlstimestamp-range))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input hlstimestamp-range))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start-timestamp))
      (common-lisp:list
       (common-lisp:cons "StartTimestamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'end-timestamp))
      (common-lisp:list
       (common-lisp:cons "EndTimestamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input hlstimestamp-range))
   common-lisp:nil))
(common-lisp:deftype height-pixels () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass image common-lisp:nil
                       ((image-content :initarg :image-content :type
                         (common-lisp:or image-content common-lisp:null)
                         :accessor %image-image-content :initform
                         common-lisp:nil)
                        (error :initarg :error :type
                         (common-lisp:or image-error common-lisp:null)
                         :accessor %image-error :initform common-lisp:nil)
                        (time-stamp :initarg :time-stamp :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %image-time-stamp :initform common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'image 'make-image))
 (common-lisp:defun make-image
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key image-content error time-stamp)
   (common-lisp:apply #'common-lisp:make-instance 'image
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input image))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input image))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'time-stamp))
      (common-lisp:list
       (common-lisp:cons "TimeStamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error))
      (common-lisp:list
       (common-lisp:cons "Error"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'image-content))
      (common-lisp:list
       (common-lisp:cons "ImageContent"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input image))
   common-lisp:nil))
(common-lisp:deftype image-content () 'common-lisp:string)
(common-lisp:deftype image-error () 'common-lisp:string)
(common-lisp:deftype image-selector-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype images () '(trivial-types:proper-list image))
 (common-lisp:defun |make-images|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list image))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition invalid-argument-exception
     (kinesis-video-archived-media-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       invalid-argument-exception-message)))
 (common-lisp:export
  (common-lisp:list 'invalid-argument-exception
                    'invalid-argument-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition invalid-codec-private-data-exception
     (kinesis-video-archived-media-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       invalid-codec-private-data-exception-message)))
 (common-lisp:export
  (common-lisp:list 'invalid-codec-private-data-exception
                    'invalid-codec-private-data-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition invalid-media-frame-exception
     (kinesis-video-archived-media-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       invalid-media-frame-exception-message)))
 (common-lisp:export
  (common-lisp:list 'invalid-media-frame-exception
                    'invalid-media-frame-exception-message)))
(common-lisp:progn
 (common-lisp:defclass list-fragments-input common-lisp:nil
                       ((fragment-selector :initarg :fragment-selector :type
                         (common-lisp:or fragment-selector common-lisp:null)
                         :accessor %list-fragments-input-fragment-selector
                         :initform common-lisp:nil)
                        (next-token :initarg :next-token :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %list-fragments-input-next-token :initform
                         common-lisp:nil)
                        (max-results :initarg :max-results :type
                         (common-lisp:or list-fragments-max-results
                                         common-lisp:null)
                         :accessor %list-fragments-input-max-results :initform
                         common-lisp:nil)
                        (stream-arn :initarg :stream-arn :type
                         (common-lisp:or resource-arn common-lisp:null)
                         :accessor %list-fragments-input-stream-arn :initform
                         common-lisp:nil)
                        (stream-name :initarg :stream-name :type
                         (common-lisp:or stream-name common-lisp:null)
                         :accessor %list-fragments-input-stream-name :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-fragments-input 'make-list-fragments-input))
 (common-lisp:defun make-list-fragments-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key fragment-selector next-token max-results
                     stream-arn stream-name)
   (common-lisp:apply #'common-lisp:make-instance 'list-fragments-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-fragments-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-fragments-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stream-name))
      (common-lisp:list
       (common-lisp:cons "StreamName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stream-arn))
      (common-lisp:list
       (common-lisp:cons "StreamARN"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'fragment-selector))
      (common-lisp:list
       (common-lisp:cons "FragmentSelector"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-fragments-input))
   common-lisp:nil))
(common-lisp:deftype list-fragments-max-results () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass list-fragments-output common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %list-fragments-output-next-token :initform
                         common-lisp:nil)
                        (fragments :initarg :fragments :type
                         (common-lisp:or fragment-list common-lisp:null)
                         :accessor %list-fragments-output-fragments :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-fragments-output 'make-list-fragments-output))
 (common-lisp:defun make-list-fragments-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token fragments)
   (common-lisp:apply #'common-lisp:make-instance 'list-fragments-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-fragments-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-fragments-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'fragments))
      (common-lisp:list
       (common-lisp:cons "Fragments"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-fragments-output))
   common-lisp:nil))
(common-lisp:deftype long () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:define-condition missing-codec-private-data-exception
     (kinesis-video-archived-media-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       missing-codec-private-data-exception-message)))
 (common-lisp:export
  (common-lisp:list 'missing-codec-private-data-exception
                    'missing-codec-private-data-exception-message)))
(common-lisp:deftype next-token () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition no-data-retention-exception
     (kinesis-video-archived-media-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       no-data-retention-exception-message)))
 (common-lisp:export
  (common-lisp:list 'no-data-retention-exception
                    'no-data-retention-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition not-authorized-exception
     (kinesis-video-archived-media-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       not-authorized-exception-message)))
 (common-lisp:export
  (common-lisp:list 'not-authorized-exception
                    'not-authorized-exception-message)))
(common-lisp:deftype payload ()
  '(common-lisp:simple-array (common-lisp:unsigned-byte 8) (common-lisp:*)))
(common-lisp:deftype resource-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition resource-not-found-exception
     (kinesis-video-archived-media-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       resource-not-found-exception-message)))
 (common-lisp:export
  (common-lisp:list 'resource-not-found-exception
                    'resource-not-found-exception-message)))
(common-lisp:deftype sampling-interval () 'common-lisp:integer)
(common-lisp:deftype stream-name () 'common-lisp:string)
(common-lisp:deftype timestamp () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass timestamp-range common-lisp:nil
                       ((end-timestamp :initarg :end-timestamp :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %timestamp-range-end-timestamp :initform
                         (common-lisp:error ":end-timestamp is required"))
                        (start-timestamp :initarg :start-timestamp :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %timestamp-range-start-timestamp :initform
                         (common-lisp:error ":start-timestamp is required"))))
 (common-lisp:export (common-lisp:list 'timestamp-range 'make-timestamp-range))
 (common-lisp:defun make-timestamp-range
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key end-timestamp start-timestamp)
   (common-lisp:apply #'common-lisp:make-instance 'timestamp-range
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input timestamp-range))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input timestamp-range))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start-timestamp))
      (common-lisp:list
       (common-lisp:cons "StartTimestamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'end-timestamp))
      (common-lisp:list
       (common-lisp:cons "EndTimestamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input timestamp-range))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition unsupported-stream-media-type-exception
     (kinesis-video-archived-media-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       unsupported-stream-media-type-exception-message)))
 (common-lisp:export
  (common-lisp:list 'unsupported-stream-media-type-exception
                    'unsupported-stream-media-type-exception-message)))
(common-lisp:deftype width-pixels () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defun get-clip
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key stream-name stream-arn
                     clip-fragment-selector)
   (common-lisp:declare
    (common-lisp:ignorable stream-name stream-arn clip-fragment-selector))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-clip-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'kinesis-video-archived-media-request
        aws-sdk/generator/operation::input "POST" :rest-json "/getClip"
        "GetClip" "2017-09-30")
       :want-stream common-lisp:t)
      "blob" common-lisp:nil *error-map*)))
 (common-lisp:export 'get-clip))
(common-lisp:progn
 (common-lisp:defun get-dashstreaming-session-url
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key stream-name stream-arn playback-mode
                     display-fragment-timestamp display-fragment-number
                     dashfragment-selector expires
                     max-manifest-fragment-results)
   (common-lisp:declare
    (common-lisp:ignorable stream-name stream-arn playback-mode
     display-fragment-timestamp display-fragment-number dashfragment-selector
     expires max-manifest-fragment-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-get-dashstreaming-session-urlinput
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'kinesis-video-archived-media-request
        aws-sdk/generator/operation::input "POST" :rest-json
        "/getDASHStreamingSessionURL" "GetDASHStreamingSessionURL"
        "2017-09-30"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-dashstreaming-session-url))
(common-lisp:progn
 (common-lisp:defun get-hlsstreaming-session-url
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key stream-name stream-arn playback-mode
                     hlsfragment-selector container-format discontinuity-mode
                     display-fragment-timestamp expires
                     max-media-playlist-fragment-results)
   (common-lisp:declare
    (common-lisp:ignorable stream-name stream-arn playback-mode
     hlsfragment-selector container-format discontinuity-mode
     display-fragment-timestamp expires max-media-playlist-fragment-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-get-hlsstreaming-session-urlinput
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'kinesis-video-archived-media-request
        aws-sdk/generator/operation::input "POST" :rest-json
        "/getHLSStreamingSessionURL" "GetHLSStreamingSessionURL" "2017-09-30"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-hlsstreaming-session-url))
(common-lisp:progn
 (common-lisp:defun get-images
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key stream-name stream-arn
                     image-selector-type start-timestamp end-timestamp
                     sampling-interval format format-config width-pixels
                     height-pixels max-results next-token)
   (common-lisp:declare
    (common-lisp:ignorable stream-name stream-arn image-selector-type
     start-timestamp end-timestamp sampling-interval format format-config
     width-pixels height-pixels max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-images-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'kinesis-video-archived-media-request
        aws-sdk/generator/operation::input "POST" :rest-json "/getImages"
        "GetImages" "2017-09-30"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-images))
(common-lisp:progn
 (common-lisp:defun get-media-for-fragment-list
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key stream-name stream-arn fragments)
   (common-lisp:declare
    (common-lisp:ignorable stream-name stream-arn fragments))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-get-media-for-fragment-list-input
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'kinesis-video-archived-media-request
        aws-sdk/generator/operation::input "POST" :rest-json
        "/getMediaForFragmentList" "GetMediaForFragmentList" "2017-09-30")
       :want-stream common-lisp:t)
      "blob" common-lisp:nil *error-map*)))
 (common-lisp:export 'get-media-for-fragment-list))
(common-lisp:progn
 (common-lisp:defun list-fragments
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key stream-name stream-arn max-results
                     next-token fragment-selector)
   (common-lisp:declare
    (common-lisp:ignorable stream-name stream-arn max-results next-token
     fragment-selector))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-fragments-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'kinesis-video-archived-media-request
        aws-sdk/generator/operation::input "POST" :rest-json "/listFragments"
        "ListFragments" "2017-09-30"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-fragments))
