;; DO NOT EDIT: File is generated by AWS-SDK/GENERATOR.

(common-lisp:defpackage #:aws-sdk/services/lex-models/api
  (:use)
  (:nicknames #:aws/lex-models)
  (:import-from #:aws-sdk/generator/shape)
  (:import-from #:aws-sdk/generator/operation)
  (:import-from #:aws-sdk/api)
  (:import-from #:aws-sdk/request)
  (:import-from #:aws-sdk/error))
(common-lisp:in-package #:aws-sdk/services/lex-models/api)
(common-lisp:progn
 (common-lisp:defclass lex-models-request (aws-sdk/request:request)
                       common-lisp:nil
                       (:default-initargs :service "lex-models" :protocol
                        :rest-json))
 (common-lisp:export 'lex-models-request))
(common-lisp:progn
 (common-lisp:define-condition lex-models-error
     (aws-sdk/error:aws-error)
     common-lisp:nil)
 (common-lisp:export 'lex-models-error))
(common-lisp:defvar *error-map*
  '(("AccessDeniedException" . access-denied-exception)
    ("BadRequestException" . bad-request-exception)
    ("ConflictException" . conflict-exception)
    ("InternalFailureException" . internal-failure-exception)
    ("LimitExceededException" . limit-exceeded-exception)
    ("NotFoundException" . not-found-exception)
    ("PreconditionFailedException" . precondition-failed-exception)
    ("ResourceInUseException" . resource-in-use-exception)))
(common-lisp:progn
 (common-lisp:define-condition access-denied-exception
     (lex-models-error)
     ((message :initarg :|message| :initform common-lisp:nil :reader
       access-denied-exception-message)))
 (common-lisp:export
  (common-lisp:list 'access-denied-exception 'access-denied-exception-message)))
(common-lisp:deftype alias-name () 'common-lisp:string)
(common-lisp:deftype alias-name-or-list-all () 'common-lisp:string)
(common-lisp:deftype amazon-resource-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition bad-request-exception
     (lex-models-error)
     ((message :initarg :|message| :initform common-lisp:nil :reader
       bad-request-exception-message)))
 (common-lisp:export
  (common-lisp:list 'bad-request-exception 'bad-request-exception-message)))
(common-lisp:deftype blob ()
  '(common-lisp:simple-array (common-lisp:unsigned-byte 8) (common-lisp:*)))
(common-lisp:deftype boolean () 'common-lisp:boolean)
(common-lisp:progn
 (common-lisp:defclass bot-alias-metadata common-lisp:nil
                       ((conversation-logs :initarg :|conversationLogs| :type
                         (common-lisp:or conversation-logs-response
                                         common-lisp:null)
                         :accessor %bot-alias-metadata-conversation-logs
                         :initform common-lisp:nil)
                        (checksum :initarg :|checksum| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %bot-alias-metadata-checksum :initform
                         common-lisp:nil)
                        (created-date :initarg :|createdDate| :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %bot-alias-metadata-created-date :initform
                         common-lisp:nil)
                        (last-updated-date :initarg :|lastUpdatedDate| :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %bot-alias-metadata-last-updated-date :initform
                         common-lisp:nil)
                        (bot-name :initarg :|botName| :type
                         (common-lisp:or bot-name common-lisp:null) :accessor
                         %bot-alias-metadata-bot-name :initform
                         common-lisp:nil)
                        (bot-version :initarg :|botVersion| :type
                         (common-lisp:or version common-lisp:null) :accessor
                         %bot-alias-metadata-bot-version :initform
                         common-lisp:nil)
                        (description :initarg :|description| :type
                         (common-lisp:or description common-lisp:null)
                         :accessor %bot-alias-metadata-description :initform
                         common-lisp:nil)
                        (name :initarg :|name| :type
                         (common-lisp:or alias-name common-lisp:null) :accessor
                         %bot-alias-metadata-name :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'bot-alias-metadata 'make-bot-alias-metadata))
 (common-lisp:defun make-bot-alias-metadata
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key conversation-logs checksum created-date
                     last-updated-date bot-name bot-version description name)
   (common-lisp:apply #'common-lisp:make-instance 'bot-alias-metadata
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input bot-alias-metadata))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input bot-alias-metadata))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bot-version))
      (common-lisp:list
       (common-lisp:cons "botVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bot-name))
      (common-lisp:list
       (common-lisp:cons "botName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-updated-date))
      (common-lisp:list
       (common-lisp:cons "lastUpdatedDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-date))
      (common-lisp:list
       (common-lisp:cons "createdDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'checksum))
      (common-lisp:list
       (common-lisp:cons "checksum"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'conversation-logs))
      (common-lisp:list
       (common-lisp:cons "conversationLogs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input bot-alias-metadata))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype bot-alias-metadata-list ()
   '(trivial-types:proper-list bot-alias-metadata))
 (common-lisp:defun |make-bot-alias-metadata-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list bot-alias-metadata))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass bot-channel-association common-lisp:nil
                       ((failure-reason :initarg :|failureReason| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %bot-channel-association-failure-reason :initform
                         common-lisp:nil)
                        (status :initarg :|status| :type
                         (common-lisp:or channel-status common-lisp:null)
                         :accessor %bot-channel-association-status :initform
                         common-lisp:nil)
                        (bot-configuration :initarg :|botConfiguration| :type
                         (common-lisp:or channel-configuration-map
                                         common-lisp:null)
                         :accessor %bot-channel-association-bot-configuration
                         :initform common-lisp:nil)
                        (type :initarg :|type| :type
                         (common-lisp:or channel-type common-lisp:null)
                         :accessor %bot-channel-association-type :initform
                         common-lisp:nil)
                        (created-date :initarg :|createdDate| :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %bot-channel-association-created-date :initform
                         common-lisp:nil)
                        (bot-name :initarg :|botName| :type
                         (common-lisp:or bot-name common-lisp:null) :accessor
                         %bot-channel-association-bot-name :initform
                         common-lisp:nil)
                        (bot-alias :initarg :|botAlias| :type
                         (common-lisp:or alias-name common-lisp:null) :accessor
                         %bot-channel-association-bot-alias :initform
                         common-lisp:nil)
                        (description :initarg :|description| :type
                         (common-lisp:or description common-lisp:null)
                         :accessor %bot-channel-association-description
                         :initform common-lisp:nil)
                        (name :initarg :|name| :type
                         (common-lisp:or bot-channel-name common-lisp:null)
                         :accessor %bot-channel-association-name :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'bot-channel-association 'make-bot-channel-association))
 (common-lisp:defun make-bot-channel-association
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key failure-reason status bot-configuration
                     type created-date bot-name bot-alias description name)
   (common-lisp:apply #'common-lisp:make-instance 'bot-channel-association
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          bot-channel-association))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          bot-channel-association))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bot-alias))
      (common-lisp:list
       (common-lisp:cons "botAlias"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bot-name))
      (common-lisp:list
       (common-lisp:cons "botName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-date))
      (common-lisp:list
       (common-lisp:cons "createdDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bot-configuration))
      (common-lisp:list
       (common-lisp:cons "botConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'failure-reason))
      (common-lisp:list
       (common-lisp:cons "failureReason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          bot-channel-association))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype bot-channel-association-list ()
   '(trivial-types:proper-list bot-channel-association))
 (common-lisp:defun |make-bot-channel-association-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list bot-channel-association))
   aws-sdk/generator/shape::members))
(common-lisp:deftype bot-channel-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass bot-metadata common-lisp:nil
                       ((version :initarg :|version| :type
                         (common-lisp:or version common-lisp:null) :accessor
                         %bot-metadata-version :initform common-lisp:nil)
                        (created-date :initarg :|createdDate| :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %bot-metadata-created-date :initform common-lisp:nil)
                        (last-updated-date :initarg :|lastUpdatedDate| :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %bot-metadata-last-updated-date :initform
                         common-lisp:nil)
                        (status :initarg :|status| :type
                         (common-lisp:or status common-lisp:null) :accessor
                         %bot-metadata-status :initform common-lisp:nil)
                        (description :initarg :|description| :type
                         (common-lisp:or description common-lisp:null)
                         :accessor %bot-metadata-description :initform
                         common-lisp:nil)
                        (name :initarg :|name| :type
                         (common-lisp:or bot-name common-lisp:null) :accessor
                         %bot-metadata-name :initform common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'bot-metadata 'make-bot-metadata))
 (common-lisp:defun make-bot-metadata
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key version created-date last-updated-date
                     status description name)
   (common-lisp:apply #'common-lisp:make-instance 'bot-metadata
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input bot-metadata))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input bot-metadata))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-updated-date))
      (common-lisp:list
       (common-lisp:cons "lastUpdatedDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-date))
      (common-lisp:list
       (common-lisp:cons "createdDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version))
      (common-lisp:list
       (common-lisp:cons "version"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input bot-metadata))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype bot-metadata-list ()
   '(trivial-types:proper-list bot-metadata))
 (common-lisp:defun |make-bot-metadata-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list bot-metadata))
   aws-sdk/generator/shape::members))
(common-lisp:deftype bot-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype bot-versions () '(trivial-types:proper-list version))
 (common-lisp:defun |make-bot-versions|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list version))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass builtin-intent-metadata common-lisp:nil
                       ((supported-locales :initarg :|supportedLocales| :type
                         (common-lisp:or locale-list common-lisp:null)
                         :accessor %builtin-intent-metadata-supported-locales
                         :initform common-lisp:nil)
                        (signature :initarg :|signature| :type
                         (common-lisp:or builtin-intent-signature
                                         common-lisp:null)
                         :accessor %builtin-intent-metadata-signature :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'builtin-intent-metadata 'make-builtin-intent-metadata))
 (common-lisp:defun make-builtin-intent-metadata
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key supported-locales signature)
   (common-lisp:apply #'common-lisp:make-instance 'builtin-intent-metadata
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          builtin-intent-metadata))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          builtin-intent-metadata))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'signature))
      (common-lisp:list
       (common-lisp:cons "signature"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'supported-locales))
      (common-lisp:list
       (common-lisp:cons "supportedLocales"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          builtin-intent-metadata))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype builtin-intent-metadata-list ()
   '(trivial-types:proper-list builtin-intent-metadata))
 (common-lisp:defun |make-builtin-intent-metadata-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list builtin-intent-metadata))
   aws-sdk/generator/shape::members))
(common-lisp:deftype builtin-intent-signature () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass builtin-intent-slot common-lisp:nil
                       ((name :initarg :|name| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %builtin-intent-slot-name :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'builtin-intent-slot 'make-builtin-intent-slot))
 (common-lisp:defun make-builtin-intent-slot
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key name)
   (common-lisp:apply #'common-lisp:make-instance 'builtin-intent-slot
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input builtin-intent-slot))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input builtin-intent-slot))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input builtin-intent-slot))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype builtin-intent-slot-list ()
   '(trivial-types:proper-list builtin-intent-slot))
 (common-lisp:defun |make-builtin-intent-slot-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list builtin-intent-slot))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass builtin-slot-type-metadata common-lisp:nil
                       ((supported-locales :initarg :|supportedLocales| :type
                         (common-lisp:or locale-list common-lisp:null)
                         :accessor
                         %builtin-slot-type-metadata-supported-locales
                         :initform common-lisp:nil)
                        (signature :initarg :|signature| :type
                         (common-lisp:or builtin-slot-type-signature
                                         common-lisp:null)
                         :accessor %builtin-slot-type-metadata-signature
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'builtin-slot-type-metadata
                    'make-builtin-slot-type-metadata))
 (common-lisp:defun make-builtin-slot-type-metadata
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key supported-locales signature)
   (common-lisp:apply #'common-lisp:make-instance 'builtin-slot-type-metadata
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          builtin-slot-type-metadata))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          builtin-slot-type-metadata))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'signature))
      (common-lisp:list
       (common-lisp:cons "signature"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'supported-locales))
      (common-lisp:list
       (common-lisp:cons "supportedLocales"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          builtin-slot-type-metadata))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype builtin-slot-type-metadata-list ()
   '(trivial-types:proper-list builtin-slot-type-metadata))
 (common-lisp:defun |make-builtin-slot-type-metadata-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            builtin-slot-type-metadata))
   aws-sdk/generator/shape::members))
(common-lisp:deftype builtin-slot-type-signature () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype channel-configuration-map () 'common-lisp:hash-table)
 (common-lisp:defun |make-channel-configuration-map|
                    (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:deftype channel-status () 'common-lisp:string)
(common-lisp:deftype channel-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass code-hook common-lisp:nil
                       ((message-version :initarg :|messageVersion| :type
                         (common-lisp:or message-version common-lisp:null)
                         :accessor %code-hook-message-version :initform
                         (common-lisp:error ":messageversion is required"))
                        (uri :initarg :|uri| :type
                         (common-lisp:or lambda-arn common-lisp:null) :accessor
                         %code-hook-uri :initform
                         (common-lisp:error ":uri is required"))))
 (common-lisp:export (common-lisp:list 'code-hook 'make-code-hook))
 (common-lisp:defun make-code-hook
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key message-version uri)
   (common-lisp:apply #'common-lisp:make-instance 'code-hook
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input code-hook))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input code-hook))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'uri))
      (common-lisp:list
       (common-lisp:cons "uri"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message-version))
      (common-lisp:list
       (common-lisp:cons "messageVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input code-hook))
   common-lisp:nil))
(common-lisp:deftype confidence-threshold () 'common-lisp:double-float)
(common-lisp:progn
 (common-lisp:define-condition conflict-exception
     (lex-models-error)
     ((message :initarg :|message| :initform common-lisp:nil :reader
       conflict-exception-message)))
 (common-lisp:export
  (common-lisp:list 'conflict-exception 'conflict-exception-message)))
(common-lisp:deftype content-string () 'common-lisp:string)
(common-lisp:deftype content-type () 'common-lisp:string)
(common-lisp:deftype context-time-to-live-in-seconds () 'common-lisp:integer)
(common-lisp:deftype context-turns-to-live () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass conversation-logs-request common-lisp:nil
                       ((iam-role-arn :initarg :|iamRoleArn| :type
                         (common-lisp:or iam-role-arn common-lisp:null)
                         :accessor %conversation-logs-request-iam-role-arn
                         :initform
                         (common-lisp:error ":iamrolearn is required"))
                        (log-settings :initarg :|logSettings| :type
                         (common-lisp:or log-settings-request-list
                                         common-lisp:null)
                         :accessor %conversation-logs-request-log-settings
                         :initform
                         (common-lisp:error ":logsettings is required"))))
 (common-lisp:export
  (common-lisp:list 'conversation-logs-request
                    'make-conversation-logs-request))
 (common-lisp:defun make-conversation-logs-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key iam-role-arn log-settings)
   (common-lisp:apply #'common-lisp:make-instance 'conversation-logs-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          conversation-logs-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          conversation-logs-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'log-settings))
      (common-lisp:list
       (common-lisp:cons "logSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'iam-role-arn))
      (common-lisp:list
       (common-lisp:cons "iamRoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          conversation-logs-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass conversation-logs-response common-lisp:nil
                       ((iam-role-arn :initarg :|iamRoleArn| :type
                         (common-lisp:or iam-role-arn common-lisp:null)
                         :accessor %conversation-logs-response-iam-role-arn
                         :initform common-lisp:nil)
                        (log-settings :initarg :|logSettings| :type
                         (common-lisp:or log-settings-response-list
                                         common-lisp:null)
                         :accessor %conversation-logs-response-log-settings
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'conversation-logs-response
                    'make-conversation-logs-response))
 (common-lisp:defun make-conversation-logs-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key iam-role-arn log-settings)
   (common-lisp:apply #'common-lisp:make-instance 'conversation-logs-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          conversation-logs-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          conversation-logs-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'log-settings))
      (common-lisp:list
       (common-lisp:cons "logSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'iam-role-arn))
      (common-lisp:list
       (common-lisp:cons "iamRoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          conversation-logs-response))
   common-lisp:nil))
(common-lisp:deftype count () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass create-bot-version-request common-lisp:nil
                       ((checksum :initarg :|checksum| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %create-bot-version-request-checksum :initform
                         common-lisp:nil)
                        (name :initarg :|name| :type
                         (common-lisp:or bot-name common-lisp:null) :accessor
                         %create-bot-version-request-name :initform
                         (common-lisp:error ":name is required"))))
 (common-lisp:export
  (common-lisp:list 'create-bot-version-request
                    'make-create-bot-version-request))
 (common-lisp:defun make-create-bot-version-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key checksum name)
   (common-lisp:apply #'common-lisp:make-instance 'create-bot-version-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-bot-version-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-bot-version-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'checksum))
      (common-lisp:list
       (common-lisp:cons "checksum"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-bot-version-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-bot-version-response common-lisp:nil
                       ((detect-sentiment :initarg :|detectSentiment| :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         %create-bot-version-response-detect-sentiment
                         :initform common-lisp:nil)
                        (enable-model-improvements :initarg
                         :|enableModelImprovements| :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         %create-bot-version-response-enable-model-improvements
                         :initform common-lisp:nil)
                        (child-directed :initarg :|childDirected| :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         %create-bot-version-response-child-directed :initform
                         common-lisp:nil)
                        (locale :initarg :|locale| :type
                         (common-lisp:or locale common-lisp:null) :accessor
                         %create-bot-version-response-locale :initform
                         common-lisp:nil)
                        (version :initarg :|version| :type
                         (common-lisp:or version common-lisp:null) :accessor
                         %create-bot-version-response-version :initform
                         common-lisp:nil)
                        (checksum :initarg :|checksum| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %create-bot-version-response-checksum :initform
                         common-lisp:nil)
                        (voice-id :initarg :|voiceId| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %create-bot-version-response-voice-id :initform
                         common-lisp:nil)
                        (idle-session-ttlin-seconds :initarg
                         :|idleSessionTTLInSeconds| :type
                         (common-lisp:or session-ttl common-lisp:null)
                         :accessor
                         %create-bot-version-response-idle-session-ttlin-seconds
                         :initform common-lisp:nil)
                        (created-date :initarg :|createdDate| :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %create-bot-version-response-created-date :initform
                         common-lisp:nil)
                        (last-updated-date :initarg :|lastUpdatedDate| :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %create-bot-version-response-last-updated-date
                         :initform common-lisp:nil)
                        (failure-reason :initarg :|failureReason| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %create-bot-version-response-failure-reason :initform
                         common-lisp:nil)
                        (status :initarg :|status| :type
                         (common-lisp:or status common-lisp:null) :accessor
                         %create-bot-version-response-status :initform
                         common-lisp:nil)
                        (abort-statement :initarg :|abortStatement| :type
                         (common-lisp:or statement common-lisp:null) :accessor
                         %create-bot-version-response-abort-statement :initform
                         common-lisp:nil)
                        (clarification-prompt :initarg :|clarificationPrompt|
                         :type (common-lisp:or prompt common-lisp:null)
                         :accessor
                         %create-bot-version-response-clarification-prompt
                         :initform common-lisp:nil)
                        (intents :initarg :|intents| :type
                         (common-lisp:or intent-list common-lisp:null)
                         :accessor %create-bot-version-response-intents
                         :initform common-lisp:nil)
                        (description :initarg :|description| :type
                         (common-lisp:or description common-lisp:null)
                         :accessor %create-bot-version-response-description
                         :initform common-lisp:nil)
                        (name :initarg :|name| :type
                         (common-lisp:or bot-name common-lisp:null) :accessor
                         %create-bot-version-response-name :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'create-bot-version-response
                    'make-create-bot-version-response))
 (common-lisp:defun make-create-bot-version-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key detect-sentiment
                     enable-model-improvements child-directed locale version
                     checksum voice-id idle-session-ttlin-seconds created-date
                     last-updated-date failure-reason status abort-statement
                     clarification-prompt intents description name)
   (common-lisp:apply #'common-lisp:make-instance 'create-bot-version-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-bot-version-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-bot-version-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'intents))
      (common-lisp:list
       (common-lisp:cons "intents"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'clarification-prompt))
      (common-lisp:list
       (common-lisp:cons "clarificationPrompt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'abort-statement))
      (common-lisp:list
       (common-lisp:cons "abortStatement"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'failure-reason))
      (common-lisp:list
       (common-lisp:cons "failureReason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-updated-date))
      (common-lisp:list
       (common-lisp:cons "lastUpdatedDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-date))
      (common-lisp:list
       (common-lisp:cons "createdDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'idle-session-ttlin-seconds))
      (common-lisp:list
       (common-lisp:cons "idleSessionTTLInSeconds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'voice-id))
      (common-lisp:list
       (common-lisp:cons "voiceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'checksum))
      (common-lisp:list
       (common-lisp:cons "checksum"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version))
      (common-lisp:list
       (common-lisp:cons "version"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'locale))
      (common-lisp:list
       (common-lisp:cons "locale"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'child-directed))
      (common-lisp:list
       (common-lisp:cons "childDirected"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'enable-model-improvements))
      (common-lisp:list
       (common-lisp:cons "enableModelImprovements"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'detect-sentiment))
      (common-lisp:list
       (common-lisp:cons "detectSentiment"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-bot-version-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-intent-version-request common-lisp:nil
                       ((checksum :initarg :|checksum| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %create-intent-version-request-checksum :initform
                         common-lisp:nil)
                        (name :initarg :|name| :type
                         (common-lisp:or intent-name common-lisp:null)
                         :accessor %create-intent-version-request-name
                         :initform (common-lisp:error ":name is required"))))
 (common-lisp:export
  (common-lisp:list 'create-intent-version-request
                    'make-create-intent-version-request))
 (common-lisp:defun make-create-intent-version-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key checksum name)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-intent-version-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-intent-version-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-intent-version-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'checksum))
      (common-lisp:list
       (common-lisp:cons "checksum"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-intent-version-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-intent-version-response common-lisp:nil
                       ((output-contexts :initarg :|outputContexts| :type
                         (common-lisp:or output-context-list common-lisp:null)
                         :accessor
                         %create-intent-version-response-output-contexts
                         :initform common-lisp:nil)
                        (input-contexts :initarg :|inputContexts| :type
                         (common-lisp:or input-context-list common-lisp:null)
                         :accessor
                         %create-intent-version-response-input-contexts
                         :initform common-lisp:nil)
                        (kendra-configuration :initarg :|kendraConfiguration|
                         :type
                         (common-lisp:or kendra-configuration common-lisp:null)
                         :accessor
                         %create-intent-version-response-kendra-configuration
                         :initform common-lisp:nil)
                        (checksum :initarg :|checksum| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %create-intent-version-response-checksum :initform
                         common-lisp:nil)
                        (version :initarg :|version| :type
                         (common-lisp:or version common-lisp:null) :accessor
                         %create-intent-version-response-version :initform
                         common-lisp:nil)
                        (created-date :initarg :|createdDate| :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %create-intent-version-response-created-date :initform
                         common-lisp:nil)
                        (last-updated-date :initarg :|lastUpdatedDate| :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %create-intent-version-response-last-updated-date
                         :initform common-lisp:nil)
                        (parent-intent-signature :initarg
                         :|parentIntentSignature| :type
                         (common-lisp:or builtin-intent-signature
                                         common-lisp:null)
                         :accessor
                         %create-intent-version-response-parent-intent-signature
                         :initform common-lisp:nil)
                        (fulfillment-activity :initarg :|fulfillmentActivity|
                         :type
                         (common-lisp:or fulfillment-activity common-lisp:null)
                         :accessor
                         %create-intent-version-response-fulfillment-activity
                         :initform common-lisp:nil)
                        (dialog-code-hook :initarg :|dialogCodeHook| :type
                         (common-lisp:or code-hook common-lisp:null) :accessor
                         %create-intent-version-response-dialog-code-hook
                         :initform common-lisp:nil)
                        (conclusion-statement :initarg :|conclusionStatement|
                         :type (common-lisp:or statement common-lisp:null)
                         :accessor
                         %create-intent-version-response-conclusion-statement
                         :initform common-lisp:nil)
                        (follow-up-prompt :initarg :|followUpPrompt| :type
                         (common-lisp:or follow-up-prompt common-lisp:null)
                         :accessor
                         %create-intent-version-response-follow-up-prompt
                         :initform common-lisp:nil)
                        (rejection-statement :initarg :|rejectionStatement|
                         :type (common-lisp:or statement common-lisp:null)
                         :accessor
                         %create-intent-version-response-rejection-statement
                         :initform common-lisp:nil)
                        (confirmation-prompt :initarg :|confirmationPrompt|
                         :type (common-lisp:or prompt common-lisp:null)
                         :accessor
                         %create-intent-version-response-confirmation-prompt
                         :initform common-lisp:nil)
                        (sample-utterances :initarg :|sampleUtterances| :type
                         (common-lisp:or intent-utterance-list
                                         common-lisp:null)
                         :accessor
                         %create-intent-version-response-sample-utterances
                         :initform common-lisp:nil)
                        (slots :initarg :|slots| :type
                         (common-lisp:or slot-list common-lisp:null) :accessor
                         %create-intent-version-response-slots :initform
                         common-lisp:nil)
                        (description :initarg :|description| :type
                         (common-lisp:or description common-lisp:null)
                         :accessor %create-intent-version-response-description
                         :initform common-lisp:nil)
                        (name :initarg :|name| :type
                         (common-lisp:or intent-name common-lisp:null)
                         :accessor %create-intent-version-response-name
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'create-intent-version-response
                    'make-create-intent-version-response))
 (common-lisp:defun make-create-intent-version-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key output-contexts input-contexts
                     kendra-configuration checksum version created-date
                     last-updated-date parent-intent-signature
                     fulfillment-activity dialog-code-hook conclusion-statement
                     follow-up-prompt rejection-statement confirmation-prompt
                     sample-utterances slots description name)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-intent-version-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-intent-version-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-intent-version-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'slots))
      (common-lisp:list
       (common-lisp:cons "slots"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sample-utterances))
      (common-lisp:list
       (common-lisp:cons "sampleUtterances"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'confirmation-prompt))
      (common-lisp:list
       (common-lisp:cons "confirmationPrompt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rejection-statement))
      (common-lisp:list
       (common-lisp:cons "rejectionStatement"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'follow-up-prompt))
      (common-lisp:list
       (common-lisp:cons "followUpPrompt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'conclusion-statement))
      (common-lisp:list
       (common-lisp:cons "conclusionStatement"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dialog-code-hook))
      (common-lisp:list
       (common-lisp:cons "dialogCodeHook"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'fulfillment-activity))
      (common-lisp:list
       (common-lisp:cons "fulfillmentActivity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'parent-intent-signature))
      (common-lisp:list
       (common-lisp:cons "parentIntentSignature"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-updated-date))
      (common-lisp:list
       (common-lisp:cons "lastUpdatedDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-date))
      (common-lisp:list
       (common-lisp:cons "createdDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version))
      (common-lisp:list
       (common-lisp:cons "version"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'checksum))
      (common-lisp:list
       (common-lisp:cons "checksum"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'kendra-configuration))
      (common-lisp:list
       (common-lisp:cons "kendraConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'input-contexts))
      (common-lisp:list
       (common-lisp:cons "inputContexts"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'output-contexts))
      (common-lisp:list
       (common-lisp:cons "outputContexts"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-intent-version-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-slot-type-version-request common-lisp:nil
                       ((checksum :initarg :|checksum| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %create-slot-type-version-request-checksum :initform
                         common-lisp:nil)
                        (name :initarg :|name| :type
                         (common-lisp:or slot-type-name common-lisp:null)
                         :accessor %create-slot-type-version-request-name
                         :initform (common-lisp:error ":name is required"))))
 (common-lisp:export
  (common-lisp:list 'create-slot-type-version-request
                    'make-create-slot-type-version-request))
 (common-lisp:defun make-create-slot-type-version-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key checksum name)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-slot-type-version-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-slot-type-version-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-slot-type-version-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'checksum))
      (common-lisp:list
       (common-lisp:cons "checksum"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-slot-type-version-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-slot-type-version-response common-lisp:nil
                       ((slot-type-configurations :initarg
                         :|slotTypeConfigurations| :type
                         (common-lisp:or slot-type-configurations
                                         common-lisp:null)
                         :accessor
                         %create-slot-type-version-response-slot-type-configurations
                         :initform common-lisp:nil)
                        (parent-slot-type-signature :initarg
                         :|parentSlotTypeSignature| :type
                         (common-lisp:or custom-or-builtin-slot-type-name
                                         common-lisp:null)
                         :accessor
                         %create-slot-type-version-response-parent-slot-type-signature
                         :initform common-lisp:nil)
                        (value-selection-strategy :initarg
                         :|valueSelectionStrategy| :type
                         (common-lisp:or slot-value-selection-strategy
                                         common-lisp:null)
                         :accessor
                         %create-slot-type-version-response-value-selection-strategy
                         :initform common-lisp:nil)
                        (checksum :initarg :|checksum| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %create-slot-type-version-response-checksum :initform
                         common-lisp:nil)
                        (version :initarg :|version| :type
                         (common-lisp:or version common-lisp:null) :accessor
                         %create-slot-type-version-response-version :initform
                         common-lisp:nil)
                        (created-date :initarg :|createdDate| :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %create-slot-type-version-response-created-date
                         :initform common-lisp:nil)
                        (last-updated-date :initarg :|lastUpdatedDate| :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %create-slot-type-version-response-last-updated-date
                         :initform common-lisp:nil)
                        (enumeration-values :initarg :|enumerationValues| :type
                         (common-lisp:or enumeration-values common-lisp:null)
                         :accessor
                         %create-slot-type-version-response-enumeration-values
                         :initform common-lisp:nil)
                        (description :initarg :|description| :type
                         (common-lisp:or description common-lisp:null)
                         :accessor
                         %create-slot-type-version-response-description
                         :initform common-lisp:nil)
                        (name :initarg :|name| :type
                         (common-lisp:or slot-type-name common-lisp:null)
                         :accessor %create-slot-type-version-response-name
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'create-slot-type-version-response
                    'make-create-slot-type-version-response))
 (common-lisp:defun make-create-slot-type-version-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key slot-type-configurations
                     parent-slot-type-signature value-selection-strategy
                     checksum version created-date last-updated-date
                     enumeration-values description name)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-slot-type-version-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-slot-type-version-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-slot-type-version-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'enumeration-values))
      (common-lisp:list
       (common-lisp:cons "enumerationValues"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-updated-date))
      (common-lisp:list
       (common-lisp:cons "lastUpdatedDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-date))
      (common-lisp:list
       (common-lisp:cons "createdDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version))
      (common-lisp:list
       (common-lisp:cons "version"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'checksum))
      (common-lisp:list
       (common-lisp:cons "checksum"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'value-selection-strategy))
      (common-lisp:list
       (common-lisp:cons "valueSelectionStrategy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'parent-slot-type-signature))
      (common-lisp:list
       (common-lisp:cons "parentSlotTypeSignature"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'slot-type-configurations))
      (common-lisp:list
       (common-lisp:cons "slotTypeConfigurations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-slot-type-version-response))
   common-lisp:nil))
(common-lisp:deftype custom-or-builtin-slot-type-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass delete-bot-alias-request common-lisp:nil
                       ((bot-name :initarg :|botName| :type
                         (common-lisp:or bot-name common-lisp:null) :accessor
                         %delete-bot-alias-request-bot-name :initform
                         (common-lisp:error ":botname is required"))
                        (name :initarg :|name| :type
                         (common-lisp:or alias-name common-lisp:null) :accessor
                         %delete-bot-alias-request-name :initform
                         (common-lisp:error ":name is required"))))
 (common-lisp:export
  (common-lisp:list 'delete-bot-alias-request 'make-delete-bot-alias-request))
 (common-lisp:defun make-delete-bot-alias-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key bot-name name)
   (common-lisp:apply #'common-lisp:make-instance 'delete-bot-alias-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-bot-alias-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-bot-alias-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-bot-alias-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-bot-channel-association-request common-lisp:nil
                       ((bot-alias :initarg :|botAlias| :type
                         (common-lisp:or alias-name common-lisp:null) :accessor
                         %delete-bot-channel-association-request-bot-alias
                         :initform (common-lisp:error ":botalias is required"))
                        (bot-name :initarg :|botName| :type
                         (common-lisp:or bot-name common-lisp:null) :accessor
                         %delete-bot-channel-association-request-bot-name
                         :initform (common-lisp:error ":botname is required"))
                        (name :initarg :|name| :type
                         (common-lisp:or bot-channel-name common-lisp:null)
                         :accessor %delete-bot-channel-association-request-name
                         :initform (common-lisp:error ":name is required"))))
 (common-lisp:export
  (common-lisp:list 'delete-bot-channel-association-request
                    'make-delete-bot-channel-association-request))
 (common-lisp:defun make-delete-bot-channel-association-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key bot-alias bot-name name)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-bot-channel-association-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-bot-channel-association-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-bot-channel-association-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-bot-channel-association-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-bot-request common-lisp:nil
                       ((name :initarg :|name| :type
                         (common-lisp:or bot-name common-lisp:null) :accessor
                         %delete-bot-request-name :initform
                         (common-lisp:error ":name is required"))))
 (common-lisp:export
  (common-lisp:list 'delete-bot-request 'make-delete-bot-request))
 (common-lisp:defun make-delete-bot-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key name)
   (common-lisp:apply #'common-lisp:make-instance 'delete-bot-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input delete-bot-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input delete-bot-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input delete-bot-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-bot-version-request common-lisp:nil
                       ((version :initarg :|version| :type
                         (common-lisp:or numerical-version common-lisp:null)
                         :accessor %delete-bot-version-request-version
                         :initform (common-lisp:error ":version is required"))
                        (name :initarg :|name| :type
                         (common-lisp:or bot-name common-lisp:null) :accessor
                         %delete-bot-version-request-name :initform
                         (common-lisp:error ":name is required"))))
 (common-lisp:export
  (common-lisp:list 'delete-bot-version-request
                    'make-delete-bot-version-request))
 (common-lisp:defun make-delete-bot-version-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key version name)
   (common-lisp:apply #'common-lisp:make-instance 'delete-bot-version-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-bot-version-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-bot-version-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-bot-version-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-intent-request common-lisp:nil
                       ((name :initarg :|name| :type
                         (common-lisp:or intent-name common-lisp:null)
                         :accessor %delete-intent-request-name :initform
                         (common-lisp:error ":name is required"))))
 (common-lisp:export
  (common-lisp:list 'delete-intent-request 'make-delete-intent-request))
 (common-lisp:defun make-delete-intent-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key name)
   (common-lisp:apply #'common-lisp:make-instance 'delete-intent-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-intent-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-intent-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-intent-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-intent-version-request common-lisp:nil
                       ((version :initarg :|version| :type
                         (common-lisp:or numerical-version common-lisp:null)
                         :accessor %delete-intent-version-request-version
                         :initform (common-lisp:error ":version is required"))
                        (name :initarg :|name| :type
                         (common-lisp:or intent-name common-lisp:null)
                         :accessor %delete-intent-version-request-name
                         :initform (common-lisp:error ":name is required"))))
 (common-lisp:export
  (common-lisp:list 'delete-intent-version-request
                    'make-delete-intent-version-request))
 (common-lisp:defun make-delete-intent-version-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key version name)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-intent-version-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-intent-version-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-intent-version-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-intent-version-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-slot-type-request common-lisp:nil
                       ((name :initarg :|name| :type
                         (common-lisp:or slot-type-name common-lisp:null)
                         :accessor %delete-slot-type-request-name :initform
                         (common-lisp:error ":name is required"))))
 (common-lisp:export
  (common-lisp:list 'delete-slot-type-request 'make-delete-slot-type-request))
 (common-lisp:defun make-delete-slot-type-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key name)
   (common-lisp:apply #'common-lisp:make-instance 'delete-slot-type-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-slot-type-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-slot-type-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-slot-type-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-slot-type-version-request common-lisp:nil
                       ((version :initarg :|version| :type
                         (common-lisp:or numerical-version common-lisp:null)
                         :accessor %delete-slot-type-version-request-version
                         :initform (common-lisp:error ":version is required"))
                        (name :initarg :|name| :type
                         (common-lisp:or slot-type-name common-lisp:null)
                         :accessor %delete-slot-type-version-request-name
                         :initform (common-lisp:error ":name is required"))))
 (common-lisp:export
  (common-lisp:list 'delete-slot-type-version-request
                    'make-delete-slot-type-version-request))
 (common-lisp:defun make-delete-slot-type-version-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key version name)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-slot-type-version-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-slot-type-version-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-slot-type-version-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-slot-type-version-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-utterances-request common-lisp:nil
                       ((user-id :initarg :|userId| :type
                         (common-lisp:or user-id common-lisp:null) :accessor
                         %delete-utterances-request-user-id :initform
                         (common-lisp:error ":userid is required"))
                        (bot-name :initarg :|botName| :type
                         (common-lisp:or bot-name common-lisp:null) :accessor
                         %delete-utterances-request-bot-name :initform
                         (common-lisp:error ":botname is required"))))
 (common-lisp:export
  (common-lisp:list 'delete-utterances-request
                    'make-delete-utterances-request))
 (common-lisp:defun make-delete-utterances-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key user-id bot-name)
   (common-lisp:apply #'common-lisp:make-instance 'delete-utterances-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-utterances-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-utterances-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-utterances-request))
   common-lisp:nil))
(common-lisp:deftype description () 'common-lisp:string)
(common-lisp:deftype destination () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass enumeration-value common-lisp:nil
                       ((synonyms :initarg :|synonyms| :type
                         (common-lisp:or synonym-list common-lisp:null)
                         :accessor %enumeration-value-synonyms :initform
                         common-lisp:nil)
                        (value :initarg :|value| :type
                         (common-lisp:or value common-lisp:null) :accessor
                         %enumeration-value-value :initform
                         (common-lisp:error ":value is required"))))
 (common-lisp:export
  (common-lisp:list 'enumeration-value 'make-enumeration-value))
 (common-lisp:defun make-enumeration-value
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key synonyms value)
   (common-lisp:apply #'common-lisp:make-instance 'enumeration-value
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input enumeration-value))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input enumeration-value))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'synonyms))
      (common-lisp:list
       (common-lisp:cons "synonyms"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input enumeration-value))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype enumeration-values ()
   '(trivial-types:proper-list enumeration-value))
 (common-lisp:defun |make-enumeration-values|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list enumeration-value))
   aws-sdk/generator/shape::members))
(common-lisp:deftype export-status () 'common-lisp:string)
(common-lisp:deftype export-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass follow-up-prompt common-lisp:nil
                       ((rejection-statement :initarg :|rejectionStatement|
                         :type (common-lisp:or statement common-lisp:null)
                         :accessor %follow-up-prompt-rejection-statement
                         :initform
                         (common-lisp:error ":rejectionstatement is required"))
                        (prompt :initarg :|prompt| :type
                         (common-lisp:or prompt common-lisp:null) :accessor
                         %follow-up-prompt-prompt :initform
                         (common-lisp:error ":prompt is required"))))
 (common-lisp:export
  (common-lisp:list 'follow-up-prompt 'make-follow-up-prompt))
 (common-lisp:defun make-follow-up-prompt
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key rejection-statement prompt)
   (common-lisp:apply #'common-lisp:make-instance 'follow-up-prompt
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input follow-up-prompt))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input follow-up-prompt))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'prompt))
      (common-lisp:list
       (common-lisp:cons "prompt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rejection-statement))
      (common-lisp:list
       (common-lisp:cons "rejectionStatement"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input follow-up-prompt))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass fulfillment-activity common-lisp:nil
                       ((code-hook :initarg :|codeHook| :type
                         (common-lisp:or code-hook common-lisp:null) :accessor
                         %fulfillment-activity-code-hook :initform
                         common-lisp:nil)
                        (type :initarg :|type| :type
                         (common-lisp:or fulfillment-activity-type
                                         common-lisp:null)
                         :accessor %fulfillment-activity-type :initform
                         (common-lisp:error ":type is required"))))
 (common-lisp:export
  (common-lisp:list 'fulfillment-activity 'make-fulfillment-activity))
 (common-lisp:defun make-fulfillment-activity
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key code-hook type)
   (common-lisp:apply #'common-lisp:make-instance 'fulfillment-activity
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input fulfillment-activity))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input fulfillment-activity))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'code-hook))
      (common-lisp:list
       (common-lisp:cons "codeHook"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input fulfillment-activity))
   common-lisp:nil))
(common-lisp:deftype fulfillment-activity-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass get-bot-alias-request common-lisp:nil
                       ((bot-name :initarg :|botName| :type
                         (common-lisp:or bot-name common-lisp:null) :accessor
                         %get-bot-alias-request-bot-name :initform
                         (common-lisp:error ":botname is required"))
                        (name :initarg :|name| :type
                         (common-lisp:or alias-name common-lisp:null) :accessor
                         %get-bot-alias-request-name :initform
                         (common-lisp:error ":name is required"))))
 (common-lisp:export
  (common-lisp:list 'get-bot-alias-request 'make-get-bot-alias-request))
 (common-lisp:defun make-get-bot-alias-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key bot-name name)
   (common-lisp:apply #'common-lisp:make-instance 'get-bot-alias-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-bot-alias-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-bot-alias-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-bot-alias-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-bot-alias-response common-lisp:nil
                       ((conversation-logs :initarg :|conversationLogs| :type
                         (common-lisp:or conversation-logs-response
                                         common-lisp:null)
                         :accessor %get-bot-alias-response-conversation-logs
                         :initform common-lisp:nil)
                        (checksum :initarg :|checksum| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %get-bot-alias-response-checksum :initform
                         common-lisp:nil)
                        (created-date :initarg :|createdDate| :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %get-bot-alias-response-created-date :initform
                         common-lisp:nil)
                        (last-updated-date :initarg :|lastUpdatedDate| :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %get-bot-alias-response-last-updated-date :initform
                         common-lisp:nil)
                        (bot-name :initarg :|botName| :type
                         (common-lisp:or bot-name common-lisp:null) :accessor
                         %get-bot-alias-response-bot-name :initform
                         common-lisp:nil)
                        (bot-version :initarg :|botVersion| :type
                         (common-lisp:or version common-lisp:null) :accessor
                         %get-bot-alias-response-bot-version :initform
                         common-lisp:nil)
                        (description :initarg :|description| :type
                         (common-lisp:or description common-lisp:null)
                         :accessor %get-bot-alias-response-description
                         :initform common-lisp:nil)
                        (name :initarg :|name| :type
                         (common-lisp:or alias-name common-lisp:null) :accessor
                         %get-bot-alias-response-name :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'get-bot-alias-response 'make-get-bot-alias-response))
 (common-lisp:defun make-get-bot-alias-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key conversation-logs checksum created-date
                     last-updated-date bot-name bot-version description name)
   (common-lisp:apply #'common-lisp:make-instance 'get-bot-alias-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-bot-alias-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-bot-alias-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bot-version))
      (common-lisp:list
       (common-lisp:cons "botVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bot-name))
      (common-lisp:list
       (common-lisp:cons "botName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-updated-date))
      (common-lisp:list
       (common-lisp:cons "lastUpdatedDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-date))
      (common-lisp:list
       (common-lisp:cons "createdDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'checksum))
      (common-lisp:list
       (common-lisp:cons "checksum"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'conversation-logs))
      (common-lisp:list
       (common-lisp:cons "conversationLogs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-bot-alias-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-bot-aliases-request common-lisp:nil
                       ((name-contains :initarg :|nameContains| :type
                         (common-lisp:or alias-name common-lisp:null) :accessor
                         %get-bot-aliases-request-name-contains :initform
                         common-lisp:nil)
                        (max-results :initarg :|maxResults| :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor %get-bot-aliases-request-max-results
                         :initform common-lisp:nil)
                        (next-token :initarg :|nextToken| :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %get-bot-aliases-request-next-token :initform
                         common-lisp:nil)
                        (bot-name :initarg :|botName| :type
                         (common-lisp:or bot-name common-lisp:null) :accessor
                         %get-bot-aliases-request-bot-name :initform
                         (common-lisp:error ":botname is required"))))
 (common-lisp:export
  (common-lisp:list 'get-bot-aliases-request 'make-get-bot-aliases-request))
 (common-lisp:defun make-get-bot-aliases-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key name-contains max-results next-token
                     bot-name)
   (common-lisp:apply #'common-lisp:make-instance 'get-bot-aliases-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-bot-aliases-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-bot-aliases-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-bot-aliases-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-bot-aliases-response common-lisp:nil
                       ((next-token :initarg :|nextToken| :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %get-bot-aliases-response-next-token :initform
                         common-lisp:nil)
                        (bot-aliases :initarg :bot-aliases :type
                         (common-lisp:or bot-alias-metadata-list
                                         common-lisp:null)
                         :accessor %get-bot-aliases-response-bot-aliases
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'get-bot-aliases-response 'make-get-bot-aliases-response))
 (common-lisp:defun make-get-bot-aliases-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token bot-aliases)
   (common-lisp:apply #'common-lisp:make-instance 'get-bot-aliases-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-bot-aliases-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-bot-aliases-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bot-aliases))
      (common-lisp:list
       (common-lisp:cons "BotAliases"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-bot-aliases-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-bot-channel-association-request common-lisp:nil
                       ((bot-alias :initarg :|botAlias| :type
                         (common-lisp:or alias-name common-lisp:null) :accessor
                         %get-bot-channel-association-request-bot-alias
                         :initform (common-lisp:error ":botalias is required"))
                        (bot-name :initarg :|botName| :type
                         (common-lisp:or bot-name common-lisp:null) :accessor
                         %get-bot-channel-association-request-bot-name
                         :initform (common-lisp:error ":botname is required"))
                        (name :initarg :|name| :type
                         (common-lisp:or bot-channel-name common-lisp:null)
                         :accessor %get-bot-channel-association-request-name
                         :initform (common-lisp:error ":name is required"))))
 (common-lisp:export
  (common-lisp:list 'get-bot-channel-association-request
                    'make-get-bot-channel-association-request))
 (common-lisp:defun make-get-bot-channel-association-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key bot-alias bot-name name)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-bot-channel-association-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-bot-channel-association-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-bot-channel-association-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-bot-channel-association-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-bot-channel-association-response common-lisp:nil
                       ((failure-reason :initarg :|failureReason| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %get-bot-channel-association-response-failure-reason
                         :initform common-lisp:nil)
                        (status :initarg :|status| :type
                         (common-lisp:or channel-status common-lisp:null)
                         :accessor %get-bot-channel-association-response-status
                         :initform common-lisp:nil)
                        (bot-configuration :initarg :|botConfiguration| :type
                         (common-lisp:or channel-configuration-map
                                         common-lisp:null)
                         :accessor
                         %get-bot-channel-association-response-bot-configuration
                         :initform common-lisp:nil)
                        (type :initarg :|type| :type
                         (common-lisp:or channel-type common-lisp:null)
                         :accessor %get-bot-channel-association-response-type
                         :initform common-lisp:nil)
                        (created-date :initarg :|createdDate| :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %get-bot-channel-association-response-created-date
                         :initform common-lisp:nil)
                        (bot-name :initarg :|botName| :type
                         (common-lisp:or bot-name common-lisp:null) :accessor
                         %get-bot-channel-association-response-bot-name
                         :initform common-lisp:nil)
                        (bot-alias :initarg :|botAlias| :type
                         (common-lisp:or alias-name common-lisp:null) :accessor
                         %get-bot-channel-association-response-bot-alias
                         :initform common-lisp:nil)
                        (description :initarg :|description| :type
                         (common-lisp:or description common-lisp:null)
                         :accessor
                         %get-bot-channel-association-response-description
                         :initform common-lisp:nil)
                        (name :initarg :|name| :type
                         (common-lisp:or bot-channel-name common-lisp:null)
                         :accessor %get-bot-channel-association-response-name
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'get-bot-channel-association-response
                    'make-get-bot-channel-association-response))
 (common-lisp:defun make-get-bot-channel-association-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key failure-reason status bot-configuration
                     type created-date bot-name bot-alias description name)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-bot-channel-association-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-bot-channel-association-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-bot-channel-association-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bot-alias))
      (common-lisp:list
       (common-lisp:cons "botAlias"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bot-name))
      (common-lisp:list
       (common-lisp:cons "botName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-date))
      (common-lisp:list
       (common-lisp:cons "createdDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bot-configuration))
      (common-lisp:list
       (common-lisp:cons "botConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'failure-reason))
      (common-lisp:list
       (common-lisp:cons "failureReason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-bot-channel-association-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-bot-channel-associations-request common-lisp:nil
                       ((name-contains :initarg :|nameContains| :type
                         (common-lisp:or bot-channel-name common-lisp:null)
                         :accessor
                         %get-bot-channel-associations-request-name-contains
                         :initform common-lisp:nil)
                        (max-results :initarg :|maxResults| :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor
                         %get-bot-channel-associations-request-max-results
                         :initform common-lisp:nil)
                        (next-token :initarg :|nextToken| :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %get-bot-channel-associations-request-next-token
                         :initform common-lisp:nil)
                        (bot-alias :initarg :|botAlias| :type
                         (common-lisp:or alias-name-or-list-all
                                         common-lisp:null)
                         :accessor
                         %get-bot-channel-associations-request-bot-alias
                         :initform (common-lisp:error ":botalias is required"))
                        (bot-name :initarg :|botName| :type
                         (common-lisp:or bot-name common-lisp:null) :accessor
                         %get-bot-channel-associations-request-bot-name
                         :initform
                         (common-lisp:error ":botname is required"))))
 (common-lisp:export
  (common-lisp:list 'get-bot-channel-associations-request
                    'make-get-bot-channel-associations-request))
 (common-lisp:defun make-get-bot-channel-associations-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key name-contains max-results next-token
                     bot-alias bot-name)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-bot-channel-associations-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-bot-channel-associations-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-bot-channel-associations-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-bot-channel-associations-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-bot-channel-associations-response common-lisp:nil
                       ((next-token :initarg :|nextToken| :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %get-bot-channel-associations-response-next-token
                         :initform common-lisp:nil)
                        (bot-channel-associations :initarg
                         :|botChannelAssociations| :type
                         (common-lisp:or bot-channel-association-list
                                         common-lisp:null)
                         :accessor
                         %get-bot-channel-associations-response-bot-channel-associations
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'get-bot-channel-associations-response
                    'make-get-bot-channel-associations-response))
 (common-lisp:defun make-get-bot-channel-associations-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token bot-channel-associations)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-bot-channel-associations-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-bot-channel-associations-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-bot-channel-associations-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'bot-channel-associations))
      (common-lisp:list
       (common-lisp:cons "botChannelAssociations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-bot-channel-associations-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-bot-request common-lisp:nil
                       ((version-or-alias :initarg :|versionOrAlias| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %get-bot-request-version-or-alias :initform
                         (common-lisp:error ":versionoralias is required"))
                        (name :initarg :|name| :type
                         (common-lisp:or bot-name common-lisp:null) :accessor
                         %get-bot-request-name :initform
                         (common-lisp:error ":name is required"))))
 (common-lisp:export (common-lisp:list 'get-bot-request 'make-get-bot-request))
 (common-lisp:defun make-get-bot-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key version-or-alias name)
   (common-lisp:apply #'common-lisp:make-instance 'get-bot-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-bot-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-bot-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-bot-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-bot-response common-lisp:nil
                       ((detect-sentiment :initarg :|detectSentiment| :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         %get-bot-response-detect-sentiment :initform
                         common-lisp:nil)
                        (child-directed :initarg :|childDirected| :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         %get-bot-response-child-directed :initform
                         common-lisp:nil)
                        (locale :initarg :|locale| :type
                         (common-lisp:or locale common-lisp:null) :accessor
                         %get-bot-response-locale :initform common-lisp:nil)
                        (version :initarg :|version| :type
                         (common-lisp:or version common-lisp:null) :accessor
                         %get-bot-response-version :initform common-lisp:nil)
                        (checksum :initarg :|checksum| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %get-bot-response-checksum :initform common-lisp:nil)
                        (voice-id :initarg :|voiceId| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %get-bot-response-voice-id :initform common-lisp:nil)
                        (idle-session-ttlin-seconds :initarg
                         :|idleSessionTTLInSeconds| :type
                         (common-lisp:or session-ttl common-lisp:null)
                         :accessor %get-bot-response-idle-session-ttlin-seconds
                         :initform common-lisp:nil)
                        (created-date :initarg :|createdDate| :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %get-bot-response-created-date :initform
                         common-lisp:nil)
                        (last-updated-date :initarg :|lastUpdatedDate| :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %get-bot-response-last-updated-date :initform
                         common-lisp:nil)
                        (failure-reason :initarg :|failureReason| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %get-bot-response-failure-reason :initform
                         common-lisp:nil)
                        (status :initarg :|status| :type
                         (common-lisp:or status common-lisp:null) :accessor
                         %get-bot-response-status :initform common-lisp:nil)
                        (abort-statement :initarg :|abortStatement| :type
                         (common-lisp:or statement common-lisp:null) :accessor
                         %get-bot-response-abort-statement :initform
                         common-lisp:nil)
                        (clarification-prompt :initarg :|clarificationPrompt|
                         :type (common-lisp:or prompt common-lisp:null)
                         :accessor %get-bot-response-clarification-prompt
                         :initform common-lisp:nil)
                        (nlu-intent-confidence-threshold :initarg
                         :|nluIntentConfidenceThreshold| :type
                         (common-lisp:or confidence-threshold common-lisp:null)
                         :accessor
                         %get-bot-response-nlu-intent-confidence-threshold
                         :initform common-lisp:nil)
                        (enable-model-improvements :initarg
                         :|enableModelImprovements| :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         %get-bot-response-enable-model-improvements :initform
                         common-lisp:nil)
                        (intents :initarg :|intents| :type
                         (common-lisp:or intent-list common-lisp:null)
                         :accessor %get-bot-response-intents :initform
                         common-lisp:nil)
                        (description :initarg :|description| :type
                         (common-lisp:or description common-lisp:null)
                         :accessor %get-bot-response-description :initform
                         common-lisp:nil)
                        (name :initarg :|name| :type
                         (common-lisp:or bot-name common-lisp:null) :accessor
                         %get-bot-response-name :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'get-bot-response 'make-get-bot-response))
 (common-lisp:defun make-get-bot-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key detect-sentiment child-directed locale
                     version checksum voice-id idle-session-ttlin-seconds
                     created-date last-updated-date failure-reason status
                     abort-statement clarification-prompt
                     nlu-intent-confidence-threshold enable-model-improvements
                     intents description name)
   (common-lisp:apply #'common-lisp:make-instance 'get-bot-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-bot-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-bot-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'intents))
      (common-lisp:list
       (common-lisp:cons "intents"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'enable-model-improvements))
      (common-lisp:list
       (common-lisp:cons "enableModelImprovements"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'nlu-intent-confidence-threshold))
      (common-lisp:list
       (common-lisp:cons "nluIntentConfidenceThreshold"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'clarification-prompt))
      (common-lisp:list
       (common-lisp:cons "clarificationPrompt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'abort-statement))
      (common-lisp:list
       (common-lisp:cons "abortStatement"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'failure-reason))
      (common-lisp:list
       (common-lisp:cons "failureReason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-updated-date))
      (common-lisp:list
       (common-lisp:cons "lastUpdatedDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-date))
      (common-lisp:list
       (common-lisp:cons "createdDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'idle-session-ttlin-seconds))
      (common-lisp:list
       (common-lisp:cons "idleSessionTTLInSeconds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'voice-id))
      (common-lisp:list
       (common-lisp:cons "voiceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'checksum))
      (common-lisp:list
       (common-lisp:cons "checksum"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version))
      (common-lisp:list
       (common-lisp:cons "version"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'locale))
      (common-lisp:list
       (common-lisp:cons "locale"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'child-directed))
      (common-lisp:list
       (common-lisp:cons "childDirected"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'detect-sentiment))
      (common-lisp:list
       (common-lisp:cons "detectSentiment"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-bot-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-bot-versions-request common-lisp:nil
                       ((max-results :initarg :|maxResults| :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor %get-bot-versions-request-max-results
                         :initform common-lisp:nil)
                        (next-token :initarg :|nextToken| :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %get-bot-versions-request-next-token :initform
                         common-lisp:nil)
                        (name :initarg :|name| :type
                         (common-lisp:or bot-name common-lisp:null) :accessor
                         %get-bot-versions-request-name :initform
                         (common-lisp:error ":name is required"))))
 (common-lisp:export
  (common-lisp:list 'get-bot-versions-request 'make-get-bot-versions-request))
 (common-lisp:defun make-get-bot-versions-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key max-results next-token name)
   (common-lisp:apply #'common-lisp:make-instance 'get-bot-versions-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-bot-versions-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-bot-versions-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-bot-versions-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-bot-versions-response common-lisp:nil
                       ((next-token :initarg :|nextToken| :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %get-bot-versions-response-next-token :initform
                         common-lisp:nil)
                        (bots :initarg :|bots| :type
                         (common-lisp:or bot-metadata-list common-lisp:null)
                         :accessor %get-bot-versions-response-bots :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'get-bot-versions-response
                    'make-get-bot-versions-response))
 (common-lisp:defun make-get-bot-versions-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token bots)
   (common-lisp:apply #'common-lisp:make-instance 'get-bot-versions-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-bot-versions-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-bot-versions-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bots))
      (common-lisp:list
       (common-lisp:cons "bots"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-bot-versions-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-bots-request common-lisp:nil
                       ((name-contains :initarg :|nameContains| :type
                         (common-lisp:or bot-name common-lisp:null) :accessor
                         %get-bots-request-name-contains :initform
                         common-lisp:nil)
                        (max-results :initarg :|maxResults| :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor %get-bots-request-max-results :initform
                         common-lisp:nil)
                        (next-token :initarg :|nextToken| :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %get-bots-request-next-token :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'get-bots-request 'make-get-bots-request))
 (common-lisp:defun make-get-bots-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key name-contains max-results next-token)
   (common-lisp:apply #'common-lisp:make-instance 'get-bots-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-bots-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-bots-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-bots-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-bots-response common-lisp:nil
                       ((next-token :initarg :|nextToken| :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %get-bots-response-next-token :initform
                         common-lisp:nil)
                        (bots :initarg :|bots| :type
                         (common-lisp:or bot-metadata-list common-lisp:null)
                         :accessor %get-bots-response-bots :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'get-bots-response 'make-get-bots-response))
 (common-lisp:defun make-get-bots-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token bots)
   (common-lisp:apply #'common-lisp:make-instance 'get-bots-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-bots-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-bots-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bots))
      (common-lisp:list
       (common-lisp:cons "bots"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-bots-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-builtin-intent-request common-lisp:nil
                       ((signature :initarg :|signature| :type
                         (common-lisp:or builtin-intent-signature
                                         common-lisp:null)
                         :accessor %get-builtin-intent-request-signature
                         :initform
                         (common-lisp:error ":signature is required"))))
 (common-lisp:export
  (common-lisp:list 'get-builtin-intent-request
                    'make-get-builtin-intent-request))
 (common-lisp:defun make-get-builtin-intent-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key signature)
   (common-lisp:apply #'common-lisp:make-instance 'get-builtin-intent-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-builtin-intent-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-builtin-intent-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-builtin-intent-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-builtin-intent-response common-lisp:nil
                       ((slots :initarg :|slots| :type
                         (common-lisp:or builtin-intent-slot-list
                                         common-lisp:null)
                         :accessor %get-builtin-intent-response-slots :initform
                         common-lisp:nil)
                        (supported-locales :initarg :|supportedLocales| :type
                         (common-lisp:or locale-list common-lisp:null)
                         :accessor
                         %get-builtin-intent-response-supported-locales
                         :initform common-lisp:nil)
                        (signature :initarg :|signature| :type
                         (common-lisp:or builtin-intent-signature
                                         common-lisp:null)
                         :accessor %get-builtin-intent-response-signature
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'get-builtin-intent-response
                    'make-get-builtin-intent-response))
 (common-lisp:defun make-get-builtin-intent-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key slots supported-locales signature)
   (common-lisp:apply #'common-lisp:make-instance 'get-builtin-intent-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-builtin-intent-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-builtin-intent-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'signature))
      (common-lisp:list
       (common-lisp:cons "signature"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'supported-locales))
      (common-lisp:list
       (common-lisp:cons "supportedLocales"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'slots))
      (common-lisp:list
       (common-lisp:cons "slots"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-builtin-intent-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-builtin-intents-request common-lisp:nil
                       ((max-results :initarg :|maxResults| :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor %get-builtin-intents-request-max-results
                         :initform common-lisp:nil)
                        (next-token :initarg :|nextToken| :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %get-builtin-intents-request-next-token :initform
                         common-lisp:nil)
                        (signature-contains :initarg :|signatureContains| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %get-builtin-intents-request-signature-contains
                         :initform common-lisp:nil)
                        (locale :initarg :|locale| :type
                         (common-lisp:or locale common-lisp:null) :accessor
                         %get-builtin-intents-request-locale :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'get-builtin-intents-request
                    'make-get-builtin-intents-request))
 (common-lisp:defun make-get-builtin-intents-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key max-results next-token signature-contains
                     locale)
   (common-lisp:apply #'common-lisp:make-instance 'get-builtin-intents-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-builtin-intents-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-builtin-intents-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-builtin-intents-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-builtin-intents-response common-lisp:nil
                       ((next-token :initarg :|nextToken| :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %get-builtin-intents-response-next-token :initform
                         common-lisp:nil)
                        (intents :initarg :|intents| :type
                         (common-lisp:or builtin-intent-metadata-list
                                         common-lisp:null)
                         :accessor %get-builtin-intents-response-intents
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'get-builtin-intents-response
                    'make-get-builtin-intents-response))
 (common-lisp:defun make-get-builtin-intents-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token intents)
   (common-lisp:apply #'common-lisp:make-instance 'get-builtin-intents-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-builtin-intents-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-builtin-intents-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'intents))
      (common-lisp:list
       (common-lisp:cons "intents"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-builtin-intents-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-builtin-slot-types-request common-lisp:nil
                       ((max-results :initarg :|maxResults| :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor %get-builtin-slot-types-request-max-results
                         :initform common-lisp:nil)
                        (next-token :initarg :|nextToken| :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %get-builtin-slot-types-request-next-token :initform
                         common-lisp:nil)
                        (signature-contains :initarg :|signatureContains| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %get-builtin-slot-types-request-signature-contains
                         :initform common-lisp:nil)
                        (locale :initarg :|locale| :type
                         (common-lisp:or locale common-lisp:null) :accessor
                         %get-builtin-slot-types-request-locale :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'get-builtin-slot-types-request
                    'make-get-builtin-slot-types-request))
 (common-lisp:defun make-get-builtin-slot-types-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key max-results next-token signature-contains
                     locale)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-builtin-slot-types-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-builtin-slot-types-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-builtin-slot-types-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-builtin-slot-types-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-builtin-slot-types-response common-lisp:nil
                       ((next-token :initarg :|nextToken| :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %get-builtin-slot-types-response-next-token :initform
                         common-lisp:nil)
                        (slot-types :initarg :|slotTypes| :type
                         (common-lisp:or builtin-slot-type-metadata-list
                                         common-lisp:null)
                         :accessor %get-builtin-slot-types-response-slot-types
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'get-builtin-slot-types-response
                    'make-get-builtin-slot-types-response))
 (common-lisp:defun make-get-builtin-slot-types-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token slot-types)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-builtin-slot-types-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-builtin-slot-types-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-builtin-slot-types-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'slot-types))
      (common-lisp:list
       (common-lisp:cons "slotTypes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-builtin-slot-types-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-export-request common-lisp:nil
                       ((export-type :initarg :|exportType| :type
                         (common-lisp:or export-type common-lisp:null)
                         :accessor %get-export-request-export-type :initform
                         (common-lisp:error ":exporttype is required"))
                        (resource-type :initarg :|resourceType| :type
                         (common-lisp:or resource-type common-lisp:null)
                         :accessor %get-export-request-resource-type :initform
                         (common-lisp:error ":resourcetype is required"))
                        (version :initarg :|version| :type
                         (common-lisp:or numerical-version common-lisp:null)
                         :accessor %get-export-request-version :initform
                         (common-lisp:error ":version is required"))
                        (name :initarg :|name| :type
                         (common-lisp:or name common-lisp:null) :accessor
                         %get-export-request-name :initform
                         (common-lisp:error ":name is required"))))
 (common-lisp:export
  (common-lisp:list 'get-export-request 'make-get-export-request))
 (common-lisp:defun make-get-export-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key export-type resource-type version name)
   (common-lisp:apply #'common-lisp:make-instance 'get-export-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-export-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-export-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-export-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-export-response common-lisp:nil
                       ((url :initarg :|url| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %get-export-response-url :initform common-lisp:nil)
                        (failure-reason :initarg :|failureReason| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %get-export-response-failure-reason :initform
                         common-lisp:nil)
                        (export-status :initarg :|exportStatus| :type
                         (common-lisp:or export-status common-lisp:null)
                         :accessor %get-export-response-export-status :initform
                         common-lisp:nil)
                        (export-type :initarg :|exportType| :type
                         (common-lisp:or export-type common-lisp:null)
                         :accessor %get-export-response-export-type :initform
                         common-lisp:nil)
                        (resource-type :initarg :|resourceType| :type
                         (common-lisp:or resource-type common-lisp:null)
                         :accessor %get-export-response-resource-type :initform
                         common-lisp:nil)
                        (version :initarg :|version| :type
                         (common-lisp:or numerical-version common-lisp:null)
                         :accessor %get-export-response-version :initform
                         common-lisp:nil)
                        (name :initarg :|name| :type
                         (common-lisp:or name common-lisp:null) :accessor
                         %get-export-response-name :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'get-export-response 'make-get-export-response))
 (common-lisp:defun make-get-export-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key url failure-reason export-status
                     export-type resource-type version name)
   (common-lisp:apply #'common-lisp:make-instance 'get-export-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-export-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-export-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version))
      (common-lisp:list
       (common-lisp:cons "version"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-type))
      (common-lisp:list
       (common-lisp:cons "resourceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'export-type))
      (common-lisp:list
       (common-lisp:cons "exportType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'export-status))
      (common-lisp:list
       (common-lisp:cons "exportStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'failure-reason))
      (common-lisp:list
       (common-lisp:cons "failureReason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'url))
      (common-lisp:list
       (common-lisp:cons "url"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-export-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-import-request common-lisp:nil
                       ((import-id :initarg :|importId| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %get-import-request-import-id :initform
                         (common-lisp:error ":importid is required"))))
 (common-lisp:export
  (common-lisp:list 'get-import-request 'make-get-import-request))
 (common-lisp:defun make-get-import-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key import-id)
   (common-lisp:apply #'common-lisp:make-instance 'get-import-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-import-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-import-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-import-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-import-response common-lisp:nil
                       ((created-date :initarg :|createdDate| :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %get-import-response-created-date :initform
                         common-lisp:nil)
                        (failure-reason :initarg :|failureReason| :type
                         (common-lisp:or string-list common-lisp:null)
                         :accessor %get-import-response-failure-reason
                         :initform common-lisp:nil)
                        (import-status :initarg :|importStatus| :type
                         (common-lisp:or import-status common-lisp:null)
                         :accessor %get-import-response-import-status :initform
                         common-lisp:nil)
                        (import-id :initarg :|importId| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %get-import-response-import-id :initform
                         common-lisp:nil)
                        (merge-strategy :initarg :|mergeStrategy| :type
                         (common-lisp:or merge-strategy common-lisp:null)
                         :accessor %get-import-response-merge-strategy
                         :initform common-lisp:nil)
                        (resource-type :initarg :|resourceType| :type
                         (common-lisp:or resource-type common-lisp:null)
                         :accessor %get-import-response-resource-type :initform
                         common-lisp:nil)
                        (name :initarg :|name| :type
                         (common-lisp:or name common-lisp:null) :accessor
                         %get-import-response-name :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'get-import-response 'make-get-import-response))
 (common-lisp:defun make-get-import-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key created-date failure-reason import-status
                     import-id merge-strategy resource-type name)
   (common-lisp:apply #'common-lisp:make-instance 'get-import-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-import-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-import-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-type))
      (common-lisp:list
       (common-lisp:cons "resourceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'merge-strategy))
      (common-lisp:list
       (common-lisp:cons "mergeStrategy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'import-id))
      (common-lisp:list
       (common-lisp:cons "importId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'import-status))
      (common-lisp:list
       (common-lisp:cons "importStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'failure-reason))
      (common-lisp:list
       (common-lisp:cons "failureReason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-date))
      (common-lisp:list
       (common-lisp:cons "createdDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-import-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-intent-request common-lisp:nil
                       ((version :initarg :|version| :type
                         (common-lisp:or version common-lisp:null) :accessor
                         %get-intent-request-version :initform
                         (common-lisp:error ":version is required"))
                        (name :initarg :|name| :type
                         (common-lisp:or intent-name common-lisp:null)
                         :accessor %get-intent-request-name :initform
                         (common-lisp:error ":name is required"))))
 (common-lisp:export
  (common-lisp:list 'get-intent-request 'make-get-intent-request))
 (common-lisp:defun make-get-intent-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key version name)
   (common-lisp:apply #'common-lisp:make-instance 'get-intent-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-intent-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-intent-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-intent-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-intent-response common-lisp:nil
                       ((output-contexts :initarg :|outputContexts| :type
                         (common-lisp:or output-context-list common-lisp:null)
                         :accessor %get-intent-response-output-contexts
                         :initform common-lisp:nil)
                        (input-contexts :initarg :|inputContexts| :type
                         (common-lisp:or input-context-list common-lisp:null)
                         :accessor %get-intent-response-input-contexts
                         :initform common-lisp:nil)
                        (kendra-configuration :initarg :|kendraConfiguration|
                         :type
                         (common-lisp:or kendra-configuration common-lisp:null)
                         :accessor %get-intent-response-kendra-configuration
                         :initform common-lisp:nil)
                        (checksum :initarg :|checksum| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %get-intent-response-checksum :initform
                         common-lisp:nil)
                        (version :initarg :|version| :type
                         (common-lisp:or version common-lisp:null) :accessor
                         %get-intent-response-version :initform
                         common-lisp:nil)
                        (created-date :initarg :|createdDate| :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %get-intent-response-created-date :initform
                         common-lisp:nil)
                        (last-updated-date :initarg :|lastUpdatedDate| :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %get-intent-response-last-updated-date :initform
                         common-lisp:nil)
                        (parent-intent-signature :initarg
                         :|parentIntentSignature| :type
                         (common-lisp:or builtin-intent-signature
                                         common-lisp:null)
                         :accessor %get-intent-response-parent-intent-signature
                         :initform common-lisp:nil)
                        (fulfillment-activity :initarg :|fulfillmentActivity|
                         :type
                         (common-lisp:or fulfillment-activity common-lisp:null)
                         :accessor %get-intent-response-fulfillment-activity
                         :initform common-lisp:nil)
                        (dialog-code-hook :initarg :|dialogCodeHook| :type
                         (common-lisp:or code-hook common-lisp:null) :accessor
                         %get-intent-response-dialog-code-hook :initform
                         common-lisp:nil)
                        (conclusion-statement :initarg :|conclusionStatement|
                         :type (common-lisp:or statement common-lisp:null)
                         :accessor %get-intent-response-conclusion-statement
                         :initform common-lisp:nil)
                        (follow-up-prompt :initarg :|followUpPrompt| :type
                         (common-lisp:or follow-up-prompt common-lisp:null)
                         :accessor %get-intent-response-follow-up-prompt
                         :initform common-lisp:nil)
                        (rejection-statement :initarg :|rejectionStatement|
                         :type (common-lisp:or statement common-lisp:null)
                         :accessor %get-intent-response-rejection-statement
                         :initform common-lisp:nil)
                        (confirmation-prompt :initarg :|confirmationPrompt|
                         :type (common-lisp:or prompt common-lisp:null)
                         :accessor %get-intent-response-confirmation-prompt
                         :initform common-lisp:nil)
                        (sample-utterances :initarg :|sampleUtterances| :type
                         (common-lisp:or intent-utterance-list
                                         common-lisp:null)
                         :accessor %get-intent-response-sample-utterances
                         :initform common-lisp:nil)
                        (slots :initarg :|slots| :type
                         (common-lisp:or slot-list common-lisp:null) :accessor
                         %get-intent-response-slots :initform common-lisp:nil)
                        (description :initarg :|description| :type
                         (common-lisp:or description common-lisp:null)
                         :accessor %get-intent-response-description :initform
                         common-lisp:nil)
                        (name :initarg :|name| :type
                         (common-lisp:or intent-name common-lisp:null)
                         :accessor %get-intent-response-name :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'get-intent-response 'make-get-intent-response))
 (common-lisp:defun make-get-intent-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key output-contexts input-contexts
                     kendra-configuration checksum version created-date
                     last-updated-date parent-intent-signature
                     fulfillment-activity dialog-code-hook conclusion-statement
                     follow-up-prompt rejection-statement confirmation-prompt
                     sample-utterances slots description name)
   (common-lisp:apply #'common-lisp:make-instance 'get-intent-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-intent-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-intent-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'slots))
      (common-lisp:list
       (common-lisp:cons "slots"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sample-utterances))
      (common-lisp:list
       (common-lisp:cons "sampleUtterances"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'confirmation-prompt))
      (common-lisp:list
       (common-lisp:cons "confirmationPrompt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rejection-statement))
      (common-lisp:list
       (common-lisp:cons "rejectionStatement"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'follow-up-prompt))
      (common-lisp:list
       (common-lisp:cons "followUpPrompt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'conclusion-statement))
      (common-lisp:list
       (common-lisp:cons "conclusionStatement"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dialog-code-hook))
      (common-lisp:list
       (common-lisp:cons "dialogCodeHook"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'fulfillment-activity))
      (common-lisp:list
       (common-lisp:cons "fulfillmentActivity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'parent-intent-signature))
      (common-lisp:list
       (common-lisp:cons "parentIntentSignature"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-updated-date))
      (common-lisp:list
       (common-lisp:cons "lastUpdatedDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-date))
      (common-lisp:list
       (common-lisp:cons "createdDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version))
      (common-lisp:list
       (common-lisp:cons "version"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'checksum))
      (common-lisp:list
       (common-lisp:cons "checksum"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'kendra-configuration))
      (common-lisp:list
       (common-lisp:cons "kendraConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'input-contexts))
      (common-lisp:list
       (common-lisp:cons "inputContexts"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'output-contexts))
      (common-lisp:list
       (common-lisp:cons "outputContexts"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-intent-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-intent-versions-request common-lisp:nil
                       ((max-results :initarg :|maxResults| :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor %get-intent-versions-request-max-results
                         :initform common-lisp:nil)
                        (next-token :initarg :|nextToken| :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %get-intent-versions-request-next-token :initform
                         common-lisp:nil)
                        (name :initarg :|name| :type
                         (common-lisp:or intent-name common-lisp:null)
                         :accessor %get-intent-versions-request-name :initform
                         (common-lisp:error ":name is required"))))
 (common-lisp:export
  (common-lisp:list 'get-intent-versions-request
                    'make-get-intent-versions-request))
 (common-lisp:defun make-get-intent-versions-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key max-results next-token name)
   (common-lisp:apply #'common-lisp:make-instance 'get-intent-versions-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-intent-versions-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-intent-versions-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-intent-versions-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-intent-versions-response common-lisp:nil
                       ((next-token :initarg :|nextToken| :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %get-intent-versions-response-next-token :initform
                         common-lisp:nil)
                        (intents :initarg :|intents| :type
                         (common-lisp:or intent-metadata-list common-lisp:null)
                         :accessor %get-intent-versions-response-intents
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'get-intent-versions-response
                    'make-get-intent-versions-response))
 (common-lisp:defun make-get-intent-versions-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token intents)
   (common-lisp:apply #'common-lisp:make-instance 'get-intent-versions-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-intent-versions-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-intent-versions-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'intents))
      (common-lisp:list
       (common-lisp:cons "intents"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-intent-versions-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-intents-request common-lisp:nil
                       ((name-contains :initarg :|nameContains| :type
                         (common-lisp:or intent-name common-lisp:null)
                         :accessor %get-intents-request-name-contains :initform
                         common-lisp:nil)
                        (max-results :initarg :|maxResults| :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor %get-intents-request-max-results :initform
                         common-lisp:nil)
                        (next-token :initarg :|nextToken| :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %get-intents-request-next-token :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'get-intents-request 'make-get-intents-request))
 (common-lisp:defun make-get-intents-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key name-contains max-results next-token)
   (common-lisp:apply #'common-lisp:make-instance 'get-intents-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-intents-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-intents-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-intents-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-intents-response common-lisp:nil
                       ((next-token :initarg :|nextToken| :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %get-intents-response-next-token :initform
                         common-lisp:nil)
                        (intents :initarg :|intents| :type
                         (common-lisp:or intent-metadata-list common-lisp:null)
                         :accessor %get-intents-response-intents :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'get-intents-response 'make-get-intents-response))
 (common-lisp:defun make-get-intents-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token intents)
   (common-lisp:apply #'common-lisp:make-instance 'get-intents-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-intents-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-intents-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'intents))
      (common-lisp:list
       (common-lisp:cons "intents"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-intents-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-migration-request common-lisp:nil
                       ((migration-id :initarg :|migrationId| :type
                         (common-lisp:or migration-id common-lisp:null)
                         :accessor %get-migration-request-migration-id
                         :initform
                         (common-lisp:error ":migrationid is required"))))
 (common-lisp:export
  (common-lisp:list 'get-migration-request 'make-get-migration-request))
 (common-lisp:defun make-get-migration-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key migration-id)
   (common-lisp:apply #'common-lisp:make-instance 'get-migration-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-migration-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-migration-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-migration-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-migration-response common-lisp:nil
                       ((alerts :initarg :|alerts| :type
                         (common-lisp:or migration-alerts common-lisp:null)
                         :accessor %get-migration-response-alerts :initform
                         common-lisp:nil)
                        (migration-timestamp :initarg :|migrationTimestamp|
                         :type (common-lisp:or timestamp common-lisp:null)
                         :accessor %get-migration-response-migration-timestamp
                         :initform common-lisp:nil)
                        (migration-strategy :initarg :|migrationStrategy| :type
                         (common-lisp:or migration-strategy common-lisp:null)
                         :accessor %get-migration-response-migration-strategy
                         :initform common-lisp:nil)
                        (migration-status :initarg :|migrationStatus| :type
                         (common-lisp:or migration-status common-lisp:null)
                         :accessor %get-migration-response-migration-status
                         :initform common-lisp:nil)
                        (v2bot-role :initarg :|v2BotRole| :type
                         (common-lisp:or iam-role-arn common-lisp:null)
                         :accessor %get-migration-response-v2bot-role :initform
                         common-lisp:nil)
                        (v2bot-id :initarg :|v2BotId| :type
                         (common-lisp:or v2bot-id common-lisp:null) :accessor
                         %get-migration-response-v2bot-id :initform
                         common-lisp:nil)
                        (v1bot-locale :initarg :|v1BotLocale| :type
                         (common-lisp:or locale common-lisp:null) :accessor
                         %get-migration-response-v1bot-locale :initform
                         common-lisp:nil)
                        (v1bot-version :initarg :|v1BotVersion| :type
                         (common-lisp:or version common-lisp:null) :accessor
                         %get-migration-response-v1bot-version :initform
                         common-lisp:nil)
                        (v1bot-name :initarg :|v1BotName| :type
                         (common-lisp:or bot-name common-lisp:null) :accessor
                         %get-migration-response-v1bot-name :initform
                         common-lisp:nil)
                        (migration-id :initarg :|migrationId| :type
                         (common-lisp:or migration-id common-lisp:null)
                         :accessor %get-migration-response-migration-id
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'get-migration-response 'make-get-migration-response))
 (common-lisp:defun make-get-migration-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key alerts migration-timestamp
                     migration-strategy migration-status v2bot-role v2bot-id
                     v1bot-locale v1bot-version v1bot-name migration-id)
   (common-lisp:apply #'common-lisp:make-instance 'get-migration-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-migration-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-migration-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'migration-id))
      (common-lisp:list
       (common-lisp:cons "migrationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'v1bot-name))
      (common-lisp:list
       (common-lisp:cons "v1BotName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'v1bot-version))
      (common-lisp:list
       (common-lisp:cons "v1BotVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'v1bot-locale))
      (common-lisp:list
       (common-lisp:cons "v1BotLocale"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'v2bot-id))
      (common-lisp:list
       (common-lisp:cons "v2BotId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'v2bot-role))
      (common-lisp:list
       (common-lisp:cons "v2BotRole"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'migration-status))
      (common-lisp:list
       (common-lisp:cons "migrationStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'migration-strategy))
      (common-lisp:list
       (common-lisp:cons "migrationStrategy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'migration-timestamp))
      (common-lisp:list
       (common-lisp:cons "migrationTimestamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'alerts))
      (common-lisp:list
       (common-lisp:cons "alerts"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-migration-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-migrations-request common-lisp:nil
                       ((next-token :initarg :|nextToken| :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %get-migrations-request-next-token :initform
                         common-lisp:nil)
                        (max-results :initarg :|maxResults| :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor %get-migrations-request-max-results
                         :initform common-lisp:nil)
                        (migration-status-equals :initarg
                         :|migrationStatusEquals| :type
                         (common-lisp:or migration-status common-lisp:null)
                         :accessor
                         %get-migrations-request-migration-status-equals
                         :initform common-lisp:nil)
                        (v1bot-name-contains :initarg :|v1BotNameContains|
                         :type (common-lisp:or bot-name common-lisp:null)
                         :accessor %get-migrations-request-v1bot-name-contains
                         :initform common-lisp:nil)
                        (sort-by-order :initarg :|sortByOrder| :type
                         (common-lisp:or sort-order common-lisp:null) :accessor
                         %get-migrations-request-sort-by-order :initform
                         common-lisp:nil)
                        (sort-by-attribute :initarg :|sortByAttribute| :type
                         (common-lisp:or migration-sort-attribute
                                         common-lisp:null)
                         :accessor %get-migrations-request-sort-by-attribute
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'get-migrations-request 'make-get-migrations-request))
 (common-lisp:defun make-get-migrations-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token max-results
                     migration-status-equals v1bot-name-contains sort-by-order
                     sort-by-attribute)
   (common-lisp:apply #'common-lisp:make-instance 'get-migrations-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-migrations-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-migrations-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-migrations-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-migrations-response common-lisp:nil
                       ((next-token :initarg :|nextToken| :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %get-migrations-response-next-token :initform
                         common-lisp:nil)
                        (migration-summaries :initarg :|migrationSummaries|
                         :type
                         (common-lisp:or migration-summary-list
                                         common-lisp:null)
                         :accessor %get-migrations-response-migration-summaries
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'get-migrations-response 'make-get-migrations-response))
 (common-lisp:defun make-get-migrations-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token migration-summaries)
   (common-lisp:apply #'common-lisp:make-instance 'get-migrations-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-migrations-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-migrations-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'migration-summaries))
      (common-lisp:list
       (common-lisp:cons "migrationSummaries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-migrations-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-slot-type-request common-lisp:nil
                       ((version :initarg :|version| :type
                         (common-lisp:or version common-lisp:null) :accessor
                         %get-slot-type-request-version :initform
                         (common-lisp:error ":version is required"))
                        (name :initarg :|name| :type
                         (common-lisp:or slot-type-name common-lisp:null)
                         :accessor %get-slot-type-request-name :initform
                         (common-lisp:error ":name is required"))))
 (common-lisp:export
  (common-lisp:list 'get-slot-type-request 'make-get-slot-type-request))
 (common-lisp:defun make-get-slot-type-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key version name)
   (common-lisp:apply #'common-lisp:make-instance 'get-slot-type-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-slot-type-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-slot-type-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-slot-type-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-slot-type-response common-lisp:nil
                       ((slot-type-configurations :initarg
                         :|slotTypeConfigurations| :type
                         (common-lisp:or slot-type-configurations
                                         common-lisp:null)
                         :accessor
                         %get-slot-type-response-slot-type-configurations
                         :initform common-lisp:nil)
                        (parent-slot-type-signature :initarg
                         :|parentSlotTypeSignature| :type
                         (common-lisp:or custom-or-builtin-slot-type-name
                                         common-lisp:null)
                         :accessor
                         %get-slot-type-response-parent-slot-type-signature
                         :initform common-lisp:nil)
                        (value-selection-strategy :initarg
                         :|valueSelectionStrategy| :type
                         (common-lisp:or slot-value-selection-strategy
                                         common-lisp:null)
                         :accessor
                         %get-slot-type-response-value-selection-strategy
                         :initform common-lisp:nil)
                        (checksum :initarg :|checksum| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %get-slot-type-response-checksum :initform
                         common-lisp:nil)
                        (version :initarg :|version| :type
                         (common-lisp:or version common-lisp:null) :accessor
                         %get-slot-type-response-version :initform
                         common-lisp:nil)
                        (created-date :initarg :|createdDate| :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %get-slot-type-response-created-date :initform
                         common-lisp:nil)
                        (last-updated-date :initarg :|lastUpdatedDate| :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %get-slot-type-response-last-updated-date :initform
                         common-lisp:nil)
                        (enumeration-values :initarg :|enumerationValues| :type
                         (common-lisp:or enumeration-values common-lisp:null)
                         :accessor %get-slot-type-response-enumeration-values
                         :initform common-lisp:nil)
                        (description :initarg :|description| :type
                         (common-lisp:or description common-lisp:null)
                         :accessor %get-slot-type-response-description
                         :initform common-lisp:nil)
                        (name :initarg :|name| :type
                         (common-lisp:or slot-type-name common-lisp:null)
                         :accessor %get-slot-type-response-name :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'get-slot-type-response 'make-get-slot-type-response))
 (common-lisp:defun make-get-slot-type-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key slot-type-configurations
                     parent-slot-type-signature value-selection-strategy
                     checksum version created-date last-updated-date
                     enumeration-values description name)
   (common-lisp:apply #'common-lisp:make-instance 'get-slot-type-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-slot-type-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-slot-type-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'enumeration-values))
      (common-lisp:list
       (common-lisp:cons "enumerationValues"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-updated-date))
      (common-lisp:list
       (common-lisp:cons "lastUpdatedDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-date))
      (common-lisp:list
       (common-lisp:cons "createdDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version))
      (common-lisp:list
       (common-lisp:cons "version"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'checksum))
      (common-lisp:list
       (common-lisp:cons "checksum"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'value-selection-strategy))
      (common-lisp:list
       (common-lisp:cons "valueSelectionStrategy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'parent-slot-type-signature))
      (common-lisp:list
       (common-lisp:cons "parentSlotTypeSignature"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'slot-type-configurations))
      (common-lisp:list
       (common-lisp:cons "slotTypeConfigurations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-slot-type-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-slot-type-versions-request common-lisp:nil
                       ((max-results :initarg :|maxResults| :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor %get-slot-type-versions-request-max-results
                         :initform common-lisp:nil)
                        (next-token :initarg :|nextToken| :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %get-slot-type-versions-request-next-token :initform
                         common-lisp:nil)
                        (name :initarg :|name| :type
                         (common-lisp:or slot-type-name common-lisp:null)
                         :accessor %get-slot-type-versions-request-name
                         :initform (common-lisp:error ":name is required"))))
 (common-lisp:export
  (common-lisp:list 'get-slot-type-versions-request
                    'make-get-slot-type-versions-request))
 (common-lisp:defun make-get-slot-type-versions-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key max-results next-token name)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-slot-type-versions-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-slot-type-versions-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-slot-type-versions-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-slot-type-versions-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-slot-type-versions-response common-lisp:nil
                       ((next-token :initarg :|nextToken| :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %get-slot-type-versions-response-next-token :initform
                         common-lisp:nil)
                        (slot-types :initarg :|slotTypes| :type
                         (common-lisp:or slot-type-metadata-list
                                         common-lisp:null)
                         :accessor %get-slot-type-versions-response-slot-types
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'get-slot-type-versions-response
                    'make-get-slot-type-versions-response))
 (common-lisp:defun make-get-slot-type-versions-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token slot-types)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-slot-type-versions-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-slot-type-versions-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-slot-type-versions-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'slot-types))
      (common-lisp:list
       (common-lisp:cons "slotTypes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-slot-type-versions-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-slot-types-request common-lisp:nil
                       ((name-contains :initarg :|nameContains| :type
                         (common-lisp:or slot-type-name common-lisp:null)
                         :accessor %get-slot-types-request-name-contains
                         :initform common-lisp:nil)
                        (max-results :initarg :|maxResults| :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor %get-slot-types-request-max-results
                         :initform common-lisp:nil)
                        (next-token :initarg :|nextToken| :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %get-slot-types-request-next-token :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'get-slot-types-request 'make-get-slot-types-request))
 (common-lisp:defun make-get-slot-types-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key name-contains max-results next-token)
   (common-lisp:apply #'common-lisp:make-instance 'get-slot-types-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-slot-types-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-slot-types-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-slot-types-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-slot-types-response common-lisp:nil
                       ((next-token :initarg :|nextToken| :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %get-slot-types-response-next-token :initform
                         common-lisp:nil)
                        (slot-types :initarg :|slotTypes| :type
                         (common-lisp:or slot-type-metadata-list
                                         common-lisp:null)
                         :accessor %get-slot-types-response-slot-types
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'get-slot-types-response 'make-get-slot-types-response))
 (common-lisp:defun make-get-slot-types-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token slot-types)
   (common-lisp:apply #'common-lisp:make-instance 'get-slot-types-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-slot-types-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-slot-types-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'slot-types))
      (common-lisp:list
       (common-lisp:cons "slotTypes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-slot-types-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-utterances-view-request common-lisp:nil
                       ((status-type :initarg :|statusType| :type
                         (common-lisp:or status-type common-lisp:null)
                         :accessor %get-utterances-view-request-status-type
                         :initform
                         (common-lisp:error ":statustype is required"))
                        (bot-versions :initarg :|botVersions| :type
                         (common-lisp:or bot-versions common-lisp:null)
                         :accessor %get-utterances-view-request-bot-versions
                         :initform
                         (common-lisp:error ":botversions is required"))
                        (bot-name :initarg :|botName| :type
                         (common-lisp:or bot-name common-lisp:null) :accessor
                         %get-utterances-view-request-bot-name :initform
                         (common-lisp:error ":botname is required"))))
 (common-lisp:export
  (common-lisp:list 'get-utterances-view-request
                    'make-get-utterances-view-request))
 (common-lisp:defun make-get-utterances-view-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key status-type bot-versions bot-name)
   (common-lisp:apply #'common-lisp:make-instance 'get-utterances-view-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-utterances-view-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-utterances-view-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-utterances-view-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-utterances-view-response common-lisp:nil
                       ((utterances :initarg :|utterances| :type
                         (common-lisp:or lists-of-utterances common-lisp:null)
                         :accessor %get-utterances-view-response-utterances
                         :initform common-lisp:nil)
                        (bot-name :initarg :|botName| :type
                         (common-lisp:or bot-name common-lisp:null) :accessor
                         %get-utterances-view-response-bot-name :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'get-utterances-view-response
                    'make-get-utterances-view-response))
 (common-lisp:defun make-get-utterances-view-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key utterances bot-name)
   (common-lisp:apply #'common-lisp:make-instance 'get-utterances-view-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-utterances-view-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-utterances-view-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bot-name))
      (common-lisp:list
       (common-lisp:cons "botName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'utterances))
      (common-lisp:list
       (common-lisp:cons "utterances"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-utterances-view-response))
   common-lisp:nil))
(common-lisp:deftype group-number () 'common-lisp:integer)
(common-lisp:deftype iam-role-arn () 'common-lisp:string)
(common-lisp:deftype import-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass input-context common-lisp:nil
                       ((name :initarg :|name| :type
                         (common-lisp:or input-context-name common-lisp:null)
                         :accessor %input-context-name :initform
                         (common-lisp:error ":name is required"))))
 (common-lisp:export (common-lisp:list 'input-context 'make-input-context))
 (common-lisp:defun make-input-context
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key name)
   (common-lisp:apply #'common-lisp:make-instance 'input-context
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input input-context))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input input-context))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input input-context))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype input-context-list ()
   '(trivial-types:proper-list input-context))
 (common-lisp:defun |make-input-context-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list input-context))
   aws-sdk/generator/shape::members))
(common-lisp:deftype input-context-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass intent common-lisp:nil
                       ((intent-version :initarg :|intentVersion| :type
                         (common-lisp:or version common-lisp:null) :accessor
                         %intent-intent-version :initform
                         (common-lisp:error ":intentversion is required"))
                        (intent-name :initarg :|intentName| :type
                         (common-lisp:or intent-name common-lisp:null)
                         :accessor %intent-intent-name :initform
                         (common-lisp:error ":intentname is required"))))
 (common-lisp:export (common-lisp:list 'intent 'make-intent))
 (common-lisp:defun make-intent
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key intent-version intent-name)
   (common-lisp:apply #'common-lisp:make-instance 'intent
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input intent))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input intent))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'intent-name))
      (common-lisp:list
       (common-lisp:cons "intentName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'intent-version))
      (common-lisp:list
       (common-lisp:cons "intentVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input intent))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype intent-list () '(trivial-types:proper-list intent))
 (common-lisp:defun |make-intent-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list intent))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass intent-metadata common-lisp:nil
                       ((version :initarg :|version| :type
                         (common-lisp:or version common-lisp:null) :accessor
                         %intent-metadata-version :initform common-lisp:nil)
                        (created-date :initarg :|createdDate| :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %intent-metadata-created-date :initform
                         common-lisp:nil)
                        (last-updated-date :initarg :|lastUpdatedDate| :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %intent-metadata-last-updated-date :initform
                         common-lisp:nil)
                        (description :initarg :|description| :type
                         (common-lisp:or description common-lisp:null)
                         :accessor %intent-metadata-description :initform
                         common-lisp:nil)
                        (name :initarg :|name| :type
                         (common-lisp:or intent-name common-lisp:null)
                         :accessor %intent-metadata-name :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'intent-metadata 'make-intent-metadata))
 (common-lisp:defun make-intent-metadata
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key version created-date last-updated-date
                     description name)
   (common-lisp:apply #'common-lisp:make-instance 'intent-metadata
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input intent-metadata))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input intent-metadata))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-updated-date))
      (common-lisp:list
       (common-lisp:cons "lastUpdatedDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-date))
      (common-lisp:list
       (common-lisp:cons "createdDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version))
      (common-lisp:list
       (common-lisp:cons "version"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input intent-metadata))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype intent-metadata-list ()
   '(trivial-types:proper-list intent-metadata))
 (common-lisp:defun |make-intent-metadata-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list intent-metadata))
   aws-sdk/generator/shape::members))
(common-lisp:deftype intent-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype intent-utterance-list ()
   '(trivial-types:proper-list utterance))
 (common-lisp:defun |make-intent-utterance-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list utterance))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition internal-failure-exception
     (lex-models-error)
     ((message :initarg :|message| :initform common-lisp:nil :reader
       internal-failure-exception-message)))
 (common-lisp:export
  (common-lisp:list 'internal-failure-exception
                    'internal-failure-exception-message)))
(common-lisp:progn
 (common-lisp:defclass kendra-configuration common-lisp:nil
                       ((role :initarg :|role| :type
                         (common-lisp:or |roleArn| common-lisp:null) :accessor
                         %kendra-configuration-role :initform
                         (common-lisp:error ":role is required"))
                        (query-filter-string :initarg :|queryFilterString|
                         :type
                         (common-lisp:or query-filter-string common-lisp:null)
                         :accessor %kendra-configuration-query-filter-string
                         :initform common-lisp:nil)
                        (kendra-index :initarg :|kendraIndex| :type
                         (common-lisp:or kendra-index-arn common-lisp:null)
                         :accessor %kendra-configuration-kendra-index :initform
                         (common-lisp:error ":kendraindex is required"))))
 (common-lisp:export
  (common-lisp:list 'kendra-configuration 'make-kendra-configuration))
 (common-lisp:defun make-kendra-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key role query-filter-string kendra-index)
   (common-lisp:apply #'common-lisp:make-instance 'kendra-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input kendra-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input kendra-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kendra-index))
      (common-lisp:list
       (common-lisp:cons "kendraIndex"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'query-filter-string))
      (common-lisp:list
       (common-lisp:cons "queryFilterString"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role))
      (common-lisp:list
       (common-lisp:cons "role"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input kendra-configuration))
   common-lisp:nil))
(common-lisp:deftype kendra-index-arn () 'common-lisp:string)
(common-lisp:deftype kms-key-arn () 'common-lisp:string)
(common-lisp:deftype lambda-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition limit-exceeded-exception
     (lex-models-error)
     ((retry-after-seconds :initarg :|retryAfterSeconds| :initform
       common-lisp:nil :reader limit-exceeded-exception-retry-after-seconds)
      (message :initarg :|message| :initform common-lisp:nil :reader
       limit-exceeded-exception-message)))
 (common-lisp:export
  (common-lisp:list 'limit-exceeded-exception
                    'limit-exceeded-exception-retry-after-seconds
                    'limit-exceeded-exception-message)))
(common-lisp:progn
 (common-lisp:deftype list-of-utterance ()
   '(trivial-types:proper-list utterance-data))
 (common-lisp:defun |make-list-of-utterance|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list utterance-data))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass list-tags-for-resource-request common-lisp:nil
                       ((resource-arn :initarg :|resourceArn| :type
                         (common-lisp:or amazon-resource-name common-lisp:null)
                         :accessor %list-tags-for-resource-request-resource-arn
                         :initform
                         (common-lisp:error ":resourcearn is required"))))
 (common-lisp:export
  (common-lisp:list 'list-tags-for-resource-request
                    'make-list-tags-for-resource-request))
 (common-lisp:defun make-list-tags-for-resource-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key resource-arn)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-tags-for-resource-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-tags-for-resource-response common-lisp:nil
                       ((tags :initarg :|tags| :type
                         (common-lisp:or tag-list common-lisp:null) :accessor
                         %list-tags-for-resource-response-tags :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-tags-for-resource-response
                    'make-list-tags-for-resource-response))
 (common-lisp:defun make-list-tags-for-resource-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tags)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-tags-for-resource-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype lists-of-utterances ()
   '(trivial-types:proper-list utterance-list))
 (common-lisp:defun |make-lists-of-utterances|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list utterance-list))
   aws-sdk/generator/shape::members))
(common-lisp:deftype locale () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype locale-list () '(trivial-types:proper-list locale))
 (common-lisp:defun |make-locale-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list locale))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass log-settings-request common-lisp:nil
                       ((resource-arn :initarg :|resourceArn| :type
                         (common-lisp:or resource-arn common-lisp:null)
                         :accessor %log-settings-request-resource-arn :initform
                         (common-lisp:error ":resourcearn is required"))
                        (kms-key-arn :initarg :|kmsKeyArn| :type
                         (common-lisp:or kms-key-arn common-lisp:null)
                         :accessor %log-settings-request-kms-key-arn :initform
                         common-lisp:nil)
                        (destination :initarg :|destination| :type
                         (common-lisp:or destination common-lisp:null)
                         :accessor %log-settings-request-destination :initform
                         (common-lisp:error ":destination is required"))
                        (log-type :initarg :|logType| :type
                         (common-lisp:or log-type common-lisp:null) :accessor
                         %log-settings-request-log-type :initform
                         (common-lisp:error ":logtype is required"))))
 (common-lisp:export
  (common-lisp:list 'log-settings-request 'make-log-settings-request))
 (common-lisp:defun make-log-settings-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key resource-arn kms-key-arn destination
                     log-type)
   (common-lisp:apply #'common-lisp:make-instance 'log-settings-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input log-settings-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input log-settings-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'log-type))
      (common-lisp:list
       (common-lisp:cons "logType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'destination))
      (common-lisp:list
       (common-lisp:cons "destination"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kms-key-arn))
      (common-lisp:list
       (common-lisp:cons "kmsKeyArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-arn))
      (common-lisp:list
       (common-lisp:cons "resourceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input log-settings-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype log-settings-request-list ()
   '(trivial-types:proper-list log-settings-request))
 (common-lisp:defun |make-log-settings-request-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list log-settings-request))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass log-settings-response common-lisp:nil
                       ((resource-prefix :initarg :|resourcePrefix| :type
                         (common-lisp:or resource-prefix common-lisp:null)
                         :accessor %log-settings-response-resource-prefix
                         :initform common-lisp:nil)
                        (resource-arn :initarg :|resourceArn| :type
                         (common-lisp:or resource-arn common-lisp:null)
                         :accessor %log-settings-response-resource-arn
                         :initform common-lisp:nil)
                        (kms-key-arn :initarg :|kmsKeyArn| :type
                         (common-lisp:or kms-key-arn common-lisp:null)
                         :accessor %log-settings-response-kms-key-arn :initform
                         common-lisp:nil)
                        (destination :initarg :|destination| :type
                         (common-lisp:or destination common-lisp:null)
                         :accessor %log-settings-response-destination :initform
                         common-lisp:nil)
                        (log-type :initarg :|logType| :type
                         (common-lisp:or log-type common-lisp:null) :accessor
                         %log-settings-response-log-type :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'log-settings-response 'make-log-settings-response))
 (common-lisp:defun make-log-settings-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key resource-prefix resource-arn kms-key-arn
                     destination log-type)
   (common-lisp:apply #'common-lisp:make-instance 'log-settings-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          log-settings-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          log-settings-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'log-type))
      (common-lisp:list
       (common-lisp:cons "logType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'destination))
      (common-lisp:list
       (common-lisp:cons "destination"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kms-key-arn))
      (common-lisp:list
       (common-lisp:cons "kmsKeyArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-arn))
      (common-lisp:list
       (common-lisp:cons "resourceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-prefix))
      (common-lisp:list
       (common-lisp:cons "resourcePrefix"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          log-settings-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype log-settings-response-list ()
   '(trivial-types:proper-list log-settings-response))
 (common-lisp:defun |make-log-settings-response-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list log-settings-response))
   aws-sdk/generator/shape::members))
(common-lisp:deftype log-type () 'common-lisp:string)
(common-lisp:deftype max-results () 'common-lisp:integer)
(common-lisp:deftype merge-strategy () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass message common-lisp:nil
                       ((group-number :initarg :|groupNumber| :type
                         (common-lisp:or group-number common-lisp:null)
                         :accessor %message-group-number :initform
                         common-lisp:nil)
                        (content :initarg :|content| :type
                         (common-lisp:or content-string common-lisp:null)
                         :accessor %message-content :initform
                         (common-lisp:error ":content is required"))
                        (content-type :initarg :|contentType| :type
                         (common-lisp:or content-type common-lisp:null)
                         :accessor %message-content-type :initform
                         (common-lisp:error ":contenttype is required"))))
 (common-lisp:export (common-lisp:list 'message 'make-message))
 (common-lisp:defun make-message
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key group-number content content-type)
   (common-lisp:apply #'common-lisp:make-instance 'message
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'content-type))
      (common-lisp:list
       (common-lisp:cons "contentType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'content))
      (common-lisp:list
       (common-lisp:cons "content"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'group-number))
      (common-lisp:list
       (common-lisp:cons "groupNumber"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype message-list () '(trivial-types:proper-list message))
 (common-lisp:defun |make-message-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list message))
   aws-sdk/generator/shape::members))
(common-lisp:deftype message-version () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass migration-alert common-lisp:nil
                       ((reference-urls :initarg :|referenceURLs| :type
                         (common-lisp:or migration-alert-reference-urls
                                         common-lisp:null)
                         :accessor %migration-alert-reference-urls :initform
                         common-lisp:nil)
                        (details :initarg :|details| :type
                         (common-lisp:or migration-alert-details
                                         common-lisp:null)
                         :accessor %migration-alert-details :initform
                         common-lisp:nil)
                        (message :initarg :|message| :type
                         (common-lisp:or migration-alert-message
                                         common-lisp:null)
                         :accessor %migration-alert-message :initform
                         common-lisp:nil)
                        (type :initarg :|type| :type
                         (common-lisp:or migration-alert-type common-lisp:null)
                         :accessor %migration-alert-type :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'migration-alert 'make-migration-alert))
 (common-lisp:defun make-migration-alert
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key reference-urls details message type)
   (common-lisp:apply #'common-lisp:make-instance 'migration-alert
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input migration-alert))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input migration-alert))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message))
      (common-lisp:list
       (common-lisp:cons "message"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'details))
      (common-lisp:list
       (common-lisp:cons "details"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'reference-urls))
      (common-lisp:list
       (common-lisp:cons "referenceURLs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input migration-alert))
   common-lisp:nil))
(common-lisp:deftype migration-alert-detail () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype migration-alert-details ()
   '(trivial-types:proper-list migration-alert-detail))
 (common-lisp:defun |make-migration-alert-details|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list migration-alert-detail))
   aws-sdk/generator/shape::members))
(common-lisp:deftype migration-alert-message () 'common-lisp:string)
(common-lisp:deftype migration-alert-reference-url () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype migration-alert-reference-urls ()
   '(trivial-types:proper-list migration-alert-reference-url))
 (common-lisp:defun |make-migration-alert-reference-urls|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            migration-alert-reference-url))
   aws-sdk/generator/shape::members))
(common-lisp:deftype migration-alert-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype migration-alerts ()
   '(trivial-types:proper-list migration-alert))
 (common-lisp:defun |make-migration-alerts|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list migration-alert))
   aws-sdk/generator/shape::members))
(common-lisp:deftype migration-id () 'common-lisp:string)
(common-lisp:deftype migration-sort-attribute () 'common-lisp:string)
(common-lisp:deftype migration-status () 'common-lisp:string)
(common-lisp:deftype migration-strategy () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass migration-summary common-lisp:nil
                       ((migration-timestamp :initarg :|migrationTimestamp|
                         :type (common-lisp:or timestamp common-lisp:null)
                         :accessor %migration-summary-migration-timestamp
                         :initform common-lisp:nil)
                        (migration-strategy :initarg :|migrationStrategy| :type
                         (common-lisp:or migration-strategy common-lisp:null)
                         :accessor %migration-summary-migration-strategy
                         :initform common-lisp:nil)
                        (migration-status :initarg :|migrationStatus| :type
                         (common-lisp:or migration-status common-lisp:null)
                         :accessor %migration-summary-migration-status
                         :initform common-lisp:nil)
                        (v2bot-role :initarg :|v2BotRole| :type
                         (common-lisp:or iam-role-arn common-lisp:null)
                         :accessor %migration-summary-v2bot-role :initform
                         common-lisp:nil)
                        (v2bot-id :initarg :|v2BotId| :type
                         (common-lisp:or v2bot-id common-lisp:null) :accessor
                         %migration-summary-v2bot-id :initform common-lisp:nil)
                        (v1bot-locale :initarg :|v1BotLocale| :type
                         (common-lisp:or locale common-lisp:null) :accessor
                         %migration-summary-v1bot-locale :initform
                         common-lisp:nil)
                        (v1bot-version :initarg :|v1BotVersion| :type
                         (common-lisp:or version common-lisp:null) :accessor
                         %migration-summary-v1bot-version :initform
                         common-lisp:nil)
                        (v1bot-name :initarg :|v1BotName| :type
                         (common-lisp:or bot-name common-lisp:null) :accessor
                         %migration-summary-v1bot-name :initform
                         common-lisp:nil)
                        (migration-id :initarg :|migrationId| :type
                         (common-lisp:or migration-id common-lisp:null)
                         :accessor %migration-summary-migration-id :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'migration-summary 'make-migration-summary))
 (common-lisp:defun make-migration-summary
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key migration-timestamp migration-strategy
                     migration-status v2bot-role v2bot-id v1bot-locale
                     v1bot-version v1bot-name migration-id)
   (common-lisp:apply #'common-lisp:make-instance 'migration-summary
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input migration-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input migration-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'migration-id))
      (common-lisp:list
       (common-lisp:cons "migrationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'v1bot-name))
      (common-lisp:list
       (common-lisp:cons "v1BotName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'v1bot-version))
      (common-lisp:list
       (common-lisp:cons "v1BotVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'v1bot-locale))
      (common-lisp:list
       (common-lisp:cons "v1BotLocale"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'v2bot-id))
      (common-lisp:list
       (common-lisp:cons "v2BotId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'v2bot-role))
      (common-lisp:list
       (common-lisp:cons "v2BotRole"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'migration-status))
      (common-lisp:list
       (common-lisp:cons "migrationStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'migration-strategy))
      (common-lisp:list
       (common-lisp:cons "migrationStrategy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'migration-timestamp))
      (common-lisp:list
       (common-lisp:cons "migrationTimestamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input migration-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype migration-summary-list ()
   '(trivial-types:proper-list migration-summary))
 (common-lisp:defun |make-migration-summary-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list migration-summary))
   aws-sdk/generator/shape::members))
(common-lisp:deftype name () 'common-lisp:string)
(common-lisp:deftype next-token () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition not-found-exception
     (lex-models-error)
     ((message :initarg :|message| :initform common-lisp:nil :reader
       not-found-exception-message)))
 (common-lisp:export
  (common-lisp:list 'not-found-exception 'not-found-exception-message)))
(common-lisp:deftype numerical-version () 'common-lisp:string)
(common-lisp:deftype obfuscation-setting () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass output-context common-lisp:nil
                       ((turns-to-live :initarg :|turnsToLive| :type
                         (common-lisp:or context-turns-to-live
                                         common-lisp:null)
                         :accessor %output-context-turns-to-live :initform
                         (common-lisp:error ":turnstolive is required"))
                        (time-to-live-in-seconds :initarg
                         :|timeToLiveInSeconds| :type
                         (common-lisp:or context-time-to-live-in-seconds
                                         common-lisp:null)
                         :accessor %output-context-time-to-live-in-seconds
                         :initform
                         (common-lisp:error
                          ":timetoliveinseconds is required"))
                        (name :initarg :|name| :type
                         (common-lisp:or output-context-name common-lisp:null)
                         :accessor %output-context-name :initform
                         (common-lisp:error ":name is required"))))
 (common-lisp:export (common-lisp:list 'output-context 'make-output-context))
 (common-lisp:defun make-output-context
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key turns-to-live time-to-live-in-seconds
                     name)
   (common-lisp:apply #'common-lisp:make-instance 'output-context
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input output-context))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input output-context))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'time-to-live-in-seconds))
      (common-lisp:list
       (common-lisp:cons "timeToLiveInSeconds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'turns-to-live))
      (common-lisp:list
       (common-lisp:cons "turnsToLive"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input output-context))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype output-context-list ()
   '(trivial-types:proper-list output-context))
 (common-lisp:defun |make-output-context-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list output-context))
   aws-sdk/generator/shape::members))
(common-lisp:deftype output-context-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition precondition-failed-exception
     (lex-models-error)
     ((message :initarg :|message| :initform common-lisp:nil :reader
       precondition-failed-exception-message)))
 (common-lisp:export
  (common-lisp:list 'precondition-failed-exception
                    'precondition-failed-exception-message)))
(common-lisp:deftype priority () 'common-lisp:integer)
(common-lisp:deftype process-behavior () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass prompt common-lisp:nil
                       ((response-card :initarg :|responseCard| :type
                         (common-lisp:or response-card common-lisp:null)
                         :accessor %prompt-response-card :initform
                         common-lisp:nil)
                        (max-attempts :initarg :|maxAttempts| :type
                         (common-lisp:or prompt-max-attempts common-lisp:null)
                         :accessor %prompt-max-attempts :initform
                         (common-lisp:error ":maxattempts is required"))
                        (messages :initarg :|messages| :type
                         (common-lisp:or message-list common-lisp:null)
                         :accessor %prompt-messages :initform
                         (common-lisp:error ":messages is required"))))
 (common-lisp:export (common-lisp:list 'prompt 'make-prompt))
 (common-lisp:defun make-prompt
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key response-card max-attempts messages)
   (common-lisp:apply #'common-lisp:make-instance 'prompt
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input prompt))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input prompt))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'messages))
      (common-lisp:list
       (common-lisp:cons "messages"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-attempts))
      (common-lisp:list
       (common-lisp:cons "maxAttempts"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'response-card))
      (common-lisp:list
       (common-lisp:cons "responseCard"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input prompt))
   common-lisp:nil))
(common-lisp:deftype prompt-max-attempts () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass put-bot-alias-request common-lisp:nil
                       ((tags :initarg :|tags| :type
                         (common-lisp:or tag-list common-lisp:null) :accessor
                         %put-bot-alias-request-tags :initform common-lisp:nil)
                        (conversation-logs :initarg :|conversationLogs| :type
                         (common-lisp:or conversation-logs-request
                                         common-lisp:null)
                         :accessor %put-bot-alias-request-conversation-logs
                         :initform common-lisp:nil)
                        (checksum :initarg :|checksum| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %put-bot-alias-request-checksum :initform
                         common-lisp:nil)
                        (bot-name :initarg :|botName| :type
                         (common-lisp:or bot-name common-lisp:null) :accessor
                         %put-bot-alias-request-bot-name :initform
                         (common-lisp:error ":botname is required"))
                        (bot-version :initarg :|botVersion| :type
                         (common-lisp:or version common-lisp:null) :accessor
                         %put-bot-alias-request-bot-version :initform
                         (common-lisp:error ":botversion is required"))
                        (description :initarg :|description| :type
                         (common-lisp:or description common-lisp:null)
                         :accessor %put-bot-alias-request-description :initform
                         common-lisp:nil)
                        (name :initarg :|name| :type
                         (common-lisp:or alias-name common-lisp:null) :accessor
                         %put-bot-alias-request-name :initform
                         (common-lisp:error ":name is required"))))
 (common-lisp:export
  (common-lisp:list 'put-bot-alias-request 'make-put-bot-alias-request))
 (common-lisp:defun make-put-bot-alias-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tags conversation-logs checksum bot-name
                     bot-version description name)
   (common-lisp:apply #'common-lisp:make-instance 'put-bot-alias-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-bot-alias-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-bot-alias-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bot-version))
      (common-lisp:list
       (common-lisp:cons "botVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'checksum))
      (common-lisp:list
       (common-lisp:cons "checksum"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'conversation-logs))
      (common-lisp:list
       (common-lisp:cons "conversationLogs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-bot-alias-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass put-bot-alias-response common-lisp:nil
                       ((tags :initarg :|tags| :type
                         (common-lisp:or tag-list common-lisp:null) :accessor
                         %put-bot-alias-response-tags :initform
                         common-lisp:nil)
                        (conversation-logs :initarg :|conversationLogs| :type
                         (common-lisp:or conversation-logs-response
                                         common-lisp:null)
                         :accessor %put-bot-alias-response-conversation-logs
                         :initform common-lisp:nil)
                        (checksum :initarg :|checksum| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %put-bot-alias-response-checksum :initform
                         common-lisp:nil)
                        (created-date :initarg :|createdDate| :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %put-bot-alias-response-created-date :initform
                         common-lisp:nil)
                        (last-updated-date :initarg :|lastUpdatedDate| :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %put-bot-alias-response-last-updated-date :initform
                         common-lisp:nil)
                        (bot-name :initarg :|botName| :type
                         (common-lisp:or bot-name common-lisp:null) :accessor
                         %put-bot-alias-response-bot-name :initform
                         common-lisp:nil)
                        (bot-version :initarg :|botVersion| :type
                         (common-lisp:or version common-lisp:null) :accessor
                         %put-bot-alias-response-bot-version :initform
                         common-lisp:nil)
                        (description :initarg :|description| :type
                         (common-lisp:or description common-lisp:null)
                         :accessor %put-bot-alias-response-description
                         :initform common-lisp:nil)
                        (name :initarg :|name| :type
                         (common-lisp:or alias-name common-lisp:null) :accessor
                         %put-bot-alias-response-name :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'put-bot-alias-response 'make-put-bot-alias-response))
 (common-lisp:defun make-put-bot-alias-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tags conversation-logs checksum
                     created-date last-updated-date bot-name bot-version
                     description name)
   (common-lisp:apply #'common-lisp:make-instance 'put-bot-alias-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-bot-alias-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-bot-alias-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bot-version))
      (common-lisp:list
       (common-lisp:cons "botVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bot-name))
      (common-lisp:list
       (common-lisp:cons "botName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-updated-date))
      (common-lisp:list
       (common-lisp:cons "lastUpdatedDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-date))
      (common-lisp:list
       (common-lisp:cons "createdDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'checksum))
      (common-lisp:list
       (common-lisp:cons "checksum"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'conversation-logs))
      (common-lisp:list
       (common-lisp:cons "conversationLogs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-bot-alias-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass put-bot-request common-lisp:nil
                       ((tags :initarg :|tags| :type
                         (common-lisp:or tag-list common-lisp:null) :accessor
                         %put-bot-request-tags :initform common-lisp:nil)
                        (create-version :initarg :|createVersion| :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         %put-bot-request-create-version :initform
                         common-lisp:nil)
                        (detect-sentiment :initarg :|detectSentiment| :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         %put-bot-request-detect-sentiment :initform
                         common-lisp:nil)
                        (child-directed :initarg :|childDirected| :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         %put-bot-request-child-directed :initform
                         (common-lisp:error ":childdirected is required"))
                        (locale :initarg :|locale| :type
                         (common-lisp:or locale common-lisp:null) :accessor
                         %put-bot-request-locale :initform
                         (common-lisp:error ":locale is required"))
                        (process-behavior :initarg :|processBehavior| :type
                         (common-lisp:or process-behavior common-lisp:null)
                         :accessor %put-bot-request-process-behavior :initform
                         common-lisp:nil)
                        (checksum :initarg :|checksum| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %put-bot-request-checksum :initform common-lisp:nil)
                        (voice-id :initarg :|voiceId| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %put-bot-request-voice-id :initform common-lisp:nil)
                        (idle-session-ttlin-seconds :initarg
                         :|idleSessionTTLInSeconds| :type
                         (common-lisp:or session-ttl common-lisp:null)
                         :accessor %put-bot-request-idle-session-ttlin-seconds
                         :initform common-lisp:nil)
                        (abort-statement :initarg :|abortStatement| :type
                         (common-lisp:or statement common-lisp:null) :accessor
                         %put-bot-request-abort-statement :initform
                         common-lisp:nil)
                        (clarification-prompt :initarg :|clarificationPrompt|
                         :type (common-lisp:or prompt common-lisp:null)
                         :accessor %put-bot-request-clarification-prompt
                         :initform common-lisp:nil)
                        (nlu-intent-confidence-threshold :initarg
                         :|nluIntentConfidenceThreshold| :type
                         (common-lisp:or confidence-threshold common-lisp:null)
                         :accessor
                         %put-bot-request-nlu-intent-confidence-threshold
                         :initform common-lisp:nil)
                        (enable-model-improvements :initarg
                         :|enableModelImprovements| :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         %put-bot-request-enable-model-improvements :initform
                         common-lisp:nil)
                        (intents :initarg :|intents| :type
                         (common-lisp:or intent-list common-lisp:null)
                         :accessor %put-bot-request-intents :initform
                         common-lisp:nil)
                        (description :initarg :|description| :type
                         (common-lisp:or description common-lisp:null)
                         :accessor %put-bot-request-description :initform
                         common-lisp:nil)
                        (name :initarg :|name| :type
                         (common-lisp:or bot-name common-lisp:null) :accessor
                         %put-bot-request-name :initform
                         (common-lisp:error ":name is required"))))
 (common-lisp:export (common-lisp:list 'put-bot-request 'make-put-bot-request))
 (common-lisp:defun make-put-bot-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tags create-version detect-sentiment
                     child-directed locale process-behavior checksum voice-id
                     idle-session-ttlin-seconds abort-statement
                     clarification-prompt nlu-intent-confidence-threshold
                     enable-model-improvements intents description name)
   (common-lisp:apply #'common-lisp:make-instance 'put-bot-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input put-bot-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input put-bot-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'intents))
      (common-lisp:list
       (common-lisp:cons "intents"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'enable-model-improvements))
      (common-lisp:list
       (common-lisp:cons "enableModelImprovements"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'nlu-intent-confidence-threshold))
      (common-lisp:list
       (common-lisp:cons "nluIntentConfidenceThreshold"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'clarification-prompt))
      (common-lisp:list
       (common-lisp:cons "clarificationPrompt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'abort-statement))
      (common-lisp:list
       (common-lisp:cons "abortStatement"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'idle-session-ttlin-seconds))
      (common-lisp:list
       (common-lisp:cons "idleSessionTTLInSeconds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'voice-id))
      (common-lisp:list
       (common-lisp:cons "voiceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'checksum))
      (common-lisp:list
       (common-lisp:cons "checksum"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'process-behavior))
      (common-lisp:list
       (common-lisp:cons "processBehavior"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'locale))
      (common-lisp:list
       (common-lisp:cons "locale"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'child-directed))
      (common-lisp:list
       (common-lisp:cons "childDirected"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'detect-sentiment))
      (common-lisp:list
       (common-lisp:cons "detectSentiment"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'create-version))
      (common-lisp:list
       (common-lisp:cons "createVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input put-bot-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass put-bot-response common-lisp:nil
                       ((tags :initarg :|tags| :type
                         (common-lisp:or tag-list common-lisp:null) :accessor
                         %put-bot-response-tags :initform common-lisp:nil)
                        (detect-sentiment :initarg :|detectSentiment| :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         %put-bot-response-detect-sentiment :initform
                         common-lisp:nil)
                        (create-version :initarg :|createVersion| :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         %put-bot-response-create-version :initform
                         common-lisp:nil)
                        (child-directed :initarg :|childDirected| :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         %put-bot-response-child-directed :initform
                         common-lisp:nil)
                        (locale :initarg :|locale| :type
                         (common-lisp:or locale common-lisp:null) :accessor
                         %put-bot-response-locale :initform common-lisp:nil)
                        (version :initarg :|version| :type
                         (common-lisp:or version common-lisp:null) :accessor
                         %put-bot-response-version :initform common-lisp:nil)
                        (checksum :initarg :|checksum| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %put-bot-response-checksum :initform common-lisp:nil)
                        (voice-id :initarg :|voiceId| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %put-bot-response-voice-id :initform common-lisp:nil)
                        (idle-session-ttlin-seconds :initarg
                         :|idleSessionTTLInSeconds| :type
                         (common-lisp:or session-ttl common-lisp:null)
                         :accessor %put-bot-response-idle-session-ttlin-seconds
                         :initform common-lisp:nil)
                        (created-date :initarg :|createdDate| :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %put-bot-response-created-date :initform
                         common-lisp:nil)
                        (last-updated-date :initarg :|lastUpdatedDate| :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %put-bot-response-last-updated-date :initform
                         common-lisp:nil)
                        (failure-reason :initarg :|failureReason| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %put-bot-response-failure-reason :initform
                         common-lisp:nil)
                        (status :initarg :|status| :type
                         (common-lisp:or status common-lisp:null) :accessor
                         %put-bot-response-status :initform common-lisp:nil)
                        (abort-statement :initarg :|abortStatement| :type
                         (common-lisp:or statement common-lisp:null) :accessor
                         %put-bot-response-abort-statement :initform
                         common-lisp:nil)
                        (clarification-prompt :initarg :|clarificationPrompt|
                         :type (common-lisp:or prompt common-lisp:null)
                         :accessor %put-bot-response-clarification-prompt
                         :initform common-lisp:nil)
                        (nlu-intent-confidence-threshold :initarg
                         :|nluIntentConfidenceThreshold| :type
                         (common-lisp:or confidence-threshold common-lisp:null)
                         :accessor
                         %put-bot-response-nlu-intent-confidence-threshold
                         :initform common-lisp:nil)
                        (enable-model-improvements :initarg
                         :|enableModelImprovements| :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         %put-bot-response-enable-model-improvements :initform
                         common-lisp:nil)
                        (intents :initarg :|intents| :type
                         (common-lisp:or intent-list common-lisp:null)
                         :accessor %put-bot-response-intents :initform
                         common-lisp:nil)
                        (description :initarg :|description| :type
                         (common-lisp:or description common-lisp:null)
                         :accessor %put-bot-response-description :initform
                         common-lisp:nil)
                        (name :initarg :|name| :type
                         (common-lisp:or bot-name common-lisp:null) :accessor
                         %put-bot-response-name :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'put-bot-response 'make-put-bot-response))
 (common-lisp:defun make-put-bot-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tags detect-sentiment create-version
                     child-directed locale version checksum voice-id
                     idle-session-ttlin-seconds created-date last-updated-date
                     failure-reason status abort-statement clarification-prompt
                     nlu-intent-confidence-threshold enable-model-improvements
                     intents description name)
   (common-lisp:apply #'common-lisp:make-instance 'put-bot-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input put-bot-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input put-bot-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'intents))
      (common-lisp:list
       (common-lisp:cons "intents"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'enable-model-improvements))
      (common-lisp:list
       (common-lisp:cons "enableModelImprovements"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'nlu-intent-confidence-threshold))
      (common-lisp:list
       (common-lisp:cons "nluIntentConfidenceThreshold"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'clarification-prompt))
      (common-lisp:list
       (common-lisp:cons "clarificationPrompt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'abort-statement))
      (common-lisp:list
       (common-lisp:cons "abortStatement"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'failure-reason))
      (common-lisp:list
       (common-lisp:cons "failureReason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-updated-date))
      (common-lisp:list
       (common-lisp:cons "lastUpdatedDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-date))
      (common-lisp:list
       (common-lisp:cons "createdDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'idle-session-ttlin-seconds))
      (common-lisp:list
       (common-lisp:cons "idleSessionTTLInSeconds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'voice-id))
      (common-lisp:list
       (common-lisp:cons "voiceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'checksum))
      (common-lisp:list
       (common-lisp:cons "checksum"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version))
      (common-lisp:list
       (common-lisp:cons "version"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'locale))
      (common-lisp:list
       (common-lisp:cons "locale"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'child-directed))
      (common-lisp:list
       (common-lisp:cons "childDirected"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'create-version))
      (common-lisp:list
       (common-lisp:cons "createVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'detect-sentiment))
      (common-lisp:list
       (common-lisp:cons "detectSentiment"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input put-bot-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass put-intent-request common-lisp:nil
                       ((output-contexts :initarg :|outputContexts| :type
                         (common-lisp:or output-context-list common-lisp:null)
                         :accessor %put-intent-request-output-contexts
                         :initform common-lisp:nil)
                        (input-contexts :initarg :|inputContexts| :type
                         (common-lisp:or input-context-list common-lisp:null)
                         :accessor %put-intent-request-input-contexts :initform
                         common-lisp:nil)
                        (kendra-configuration :initarg :|kendraConfiguration|
                         :type
                         (common-lisp:or kendra-configuration common-lisp:null)
                         :accessor %put-intent-request-kendra-configuration
                         :initform common-lisp:nil)
                        (create-version :initarg :|createVersion| :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         %put-intent-request-create-version :initform
                         common-lisp:nil)
                        (checksum :initarg :|checksum| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %put-intent-request-checksum :initform
                         common-lisp:nil)
                        (parent-intent-signature :initarg
                         :|parentIntentSignature| :type
                         (common-lisp:or builtin-intent-signature
                                         common-lisp:null)
                         :accessor %put-intent-request-parent-intent-signature
                         :initform common-lisp:nil)
                        (fulfillment-activity :initarg :|fulfillmentActivity|
                         :type
                         (common-lisp:or fulfillment-activity common-lisp:null)
                         :accessor %put-intent-request-fulfillment-activity
                         :initform common-lisp:nil)
                        (dialog-code-hook :initarg :|dialogCodeHook| :type
                         (common-lisp:or code-hook common-lisp:null) :accessor
                         %put-intent-request-dialog-code-hook :initform
                         common-lisp:nil)
                        (conclusion-statement :initarg :|conclusionStatement|
                         :type (common-lisp:or statement common-lisp:null)
                         :accessor %put-intent-request-conclusion-statement
                         :initform common-lisp:nil)
                        (follow-up-prompt :initarg :|followUpPrompt| :type
                         (common-lisp:or follow-up-prompt common-lisp:null)
                         :accessor %put-intent-request-follow-up-prompt
                         :initform common-lisp:nil)
                        (rejection-statement :initarg :|rejectionStatement|
                         :type (common-lisp:or statement common-lisp:null)
                         :accessor %put-intent-request-rejection-statement
                         :initform common-lisp:nil)
                        (confirmation-prompt :initarg :|confirmationPrompt|
                         :type (common-lisp:or prompt common-lisp:null)
                         :accessor %put-intent-request-confirmation-prompt
                         :initform common-lisp:nil)
                        (sample-utterances :initarg :|sampleUtterances| :type
                         (common-lisp:or intent-utterance-list
                                         common-lisp:null)
                         :accessor %put-intent-request-sample-utterances
                         :initform common-lisp:nil)
                        (slots :initarg :|slots| :type
                         (common-lisp:or slot-list common-lisp:null) :accessor
                         %put-intent-request-slots :initform common-lisp:nil)
                        (description :initarg :|description| :type
                         (common-lisp:or description common-lisp:null)
                         :accessor %put-intent-request-description :initform
                         common-lisp:nil)
                        (name :initarg :|name| :type
                         (common-lisp:or intent-name common-lisp:null)
                         :accessor %put-intent-request-name :initform
                         (common-lisp:error ":name is required"))))
 (common-lisp:export
  (common-lisp:list 'put-intent-request 'make-put-intent-request))
 (common-lisp:defun make-put-intent-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key output-contexts input-contexts
                     kendra-configuration create-version checksum
                     parent-intent-signature fulfillment-activity
                     dialog-code-hook conclusion-statement follow-up-prompt
                     rejection-statement confirmation-prompt sample-utterances
                     slots description name)
   (common-lisp:apply #'common-lisp:make-instance 'put-intent-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input put-intent-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input put-intent-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'slots))
      (common-lisp:list
       (common-lisp:cons "slots"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sample-utterances))
      (common-lisp:list
       (common-lisp:cons "sampleUtterances"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'confirmation-prompt))
      (common-lisp:list
       (common-lisp:cons "confirmationPrompt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rejection-statement))
      (common-lisp:list
       (common-lisp:cons "rejectionStatement"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'follow-up-prompt))
      (common-lisp:list
       (common-lisp:cons "followUpPrompt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'conclusion-statement))
      (common-lisp:list
       (common-lisp:cons "conclusionStatement"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dialog-code-hook))
      (common-lisp:list
       (common-lisp:cons "dialogCodeHook"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'fulfillment-activity))
      (common-lisp:list
       (common-lisp:cons "fulfillmentActivity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'parent-intent-signature))
      (common-lisp:list
       (common-lisp:cons "parentIntentSignature"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'checksum))
      (common-lisp:list
       (common-lisp:cons "checksum"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'create-version))
      (common-lisp:list
       (common-lisp:cons "createVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'kendra-configuration))
      (common-lisp:list
       (common-lisp:cons "kendraConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'input-contexts))
      (common-lisp:list
       (common-lisp:cons "inputContexts"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'output-contexts))
      (common-lisp:list
       (common-lisp:cons "outputContexts"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input put-intent-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass put-intent-response common-lisp:nil
                       ((output-contexts :initarg :|outputContexts| :type
                         (common-lisp:or output-context-list common-lisp:null)
                         :accessor %put-intent-response-output-contexts
                         :initform common-lisp:nil)
                        (input-contexts :initarg :|inputContexts| :type
                         (common-lisp:or input-context-list common-lisp:null)
                         :accessor %put-intent-response-input-contexts
                         :initform common-lisp:nil)
                        (kendra-configuration :initarg :|kendraConfiguration|
                         :type
                         (common-lisp:or kendra-configuration common-lisp:null)
                         :accessor %put-intent-response-kendra-configuration
                         :initform common-lisp:nil)
                        (create-version :initarg :|createVersion| :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         %put-intent-response-create-version :initform
                         common-lisp:nil)
                        (checksum :initarg :|checksum| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %put-intent-response-checksum :initform
                         common-lisp:nil)
                        (version :initarg :|version| :type
                         (common-lisp:or version common-lisp:null) :accessor
                         %put-intent-response-version :initform
                         common-lisp:nil)
                        (created-date :initarg :|createdDate| :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %put-intent-response-created-date :initform
                         common-lisp:nil)
                        (last-updated-date :initarg :|lastUpdatedDate| :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %put-intent-response-last-updated-date :initform
                         common-lisp:nil)
                        (parent-intent-signature :initarg
                         :|parentIntentSignature| :type
                         (common-lisp:or builtin-intent-signature
                                         common-lisp:null)
                         :accessor %put-intent-response-parent-intent-signature
                         :initform common-lisp:nil)
                        (fulfillment-activity :initarg :|fulfillmentActivity|
                         :type
                         (common-lisp:or fulfillment-activity common-lisp:null)
                         :accessor %put-intent-response-fulfillment-activity
                         :initform common-lisp:nil)
                        (dialog-code-hook :initarg :|dialogCodeHook| :type
                         (common-lisp:or code-hook common-lisp:null) :accessor
                         %put-intent-response-dialog-code-hook :initform
                         common-lisp:nil)
                        (conclusion-statement :initarg :|conclusionStatement|
                         :type (common-lisp:or statement common-lisp:null)
                         :accessor %put-intent-response-conclusion-statement
                         :initform common-lisp:nil)
                        (follow-up-prompt :initarg :|followUpPrompt| :type
                         (common-lisp:or follow-up-prompt common-lisp:null)
                         :accessor %put-intent-response-follow-up-prompt
                         :initform common-lisp:nil)
                        (rejection-statement :initarg :|rejectionStatement|
                         :type (common-lisp:or statement common-lisp:null)
                         :accessor %put-intent-response-rejection-statement
                         :initform common-lisp:nil)
                        (confirmation-prompt :initarg :|confirmationPrompt|
                         :type (common-lisp:or prompt common-lisp:null)
                         :accessor %put-intent-response-confirmation-prompt
                         :initform common-lisp:nil)
                        (sample-utterances :initarg :|sampleUtterances| :type
                         (common-lisp:or intent-utterance-list
                                         common-lisp:null)
                         :accessor %put-intent-response-sample-utterances
                         :initform common-lisp:nil)
                        (slots :initarg :|slots| :type
                         (common-lisp:or slot-list common-lisp:null) :accessor
                         %put-intent-response-slots :initform common-lisp:nil)
                        (description :initarg :|description| :type
                         (common-lisp:or description common-lisp:null)
                         :accessor %put-intent-response-description :initform
                         common-lisp:nil)
                        (name :initarg :|name| :type
                         (common-lisp:or intent-name common-lisp:null)
                         :accessor %put-intent-response-name :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'put-intent-response 'make-put-intent-response))
 (common-lisp:defun make-put-intent-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key output-contexts input-contexts
                     kendra-configuration create-version checksum version
                     created-date last-updated-date parent-intent-signature
                     fulfillment-activity dialog-code-hook conclusion-statement
                     follow-up-prompt rejection-statement confirmation-prompt
                     sample-utterances slots description name)
   (common-lisp:apply #'common-lisp:make-instance 'put-intent-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input put-intent-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input put-intent-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'slots))
      (common-lisp:list
       (common-lisp:cons "slots"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sample-utterances))
      (common-lisp:list
       (common-lisp:cons "sampleUtterances"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'confirmation-prompt))
      (common-lisp:list
       (common-lisp:cons "confirmationPrompt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rejection-statement))
      (common-lisp:list
       (common-lisp:cons "rejectionStatement"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'follow-up-prompt))
      (common-lisp:list
       (common-lisp:cons "followUpPrompt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'conclusion-statement))
      (common-lisp:list
       (common-lisp:cons "conclusionStatement"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dialog-code-hook))
      (common-lisp:list
       (common-lisp:cons "dialogCodeHook"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'fulfillment-activity))
      (common-lisp:list
       (common-lisp:cons "fulfillmentActivity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'parent-intent-signature))
      (common-lisp:list
       (common-lisp:cons "parentIntentSignature"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-updated-date))
      (common-lisp:list
       (common-lisp:cons "lastUpdatedDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-date))
      (common-lisp:list
       (common-lisp:cons "createdDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version))
      (common-lisp:list
       (common-lisp:cons "version"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'checksum))
      (common-lisp:list
       (common-lisp:cons "checksum"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'create-version))
      (common-lisp:list
       (common-lisp:cons "createVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'kendra-configuration))
      (common-lisp:list
       (common-lisp:cons "kendraConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'input-contexts))
      (common-lisp:list
       (common-lisp:cons "inputContexts"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'output-contexts))
      (common-lisp:list
       (common-lisp:cons "outputContexts"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input put-intent-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass put-slot-type-request common-lisp:nil
                       ((slot-type-configurations :initarg
                         :|slotTypeConfigurations| :type
                         (common-lisp:or slot-type-configurations
                                         common-lisp:null)
                         :accessor
                         %put-slot-type-request-slot-type-configurations
                         :initform common-lisp:nil)
                        (parent-slot-type-signature :initarg
                         :|parentSlotTypeSignature| :type
                         (common-lisp:or custom-or-builtin-slot-type-name
                                         common-lisp:null)
                         :accessor
                         %put-slot-type-request-parent-slot-type-signature
                         :initform common-lisp:nil)
                        (create-version :initarg :|createVersion| :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         %put-slot-type-request-create-version :initform
                         common-lisp:nil)
                        (value-selection-strategy :initarg
                         :|valueSelectionStrategy| :type
                         (common-lisp:or slot-value-selection-strategy
                                         common-lisp:null)
                         :accessor
                         %put-slot-type-request-value-selection-strategy
                         :initform common-lisp:nil)
                        (checksum :initarg :|checksum| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %put-slot-type-request-checksum :initform
                         common-lisp:nil)
                        (enumeration-values :initarg :|enumerationValues| :type
                         (common-lisp:or enumeration-values common-lisp:null)
                         :accessor %put-slot-type-request-enumeration-values
                         :initform common-lisp:nil)
                        (description :initarg :|description| :type
                         (common-lisp:or description common-lisp:null)
                         :accessor %put-slot-type-request-description :initform
                         common-lisp:nil)
                        (name :initarg :|name| :type
                         (common-lisp:or slot-type-name common-lisp:null)
                         :accessor %put-slot-type-request-name :initform
                         (common-lisp:error ":name is required"))))
 (common-lisp:export
  (common-lisp:list 'put-slot-type-request 'make-put-slot-type-request))
 (common-lisp:defun make-put-slot-type-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key slot-type-configurations
                     parent-slot-type-signature create-version
                     value-selection-strategy checksum enumeration-values
                     description name)
   (common-lisp:apply #'common-lisp:make-instance 'put-slot-type-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-slot-type-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-slot-type-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'enumeration-values))
      (common-lisp:list
       (common-lisp:cons "enumerationValues"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'checksum))
      (common-lisp:list
       (common-lisp:cons "checksum"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'value-selection-strategy))
      (common-lisp:list
       (common-lisp:cons "valueSelectionStrategy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'create-version))
      (common-lisp:list
       (common-lisp:cons "createVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'parent-slot-type-signature))
      (common-lisp:list
       (common-lisp:cons "parentSlotTypeSignature"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'slot-type-configurations))
      (common-lisp:list
       (common-lisp:cons "slotTypeConfigurations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-slot-type-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass put-slot-type-response common-lisp:nil
                       ((slot-type-configurations :initarg
                         :|slotTypeConfigurations| :type
                         (common-lisp:or slot-type-configurations
                                         common-lisp:null)
                         :accessor
                         %put-slot-type-response-slot-type-configurations
                         :initform common-lisp:nil)
                        (parent-slot-type-signature :initarg
                         :|parentSlotTypeSignature| :type
                         (common-lisp:or custom-or-builtin-slot-type-name
                                         common-lisp:null)
                         :accessor
                         %put-slot-type-response-parent-slot-type-signature
                         :initform common-lisp:nil)
                        (create-version :initarg :|createVersion| :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         %put-slot-type-response-create-version :initform
                         common-lisp:nil)
                        (value-selection-strategy :initarg
                         :|valueSelectionStrategy| :type
                         (common-lisp:or slot-value-selection-strategy
                                         common-lisp:null)
                         :accessor
                         %put-slot-type-response-value-selection-strategy
                         :initform common-lisp:nil)
                        (checksum :initarg :|checksum| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %put-slot-type-response-checksum :initform
                         common-lisp:nil)
                        (version :initarg :|version| :type
                         (common-lisp:or version common-lisp:null) :accessor
                         %put-slot-type-response-version :initform
                         common-lisp:nil)
                        (created-date :initarg :|createdDate| :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %put-slot-type-response-created-date :initform
                         common-lisp:nil)
                        (last-updated-date :initarg :|lastUpdatedDate| :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %put-slot-type-response-last-updated-date :initform
                         common-lisp:nil)
                        (enumeration-values :initarg :|enumerationValues| :type
                         (common-lisp:or enumeration-values common-lisp:null)
                         :accessor %put-slot-type-response-enumeration-values
                         :initform common-lisp:nil)
                        (description :initarg :|description| :type
                         (common-lisp:or description common-lisp:null)
                         :accessor %put-slot-type-response-description
                         :initform common-lisp:nil)
                        (name :initarg :|name| :type
                         (common-lisp:or slot-type-name common-lisp:null)
                         :accessor %put-slot-type-response-name :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'put-slot-type-response 'make-put-slot-type-response))
 (common-lisp:defun make-put-slot-type-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key slot-type-configurations
                     parent-slot-type-signature create-version
                     value-selection-strategy checksum version created-date
                     last-updated-date enumeration-values description name)
   (common-lisp:apply #'common-lisp:make-instance 'put-slot-type-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-slot-type-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-slot-type-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'enumeration-values))
      (common-lisp:list
       (common-lisp:cons "enumerationValues"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-updated-date))
      (common-lisp:list
       (common-lisp:cons "lastUpdatedDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-date))
      (common-lisp:list
       (common-lisp:cons "createdDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version))
      (common-lisp:list
       (common-lisp:cons "version"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'checksum))
      (common-lisp:list
       (common-lisp:cons "checksum"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'value-selection-strategy))
      (common-lisp:list
       (common-lisp:cons "valueSelectionStrategy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'create-version))
      (common-lisp:list
       (common-lisp:cons "createVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'parent-slot-type-signature))
      (common-lisp:list
       (common-lisp:cons "parentSlotTypeSignature"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'slot-type-configurations))
      (common-lisp:list
       (common-lisp:cons "slotTypeConfigurations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-slot-type-response))
   common-lisp:nil))
(common-lisp:deftype query-filter-string () 'common-lisp:string)
(common-lisp:deftype reference-type () 'common-lisp:string)
(common-lisp:deftype regex-pattern () 'common-lisp:string)
(common-lisp:deftype resource-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition resource-in-use-exception
     (lex-models-error)
     ((reference-type :initarg :|referenceType| :initform common-lisp:nil
       :reader resource-in-use-exception-reference-type)
      (example-reference :initarg :|exampleReference| :initform common-lisp:nil
       :reader resource-in-use-exception-example-reference)))
 (common-lisp:export
  (common-lisp:list 'resource-in-use-exception
                    'resource-in-use-exception-reference-type
                    'resource-in-use-exception-example-reference)))
(common-lisp:deftype resource-prefix () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass resource-reference common-lisp:nil
                       ((version :initarg :|version| :type
                         (common-lisp:or version common-lisp:null) :accessor
                         %resource-reference-version :initform common-lisp:nil)
                        (name :initarg :|name| :type
                         (common-lisp:or name common-lisp:null) :accessor
                         %resource-reference-name :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'resource-reference 'make-resource-reference))
 (common-lisp:defun make-resource-reference
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key version name)
   (common-lisp:apply #'common-lisp:make-instance 'resource-reference
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input resource-reference))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input resource-reference))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version))
      (common-lisp:list
       (common-lisp:cons "version"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input resource-reference))
   common-lisp:nil))
(common-lisp:deftype resource-type () 'common-lisp:string)
(common-lisp:deftype response-card () 'common-lisp:string)
(common-lisp:deftype session-ttl () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass slot common-lisp:nil
                       ((default-value-spec :initarg :|defaultValueSpec| :type
                         (common-lisp:or slot-default-value-spec
                                         common-lisp:null)
                         :accessor %slot-default-value-spec :initform
                         common-lisp:nil)
                        (obfuscation-setting :initarg :|obfuscationSetting|
                         :type
                         (common-lisp:or obfuscation-setting common-lisp:null)
                         :accessor %slot-obfuscation-setting :initform
                         common-lisp:nil)
                        (response-card :initarg :|responseCard| :type
                         (common-lisp:or response-card common-lisp:null)
                         :accessor %slot-response-card :initform
                         common-lisp:nil)
                        (sample-utterances :initarg :|sampleUtterances| :type
                         (common-lisp:or slot-utterance-list common-lisp:null)
                         :accessor %slot-sample-utterances :initform
                         common-lisp:nil)
                        (priority :initarg :|priority| :type
                         (common-lisp:or priority common-lisp:null) :accessor
                         %slot-priority :initform common-lisp:nil)
                        (value-elicitation-prompt :initarg
                         :|valueElicitationPrompt| :type
                         (common-lisp:or prompt common-lisp:null) :accessor
                         %slot-value-elicitation-prompt :initform
                         common-lisp:nil)
                        (slot-type-version :initarg :|slotTypeVersion| :type
                         (common-lisp:or version common-lisp:null) :accessor
                         %slot-slot-type-version :initform common-lisp:nil)
                        (slot-type :initarg :|slotType| :type
                         (common-lisp:or custom-or-builtin-slot-type-name
                                         common-lisp:null)
                         :accessor %slot-slot-type :initform common-lisp:nil)
                        (slot-constraint :initarg :|slotConstraint| :type
                         (common-lisp:or slot-constraint common-lisp:null)
                         :accessor %slot-slot-constraint :initform
                         (common-lisp:error ":slotconstraint is required"))
                        (description :initarg :|description| :type
                         (common-lisp:or description common-lisp:null)
                         :accessor %slot-description :initform common-lisp:nil)
                        (name :initarg :|name| :type
                         (common-lisp:or slot-name common-lisp:null) :accessor
                         %slot-name :initform
                         (common-lisp:error ":name is required"))))
 (common-lisp:export (common-lisp:list 'slot 'make-slot))
 (common-lisp:defun make-slot
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key default-value-spec obfuscation-setting
                     response-card sample-utterances priority
                     value-elicitation-prompt slot-type-version slot-type
                     slot-constraint description name)
   (common-lisp:apply #'common-lisp:make-instance 'slot
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input slot))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input slot))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'slot-constraint))
      (common-lisp:list
       (common-lisp:cons "slotConstraint"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'slot-type))
      (common-lisp:list
       (common-lisp:cons "slotType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'slot-type-version))
      (common-lisp:list
       (common-lisp:cons "slotTypeVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'value-elicitation-prompt))
      (common-lisp:list
       (common-lisp:cons "valueElicitationPrompt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'priority))
      (common-lisp:list
       (common-lisp:cons "priority"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sample-utterances))
      (common-lisp:list
       (common-lisp:cons "sampleUtterances"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'response-card))
      (common-lisp:list
       (common-lisp:cons "responseCard"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'obfuscation-setting))
      (common-lisp:list
       (common-lisp:cons "obfuscationSetting"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'default-value-spec))
      (common-lisp:list
       (common-lisp:cons "defaultValueSpec"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input slot))
   common-lisp:nil))
(common-lisp:deftype slot-constraint () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass slot-default-value common-lisp:nil
                       ((default-value :initarg :|defaultValue| :type
                         (common-lisp:or slot-default-value-string
                                         common-lisp:null)
                         :accessor %slot-default-value-default-value :initform
                         (common-lisp:error ":defaultvalue is required"))))
 (common-lisp:export
  (common-lisp:list 'slot-default-value 'make-slot-default-value))
 (common-lisp:defun make-slot-default-value
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key default-value)
   (common-lisp:apply #'common-lisp:make-instance 'slot-default-value
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input slot-default-value))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input slot-default-value))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'default-value))
      (common-lisp:list
       (common-lisp:cons "defaultValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input slot-default-value))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype slot-default-value-list ()
   '(trivial-types:proper-list slot-default-value))
 (common-lisp:defun |make-slot-default-value-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list slot-default-value))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass slot-default-value-spec common-lisp:nil
                       ((default-value-list :initarg :|defaultValueList| :type
                         (common-lisp:or slot-default-value-list
                                         common-lisp:null)
                         :accessor %slot-default-value-spec-default-value-list
                         :initform
                         (common-lisp:error ":defaultvaluelist is required"))))
 (common-lisp:export
  (common-lisp:list 'slot-default-value-spec 'make-slot-default-value-spec))
 (common-lisp:defun make-slot-default-value-spec
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key default-value-list)
   (common-lisp:apply #'common-lisp:make-instance 'slot-default-value-spec
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          slot-default-value-spec))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          slot-default-value-spec))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'default-value-list))
      (common-lisp:list
       (common-lisp:cons "defaultValueList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          slot-default-value-spec))
   common-lisp:nil))
(common-lisp:deftype slot-default-value-string () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype slot-list () '(trivial-types:proper-list slot))
 (common-lisp:defun |make-slot-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list slot))
   aws-sdk/generator/shape::members))
(common-lisp:deftype slot-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass slot-type-configuration common-lisp:nil
                       ((regex-configuration :initarg :|regexConfiguration|
                         :type
                         (common-lisp:or slot-type-regex-configuration
                                         common-lisp:null)
                         :accessor %slot-type-configuration-regex-configuration
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'slot-type-configuration 'make-slot-type-configuration))
 (common-lisp:defun make-slot-type-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key regex-configuration)
   (common-lisp:apply #'common-lisp:make-instance 'slot-type-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          slot-type-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          slot-type-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'regex-configuration))
      (common-lisp:list
       (common-lisp:cons "regexConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          slot-type-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype slot-type-configurations ()
   '(trivial-types:proper-list slot-type-configuration))
 (common-lisp:defun |make-slot-type-configurations|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list slot-type-configuration))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass slot-type-metadata common-lisp:nil
                       ((version :initarg :|version| :type
                         (common-lisp:or version common-lisp:null) :accessor
                         %slot-type-metadata-version :initform common-lisp:nil)
                        (created-date :initarg :|createdDate| :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %slot-type-metadata-created-date :initform
                         common-lisp:nil)
                        (last-updated-date :initarg :|lastUpdatedDate| :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %slot-type-metadata-last-updated-date :initform
                         common-lisp:nil)
                        (description :initarg :|description| :type
                         (common-lisp:or description common-lisp:null)
                         :accessor %slot-type-metadata-description :initform
                         common-lisp:nil)
                        (name :initarg :|name| :type
                         (common-lisp:or slot-type-name common-lisp:null)
                         :accessor %slot-type-metadata-name :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'slot-type-metadata 'make-slot-type-metadata))
 (common-lisp:defun make-slot-type-metadata
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key version created-date last-updated-date
                     description name)
   (common-lisp:apply #'common-lisp:make-instance 'slot-type-metadata
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input slot-type-metadata))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input slot-type-metadata))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-updated-date))
      (common-lisp:list
       (common-lisp:cons "lastUpdatedDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-date))
      (common-lisp:list
       (common-lisp:cons "createdDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version))
      (common-lisp:list
       (common-lisp:cons "version"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input slot-type-metadata))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype slot-type-metadata-list ()
   '(trivial-types:proper-list slot-type-metadata))
 (common-lisp:defun |make-slot-type-metadata-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list slot-type-metadata))
   aws-sdk/generator/shape::members))
(common-lisp:deftype slot-type-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass slot-type-regex-configuration common-lisp:nil
                       ((pattern :initarg :|pattern| :type
                         (common-lisp:or regex-pattern common-lisp:null)
                         :accessor %slot-type-regex-configuration-pattern
                         :initform
                         (common-lisp:error ":pattern is required"))))
 (common-lisp:export
  (common-lisp:list 'slot-type-regex-configuration
                    'make-slot-type-regex-configuration))
 (common-lisp:defun make-slot-type-regex-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key pattern)
   (common-lisp:apply #'common-lisp:make-instance
                      'slot-type-regex-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          slot-type-regex-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          slot-type-regex-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pattern))
      (common-lisp:list
       (common-lisp:cons "pattern"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          slot-type-regex-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype slot-utterance-list ()
   '(trivial-types:proper-list utterance))
 (common-lisp:defun |make-slot-utterance-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list utterance))
   aws-sdk/generator/shape::members))
(common-lisp:deftype slot-value-selection-strategy () 'common-lisp:string)
(common-lisp:deftype sort-order () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass start-import-request common-lisp:nil
                       ((tags :initarg :|tags| :type
                         (common-lisp:or tag-list common-lisp:null) :accessor
                         %start-import-request-tags :initform common-lisp:nil)
                        (merge-strategy :initarg :|mergeStrategy| :type
                         (common-lisp:or merge-strategy common-lisp:null)
                         :accessor %start-import-request-merge-strategy
                         :initform
                         (common-lisp:error ":mergestrategy is required"))
                        (resource-type :initarg :|resourceType| :type
                         (common-lisp:or resource-type common-lisp:null)
                         :accessor %start-import-request-resource-type
                         :initform
                         (common-lisp:error ":resourcetype is required"))
                        (payload :initarg :|payload| :type
                         (common-lisp:or blob common-lisp:null) :accessor
                         %start-import-request-payload :initform
                         (common-lisp:error ":payload is required"))))
 (common-lisp:export
  (common-lisp:list 'start-import-request 'make-start-import-request))
 (common-lisp:defun make-start-import-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tags merge-strategy resource-type
                     payload)
   (common-lisp:apply #'common-lisp:make-instance 'start-import-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input start-import-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input start-import-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'payload))
      (common-lisp:list
       (common-lisp:cons "payload"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-type))
      (common-lisp:list
       (common-lisp:cons "resourceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'merge-strategy))
      (common-lisp:list
       (common-lisp:cons "mergeStrategy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input start-import-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass start-import-response common-lisp:nil
                       ((created-date :initarg :|createdDate| :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %start-import-response-created-date :initform
                         common-lisp:nil)
                        (tags :initarg :|tags| :type
                         (common-lisp:or tag-list common-lisp:null) :accessor
                         %start-import-response-tags :initform common-lisp:nil)
                        (import-status :initarg :|importStatus| :type
                         (common-lisp:or import-status common-lisp:null)
                         :accessor %start-import-response-import-status
                         :initform common-lisp:nil)
                        (import-id :initarg :|importId| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %start-import-response-import-id :initform
                         common-lisp:nil)
                        (merge-strategy :initarg :|mergeStrategy| :type
                         (common-lisp:or merge-strategy common-lisp:null)
                         :accessor %start-import-response-merge-strategy
                         :initform common-lisp:nil)
                        (resource-type :initarg :|resourceType| :type
                         (common-lisp:or resource-type common-lisp:null)
                         :accessor %start-import-response-resource-type
                         :initform common-lisp:nil)
                        (name :initarg :|name| :type
                         (common-lisp:or name common-lisp:null) :accessor
                         %start-import-response-name :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'start-import-response 'make-start-import-response))
 (common-lisp:defun make-start-import-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key created-date tags import-status import-id
                     merge-strategy resource-type name)
   (common-lisp:apply #'common-lisp:make-instance 'start-import-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-import-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-import-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-type))
      (common-lisp:list
       (common-lisp:cons "resourceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'merge-strategy))
      (common-lisp:list
       (common-lisp:cons "mergeStrategy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'import-id))
      (common-lisp:list
       (common-lisp:cons "importId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'import-status))
      (common-lisp:list
       (common-lisp:cons "importStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-date))
      (common-lisp:list
       (common-lisp:cons "createdDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-import-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass start-migration-request common-lisp:nil
                       ((migration-strategy :initarg :|migrationStrategy| :type
                         (common-lisp:or migration-strategy common-lisp:null)
                         :accessor %start-migration-request-migration-strategy
                         :initform
                         (common-lisp:error ":migrationstrategy is required"))
                        (v2bot-role :initarg :|v2BotRole| :type
                         (common-lisp:or iam-role-arn common-lisp:null)
                         :accessor %start-migration-request-v2bot-role
                         :initform
                         (common-lisp:error ":v2botrole is required"))
                        (v2bot-name :initarg :|v2BotName| :type
                         (common-lisp:or v2bot-name common-lisp:null) :accessor
                         %start-migration-request-v2bot-name :initform
                         (common-lisp:error ":v2botname is required"))
                        (v1bot-version :initarg :|v1BotVersion| :type
                         (common-lisp:or version common-lisp:null) :accessor
                         %start-migration-request-v1bot-version :initform
                         (common-lisp:error ":v1botversion is required"))
                        (v1bot-name :initarg :|v1BotName| :type
                         (common-lisp:or bot-name common-lisp:null) :accessor
                         %start-migration-request-v1bot-name :initform
                         (common-lisp:error ":v1botname is required"))))
 (common-lisp:export
  (common-lisp:list 'start-migration-request 'make-start-migration-request))
 (common-lisp:defun make-start-migration-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key migration-strategy v2bot-role v2bot-name
                     v1bot-version v1bot-name)
   (common-lisp:apply #'common-lisp:make-instance 'start-migration-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-migration-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-migration-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'v1bot-name))
      (common-lisp:list
       (common-lisp:cons "v1BotName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'v1bot-version))
      (common-lisp:list
       (common-lisp:cons "v1BotVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'v2bot-name))
      (common-lisp:list
       (common-lisp:cons "v2BotName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'v2bot-role))
      (common-lisp:list
       (common-lisp:cons "v2BotRole"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'migration-strategy))
      (common-lisp:list
       (common-lisp:cons "migrationStrategy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-migration-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass start-migration-response common-lisp:nil
                       ((migration-timestamp :initarg :|migrationTimestamp|
                         :type (common-lisp:or timestamp common-lisp:null)
                         :accessor
                         %start-migration-response-migration-timestamp
                         :initform common-lisp:nil)
                        (migration-strategy :initarg :|migrationStrategy| :type
                         (common-lisp:or migration-strategy common-lisp:null)
                         :accessor %start-migration-response-migration-strategy
                         :initform common-lisp:nil)
                        (migration-id :initarg :|migrationId| :type
                         (common-lisp:or migration-id common-lisp:null)
                         :accessor %start-migration-response-migration-id
                         :initform common-lisp:nil)
                        (v2bot-role :initarg :|v2BotRole| :type
                         (common-lisp:or iam-role-arn common-lisp:null)
                         :accessor %start-migration-response-v2bot-role
                         :initform common-lisp:nil)
                        (v2bot-id :initarg :|v2BotId| :type
                         (common-lisp:or v2bot-id common-lisp:null) :accessor
                         %start-migration-response-v2bot-id :initform
                         common-lisp:nil)
                        (v1bot-locale :initarg :|v1BotLocale| :type
                         (common-lisp:or locale common-lisp:null) :accessor
                         %start-migration-response-v1bot-locale :initform
                         common-lisp:nil)
                        (v1bot-version :initarg :|v1BotVersion| :type
                         (common-lisp:or version common-lisp:null) :accessor
                         %start-migration-response-v1bot-version :initform
                         common-lisp:nil)
                        (v1bot-name :initarg :|v1BotName| :type
                         (common-lisp:or bot-name common-lisp:null) :accessor
                         %start-migration-response-v1bot-name :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'start-migration-response 'make-start-migration-response))
 (common-lisp:defun make-start-migration-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key migration-timestamp migration-strategy
                     migration-id v2bot-role v2bot-id v1bot-locale
                     v1bot-version v1bot-name)
   (common-lisp:apply #'common-lisp:make-instance 'start-migration-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-migration-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-migration-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'v1bot-name))
      (common-lisp:list
       (common-lisp:cons "v1BotName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'v1bot-version))
      (common-lisp:list
       (common-lisp:cons "v1BotVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'v1bot-locale))
      (common-lisp:list
       (common-lisp:cons "v1BotLocale"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'v2bot-id))
      (common-lisp:list
       (common-lisp:cons "v2BotId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'v2bot-role))
      (common-lisp:list
       (common-lisp:cons "v2BotRole"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'migration-id))
      (common-lisp:list
       (common-lisp:cons "migrationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'migration-strategy))
      (common-lisp:list
       (common-lisp:cons "migrationStrategy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'migration-timestamp))
      (common-lisp:list
       (common-lisp:cons "migrationTimestamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-migration-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass statement common-lisp:nil
                       ((response-card :initarg :|responseCard| :type
                         (common-lisp:or response-card common-lisp:null)
                         :accessor %statement-response-card :initform
                         common-lisp:nil)
                        (messages :initarg :|messages| :type
                         (common-lisp:or message-list common-lisp:null)
                         :accessor %statement-messages :initform
                         (common-lisp:error ":messages is required"))))
 (common-lisp:export (common-lisp:list 'statement 'make-statement))
 (common-lisp:defun make-statement
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key response-card messages)
   (common-lisp:apply #'common-lisp:make-instance 'statement
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input statement))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input statement))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'messages))
      (common-lisp:list
       (common-lisp:cons "messages"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'response-card))
      (common-lisp:list
       (common-lisp:cons "responseCard"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input statement))
   common-lisp:nil))
(common-lisp:deftype status () 'common-lisp:string)
(common-lisp:deftype status-type () 'common-lisp:string)
(common-lisp:deftype string () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype string-list () '(trivial-types:proper-list string))
 (common-lisp:defun |make-string-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list string))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype synonym-list () '(trivial-types:proper-list value))
 (common-lisp:defun |make-synonym-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list value))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass tag common-lisp:nil
                       ((value :initarg :|value| :type
                         (common-lisp:or tag-value common-lisp:null) :accessor
                         %tag-value :initform
                         (common-lisp:error ":value is required"))
                        (key :initarg :|key| :type
                         (common-lisp:or tag-key common-lisp:null) :accessor
                         %tag-key :initform
                         (common-lisp:error ":key is required"))))
 (common-lisp:export (common-lisp:list 'tag 'make-tag))
 (common-lisp:defun make-tag
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key value key)
   (common-lisp:apply #'common-lisp:make-instance 'tag
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input tag))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input tag))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key))
      (common-lisp:list
       (common-lisp:cons "key"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input tag))
   common-lisp:nil))
(common-lisp:deftype tag-key () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype tag-key-list () '(trivial-types:proper-list tag-key))
 (common-lisp:defun |make-tag-key-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list tag-key))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype tag-list () '(trivial-types:proper-list tag))
 (common-lisp:defun |make-tag-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list tag))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass tag-resource-request common-lisp:nil
                       ((tags :initarg :|tags| :type
                         (common-lisp:or tag-list common-lisp:null) :accessor
                         %tag-resource-request-tags :initform
                         (common-lisp:error ":tags is required"))
                        (resource-arn :initarg :|resourceArn| :type
                         (common-lisp:or amazon-resource-name common-lisp:null)
                         :accessor %tag-resource-request-resource-arn :initform
                         (common-lisp:error ":resourcearn is required"))))
 (common-lisp:export
  (common-lisp:list 'tag-resource-request 'make-tag-resource-request))
 (common-lisp:defun make-tag-resource-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tags resource-arn)
   (common-lisp:apply #'common-lisp:make-instance 'tag-resource-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input tag-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input tag-resource-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input tag-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass tag-resource-response common-lisp:nil common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'tag-resource-response 'make-tag-resource-response))
 (common-lisp:defun make-tag-resource-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance 'tag-resource-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          tag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          tag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          tag-resource-response))
   common-lisp:nil))
(common-lisp:deftype tag-value () 'common-lisp:string)
(common-lisp:deftype timestamp () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass untag-resource-request common-lisp:nil
                       ((tag-keys :initarg :|tagKeys| :type
                         (common-lisp:or tag-key-list common-lisp:null)
                         :accessor %untag-resource-request-tag-keys :initform
                         (common-lisp:error ":tagkeys is required"))
                        (resource-arn :initarg :|resourceArn| :type
                         (common-lisp:or amazon-resource-name common-lisp:null)
                         :accessor %untag-resource-request-resource-arn
                         :initform
                         (common-lisp:error ":resourcearn is required"))))
 (common-lisp:export
  (common-lisp:list 'untag-resource-request 'make-untag-resource-request))
 (common-lisp:defun make-untag-resource-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tag-keys resource-arn)
   (common-lisp:apply #'common-lisp:make-instance 'untag-resource-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass untag-resource-response common-lisp:nil common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'untag-resource-response 'make-untag-resource-response))
 (common-lisp:defun make-untag-resource-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance 'untag-resource-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-response))
   common-lisp:nil))
(common-lisp:deftype user-id () 'common-lisp:string)
(common-lisp:deftype utterance () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass utterance-data common-lisp:nil
                       ((last-uttered-date :initarg :|lastUtteredDate| :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %utterance-data-last-uttered-date :initform
                         common-lisp:nil)
                        (first-uttered-date :initarg :|firstUtteredDate| :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %utterance-data-first-uttered-date :initform
                         common-lisp:nil)
                        (distinct-users :initarg :|distinctUsers| :type
                         (common-lisp:or count common-lisp:null) :accessor
                         %utterance-data-distinct-users :initform
                         common-lisp:nil)
                        (count :initarg :|count| :type
                         (common-lisp:or count common-lisp:null) :accessor
                         %utterance-data-count :initform common-lisp:nil)
                        (utterance-string :initarg :|utteranceString| :type
                         (common-lisp:or utterance-string common-lisp:null)
                         :accessor %utterance-data-utterance-string :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'utterance-data 'make-utterance-data))
 (common-lisp:defun make-utterance-data
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key last-uttered-date first-uttered-date
                     distinct-users count utterance-string)
   (common-lisp:apply #'common-lisp:make-instance 'utterance-data
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input utterance-data))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input utterance-data))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'utterance-string))
      (common-lisp:list
       (common-lisp:cons "utteranceString"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'count))
      (common-lisp:list
       (common-lisp:cons "count"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'distinct-users))
      (common-lisp:list
       (common-lisp:cons "distinctUsers"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'first-uttered-date))
      (common-lisp:list
       (common-lisp:cons "firstUtteredDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-uttered-date))
      (common-lisp:list
       (common-lisp:cons "lastUtteredDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input utterance-data))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass utterance-list common-lisp:nil
                       ((utterances :initarg :|utterances| :type
                         (common-lisp:or list-of-utterance common-lisp:null)
                         :accessor %utterance-list-utterances :initform
                         common-lisp:nil)
                        (bot-version :initarg :|botVersion| :type
                         (common-lisp:or version common-lisp:null) :accessor
                         %utterance-list-bot-version :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'utterance-list 'make-utterance-list))
 (common-lisp:defun make-utterance-list
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key utterances bot-version)
   (common-lisp:apply #'common-lisp:make-instance 'utterance-list
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input utterance-list))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input utterance-list))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bot-version))
      (common-lisp:list
       (common-lisp:cons "botVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'utterances))
      (common-lisp:list
       (common-lisp:cons "utterances"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input utterance-list))
   common-lisp:nil))
(common-lisp:deftype utterance-string () 'common-lisp:string)
(common-lisp:deftype v2bot-id () 'common-lisp:string)
(common-lisp:deftype v2bot-name () 'common-lisp:string)
(common-lisp:deftype value () 'common-lisp:string)
(common-lisp:deftype version () 'common-lisp:string)
(common-lisp:deftype |roleArn| () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defun create-bot-version
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name checksum)
   (common-lisp:declare (common-lisp:ignorable name checksum))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-bot-version-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lex-models-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/bots/~A/versions"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'name))))
                                                        "CreateBotVersion"
                                                        "2017-04-19"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-bot-version))
(common-lisp:progn
 (common-lisp:defun create-intent-version
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name checksum)
   (common-lisp:declare (common-lisp:ignorable name checksum))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-intent-version-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lex-models-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/intents/~A/versions"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'name))))
                                                        "CreateIntentVersion"
                                                        "2017-04-19"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-intent-version))
(common-lisp:progn
 (common-lisp:defun create-slot-type-version
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name checksum)
   (common-lisp:declare (common-lisp:ignorable name checksum))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-slot-type-version-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lex-models-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/slottypes/~A/versions"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'name))))
                                                        "CreateSlotTypeVersion"
                                                        "2017-04-19"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-slot-type-version))
(common-lisp:progn
 (common-lisp:defun delete-bot
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name)
   (common-lisp:declare (common-lisp:ignorable name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-bot-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lex-models-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/bots/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'name))))
                                                        "DeleteBot"
                                                        "2017-04-19"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-bot))
(common-lisp:progn
 (common-lisp:defun delete-bot-alias
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name bot-name)
   (common-lisp:declare (common-lisp:ignorable name bot-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-bot-alias-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lex-models-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/bots/~A/aliases/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'bot-name))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'name))))
                                                        "DeleteBotAlias"
                                                        "2017-04-19"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-bot-alias))
(common-lisp:progn
 (common-lisp:defun delete-bot-channel-association
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name bot-name bot-alias)
   (common-lisp:declare (common-lisp:ignorable name bot-name bot-alias))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-delete-bot-channel-association-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lex-models-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/bots/~A/aliases/~A/channels/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'bot-name))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'alias-name))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'name))))
                                                        "DeleteBotChannelAssociation"
                                                        "2017-04-19"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-bot-channel-association))
(common-lisp:progn
 (common-lisp:defun delete-bot-version
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name version)
   (common-lisp:declare (common-lisp:ignorable name version))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-bot-version-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lex-models-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/bots/~A/versions/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'name))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'version))))
                                                        "DeleteBotVersion"
                                                        "2017-04-19"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-bot-version))
(common-lisp:progn
 (common-lisp:defun delete-intent
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name)
   (common-lisp:declare (common-lisp:ignorable name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-intent-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lex-models-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/intents/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'name))))
                                                        "DeleteIntent"
                                                        "2017-04-19"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-intent))
(common-lisp:progn
 (common-lisp:defun delete-intent-version
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name version)
   (common-lisp:declare (common-lisp:ignorable name version))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-intent-version-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lex-models-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/intents/~A/versions/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'name))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'version))))
                                                        "DeleteIntentVersion"
                                                        "2017-04-19"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-intent-version))
(common-lisp:progn
 (common-lisp:defun delete-slot-type
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name)
   (common-lisp:declare (common-lisp:ignorable name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-slot-type-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lex-models-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/slottypes/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'name))))
                                                        "DeleteSlotType"
                                                        "2017-04-19"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-slot-type))
(common-lisp:progn
 (common-lisp:defun delete-slot-type-version
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name version)
   (common-lisp:declare (common-lisp:ignorable name version))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-slot-type-version-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lex-models-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/slottypes/~A/version/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'name))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'version))))
                                                        "DeleteSlotTypeVersion"
                                                        "2017-04-19"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-slot-type-version))
(common-lisp:progn
 (common-lisp:defun delete-utterances
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key bot-name user-id)
   (common-lisp:declare (common-lisp:ignorable bot-name user-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-utterances-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lex-models-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/bots/~A/utterances/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'bot-name))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'user-id))))
                                                        "DeleteUtterances"
                                                        "2017-04-19"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-utterances))
(common-lisp:progn
 (common-lisp:defun get-bot
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name version-or-alias)
   (common-lisp:declare (common-lisp:ignorable name version-or-alias))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-bot-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lex-models-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/bots/~A/versions/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'name))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'versionoralias))))
                                                        "GetBot" "2017-04-19"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-bot))
(common-lisp:progn
 (common-lisp:defun get-bot-alias
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name bot-name)
   (common-lisp:declare (common-lisp:ignorable name bot-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-bot-alias-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lex-models-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/bots/~A/aliases/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'bot-name))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'name))))
                                                        "GetBotAlias"
                                                        "2017-04-19"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-bot-alias))
(common-lisp:progn
 (common-lisp:defun get-bot-aliases
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key bot-name next-token max-results
                     name-contains)
   (common-lisp:declare
    (common-lisp:ignorable bot-name next-token max-results name-contains))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-bot-aliases-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lex-models-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/bots/~A/aliases/"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'bot-name))))
                                                        "GetBotAliases"
                                                        "2017-04-19"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-bot-aliases))
(common-lisp:progn
 (common-lisp:defun get-bot-channel-association
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name bot-name bot-alias)
   (common-lisp:declare (common-lisp:ignorable name bot-name bot-alias))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-get-bot-channel-association-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lex-models-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/bots/~A/aliases/~A/channels/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'bot-name))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'alias-name))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'name))))
                                                        "GetBotChannelAssociation"
                                                        "2017-04-19"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-bot-channel-association))
(common-lisp:progn
 (common-lisp:defun get-bot-channel-associations
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key bot-name bot-alias next-token max-results
                     name-contains)
   (common-lisp:declare
    (common-lisp:ignorable bot-name bot-alias next-token max-results
     name-contains))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-get-bot-channel-associations-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lex-models-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/bots/~A/aliases/~A/channels/"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'bot-name))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'alias-name))))
                                                        "GetBotChannelAssociations"
                                                        "2017-04-19"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-bot-channel-associations))
(common-lisp:progn
 (common-lisp:defun get-bot-versions
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name next-token max-results)
   (common-lisp:declare (common-lisp:ignorable name next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-bot-versions-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lex-models-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/bots/~A/versions/"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'name))))
                                                        "GetBotVersions"
                                                        "2017-04-19"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-bot-versions))
(common-lisp:progn
 (common-lisp:defun get-bots
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key next-token max-results name-contains)
   (common-lisp:declare
    (common-lisp:ignorable next-token max-results name-contains))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-bots-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lex-models-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        "/bots/" "GetBots"
                                                        "2017-04-19"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-bots))
(common-lisp:progn
 (common-lisp:defun get-builtin-intent
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key signature)
   (common-lisp:declare (common-lisp:ignorable signature))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-builtin-intent-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lex-models-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/builtins/intents/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'signature))))
                                                        "GetBuiltinIntent"
                                                        "2017-04-19"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-builtin-intent))
(common-lisp:progn
 (common-lisp:defun get-builtin-intents
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key locale signature-contains next-token
                     max-results)
   (common-lisp:declare
    (common-lisp:ignorable locale signature-contains next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-builtin-intents-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lex-models-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        "/builtins/intents/"
                                                        "GetBuiltinIntents"
                                                        "2017-04-19"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-builtin-intents))
(common-lisp:progn
 (common-lisp:defun get-builtin-slot-types
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key locale signature-contains next-token
                     max-results)
   (common-lisp:declare
    (common-lisp:ignorable locale signature-contains next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-builtin-slot-types-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lex-models-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        "/builtins/slottypes/"
                                                        "GetBuiltinSlotTypes"
                                                        "2017-04-19"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-builtin-slot-types))
(common-lisp:progn
 (common-lisp:defun get-export
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name version resource-type export-type)
   (common-lisp:declare
    (common-lisp:ignorable name version resource-type export-type))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-export-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lex-models-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        "/exports/" "GetExport"
                                                        "2017-04-19"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-export))
(common-lisp:progn
 (common-lisp:defun get-import
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key import-id)
   (common-lisp:declare (common-lisp:ignorable import-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-import-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lex-models-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/imports/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'import-id))))
                                                        "GetImport"
                                                        "2017-04-19"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-import))
(common-lisp:progn
 (common-lisp:defun get-intent
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name version)
   (common-lisp:declare (common-lisp:ignorable name version))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-intent-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lex-models-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/intents/~A/versions/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'name))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'version))))
                                                        "GetIntent"
                                                        "2017-04-19"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-intent))
(common-lisp:progn
 (common-lisp:defun get-intent-versions
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name next-token max-results)
   (common-lisp:declare (common-lisp:ignorable name next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-intent-versions-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lex-models-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/intents/~A/versions/"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'name))))
                                                        "GetIntentVersions"
                                                        "2017-04-19"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-intent-versions))
(common-lisp:progn
 (common-lisp:defun get-intents
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key next-token max-results name-contains)
   (common-lisp:declare
    (common-lisp:ignorable next-token max-results name-contains))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-intents-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lex-models-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        "/intents/"
                                                        "GetIntents"
                                                        "2017-04-19"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-intents))
(common-lisp:progn
 (common-lisp:defun get-migration
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key migration-id)
   (common-lisp:declare (common-lisp:ignorable migration-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-migration-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lex-models-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/migrations/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'migration-id))))
                                                        "GetMigration"
                                                        "2017-04-19"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-migration))
(common-lisp:progn
 (common-lisp:defun get-migrations
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key sort-by-attribute sort-by-order
                     v1bot-name-contains migration-status-equals max-results
                     next-token)
   (common-lisp:declare
    (common-lisp:ignorable sort-by-attribute sort-by-order v1bot-name-contains
     migration-status-equals max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-migrations-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lex-models-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        "/migrations"
                                                        "GetMigrations"
                                                        "2017-04-19"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-migrations))
(common-lisp:progn
 (common-lisp:defun get-slot-type
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name version)
   (common-lisp:declare (common-lisp:ignorable name version))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-slot-type-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lex-models-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/slottypes/~A/versions/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'name))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'version))))
                                                        "GetSlotType"
                                                        "2017-04-19"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-slot-type))
(common-lisp:progn
 (common-lisp:defun get-slot-type-versions
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name next-token max-results)
   (common-lisp:declare (common-lisp:ignorable name next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-slot-type-versions-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lex-models-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/slottypes/~A/versions/"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'name))))
                                                        "GetSlotTypeVersions"
                                                        "2017-04-19"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-slot-type-versions))
(common-lisp:progn
 (common-lisp:defun get-slot-types
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key next-token max-results name-contains)
   (common-lisp:declare
    (common-lisp:ignorable next-token max-results name-contains))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-slot-types-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lex-models-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        "/slottypes/"
                                                        "GetSlotTypes"
                                                        "2017-04-19"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-slot-types))
(common-lisp:progn
 (common-lisp:defun get-utterances-view
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key bot-name bot-versions status-type)
   (common-lisp:declare
    (common-lisp:ignorable bot-name bot-versions status-type))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-utterances-view-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lex-models-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/bots/~A/utterances?view=aggregation"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'botname))))
                                                        "GetUtterancesView"
                                                        "2017-04-19"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-utterances-view))
(common-lisp:progn
 (common-lisp:defun list-tags-for-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn)
   (common-lisp:declare (common-lisp:ignorable resource-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-tags-for-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lex-models-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/tags/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'resource-arn))))
                                                        "ListTagsForResource"
                                                        "2017-04-19"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-tags-for-resource))
(common-lisp:progn
 (common-lisp:defun put-bot
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name description intents
                     enable-model-improvements nlu-intent-confidence-threshold
                     clarification-prompt abort-statement
                     idle-session-ttlin-seconds voice-id checksum
                     process-behavior locale child-directed detect-sentiment
                     create-version tags)
   (common-lisp:declare
    (common-lisp:ignorable name description intents enable-model-improvements
     nlu-intent-confidence-threshold clarification-prompt abort-statement
     idle-session-ttlin-seconds voice-id checksum process-behavior locale
     child-directed detect-sentiment create-version tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-put-bot-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lex-models-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/bots/~A/versions/$LATEST"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'name))))
                                                        "PutBot" "2017-04-19"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'put-bot))
(common-lisp:progn
 (common-lisp:defun put-bot-alias
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name description bot-version bot-name
                     checksum conversation-logs tags)
   (common-lisp:declare
    (common-lisp:ignorable name description bot-version bot-name checksum
     conversation-logs tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-put-bot-alias-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lex-models-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/bots/~A/aliases/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'bot-name))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'name))))
                                                        "PutBotAlias"
                                                        "2017-04-19"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'put-bot-alias))
(common-lisp:progn
 (common-lisp:defun put-intent
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name description slots sample-utterances
                     confirmation-prompt rejection-statement follow-up-prompt
                     conclusion-statement dialog-code-hook fulfillment-activity
                     parent-intent-signature checksum create-version
                     kendra-configuration input-contexts output-contexts)
   (common-lisp:declare
    (common-lisp:ignorable name description slots sample-utterances
     confirmation-prompt rejection-statement follow-up-prompt
     conclusion-statement dialog-code-hook fulfillment-activity
     parent-intent-signature checksum create-version kendra-configuration
     input-contexts output-contexts))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-put-intent-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lex-models-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/intents/~A/versions/$LATEST"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'name))))
                                                        "PutIntent"
                                                        "2017-04-19"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'put-intent))
(common-lisp:progn
 (common-lisp:defun put-slot-type
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name description enumeration-values
                     checksum value-selection-strategy create-version
                     parent-slot-type-signature slot-type-configurations)
   (common-lisp:declare
    (common-lisp:ignorable name description enumeration-values checksum
     value-selection-strategy create-version parent-slot-type-signature
     slot-type-configurations))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-put-slot-type-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lex-models-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/slottypes/~A/versions/$LATEST"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'name))))
                                                        "PutSlotType"
                                                        "2017-04-19"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'put-slot-type))
(common-lisp:progn
 (common-lisp:defun start-import
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key payload resource-type merge-strategy
                     tags)
   (common-lisp:declare
    (common-lisp:ignorable payload resource-type merge-strategy tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-start-import-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lex-models-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        "/imports/"
                                                        "StartImport"
                                                        "2017-04-19"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'start-import))
(common-lisp:progn
 (common-lisp:defun start-migration
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key v1bot-name v1bot-version v2bot-name
                     v2bot-role migration-strategy)
   (common-lisp:declare
    (common-lisp:ignorable v1bot-name v1bot-version v2bot-name v2bot-role
     migration-strategy))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-start-migration-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lex-models-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        "/migrations"
                                                        "StartMigration"
                                                        "2017-04-19"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'start-migration))
(common-lisp:progn
 (common-lisp:defun tag-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn tags)
   (common-lisp:declare (common-lisp:ignorable resource-arn tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-tag-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lex-models-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/tags/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'resource-arn))))
                                                        "TagResource"
                                                        "2017-04-19"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'tag-resource))
(common-lisp:progn
 (common-lisp:defun untag-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn tag-keys)
   (common-lisp:declare (common-lisp:ignorable resource-arn tag-keys))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-untag-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lex-models-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/tags/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'resource-arn))))
                                                        "UntagResource"
                                                        "2017-04-19"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'untag-resource))
