;; DO NOT EDIT: File is generated by AWS-SDK/GENERATOR.

(common-lisp:defpackage #:aws-sdk/services/ce/api
  (:use)
  (:nicknames #:aws/ce)
  (:import-from #:aws-sdk/generator/shape)
  (:import-from #:aws-sdk/generator/operation)
  (:import-from #:aws-sdk/api)
  (:import-from #:aws-sdk/request)
  (:import-from #:aws-sdk/json-request)
  (:import-from #:aws-sdk/rest-json-request)
  (:import-from #:aws-sdk/rest-xml-request)
  (:import-from #:aws-sdk/query-request)
  (:import-from #:aws-sdk/error))
(common-lisp:in-package #:aws-sdk/services/ce/api)
(common-lisp:progn
 (common-lisp:define-condition ce-error
     (aws-sdk/error:aws-error)
     common-lisp:nil)
 (common-lisp:export 'ce-error))
(common-lisp:progn
 (common-lisp:defclass ce-request (aws-sdk/json-request:json-request)
                       common-lisp:nil
                       (:default-initargs :service "ce" :api-version
                        "2017-10-25" :host-prefix "ce" :signing-name "ce"
                        :global-host common-lisp:nil :target-prefix
                        "AWSInsightsIndexService" :json-version "1.1"))
 (common-lisp:export 'ce-request))
(common-lisp:defvar *error-map*
  '(("BillExpirationException" . bill-expiration-exception)
    ("DataUnavailableException" . data-unavailable-exception)
    ("GenerationExistsException" . generation-exists-exception)
    ("InvalidNextTokenException" . invalid-next-token-exception)
    ("LimitExceededException" . limit-exceeded-exception)
    ("RequestChangedException" . request-changed-exception)
    ("ResourceNotFoundException" . resource-not-found-exception)
    ("ServiceQuotaExceededException" . service-quota-exceeded-exception)
    ("TooManyTagsException" . too-many-tags-exception)
    ("UnknownMonitorException" . unknown-monitor-exception)
    ("UnknownSubscriptionException" . unknown-subscription-exception)
    ("UnresolvableUsageUnitException" . unresolvable-usage-unit-exception)))
(common-lisp:deftype account-scope () 'common-lisp:string)
(common-lisp:deftype amortized-recurring-fee () 'common-lisp:string)
(common-lisp:deftype amortized-upfront-fee () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype anomalies () '(trivial-types:proper-list anomaly))
 (common-lisp:defun make-anomalies
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list anomaly))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (anomaly (:copier common-lisp:nil) (:conc-name "struct-shape-anomaly-"))
   (anomaly-id (common-lisp:error ":anomaly-id is required") :type
    (common-lisp:or generic-string common-lisp:null))
   (anomaly-start-date common-lisp:nil :type
    (common-lisp:or year-month-day common-lisp:null))
   (anomaly-end-date common-lisp:nil :type
    (common-lisp:or year-month-day common-lisp:null))
   (dimension-value common-lisp:nil :type
    (common-lisp:or generic-string common-lisp:null))
   (root-causes common-lisp:nil :type
    (common-lisp:or root-causes common-lisp:null))
   (anomaly-score (common-lisp:error ":anomaly-score is required") :type
    (common-lisp:or anomaly-score common-lisp:null))
   (impact (common-lisp:error ":impact is required") :type
    (common-lisp:or impact common-lisp:null))
   (monitor-arn (common-lisp:error ":monitor-arn is required") :type
    (common-lisp:or generic-string common-lisp:null))
   (feedback common-lisp:nil :type
    (common-lisp:or anomaly-feedback-type common-lisp:null)))
 (common-lisp:export (common-lisp:list 'anomaly 'make-anomaly))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input anomaly))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input anomaly))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'anomaly-id))
      (common-lisp:list
       (common-lisp:cons "AnomalyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'anomaly-start-date))
      (common-lisp:list
       (common-lisp:cons "AnomalyStartDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'anomaly-end-date))
      (common-lisp:list
       (common-lisp:cons "AnomalyEndDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dimension-value))
      (common-lisp:list
       (common-lisp:cons "DimensionValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'root-causes))
      (common-lisp:list
       (common-lisp:cons "RootCauses"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'anomaly-score))
      (common-lisp:list
       (common-lisp:cons "AnomalyScore"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'impact))
      (common-lisp:list
       (common-lisp:cons "Impact"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'monitor-arn))
      (common-lisp:list
       (common-lisp:cons "MonitorArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'feedback))
      (common-lisp:list
       (common-lisp:cons "Feedback"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input anomaly))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (anomaly-date-interval (:copier common-lisp:nil)
      (:conc-name "struct-shape-anomaly-date-interval-"))
   (start-date (common-lisp:error ":start-date is required") :type
    (common-lisp:or year-month-day common-lisp:null))
   (end-date common-lisp:nil :type
    (common-lisp:or year-month-day common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'anomaly-date-interval 'make-anomaly-date-interval))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          anomaly-date-interval))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          anomaly-date-interval))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start-date))
      (common-lisp:list
       (common-lisp:cons "StartDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'end-date))
      (common-lisp:list
       (common-lisp:cons "EndDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          anomaly-date-interval))
   common-lisp:nil))
(common-lisp:deftype anomaly-feedback-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (anomaly-monitor (:copier common-lisp:nil)
      (:conc-name "struct-shape-anomaly-monitor-"))
   (monitor-arn common-lisp:nil :type
    (common-lisp:or generic-string common-lisp:null))
   (monitor-name (common-lisp:error ":monitor-name is required") :type
    (common-lisp:or generic-string common-lisp:null))
   (creation-date common-lisp:nil :type
    (common-lisp:or year-month-day common-lisp:null))
   (last-updated-date common-lisp:nil :type
    (common-lisp:or year-month-day common-lisp:null))
   (last-evaluated-date common-lisp:nil :type
    (common-lisp:or year-month-day common-lisp:null))
   (monitor-type (common-lisp:error ":monitor-type is required") :type
    (common-lisp:or monitor-type common-lisp:null))
   (monitor-dimension common-lisp:nil :type
    (common-lisp:or monitor-dimension common-lisp:null))
   (monitor-specification common-lisp:nil :type
    (common-lisp:or expression common-lisp:null))
   (dimensional-value-count common-lisp:nil :type
    (common-lisp:or non-negative-integer common-lisp:null)))
 (common-lisp:export (common-lisp:list 'anomaly-monitor 'make-anomaly-monitor))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input anomaly-monitor))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input anomaly-monitor))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'monitor-arn))
      (common-lisp:list
       (common-lisp:cons "MonitorArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'monitor-name))
      (common-lisp:list
       (common-lisp:cons "MonitorName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-date))
      (common-lisp:list
       (common-lisp:cons "CreationDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-updated-date))
      (common-lisp:list
       (common-lisp:cons "LastUpdatedDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-evaluated-date))
      (common-lisp:list
       (common-lisp:cons "LastEvaluatedDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'monitor-type))
      (common-lisp:list
       (common-lisp:cons "MonitorType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'monitor-dimension))
      (common-lisp:list
       (common-lisp:cons "MonitorDimension"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'monitor-specification))
      (common-lisp:list
       (common-lisp:cons "MonitorSpecification"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dimensional-value-count))
      (common-lisp:list
       (common-lisp:cons "DimensionalValueCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input anomaly-monitor))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype anomaly-monitors ()
   '(trivial-types:proper-list anomaly-monitor))
 (common-lisp:defun make-anomaly-monitors
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list anomaly-monitor))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (anomaly-score (:copier common-lisp:nil)
      (:conc-name "struct-shape-anomaly-score-"))
   (max-score (common-lisp:error ":max-score is required") :type
    (common-lisp:or generic-double common-lisp:null))
   (current-score (common-lisp:error ":current-score is required") :type
    (common-lisp:or generic-double common-lisp:null)))
 (common-lisp:export (common-lisp:list 'anomaly-score 'make-anomaly-score))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input anomaly-score))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input anomaly-score))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-score))
      (common-lisp:list
       (common-lisp:cons "MaxScore"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'current-score))
      (common-lisp:list
       (common-lisp:cons "CurrentScore"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input anomaly-score))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (anomaly-subscription (:copier common-lisp:nil)
      (:conc-name "struct-shape-anomaly-subscription-"))
   (subscription-arn common-lisp:nil :type
    (common-lisp:or generic-string common-lisp:null))
   (account-id common-lisp:nil :type
    (common-lisp:or generic-string common-lisp:null))
   (monitor-arn-list (common-lisp:error ":monitor-arn-list is required") :type
    (common-lisp:or monitor-arn-list common-lisp:null))
   (subscribers (common-lisp:error ":subscribers is required") :type
    (common-lisp:or subscribers common-lisp:null))
   (threshold common-lisp:nil :type
    (common-lisp:or nullable-non-negative-double common-lisp:null))
   (frequency (common-lisp:error ":frequency is required") :type
    (common-lisp:or anomaly-subscription-frequency common-lisp:null))
   (subscription-name (common-lisp:error ":subscription-name is required")
    :type (common-lisp:or generic-string common-lisp:null))
   (threshold-expression common-lisp:nil :type
    (common-lisp:or expression common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'anomaly-subscription 'make-anomaly-subscription))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input anomaly-subscription))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input anomaly-subscription))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subscription-arn))
      (common-lisp:list
       (common-lisp:cons "SubscriptionArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-id))
      (common-lisp:list
       (common-lisp:cons "AccountId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'monitor-arn-list))
      (common-lisp:list
       (common-lisp:cons "MonitorArnList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subscribers))
      (common-lisp:list
       (common-lisp:cons "Subscribers"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'threshold))
      (common-lisp:list
       (common-lisp:cons "Threshold"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'frequency))
      (common-lisp:list
       (common-lisp:cons "Frequency"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subscription-name))
      (common-lisp:list
       (common-lisp:cons "SubscriptionName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'threshold-expression))
      (common-lisp:list
       (common-lisp:cons "ThresholdExpression"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input anomaly-subscription))
   common-lisp:nil))
(common-lisp:deftype anomaly-subscription-frequency () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype anomaly-subscriptions ()
   '(trivial-types:proper-list anomaly-subscription))
 (common-lisp:defun make-anomaly-subscriptions
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list anomaly-subscription))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype approximate-usage-records-per-service ()
   'common-lisp:hash-table)
 (common-lisp:defun make-approximate-usage-records-per-service
                    (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:deftype approximation-dimension () 'common-lisp:string)
(common-lisp:deftype arn () 'common-lisp:string)
(common-lisp:deftype attribute-type () 'common-lisp:string)
(common-lisp:deftype attribute-value () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype attributes () 'common-lisp:hash-table)
 (common-lisp:defun make-attributes (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:progn
 (common-lisp:define-condition bill-expiration-exception
     (ce-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       bill-expiration-exception-message)))
 (common-lisp:export
  (common-lisp:list 'bill-expiration-exception
                    'bill-expiration-exception-message)))
(common-lisp:deftype context () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (cost-allocation-tag (:copier common-lisp:nil)
      (:conc-name "struct-shape-cost-allocation-tag-"))
   (tag-key (common-lisp:error ":tag-key is required") :type
    (common-lisp:or tag-key common-lisp:null))
   (type (common-lisp:error ":type is required") :type
    (common-lisp:or cost-allocation-tag-type common-lisp:null))
   (status (common-lisp:error ":status is required") :type
    (common-lisp:or cost-allocation-tag-status common-lisp:null))
   (last-updated-date common-lisp:nil :type
    (common-lisp:or zoned-date-time common-lisp:null))
   (last-used-date common-lisp:nil :type
    (common-lisp:or zoned-date-time common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'cost-allocation-tag 'make-cost-allocation-tag))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input cost-allocation-tag))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input cost-allocation-tag))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tag-key))
      (common-lisp:list
       (common-lisp:cons "TagKey"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-updated-date))
      (common-lisp:list
       (common-lisp:cons "LastUpdatedDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-used-date))
      (common-lisp:list
       (common-lisp:cons "LastUsedDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input cost-allocation-tag))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype cost-allocation-tag-key-list ()
   '(trivial-types:proper-list tag-key))
 (common-lisp:defun make-cost-allocation-tag-key-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list tag-key))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype cost-allocation-tag-list ()
   '(trivial-types:proper-list cost-allocation-tag))
 (common-lisp:defun make-cost-allocation-tag-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list cost-allocation-tag))
   aws-sdk/generator/shape::members))
(common-lisp:deftype cost-allocation-tag-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (cost-allocation-tag-status-entry (:copier common-lisp:nil)
      (:conc-name "struct-shape-cost-allocation-tag-status-entry-"))
   (tag-key (common-lisp:error ":tag-key is required") :type
    (common-lisp:or tag-key common-lisp:null))
   (status (common-lisp:error ":status is required") :type
    (common-lisp:or cost-allocation-tag-status common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'cost-allocation-tag-status-entry
                    'make-cost-allocation-tag-status-entry))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          cost-allocation-tag-status-entry))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          cost-allocation-tag-status-entry))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tag-key))
      (common-lisp:list
       (common-lisp:cons "TagKey"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          cost-allocation-tag-status-entry))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype cost-allocation-tag-status-list ()
   '(trivial-types:proper-list cost-allocation-tag-status-entry))
 (common-lisp:defun make-cost-allocation-tag-status-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            cost-allocation-tag-status-entry))
   aws-sdk/generator/shape::members))
(common-lisp:deftype cost-allocation-tag-type () 'common-lisp:string)
(common-lisp:deftype cost-allocation-tags-max-results () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defstruct
     (cost-category (:copier common-lisp:nil)
      (:conc-name "struct-shape-cost-category-"))
   (cost-category-arn (common-lisp:error ":cost-category-arn is required")
    :type (common-lisp:or arn common-lisp:null))
   (effective-start (common-lisp:error ":effective-start is required") :type
    (common-lisp:or zoned-date-time common-lisp:null))
   (effective-end common-lisp:nil :type
    (common-lisp:or zoned-date-time common-lisp:null))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or cost-category-name common-lisp:null))
   (rule-version (common-lisp:error ":rule-version is required") :type
    (common-lisp:or cost-category-rule-version common-lisp:null))
   (rules (common-lisp:error ":rules is required") :type
    (common-lisp:or cost-category-rules-list common-lisp:null))
   (split-charge-rules common-lisp:nil :type
    (common-lisp:or cost-category-split-charge-rules-list common-lisp:null))
   (processing-status common-lisp:nil :type
    (common-lisp:or cost-category-processing-status-list common-lisp:null))
   (default-value common-lisp:nil :type
    (common-lisp:or cost-category-value common-lisp:null)))
 (common-lisp:export (common-lisp:list 'cost-category 'make-cost-category))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input cost-category))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input cost-category))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cost-category-arn))
      (common-lisp:list
       (common-lisp:cons "CostCategoryArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'effective-start))
      (common-lisp:list
       (common-lisp:cons "EffectiveStart"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'effective-end))
      (common-lisp:list
       (common-lisp:cons "EffectiveEnd"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rule-version))
      (common-lisp:list
       (common-lisp:cons "RuleVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rules))
      (common-lisp:list
       (common-lisp:cons "Rules"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'split-charge-rules))
      (common-lisp:list
       (common-lisp:cons "SplitChargeRules"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'processing-status))
      (common-lisp:list
       (common-lisp:cons "ProcessingStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'default-value))
      (common-lisp:list
       (common-lisp:cons "DefaultValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input cost-category))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (cost-category-inherited-value-dimension (:copier common-lisp:nil)
      (:conc-name "struct-shape-cost-category-inherited-value-dimension-"))
   (dimension-name common-lisp:nil :type
    (common-lisp:or cost-category-inherited-value-dimension-name
                    common-lisp:null))
   (dimension-key common-lisp:nil :type
    (common-lisp:or generic-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'cost-category-inherited-value-dimension
                    'make-cost-category-inherited-value-dimension))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          cost-category-inherited-value-dimension))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          cost-category-inherited-value-dimension))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dimension-name))
      (common-lisp:list
       (common-lisp:cons "DimensionName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dimension-key))
      (common-lisp:list
       (common-lisp:cons "DimensionKey"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          cost-category-inherited-value-dimension))
   common-lisp:nil))
(common-lisp:deftype cost-category-inherited-value-dimension-name ()
  'common-lisp:string)
(common-lisp:deftype cost-category-max-results () 'common-lisp:integer)
(common-lisp:deftype cost-category-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype cost-category-names-list ()
   '(trivial-types:proper-list cost-category-name))
 (common-lisp:defun make-cost-category-names-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list cost-category-name))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (cost-category-processing-status (:copier common-lisp:nil)
      (:conc-name "struct-shape-cost-category-processing-status-"))
   (component common-lisp:nil :type
    (common-lisp:or cost-category-status-component common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or cost-category-status common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'cost-category-processing-status
                    'make-cost-category-processing-status))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          cost-category-processing-status))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          cost-category-processing-status))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'component))
      (common-lisp:list
       (common-lisp:cons "Component"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          cost-category-processing-status))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype cost-category-processing-status-list ()
   '(trivial-types:proper-list cost-category-processing-status))
 (common-lisp:defun make-cost-category-processing-status-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            cost-category-processing-status))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (cost-category-reference (:copier common-lisp:nil)
      (:conc-name "struct-shape-cost-category-reference-"))
   (cost-category-arn common-lisp:nil :type
    (common-lisp:or arn common-lisp:null))
   (name common-lisp:nil :type
    (common-lisp:or cost-category-name common-lisp:null))
   (effective-start common-lisp:nil :type
    (common-lisp:or zoned-date-time common-lisp:null))
   (effective-end common-lisp:nil :type
    (common-lisp:or zoned-date-time common-lisp:null))
   (number-of-rules common-lisp:nil :type
    (common-lisp:or non-negative-integer common-lisp:null))
   (processing-status common-lisp:nil :type
    (common-lisp:or cost-category-processing-status-list common-lisp:null))
   (values common-lisp:nil :type
    (common-lisp:or cost-category-values-list common-lisp:null))
   (default-value common-lisp:nil :type
    (common-lisp:or cost-category-value common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'cost-category-reference 'make-cost-category-reference))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          cost-category-reference))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          cost-category-reference))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cost-category-arn))
      (common-lisp:list
       (common-lisp:cons "CostCategoryArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'effective-start))
      (common-lisp:list
       (common-lisp:cons "EffectiveStart"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'effective-end))
      (common-lisp:list
       (common-lisp:cons "EffectiveEnd"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'number-of-rules))
      (common-lisp:list
       (common-lisp:cons "NumberOfRules"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'processing-status))
      (common-lisp:list
       (common-lisp:cons "ProcessingStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'values))
      (common-lisp:list
       (common-lisp:cons "Values"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'default-value))
      (common-lisp:list
       (common-lisp:cons "DefaultValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          cost-category-reference))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype cost-category-references-list ()
   '(trivial-types:proper-list cost-category-reference))
 (common-lisp:defun make-cost-category-references-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list cost-category-reference))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (cost-category-rule (:copier common-lisp:nil)
      (:conc-name "struct-shape-cost-category-rule-"))
   (value common-lisp:nil :type
    (common-lisp:or cost-category-value common-lisp:null))
   (rule common-lisp:nil :type (common-lisp:or expression common-lisp:null))
   (inherited-value common-lisp:nil :type
    (common-lisp:or cost-category-inherited-value-dimension common-lisp:null))
   (type common-lisp:nil :type
    (common-lisp:or cost-category-rule-type common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'cost-category-rule 'make-cost-category-rule))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input cost-category-rule))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input cost-category-rule))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "Value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rule))
      (common-lisp:list
       (common-lisp:cons "Rule"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'inherited-value))
      (common-lisp:list
       (common-lisp:cons "InheritedValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input cost-category-rule))
   common-lisp:nil))
(common-lisp:deftype cost-category-rule-type () 'common-lisp:string)
(common-lisp:deftype cost-category-rule-version () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype cost-category-rules-list ()
   '(trivial-types:proper-list cost-category-rule))
 (common-lisp:defun make-cost-category-rules-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list cost-category-rule))
   aws-sdk/generator/shape::members))
(common-lisp:deftype cost-category-split-charge-method () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (cost-category-split-charge-rule (:copier common-lisp:nil)
      (:conc-name "struct-shape-cost-category-split-charge-rule-"))
   (source (common-lisp:error ":source is required") :type
    (common-lisp:or generic-string common-lisp:null))
   (targets (common-lisp:error ":targets is required") :type
    (common-lisp:or cost-category-split-charge-rule-targets-list
                    common-lisp:null))
   (method (common-lisp:error ":method is required") :type
    (common-lisp:or cost-category-split-charge-method common-lisp:null))
   (parameters common-lisp:nil :type
    (common-lisp:or cost-category-split-charge-rule-parameters-list
                    common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'cost-category-split-charge-rule
                    'make-cost-category-split-charge-rule))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          cost-category-split-charge-rule))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          cost-category-split-charge-rule))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source))
      (common-lisp:list
       (common-lisp:cons "Source"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'targets))
      (common-lisp:list
       (common-lisp:cons "Targets"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'method))
      (common-lisp:list
       (common-lisp:cons "Method"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'parameters))
      (common-lisp:list
       (common-lisp:cons "Parameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          cost-category-split-charge-rule))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (cost-category-split-charge-rule-parameter (:copier common-lisp:nil)
      (:conc-name "struct-shape-cost-category-split-charge-rule-parameter-"))
   (type (common-lisp:error ":type is required") :type
    (common-lisp:or cost-category-split-charge-rule-parameter-type
                    common-lisp:null))
   (values (common-lisp:error ":values is required") :type
    (common-lisp:or cost-category-split-charge-rule-parameter-values-list
                    common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'cost-category-split-charge-rule-parameter
                    'make-cost-category-split-charge-rule-parameter))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          cost-category-split-charge-rule-parameter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          cost-category-split-charge-rule-parameter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'values))
      (common-lisp:list
       (common-lisp:cons "Values"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          cost-category-split-charge-rule-parameter))
   common-lisp:nil))
(common-lisp:deftype cost-category-split-charge-rule-parameter-type ()
  'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype cost-category-split-charge-rule-parameter-values-list ()
   '(trivial-types:proper-list generic-string))
 (common-lisp:defun make-cost-category-split-charge-rule-parameter-values-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list generic-string))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype cost-category-split-charge-rule-parameters-list ()
   '(trivial-types:proper-list cost-category-split-charge-rule-parameter))
 (common-lisp:defun make-cost-category-split-charge-rule-parameters-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            cost-category-split-charge-rule-parameter))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype cost-category-split-charge-rule-targets-list ()
   '(trivial-types:proper-list generic-string))
 (common-lisp:defun make-cost-category-split-charge-rule-targets-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list generic-string))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype cost-category-split-charge-rules-list ()
   '(trivial-types:proper-list cost-category-split-charge-rule))
 (common-lisp:defun make-cost-category-split-charge-rules-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            cost-category-split-charge-rule))
   aws-sdk/generator/shape::members))
(common-lisp:deftype cost-category-status () 'common-lisp:string)
(common-lisp:deftype cost-category-status-component () 'common-lisp:string)
(common-lisp:deftype cost-category-value () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (cost-category-values (:copier common-lisp:nil)
      (:conc-name "struct-shape-cost-category-values-"))
   (key common-lisp:nil :type
    (common-lisp:or cost-category-name common-lisp:null))
   (values common-lisp:nil :type (common-lisp:or values common-lisp:null))
   (match-options common-lisp:nil :type
    (common-lisp:or match-options common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'cost-category-values 'make-cost-category-values))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input cost-category-values))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input cost-category-values))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key))
      (common-lisp:list
       (common-lisp:cons "Key"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'values))
      (common-lisp:list
       (common-lisp:cons "Values"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'match-options))
      (common-lisp:list
       (common-lisp:cons "MatchOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input cost-category-values))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype cost-category-values-list ()
   '(trivial-types:proper-list cost-category-value))
 (common-lisp:defun make-cost-category-values-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list cost-category-value))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (coverage (:copier common-lisp:nil) (:conc-name "struct-shape-coverage-"))
   (coverage-hours common-lisp:nil :type
    (common-lisp:or coverage-hours common-lisp:null))
   (coverage-normalized-units common-lisp:nil :type
    (common-lisp:or coverage-normalized-units common-lisp:null))
   (coverage-cost common-lisp:nil :type
    (common-lisp:or coverage-cost common-lisp:null)))
 (common-lisp:export (common-lisp:list 'coverage 'make-coverage))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input coverage))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input coverage))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'coverage-hours))
      (common-lisp:list
       (common-lisp:cons "CoverageHours"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'coverage-normalized-units))
      (common-lisp:list
       (common-lisp:cons "CoverageNormalizedUnits"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'coverage-cost))
      (common-lisp:list
       (common-lisp:cons "CoverageCost"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input coverage))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (coverage-by-time (:copier common-lisp:nil)
      (:conc-name "struct-shape-coverage-by-time-"))
   (time-period common-lisp:nil :type
    (common-lisp:or date-interval common-lisp:null))
   (groups common-lisp:nil :type
    (common-lisp:or reservation-coverage-groups common-lisp:null))
   (total common-lisp:nil :type (common-lisp:or coverage common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'coverage-by-time 'make-coverage-by-time))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input coverage-by-time))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input coverage-by-time))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'time-period))
      (common-lisp:list
       (common-lisp:cons "TimePeriod"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'groups))
      (common-lisp:list
       (common-lisp:cons "Groups"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'total))
      (common-lisp:list
       (common-lisp:cons "Total"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input coverage-by-time))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (coverage-cost (:copier common-lisp:nil)
      (:conc-name "struct-shape-coverage-cost-"))
   (on-demand-cost common-lisp:nil :type
    (common-lisp:or on-demand-cost common-lisp:null)))
 (common-lisp:export (common-lisp:list 'coverage-cost 'make-coverage-cost))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input coverage-cost))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input coverage-cost))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'on-demand-cost))
      (common-lisp:list
       (common-lisp:cons "OnDemandCost"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input coverage-cost))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (coverage-hours (:copier common-lisp:nil)
      (:conc-name "struct-shape-coverage-hours-"))
   (on-demand-hours common-lisp:nil :type
    (common-lisp:or on-demand-hours common-lisp:null))
   (reserved-hours common-lisp:nil :type
    (common-lisp:or reserved-hours common-lisp:null))
   (total-running-hours common-lisp:nil :type
    (common-lisp:or total-running-hours common-lisp:null))
   (coverage-hours-percentage common-lisp:nil :type
    (common-lisp:or coverage-hours-percentage common-lisp:null)))
 (common-lisp:export (common-lisp:list 'coverage-hours 'make-coverage-hours))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input coverage-hours))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input coverage-hours))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'on-demand-hours))
      (common-lisp:list
       (common-lisp:cons "OnDemandHours"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'reserved-hours))
      (common-lisp:list
       (common-lisp:cons "ReservedHours"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'total-running-hours))
      (common-lisp:list
       (common-lisp:cons "TotalRunningHours"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'coverage-hours-percentage))
      (common-lisp:list
       (common-lisp:cons "CoverageHoursPercentage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input coverage-hours))
   common-lisp:nil))
(common-lisp:deftype coverage-hours-percentage () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (coverage-normalized-units (:copier common-lisp:nil)
      (:conc-name "struct-shape-coverage-normalized-units-"))
   (on-demand-normalized-units common-lisp:nil :type
    (common-lisp:or on-demand-normalized-units common-lisp:null))
   (reserved-normalized-units common-lisp:nil :type
    (common-lisp:or reserved-normalized-units common-lisp:null))
   (total-running-normalized-units common-lisp:nil :type
    (common-lisp:or total-running-normalized-units common-lisp:null))
   (coverage-normalized-units-percentage common-lisp:nil :type
    (common-lisp:or coverage-normalized-units-percentage common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'coverage-normalized-units
                    'make-coverage-normalized-units))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          coverage-normalized-units))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          coverage-normalized-units))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'on-demand-normalized-units))
      (common-lisp:list
       (common-lisp:cons "OnDemandNormalizedUnits"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'reserved-normalized-units))
      (common-lisp:list
       (common-lisp:cons "ReservedNormalizedUnits"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'total-running-normalized-units))
      (common-lisp:list
       (common-lisp:cons "TotalRunningNormalizedUnits"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'coverage-normalized-units-percentage))
      (common-lisp:list
       (common-lisp:cons "CoverageNormalizedUnitsPercentage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          coverage-normalized-units))
   common-lisp:nil))
(common-lisp:deftype coverage-normalized-units-percentage ()
  'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype coverages-by-time ()
   '(trivial-types:proper-list coverage-by-time))
 (common-lisp:defun make-coverages-by-time
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list coverage-by-time))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (create-anomaly-monitor-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-anomaly-monitor-request-"))
   (anomaly-monitor (common-lisp:error ":anomaly-monitor is required") :type
    (common-lisp:or anomaly-monitor common-lisp:null))
   (resource-tags common-lisp:nil :type
    (common-lisp:or resource-tag-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-anomaly-monitor-request
                    'make-create-anomaly-monitor-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-anomaly-monitor-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-anomaly-monitor-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'anomaly-monitor))
      (common-lisp:list
       (common-lisp:cons "AnomalyMonitor"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-tags))
      (common-lisp:list
       (common-lisp:cons "ResourceTags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-anomaly-monitor-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-anomaly-monitor-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-anomaly-monitor-response-"))
   (monitor-arn (common-lisp:error ":monitor-arn is required") :type
    (common-lisp:or generic-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-anomaly-monitor-response
                    'make-create-anomaly-monitor-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-anomaly-monitor-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-anomaly-monitor-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'monitor-arn))
      (common-lisp:list
       (common-lisp:cons "MonitorArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-anomaly-monitor-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-anomaly-subscription-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-anomaly-subscription-request-"))
   (anomaly-subscription
    (common-lisp:error ":anomaly-subscription is required") :type
    (common-lisp:or anomaly-subscription common-lisp:null))
   (resource-tags common-lisp:nil :type
    (common-lisp:or resource-tag-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-anomaly-subscription-request
                    'make-create-anomaly-subscription-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-anomaly-subscription-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-anomaly-subscription-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'anomaly-subscription))
      (common-lisp:list
       (common-lisp:cons "AnomalySubscription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-tags))
      (common-lisp:list
       (common-lisp:cons "ResourceTags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-anomaly-subscription-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-anomaly-subscription-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-anomaly-subscription-response-"))
   (subscription-arn (common-lisp:error ":subscription-arn is required") :type
    (common-lisp:or generic-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-anomaly-subscription-response
                    'make-create-anomaly-subscription-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-anomaly-subscription-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-anomaly-subscription-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subscription-arn))
      (common-lisp:list
       (common-lisp:cons "SubscriptionArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-anomaly-subscription-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-cost-category-definition-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-cost-category-definition-request-"))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or cost-category-name common-lisp:null))
   (effective-start common-lisp:nil :type
    (common-lisp:or zoned-date-time common-lisp:null))
   (rule-version (common-lisp:error ":rule-version is required") :type
    (common-lisp:or cost-category-rule-version common-lisp:null))
   (rules (common-lisp:error ":rules is required") :type
    (common-lisp:or cost-category-rules-list common-lisp:null))
   (default-value common-lisp:nil :type
    (common-lisp:or cost-category-value common-lisp:null))
   (split-charge-rules common-lisp:nil :type
    (common-lisp:or cost-category-split-charge-rules-list common-lisp:null))
   (resource-tags common-lisp:nil :type
    (common-lisp:or resource-tag-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-cost-category-definition-request
                    'make-create-cost-category-definition-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-cost-category-definition-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-cost-category-definition-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'effective-start))
      (common-lisp:list
       (common-lisp:cons "EffectiveStart"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rule-version))
      (common-lisp:list
       (common-lisp:cons "RuleVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rules))
      (common-lisp:list
       (common-lisp:cons "Rules"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'default-value))
      (common-lisp:list
       (common-lisp:cons "DefaultValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'split-charge-rules))
      (common-lisp:list
       (common-lisp:cons "SplitChargeRules"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-tags))
      (common-lisp:list
       (common-lisp:cons "ResourceTags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-cost-category-definition-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-cost-category-definition-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-cost-category-definition-response-"))
   (cost-category-arn common-lisp:nil :type
    (common-lisp:or arn common-lisp:null))
   (effective-start common-lisp:nil :type
    (common-lisp:or zoned-date-time common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-cost-category-definition-response
                    'make-create-cost-category-definition-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-cost-category-definition-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-cost-category-definition-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cost-category-arn))
      (common-lisp:list
       (common-lisp:cons "CostCategoryArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'effective-start))
      (common-lisp:list
       (common-lisp:cons "EffectiveStart"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-cost-category-definition-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (current-instance (:copier common-lisp:nil)
      (:conc-name "struct-shape-current-instance-"))
   (resource-id common-lisp:nil :type
    (common-lisp:or generic-string common-lisp:null))
   (instance-name common-lisp:nil :type
    (common-lisp:or generic-string common-lisp:null))
   (tags common-lisp:nil :type
    (common-lisp:or tag-values-list common-lisp:null))
   (resource-details common-lisp:nil :type
    (common-lisp:or resource-details common-lisp:null))
   (resource-utilization common-lisp:nil :type
    (common-lisp:or resource-utilization common-lisp:null))
   (reservation-covered-hours-in-lookback-period common-lisp:nil :type
    (common-lisp:or generic-string common-lisp:null))
   (savings-plans-covered-hours-in-lookback-period common-lisp:nil :type
    (common-lisp:or generic-string common-lisp:null))
   (on-demand-hours-in-lookback-period common-lisp:nil :type
    (common-lisp:or generic-string common-lisp:null))
   (total-running-hours-in-lookback-period common-lisp:nil :type
    (common-lisp:or generic-string common-lisp:null))
   (monthly-cost common-lisp:nil :type
    (common-lisp:or generic-string common-lisp:null))
   (currency-code common-lisp:nil :type
    (common-lisp:or generic-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'current-instance 'make-current-instance))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input current-instance))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input current-instance))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-id))
      (common-lisp:list
       (common-lisp:cons "ResourceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-name))
      (common-lisp:list
       (common-lisp:cons "InstanceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-details))
      (common-lisp:list
       (common-lisp:cons "ResourceDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'resource-utilization))
      (common-lisp:list
       (common-lisp:cons "ResourceUtilization"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'reservation-covered-hours-in-lookback-period))
      (common-lisp:list
       (common-lisp:cons "ReservationCoveredHoursInLookbackPeriod"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'savings-plans-covered-hours-in-lookback-period))
      (common-lisp:list
       (common-lisp:cons "SavingsPlansCoveredHoursInLookbackPeriod"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'on-demand-hours-in-lookback-period))
      (common-lisp:list
       (common-lisp:cons "OnDemandHoursInLookbackPeriod"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'total-running-hours-in-lookback-period))
      (common-lisp:list
       (common-lisp:cons "TotalRunningHoursInLookbackPeriod"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'monthly-cost))
      (common-lisp:list
       (common-lisp:cons "MonthlyCost"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'currency-code))
      (common-lisp:list
       (common-lisp:cons "CurrencyCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input current-instance))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition data-unavailable-exception
     (ce-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       data-unavailable-exception-message)))
 (common-lisp:export
  (common-lisp:list 'data-unavailable-exception
                    'data-unavailable-exception-message)))
(common-lisp:progn
 (common-lisp:defstruct
     (date-interval (:copier common-lisp:nil)
      (:conc-name "struct-shape-date-interval-"))
   (start (common-lisp:error ":start is required") :type
    (common-lisp:or year-month-day common-lisp:null))
   (end (common-lisp:error ":end is required") :type
    (common-lisp:or year-month-day common-lisp:null)))
 (common-lisp:export (common-lisp:list 'date-interval 'make-date-interval))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input date-interval))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input date-interval))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start))
      (common-lisp:list
       (common-lisp:cons "Start"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'end))
      (common-lisp:list
       (common-lisp:cons "End"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input date-interval))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-anomaly-monitor-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-anomaly-monitor-request-"))
   (monitor-arn (common-lisp:error ":monitor-arn is required") :type
    (common-lisp:or generic-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-anomaly-monitor-request
                    'make-delete-anomaly-monitor-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-anomaly-monitor-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-anomaly-monitor-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'monitor-arn))
      (common-lisp:list
       (common-lisp:cons "MonitorArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-anomaly-monitor-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-anomaly-monitor-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-anomaly-monitor-response-")))
 (common-lisp:export
  (common-lisp:list 'delete-anomaly-monitor-response
                    'make-delete-anomaly-monitor-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-anomaly-monitor-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-anomaly-monitor-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-anomaly-monitor-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-anomaly-subscription-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-anomaly-subscription-request-"))
   (subscription-arn (common-lisp:error ":subscription-arn is required") :type
    (common-lisp:or generic-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-anomaly-subscription-request
                    'make-delete-anomaly-subscription-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-anomaly-subscription-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-anomaly-subscription-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subscription-arn))
      (common-lisp:list
       (common-lisp:cons "SubscriptionArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-anomaly-subscription-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-anomaly-subscription-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-anomaly-subscription-response-")))
 (common-lisp:export
  (common-lisp:list 'delete-anomaly-subscription-response
                    'make-delete-anomaly-subscription-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-anomaly-subscription-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-anomaly-subscription-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-anomaly-subscription-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-cost-category-definition-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-cost-category-definition-request-"))
   (cost-category-arn (common-lisp:error ":cost-category-arn is required")
    :type (common-lisp:or arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-cost-category-definition-request
                    'make-delete-cost-category-definition-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-cost-category-definition-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-cost-category-definition-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cost-category-arn))
      (common-lisp:list
       (common-lisp:cons "CostCategoryArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-cost-category-definition-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-cost-category-definition-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-cost-category-definition-response-"))
   (cost-category-arn common-lisp:nil :type
    (common-lisp:or arn common-lisp:null))
   (effective-end common-lisp:nil :type
    (common-lisp:or zoned-date-time common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-cost-category-definition-response
                    'make-delete-cost-category-definition-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-cost-category-definition-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-cost-category-definition-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cost-category-arn))
      (common-lisp:list
       (common-lisp:cons "CostCategoryArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'effective-end))
      (common-lisp:list
       (common-lisp:cons "EffectiveEnd"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-cost-category-definition-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-cost-category-definition-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-cost-category-definition-request-"))
   (cost-category-arn (common-lisp:error ":cost-category-arn is required")
    :type (common-lisp:or arn common-lisp:null))
   (effective-on common-lisp:nil :type
    (common-lisp:or zoned-date-time common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-cost-category-definition-request
                    'make-describe-cost-category-definition-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-cost-category-definition-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-cost-category-definition-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cost-category-arn))
      (common-lisp:list
       (common-lisp:cons "CostCategoryArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'effective-on))
      (common-lisp:list
       (common-lisp:cons "EffectiveOn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-cost-category-definition-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-cost-category-definition-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-cost-category-definition-response-"))
   (cost-category common-lisp:nil :type
    (common-lisp:or cost-category common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-cost-category-definition-response
                    'make-describe-cost-category-definition-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-cost-category-definition-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-cost-category-definition-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cost-category))
      (common-lisp:list
       (common-lisp:cons "CostCategory"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-cost-category-definition-response))
   common-lisp:nil))
(common-lisp:deftype dimension () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (dimension-values (:copier common-lisp:nil)
      (:conc-name "struct-shape-dimension-values-"))
   (key common-lisp:nil :type (common-lisp:or dimension common-lisp:null))
   (values common-lisp:nil :type (common-lisp:or values common-lisp:null))
   (match-options common-lisp:nil :type
    (common-lisp:or match-options common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'dimension-values 'make-dimension-values))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input dimension-values))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input dimension-values))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key))
      (common-lisp:list
       (common-lisp:cons "Key"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'values))
      (common-lisp:list
       (common-lisp:cons "Values"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'match-options))
      (common-lisp:list
       (common-lisp:cons "MatchOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input dimension-values))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (dimension-values-with-attributes (:copier common-lisp:nil)
      (:conc-name "struct-shape-dimension-values-with-attributes-"))
   (value common-lisp:nil :type (common-lisp:or value common-lisp:null))
   (attributes common-lisp:nil :type
    (common-lisp:or attributes common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'dimension-values-with-attributes
                    'make-dimension-values-with-attributes))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          dimension-values-with-attributes))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          dimension-values-with-attributes))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "Value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'attributes))
      (common-lisp:list
       (common-lisp:cons "Attributes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          dimension-values-with-attributes))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype dimension-values-with-attributes-list ()
   '(trivial-types:proper-list dimension-values-with-attributes))
 (common-lisp:defun make-dimension-values-with-attributes-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            dimension-values-with-attributes))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (disk-resource-utilization (:copier common-lisp:nil)
      (:conc-name "struct-shape-disk-resource-utilization-"))
   (disk-read-ops-per-second common-lisp:nil :type
    (common-lisp:or generic-string common-lisp:null))
   (disk-write-ops-per-second common-lisp:nil :type
    (common-lisp:or generic-string common-lisp:null))
   (disk-read-bytes-per-second common-lisp:nil :type
    (common-lisp:or generic-string common-lisp:null))
   (disk-write-bytes-per-second common-lisp:nil :type
    (common-lisp:or generic-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'disk-resource-utilization
                    'make-disk-resource-utilization))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          disk-resource-utilization))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          disk-resource-utilization))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'disk-read-ops-per-second))
      (common-lisp:list
       (common-lisp:cons "DiskReadOpsPerSecond"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'disk-write-ops-per-second))
      (common-lisp:list
       (common-lisp:cons "DiskWriteOpsPerSecond"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'disk-read-bytes-per-second))
      (common-lisp:list
       (common-lisp:cons "DiskReadBytesPerSecond"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'disk-write-bytes-per-second))
      (common-lisp:list
       (common-lisp:cons "DiskWriteBytesPerSecond"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          disk-resource-utilization))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (ebsresource-utilization (:copier common-lisp:nil)
      (:conc-name "struct-shape-ebsresource-utilization-"))
   (ebs-read-ops-per-second common-lisp:nil :type
    (common-lisp:or generic-string common-lisp:null))
   (ebs-write-ops-per-second common-lisp:nil :type
    (common-lisp:or generic-string common-lisp:null))
   (ebs-read-bytes-per-second common-lisp:nil :type
    (common-lisp:or generic-string common-lisp:null))
   (ebs-write-bytes-per-second common-lisp:nil :type
    (common-lisp:or generic-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'ebsresource-utilization 'make-ebsresource-utilization))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          ebsresource-utilization))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          ebsresource-utilization))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'ebs-read-ops-per-second))
      (common-lisp:list
       (common-lisp:cons "EbsReadOpsPerSecond"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'ebs-write-ops-per-second))
      (common-lisp:list
       (common-lisp:cons "EbsWriteOpsPerSecond"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'ebs-read-bytes-per-second))
      (common-lisp:list
       (common-lisp:cons "EbsReadBytesPerSecond"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'ebs-write-bytes-per-second))
      (common-lisp:list
       (common-lisp:cons "EbsWriteBytesPerSecond"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          ebsresource-utilization))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (ec2instance-details (:copier common-lisp:nil)
      (:conc-name "struct-shape-ec2instance-details-"))
   (family common-lisp:nil :type
    (common-lisp:or generic-string common-lisp:null))
   (instance-type common-lisp:nil :type
    (common-lisp:or generic-string common-lisp:null))
   (region common-lisp:nil :type
    (common-lisp:or generic-string common-lisp:null))
   (availability-zone common-lisp:nil :type
    (common-lisp:or generic-string common-lisp:null))
   (platform common-lisp:nil :type
    (common-lisp:or generic-string common-lisp:null))
   (tenancy common-lisp:nil :type
    (common-lisp:or generic-string common-lisp:null))
   (current-generation common-lisp:nil :type
    (common-lisp:or generic-boolean common-lisp:null))
   (size-flex-eligible common-lisp:nil :type
    (common-lisp:or generic-boolean common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'ec2instance-details 'make-ec2instance-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input ec2instance-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input ec2instance-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'family))
      (common-lisp:list
       (common-lisp:cons "Family"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-type))
      (common-lisp:list
       (common-lisp:cons "InstanceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'region))
      (common-lisp:list
       (common-lisp:cons "Region"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'availability-zone))
      (common-lisp:list
       (common-lisp:cons "AvailabilityZone"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'platform))
      (common-lisp:list
       (common-lisp:cons "Platform"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tenancy))
      (common-lisp:list
       (common-lisp:cons "Tenancy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'current-generation))
      (common-lisp:list
       (common-lisp:cons "CurrentGeneration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'size-flex-eligible))
      (common-lisp:list
       (common-lisp:cons "SizeFlexEligible"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input ec2instance-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (ec2resource-details (:copier common-lisp:nil)
      (:conc-name "struct-shape-ec2resource-details-"))
   (hourly-on-demand-rate common-lisp:nil :type
    (common-lisp:or generic-string common-lisp:null))
   (instance-type common-lisp:nil :type
    (common-lisp:or generic-string common-lisp:null))
   (platform common-lisp:nil :type
    (common-lisp:or generic-string common-lisp:null))
   (region common-lisp:nil :type
    (common-lisp:or generic-string common-lisp:null))
   (sku common-lisp:nil :type (common-lisp:or generic-string common-lisp:null))
   (memory common-lisp:nil :type
    (common-lisp:or generic-string common-lisp:null))
   (network-performance common-lisp:nil :type
    (common-lisp:or generic-string common-lisp:null))
   (storage common-lisp:nil :type
    (common-lisp:or generic-string common-lisp:null))
   (vcpu common-lisp:nil :type
    (common-lisp:or generic-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'ec2resource-details 'make-ec2resource-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input ec2resource-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input ec2resource-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'hourly-on-demand-rate))
      (common-lisp:list
       (common-lisp:cons "HourlyOnDemandRate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-type))
      (common-lisp:list
       (common-lisp:cons "InstanceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'platform))
      (common-lisp:list
       (common-lisp:cons "Platform"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'region))
      (common-lisp:list
       (common-lisp:cons "Region"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sku))
      (common-lisp:list
       (common-lisp:cons "Sku"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'memory))
      (common-lisp:list
       (common-lisp:cons "Memory"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'network-performance))
      (common-lisp:list
       (common-lisp:cons "NetworkPerformance"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'storage))
      (common-lisp:list
       (common-lisp:cons "Storage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vcpu))
      (common-lisp:list
       (common-lisp:cons "Vcpu"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input ec2resource-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (ec2resource-utilization (:copier common-lisp:nil)
      (:conc-name "struct-shape-ec2resource-utilization-"))
   (max-cpu-utilization-percentage common-lisp:nil :type
    (common-lisp:or generic-string common-lisp:null))
   (max-memory-utilization-percentage common-lisp:nil :type
    (common-lisp:or generic-string common-lisp:null))
   (max-storage-utilization-percentage common-lisp:nil :type
    (common-lisp:or generic-string common-lisp:null))
   (ebsresource-utilization common-lisp:nil :type
    (common-lisp:or ebsresource-utilization common-lisp:null))
   (disk-resource-utilization common-lisp:nil :type
    (common-lisp:or disk-resource-utilization common-lisp:null))
   (network-resource-utilization common-lisp:nil :type
    (common-lisp:or network-resource-utilization common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'ec2resource-utilization 'make-ec2resource-utilization))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          ec2resource-utilization))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          ec2resource-utilization))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'max-cpu-utilization-percentage))
      (common-lisp:list
       (common-lisp:cons "MaxCpuUtilizationPercentage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'max-memory-utilization-percentage))
      (common-lisp:list
       (common-lisp:cons "MaxMemoryUtilizationPercentage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'max-storage-utilization-percentage))
      (common-lisp:list
       (common-lisp:cons "MaxStorageUtilizationPercentage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'ebsresource-utilization))
      (common-lisp:list
       (common-lisp:cons "EBSResourceUtilization"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'disk-resource-utilization))
      (common-lisp:list
       (common-lisp:cons "DiskResourceUtilization"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'network-resource-utilization))
      (common-lisp:list
       (common-lisp:cons "NetworkResourceUtilization"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          ec2resource-utilization))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (ec2specification (:copier common-lisp:nil)
      (:conc-name "struct-shape-ec2specification-"))
   (offering-class common-lisp:nil :type
    (common-lisp:or offering-class common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'ec2specification 'make-ec2specification))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input ec2specification))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input ec2specification))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'offering-class))
      (common-lisp:list
       (common-lisp:cons "OfferingClass"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input ec2specification))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (esinstance-details (:copier common-lisp:nil)
      (:conc-name "struct-shape-esinstance-details-"))
   (instance-class common-lisp:nil :type
    (common-lisp:or generic-string common-lisp:null))
   (instance-size common-lisp:nil :type
    (common-lisp:or generic-string common-lisp:null))
   (region common-lisp:nil :type
    (common-lisp:or generic-string common-lisp:null))
   (current-generation common-lisp:nil :type
    (common-lisp:or generic-boolean common-lisp:null))
   (size-flex-eligible common-lisp:nil :type
    (common-lisp:or generic-boolean common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'esinstance-details 'make-esinstance-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input esinstance-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input esinstance-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-class))
      (common-lisp:list
       (common-lisp:cons "InstanceClass"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-size))
      (common-lisp:list
       (common-lisp:cons "InstanceSize"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'region))
      (common-lisp:list
       (common-lisp:cons "Region"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'current-generation))
      (common-lisp:list
       (common-lisp:cons "CurrentGeneration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'size-flex-eligible))
      (common-lisp:list
       (common-lisp:cons "SizeFlexEligible"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input esinstance-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (elasti-cache-instance-details (:copier common-lisp:nil)
      (:conc-name "struct-shape-elasti-cache-instance-details-"))
   (family common-lisp:nil :type
    (common-lisp:or generic-string common-lisp:null))
   (node-type common-lisp:nil :type
    (common-lisp:or generic-string common-lisp:null))
   (region common-lisp:nil :type
    (common-lisp:or generic-string common-lisp:null))
   (product-description common-lisp:nil :type
    (common-lisp:or generic-string common-lisp:null))
   (current-generation common-lisp:nil :type
    (common-lisp:or generic-boolean common-lisp:null))
   (size-flex-eligible common-lisp:nil :type
    (common-lisp:or generic-boolean common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'elasti-cache-instance-details
                    'make-elasti-cache-instance-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          elasti-cache-instance-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          elasti-cache-instance-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'family))
      (common-lisp:list
       (common-lisp:cons "Family"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'node-type))
      (common-lisp:list
       (common-lisp:cons "NodeType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'region))
      (common-lisp:list
       (common-lisp:cons "Region"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'product-description))
      (common-lisp:list
       (common-lisp:cons "ProductDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'current-generation))
      (common-lisp:list
       (common-lisp:cons "CurrentGeneration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'size-flex-eligible))
      (common-lisp:list
       (common-lisp:cons "SizeFlexEligible"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          elasti-cache-instance-details))
   common-lisp:nil))
(common-lisp:deftype entity () 'common-lisp:string)
(common-lisp:deftype error-message () 'common-lisp:string)
(common-lisp:deftype estimated () 'common-lisp:boolean)
(common-lisp:progn
 (common-lisp:defstruct
     (expression (:copier common-lisp:nil)
      (:conc-name "struct-shape-expression-"))
   (or common-lisp:nil :type (common-lisp:or expressions common-lisp:null))
   (and common-lisp:nil :type (common-lisp:or expressions common-lisp:null))
   (not common-lisp:nil :type (common-lisp:or expression common-lisp:null))
   (dimensions common-lisp:nil :type
    (common-lisp:or dimension-values common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-values common-lisp:null))
   (cost-categories common-lisp:nil :type
    (common-lisp:or cost-category-values common-lisp:null)))
 (common-lisp:export (common-lisp:list 'expression 'make-expression))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input expression))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input expression))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'or))
      (common-lisp:list
       (common-lisp:cons "Or"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'and))
      (common-lisp:list
       (common-lisp:cons "And"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'not))
      (common-lisp:list
       (common-lisp:cons "Not"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dimensions))
      (common-lisp:list
       (common-lisp:cons "Dimensions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cost-categories))
      (common-lisp:list
       (common-lisp:cons "CostCategories"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input expression))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype expressions () '(trivial-types:proper-list expression))
 (common-lisp:defun make-expressions
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list expression))
   aws-sdk/generator/shape::members))
(common-lisp:deftype finding-reason-code () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype finding-reason-codes ()
   '(trivial-types:proper-list finding-reason-code))
 (common-lisp:defun make-finding-reason-codes
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list finding-reason-code))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (forecast-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-forecast-result-"))
   (time-period common-lisp:nil :type
    (common-lisp:or date-interval common-lisp:null))
   (mean-value common-lisp:nil :type
    (common-lisp:or generic-string common-lisp:null))
   (prediction-interval-lower-bound common-lisp:nil :type
    (common-lisp:or generic-string common-lisp:null))
   (prediction-interval-upper-bound common-lisp:nil :type
    (common-lisp:or generic-string common-lisp:null)))
 (common-lisp:export (common-lisp:list 'forecast-result 'make-forecast-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input forecast-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input forecast-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'time-period))
      (common-lisp:list
       (common-lisp:cons "TimePeriod"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'mean-value))
      (common-lisp:list
       (common-lisp:cons "MeanValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'prediction-interval-lower-bound))
      (common-lisp:list
       (common-lisp:cons "PredictionIntervalLowerBound"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'prediction-interval-upper-bound))
      (common-lisp:list
       (common-lisp:cons "PredictionIntervalUpperBound"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input forecast-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype forecast-results-by-time ()
   '(trivial-types:proper-list forecast-result))
 (common-lisp:defun make-forecast-results-by-time
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list forecast-result))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition generation-exists-exception
     (ce-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       generation-exists-exception-message)))
 (common-lisp:export
  (common-lisp:list 'generation-exists-exception
                    'generation-exists-exception-message)))
(common-lisp:deftype generation-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (generation-summary (:copier common-lisp:nil)
      (:conc-name "struct-shape-generation-summary-"))
   (recommendation-id common-lisp:nil :type
    (common-lisp:or recommendation-id common-lisp:null))
   (generation-status common-lisp:nil :type
    (common-lisp:or generation-status common-lisp:null))
   (generation-started-time common-lisp:nil :type
    (common-lisp:or zoned-date-time common-lisp:null))
   (generation-completion-time common-lisp:nil :type
    (common-lisp:or zoned-date-time common-lisp:null))
   (estimated-completion-time common-lisp:nil :type
    (common-lisp:or zoned-date-time common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'generation-summary 'make-generation-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input generation-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input generation-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'recommendation-id))
      (common-lisp:list
       (common-lisp:cons "RecommendationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'generation-status))
      (common-lisp:list
       (common-lisp:cons "GenerationStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'generation-started-time))
      (common-lisp:list
       (common-lisp:cons "GenerationStartedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'generation-completion-time))
      (common-lisp:list
       (common-lisp:cons "GenerationCompletionTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'estimated-completion-time))
      (common-lisp:list
       (common-lisp:cons "EstimatedCompletionTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input generation-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype generation-summary-list ()
   '(trivial-types:proper-list generation-summary))
 (common-lisp:defun make-generation-summary-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list generation-summary))
   aws-sdk/generator/shape::members))
(common-lisp:deftype generic-boolean () 'common-lisp:boolean)
(common-lisp:deftype generic-double () 'common-lisp:double-float)
(common-lisp:deftype generic-string () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (get-anomalies-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-anomalies-request-"))
   (monitor-arn common-lisp:nil :type
    (common-lisp:or generic-string common-lisp:null))
   (date-interval (common-lisp:error ":date-interval is required") :type
    (common-lisp:or anomaly-date-interval common-lisp:null))
   (feedback common-lisp:nil :type
    (common-lisp:or anomaly-feedback-type common-lisp:null))
   (total-impact common-lisp:nil :type
    (common-lisp:or total-impact-filter common-lisp:null))
   (next-page-token common-lisp:nil :type
    (common-lisp:or next-page-token common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or page-size common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-anomalies-request 'make-get-anomalies-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-anomalies-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-anomalies-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'monitor-arn))
      (common-lisp:list
       (common-lisp:cons "MonitorArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'date-interval))
      (common-lisp:list
       (common-lisp:cons "DateInterval"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'feedback))
      (common-lisp:list
       (common-lisp:cons "Feedback"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'total-impact))
      (common-lisp:list
       (common-lisp:cons "TotalImpact"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-page-token))
      (common-lisp:list
       (common-lisp:cons "NextPageToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-anomalies-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-anomalies-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-anomalies-response-"))
   (anomalies (common-lisp:error ":anomalies is required") :type
    (common-lisp:or anomalies common-lisp:null))
   (next-page-token common-lisp:nil :type
    (common-lisp:or next-page-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-anomalies-response 'make-get-anomalies-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-anomalies-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-anomalies-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'anomalies))
      (common-lisp:list
       (common-lisp:cons "Anomalies"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-page-token))
      (common-lisp:list
       (common-lisp:cons "NextPageToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-anomalies-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-anomaly-monitors-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-anomaly-monitors-request-"))
   (monitor-arn-list common-lisp:nil :type
    (common-lisp:or values common-lisp:null))
   (next-page-token common-lisp:nil :type
    (common-lisp:or next-page-token common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or page-size common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-anomaly-monitors-request
                    'make-get-anomaly-monitors-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-anomaly-monitors-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-anomaly-monitors-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'monitor-arn-list))
      (common-lisp:list
       (common-lisp:cons "MonitorArnList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-page-token))
      (common-lisp:list
       (common-lisp:cons "NextPageToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-anomaly-monitors-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-anomaly-monitors-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-anomaly-monitors-response-"))
   (anomaly-monitors (common-lisp:error ":anomaly-monitors is required") :type
    (common-lisp:or anomaly-monitors common-lisp:null))
   (next-page-token common-lisp:nil :type
    (common-lisp:or next-page-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-anomaly-monitors-response
                    'make-get-anomaly-monitors-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-anomaly-monitors-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-anomaly-monitors-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'anomaly-monitors))
      (common-lisp:list
       (common-lisp:cons "AnomalyMonitors"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-page-token))
      (common-lisp:list
       (common-lisp:cons "NextPageToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-anomaly-monitors-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-anomaly-subscriptions-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-anomaly-subscriptions-request-"))
   (subscription-arn-list common-lisp:nil :type
    (common-lisp:or values common-lisp:null))
   (monitor-arn common-lisp:nil :type
    (common-lisp:or generic-string common-lisp:null))
   (next-page-token common-lisp:nil :type
    (common-lisp:or next-page-token common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or page-size common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-anomaly-subscriptions-request
                    'make-get-anomaly-subscriptions-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-anomaly-subscriptions-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-anomaly-subscriptions-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'subscription-arn-list))
      (common-lisp:list
       (common-lisp:cons "SubscriptionArnList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'monitor-arn))
      (common-lisp:list
       (common-lisp:cons "MonitorArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-page-token))
      (common-lisp:list
       (common-lisp:cons "NextPageToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-anomaly-subscriptions-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-anomaly-subscriptions-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-anomaly-subscriptions-response-"))
   (anomaly-subscriptions
    (common-lisp:error ":anomaly-subscriptions is required") :type
    (common-lisp:or anomaly-subscriptions common-lisp:null))
   (next-page-token common-lisp:nil :type
    (common-lisp:or next-page-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-anomaly-subscriptions-response
                    'make-get-anomaly-subscriptions-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-anomaly-subscriptions-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-anomaly-subscriptions-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'anomaly-subscriptions))
      (common-lisp:list
       (common-lisp:cons "AnomalySubscriptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-page-token))
      (common-lisp:list
       (common-lisp:cons "NextPageToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-anomaly-subscriptions-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-approximate-usage-records-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-approximate-usage-records-request-"))
   (granularity (common-lisp:error ":granularity is required") :type
    (common-lisp:or granularity common-lisp:null))
   (services common-lisp:nil :type
    (common-lisp:or usage-services common-lisp:null))
   (approximation-dimension
    (common-lisp:error ":approximation-dimension is required") :type
    (common-lisp:or approximation-dimension common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-approximate-usage-records-request
                    'make-get-approximate-usage-records-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-approximate-usage-records-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-approximate-usage-records-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'granularity))
      (common-lisp:list
       (common-lisp:cons "Granularity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'services))
      (common-lisp:list
       (common-lisp:cons "Services"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'approximation-dimension))
      (common-lisp:list
       (common-lisp:cons "ApproximationDimension"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-approximate-usage-records-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-approximate-usage-records-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-approximate-usage-records-response-"))
   (services common-lisp:nil :type
    (common-lisp:or approximate-usage-records-per-service common-lisp:null))
   (total-records common-lisp:nil :type
    (common-lisp:or non-negative-long common-lisp:null))
   (lookback-period common-lisp:nil :type
    (common-lisp:or date-interval common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-approximate-usage-records-response
                    'make-get-approximate-usage-records-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-approximate-usage-records-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-approximate-usage-records-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'services))
      (common-lisp:list
       (common-lisp:cons "Services"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'total-records))
      (common-lisp:list
       (common-lisp:cons "TotalRecords"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'lookback-period))
      (common-lisp:list
       (common-lisp:cons "LookbackPeriod"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-approximate-usage-records-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-cost-and-usage-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-cost-and-usage-request-"))
   (time-period (common-lisp:error ":time-period is required") :type
    (common-lisp:or date-interval common-lisp:null))
   (granularity (common-lisp:error ":granularity is required") :type
    (common-lisp:or granularity common-lisp:null))
   (filter common-lisp:nil :type (common-lisp:or expression common-lisp:null))
   (metrics (common-lisp:error ":metrics is required") :type
    (common-lisp:or metric-names common-lisp:null))
   (group-by common-lisp:nil :type
    (common-lisp:or group-definitions common-lisp:null))
   (next-page-token common-lisp:nil :type
    (common-lisp:or next-page-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-cost-and-usage-request
                    'make-get-cost-and-usage-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-cost-and-usage-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-cost-and-usage-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'time-period))
      (common-lisp:list
       (common-lisp:cons "TimePeriod"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'granularity))
      (common-lisp:list
       (common-lisp:cons "Granularity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filter))
      (common-lisp:list
       (common-lisp:cons "Filter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metrics))
      (common-lisp:list
       (common-lisp:cons "Metrics"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'group-by))
      (common-lisp:list
       (common-lisp:cons "GroupBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-page-token))
      (common-lisp:list
       (common-lisp:cons "NextPageToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-cost-and-usage-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-cost-and-usage-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-cost-and-usage-response-"))
   (next-page-token common-lisp:nil :type
    (common-lisp:or next-page-token common-lisp:null))
   (group-definitions common-lisp:nil :type
    (common-lisp:or group-definitions common-lisp:null))
   (results-by-time common-lisp:nil :type
    (common-lisp:or results-by-time common-lisp:null))
   (dimension-value-attributes common-lisp:nil :type
    (common-lisp:or dimension-values-with-attributes-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-cost-and-usage-response
                    'make-get-cost-and-usage-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-cost-and-usage-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-cost-and-usage-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-page-token))
      (common-lisp:list
       (common-lisp:cons "NextPageToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'group-definitions))
      (common-lisp:list
       (common-lisp:cons "GroupDefinitions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'results-by-time))
      (common-lisp:list
       (common-lisp:cons "ResultsByTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dimension-value-attributes))
      (common-lisp:list
       (common-lisp:cons "DimensionValueAttributes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-cost-and-usage-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-cost-and-usage-with-resources-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-cost-and-usage-with-resources-request-"))
   (time-period (common-lisp:error ":time-period is required") :type
    (common-lisp:or date-interval common-lisp:null))
   (granularity (common-lisp:error ":granularity is required") :type
    (common-lisp:or granularity common-lisp:null))
   (filter (common-lisp:error ":filter is required") :type
    (common-lisp:or expression common-lisp:null))
   (metrics common-lisp:nil :type
    (common-lisp:or metric-names common-lisp:null))
   (group-by common-lisp:nil :type
    (common-lisp:or group-definitions common-lisp:null))
   (next-page-token common-lisp:nil :type
    (common-lisp:or next-page-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-cost-and-usage-with-resources-request
                    'make-get-cost-and-usage-with-resources-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-cost-and-usage-with-resources-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-cost-and-usage-with-resources-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'time-period))
      (common-lisp:list
       (common-lisp:cons "TimePeriod"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'granularity))
      (common-lisp:list
       (common-lisp:cons "Granularity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filter))
      (common-lisp:list
       (common-lisp:cons "Filter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metrics))
      (common-lisp:list
       (common-lisp:cons "Metrics"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'group-by))
      (common-lisp:list
       (common-lisp:cons "GroupBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-page-token))
      (common-lisp:list
       (common-lisp:cons "NextPageToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-cost-and-usage-with-resources-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-cost-and-usage-with-resources-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-cost-and-usage-with-resources-response-"))
   (next-page-token common-lisp:nil :type
    (common-lisp:or next-page-token common-lisp:null))
   (group-definitions common-lisp:nil :type
    (common-lisp:or group-definitions common-lisp:null))
   (results-by-time common-lisp:nil :type
    (common-lisp:or results-by-time common-lisp:null))
   (dimension-value-attributes common-lisp:nil :type
    (common-lisp:or dimension-values-with-attributes-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-cost-and-usage-with-resources-response
                    'make-get-cost-and-usage-with-resources-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-cost-and-usage-with-resources-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-cost-and-usage-with-resources-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-page-token))
      (common-lisp:list
       (common-lisp:cons "NextPageToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'group-definitions))
      (common-lisp:list
       (common-lisp:cons "GroupDefinitions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'results-by-time))
      (common-lisp:list
       (common-lisp:cons "ResultsByTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dimension-value-attributes))
      (common-lisp:list
       (common-lisp:cons "DimensionValueAttributes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-cost-and-usage-with-resources-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-cost-categories-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-cost-categories-request-"))
   (search-string common-lisp:nil :type
    (common-lisp:or search-string common-lisp:null))
   (time-period (common-lisp:error ":time-period is required") :type
    (common-lisp:or date-interval common-lisp:null))
   (cost-category-name common-lisp:nil :type
    (common-lisp:or cost-category-name common-lisp:null))
   (filter common-lisp:nil :type (common-lisp:or expression common-lisp:null))
   (sort-by common-lisp:nil :type
    (common-lisp:or sort-definitions common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or max-results common-lisp:null))
   (next-page-token common-lisp:nil :type
    (common-lisp:or next-page-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-cost-categories-request
                    'make-get-cost-categories-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-cost-categories-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-cost-categories-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'search-string))
      (common-lisp:list
       (common-lisp:cons "SearchString"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'time-period))
      (common-lisp:list
       (common-lisp:cons "TimePeriod"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cost-category-name))
      (common-lisp:list
       (common-lisp:cons "CostCategoryName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filter))
      (common-lisp:list
       (common-lisp:cons "Filter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sort-by))
      (common-lisp:list
       (common-lisp:cons "SortBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-page-token))
      (common-lisp:list
       (common-lisp:cons "NextPageToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-cost-categories-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-cost-categories-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-cost-categories-response-"))
   (next-page-token common-lisp:nil :type
    (common-lisp:or next-page-token common-lisp:null))
   (cost-category-names common-lisp:nil :type
    (common-lisp:or cost-category-names-list common-lisp:null))
   (cost-category-values common-lisp:nil :type
    (common-lisp:or cost-category-values-list common-lisp:null))
   (return-size (common-lisp:error ":return-size is required") :type
    (common-lisp:or page-size common-lisp:null))
   (total-size (common-lisp:error ":total-size is required") :type
    (common-lisp:or page-size common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-cost-categories-response
                    'make-get-cost-categories-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-cost-categories-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-cost-categories-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-page-token))
      (common-lisp:list
       (common-lisp:cons "NextPageToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cost-category-names))
      (common-lisp:list
       (common-lisp:cons "CostCategoryNames"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cost-category-values))
      (common-lisp:list
       (common-lisp:cons "CostCategoryValues"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'return-size))
      (common-lisp:list
       (common-lisp:cons "ReturnSize"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'total-size))
      (common-lisp:list
       (common-lisp:cons "TotalSize"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-cost-categories-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-cost-forecast-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-cost-forecast-request-"))
   (time-period (common-lisp:error ":time-period is required") :type
    (common-lisp:or date-interval common-lisp:null))
   (metric (common-lisp:error ":metric is required") :type
    (common-lisp:or metric common-lisp:null))
   (granularity (common-lisp:error ":granularity is required") :type
    (common-lisp:or granularity common-lisp:null))
   (filter common-lisp:nil :type (common-lisp:or expression common-lisp:null))
   (prediction-interval-level common-lisp:nil :type
    (common-lisp:or prediction-interval-level common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-cost-forecast-request
                    'make-get-cost-forecast-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-cost-forecast-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-cost-forecast-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'time-period))
      (common-lisp:list
       (common-lisp:cons "TimePeriod"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metric))
      (common-lisp:list
       (common-lisp:cons "Metric"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'granularity))
      (common-lisp:list
       (common-lisp:cons "Granularity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filter))
      (common-lisp:list
       (common-lisp:cons "Filter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'prediction-interval-level))
      (common-lisp:list
       (common-lisp:cons "PredictionIntervalLevel"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-cost-forecast-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-cost-forecast-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-cost-forecast-response-"))
   (total common-lisp:nil :type (common-lisp:or metric-value common-lisp:null))
   (forecast-results-by-time common-lisp:nil :type
    (common-lisp:or forecast-results-by-time common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-cost-forecast-response
                    'make-get-cost-forecast-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-cost-forecast-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-cost-forecast-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'total))
      (common-lisp:list
       (common-lisp:cons "Total"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'forecast-results-by-time))
      (common-lisp:list
       (common-lisp:cons "ForecastResultsByTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-cost-forecast-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-dimension-values-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-dimension-values-request-"))
   (search-string common-lisp:nil :type
    (common-lisp:or search-string common-lisp:null))
   (time-period (common-lisp:error ":time-period is required") :type
    (common-lisp:or date-interval common-lisp:null))
   (dimension (common-lisp:error ":dimension is required") :type
    (common-lisp:or dimension common-lisp:null))
   (context common-lisp:nil :type (common-lisp:or context common-lisp:null))
   (filter common-lisp:nil :type (common-lisp:or expression common-lisp:null))
   (sort-by common-lisp:nil :type
    (common-lisp:or sort-definitions common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or max-results common-lisp:null))
   (next-page-token common-lisp:nil :type
    (common-lisp:or next-page-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-dimension-values-request
                    'make-get-dimension-values-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-dimension-values-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-dimension-values-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'search-string))
      (common-lisp:list
       (common-lisp:cons "SearchString"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'time-period))
      (common-lisp:list
       (common-lisp:cons "TimePeriod"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dimension))
      (common-lisp:list
       (common-lisp:cons "Dimension"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'context))
      (common-lisp:list
       (common-lisp:cons "Context"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filter))
      (common-lisp:list
       (common-lisp:cons "Filter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sort-by))
      (common-lisp:list
       (common-lisp:cons "SortBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-page-token))
      (common-lisp:list
       (common-lisp:cons "NextPageToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-dimension-values-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-dimension-values-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-dimension-values-response-"))
   (dimension-values (common-lisp:error ":dimension-values is required") :type
    (common-lisp:or dimension-values-with-attributes-list common-lisp:null))
   (return-size (common-lisp:error ":return-size is required") :type
    (common-lisp:or page-size common-lisp:null))
   (total-size (common-lisp:error ":total-size is required") :type
    (common-lisp:or page-size common-lisp:null))
   (next-page-token common-lisp:nil :type
    (common-lisp:or next-page-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-dimension-values-response
                    'make-get-dimension-values-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-dimension-values-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-dimension-values-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dimension-values))
      (common-lisp:list
       (common-lisp:cons "DimensionValues"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'return-size))
      (common-lisp:list
       (common-lisp:cons "ReturnSize"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'total-size))
      (common-lisp:list
       (common-lisp:cons "TotalSize"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-page-token))
      (common-lisp:list
       (common-lisp:cons "NextPageToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-dimension-values-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-reservation-coverage-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-reservation-coverage-request-"))
   (time-period (common-lisp:error ":time-period is required") :type
    (common-lisp:or date-interval common-lisp:null))
   (group-by common-lisp:nil :type
    (common-lisp:or group-definitions common-lisp:null))
   (granularity common-lisp:nil :type
    (common-lisp:or granularity common-lisp:null))
   (filter common-lisp:nil :type (common-lisp:or expression common-lisp:null))
   (metrics common-lisp:nil :type
    (common-lisp:or metric-names common-lisp:null))
   (next-page-token common-lisp:nil :type
    (common-lisp:or next-page-token common-lisp:null))
   (sort-by common-lisp:nil :type
    (common-lisp:or sort-definition common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or max-results common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-reservation-coverage-request
                    'make-get-reservation-coverage-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-reservation-coverage-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-reservation-coverage-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'time-period))
      (common-lisp:list
       (common-lisp:cons "TimePeriod"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'group-by))
      (common-lisp:list
       (common-lisp:cons "GroupBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'granularity))
      (common-lisp:list
       (common-lisp:cons "Granularity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filter))
      (common-lisp:list
       (common-lisp:cons "Filter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metrics))
      (common-lisp:list
       (common-lisp:cons "Metrics"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-page-token))
      (common-lisp:list
       (common-lisp:cons "NextPageToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sort-by))
      (common-lisp:list
       (common-lisp:cons "SortBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-reservation-coverage-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-reservation-coverage-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-reservation-coverage-response-"))
   (coverages-by-time (common-lisp:error ":coverages-by-time is required")
    :type (common-lisp:or coverages-by-time common-lisp:null))
   (total common-lisp:nil :type (common-lisp:or coverage common-lisp:null))
   (next-page-token common-lisp:nil :type
    (common-lisp:or next-page-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-reservation-coverage-response
                    'make-get-reservation-coverage-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-reservation-coverage-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-reservation-coverage-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'coverages-by-time))
      (common-lisp:list
       (common-lisp:cons "CoveragesByTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'total))
      (common-lisp:list
       (common-lisp:cons "Total"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-page-token))
      (common-lisp:list
       (common-lisp:cons "NextPageToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-reservation-coverage-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-reservation-purchase-recommendation-request (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-get-reservation-purchase-recommendation-request-"))
   (account-id common-lisp:nil :type
    (common-lisp:or generic-string common-lisp:null))
   (service (common-lisp:error ":service is required") :type
    (common-lisp:or generic-string common-lisp:null))
   (filter common-lisp:nil :type (common-lisp:or expression common-lisp:null))
   (account-scope common-lisp:nil :type
    (common-lisp:or account-scope common-lisp:null))
   (lookback-period-in-days common-lisp:nil :type
    (common-lisp:or lookback-period-in-days common-lisp:null))
   (term-in-years common-lisp:nil :type
    (common-lisp:or term-in-years common-lisp:null))
   (payment-option common-lisp:nil :type
    (common-lisp:or payment-option common-lisp:null))
   (service-specification common-lisp:nil :type
    (common-lisp:or service-specification common-lisp:null))
   (page-size common-lisp:nil :type
    (common-lisp:or non-negative-integer common-lisp:null))
   (next-page-token common-lisp:nil :type
    (common-lisp:or next-page-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-reservation-purchase-recommendation-request
                    'make-get-reservation-purchase-recommendation-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-reservation-purchase-recommendation-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-reservation-purchase-recommendation-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-id))
      (common-lisp:list
       (common-lisp:cons "AccountId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service))
      (common-lisp:list
       (common-lisp:cons "Service"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filter))
      (common-lisp:list
       (common-lisp:cons "Filter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-scope))
      (common-lisp:list
       (common-lisp:cons "AccountScope"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'lookback-period-in-days))
      (common-lisp:list
       (common-lisp:cons "LookbackPeriodInDays"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'term-in-years))
      (common-lisp:list
       (common-lisp:cons "TermInYears"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'payment-option))
      (common-lisp:list
       (common-lisp:cons "PaymentOption"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'service-specification))
      (common-lisp:list
       (common-lisp:cons "ServiceSpecification"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'page-size))
      (common-lisp:list
       (common-lisp:cons "PageSize"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-page-token))
      (common-lisp:list
       (common-lisp:cons "NextPageToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-reservation-purchase-recommendation-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-reservation-purchase-recommendation-response
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-get-reservation-purchase-recommendation-response-"))
   (metadata common-lisp:nil :type
    (common-lisp:or reservation-purchase-recommendation-metadata
                    common-lisp:null))
   (recommendations common-lisp:nil :type
    (common-lisp:or reservation-purchase-recommendations common-lisp:null))
   (next-page-token common-lisp:nil :type
    (common-lisp:or next-page-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-reservation-purchase-recommendation-response
                    'make-get-reservation-purchase-recommendation-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-reservation-purchase-recommendation-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-reservation-purchase-recommendation-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metadata))
      (common-lisp:list
       (common-lisp:cons "Metadata"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'recommendations))
      (common-lisp:list
       (common-lisp:cons "Recommendations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-page-token))
      (common-lisp:list
       (common-lisp:cons "NextPageToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-reservation-purchase-recommendation-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-reservation-utilization-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-reservation-utilization-request-"))
   (time-period (common-lisp:error ":time-period is required") :type
    (common-lisp:or date-interval common-lisp:null))
   (group-by common-lisp:nil :type
    (common-lisp:or group-definitions common-lisp:null))
   (granularity common-lisp:nil :type
    (common-lisp:or granularity common-lisp:null))
   (filter common-lisp:nil :type (common-lisp:or expression common-lisp:null))
   (sort-by common-lisp:nil :type
    (common-lisp:or sort-definition common-lisp:null))
   (next-page-token common-lisp:nil :type
    (common-lisp:or next-page-token common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or max-results common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-reservation-utilization-request
                    'make-get-reservation-utilization-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-reservation-utilization-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-reservation-utilization-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'time-period))
      (common-lisp:list
       (common-lisp:cons "TimePeriod"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'group-by))
      (common-lisp:list
       (common-lisp:cons "GroupBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'granularity))
      (common-lisp:list
       (common-lisp:cons "Granularity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filter))
      (common-lisp:list
       (common-lisp:cons "Filter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sort-by))
      (common-lisp:list
       (common-lisp:cons "SortBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-page-token))
      (common-lisp:list
       (common-lisp:cons "NextPageToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-reservation-utilization-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-reservation-utilization-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-reservation-utilization-response-"))
   (utilizations-by-time
    (common-lisp:error ":utilizations-by-time is required") :type
    (common-lisp:or utilizations-by-time common-lisp:null))
   (total common-lisp:nil :type
    (common-lisp:or reservation-aggregates common-lisp:null))
   (next-page-token common-lisp:nil :type
    (common-lisp:or next-page-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-reservation-utilization-response
                    'make-get-reservation-utilization-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-reservation-utilization-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-reservation-utilization-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'utilizations-by-time))
      (common-lisp:list
       (common-lisp:cons "UtilizationsByTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'total))
      (common-lisp:list
       (common-lisp:cons "Total"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-page-token))
      (common-lisp:list
       (common-lisp:cons "NextPageToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-reservation-utilization-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-rightsizing-recommendation-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-rightsizing-recommendation-request-"))
   (filter common-lisp:nil :type (common-lisp:or expression common-lisp:null))
   (configuration common-lisp:nil :type
    (common-lisp:or rightsizing-recommendation-configuration common-lisp:null))
   (service (common-lisp:error ":service is required") :type
    (common-lisp:or generic-string common-lisp:null))
   (page-size common-lisp:nil :type
    (common-lisp:or non-negative-integer common-lisp:null))
   (next-page-token common-lisp:nil :type
    (common-lisp:or next-page-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-rightsizing-recommendation-request
                    'make-get-rightsizing-recommendation-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-rightsizing-recommendation-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-rightsizing-recommendation-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filter))
      (common-lisp:list
       (common-lisp:cons "Filter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'configuration))
      (common-lisp:list
       (common-lisp:cons "Configuration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service))
      (common-lisp:list
       (common-lisp:cons "Service"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'page-size))
      (common-lisp:list
       (common-lisp:cons "PageSize"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-page-token))
      (common-lisp:list
       (common-lisp:cons "NextPageToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-rightsizing-recommendation-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-rightsizing-recommendation-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-rightsizing-recommendation-response-"))
   (metadata common-lisp:nil :type
    (common-lisp:or rightsizing-recommendation-metadata common-lisp:null))
   (summary common-lisp:nil :type
    (common-lisp:or rightsizing-recommendation-summary common-lisp:null))
   (rightsizing-recommendations common-lisp:nil :type
    (common-lisp:or rightsizing-recommendation-list common-lisp:null))
   (next-page-token common-lisp:nil :type
    (common-lisp:or next-page-token common-lisp:null))
   (configuration common-lisp:nil :type
    (common-lisp:or rightsizing-recommendation-configuration
                    common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-rightsizing-recommendation-response
                    'make-get-rightsizing-recommendation-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-rightsizing-recommendation-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-rightsizing-recommendation-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metadata))
      (common-lisp:list
       (common-lisp:cons "Metadata"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'summary))
      (common-lisp:list
       (common-lisp:cons "Summary"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'rightsizing-recommendations))
      (common-lisp:list
       (common-lisp:cons "RightsizingRecommendations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-page-token))
      (common-lisp:list
       (common-lisp:cons "NextPageToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'configuration))
      (common-lisp:list
       (common-lisp:cons "Configuration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-rightsizing-recommendation-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-savings-plan-purchase-recommendation-details-request
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-get-savings-plan-purchase-recommendation-details-request-"))
   (recommendation-detail-id
    (common-lisp:error ":recommendation-detail-id is required") :type
    (common-lisp:or recommendation-detail-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-savings-plan-purchase-recommendation-details-request
                    'make-get-savings-plan-purchase-recommendation-details-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-savings-plan-purchase-recommendation-details-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-savings-plan-purchase-recommendation-details-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'recommendation-detail-id))
      (common-lisp:list
       (common-lisp:cons "RecommendationDetailId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-savings-plan-purchase-recommendation-details-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-savings-plan-purchase-recommendation-details-response
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-get-savings-plan-purchase-recommendation-details-response-"))
   (recommendation-detail-id common-lisp:nil :type
    (common-lisp:or recommendation-detail-id common-lisp:null))
   (recommendation-detail-data common-lisp:nil :type
    (common-lisp:or recommendation-detail-data common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-savings-plan-purchase-recommendation-details-response
                    'make-get-savings-plan-purchase-recommendation-details-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-savings-plan-purchase-recommendation-details-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-savings-plan-purchase-recommendation-details-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'recommendation-detail-id))
      (common-lisp:list
       (common-lisp:cons "RecommendationDetailId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'recommendation-detail-data))
      (common-lisp:list
       (common-lisp:cons "RecommendationDetailData"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-savings-plan-purchase-recommendation-details-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-savings-plans-coverage-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-savings-plans-coverage-request-"))
   (time-period (common-lisp:error ":time-period is required") :type
    (common-lisp:or date-interval common-lisp:null))
   (group-by common-lisp:nil :type
    (common-lisp:or group-definitions common-lisp:null))
   (granularity common-lisp:nil :type
    (common-lisp:or granularity common-lisp:null))
   (filter common-lisp:nil :type (common-lisp:or expression common-lisp:null))
   (metrics common-lisp:nil :type
    (common-lisp:or metric-names common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-page-token common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or max-results common-lisp:null))
   (sort-by common-lisp:nil :type
    (common-lisp:or sort-definition common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-savings-plans-coverage-request
                    'make-get-savings-plans-coverage-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-savings-plans-coverage-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-savings-plans-coverage-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'time-period))
      (common-lisp:list
       (common-lisp:cons "TimePeriod"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'group-by))
      (common-lisp:list
       (common-lisp:cons "GroupBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'granularity))
      (common-lisp:list
       (common-lisp:cons "Granularity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filter))
      (common-lisp:list
       (common-lisp:cons "Filter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metrics))
      (common-lisp:list
       (common-lisp:cons "Metrics"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sort-by))
      (common-lisp:list
       (common-lisp:cons "SortBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-savings-plans-coverage-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-savings-plans-coverage-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-savings-plans-coverage-response-"))
   (savings-plans-coverages
    (common-lisp:error ":savings-plans-coverages is required") :type
    (common-lisp:or savings-plans-coverages common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-page-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-savings-plans-coverage-response
                    'make-get-savings-plans-coverage-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-savings-plans-coverage-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-savings-plans-coverage-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'savings-plans-coverages))
      (common-lisp:list
       (common-lisp:cons "SavingsPlansCoverages"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-savings-plans-coverage-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-savings-plans-purchase-recommendation-request
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-get-savings-plans-purchase-recommendation-request-"))
   (savings-plans-type (common-lisp:error ":savings-plans-type is required")
    :type (common-lisp:or supported-savings-plans-type common-lisp:null))
   (term-in-years (common-lisp:error ":term-in-years is required") :type
    (common-lisp:or term-in-years common-lisp:null))
   (payment-option (common-lisp:error ":payment-option is required") :type
    (common-lisp:or payment-option common-lisp:null))
   (account-scope common-lisp:nil :type
    (common-lisp:or account-scope common-lisp:null))
   (next-page-token common-lisp:nil :type
    (common-lisp:or next-page-token common-lisp:null))
   (page-size common-lisp:nil :type
    (common-lisp:or non-negative-integer common-lisp:null))
   (lookback-period-in-days
    (common-lisp:error ":lookback-period-in-days is required") :type
    (common-lisp:or lookback-period-in-days common-lisp:null))
   (filter common-lisp:nil :type (common-lisp:or expression common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-savings-plans-purchase-recommendation-request
                    'make-get-savings-plans-purchase-recommendation-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-savings-plans-purchase-recommendation-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-savings-plans-purchase-recommendation-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'savings-plans-type))
      (common-lisp:list
       (common-lisp:cons "SavingsPlansType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'term-in-years))
      (common-lisp:list
       (common-lisp:cons "TermInYears"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'payment-option))
      (common-lisp:list
       (common-lisp:cons "PaymentOption"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-scope))
      (common-lisp:list
       (common-lisp:cons "AccountScope"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-page-token))
      (common-lisp:list
       (common-lisp:cons "NextPageToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'page-size))
      (common-lisp:list
       (common-lisp:cons "PageSize"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'lookback-period-in-days))
      (common-lisp:list
       (common-lisp:cons "LookbackPeriodInDays"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filter))
      (common-lisp:list
       (common-lisp:cons "Filter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-savings-plans-purchase-recommendation-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-savings-plans-purchase-recommendation-response
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-get-savings-plans-purchase-recommendation-response-"))
   (metadata common-lisp:nil :type
    (common-lisp:or savings-plans-purchase-recommendation-metadata
                    common-lisp:null))
   (savings-plans-purchase-recommendation common-lisp:nil :type
    (common-lisp:or savings-plans-purchase-recommendation common-lisp:null))
   (next-page-token common-lisp:nil :type
    (common-lisp:or next-page-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-savings-plans-purchase-recommendation-response
                    'make-get-savings-plans-purchase-recommendation-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-savings-plans-purchase-recommendation-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-savings-plans-purchase-recommendation-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metadata))
      (common-lisp:list
       (common-lisp:cons "Metadata"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'savings-plans-purchase-recommendation))
      (common-lisp:list
       (common-lisp:cons "SavingsPlansPurchaseRecommendation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-page-token))
      (common-lisp:list
       (common-lisp:cons "NextPageToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-savings-plans-purchase-recommendation-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-savings-plans-utilization-details-request (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-get-savings-plans-utilization-details-request-"))
   (time-period (common-lisp:error ":time-period is required") :type
    (common-lisp:or date-interval common-lisp:null))
   (filter common-lisp:nil :type (common-lisp:or expression common-lisp:null))
   (data-type common-lisp:nil :type
    (common-lisp:or savings-plans-data-types common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-page-token common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or max-results common-lisp:null))
   (sort-by common-lisp:nil :type
    (common-lisp:or sort-definition common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-savings-plans-utilization-details-request
                    'make-get-savings-plans-utilization-details-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-savings-plans-utilization-details-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-savings-plans-utilization-details-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'time-period))
      (common-lisp:list
       (common-lisp:cons "TimePeriod"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filter))
      (common-lisp:list
       (common-lisp:cons "Filter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-type))
      (common-lisp:list
       (common-lisp:cons "DataType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sort-by))
      (common-lisp:list
       (common-lisp:cons "SortBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-savings-plans-utilization-details-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-savings-plans-utilization-details-response (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-get-savings-plans-utilization-details-response-"))
   (savings-plans-utilization-details
    (common-lisp:error ":savings-plans-utilization-details is required") :type
    (common-lisp:or savings-plans-utilization-details common-lisp:null))
   (total common-lisp:nil :type
    (common-lisp:or savings-plans-utilization-aggregates common-lisp:null))
   (time-period (common-lisp:error ":time-period is required") :type
    (common-lisp:or date-interval common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-page-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-savings-plans-utilization-details-response
                    'make-get-savings-plans-utilization-details-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-savings-plans-utilization-details-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-savings-plans-utilization-details-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'savings-plans-utilization-details))
      (common-lisp:list
       (common-lisp:cons "SavingsPlansUtilizationDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'total))
      (common-lisp:list
       (common-lisp:cons "Total"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'time-period))
      (common-lisp:list
       (common-lisp:cons "TimePeriod"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-savings-plans-utilization-details-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-savings-plans-utilization-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-savings-plans-utilization-request-"))
   (time-period (common-lisp:error ":time-period is required") :type
    (common-lisp:or date-interval common-lisp:null))
   (granularity common-lisp:nil :type
    (common-lisp:or granularity common-lisp:null))
   (filter common-lisp:nil :type (common-lisp:or expression common-lisp:null))
   (sort-by common-lisp:nil :type
    (common-lisp:or sort-definition common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-savings-plans-utilization-request
                    'make-get-savings-plans-utilization-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-savings-plans-utilization-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-savings-plans-utilization-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'time-period))
      (common-lisp:list
       (common-lisp:cons "TimePeriod"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'granularity))
      (common-lisp:list
       (common-lisp:cons "Granularity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filter))
      (common-lisp:list
       (common-lisp:cons "Filter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sort-by))
      (common-lisp:list
       (common-lisp:cons "SortBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-savings-plans-utilization-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-savings-plans-utilization-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-savings-plans-utilization-response-"))
   (savings-plans-utilizations-by-time common-lisp:nil :type
    (common-lisp:or savings-plans-utilizations-by-time common-lisp:null))
   (total (common-lisp:error ":total is required") :type
    (common-lisp:or savings-plans-utilization-aggregates common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-savings-plans-utilization-response
                    'make-get-savings-plans-utilization-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-savings-plans-utilization-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-savings-plans-utilization-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'savings-plans-utilizations-by-time))
      (common-lisp:list
       (common-lisp:cons "SavingsPlansUtilizationsByTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'total))
      (common-lisp:list
       (common-lisp:cons "Total"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-savings-plans-utilization-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-tags-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-tags-request-"))
   (search-string common-lisp:nil :type
    (common-lisp:or search-string common-lisp:null))
   (time-period (common-lisp:error ":time-period is required") :type
    (common-lisp:or date-interval common-lisp:null))
   (tag-key common-lisp:nil :type (common-lisp:or tag-key common-lisp:null))
   (filter common-lisp:nil :type (common-lisp:or expression common-lisp:null))
   (sort-by common-lisp:nil :type
    (common-lisp:or sort-definitions common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or max-results common-lisp:null))
   (next-page-token common-lisp:nil :type
    (common-lisp:or next-page-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-tags-request 'make-get-tags-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-tags-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-tags-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'search-string))
      (common-lisp:list
       (common-lisp:cons "SearchString"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'time-period))
      (common-lisp:list
       (common-lisp:cons "TimePeriod"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tag-key))
      (common-lisp:list
       (common-lisp:cons "TagKey"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filter))
      (common-lisp:list
       (common-lisp:cons "Filter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sort-by))
      (common-lisp:list
       (common-lisp:cons "SortBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-page-token))
      (common-lisp:list
       (common-lisp:cons "NextPageToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-tags-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-tags-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-tags-response-"))
   (next-page-token common-lisp:nil :type
    (common-lisp:or next-page-token common-lisp:null))
   (tags (common-lisp:error ":tags is required") :type
    (common-lisp:or tag-list common-lisp:null))
   (return-size (common-lisp:error ":return-size is required") :type
    (common-lisp:or page-size common-lisp:null))
   (total-size (common-lisp:error ":total-size is required") :type
    (common-lisp:or page-size common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-tags-response 'make-get-tags-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-tags-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-tags-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-page-token))
      (common-lisp:list
       (common-lisp:cons "NextPageToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'return-size))
      (common-lisp:list
       (common-lisp:cons "ReturnSize"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'total-size))
      (common-lisp:list
       (common-lisp:cons "TotalSize"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-tags-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-usage-forecast-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-usage-forecast-request-"))
   (time-period (common-lisp:error ":time-period is required") :type
    (common-lisp:or date-interval common-lisp:null))
   (metric (common-lisp:error ":metric is required") :type
    (common-lisp:or metric common-lisp:null))
   (granularity (common-lisp:error ":granularity is required") :type
    (common-lisp:or granularity common-lisp:null))
   (filter common-lisp:nil :type (common-lisp:or expression common-lisp:null))
   (prediction-interval-level common-lisp:nil :type
    (common-lisp:or prediction-interval-level common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-usage-forecast-request
                    'make-get-usage-forecast-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-usage-forecast-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-usage-forecast-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'time-period))
      (common-lisp:list
       (common-lisp:cons "TimePeriod"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metric))
      (common-lisp:list
       (common-lisp:cons "Metric"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'granularity))
      (common-lisp:list
       (common-lisp:cons "Granularity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filter))
      (common-lisp:list
       (common-lisp:cons "Filter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'prediction-interval-level))
      (common-lisp:list
       (common-lisp:cons "PredictionIntervalLevel"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-usage-forecast-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-usage-forecast-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-usage-forecast-response-"))
   (total common-lisp:nil :type (common-lisp:or metric-value common-lisp:null))
   (forecast-results-by-time common-lisp:nil :type
    (common-lisp:or forecast-results-by-time common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-usage-forecast-response
                    'make-get-usage-forecast-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-usage-forecast-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-usage-forecast-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'total))
      (common-lisp:list
       (common-lisp:cons "Total"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'forecast-results-by-time))
      (common-lisp:list
       (common-lisp:cons "ForecastResultsByTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-usage-forecast-response))
   common-lisp:nil))
(common-lisp:deftype granularity () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (group (:copier common-lisp:nil) (:conc-name "struct-shape-group-"))
   (keys common-lisp:nil :type (common-lisp:or keys common-lisp:null))
   (metrics common-lisp:nil :type (common-lisp:or metrics common-lisp:null)))
 (common-lisp:export (common-lisp:list 'group 'make-group))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input group))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input group))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'keys))
      (common-lisp:list
       (common-lisp:cons "Keys"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metrics))
      (common-lisp:list
       (common-lisp:cons "Metrics"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input group))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (group-definition (:copier common-lisp:nil)
      (:conc-name "struct-shape-group-definition-"))
   (type common-lisp:nil :type
    (common-lisp:or group-definition-type common-lisp:null))
   (key common-lisp:nil :type
    (common-lisp:or group-definition-key common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'group-definition 'make-group-definition))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input group-definition))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input group-definition))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key))
      (common-lisp:list
       (common-lisp:cons "Key"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input group-definition))
   common-lisp:nil))
(common-lisp:deftype group-definition-key () 'common-lisp:string)
(common-lisp:deftype group-definition-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype group-definitions ()
   '(trivial-types:proper-list group-definition))
 (common-lisp:defun make-group-definitions
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list group-definition))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype groups () '(trivial-types:proper-list group))
 (common-lisp:defun make-groups
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list group))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (impact (:copier common-lisp:nil) (:conc-name "struct-shape-impact-"))
   (max-impact (common-lisp:error ":max-impact is required") :type
    (common-lisp:or generic-double common-lisp:null))
   (total-impact common-lisp:nil :type
    (common-lisp:or generic-double common-lisp:null))
   (total-actual-spend common-lisp:nil :type
    (common-lisp:or nullable-non-negative-double common-lisp:null))
   (total-expected-spend common-lisp:nil :type
    (common-lisp:or nullable-non-negative-double common-lisp:null))
   (total-impact-percentage common-lisp:nil :type
    (common-lisp:or nullable-non-negative-double common-lisp:null)))
 (common-lisp:export (common-lisp:list 'impact 'make-impact))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input impact))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input impact))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-impact))
      (common-lisp:list
       (common-lisp:cons "MaxImpact"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'total-impact))
      (common-lisp:list
       (common-lisp:cons "TotalImpact"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'total-actual-spend))
      (common-lisp:list
       (common-lisp:cons "TotalActualSpend"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'total-expected-spend))
      (common-lisp:list
       (common-lisp:cons "TotalExpectedSpend"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'total-impact-percentage))
      (common-lisp:list
       (common-lisp:cons "TotalImpactPercentage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input impact))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (instance-details (:copier common-lisp:nil)
      (:conc-name "struct-shape-instance-details-"))
   (ec2instance-details common-lisp:nil :type
    (common-lisp:or ec2instance-details common-lisp:null))
   (rdsinstance-details common-lisp:nil :type
    (common-lisp:or rdsinstance-details common-lisp:null))
   (redshift-instance-details common-lisp:nil :type
    (common-lisp:or redshift-instance-details common-lisp:null))
   (elasti-cache-instance-details common-lisp:nil :type
    (common-lisp:or elasti-cache-instance-details common-lisp:null))
   (esinstance-details common-lisp:nil :type
    (common-lisp:or esinstance-details common-lisp:null))
   (memory-dbinstance-details common-lisp:nil :type
    (common-lisp:or memory-dbinstance-details common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'instance-details 'make-instance-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input instance-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input instance-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ec2instance-details))
      (common-lisp:list
       (common-lisp:cons "EC2InstanceDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rdsinstance-details))
      (common-lisp:list
       (common-lisp:cons "RDSInstanceDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'redshift-instance-details))
      (common-lisp:list
       (common-lisp:cons "RedshiftInstanceDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'elasti-cache-instance-details))
      (common-lisp:list
       (common-lisp:cons "ElastiCacheInstanceDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'esinstance-details))
      (common-lisp:list
       (common-lisp:cons "ESInstanceDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'memory-dbinstance-details))
      (common-lisp:list
       (common-lisp:cons "MemoryDBInstanceDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input instance-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition invalid-next-token-exception
     (ce-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       invalid-next-token-exception-message)))
 (common-lisp:export
  (common-lisp:list 'invalid-next-token-exception
                    'invalid-next-token-exception-message)))
(common-lisp:deftype key () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype keys () '(trivial-types:proper-list key))
 (common-lisp:defun make-keys
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list key))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition limit-exceeded-exception
     (ce-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       limit-exceeded-exception-message)))
 (common-lisp:export
  (common-lisp:list 'limit-exceeded-exception
                    'limit-exceeded-exception-message)))
(common-lisp:progn
 (common-lisp:defstruct
     (list-cost-allocation-tags-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-cost-allocation-tags-request-"))
   (status common-lisp:nil :type
    (common-lisp:or cost-allocation-tag-status common-lisp:null))
   (tag-keys common-lisp:nil :type
    (common-lisp:or cost-allocation-tag-key-list common-lisp:null))
   (type common-lisp:nil :type
    (common-lisp:or cost-allocation-tag-type common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-page-token common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or cost-allocation-tags-max-results common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-cost-allocation-tags-request
                    'make-list-cost-allocation-tags-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-cost-allocation-tags-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-cost-allocation-tags-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tag-keys))
      (common-lisp:list
       (common-lisp:cons "TagKeys"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-cost-allocation-tags-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-cost-allocation-tags-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-cost-allocation-tags-response-"))
   (cost-allocation-tags common-lisp:nil :type
    (common-lisp:or cost-allocation-tag-list common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-page-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-cost-allocation-tags-response
                    'make-list-cost-allocation-tags-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-cost-allocation-tags-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-cost-allocation-tags-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cost-allocation-tags))
      (common-lisp:list
       (common-lisp:cons "CostAllocationTags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-cost-allocation-tags-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-cost-category-definitions-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-cost-category-definitions-request-"))
   (effective-on common-lisp:nil :type
    (common-lisp:or zoned-date-time common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-page-token common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or cost-category-max-results common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-cost-category-definitions-request
                    'make-list-cost-category-definitions-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-cost-category-definitions-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-cost-category-definitions-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'effective-on))
      (common-lisp:list
       (common-lisp:cons "EffectiveOn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-cost-category-definitions-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-cost-category-definitions-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-cost-category-definitions-response-"))
   (cost-category-references common-lisp:nil :type
    (common-lisp:or cost-category-references-list common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-page-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-cost-category-definitions-response
                    'make-list-cost-category-definitions-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-cost-category-definitions-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-cost-category-definitions-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cost-category-references))
      (common-lisp:list
       (common-lisp:cons "CostCategoryReferences"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-cost-category-definitions-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-savings-plans-purchase-recommendation-generation-request
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-list-savings-plans-purchase-recommendation-generation-request-"))
   (generation-status common-lisp:nil :type
    (common-lisp:or generation-status common-lisp:null))
   (recommendation-ids common-lisp:nil :type
    (common-lisp:or recommendation-id-list common-lisp:null))
   (page-size common-lisp:nil :type
    (common-lisp:or non-negative-integer common-lisp:null))
   (next-page-token common-lisp:nil :type
    (common-lisp:or next-page-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list
   'list-savings-plans-purchase-recommendation-generation-request
   'make-list-savings-plans-purchase-recommendation-generation-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-savings-plans-purchase-recommendation-generation-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-savings-plans-purchase-recommendation-generation-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'generation-status))
      (common-lisp:list
       (common-lisp:cons "GenerationStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'recommendation-ids))
      (common-lisp:list
       (common-lisp:cons "RecommendationIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'page-size))
      (common-lisp:list
       (common-lisp:cons "PageSize"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-page-token))
      (common-lisp:list
       (common-lisp:cons "NextPageToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-savings-plans-purchase-recommendation-generation-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-savings-plans-purchase-recommendation-generation-response
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-list-savings-plans-purchase-recommendation-generation-response-"))
   (generation-summary-list common-lisp:nil :type
    (common-lisp:or generation-summary-list common-lisp:null))
   (next-page-token common-lisp:nil :type
    (common-lisp:or next-page-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list
   'list-savings-plans-purchase-recommendation-generation-response
   'make-list-savings-plans-purchase-recommendation-generation-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-savings-plans-purchase-recommendation-generation-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-savings-plans-purchase-recommendation-generation-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'generation-summary-list))
      (common-lisp:list
       (common-lisp:cons "GenerationSummaryList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-page-token))
      (common-lisp:list
       (common-lisp:cons "NextPageToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-savings-plans-purchase-recommendation-generation-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-tags-for-resource-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-tags-for-resource-request-"))
   (resource-arn (common-lisp:error ":resource-arn is required") :type
    (common-lisp:or arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-tags-for-resource-request
                    'make-list-tags-for-resource-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-arn))
      (common-lisp:list
       (common-lisp:cons "ResourceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-tags-for-resource-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-tags-for-resource-response-"))
   (resource-tags common-lisp:nil :type
    (common-lisp:or resource-tag-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-tags-for-resource-response
                    'make-list-tags-for-resource-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-tags))
      (common-lisp:list
       (common-lisp:cons "ResourceTags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-response))
   common-lisp:nil))
(common-lisp:deftype lookback-period-in-days () 'common-lisp:string)
(common-lisp:deftype match-option () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype match-options ()
   '(trivial-types:proper-list match-option))
 (common-lisp:defun make-match-options
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list match-option))
   aws-sdk/generator/shape::members))
(common-lisp:deftype max-results () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defstruct
     (memory-dbinstance-details (:copier common-lisp:nil)
      (:conc-name "struct-shape-memory-dbinstance-details-"))
   (family common-lisp:nil :type
    (common-lisp:or generic-string common-lisp:null))
   (node-type common-lisp:nil :type
    (common-lisp:or generic-string common-lisp:null))
   (region common-lisp:nil :type
    (common-lisp:or generic-string common-lisp:null))
   (current-generation common-lisp:nil :type
    (common-lisp:or generic-boolean common-lisp:null))
   (size-flex-eligible common-lisp:nil :type
    (common-lisp:or generic-boolean common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'memory-dbinstance-details
                    'make-memory-dbinstance-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          memory-dbinstance-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          memory-dbinstance-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'family))
      (common-lisp:list
       (common-lisp:cons "Family"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'node-type))
      (common-lisp:list
       (common-lisp:cons "NodeType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'region))
      (common-lisp:list
       (common-lisp:cons "Region"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'current-generation))
      (common-lisp:list
       (common-lisp:cons "CurrentGeneration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'size-flex-eligible))
      (common-lisp:list
       (common-lisp:cons "SizeFlexEligible"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          memory-dbinstance-details))
   common-lisp:nil))
(common-lisp:deftype metric () 'common-lisp:string)
(common-lisp:deftype metric-amount () 'common-lisp:string)
(common-lisp:deftype metric-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype metric-names () '(trivial-types:proper-list metric-name))
 (common-lisp:defun make-metric-names
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list metric-name))
   aws-sdk/generator/shape::members))
(common-lisp:deftype metric-unit () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (metric-value (:copier common-lisp:nil)
      (:conc-name "struct-shape-metric-value-"))
   (amount common-lisp:nil :type
    (common-lisp:or metric-amount common-lisp:null))
   (unit common-lisp:nil :type (common-lisp:or metric-unit common-lisp:null)))
 (common-lisp:export (common-lisp:list 'metric-value 'make-metric-value))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input metric-value))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input metric-value))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'amount))
      (common-lisp:list
       (common-lisp:cons "Amount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'unit))
      (common-lisp:list
       (common-lisp:cons "Unit"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input metric-value))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype metrics () 'common-lisp:hash-table)
 (common-lisp:defun make-metrics (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:progn
 (common-lisp:deftype metrics-over-lookback-period ()
   '(trivial-types:proper-list recommendation-detail-hourly-metrics))
 (common-lisp:defun make-metrics-over-lookback-period
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            recommendation-detail-hourly-metrics))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (modify-recommendation-detail (:copier common-lisp:nil)
      (:conc-name "struct-shape-modify-recommendation-detail-"))
   (target-instances common-lisp:nil :type
    (common-lisp:or target-instances-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'modify-recommendation-detail
                    'make-modify-recommendation-detail))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          modify-recommendation-detail))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          modify-recommendation-detail))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target-instances))
      (common-lisp:list
       (common-lisp:cons "TargetInstances"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          modify-recommendation-detail))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype monitor-arn-list () '(trivial-types:proper-list arn))
 (common-lisp:defun make-monitor-arn-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list arn))
   aws-sdk/generator/shape::members))
(common-lisp:deftype monitor-dimension () 'common-lisp:string)
(common-lisp:deftype monitor-type () 'common-lisp:string)
(common-lisp:deftype net-risavings () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (network-resource-utilization (:copier common-lisp:nil)
      (:conc-name "struct-shape-network-resource-utilization-"))
   (network-in-bytes-per-second common-lisp:nil :type
    (common-lisp:or generic-string common-lisp:null))
   (network-out-bytes-per-second common-lisp:nil :type
    (common-lisp:or generic-string common-lisp:null))
   (network-packets-in-per-second common-lisp:nil :type
    (common-lisp:or generic-string common-lisp:null))
   (network-packets-out-per-second common-lisp:nil :type
    (common-lisp:or generic-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'network-resource-utilization
                    'make-network-resource-utilization))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          network-resource-utilization))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          network-resource-utilization))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'network-in-bytes-per-second))
      (common-lisp:list
       (common-lisp:cons "NetworkInBytesPerSecond"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'network-out-bytes-per-second))
      (common-lisp:list
       (common-lisp:cons "NetworkOutBytesPerSecond"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'network-packets-in-per-second))
      (common-lisp:list
       (common-lisp:cons "NetworkPacketsInPerSecond"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'network-packets-out-per-second))
      (common-lisp:list
       (common-lisp:cons "NetworkPacketsOutPerSecond"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          network-resource-utilization))
   common-lisp:nil))
(common-lisp:deftype next-page-token () 'common-lisp:string)
(common-lisp:deftype non-negative-integer () 'common-lisp:integer)
(common-lisp:deftype non-negative-long () 'common-lisp:integer)
(common-lisp:deftype nullable-non-negative-double () 'common-lisp:double-float)
(common-lisp:deftype numeric-operator () 'common-lisp:string)
(common-lisp:deftype offering-class () 'common-lisp:string)
(common-lisp:deftype on-demand-cost () 'common-lisp:string)
(common-lisp:deftype on-demand-cost-of-rihours-used () 'common-lisp:string)
(common-lisp:deftype on-demand-hours () 'common-lisp:string)
(common-lisp:deftype on-demand-normalized-units () 'common-lisp:string)
(common-lisp:deftype page-size () 'common-lisp:integer)
(common-lisp:deftype payment-option () 'common-lisp:string)
(common-lisp:deftype platform-difference () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype platform-differences ()
   '(trivial-types:proper-list platform-difference))
 (common-lisp:defun make-platform-differences
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list platform-difference))
   aws-sdk/generator/shape::members))
(common-lisp:deftype prediction-interval-level () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defstruct
     (provide-anomaly-feedback-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-provide-anomaly-feedback-request-"))
   (anomaly-id (common-lisp:error ":anomaly-id is required") :type
    (common-lisp:or generic-string common-lisp:null))
   (feedback (common-lisp:error ":feedback is required") :type
    (common-lisp:or anomaly-feedback-type common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'provide-anomaly-feedback-request
                    'make-provide-anomaly-feedback-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          provide-anomaly-feedback-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          provide-anomaly-feedback-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'anomaly-id))
      (common-lisp:list
       (common-lisp:cons "AnomalyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'feedback))
      (common-lisp:list
       (common-lisp:cons "Feedback"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          provide-anomaly-feedback-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (provide-anomaly-feedback-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-provide-anomaly-feedback-response-"))
   (anomaly-id (common-lisp:error ":anomaly-id is required") :type
    (common-lisp:or generic-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'provide-anomaly-feedback-response
                    'make-provide-anomaly-feedback-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          provide-anomaly-feedback-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          provide-anomaly-feedback-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'anomaly-id))
      (common-lisp:list
       (common-lisp:cons "AnomalyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          provide-anomaly-feedback-response))
   common-lisp:nil))
(common-lisp:deftype purchased-hours () 'common-lisp:string)
(common-lisp:deftype purchased-units () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (rdsinstance-details (:copier common-lisp:nil)
      (:conc-name "struct-shape-rdsinstance-details-"))
   (family common-lisp:nil :type
    (common-lisp:or generic-string common-lisp:null))
   (instance-type common-lisp:nil :type
    (common-lisp:or generic-string common-lisp:null))
   (region common-lisp:nil :type
    (common-lisp:or generic-string common-lisp:null))
   (database-engine common-lisp:nil :type
    (common-lisp:or generic-string common-lisp:null))
   (database-edition common-lisp:nil :type
    (common-lisp:or generic-string common-lisp:null))
   (deployment-option common-lisp:nil :type
    (common-lisp:or generic-string common-lisp:null))
   (license-model common-lisp:nil :type
    (common-lisp:or generic-string common-lisp:null))
   (current-generation common-lisp:nil :type
    (common-lisp:or generic-boolean common-lisp:null))
   (size-flex-eligible common-lisp:nil :type
    (common-lisp:or generic-boolean common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'rdsinstance-details 'make-rdsinstance-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input rdsinstance-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input rdsinstance-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'family))
      (common-lisp:list
       (common-lisp:cons "Family"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-type))
      (common-lisp:list
       (common-lisp:cons "InstanceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'region))
      (common-lisp:list
       (common-lisp:cons "Region"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'database-engine))
      (common-lisp:list
       (common-lisp:cons "DatabaseEngine"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'database-edition))
      (common-lisp:list
       (common-lisp:cons "DatabaseEdition"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'deployment-option))
      (common-lisp:list
       (common-lisp:cons "DeploymentOption"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'license-model))
      (common-lisp:list
       (common-lisp:cons "LicenseModel"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'current-generation))
      (common-lisp:list
       (common-lisp:cons "CurrentGeneration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'size-flex-eligible))
      (common-lisp:list
       (common-lisp:cons "SizeFlexEligible"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input rdsinstance-details))
   common-lisp:nil))
(common-lisp:deftype ricost-for-unused-hours () 'common-lisp:string)
(common-lisp:deftype realized-savings () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (recommendation-detail-data (:copier common-lisp:nil)
      (:conc-name "struct-shape-recommendation-detail-data-"))
   (account-scope common-lisp:nil :type
    (common-lisp:or account-scope common-lisp:null))
   (lookback-period-in-days common-lisp:nil :type
    (common-lisp:or lookback-period-in-days common-lisp:null))
   (savings-plans-type common-lisp:nil :type
    (common-lisp:or supported-savings-plans-type common-lisp:null))
   (term-in-years common-lisp:nil :type
    (common-lisp:or term-in-years common-lisp:null))
   (payment-option common-lisp:nil :type
    (common-lisp:or payment-option common-lisp:null))
   (account-id common-lisp:nil :type
    (common-lisp:or generic-string common-lisp:null))
   (currency-code common-lisp:nil :type
    (common-lisp:or generic-string common-lisp:null))
   (instance-family common-lisp:nil :type
    (common-lisp:or generic-string common-lisp:null))
   (region common-lisp:nil :type
    (common-lisp:or generic-string common-lisp:null))
   (offering-id common-lisp:nil :type
    (common-lisp:or generic-string common-lisp:null))
   (generation-timestamp common-lisp:nil :type
    (common-lisp:or zoned-date-time common-lisp:null))
   (latest-usage-timestamp common-lisp:nil :type
    (common-lisp:or zoned-date-time common-lisp:null))
   (current-average-hourly-on-demand-spend common-lisp:nil :type
    (common-lisp:or generic-string common-lisp:null))
   (current-maximum-hourly-on-demand-spend common-lisp:nil :type
    (common-lisp:or generic-string common-lisp:null))
   (current-minimum-hourly-on-demand-spend common-lisp:nil :type
    (common-lisp:or generic-string common-lisp:null))
   (estimated-average-utilization common-lisp:nil :type
    (common-lisp:or generic-string common-lisp:null))
   (estimated-monthly-savings-amount common-lisp:nil :type
    (common-lisp:or generic-string common-lisp:null))
   (estimated-on-demand-cost common-lisp:nil :type
    (common-lisp:or generic-string common-lisp:null))
   (estimated-on-demand-cost-with-current-commitment common-lisp:nil :type
    (common-lisp:or generic-string common-lisp:null))
   (estimated-roi common-lisp:nil :type
    (common-lisp:or generic-string common-lisp:null))
   (estimated-spcost common-lisp:nil :type
    (common-lisp:or generic-string common-lisp:null))
   (estimated-savings-amount common-lisp:nil :type
    (common-lisp:or generic-string common-lisp:null))
   (estimated-savings-percentage common-lisp:nil :type
    (common-lisp:or generic-string common-lisp:null))
   (existing-hourly-commitment common-lisp:nil :type
    (common-lisp:or generic-string common-lisp:null))
   (hourly-commitment-to-purchase common-lisp:nil :type
    (common-lisp:or generic-string common-lisp:null))
   (upfront-cost common-lisp:nil :type
    (common-lisp:or generic-string common-lisp:null))
   (current-average-coverage common-lisp:nil :type
    (common-lisp:or generic-string common-lisp:null))
   (estimated-average-coverage common-lisp:nil :type
    (common-lisp:or generic-string common-lisp:null))
   (metrics-over-lookback-period common-lisp:nil :type
    (common-lisp:or metrics-over-lookback-period common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'recommendation-detail-data
                    'make-recommendation-detail-data))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          recommendation-detail-data))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          recommendation-detail-data))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-scope))
      (common-lisp:list
       (common-lisp:cons "AccountScope"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'lookback-period-in-days))
      (common-lisp:list
       (common-lisp:cons "LookbackPeriodInDays"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'savings-plans-type))
      (common-lisp:list
       (common-lisp:cons "SavingsPlansType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'term-in-years))
      (common-lisp:list
       (common-lisp:cons "TermInYears"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'payment-option))
      (common-lisp:list
       (common-lisp:cons "PaymentOption"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-id))
      (common-lisp:list
       (common-lisp:cons "AccountId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'currency-code))
      (common-lisp:list
       (common-lisp:cons "CurrencyCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-family))
      (common-lisp:list
       (common-lisp:cons "InstanceFamily"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'region))
      (common-lisp:list
       (common-lisp:cons "Region"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'offering-id))
      (common-lisp:list
       (common-lisp:cons "OfferingId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'generation-timestamp))
      (common-lisp:list
       (common-lisp:cons "GenerationTimestamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'latest-usage-timestamp))
      (common-lisp:list
       (common-lisp:cons "LatestUsageTimestamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'current-average-hourly-on-demand-spend))
      (common-lisp:list
       (common-lisp:cons "CurrentAverageHourlyOnDemandSpend"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'current-maximum-hourly-on-demand-spend))
      (common-lisp:list
       (common-lisp:cons "CurrentMaximumHourlyOnDemandSpend"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'current-minimum-hourly-on-demand-spend))
      (common-lisp:list
       (common-lisp:cons "CurrentMinimumHourlyOnDemandSpend"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'estimated-average-utilization))
      (common-lisp:list
       (common-lisp:cons "EstimatedAverageUtilization"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'estimated-monthly-savings-amount))
      (common-lisp:list
       (common-lisp:cons "EstimatedMonthlySavingsAmount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'estimated-on-demand-cost))
      (common-lisp:list
       (common-lisp:cons "EstimatedOnDemandCost"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'estimated-on-demand-cost-with-current-commitment))
      (common-lisp:list
       (common-lisp:cons "EstimatedOnDemandCostWithCurrentCommitment"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'estimated-roi))
      (common-lisp:list
       (common-lisp:cons "EstimatedROI"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'estimated-spcost))
      (common-lisp:list
       (common-lisp:cons "EstimatedSPCost"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'estimated-savings-amount))
      (common-lisp:list
       (common-lisp:cons "EstimatedSavingsAmount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'estimated-savings-percentage))
      (common-lisp:list
       (common-lisp:cons "EstimatedSavingsPercentage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'existing-hourly-commitment))
      (common-lisp:list
       (common-lisp:cons "ExistingHourlyCommitment"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'hourly-commitment-to-purchase))
      (common-lisp:list
       (common-lisp:cons "HourlyCommitmentToPurchase"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'upfront-cost))
      (common-lisp:list
       (common-lisp:cons "UpfrontCost"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'current-average-coverage))
      (common-lisp:list
       (common-lisp:cons "CurrentAverageCoverage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'estimated-average-coverage))
      (common-lisp:list
       (common-lisp:cons "EstimatedAverageCoverage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'metrics-over-lookback-period))
      (common-lisp:list
       (common-lisp:cons "MetricsOverLookbackPeriod"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          recommendation-detail-data))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (recommendation-detail-hourly-metrics (:copier common-lisp:nil)
      (:conc-name "struct-shape-recommendation-detail-hourly-metrics-"))
   (start-time common-lisp:nil :type
    (common-lisp:or zoned-date-time common-lisp:null))
   (estimated-on-demand-cost common-lisp:nil :type
    (common-lisp:or generic-string common-lisp:null))
   (current-coverage common-lisp:nil :type
    (common-lisp:or generic-string common-lisp:null))
   (estimated-coverage common-lisp:nil :type
    (common-lisp:or generic-string common-lisp:null))
   (estimated-new-commitment-utilization common-lisp:nil :type
    (common-lisp:or generic-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'recommendation-detail-hourly-metrics
                    'make-recommendation-detail-hourly-metrics))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          recommendation-detail-hourly-metrics))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          recommendation-detail-hourly-metrics))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start-time))
      (common-lisp:list
       (common-lisp:cons "StartTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'estimated-on-demand-cost))
      (common-lisp:list
       (common-lisp:cons "EstimatedOnDemandCost"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'current-coverage))
      (common-lisp:list
       (common-lisp:cons "CurrentCoverage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'estimated-coverage))
      (common-lisp:list
       (common-lisp:cons "EstimatedCoverage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'estimated-new-commitment-utilization))
      (common-lisp:list
       (common-lisp:cons "EstimatedNewCommitmentUtilization"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          recommendation-detail-hourly-metrics))
   common-lisp:nil))
(common-lisp:deftype recommendation-detail-id () 'common-lisp:string)
(common-lisp:deftype recommendation-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype recommendation-id-list ()
   '(trivial-types:proper-list recommendation-id))
 (common-lisp:defun make-recommendation-id-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list recommendation-id))
   aws-sdk/generator/shape::members))
(common-lisp:deftype recommendation-target () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (redshift-instance-details (:copier common-lisp:nil)
      (:conc-name "struct-shape-redshift-instance-details-"))
   (family common-lisp:nil :type
    (common-lisp:or generic-string common-lisp:null))
   (node-type common-lisp:nil :type
    (common-lisp:or generic-string common-lisp:null))
   (region common-lisp:nil :type
    (common-lisp:or generic-string common-lisp:null))
   (current-generation common-lisp:nil :type
    (common-lisp:or generic-boolean common-lisp:null))
   (size-flex-eligible common-lisp:nil :type
    (common-lisp:or generic-boolean common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'redshift-instance-details
                    'make-redshift-instance-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          redshift-instance-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          redshift-instance-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'family))
      (common-lisp:list
       (common-lisp:cons "Family"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'node-type))
      (common-lisp:list
       (common-lisp:cons "NodeType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'region))
      (common-lisp:list
       (common-lisp:cons "Region"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'current-generation))
      (common-lisp:list
       (common-lisp:cons "CurrentGeneration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'size-flex-eligible))
      (common-lisp:list
       (common-lisp:cons "SizeFlexEligible"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          redshift-instance-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition request-changed-exception
     (ce-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       request-changed-exception-message)))
 (common-lisp:export
  (common-lisp:list 'request-changed-exception
                    'request-changed-exception-message)))
(common-lisp:progn
 (common-lisp:defstruct
     (reservation-aggregates (:copier common-lisp:nil)
      (:conc-name "struct-shape-reservation-aggregates-"))
   (utilization-percentage common-lisp:nil :type
    (common-lisp:or utilization-percentage common-lisp:null))
   (utilization-percentage-in-units common-lisp:nil :type
    (common-lisp:or utilization-percentage-in-units common-lisp:null))
   (purchased-hours common-lisp:nil :type
    (common-lisp:or purchased-hours common-lisp:null))
   (purchased-units common-lisp:nil :type
    (common-lisp:or purchased-units common-lisp:null))
   (total-actual-hours common-lisp:nil :type
    (common-lisp:or total-actual-hours common-lisp:null))
   (total-actual-units common-lisp:nil :type
    (common-lisp:or total-actual-units common-lisp:null))
   (unused-hours common-lisp:nil :type
    (common-lisp:or unused-hours common-lisp:null))
   (unused-units common-lisp:nil :type
    (common-lisp:or unused-units common-lisp:null))
   (on-demand-cost-of-rihours-used common-lisp:nil :type
    (common-lisp:or on-demand-cost-of-rihours-used common-lisp:null))
   (net-risavings common-lisp:nil :type
    (common-lisp:or net-risavings common-lisp:null))
   (total-potential-risavings common-lisp:nil :type
    (common-lisp:or total-potential-risavings common-lisp:null))
   (amortized-upfront-fee common-lisp:nil :type
    (common-lisp:or amortized-upfront-fee common-lisp:null))
   (amortized-recurring-fee common-lisp:nil :type
    (common-lisp:or amortized-recurring-fee common-lisp:null))
   (total-amortized-fee common-lisp:nil :type
    (common-lisp:or total-amortized-fee common-lisp:null))
   (ricost-for-unused-hours common-lisp:nil :type
    (common-lisp:or ricost-for-unused-hours common-lisp:null))
   (realized-savings common-lisp:nil :type
    (common-lisp:or realized-savings common-lisp:null))
   (unrealized-savings common-lisp:nil :type
    (common-lisp:or unrealized-savings common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'reservation-aggregates 'make-reservation-aggregates))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          reservation-aggregates))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          reservation-aggregates))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'utilization-percentage))
      (common-lisp:list
       (common-lisp:cons "UtilizationPercentage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'utilization-percentage-in-units))
      (common-lisp:list
       (common-lisp:cons "UtilizationPercentageInUnits"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'purchased-hours))
      (common-lisp:list
       (common-lisp:cons "PurchasedHours"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'purchased-units))
      (common-lisp:list
       (common-lisp:cons "PurchasedUnits"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'total-actual-hours))
      (common-lisp:list
       (common-lisp:cons "TotalActualHours"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'total-actual-units))
      (common-lisp:list
       (common-lisp:cons "TotalActualUnits"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'unused-hours))
      (common-lisp:list
       (common-lisp:cons "UnusedHours"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'unused-units))
      (common-lisp:list
       (common-lisp:cons "UnusedUnits"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'on-demand-cost-of-rihours-used))
      (common-lisp:list
       (common-lisp:cons "OnDemandCostOfRIHoursUsed"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'net-risavings))
      (common-lisp:list
       (common-lisp:cons "NetRISavings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'total-potential-risavings))
      (common-lisp:list
       (common-lisp:cons "TotalPotentialRISavings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'amortized-upfront-fee))
      (common-lisp:list
       (common-lisp:cons "AmortizedUpfrontFee"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'amortized-recurring-fee))
      (common-lisp:list
       (common-lisp:cons "AmortizedRecurringFee"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'total-amortized-fee))
      (common-lisp:list
       (common-lisp:cons "TotalAmortizedFee"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'ricost-for-unused-hours))
      (common-lisp:list
       (common-lisp:cons "RICostForUnusedHours"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'realized-savings))
      (common-lisp:list
       (common-lisp:cons "RealizedSavings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'unrealized-savings))
      (common-lisp:list
       (common-lisp:cons "UnrealizedSavings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          reservation-aggregates))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (reservation-coverage-group (:copier common-lisp:nil)
      (:conc-name "struct-shape-reservation-coverage-group-"))
   (attributes common-lisp:nil :type
    (common-lisp:or attributes common-lisp:null))
   (coverage common-lisp:nil :type (common-lisp:or coverage common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'reservation-coverage-group
                    'make-reservation-coverage-group))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          reservation-coverage-group))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          reservation-coverage-group))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'attributes))
      (common-lisp:list
       (common-lisp:cons "Attributes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'coverage))
      (common-lisp:list
       (common-lisp:cons "Coverage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          reservation-coverage-group))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype reservation-coverage-groups ()
   '(trivial-types:proper-list reservation-coverage-group))
 (common-lisp:defun make-reservation-coverage-groups
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            reservation-coverage-group))
   aws-sdk/generator/shape::members))
(common-lisp:deftype reservation-group-key () 'common-lisp:string)
(common-lisp:deftype reservation-group-value () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (reservation-purchase-recommendation (:copier common-lisp:nil)
      (:conc-name "struct-shape-reservation-purchase-recommendation-"))
   (account-scope common-lisp:nil :type
    (common-lisp:or account-scope common-lisp:null))
   (lookback-period-in-days common-lisp:nil :type
    (common-lisp:or lookback-period-in-days common-lisp:null))
   (term-in-years common-lisp:nil :type
    (common-lisp:or term-in-years common-lisp:null))
   (payment-option common-lisp:nil :type
    (common-lisp:or payment-option common-lisp:null))
   (service-specification common-lisp:nil :type
    (common-lisp:or service-specification common-lisp:null))
   (recommendation-details common-lisp:nil :type
    (common-lisp:or reservation-purchase-recommendation-details
                    common-lisp:null))
   (recommendation-summary common-lisp:nil :type
    (common-lisp:or reservation-purchase-recommendation-summary
                    common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'reservation-purchase-recommendation
                    'make-reservation-purchase-recommendation))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          reservation-purchase-recommendation))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          reservation-purchase-recommendation))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-scope))
      (common-lisp:list
       (common-lisp:cons "AccountScope"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'lookback-period-in-days))
      (common-lisp:list
       (common-lisp:cons "LookbackPeriodInDays"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'term-in-years))
      (common-lisp:list
       (common-lisp:cons "TermInYears"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'payment-option))
      (common-lisp:list
       (common-lisp:cons "PaymentOption"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'service-specification))
      (common-lisp:list
       (common-lisp:cons "ServiceSpecification"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'recommendation-details))
      (common-lisp:list
       (common-lisp:cons "RecommendationDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'recommendation-summary))
      (common-lisp:list
       (common-lisp:cons "RecommendationSummary"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          reservation-purchase-recommendation))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (reservation-purchase-recommendation-detail (:copier common-lisp:nil)
      (:conc-name "struct-shape-reservation-purchase-recommendation-detail-"))
   (account-id common-lisp:nil :type
    (common-lisp:or generic-string common-lisp:null))
   (instance-details common-lisp:nil :type
    (common-lisp:or instance-details common-lisp:null))
   (recommended-number-of-instances-to-purchase common-lisp:nil :type
    (common-lisp:or generic-string common-lisp:null))
   (recommended-normalized-units-to-purchase common-lisp:nil :type
    (common-lisp:or generic-string common-lisp:null))
   (minimum-number-of-instances-used-per-hour common-lisp:nil :type
    (common-lisp:or generic-string common-lisp:null))
   (minimum-normalized-units-used-per-hour common-lisp:nil :type
    (common-lisp:or generic-string common-lisp:null))
   (maximum-number-of-instances-used-per-hour common-lisp:nil :type
    (common-lisp:or generic-string common-lisp:null))
   (maximum-normalized-units-used-per-hour common-lisp:nil :type
    (common-lisp:or generic-string common-lisp:null))
   (average-number-of-instances-used-per-hour common-lisp:nil :type
    (common-lisp:or generic-string common-lisp:null))
   (average-normalized-units-used-per-hour common-lisp:nil :type
    (common-lisp:or generic-string common-lisp:null))
   (average-utilization common-lisp:nil :type
    (common-lisp:or generic-string common-lisp:null))
   (estimated-break-even-in-months common-lisp:nil :type
    (common-lisp:or generic-string common-lisp:null))
   (currency-code common-lisp:nil :type
    (common-lisp:or generic-string common-lisp:null))
   (estimated-monthly-savings-amount common-lisp:nil :type
    (common-lisp:or generic-string common-lisp:null))
   (estimated-monthly-savings-percentage common-lisp:nil :type
    (common-lisp:or generic-string common-lisp:null))
   (estimated-monthly-on-demand-cost common-lisp:nil :type
    (common-lisp:or generic-string common-lisp:null))
   (estimated-reservation-cost-for-lookback-period common-lisp:nil :type
    (common-lisp:or generic-string common-lisp:null))
   (upfront-cost common-lisp:nil :type
    (common-lisp:or generic-string common-lisp:null))
   (recurring-standard-monthly-cost common-lisp:nil :type
    (common-lisp:or generic-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'reservation-purchase-recommendation-detail
                    'make-reservation-purchase-recommendation-detail))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          reservation-purchase-recommendation-detail))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          reservation-purchase-recommendation-detail))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-id))
      (common-lisp:list
       (common-lisp:cons "AccountId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-details))
      (common-lisp:list
       (common-lisp:cons "InstanceDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'recommended-number-of-instances-to-purchase))
      (common-lisp:list
       (common-lisp:cons "RecommendedNumberOfInstancesToPurchase"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'recommended-normalized-units-to-purchase))
      (common-lisp:list
       (common-lisp:cons "RecommendedNormalizedUnitsToPurchase"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'minimum-number-of-instances-used-per-hour))
      (common-lisp:list
       (common-lisp:cons "MinimumNumberOfInstancesUsedPerHour"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'minimum-normalized-units-used-per-hour))
      (common-lisp:list
       (common-lisp:cons "MinimumNormalizedUnitsUsedPerHour"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'maximum-number-of-instances-used-per-hour))
      (common-lisp:list
       (common-lisp:cons "MaximumNumberOfInstancesUsedPerHour"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'maximum-normalized-units-used-per-hour))
      (common-lisp:list
       (common-lisp:cons "MaximumNormalizedUnitsUsedPerHour"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'average-number-of-instances-used-per-hour))
      (common-lisp:list
       (common-lisp:cons "AverageNumberOfInstancesUsedPerHour"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'average-normalized-units-used-per-hour))
      (common-lisp:list
       (common-lisp:cons "AverageNormalizedUnitsUsedPerHour"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'average-utilization))
      (common-lisp:list
       (common-lisp:cons "AverageUtilization"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'estimated-break-even-in-months))
      (common-lisp:list
       (common-lisp:cons "EstimatedBreakEvenInMonths"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'currency-code))
      (common-lisp:list
       (common-lisp:cons "CurrencyCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'estimated-monthly-savings-amount))
      (common-lisp:list
       (common-lisp:cons "EstimatedMonthlySavingsAmount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'estimated-monthly-savings-percentage))
      (common-lisp:list
       (common-lisp:cons "EstimatedMonthlySavingsPercentage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'estimated-monthly-on-demand-cost))
      (common-lisp:list
       (common-lisp:cons "EstimatedMonthlyOnDemandCost"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'estimated-reservation-cost-for-lookback-period))
      (common-lisp:list
       (common-lisp:cons "EstimatedReservationCostForLookbackPeriod"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'upfront-cost))
      (common-lisp:list
       (common-lisp:cons "UpfrontCost"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'recurring-standard-monthly-cost))
      (common-lisp:list
       (common-lisp:cons "RecurringStandardMonthlyCost"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          reservation-purchase-recommendation-detail))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype reservation-purchase-recommendation-details ()
   '(trivial-types:proper-list reservation-purchase-recommendation-detail))
 (common-lisp:defun make-reservation-purchase-recommendation-details
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            reservation-purchase-recommendation-detail))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (reservation-purchase-recommendation-metadata (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-reservation-purchase-recommendation-metadata-"))
   (recommendation-id common-lisp:nil :type
    (common-lisp:or generic-string common-lisp:null))
   (generation-timestamp common-lisp:nil :type
    (common-lisp:or generic-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'reservation-purchase-recommendation-metadata
                    'make-reservation-purchase-recommendation-metadata))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          reservation-purchase-recommendation-metadata))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          reservation-purchase-recommendation-metadata))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'recommendation-id))
      (common-lisp:list
       (common-lisp:cons "RecommendationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'generation-timestamp))
      (common-lisp:list
       (common-lisp:cons "GenerationTimestamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          reservation-purchase-recommendation-metadata))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (reservation-purchase-recommendation-summary (:copier common-lisp:nil)
      (:conc-name "struct-shape-reservation-purchase-recommendation-summary-"))
   (total-estimated-monthly-savings-amount common-lisp:nil :type
    (common-lisp:or generic-string common-lisp:null))
   (total-estimated-monthly-savings-percentage common-lisp:nil :type
    (common-lisp:or generic-string common-lisp:null))
   (currency-code common-lisp:nil :type
    (common-lisp:or generic-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'reservation-purchase-recommendation-summary
                    'make-reservation-purchase-recommendation-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          reservation-purchase-recommendation-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          reservation-purchase-recommendation-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'total-estimated-monthly-savings-amount))
      (common-lisp:list
       (common-lisp:cons "TotalEstimatedMonthlySavingsAmount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'total-estimated-monthly-savings-percentage))
      (common-lisp:list
       (common-lisp:cons "TotalEstimatedMonthlySavingsPercentage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'currency-code))
      (common-lisp:list
       (common-lisp:cons "CurrencyCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          reservation-purchase-recommendation-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype reservation-purchase-recommendations ()
   '(trivial-types:proper-list reservation-purchase-recommendation))
 (common-lisp:defun make-reservation-purchase-recommendations
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            reservation-purchase-recommendation))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (reservation-utilization-group (:copier common-lisp:nil)
      (:conc-name "struct-shape-reservation-utilization-group-"))
   (key common-lisp:nil :type
    (common-lisp:or reservation-group-key common-lisp:null))
   (value common-lisp:nil :type
    (common-lisp:or reservation-group-value common-lisp:null))
   (attributes common-lisp:nil :type
    (common-lisp:or attributes common-lisp:null))
   (utilization common-lisp:nil :type
    (common-lisp:or reservation-aggregates common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'reservation-utilization-group
                    'make-reservation-utilization-group))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          reservation-utilization-group))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          reservation-utilization-group))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key))
      (common-lisp:list
       (common-lisp:cons "Key"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "Value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'attributes))
      (common-lisp:list
       (common-lisp:cons "Attributes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'utilization))
      (common-lisp:list
       (common-lisp:cons "Utilization"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          reservation-utilization-group))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype reservation-utilization-groups ()
   '(trivial-types:proper-list reservation-utilization-group))
 (common-lisp:defun make-reservation-utilization-groups
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            reservation-utilization-group))
   aws-sdk/generator/shape::members))
(common-lisp:deftype reserved-hours () 'common-lisp:string)
(common-lisp:deftype reserved-normalized-units () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (resource-details (:copier common-lisp:nil)
      (:conc-name "struct-shape-resource-details-"))
   (ec2resource-details common-lisp:nil :type
    (common-lisp:or ec2resource-details common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'resource-details 'make-resource-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input resource-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input resource-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ec2resource-details))
      (common-lisp:list
       (common-lisp:cons "EC2ResourceDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input resource-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition resource-not-found-exception
     (ce-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       resource-not-found-exception-message)
      (resource-name :initarg :resource-name :initform common-lisp:nil :reader
       resource-not-found-exception-resource-name)))
 (common-lisp:export
  (common-lisp:list 'resource-not-found-exception
                    'resource-not-found-exception-message
                    'resource-not-found-exception-resource-name)))
(common-lisp:progn
 (common-lisp:defstruct
     (resource-tag (:copier common-lisp:nil)
      (:conc-name "struct-shape-resource-tag-"))
   (key (common-lisp:error ":key is required") :type
    (common-lisp:or resource-tag-key common-lisp:null))
   (value (common-lisp:error ":value is required") :type
    (common-lisp:or resource-tag-value common-lisp:null)))
 (common-lisp:export (common-lisp:list 'resource-tag 'make-resource-tag))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input resource-tag))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input resource-tag))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key))
      (common-lisp:list
       (common-lisp:cons "Key"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "Value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input resource-tag))
   common-lisp:nil))
(common-lisp:deftype resource-tag-key () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype resource-tag-key-list ()
   '(trivial-types:proper-list resource-tag-key))
 (common-lisp:defun make-resource-tag-key-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list resource-tag-key))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype resource-tag-list ()
   '(trivial-types:proper-list resource-tag))
 (common-lisp:defun make-resource-tag-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list resource-tag))
   aws-sdk/generator/shape::members))
(common-lisp:deftype resource-tag-value () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (resource-utilization (:copier common-lisp:nil)
      (:conc-name "struct-shape-resource-utilization-"))
   (ec2resource-utilization common-lisp:nil :type
    (common-lisp:or ec2resource-utilization common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'resource-utilization 'make-resource-utilization))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input resource-utilization))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input resource-utilization))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'ec2resource-utilization))
      (common-lisp:list
       (common-lisp:cons "EC2ResourceUtilization"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input resource-utilization))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (result-by-time (:copier common-lisp:nil)
      (:conc-name "struct-shape-result-by-time-"))
   (time-period common-lisp:nil :type
    (common-lisp:or date-interval common-lisp:null))
   (total common-lisp:nil :type (common-lisp:or metrics common-lisp:null))
   (groups common-lisp:nil :type (common-lisp:or groups common-lisp:null))
   (estimated common-lisp:nil :type
    (common-lisp:or estimated common-lisp:null)))
 (common-lisp:export (common-lisp:list 'result-by-time 'make-result-by-time))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input result-by-time))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input result-by-time))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'time-period))
      (common-lisp:list
       (common-lisp:cons "TimePeriod"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'total))
      (common-lisp:list
       (common-lisp:cons "Total"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'groups))
      (common-lisp:list
       (common-lisp:cons "Groups"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'estimated))
      (common-lisp:list
       (common-lisp:cons "Estimated"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input result-by-time))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype results-by-time ()
   '(trivial-types:proper-list result-by-time))
 (common-lisp:defun make-results-by-time
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list result-by-time))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (rightsizing-recommendation (:copier common-lisp:nil)
      (:conc-name "struct-shape-rightsizing-recommendation-"))
   (account-id common-lisp:nil :type
    (common-lisp:or generic-string common-lisp:null))
   (current-instance common-lisp:nil :type
    (common-lisp:or current-instance common-lisp:null))
   (rightsizing-type common-lisp:nil :type
    (common-lisp:or rightsizing-type common-lisp:null))
   (modify-recommendation-detail common-lisp:nil :type
    (common-lisp:or modify-recommendation-detail common-lisp:null))
   (terminate-recommendation-detail common-lisp:nil :type
    (common-lisp:or terminate-recommendation-detail common-lisp:null))
   (finding-reason-codes common-lisp:nil :type
    (common-lisp:or finding-reason-codes common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'rightsizing-recommendation
                    'make-rightsizing-recommendation))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          rightsizing-recommendation))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          rightsizing-recommendation))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-id))
      (common-lisp:list
       (common-lisp:cons "AccountId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'current-instance))
      (common-lisp:list
       (common-lisp:cons "CurrentInstance"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rightsizing-type))
      (common-lisp:list
       (common-lisp:cons "RightsizingType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'modify-recommendation-detail))
      (common-lisp:list
       (common-lisp:cons "ModifyRecommendationDetail"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'terminate-recommendation-detail))
      (common-lisp:list
       (common-lisp:cons "TerminateRecommendationDetail"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'finding-reason-codes))
      (common-lisp:list
       (common-lisp:cons "FindingReasonCodes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          rightsizing-recommendation))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (rightsizing-recommendation-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-rightsizing-recommendation-configuration-"))
   (recommendation-target
    (common-lisp:error ":recommendation-target is required") :type
    (common-lisp:or recommendation-target common-lisp:null))
   (benefits-considered (common-lisp:error ":benefits-considered is required")
    :type (common-lisp:or generic-boolean common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'rightsizing-recommendation-configuration
                    'make-rightsizing-recommendation-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          rightsizing-recommendation-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          rightsizing-recommendation-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'recommendation-target))
      (common-lisp:list
       (common-lisp:cons "RecommendationTarget"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'benefits-considered))
      (common-lisp:list
       (common-lisp:cons "BenefitsConsidered"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          rightsizing-recommendation-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype rightsizing-recommendation-list ()
   '(trivial-types:proper-list rightsizing-recommendation))
 (common-lisp:defun make-rightsizing-recommendation-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            rightsizing-recommendation))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (rightsizing-recommendation-metadata (:copier common-lisp:nil)
      (:conc-name "struct-shape-rightsizing-recommendation-metadata-"))
   (recommendation-id common-lisp:nil :type
    (common-lisp:or generic-string common-lisp:null))
   (generation-timestamp common-lisp:nil :type
    (common-lisp:or generic-string common-lisp:null))
   (lookback-period-in-days common-lisp:nil :type
    (common-lisp:or lookback-period-in-days common-lisp:null))
   (additional-metadata common-lisp:nil :type
    (common-lisp:or generic-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'rightsizing-recommendation-metadata
                    'make-rightsizing-recommendation-metadata))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          rightsizing-recommendation-metadata))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          rightsizing-recommendation-metadata))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'recommendation-id))
      (common-lisp:list
       (common-lisp:cons "RecommendationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'generation-timestamp))
      (common-lisp:list
       (common-lisp:cons "GenerationTimestamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'lookback-period-in-days))
      (common-lisp:list
       (common-lisp:cons "LookbackPeriodInDays"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'additional-metadata))
      (common-lisp:list
       (common-lisp:cons "AdditionalMetadata"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          rightsizing-recommendation-metadata))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (rightsizing-recommendation-summary (:copier common-lisp:nil)
      (:conc-name "struct-shape-rightsizing-recommendation-summary-"))
   (total-recommendation-count common-lisp:nil :type
    (common-lisp:or generic-string common-lisp:null))
   (estimated-total-monthly-savings-amount common-lisp:nil :type
    (common-lisp:or generic-string common-lisp:null))
   (savings-currency-code common-lisp:nil :type
    (common-lisp:or generic-string common-lisp:null))
   (savings-percentage common-lisp:nil :type
    (common-lisp:or generic-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'rightsizing-recommendation-summary
                    'make-rightsizing-recommendation-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          rightsizing-recommendation-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          rightsizing-recommendation-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'total-recommendation-count))
      (common-lisp:list
       (common-lisp:cons "TotalRecommendationCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'estimated-total-monthly-savings-amount))
      (common-lisp:list
       (common-lisp:cons "EstimatedTotalMonthlySavingsAmount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'savings-currency-code))
      (common-lisp:list
       (common-lisp:cons "SavingsCurrencyCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'savings-percentage))
      (common-lisp:list
       (common-lisp:cons "SavingsPercentage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          rightsizing-recommendation-summary))
   common-lisp:nil))
(common-lisp:deftype rightsizing-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (root-cause (:copier common-lisp:nil)
      (:conc-name "struct-shape-root-cause-"))
   (service common-lisp:nil :type
    (common-lisp:or generic-string common-lisp:null))
   (region common-lisp:nil :type
    (common-lisp:or generic-string common-lisp:null))
   (linked-account common-lisp:nil :type
    (common-lisp:or generic-string common-lisp:null))
   (usage-type common-lisp:nil :type
    (common-lisp:or generic-string common-lisp:null))
   (linked-account-name common-lisp:nil :type
    (common-lisp:or generic-string common-lisp:null)))
 (common-lisp:export (common-lisp:list 'root-cause 'make-root-cause))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input root-cause))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input root-cause))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service))
      (common-lisp:list
       (common-lisp:cons "Service"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'region))
      (common-lisp:list
       (common-lisp:cons "Region"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'linked-account))
      (common-lisp:list
       (common-lisp:cons "LinkedAccount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'usage-type))
      (common-lisp:list
       (common-lisp:cons "UsageType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'linked-account-name))
      (common-lisp:list
       (common-lisp:cons "LinkedAccountName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input root-cause))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype root-causes () '(trivial-types:proper-list root-cause))
 (common-lisp:defun make-root-causes
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list root-cause))
   aws-sdk/generator/shape::members))
(common-lisp:deftype savings-plan-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (savings-plans-amortized-commitment (:copier common-lisp:nil)
      (:conc-name "struct-shape-savings-plans-amortized-commitment-"))
   (amortized-recurring-commitment common-lisp:nil :type
    (common-lisp:or generic-string common-lisp:null))
   (amortized-upfront-commitment common-lisp:nil :type
    (common-lisp:or generic-string common-lisp:null))
   (total-amortized-commitment common-lisp:nil :type
    (common-lisp:or generic-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'savings-plans-amortized-commitment
                    'make-savings-plans-amortized-commitment))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          savings-plans-amortized-commitment))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          savings-plans-amortized-commitment))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'amortized-recurring-commitment))
      (common-lisp:list
       (common-lisp:cons "AmortizedRecurringCommitment"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'amortized-upfront-commitment))
      (common-lisp:list
       (common-lisp:cons "AmortizedUpfrontCommitment"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'total-amortized-commitment))
      (common-lisp:list
       (common-lisp:cons "TotalAmortizedCommitment"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          savings-plans-amortized-commitment))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (savings-plans-coverage (:copier common-lisp:nil)
      (:conc-name "struct-shape-savings-plans-coverage-"))
   (attributes common-lisp:nil :type
    (common-lisp:or attributes common-lisp:null))
   (coverage common-lisp:nil :type
    (common-lisp:or savings-plans-coverage-data common-lisp:null))
   (time-period common-lisp:nil :type
    (common-lisp:or date-interval common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'savings-plans-coverage 'make-savings-plans-coverage))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          savings-plans-coverage))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          savings-plans-coverage))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'attributes))
      (common-lisp:list
       (common-lisp:cons "Attributes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'coverage))
      (common-lisp:list
       (common-lisp:cons "Coverage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'time-period))
      (common-lisp:list
       (common-lisp:cons "TimePeriod"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          savings-plans-coverage))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (savings-plans-coverage-data (:copier common-lisp:nil)
      (:conc-name "struct-shape-savings-plans-coverage-data-"))
   (spend-covered-by-savings-plans common-lisp:nil :type
    (common-lisp:or generic-string common-lisp:null))
   (on-demand-cost common-lisp:nil :type
    (common-lisp:or generic-string common-lisp:null))
   (total-cost common-lisp:nil :type
    (common-lisp:or generic-string common-lisp:null))
   (coverage-percentage common-lisp:nil :type
    (common-lisp:or generic-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'savings-plans-coverage-data
                    'make-savings-plans-coverage-data))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          savings-plans-coverage-data))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          savings-plans-coverage-data))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'spend-covered-by-savings-plans))
      (common-lisp:list
       (common-lisp:cons "SpendCoveredBySavingsPlans"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'on-demand-cost))
      (common-lisp:list
       (common-lisp:cons "OnDemandCost"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'total-cost))
      (common-lisp:list
       (common-lisp:cons "TotalCost"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'coverage-percentage))
      (common-lisp:list
       (common-lisp:cons "CoveragePercentage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          savings-plans-coverage-data))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype savings-plans-coverages ()
   '(trivial-types:proper-list savings-plans-coverage))
 (common-lisp:defun make-savings-plans-coverages
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list savings-plans-coverage))
   aws-sdk/generator/shape::members))
(common-lisp:deftype savings-plans-data-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype savings-plans-data-types ()
   '(trivial-types:proper-list savings-plans-data-type))
 (common-lisp:defun make-savings-plans-data-types
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list savings-plans-data-type))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (savings-plans-details (:copier common-lisp:nil)
      (:conc-name "struct-shape-savings-plans-details-"))
   (region common-lisp:nil :type
    (common-lisp:or generic-string common-lisp:null))
   (instance-family common-lisp:nil :type
    (common-lisp:or generic-string common-lisp:null))
   (offering-id common-lisp:nil :type
    (common-lisp:or generic-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'savings-plans-details 'make-savings-plans-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          savings-plans-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          savings-plans-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'region))
      (common-lisp:list
       (common-lisp:cons "Region"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-family))
      (common-lisp:list
       (common-lisp:cons "InstanceFamily"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'offering-id))
      (common-lisp:list
       (common-lisp:cons "OfferingId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          savings-plans-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (savings-plans-purchase-recommendation (:copier common-lisp:nil)
      (:conc-name "struct-shape-savings-plans-purchase-recommendation-"))
   (account-scope common-lisp:nil :type
    (common-lisp:or account-scope common-lisp:null))
   (savings-plans-type common-lisp:nil :type
    (common-lisp:or supported-savings-plans-type common-lisp:null))
   (term-in-years common-lisp:nil :type
    (common-lisp:or term-in-years common-lisp:null))
   (payment-option common-lisp:nil :type
    (common-lisp:or payment-option common-lisp:null))
   (lookback-period-in-days common-lisp:nil :type
    (common-lisp:or lookback-period-in-days common-lisp:null))
   (savings-plans-purchase-recommendation-details common-lisp:nil :type
    (common-lisp:or savings-plans-purchase-recommendation-detail-list
                    common-lisp:null))
   (savings-plans-purchase-recommendation-summary common-lisp:nil :type
    (common-lisp:or savings-plans-purchase-recommendation-summary
                    common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'savings-plans-purchase-recommendation
                    'make-savings-plans-purchase-recommendation))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          savings-plans-purchase-recommendation))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          savings-plans-purchase-recommendation))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-scope))
      (common-lisp:list
       (common-lisp:cons "AccountScope"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'savings-plans-type))
      (common-lisp:list
       (common-lisp:cons "SavingsPlansType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'term-in-years))
      (common-lisp:list
       (common-lisp:cons "TermInYears"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'payment-option))
      (common-lisp:list
       (common-lisp:cons "PaymentOption"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'lookback-period-in-days))
      (common-lisp:list
       (common-lisp:cons "LookbackPeriodInDays"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'savings-plans-purchase-recommendation-details))
      (common-lisp:list
       (common-lisp:cons "SavingsPlansPurchaseRecommendationDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'savings-plans-purchase-recommendation-summary))
      (common-lisp:list
       (common-lisp:cons "SavingsPlansPurchaseRecommendationSummary"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          savings-plans-purchase-recommendation))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (savings-plans-purchase-recommendation-detail (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-savings-plans-purchase-recommendation-detail-"))
   (savings-plans-details common-lisp:nil :type
    (common-lisp:or savings-plans-details common-lisp:null))
   (account-id common-lisp:nil :type
    (common-lisp:or generic-string common-lisp:null))
   (upfront-cost common-lisp:nil :type
    (common-lisp:or generic-string common-lisp:null))
   (estimated-roi common-lisp:nil :type
    (common-lisp:or generic-string common-lisp:null))
   (currency-code common-lisp:nil :type
    (common-lisp:or generic-string common-lisp:null))
   (estimated-spcost common-lisp:nil :type
    (common-lisp:or generic-string common-lisp:null))
   (estimated-on-demand-cost common-lisp:nil :type
    (common-lisp:or generic-string common-lisp:null))
   (estimated-on-demand-cost-with-current-commitment common-lisp:nil :type
    (common-lisp:or generic-string common-lisp:null))
   (estimated-savings-amount common-lisp:nil :type
    (common-lisp:or generic-string common-lisp:null))
   (estimated-savings-percentage common-lisp:nil :type
    (common-lisp:or generic-string common-lisp:null))
   (hourly-commitment-to-purchase common-lisp:nil :type
    (common-lisp:or generic-string common-lisp:null))
   (estimated-average-utilization common-lisp:nil :type
    (common-lisp:or generic-string common-lisp:null))
   (estimated-monthly-savings-amount common-lisp:nil :type
    (common-lisp:or generic-string common-lisp:null))
   (current-minimum-hourly-on-demand-spend common-lisp:nil :type
    (common-lisp:or generic-string common-lisp:null))
   (current-maximum-hourly-on-demand-spend common-lisp:nil :type
    (common-lisp:or generic-string common-lisp:null))
   (current-average-hourly-on-demand-spend common-lisp:nil :type
    (common-lisp:or generic-string common-lisp:null))
   (recommendation-detail-id common-lisp:nil :type
    (common-lisp:or recommendation-detail-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'savings-plans-purchase-recommendation-detail
                    'make-savings-plans-purchase-recommendation-detail))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          savings-plans-purchase-recommendation-detail))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          savings-plans-purchase-recommendation-detail))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'savings-plans-details))
      (common-lisp:list
       (common-lisp:cons "SavingsPlansDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-id))
      (common-lisp:list
       (common-lisp:cons "AccountId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'upfront-cost))
      (common-lisp:list
       (common-lisp:cons "UpfrontCost"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'estimated-roi))
      (common-lisp:list
       (common-lisp:cons "EstimatedROI"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'currency-code))
      (common-lisp:list
       (common-lisp:cons "CurrencyCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'estimated-spcost))
      (common-lisp:list
       (common-lisp:cons "EstimatedSPCost"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'estimated-on-demand-cost))
      (common-lisp:list
       (common-lisp:cons "EstimatedOnDemandCost"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'estimated-on-demand-cost-with-current-commitment))
      (common-lisp:list
       (common-lisp:cons "EstimatedOnDemandCostWithCurrentCommitment"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'estimated-savings-amount))
      (common-lisp:list
       (common-lisp:cons "EstimatedSavingsAmount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'estimated-savings-percentage))
      (common-lisp:list
       (common-lisp:cons "EstimatedSavingsPercentage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'hourly-commitment-to-purchase))
      (common-lisp:list
       (common-lisp:cons "HourlyCommitmentToPurchase"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'estimated-average-utilization))
      (common-lisp:list
       (common-lisp:cons "EstimatedAverageUtilization"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'estimated-monthly-savings-amount))
      (common-lisp:list
       (common-lisp:cons "EstimatedMonthlySavingsAmount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'current-minimum-hourly-on-demand-spend))
      (common-lisp:list
       (common-lisp:cons "CurrentMinimumHourlyOnDemandSpend"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'current-maximum-hourly-on-demand-spend))
      (common-lisp:list
       (common-lisp:cons "CurrentMaximumHourlyOnDemandSpend"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'current-average-hourly-on-demand-spend))
      (common-lisp:list
       (common-lisp:cons "CurrentAverageHourlyOnDemandSpend"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'recommendation-detail-id))
      (common-lisp:list
       (common-lisp:cons "RecommendationDetailId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          savings-plans-purchase-recommendation-detail))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype savings-plans-purchase-recommendation-detail-list ()
   '(trivial-types:proper-list savings-plans-purchase-recommendation-detail))
 (common-lisp:defun make-savings-plans-purchase-recommendation-detail-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            savings-plans-purchase-recommendation-detail))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (savings-plans-purchase-recommendation-metadata (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-savings-plans-purchase-recommendation-metadata-"))
   (recommendation-id common-lisp:nil :type
    (common-lisp:or generic-string common-lisp:null))
   (generation-timestamp common-lisp:nil :type
    (common-lisp:or generic-string common-lisp:null))
   (additional-metadata common-lisp:nil :type
    (common-lisp:or generic-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'savings-plans-purchase-recommendation-metadata
                    'make-savings-plans-purchase-recommendation-metadata))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          savings-plans-purchase-recommendation-metadata))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          savings-plans-purchase-recommendation-metadata))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'recommendation-id))
      (common-lisp:list
       (common-lisp:cons "RecommendationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'generation-timestamp))
      (common-lisp:list
       (common-lisp:cons "GenerationTimestamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'additional-metadata))
      (common-lisp:list
       (common-lisp:cons "AdditionalMetadata"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          savings-plans-purchase-recommendation-metadata))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (savings-plans-purchase-recommendation-summary (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-savings-plans-purchase-recommendation-summary-"))
   (estimated-roi common-lisp:nil :type
    (common-lisp:or generic-string common-lisp:null))
   (currency-code common-lisp:nil :type
    (common-lisp:or generic-string common-lisp:null))
   (estimated-total-cost common-lisp:nil :type
    (common-lisp:or generic-string common-lisp:null))
   (current-on-demand-spend common-lisp:nil :type
    (common-lisp:or generic-string common-lisp:null))
   (estimated-savings-amount common-lisp:nil :type
    (common-lisp:or generic-string common-lisp:null))
   (total-recommendation-count common-lisp:nil :type
    (common-lisp:or generic-string common-lisp:null))
   (daily-commitment-to-purchase common-lisp:nil :type
    (common-lisp:or generic-string common-lisp:null))
   (hourly-commitment-to-purchase common-lisp:nil :type
    (common-lisp:or generic-string common-lisp:null))
   (estimated-savings-percentage common-lisp:nil :type
    (common-lisp:or generic-string common-lisp:null))
   (estimated-monthly-savings-amount common-lisp:nil :type
    (common-lisp:or generic-string common-lisp:null))
   (estimated-on-demand-cost-with-current-commitment common-lisp:nil :type
    (common-lisp:or generic-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'savings-plans-purchase-recommendation-summary
                    'make-savings-plans-purchase-recommendation-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          savings-plans-purchase-recommendation-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          savings-plans-purchase-recommendation-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'estimated-roi))
      (common-lisp:list
       (common-lisp:cons "EstimatedROI"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'currency-code))
      (common-lisp:list
       (common-lisp:cons "CurrencyCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'estimated-total-cost))
      (common-lisp:list
       (common-lisp:cons "EstimatedTotalCost"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'current-on-demand-spend))
      (common-lisp:list
       (common-lisp:cons "CurrentOnDemandSpend"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'estimated-savings-amount))
      (common-lisp:list
       (common-lisp:cons "EstimatedSavingsAmount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'total-recommendation-count))
      (common-lisp:list
       (common-lisp:cons "TotalRecommendationCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'daily-commitment-to-purchase))
      (common-lisp:list
       (common-lisp:cons "DailyCommitmentToPurchase"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'hourly-commitment-to-purchase))
      (common-lisp:list
       (common-lisp:cons "HourlyCommitmentToPurchase"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'estimated-savings-percentage))
      (common-lisp:list
       (common-lisp:cons "EstimatedSavingsPercentage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'estimated-monthly-savings-amount))
      (common-lisp:list
       (common-lisp:cons "EstimatedMonthlySavingsAmount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'estimated-on-demand-cost-with-current-commitment))
      (common-lisp:list
       (common-lisp:cons "EstimatedOnDemandCostWithCurrentCommitment"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          savings-plans-purchase-recommendation-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (savings-plans-savings (:copier common-lisp:nil)
      (:conc-name "struct-shape-savings-plans-savings-"))
   (net-savings common-lisp:nil :type
    (common-lisp:or generic-string common-lisp:null))
   (on-demand-cost-equivalent common-lisp:nil :type
    (common-lisp:or generic-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'savings-plans-savings 'make-savings-plans-savings))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          savings-plans-savings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          savings-plans-savings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'net-savings))
      (common-lisp:list
       (common-lisp:cons "NetSavings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'on-demand-cost-equivalent))
      (common-lisp:list
       (common-lisp:cons "OnDemandCostEquivalent"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          savings-plans-savings))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (savings-plans-utilization (:copier common-lisp:nil)
      (:conc-name "struct-shape-savings-plans-utilization-"))
   (total-commitment common-lisp:nil :type
    (common-lisp:or generic-string common-lisp:null))
   (used-commitment common-lisp:nil :type
    (common-lisp:or generic-string common-lisp:null))
   (unused-commitment common-lisp:nil :type
    (common-lisp:or generic-string common-lisp:null))
   (utilization-percentage common-lisp:nil :type
    (common-lisp:or generic-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'savings-plans-utilization
                    'make-savings-plans-utilization))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          savings-plans-utilization))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          savings-plans-utilization))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'total-commitment))
      (common-lisp:list
       (common-lisp:cons "TotalCommitment"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'used-commitment))
      (common-lisp:list
       (common-lisp:cons "UsedCommitment"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'unused-commitment))
      (common-lisp:list
       (common-lisp:cons "UnusedCommitment"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'utilization-percentage))
      (common-lisp:list
       (common-lisp:cons "UtilizationPercentage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          savings-plans-utilization))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (savings-plans-utilization-aggregates (:copier common-lisp:nil)
      (:conc-name "struct-shape-savings-plans-utilization-aggregates-"))
   (utilization (common-lisp:error ":utilization is required") :type
    (common-lisp:or savings-plans-utilization common-lisp:null))
   (savings common-lisp:nil :type
    (common-lisp:or savings-plans-savings common-lisp:null))
   (amortized-commitment common-lisp:nil :type
    (common-lisp:or savings-plans-amortized-commitment common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'savings-plans-utilization-aggregates
                    'make-savings-plans-utilization-aggregates))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          savings-plans-utilization-aggregates))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          savings-plans-utilization-aggregates))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'utilization))
      (common-lisp:list
       (common-lisp:cons "Utilization"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'savings))
      (common-lisp:list
       (common-lisp:cons "Savings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'amortized-commitment))
      (common-lisp:list
       (common-lisp:cons "AmortizedCommitment"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          savings-plans-utilization-aggregates))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (savings-plans-utilization-by-time (:copier common-lisp:nil)
      (:conc-name "struct-shape-savings-plans-utilization-by-time-"))
   (time-period (common-lisp:error ":time-period is required") :type
    (common-lisp:or date-interval common-lisp:null))
   (utilization (common-lisp:error ":utilization is required") :type
    (common-lisp:or savings-plans-utilization common-lisp:null))
   (savings common-lisp:nil :type
    (common-lisp:or savings-plans-savings common-lisp:null))
   (amortized-commitment common-lisp:nil :type
    (common-lisp:or savings-plans-amortized-commitment common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'savings-plans-utilization-by-time
                    'make-savings-plans-utilization-by-time))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          savings-plans-utilization-by-time))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          savings-plans-utilization-by-time))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'time-period))
      (common-lisp:list
       (common-lisp:cons "TimePeriod"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'utilization))
      (common-lisp:list
       (common-lisp:cons "Utilization"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'savings))
      (common-lisp:list
       (common-lisp:cons "Savings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'amortized-commitment))
      (common-lisp:list
       (common-lisp:cons "AmortizedCommitment"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          savings-plans-utilization-by-time))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (savings-plans-utilization-detail (:copier common-lisp:nil)
      (:conc-name "struct-shape-savings-plans-utilization-detail-"))
   (savings-plan-arn common-lisp:nil :type
    (common-lisp:or savings-plan-arn common-lisp:null))
   (attributes common-lisp:nil :type
    (common-lisp:or attributes common-lisp:null))
   (utilization common-lisp:nil :type
    (common-lisp:or savings-plans-utilization common-lisp:null))
   (savings common-lisp:nil :type
    (common-lisp:or savings-plans-savings common-lisp:null))
   (amortized-commitment common-lisp:nil :type
    (common-lisp:or savings-plans-amortized-commitment common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'savings-plans-utilization-detail
                    'make-savings-plans-utilization-detail))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          savings-plans-utilization-detail))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          savings-plans-utilization-detail))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'savings-plan-arn))
      (common-lisp:list
       (common-lisp:cons "SavingsPlanArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'attributes))
      (common-lisp:list
       (common-lisp:cons "Attributes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'utilization))
      (common-lisp:list
       (common-lisp:cons "Utilization"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'savings))
      (common-lisp:list
       (common-lisp:cons "Savings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'amortized-commitment))
      (common-lisp:list
       (common-lisp:cons "AmortizedCommitment"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          savings-plans-utilization-detail))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype savings-plans-utilization-details ()
   '(trivial-types:proper-list savings-plans-utilization-detail))
 (common-lisp:defun make-savings-plans-utilization-details
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            savings-plans-utilization-detail))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype savings-plans-utilizations-by-time ()
   '(trivial-types:proper-list savings-plans-utilization-by-time))
 (common-lisp:defun make-savings-plans-utilizations-by-time
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            savings-plans-utilization-by-time))
   aws-sdk/generator/shape::members))
(common-lisp:deftype search-string () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition service-quota-exceeded-exception
     (ce-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       service-quota-exceeded-exception-message)))
 (common-lisp:export
  (common-lisp:list 'service-quota-exceeded-exception
                    'service-quota-exceeded-exception-message)))
(common-lisp:progn
 (common-lisp:defstruct
     (service-specification (:copier common-lisp:nil)
      (:conc-name "struct-shape-service-specification-"))
   (ec2specification common-lisp:nil :type
    (common-lisp:or ec2specification common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'service-specification 'make-service-specification))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          service-specification))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          service-specification))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ec2specification))
      (common-lisp:list
       (common-lisp:cons "EC2Specification"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          service-specification))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (sort-definition (:copier common-lisp:nil)
      (:conc-name "struct-shape-sort-definition-"))
   (key (common-lisp:error ":key is required") :type
    (common-lisp:or sort-definition-key common-lisp:null))
   (sort-order common-lisp:nil :type
    (common-lisp:or sort-order common-lisp:null)))
 (common-lisp:export (common-lisp:list 'sort-definition 'make-sort-definition))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input sort-definition))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input sort-definition))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key))
      (common-lisp:list
       (common-lisp:cons "Key"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sort-order))
      (common-lisp:list
       (common-lisp:cons "SortOrder"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input sort-definition))
   common-lisp:nil))
(common-lisp:deftype sort-definition-key () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype sort-definitions ()
   '(trivial-types:proper-list sort-definition))
 (common-lisp:defun make-sort-definitions
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list sort-definition))
   aws-sdk/generator/shape::members))
(common-lisp:deftype sort-order () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (start-savings-plans-purchase-recommendation-generation-request
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-start-savings-plans-purchase-recommendation-generation-request-")))
 (common-lisp:export
  (common-lisp:list
   'start-savings-plans-purchase-recommendation-generation-request
   'make-start-savings-plans-purchase-recommendation-generation-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-savings-plans-purchase-recommendation-generation-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-savings-plans-purchase-recommendation-generation-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-savings-plans-purchase-recommendation-generation-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (start-savings-plans-purchase-recommendation-generation-response
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-start-savings-plans-purchase-recommendation-generation-response-"))
   (recommendation-id common-lisp:nil :type
    (common-lisp:or recommendation-id common-lisp:null))
   (generation-started-time common-lisp:nil :type
    (common-lisp:or zoned-date-time common-lisp:null))
   (estimated-completion-time common-lisp:nil :type
    (common-lisp:or zoned-date-time common-lisp:null)))
 (common-lisp:export
  (common-lisp:list
   'start-savings-plans-purchase-recommendation-generation-response
   'make-start-savings-plans-purchase-recommendation-generation-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-savings-plans-purchase-recommendation-generation-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-savings-plans-purchase-recommendation-generation-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'recommendation-id))
      (common-lisp:list
       (common-lisp:cons "RecommendationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'generation-started-time))
      (common-lisp:list
       (common-lisp:cons "GenerationStartedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'estimated-completion-time))
      (common-lisp:list
       (common-lisp:cons "EstimatedCompletionTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-savings-plans-purchase-recommendation-generation-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (subscriber (:copier common-lisp:nil)
      (:conc-name "struct-shape-subscriber-"))
   (address common-lisp:nil :type
    (common-lisp:or subscriber-address common-lisp:null))
   (type common-lisp:nil :type
    (common-lisp:or subscriber-type common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or subscriber-status common-lisp:null)))
 (common-lisp:export (common-lisp:list 'subscriber 'make-subscriber))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input subscriber))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input subscriber))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'address))
      (common-lisp:list
       (common-lisp:cons "Address"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input subscriber))
   common-lisp:nil))
(common-lisp:deftype subscriber-address () 'common-lisp:string)
(common-lisp:deftype subscriber-status () 'common-lisp:string)
(common-lisp:deftype subscriber-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype subscribers () '(trivial-types:proper-list subscriber))
 (common-lisp:defun make-subscribers
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list subscriber))
   aws-sdk/generator/shape::members))
(common-lisp:deftype supported-savings-plans-type () 'common-lisp:string)
(common-lisp:deftype tag-key () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype tag-list () '(trivial-types:proper-list entity))
 (common-lisp:defun make-tag-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list entity))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (tag-resource-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-tag-resource-request-"))
   (resource-arn (common-lisp:error ":resource-arn is required") :type
    (common-lisp:or arn common-lisp:null))
   (resource-tags (common-lisp:error ":resource-tags is required") :type
    (common-lisp:or resource-tag-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'tag-resource-request 'make-tag-resource-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input tag-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input tag-resource-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-arn))
      (common-lisp:list
       (common-lisp:cons "ResourceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-tags))
      (common-lisp:list
       (common-lisp:cons "ResourceTags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input tag-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (tag-resource-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-tag-resource-response-")))
 (common-lisp:export
  (common-lisp:list 'tag-resource-response 'make-tag-resource-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          tag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          tag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          tag-resource-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (tag-values (:copier common-lisp:nil)
      (:conc-name "struct-shape-tag-values-"))
   (key common-lisp:nil :type (common-lisp:or tag-key common-lisp:null))
   (values common-lisp:nil :type (common-lisp:or values common-lisp:null))
   (match-options common-lisp:nil :type
    (common-lisp:or match-options common-lisp:null)))
 (common-lisp:export (common-lisp:list 'tag-values 'make-tag-values))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input tag-values))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input tag-values))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key))
      (common-lisp:list
       (common-lisp:cons "Key"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'values))
      (common-lisp:list
       (common-lisp:cons "Values"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'match-options))
      (common-lisp:list
       (common-lisp:cons "MatchOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input tag-values))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype tag-values-list ()
   '(trivial-types:proper-list tag-values))
 (common-lisp:defun make-tag-values-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list tag-values))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (target-instance (:copier common-lisp:nil)
      (:conc-name "struct-shape-target-instance-"))
   (estimated-monthly-cost common-lisp:nil :type
    (common-lisp:or generic-string common-lisp:null))
   (estimated-monthly-savings common-lisp:nil :type
    (common-lisp:or generic-string common-lisp:null))
   (currency-code common-lisp:nil :type
    (common-lisp:or generic-string common-lisp:null))
   (default-target-instance common-lisp:nil :type
    (common-lisp:or generic-boolean common-lisp:null))
   (resource-details common-lisp:nil :type
    (common-lisp:or resource-details common-lisp:null))
   (expected-resource-utilization common-lisp:nil :type
    (common-lisp:or resource-utilization common-lisp:null))
   (platform-differences common-lisp:nil :type
    (common-lisp:or platform-differences common-lisp:null)))
 (common-lisp:export (common-lisp:list 'target-instance 'make-target-instance))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input target-instance))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input target-instance))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'estimated-monthly-cost))
      (common-lisp:list
       (common-lisp:cons "EstimatedMonthlyCost"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'estimated-monthly-savings))
      (common-lisp:list
       (common-lisp:cons "EstimatedMonthlySavings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'currency-code))
      (common-lisp:list
       (common-lisp:cons "CurrencyCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'default-target-instance))
      (common-lisp:list
       (common-lisp:cons "DefaultTargetInstance"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-details))
      (common-lisp:list
       (common-lisp:cons "ResourceDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'expected-resource-utilization))
      (common-lisp:list
       (common-lisp:cons "ExpectedResourceUtilization"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'platform-differences))
      (common-lisp:list
       (common-lisp:cons "PlatformDifferences"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input target-instance))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype target-instances-list ()
   '(trivial-types:proper-list target-instance))
 (common-lisp:defun make-target-instances-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list target-instance))
   aws-sdk/generator/shape::members))
(common-lisp:deftype term-in-years () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (terminate-recommendation-detail (:copier common-lisp:nil)
      (:conc-name "struct-shape-terminate-recommendation-detail-"))
   (estimated-monthly-savings common-lisp:nil :type
    (common-lisp:or generic-string common-lisp:null))
   (currency-code common-lisp:nil :type
    (common-lisp:or generic-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'terminate-recommendation-detail
                    'make-terminate-recommendation-detail))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          terminate-recommendation-detail))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          terminate-recommendation-detail))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'estimated-monthly-savings))
      (common-lisp:list
       (common-lisp:cons "EstimatedMonthlySavings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'currency-code))
      (common-lisp:list
       (common-lisp:cons "CurrencyCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          terminate-recommendation-detail))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition too-many-tags-exception
     (ce-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       too-many-tags-exception-message)
      (resource-name :initarg :resource-name :initform common-lisp:nil :reader
       too-many-tags-exception-resource-name)))
 (common-lisp:export
  (common-lisp:list 'too-many-tags-exception 'too-many-tags-exception-message
                    'too-many-tags-exception-resource-name)))
(common-lisp:deftype total-actual-hours () 'common-lisp:string)
(common-lisp:deftype total-actual-units () 'common-lisp:string)
(common-lisp:deftype total-amortized-fee () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (total-impact-filter (:copier common-lisp:nil)
      (:conc-name "struct-shape-total-impact-filter-"))
   (numeric-operator (common-lisp:error ":numeric-operator is required") :type
    (common-lisp:or numeric-operator common-lisp:null))
   (start-value (common-lisp:error ":start-value is required") :type
    (common-lisp:or generic-double common-lisp:null))
   (end-value common-lisp:nil :type
    (common-lisp:or generic-double common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'total-impact-filter 'make-total-impact-filter))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input total-impact-filter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input total-impact-filter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'numeric-operator))
      (common-lisp:list
       (common-lisp:cons "NumericOperator"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start-value))
      (common-lisp:list
       (common-lisp:cons "StartValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'end-value))
      (common-lisp:list
       (common-lisp:cons "EndValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input total-impact-filter))
   common-lisp:nil))
(common-lisp:deftype total-potential-risavings () 'common-lisp:string)
(common-lisp:deftype total-running-hours () 'common-lisp:string)
(common-lisp:deftype total-running-normalized-units () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition unknown-monitor-exception
     (ce-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       unknown-monitor-exception-message)))
 (common-lisp:export
  (common-lisp:list 'unknown-monitor-exception
                    'unknown-monitor-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition unknown-subscription-exception
     (ce-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       unknown-subscription-exception-message)))
 (common-lisp:export
  (common-lisp:list 'unknown-subscription-exception
                    'unknown-subscription-exception-message)))
(common-lisp:deftype unrealized-savings () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition unresolvable-usage-unit-exception
     (ce-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       unresolvable-usage-unit-exception-message)))
 (common-lisp:export
  (common-lisp:list 'unresolvable-usage-unit-exception
                    'unresolvable-usage-unit-exception-message)))
(common-lisp:progn
 (common-lisp:defstruct
     (untag-resource-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-untag-resource-request-"))
   (resource-arn (common-lisp:error ":resource-arn is required") :type
    (common-lisp:or arn common-lisp:null))
   (resource-tag-keys (common-lisp:error ":resource-tag-keys is required")
    :type (common-lisp:or resource-tag-key-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'untag-resource-request 'make-untag-resource-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-arn))
      (common-lisp:list
       (common-lisp:cons "ResourceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-tag-keys))
      (common-lisp:list
       (common-lisp:cons "ResourceTagKeys"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (untag-resource-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-untag-resource-response-")))
 (common-lisp:export
  (common-lisp:list 'untag-resource-response 'make-untag-resource-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-response))
   common-lisp:nil))
(common-lisp:deftype unused-hours () 'common-lisp:string)
(common-lisp:deftype unused-units () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (update-anomaly-monitor-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-anomaly-monitor-request-"))
   (monitor-arn (common-lisp:error ":monitor-arn is required") :type
    (common-lisp:or generic-string common-lisp:null))
   (monitor-name common-lisp:nil :type
    (common-lisp:or generic-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-anomaly-monitor-request
                    'make-update-anomaly-monitor-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-anomaly-monitor-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-anomaly-monitor-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'monitor-arn))
      (common-lisp:list
       (common-lisp:cons "MonitorArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'monitor-name))
      (common-lisp:list
       (common-lisp:cons "MonitorName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-anomaly-monitor-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-anomaly-monitor-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-anomaly-monitor-response-"))
   (monitor-arn (common-lisp:error ":monitor-arn is required") :type
    (common-lisp:or generic-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-anomaly-monitor-response
                    'make-update-anomaly-monitor-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-anomaly-monitor-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-anomaly-monitor-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'monitor-arn))
      (common-lisp:list
       (common-lisp:cons "MonitorArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-anomaly-monitor-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-anomaly-subscription-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-anomaly-subscription-request-"))
   (subscription-arn (common-lisp:error ":subscription-arn is required") :type
    (common-lisp:or generic-string common-lisp:null))
   (threshold common-lisp:nil :type
    (common-lisp:or nullable-non-negative-double common-lisp:null))
   (frequency common-lisp:nil :type
    (common-lisp:or anomaly-subscription-frequency common-lisp:null))
   (monitor-arn-list common-lisp:nil :type
    (common-lisp:or monitor-arn-list common-lisp:null))
   (subscribers common-lisp:nil :type
    (common-lisp:or subscribers common-lisp:null))
   (subscription-name common-lisp:nil :type
    (common-lisp:or generic-string common-lisp:null))
   (threshold-expression common-lisp:nil :type
    (common-lisp:or expression common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-anomaly-subscription-request
                    'make-update-anomaly-subscription-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-anomaly-subscription-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-anomaly-subscription-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subscription-arn))
      (common-lisp:list
       (common-lisp:cons "SubscriptionArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'threshold))
      (common-lisp:list
       (common-lisp:cons "Threshold"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'frequency))
      (common-lisp:list
       (common-lisp:cons "Frequency"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'monitor-arn-list))
      (common-lisp:list
       (common-lisp:cons "MonitorArnList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subscribers))
      (common-lisp:list
       (common-lisp:cons "Subscribers"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subscription-name))
      (common-lisp:list
       (common-lisp:cons "SubscriptionName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'threshold-expression))
      (common-lisp:list
       (common-lisp:cons "ThresholdExpression"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-anomaly-subscription-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-anomaly-subscription-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-anomaly-subscription-response-"))
   (subscription-arn (common-lisp:error ":subscription-arn is required") :type
    (common-lisp:or generic-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-anomaly-subscription-response
                    'make-update-anomaly-subscription-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-anomaly-subscription-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-anomaly-subscription-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subscription-arn))
      (common-lisp:list
       (common-lisp:cons "SubscriptionArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-anomaly-subscription-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-cost-allocation-tags-status-error (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-cost-allocation-tags-status-error-"))
   (tag-key common-lisp:nil :type (common-lisp:or tag-key common-lisp:null))
   (code common-lisp:nil :type
    (common-lisp:or generic-string common-lisp:null))
   (message common-lisp:nil :type
    (common-lisp:or error-message common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-cost-allocation-tags-status-error
                    'make-update-cost-allocation-tags-status-error))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-cost-allocation-tags-status-error))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-cost-allocation-tags-status-error))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tag-key))
      (common-lisp:list
       (common-lisp:cons "TagKey"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'code))
      (common-lisp:list
       (common-lisp:cons "Code"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message))
      (common-lisp:list
       (common-lisp:cons "Message"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-cost-allocation-tags-status-error))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype update-cost-allocation-tags-status-errors ()
   '(trivial-types:proper-list update-cost-allocation-tags-status-error))
 (common-lisp:defun make-update-cost-allocation-tags-status-errors
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            update-cost-allocation-tags-status-error))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (update-cost-allocation-tags-status-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-cost-allocation-tags-status-request-"))
   (cost-allocation-tags-status
    (common-lisp:error ":cost-allocation-tags-status is required") :type
    (common-lisp:or cost-allocation-tag-status-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-cost-allocation-tags-status-request
                    'make-update-cost-allocation-tags-status-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-cost-allocation-tags-status-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-cost-allocation-tags-status-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cost-allocation-tags-status))
      (common-lisp:list
       (common-lisp:cons "CostAllocationTagsStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-cost-allocation-tags-status-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-cost-allocation-tags-status-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-cost-allocation-tags-status-response-"))
   (errors common-lisp:nil :type
    (common-lisp:or update-cost-allocation-tags-status-errors
                    common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-cost-allocation-tags-status-response
                    'make-update-cost-allocation-tags-status-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-cost-allocation-tags-status-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-cost-allocation-tags-status-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'errors))
      (common-lisp:list
       (common-lisp:cons "Errors"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-cost-allocation-tags-status-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-cost-category-definition-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-cost-category-definition-request-"))
   (cost-category-arn (common-lisp:error ":cost-category-arn is required")
    :type (common-lisp:or arn common-lisp:null))
   (effective-start common-lisp:nil :type
    (common-lisp:or zoned-date-time common-lisp:null))
   (rule-version (common-lisp:error ":rule-version is required") :type
    (common-lisp:or cost-category-rule-version common-lisp:null))
   (rules (common-lisp:error ":rules is required") :type
    (common-lisp:or cost-category-rules-list common-lisp:null))
   (default-value common-lisp:nil :type
    (common-lisp:or cost-category-value common-lisp:null))
   (split-charge-rules common-lisp:nil :type
    (common-lisp:or cost-category-split-charge-rules-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-cost-category-definition-request
                    'make-update-cost-category-definition-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-cost-category-definition-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-cost-category-definition-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cost-category-arn))
      (common-lisp:list
       (common-lisp:cons "CostCategoryArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'effective-start))
      (common-lisp:list
       (common-lisp:cons "EffectiveStart"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rule-version))
      (common-lisp:list
       (common-lisp:cons "RuleVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rules))
      (common-lisp:list
       (common-lisp:cons "Rules"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'default-value))
      (common-lisp:list
       (common-lisp:cons "DefaultValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'split-charge-rules))
      (common-lisp:list
       (common-lisp:cons "SplitChargeRules"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-cost-category-definition-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-cost-category-definition-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-cost-category-definition-response-"))
   (cost-category-arn common-lisp:nil :type
    (common-lisp:or arn common-lisp:null))
   (effective-start common-lisp:nil :type
    (common-lisp:or zoned-date-time common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-cost-category-definition-response
                    'make-update-cost-category-definition-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-cost-category-definition-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-cost-category-definition-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cost-category-arn))
      (common-lisp:list
       (common-lisp:cons "CostCategoryArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'effective-start))
      (common-lisp:list
       (common-lisp:cons "EffectiveStart"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-cost-category-definition-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype usage-services ()
   '(trivial-types:proper-list generic-string))
 (common-lisp:defun make-usage-services
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list generic-string))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (utilization-by-time (:copier common-lisp:nil)
      (:conc-name "struct-shape-utilization-by-time-"))
   (time-period common-lisp:nil :type
    (common-lisp:or date-interval common-lisp:null))
   (groups common-lisp:nil :type
    (common-lisp:or reservation-utilization-groups common-lisp:null))
   (total common-lisp:nil :type
    (common-lisp:or reservation-aggregates common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'utilization-by-time 'make-utilization-by-time))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input utilization-by-time))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input utilization-by-time))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'time-period))
      (common-lisp:list
       (common-lisp:cons "TimePeriod"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'groups))
      (common-lisp:list
       (common-lisp:cons "Groups"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'total))
      (common-lisp:list
       (common-lisp:cons "Total"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input utilization-by-time))
   common-lisp:nil))
(common-lisp:deftype utilization-percentage () 'common-lisp:string)
(common-lisp:deftype utilization-percentage-in-units () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype utilizations-by-time ()
   '(trivial-types:proper-list utilization-by-time))
 (common-lisp:defun make-utilizations-by-time
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list utilization-by-time))
   aws-sdk/generator/shape::members))
(common-lisp:deftype value () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype values () '(trivial-types:proper-list value))
 (common-lisp:defun make-values
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list value))
   aws-sdk/generator/shape::members))
(common-lisp:deftype year-month-day () 'common-lisp:string)
(common-lisp:deftype zoned-date-time () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defun create-anomaly-monitor
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key anomaly-monitor resource-tags)
   (common-lisp:declare (common-lisp:ignorable anomaly-monitor resource-tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-anomaly-monitor-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ce-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CreateAnomalyMonitor"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-anomaly-monitor))
(common-lisp:progn
 (common-lisp:defun create-anomaly-subscription
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key anomaly-subscription resource-tags)
   (common-lisp:declare
    (common-lisp:ignorable anomaly-subscription resource-tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-create-anomaly-subscription-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ce-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CreateAnomalySubscription"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-anomaly-subscription))
(common-lisp:progn
 (common-lisp:defun create-cost-category-definition
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name effective-start rule-version rules
                     default-value split-charge-rules resource-tags)
   (common-lisp:declare
    (common-lisp:ignorable name effective-start rule-version rules
     default-value split-charge-rules resource-tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-create-cost-category-definition-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ce-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CreateCostCategoryDefinition"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-cost-category-definition))
(common-lisp:progn
 (common-lisp:defun delete-anomaly-monitor
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key monitor-arn)
   (common-lisp:declare (common-lisp:ignorable monitor-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-anomaly-monitor-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ce-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteAnomalyMonitor"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-anomaly-monitor))
(common-lisp:progn
 (common-lisp:defun delete-anomaly-subscription
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key subscription-arn)
   (common-lisp:declare (common-lisp:ignorable subscription-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-delete-anomaly-subscription-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ce-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteAnomalySubscription"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-anomaly-subscription))
(common-lisp:progn
 (common-lisp:defun delete-cost-category-definition
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key cost-category-arn)
   (common-lisp:declare (common-lisp:ignorable cost-category-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-delete-cost-category-definition-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ce-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteCostCategoryDefinition"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-cost-category-definition))
(common-lisp:progn
 (common-lisp:defun describe-cost-category-definition
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key cost-category-arn effective-on)
   (common-lisp:declare (common-lisp:ignorable cost-category-arn effective-on))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-cost-category-definition-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ce-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeCostCategoryDefinition"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-cost-category-definition))
(common-lisp:progn
 (common-lisp:defun get-anomalies
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key monitor-arn date-interval feedback
                     total-impact next-page-token max-results)
   (common-lisp:declare
    (common-lisp:ignorable monitor-arn date-interval feedback total-impact
     next-page-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-anomalies-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ce-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetAnomalies"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-anomalies))
(common-lisp:progn
 (common-lisp:defun get-anomaly-monitors
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key monitor-arn-list next-page-token
                     max-results)
   (common-lisp:declare
    (common-lisp:ignorable monitor-arn-list next-page-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-anomaly-monitors-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ce-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetAnomalyMonitors"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-anomaly-monitors))
(common-lisp:progn
 (common-lisp:defun get-anomaly-subscriptions
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key subscription-arn-list monitor-arn
                     next-page-token max-results)
   (common-lisp:declare
    (common-lisp:ignorable subscription-arn-list monitor-arn next-page-token
     max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-get-anomaly-subscriptions-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ce-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetAnomalySubscriptions"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-anomaly-subscriptions))
(common-lisp:progn
 (common-lisp:defun get-approximate-usage-records
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key granularity services
                     approximation-dimension)
   (common-lisp:declare
    (common-lisp:ignorable granularity services approximation-dimension))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-get-approximate-usage-records-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ce-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetApproximateUsageRecords"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-approximate-usage-records))
(common-lisp:progn
 (common-lisp:defun get-cost-and-usage
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key time-period granularity filter metrics
                     group-by next-page-token)
   (common-lisp:declare
    (common-lisp:ignorable time-period granularity filter metrics group-by
     next-page-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-cost-and-usage-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ce-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetCostAndUsage"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-cost-and-usage))
(common-lisp:progn
 (common-lisp:defun get-cost-and-usage-with-resources
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key time-period granularity filter metrics
                     group-by next-page-token)
   (common-lisp:declare
    (common-lisp:ignorable time-period granularity filter metrics group-by
     next-page-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-get-cost-and-usage-with-resources-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ce-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetCostAndUsageWithResources"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-cost-and-usage-with-resources))
(common-lisp:progn
 (common-lisp:defun get-cost-categories
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key search-string time-period
                     cost-category-name filter sort-by max-results
                     next-page-token)
   (common-lisp:declare
    (common-lisp:ignorable search-string time-period cost-category-name filter
     sort-by max-results next-page-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-cost-categories-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ce-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetCostCategories"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-cost-categories))
(common-lisp:progn
 (common-lisp:defun get-cost-forecast
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key time-period metric granularity filter
                     prediction-interval-level)
   (common-lisp:declare
    (common-lisp:ignorable time-period metric granularity filter
     prediction-interval-level))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-cost-forecast-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ce-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetCostForecast"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-cost-forecast))
(common-lisp:progn
 (common-lisp:defun get-dimension-values
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key search-string time-period dimension
                     context filter sort-by max-results next-page-token)
   (common-lisp:declare
    (common-lisp:ignorable search-string time-period dimension context filter
     sort-by max-results next-page-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-dimension-values-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ce-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetDimensionValues"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-dimension-values))
(common-lisp:progn
 (common-lisp:defun get-reservation-coverage
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key time-period group-by granularity filter
                     metrics next-page-token sort-by max-results)
   (common-lisp:declare
    (common-lisp:ignorable time-period group-by granularity filter metrics
     next-page-token sort-by max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-reservation-coverage-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ce-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetReservationCoverage"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-reservation-coverage))
(common-lisp:progn
 (common-lisp:defun get-reservation-purchase-recommendation
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key account-id service filter account-scope
                     lookback-period-in-days term-in-years payment-option
                     service-specification page-size next-page-token)
   (common-lisp:declare
    (common-lisp:ignorable account-id service filter account-scope
     lookback-period-in-days term-in-years payment-option service-specification
     page-size next-page-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-get-reservation-purchase-recommendation-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ce-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetReservationPurchaseRecommendation"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-reservation-purchase-recommendation))
(common-lisp:progn
 (common-lisp:defun get-reservation-utilization
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key time-period group-by granularity filter
                     sort-by next-page-token max-results)
   (common-lisp:declare
    (common-lisp:ignorable time-period group-by granularity filter sort-by
     next-page-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-get-reservation-utilization-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ce-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetReservationUtilization"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-reservation-utilization))
(common-lisp:progn
 (common-lisp:defun get-rightsizing-recommendation
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key filter configuration service page-size
                     next-page-token)
   (common-lisp:declare
    (common-lisp:ignorable filter configuration service page-size
     next-page-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-get-rightsizing-recommendation-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ce-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetRightsizingRecommendation"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-rightsizing-recommendation))
(common-lisp:progn
 (common-lisp:defun get-savings-plan-purchase-recommendation-details
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key recommendation-detail-id)
   (common-lisp:declare (common-lisp:ignorable recommendation-detail-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-get-savings-plan-purchase-recommendation-details-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ce-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetSavingsPlanPurchaseRecommendationDetails"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-savings-plan-purchase-recommendation-details))
(common-lisp:progn
 (common-lisp:defun get-savings-plans-coverage
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key time-period group-by granularity filter
                     metrics next-token max-results sort-by)
   (common-lisp:declare
    (common-lisp:ignorable time-period group-by granularity filter metrics
     next-token max-results sort-by))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-get-savings-plans-coverage-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ce-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetSavingsPlansCoverage"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-savings-plans-coverage))
(common-lisp:progn
 (common-lisp:defun get-savings-plans-purchase-recommendation
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key savings-plans-type term-in-years
                     payment-option account-scope next-page-token page-size
                     lookback-period-in-days filter)
   (common-lisp:declare
    (common-lisp:ignorable savings-plans-type term-in-years payment-option
     account-scope next-page-token page-size lookback-period-in-days filter))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-get-savings-plans-purchase-recommendation-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ce-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetSavingsPlansPurchaseRecommendation"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-savings-plans-purchase-recommendation))
(common-lisp:progn
 (common-lisp:defun get-savings-plans-utilization
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key time-period granularity filter sort-by)
   (common-lisp:declare
    (common-lisp:ignorable time-period granularity filter sort-by))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-get-savings-plans-utilization-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ce-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetSavingsPlansUtilization"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-savings-plans-utilization))
(common-lisp:progn
 (common-lisp:defun get-savings-plans-utilization-details
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key time-period filter data-type next-token
                     max-results sort-by)
   (common-lisp:declare
    (common-lisp:ignorable time-period filter data-type next-token max-results
     sort-by))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-get-savings-plans-utilization-details-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ce-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetSavingsPlansUtilizationDetails"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-savings-plans-utilization-details))
(common-lisp:progn
 (common-lisp:defun get-tags
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key search-string time-period tag-key filter
                     sort-by max-results next-page-token)
   (common-lisp:declare
    (common-lisp:ignorable search-string time-period tag-key filter sort-by
     max-results next-page-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-tags-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ce-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/" "GetTags"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-tags))
(common-lisp:progn
 (common-lisp:defun get-usage-forecast
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key time-period metric granularity filter
                     prediction-interval-level)
   (common-lisp:declare
    (common-lisp:ignorable time-period metric granularity filter
     prediction-interval-level))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-usage-forecast-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ce-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetUsageForecast"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-usage-forecast))
(common-lisp:progn
 (common-lisp:defun list-cost-allocation-tags
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key status tag-keys type next-token
                     max-results)
   (common-lisp:declare
    (common-lisp:ignorable status tag-keys type next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-cost-allocation-tags-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ce-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ListCostAllocationTags"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-cost-allocation-tags))
(common-lisp:progn
 (common-lisp:defun list-cost-category-definitions
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key effective-on next-token max-results)
   (common-lisp:declare
    (common-lisp:ignorable effective-on next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-cost-category-definitions-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ce-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ListCostCategoryDefinitions"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-cost-category-definitions))
(common-lisp:progn
 (common-lisp:defun list-savings-plans-purchase-recommendation-generation
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key generation-status recommendation-ids
                     page-size next-page-token)
   (common-lisp:declare
    (common-lisp:ignorable generation-status recommendation-ids page-size
     next-page-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-savings-plans-purchase-recommendation-generation-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ce-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ListSavingsPlansPurchaseRecommendationGeneration"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-savings-plans-purchase-recommendation-generation))
(common-lisp:progn
 (common-lisp:defun list-tags-for-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn)
   (common-lisp:declare (common-lisp:ignorable resource-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-tags-for-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ce-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ListTagsForResource"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-tags-for-resource))
(common-lisp:progn
 (common-lisp:defun provide-anomaly-feedback
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key anomaly-id feedback)
   (common-lisp:declare (common-lisp:ignorable anomaly-id feedback))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-provide-anomaly-feedback-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ce-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ProvideAnomalyFeedback"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'provide-anomaly-feedback))
(common-lisp:progn
 (common-lisp:defun start-savings-plans-purchase-recommendation-generation ()
   (aws-sdk/generator/operation::parse-response
    (aws-sdk/api:aws-request
     (common-lisp:make-instance 'ce-request :method "POST" :path "/" :operation
                                "StartSavingsPlansPurchaseRecommendationGeneration"))
    common-lisp:nil common-lisp:nil *error-map*))
 (common-lisp:export 'start-savings-plans-purchase-recommendation-generation))
(common-lisp:progn
 (common-lisp:defun tag-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn resource-tags)
   (common-lisp:declare (common-lisp:ignorable resource-arn resource-tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-tag-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ce-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "TagResource"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'tag-resource))
(common-lisp:progn
 (common-lisp:defun untag-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn resource-tag-keys)
   (common-lisp:declare (common-lisp:ignorable resource-arn resource-tag-keys))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-untag-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ce-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "UntagResource"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'untag-resource))
(common-lisp:progn
 (common-lisp:defun update-anomaly-monitor
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key monitor-arn monitor-name)
   (common-lisp:declare (common-lisp:ignorable monitor-arn monitor-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-anomaly-monitor-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ce-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "UpdateAnomalyMonitor"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-anomaly-monitor))
(common-lisp:progn
 (common-lisp:defun update-anomaly-subscription
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key subscription-arn threshold frequency
                     monitor-arn-list subscribers subscription-name
                     threshold-expression)
   (common-lisp:declare
    (common-lisp:ignorable subscription-arn threshold frequency
     monitor-arn-list subscribers subscription-name threshold-expression))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-update-anomaly-subscription-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ce-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "UpdateAnomalySubscription"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-anomaly-subscription))
(common-lisp:progn
 (common-lisp:defun update-cost-allocation-tags-status
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key cost-allocation-tags-status)
   (common-lisp:declare (common-lisp:ignorable cost-allocation-tags-status))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-update-cost-allocation-tags-status-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ce-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "UpdateCostAllocationTagsStatus"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-cost-allocation-tags-status))
(common-lisp:progn
 (common-lisp:defun update-cost-category-definition
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key cost-category-arn effective-start
                     rule-version rules default-value split-charge-rules)
   (common-lisp:declare
    (common-lisp:ignorable cost-category-arn effective-start rule-version rules
     default-value split-charge-rules))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-update-cost-category-definition-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ce-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "UpdateCostCategoryDefinition"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-cost-category-definition))
