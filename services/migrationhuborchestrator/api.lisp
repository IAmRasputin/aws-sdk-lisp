;; DO NOT EDIT: File is generated by AWS-SDK/GENERATOR.

(common-lisp:defpackage #:aws-sdk/services/migrationhuborchestrator/api
  (:use)
  (:nicknames #:aws/migrationhuborchestrator)
  (:import-from #:aws-sdk/generator/shape)
  (:import-from #:aws-sdk/generator/operation)
  (:import-from #:aws-sdk/api)
  (:import-from #:aws-sdk/request)
  (:import-from #:aws-sdk/error))
(common-lisp:in-package #:aws-sdk/services/migrationhuborchestrator/api)
(common-lisp:progn
 (common-lisp:defclass migrationhuborchestrator-request
                       (aws-sdk/request:request) common-lisp:nil
                       (:default-initargs :service "migrationhuborchestrator"
                        :protocol :rest-json))
 (common-lisp:export 'migrationhuborchestrator-request))
(common-lisp:progn
 (common-lisp:define-condition migrationhuborchestrator-error
     (aws-sdk/error:aws-error)
     common-lisp:nil)
 (common-lisp:export 'migrationhuborchestrator-error))
(common-lisp:defvar *error-map*
  '(("AccessDeniedException" . access-denied-exception)
    ("InternalServerException" . internal-server-exception)
    ("ResourceNotFoundException" . resource-not-found-exception)
    ("ThrottlingException" . throttling-exception)
    ("ValidationException" . validation-exception)))
(common-lisp:progn
 (common-lisp:define-condition access-denied-exception
     (migrationhuborchestrator-error)
     ((message :initarg :|message| :initform common-lisp:nil :reader
       access-denied-exception-message)))
 (common-lisp:export
  (common-lisp:list 'access-denied-exception 'access-denied-exception-message)))
(common-lisp:deftype application-configuration-name () 'common-lisp:string)
(common-lisp:deftype boolean () 'common-lisp:boolean)
(common-lisp:progn
 (common-lisp:defclass create-migration-workflow-request common-lisp:nil
                       ((tags :initarg :|tags| :type
                         (common-lisp:or string-map common-lisp:null) :accessor
                         %create-migration-workflow-request-tags :initform
                         common-lisp:nil)
                        (step-targets :initarg :|stepTargets| :type
                         (common-lisp:or string-list common-lisp:null)
                         :accessor
                         %create-migration-workflow-request-step-targets
                         :initform common-lisp:nil)
                        (input-parameters :initarg :|inputParameters| :type
                         (common-lisp:or step-input-parameters
                                         common-lisp:null)
                         :accessor
                         %create-migration-workflow-request-input-parameters
                         :initform
                         (common-lisp:error ":inputparameters is required"))
                        (application-configuration-id :initarg
                         :|applicationConfigurationId| :type
                         (common-lisp:or
                          create-migration-workflow-request-application-configuration-id-string
                          common-lisp:null)
                         :accessor
                         %create-migration-workflow-request-application-configuration-id
                         :initform
                         (common-lisp:error
                          ":applicationconfigurationid is required"))
                        (template-id :initarg :|templateId| :type
                         (common-lisp:or
                          create-migration-workflow-request-template-id-string
                          common-lisp:null)
                         :accessor
                         %create-migration-workflow-request-template-id
                         :initform
                         (common-lisp:error ":templateid is required"))
                        (description :initarg :|description| :type
                         (common-lisp:or
                          create-migration-workflow-request-description-string
                          common-lisp:null)
                         :accessor
                         %create-migration-workflow-request-description
                         :initform common-lisp:nil)
                        (name :initarg :|name| :type
                         (common-lisp:or
                          create-migration-workflow-request-name-string
                          common-lisp:null)
                         :accessor %create-migration-workflow-request-name
                         :initform (common-lisp:error ":name is required"))))
 (common-lisp:export
  (common-lisp:list 'create-migration-workflow-request
                    'make-create-migration-workflow-request))
 (common-lisp:defun make-create-migration-workflow-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tags step-targets input-parameters
                     application-configuration-id template-id description name)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-migration-workflow-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-migration-workflow-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-migration-workflow-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'template-id))
      (common-lisp:list
       (common-lisp:cons "templateId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'application-configuration-id))
      (common-lisp:list
       (common-lisp:cons "applicationConfigurationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'input-parameters))
      (common-lisp:list
       (common-lisp:cons "inputParameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'step-targets))
      (common-lisp:list
       (common-lisp:cons "stepTargets"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-migration-workflow-request))
   common-lisp:nil))
(common-lisp:deftype create-migration-workflow-request-application-configuration-id-string
                     ()
  'common-lisp:string)
(common-lisp:deftype create-migration-workflow-request-description-string ()
  'common-lisp:string)
(common-lisp:deftype create-migration-workflow-request-name-string ()
  'common-lisp:string)
(common-lisp:deftype create-migration-workflow-request-template-id-string ()
  'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass create-migration-workflow-response common-lisp:nil
                       ((tags :initarg :|tags| :type
                         (common-lisp:or string-map common-lisp:null) :accessor
                         %create-migration-workflow-response-tags :initform
                         common-lisp:nil)
                        (creation-time :initarg :|creationTime| :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %create-migration-workflow-response-creation-time
                         :initform common-lisp:nil)
                        (status :initarg :|status| :type
                         (common-lisp:or migration-workflow-status-enum
                                         common-lisp:null)
                         :accessor %create-migration-workflow-response-status
                         :initform common-lisp:nil)
                        (step-targets :initarg :|stepTargets| :type
                         (common-lisp:or string-list common-lisp:null)
                         :accessor
                         %create-migration-workflow-response-step-targets
                         :initform common-lisp:nil)
                        (workflow-inputs :initarg :|workflowInputs| :type
                         (common-lisp:or step-input-parameters
                                         common-lisp:null)
                         :accessor
                         %create-migration-workflow-response-workflow-inputs
                         :initform common-lisp:nil)
                        (ads-application-configuration-id :initarg
                         :|adsApplicationConfigurationId| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %create-migration-workflow-response-ads-application-configuration-id
                         :initform common-lisp:nil)
                        (template-id :initarg :|templateId| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %create-migration-workflow-response-template-id
                         :initform common-lisp:nil)
                        (description :initarg :|description| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %create-migration-workflow-response-description
                         :initform common-lisp:nil)
                        (name :initarg :|name| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %create-migration-workflow-response-name :initform
                         common-lisp:nil)
                        (arn :initarg :|arn| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %create-migration-workflow-response-arn :initform
                         common-lisp:nil)
                        (id :initarg :|id| :type
                         (common-lisp:or migration-workflow-id
                                         common-lisp:null)
                         :accessor %create-migration-workflow-response-id
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'create-migration-workflow-response
                    'make-create-migration-workflow-response))
 (common-lisp:defun make-create-migration-workflow-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tags creation-time status step-targets
                     workflow-inputs ads-application-configuration-id
                     template-id description name arn id)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-migration-workflow-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-migration-workflow-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-migration-workflow-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'template-id))
      (common-lisp:list
       (common-lisp:cons "templateId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'ads-application-configuration-id))
      (common-lisp:list
       (common-lisp:cons "adsApplicationConfigurationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'workflow-inputs))
      (common-lisp:list
       (common-lisp:cons "workflowInputs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'step-targets))
      (common-lisp:list
       (common-lisp:cons "stepTargets"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-time))
      (common-lisp:list
       (common-lisp:cons "creationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-migration-workflow-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-workflow-step-group-request common-lisp:nil
                       ((previous :initarg :|previous| :type
                         (common-lisp:or string-list common-lisp:null)
                         :accessor %create-workflow-step-group-request-previous
                         :initform common-lisp:nil)
                        (next :initarg :|next| :type
                         (common-lisp:or string-list common-lisp:null)
                         :accessor %create-workflow-step-group-request-next
                         :initform common-lisp:nil)
                        (description :initarg :|description| :type
                         (common-lisp:or step-group-description
                                         common-lisp:null)
                         :accessor
                         %create-workflow-step-group-request-description
                         :initform common-lisp:nil)
                        (name :initarg :|name| :type
                         (common-lisp:or step-group-name common-lisp:null)
                         :accessor %create-workflow-step-group-request-name
                         :initform (common-lisp:error ":name is required"))
                        (workflow-id :initarg :|workflowId| :type
                         (common-lisp:or migration-workflow-id
                                         common-lisp:null)
                         :accessor
                         %create-workflow-step-group-request-workflow-id
                         :initform
                         (common-lisp:error ":workflowid is required"))))
 (common-lisp:export
  (common-lisp:list 'create-workflow-step-group-request
                    'make-create-workflow-step-group-request))
 (common-lisp:defun make-create-workflow-step-group-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key previous next description name
                     workflow-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-workflow-step-group-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-workflow-step-group-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-workflow-step-group-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'workflow-id))
      (common-lisp:list
       (common-lisp:cons "workflowId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next))
      (common-lisp:list
       (common-lisp:cons "next"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'previous))
      (common-lisp:list
       (common-lisp:cons "previous"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-workflow-step-group-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-workflow-step-group-response common-lisp:nil
                       ((creation-time :initarg :|creationTime| :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %create-workflow-step-group-response-creation-time
                         :initform common-lisp:nil)
                        (previous :initarg :|previous| :type
                         (common-lisp:or string-list common-lisp:null)
                         :accessor
                         %create-workflow-step-group-response-previous
                         :initform common-lisp:nil)
                        (next :initarg :|next| :type
                         (common-lisp:or string-list common-lisp:null)
                         :accessor %create-workflow-step-group-response-next
                         :initform common-lisp:nil)
                        (tools :initarg :|tools| :type
                         (common-lisp:or tools-list common-lisp:null) :accessor
                         %create-workflow-step-group-response-tools :initform
                         common-lisp:nil)
                        (description :initarg :|description| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %create-workflow-step-group-response-description
                         :initform common-lisp:nil)
                        (id :initarg :|id| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %create-workflow-step-group-response-id :initform
                         common-lisp:nil)
                        (name :initarg :|name| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %create-workflow-step-group-response-name :initform
                         common-lisp:nil)
                        (workflow-id :initarg :|workflowId| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %create-workflow-step-group-response-workflow-id
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'create-workflow-step-group-response
                    'make-create-workflow-step-group-response))
 (common-lisp:defun make-create-workflow-step-group-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key creation-time previous next tools
                     description id name workflow-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-workflow-step-group-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-workflow-step-group-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-workflow-step-group-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'workflow-id))
      (common-lisp:list
       (common-lisp:cons "workflowId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tools))
      (common-lisp:list
       (common-lisp:cons "tools"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next))
      (common-lisp:list
       (common-lisp:cons "next"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'previous))
      (common-lisp:list
       (common-lisp:cons "previous"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-time))
      (common-lisp:list
       (common-lisp:cons "creationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-workflow-step-group-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-workflow-step-request common-lisp:nil
                       ((next :initarg :|next| :type
                         (common-lisp:or string-list common-lisp:null)
                         :accessor %create-workflow-step-request-next :initform
                         common-lisp:nil)
                        (previous :initarg :|previous| :type
                         (common-lisp:or string-list common-lisp:null)
                         :accessor %create-workflow-step-request-previous
                         :initform common-lisp:nil)
                        (outputs :initarg :|outputs| :type
                         (common-lisp:or workflow-step-output-list
                                         common-lisp:null)
                         :accessor %create-workflow-step-request-outputs
                         :initform common-lisp:nil)
                        (step-target :initarg :|stepTarget| :type
                         (common-lisp:or string-list common-lisp:null)
                         :accessor %create-workflow-step-request-step-target
                         :initform common-lisp:nil)
                        (workflow-step-automation-configuration :initarg
                         :|workflowStepAutomationConfiguration| :type
                         (common-lisp:or workflow-step-automation-configuration
                                         common-lisp:null)
                         :accessor
                         %create-workflow-step-request-workflow-step-automation-configuration
                         :initform common-lisp:nil)
                        (description :initarg :|description| :type
                         (common-lisp:or migration-workflow-description
                                         common-lisp:null)
                         :accessor %create-workflow-step-request-description
                         :initform common-lisp:nil)
                        (step-action-type :initarg :|stepActionType| :type
                         (common-lisp:or step-action-type common-lisp:null)
                         :accessor
                         %create-workflow-step-request-step-action-type
                         :initform
                         (common-lisp:error ":stepactiontype is required"))
                        (workflow-id :initarg :|workflowId| :type
                         (common-lisp:or migration-workflow-id
                                         common-lisp:null)
                         :accessor %create-workflow-step-request-workflow-id
                         :initform
                         (common-lisp:error ":workflowid is required"))
                        (step-group-id :initarg :|stepGroupId| :type
                         (common-lisp:or step-group-id common-lisp:null)
                         :accessor %create-workflow-step-request-step-group-id
                         :initform
                         (common-lisp:error ":stepgroupid is required"))
                        (name :initarg :|name| :type
                         (common-lisp:or migration-workflow-name
                                         common-lisp:null)
                         :accessor %create-workflow-step-request-name :initform
                         (common-lisp:error ":name is required"))))
 (common-lisp:export
  (common-lisp:list 'create-workflow-step-request
                    'make-create-workflow-step-request))
 (common-lisp:defun make-create-workflow-step-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next previous outputs step-target
                     workflow-step-automation-configuration description
                     step-action-type workflow-id step-group-id name)
   (common-lisp:apply #'common-lisp:make-instance 'create-workflow-step-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-workflow-step-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-workflow-step-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'step-group-id))
      (common-lisp:list
       (common-lisp:cons "stepGroupId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'workflow-id))
      (common-lisp:list
       (common-lisp:cons "workflowId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'step-action-type))
      (common-lisp:list
       (common-lisp:cons "stepActionType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'workflow-step-automation-configuration))
      (common-lisp:list
       (common-lisp:cons "workflowStepAutomationConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'step-target))
      (common-lisp:list
       (common-lisp:cons "stepTarget"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'outputs))
      (common-lisp:list
       (common-lisp:cons "outputs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'previous))
      (common-lisp:list
       (common-lisp:cons "previous"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next))
      (common-lisp:list
       (common-lisp:cons "next"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-workflow-step-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-workflow-step-response common-lisp:nil
                       ((name :initarg :|name| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %create-workflow-step-response-name :initform
                         common-lisp:nil)
                        (workflow-id :initarg :|workflowId| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %create-workflow-step-response-workflow-id :initform
                         common-lisp:nil)
                        (step-group-id :initarg :|stepGroupId| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %create-workflow-step-response-step-group-id :initform
                         common-lisp:nil)
                        (id :initarg :|id| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %create-workflow-step-response-id :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'create-workflow-step-response
                    'make-create-workflow-step-response))
 (common-lisp:defun make-create-workflow-step-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key name workflow-id step-group-id id)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-workflow-step-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-workflow-step-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-workflow-step-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'step-group-id))
      (common-lisp:list
       (common-lisp:cons "stepGroupId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'workflow-id))
      (common-lisp:list
       (common-lisp:cons "workflowId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-workflow-step-response))
   common-lisp:nil))
(common-lisp:deftype data-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass delete-migration-workflow-request common-lisp:nil
                       ((id :initarg :|id| :type
                         (common-lisp:or migration-workflow-id
                                         common-lisp:null)
                         :accessor %delete-migration-workflow-request-id
                         :initform (common-lisp:error ":id is required"))))
 (common-lisp:export
  (common-lisp:list 'delete-migration-workflow-request
                    'make-delete-migration-workflow-request))
 (common-lisp:defun make-delete-migration-workflow-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key id)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-migration-workflow-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-migration-workflow-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-migration-workflow-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-migration-workflow-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-migration-workflow-response common-lisp:nil
                       ((status :initarg :|status| :type
                         (common-lisp:or migration-workflow-status-enum
                                         common-lisp:null)
                         :accessor %delete-migration-workflow-response-status
                         :initform common-lisp:nil)
                        (arn :initarg :|arn| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %delete-migration-workflow-response-arn :initform
                         common-lisp:nil)
                        (id :initarg :|id| :type
                         (common-lisp:or migration-workflow-id
                                         common-lisp:null)
                         :accessor %delete-migration-workflow-response-id
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'delete-migration-workflow-response
                    'make-delete-migration-workflow-response))
 (common-lisp:defun make-delete-migration-workflow-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key status arn id)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-migration-workflow-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-migration-workflow-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-migration-workflow-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-migration-workflow-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-workflow-step-group-request common-lisp:nil
                       ((id :initarg :|id| :type
                         (common-lisp:or step-group-id common-lisp:null)
                         :accessor %delete-workflow-step-group-request-id
                         :initform (common-lisp:error ":id is required"))
                        (workflow-id :initarg :|workflowId| :type
                         (common-lisp:or migration-workflow-id
                                         common-lisp:null)
                         :accessor
                         %delete-workflow-step-group-request-workflow-id
                         :initform
                         (common-lisp:error ":workflowid is required"))))
 (common-lisp:export
  (common-lisp:list 'delete-workflow-step-group-request
                    'make-delete-workflow-step-group-request))
 (common-lisp:defun make-delete-workflow-step-group-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key id workflow-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-workflow-step-group-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-workflow-step-group-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-workflow-step-group-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-workflow-step-group-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-workflow-step-group-response common-lisp:nil
                       common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'delete-workflow-step-group-response
                    'make-delete-workflow-step-group-response))
 (common-lisp:defun make-delete-workflow-step-group-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-workflow-step-group-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-workflow-step-group-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-workflow-step-group-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-workflow-step-group-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-workflow-step-request common-lisp:nil
                       ((workflow-id :initarg :|workflowId| :type
                         (common-lisp:or migration-workflow-id
                                         common-lisp:null)
                         :accessor %delete-workflow-step-request-workflow-id
                         :initform
                         (common-lisp:error ":workflowid is required"))
                        (step-group-id :initarg :|stepGroupId| :type
                         (common-lisp:or step-group-id common-lisp:null)
                         :accessor %delete-workflow-step-request-step-group-id
                         :initform
                         (common-lisp:error ":stepgroupid is required"))
                        (id :initarg :|id| :type
                         (common-lisp:or step-id common-lisp:null) :accessor
                         %delete-workflow-step-request-id :initform
                         (common-lisp:error ":id is required"))))
 (common-lisp:export
  (common-lisp:list 'delete-workflow-step-request
                    'make-delete-workflow-step-request))
 (common-lisp:defun make-delete-workflow-step-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key workflow-id step-group-id id)
   (common-lisp:apply #'common-lisp:make-instance 'delete-workflow-step-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-workflow-step-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-workflow-step-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-workflow-step-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-workflow-step-response common-lisp:nil
                       common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'delete-workflow-step-response
                    'make-delete-workflow-step-response))
 (common-lisp:defun make-delete-workflow-step-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-workflow-step-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-workflow-step-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-workflow-step-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-workflow-step-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-migration-workflow-request common-lisp:nil
                       ((id :initarg :|id| :type
                         (common-lisp:or migration-workflow-id
                                         common-lisp:null)
                         :accessor %get-migration-workflow-request-id :initform
                         (common-lisp:error ":id is required"))))
 (common-lisp:export
  (common-lisp:list 'get-migration-workflow-request
                    'make-get-migration-workflow-request))
 (common-lisp:defun make-get-migration-workflow-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key id)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-migration-workflow-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-migration-workflow-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-migration-workflow-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-migration-workflow-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-migration-workflow-response common-lisp:nil
                       ((workflow-bucket :initarg :|workflowBucket| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %get-migration-workflow-response-workflow-bucket
                         :initform common-lisp:nil)
                        (tags :initarg :|tags| :type
                         (common-lisp:or string-map common-lisp:null) :accessor
                         %get-migration-workflow-response-tags :initform
                         common-lisp:nil)
                        (workflow-inputs :initarg :|workflowInputs| :type
                         (common-lisp:or step-input-parameters
                                         common-lisp:null)
                         :accessor
                         %get-migration-workflow-response-workflow-inputs
                         :initform common-lisp:nil)
                        (completed-steps :initarg :|completedSteps| :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         %get-migration-workflow-response-completed-steps
                         :initform common-lisp:nil)
                        (total-steps :initarg :|totalSteps| :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         %get-migration-workflow-response-total-steps :initform
                         common-lisp:nil)
                        (tools :initarg :|tools| :type
                         (common-lisp:or tools-list common-lisp:null) :accessor
                         %get-migration-workflow-response-tools :initform
                         common-lisp:nil)
                        (end-time :initarg :|endTime| :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %get-migration-workflow-response-end-time :initform
                         common-lisp:nil)
                        (last-modified-time :initarg :|lastModifiedTime| :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %get-migration-workflow-response-last-modified-time
                         :initform common-lisp:nil)
                        (last-stop-time :initarg :|lastStopTime| :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %get-migration-workflow-response-last-stop-time
                         :initform common-lisp:nil)
                        (last-start-time :initarg :|lastStartTime| :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %get-migration-workflow-response-last-start-time
                         :initform common-lisp:nil)
                        (creation-time :initarg :|creationTime| :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %get-migration-workflow-response-creation-time
                         :initform common-lisp:nil)
                        (status-message :initarg :|statusMessage| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %get-migration-workflow-response-status-message
                         :initform common-lisp:nil)
                        (status :initarg :|status| :type
                         (common-lisp:or migration-workflow-status-enum
                                         common-lisp:null)
                         :accessor %get-migration-workflow-response-status
                         :initform common-lisp:nil)
                        (ads-application-name :initarg :|adsApplicationName|
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         %get-migration-workflow-response-ads-application-name
                         :initform common-lisp:nil)
                        (ads-application-configuration-id :initarg
                         :|adsApplicationConfigurationId| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %get-migration-workflow-response-ads-application-configuration-id
                         :initform common-lisp:nil)
                        (template-id :initarg :|templateId| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %get-migration-workflow-response-template-id :initform
                         common-lisp:nil)
                        (description :initarg :|description| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %get-migration-workflow-response-description :initform
                         common-lisp:nil)
                        (name :initarg :|name| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %get-migration-workflow-response-name :initform
                         common-lisp:nil)
                        (arn :initarg :|arn| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %get-migration-workflow-response-arn :initform
                         common-lisp:nil)
                        (id :initarg :|id| :type
                         (common-lisp:or migration-workflow-id
                                         common-lisp:null)
                         :accessor %get-migration-workflow-response-id
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'get-migration-workflow-response
                    'make-get-migration-workflow-response))
 (common-lisp:defun make-get-migration-workflow-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key workflow-bucket tags workflow-inputs
                     completed-steps total-steps tools end-time
                     last-modified-time last-stop-time last-start-time
                     creation-time status-message status ads-application-name
                     ads-application-configuration-id template-id description
                     name arn id)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-migration-workflow-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-migration-workflow-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-migration-workflow-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'template-id))
      (common-lisp:list
       (common-lisp:cons "templateId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'ads-application-configuration-id))
      (common-lisp:list
       (common-lisp:cons "adsApplicationConfigurationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'ads-application-name))
      (common-lisp:list
       (common-lisp:cons "adsApplicationName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status-message))
      (common-lisp:list
       (common-lisp:cons "statusMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-time))
      (common-lisp:list
       (common-lisp:cons "creationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-start-time))
      (common-lisp:list
       (common-lisp:cons "lastStartTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-stop-time))
      (common-lisp:list
       (common-lisp:cons "lastStopTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-modified-time))
      (common-lisp:list
       (common-lisp:cons "lastModifiedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'end-time))
      (common-lisp:list
       (common-lisp:cons "endTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tools))
      (common-lisp:list
       (common-lisp:cons "tools"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'total-steps))
      (common-lisp:list
       (common-lisp:cons "totalSteps"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'completed-steps))
      (common-lisp:list
       (common-lisp:cons "completedSteps"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'workflow-inputs))
      (common-lisp:list
       (common-lisp:cons "workflowInputs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'workflow-bucket))
      (common-lisp:list
       (common-lisp:cons "workflowBucket"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-migration-workflow-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-migration-workflow-template-request common-lisp:nil
                       ((id :initarg :|id| :type
                         (common-lisp:or template-id common-lisp:null)
                         :accessor %get-migration-workflow-template-request-id
                         :initform (common-lisp:error ":id is required"))))
 (common-lisp:export
  (common-lisp:list 'get-migration-workflow-template-request
                    'make-get-migration-workflow-template-request))
 (common-lisp:defun make-get-migration-workflow-template-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key id)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-migration-workflow-template-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-migration-workflow-template-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-migration-workflow-template-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-migration-workflow-template-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-migration-workflow-template-response common-lisp:nil
                       ((creation-time :initarg :|creationTime| :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %get-migration-workflow-template-response-creation-time
                         :initform common-lisp:nil)
                        (status :initarg :|status| :type
                         (common-lisp:or template-status common-lisp:null)
                         :accessor
                         %get-migration-workflow-template-response-status
                         :initform common-lisp:nil)
                        (tools :initarg :|tools| :type
                         (common-lisp:or tools-list common-lisp:null) :accessor
                         %get-migration-workflow-template-response-tools
                         :initform common-lisp:nil)
                        (inputs :initarg :|inputs| :type
                         (common-lisp:or template-input-list common-lisp:null)
                         :accessor
                         %get-migration-workflow-template-response-inputs
                         :initform common-lisp:nil)
                        (description :initarg :|description| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %get-migration-workflow-template-response-description
                         :initform common-lisp:nil)
                        (name :initarg :|name| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %get-migration-workflow-template-response-name
                         :initform common-lisp:nil)
                        (id :initarg :|id| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %get-migration-workflow-template-response-id :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'get-migration-workflow-template-response
                    'make-get-migration-workflow-template-response))
 (common-lisp:defun make-get-migration-workflow-template-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key creation-time status tools inputs
                     description name id)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-migration-workflow-template-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-migration-workflow-template-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-migration-workflow-template-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'inputs))
      (common-lisp:list
       (common-lisp:cons "inputs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tools))
      (common-lisp:list
       (common-lisp:cons "tools"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-time))
      (common-lisp:list
       (common-lisp:cons "creationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-migration-workflow-template-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-template-step-group-request common-lisp:nil
                       ((id :initarg :|id| :type
                         (common-lisp:or step-group-id common-lisp:null)
                         :accessor %get-template-step-group-request-id
                         :initform (common-lisp:error ":id is required"))
                        (template-id :initarg :|templateId| :type
                         (common-lisp:or template-id common-lisp:null)
                         :accessor %get-template-step-group-request-template-id
                         :initform
                         (common-lisp:error ":templateid is required"))))
 (common-lisp:export
  (common-lisp:list 'get-template-step-group-request
                    'make-get-template-step-group-request))
 (common-lisp:defun make-get-template-step-group-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key id template-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-template-step-group-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-template-step-group-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-template-step-group-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-template-step-group-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-template-step-group-response common-lisp:nil
                       ((next :initarg :|next| :type
                         (common-lisp:or string-list common-lisp:null)
                         :accessor %get-template-step-group-response-next
                         :initform common-lisp:nil)
                        (previous :initarg :|previous| :type
                         (common-lisp:or string-list common-lisp:null)
                         :accessor %get-template-step-group-response-previous
                         :initform common-lisp:nil)
                        (tools :initarg :|tools| :type
                         (common-lisp:or tools-list common-lisp:null) :accessor
                         %get-template-step-group-response-tools :initform
                         common-lisp:nil)
                        (last-modified-time :initarg :|lastModifiedTime| :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %get-template-step-group-response-last-modified-time
                         :initform common-lisp:nil)
                        (creation-time :initarg :|creationTime| :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %get-template-step-group-response-creation-time
                         :initform common-lisp:nil)
                        (status :initarg :|status| :type
                         (common-lisp:or step-group-status common-lisp:null)
                         :accessor %get-template-step-group-response-status
                         :initform common-lisp:nil)
                        (description :initarg :|description| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %get-template-step-group-response-description
                         :initform common-lisp:nil)
                        (name :initarg :|name| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %get-template-step-group-response-name :initform
                         common-lisp:nil)
                        (id :initarg :|id| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %get-template-step-group-response-id :initform
                         common-lisp:nil)
                        (template-id :initarg :|templateId| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %get-template-step-group-response-template-id
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'get-template-step-group-response
                    'make-get-template-step-group-response))
 (common-lisp:defun make-get-template-step-group-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next previous tools last-modified-time
                     creation-time status description name id template-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-template-step-group-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-template-step-group-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-template-step-group-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'template-id))
      (common-lisp:list
       (common-lisp:cons "templateId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-time))
      (common-lisp:list
       (common-lisp:cons "creationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-modified-time))
      (common-lisp:list
       (common-lisp:cons "lastModifiedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tools))
      (common-lisp:list
       (common-lisp:cons "tools"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'previous))
      (common-lisp:list
       (common-lisp:cons "previous"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next))
      (common-lisp:list
       (common-lisp:cons "next"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-template-step-group-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-template-step-request common-lisp:nil
                       ((step-group-id :initarg :|stepGroupId| :type
                         (common-lisp:or step-group-id common-lisp:null)
                         :accessor %get-template-step-request-step-group-id
                         :initform
                         (common-lisp:error ":stepgroupid is required"))
                        (template-id :initarg :|templateId| :type
                         (common-lisp:or template-id common-lisp:null)
                         :accessor %get-template-step-request-template-id
                         :initform
                         (common-lisp:error ":templateid is required"))
                        (id :initarg :|id| :type
                         (common-lisp:or step-id common-lisp:null) :accessor
                         %get-template-step-request-id :initform
                         (common-lisp:error ":id is required"))))
 (common-lisp:export
  (common-lisp:list 'get-template-step-request
                    'make-get-template-step-request))
 (common-lisp:defun make-get-template-step-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key step-group-id template-id id)
   (common-lisp:apply #'common-lisp:make-instance 'get-template-step-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-template-step-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-template-step-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-template-step-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-template-step-response common-lisp:nil
                       ((step-automation-configuration :initarg
                         :|stepAutomationConfiguration| :type
                         (common-lisp:or step-automation-configuration
                                         common-lisp:null)
                         :accessor
                         %get-template-step-response-step-automation-configuration
                         :initform common-lisp:nil)
                        (outputs :initarg :|outputs| :type
                         (common-lisp:or step-output-list common-lisp:null)
                         :accessor %get-template-step-response-outputs
                         :initform common-lisp:nil)
                        (next :initarg :|next| :type
                         (common-lisp:or string-list common-lisp:null)
                         :accessor %get-template-step-response-next :initform
                         common-lisp:nil)
                        (previous :initarg :|previous| :type
                         (common-lisp:or string-list common-lisp:null)
                         :accessor %get-template-step-response-previous
                         :initform common-lisp:nil)
                        (creation-time :initarg :|creationTime| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %get-template-step-response-creation-time :initform
                         common-lisp:nil)
                        (step-action-type :initarg :|stepActionType| :type
                         (common-lisp:or step-action-type common-lisp:null)
                         :accessor %get-template-step-response-step-action-type
                         :initform common-lisp:nil)
                        (description :initarg :|description| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %get-template-step-response-description :initform
                         common-lisp:nil)
                        (name :initarg :|name| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %get-template-step-response-name :initform
                         common-lisp:nil)
                        (template-id :initarg :|templateId| :type
                         (common-lisp:or template-id common-lisp:null)
                         :accessor %get-template-step-response-template-id
                         :initform common-lisp:nil)
                        (step-group-id :initarg :|stepGroupId| :type
                         (common-lisp:or step-group-id common-lisp:null)
                         :accessor %get-template-step-response-step-group-id
                         :initform common-lisp:nil)
                        (id :initarg :|id| :type
                         (common-lisp:or step-id common-lisp:null) :accessor
                         %get-template-step-response-id :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'get-template-step-response
                    'make-get-template-step-response))
 (common-lisp:defun make-get-template-step-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key step-automation-configuration outputs
                     next previous creation-time step-action-type description
                     name template-id step-group-id id)
   (common-lisp:apply #'common-lisp:make-instance 'get-template-step-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-template-step-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-template-step-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'step-group-id))
      (common-lisp:list
       (common-lisp:cons "stepGroupId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'template-id))
      (common-lisp:list
       (common-lisp:cons "templateId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'step-action-type))
      (common-lisp:list
       (common-lisp:cons "stepActionType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-time))
      (common-lisp:list
       (common-lisp:cons "creationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'previous))
      (common-lisp:list
       (common-lisp:cons "previous"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next))
      (common-lisp:list
       (common-lisp:cons "next"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'outputs))
      (common-lisp:list
       (common-lisp:cons "outputs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'step-automation-configuration))
      (common-lisp:list
       (common-lisp:cons "stepAutomationConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-template-step-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-workflow-step-group-request common-lisp:nil
                       ((workflow-id :initarg :|workflowId| :type
                         (common-lisp:or migration-workflow-id
                                         common-lisp:null)
                         :accessor %get-workflow-step-group-request-workflow-id
                         :initform
                         (common-lisp:error ":workflowid is required"))
                        (id :initarg :|id| :type
                         (common-lisp:or step-group-id common-lisp:null)
                         :accessor %get-workflow-step-group-request-id
                         :initform (common-lisp:error ":id is required"))))
 (common-lisp:export
  (common-lisp:list 'get-workflow-step-group-request
                    'make-get-workflow-step-group-request))
 (common-lisp:defun make-get-workflow-step-group-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key workflow-id id)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-workflow-step-group-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-workflow-step-group-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-workflow-step-group-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-workflow-step-group-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-workflow-step-group-response common-lisp:nil
                       ((next :initarg :|next| :type
                         (common-lisp:or string-list common-lisp:null)
                         :accessor %get-workflow-step-group-response-next
                         :initform common-lisp:nil)
                        (previous :initarg :|previous| :type
                         (common-lisp:or string-list common-lisp:null)
                         :accessor %get-workflow-step-group-response-previous
                         :initform common-lisp:nil)
                        (tools :initarg :|tools| :type
                         (common-lisp:or tools-list common-lisp:null) :accessor
                         %get-workflow-step-group-response-tools :initform
                         common-lisp:nil)
                        (end-time :initarg :|endTime| :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %get-workflow-step-group-response-end-time :initform
                         common-lisp:nil)
                        (last-modified-time :initarg :|lastModifiedTime| :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %get-workflow-step-group-response-last-modified-time
                         :initform common-lisp:nil)
                        (creation-time :initarg :|creationTime| :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %get-workflow-step-group-response-creation-time
                         :initform common-lisp:nil)
                        (owner :initarg :|owner| :type
                         (common-lisp:or owner common-lisp:null) :accessor
                         %get-workflow-step-group-response-owner :initform
                         common-lisp:nil)
                        (status :initarg :|status| :type
                         (common-lisp:or step-group-status common-lisp:null)
                         :accessor %get-workflow-step-group-response-status
                         :initform common-lisp:nil)
                        (description :initarg :|description| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %get-workflow-step-group-response-description
                         :initform common-lisp:nil)
                        (name :initarg :|name| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %get-workflow-step-group-response-name :initform
                         common-lisp:nil)
                        (workflow-id :initarg :|workflowId| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %get-workflow-step-group-response-workflow-id
                         :initform common-lisp:nil)
                        (id :initarg :|id| :type
                         (common-lisp:or step-group-id common-lisp:null)
                         :accessor %get-workflow-step-group-response-id
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'get-workflow-step-group-response
                    'make-get-workflow-step-group-response))
 (common-lisp:defun make-get-workflow-step-group-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next previous tools end-time
                     last-modified-time creation-time owner status description
                     name workflow-id id)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-workflow-step-group-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-workflow-step-group-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-workflow-step-group-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'workflow-id))
      (common-lisp:list
       (common-lisp:cons "workflowId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'owner))
      (common-lisp:list
       (common-lisp:cons "owner"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-time))
      (common-lisp:list
       (common-lisp:cons "creationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-modified-time))
      (common-lisp:list
       (common-lisp:cons "lastModifiedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'end-time))
      (common-lisp:list
       (common-lisp:cons "endTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tools))
      (common-lisp:list
       (common-lisp:cons "tools"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'previous))
      (common-lisp:list
       (common-lisp:cons "previous"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next))
      (common-lisp:list
       (common-lisp:cons "next"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-workflow-step-group-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-workflow-step-request common-lisp:nil
                       ((id :initarg :|id| :type
                         (common-lisp:or step-id common-lisp:null) :accessor
                         %get-workflow-step-request-id :initform
                         (common-lisp:error ":id is required"))
                        (step-group-id :initarg :|stepGroupId| :type
                         (common-lisp:or step-group-id common-lisp:null)
                         :accessor %get-workflow-step-request-step-group-id
                         :initform
                         (common-lisp:error ":stepgroupid is required"))
                        (workflow-id :initarg :|workflowId| :type
                         (common-lisp:or migration-workflow-id
                                         common-lisp:null)
                         :accessor %get-workflow-step-request-workflow-id
                         :initform
                         (common-lisp:error ":workflowid is required"))))
 (common-lisp:export
  (common-lisp:list 'get-workflow-step-request
                    'make-get-workflow-step-request))
 (common-lisp:defun make-get-workflow-step-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key id step-group-id workflow-id)
   (common-lisp:apply #'common-lisp:make-instance 'get-workflow-step-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-workflow-step-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-workflow-step-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-workflow-step-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-workflow-step-response common-lisp:nil
                       ((total-no-of-srv :initarg :|totalNoOfSrv| :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         %get-workflow-step-response-total-no-of-srv :initform
                         common-lisp:nil)
                        (no-of-srv-failed :initarg :|noOfSrvFailed| :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         %get-workflow-step-response-no-of-srv-failed :initform
                         common-lisp:nil)
                        (no-of-srv-completed :initarg :|noOfSrvCompleted| :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         %get-workflow-step-response-no-of-srv-completed
                         :initform common-lisp:nil)
                        (end-time :initarg :|endTime| :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %get-workflow-step-response-end-time :initform
                         common-lisp:nil)
                        (last-start-time :initarg :|lastStartTime| :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %get-workflow-step-response-last-start-time :initform
                         common-lisp:nil)
                        (creation-time :initarg :|creationTime| :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %get-workflow-step-response-creation-time :initform
                         common-lisp:nil)
                        (script-output-location :initarg
                         :|scriptOutputLocation| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %get-workflow-step-response-script-output-location
                         :initform common-lisp:nil)
                        (status-message :initarg :|statusMessage| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %get-workflow-step-response-status-message :initform
                         common-lisp:nil)
                        (status :initarg :|status| :type
                         (common-lisp:or step-status common-lisp:null)
                         :accessor %get-workflow-step-response-status :initform
                         common-lisp:nil)
                        (next :initarg :|next| :type
                         (common-lisp:or string-list common-lisp:null)
                         :accessor %get-workflow-step-response-next :initform
                         common-lisp:nil)
                        (previous :initarg :|previous| :type
                         (common-lisp:or string-list common-lisp:null)
                         :accessor %get-workflow-step-response-previous
                         :initform common-lisp:nil)
                        (outputs :initarg :|outputs| :type
                         (common-lisp:or
                          get-workflow-step-response-outputs-list
                          common-lisp:null)
                         :accessor %get-workflow-step-response-outputs
                         :initform common-lisp:nil)
                        (step-target :initarg :|stepTarget| :type
                         (common-lisp:or string-list common-lisp:null)
                         :accessor %get-workflow-step-response-step-target
                         :initform common-lisp:nil)
                        (workflow-step-automation-configuration :initarg
                         :|workflowStepAutomationConfiguration| :type
                         (common-lisp:or workflow-step-automation-configuration
                                         common-lisp:null)
                         :accessor
                         %get-workflow-step-response-workflow-step-automation-configuration
                         :initform common-lisp:nil)
                        (owner :initarg :|owner| :type
                         (common-lisp:or owner common-lisp:null) :accessor
                         %get-workflow-step-response-owner :initform
                         common-lisp:nil)
                        (step-action-type :initarg :|stepActionType| :type
                         (common-lisp:or step-action-type common-lisp:null)
                         :accessor %get-workflow-step-response-step-action-type
                         :initform common-lisp:nil)
                        (description :initarg :|description| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %get-workflow-step-response-description :initform
                         common-lisp:nil)
                        (step-id :initarg :|stepId| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %get-workflow-step-response-step-id :initform
                         common-lisp:nil)
                        (workflow-id :initarg :|workflowId| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %get-workflow-step-response-workflow-id :initform
                         common-lisp:nil)
                        (step-group-id :initarg :|stepGroupId| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %get-workflow-step-response-step-group-id :initform
                         common-lisp:nil)
                        (name :initarg :|name| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %get-workflow-step-response-name :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'get-workflow-step-response
                    'make-get-workflow-step-response))
 (common-lisp:defun make-get-workflow-step-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key total-no-of-srv no-of-srv-failed
                     no-of-srv-completed end-time last-start-time creation-time
                     script-output-location status-message status next previous
                     outputs step-target workflow-step-automation-configuration
                     owner step-action-type description step-id workflow-id
                     step-group-id name)
   (common-lisp:apply #'common-lisp:make-instance 'get-workflow-step-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-workflow-step-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-workflow-step-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'step-group-id))
      (common-lisp:list
       (common-lisp:cons "stepGroupId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'workflow-id))
      (common-lisp:list
       (common-lisp:cons "workflowId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'step-id))
      (common-lisp:list
       (common-lisp:cons "stepId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'step-action-type))
      (common-lisp:list
       (common-lisp:cons "stepActionType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'owner))
      (common-lisp:list
       (common-lisp:cons "owner"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'workflow-step-automation-configuration))
      (common-lisp:list
       (common-lisp:cons "workflowStepAutomationConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'step-target))
      (common-lisp:list
       (common-lisp:cons "stepTarget"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'outputs))
      (common-lisp:list
       (common-lisp:cons "outputs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'previous))
      (common-lisp:list
       (common-lisp:cons "previous"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next))
      (common-lisp:list
       (common-lisp:cons "next"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status-message))
      (common-lisp:list
       (common-lisp:cons "statusMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'script-output-location))
      (common-lisp:list
       (common-lisp:cons "scriptOutputLocation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-time))
      (common-lisp:list
       (common-lisp:cons "creationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-start-time))
      (common-lisp:list
       (common-lisp:cons "lastStartTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'end-time))
      (common-lisp:list
       (common-lisp:cons "endTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'no-of-srv-completed))
      (common-lisp:list
       (common-lisp:cons "noOfSrvCompleted"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'no-of-srv-failed))
      (common-lisp:list
       (common-lisp:cons "noOfSrvFailed"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'total-no-of-srv))
      (common-lisp:list
       (common-lisp:cons "totalNoOfSrv"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-workflow-step-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype get-workflow-step-response-outputs-list ()
   '(trivial-types:proper-list workflow-step-output))
 (common-lisp:defun |make-get-workflow-step-response-outputs-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list workflow-step-output))
   aws-sdk/generator/shape::members))
(common-lisp:deftype ipaddress () 'common-lisp:string)
(common-lisp:deftype integer () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:define-condition internal-server-exception
     (migrationhuborchestrator-error)
     ((message :initarg :|message| :initform common-lisp:nil :reader
       internal-server-exception-message)))
 (common-lisp:export
  (common-lisp:list 'internal-server-exception
                    'internal-server-exception-message)))
(common-lisp:progn
 (common-lisp:defclass list-migration-workflow-templates-request
                       common-lisp:nil
                       ((name :initarg :|name| :type
                         (common-lisp:or template-name common-lisp:null)
                         :accessor
                         %list-migration-workflow-templates-request-name
                         :initform common-lisp:nil)
                        (next-token :initarg :|nextToken| :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %list-migration-workflow-templates-request-next-token
                         :initform common-lisp:nil)
                        (max-results :initarg :|maxResults| :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor
                         %list-migration-workflow-templates-request-max-results
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-migration-workflow-templates-request
                    'make-list-migration-workflow-templates-request))
 (common-lisp:defun make-list-migration-workflow-templates-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key name next-token max-results)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-migration-workflow-templates-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-migration-workflow-templates-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-migration-workflow-templates-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-migration-workflow-templates-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-migration-workflow-templates-response
                       common-lisp:nil
                       ((template-summary :initarg :|templateSummary| :type
                         (common-lisp:or template-summary-list
                                         common-lisp:null)
                         :accessor
                         %list-migration-workflow-templates-response-template-summary
                         :initform
                         (common-lisp:error ":templatesummary is required"))
                        (next-token :initarg :|nextToken| :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %list-migration-workflow-templates-response-next-token
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-migration-workflow-templates-response
                    'make-list-migration-workflow-templates-response))
 (common-lisp:defun make-list-migration-workflow-templates-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key template-summary next-token)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-migration-workflow-templates-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-migration-workflow-templates-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-migration-workflow-templates-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'template-summary))
      (common-lisp:list
       (common-lisp:cons "templateSummary"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-migration-workflow-templates-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-migration-workflows-request common-lisp:nil
                       ((name :initarg :|name| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %list-migration-workflows-request-name :initform
                         common-lisp:nil)
                        (status :initarg :|status| :type
                         (common-lisp:or migration-workflow-status-enum
                                         common-lisp:null)
                         :accessor %list-migration-workflows-request-status
                         :initform common-lisp:nil)
                        (ads-application-configuration-name :initarg
                         :|adsApplicationConfigurationName| :type
                         (common-lisp:or application-configuration-name
                                         common-lisp:null)
                         :accessor
                         %list-migration-workflows-request-ads-application-configuration-name
                         :initform common-lisp:nil)
                        (template-id :initarg :|templateId| :type
                         (common-lisp:or template-id common-lisp:null)
                         :accessor
                         %list-migration-workflows-request-template-id
                         :initform common-lisp:nil)
                        (next-token :initarg :|nextToken| :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %list-migration-workflows-request-next-token :initform
                         common-lisp:nil)
                        (max-results :initarg :|maxResults| :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor
                         %list-migration-workflows-request-max-results
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-migration-workflows-request
                    'make-list-migration-workflows-request))
 (common-lisp:defun make-list-migration-workflows-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key name status
                     ads-application-configuration-name template-id next-token
                     max-results)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-migration-workflows-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-migration-workflows-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-migration-workflows-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-migration-workflows-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-migration-workflows-response common-lisp:nil
                       ((migration-workflow-summary :initarg
                         :|migrationWorkflowSummary| :type
                         (common-lisp:or migration-workflow-summary-list
                                         common-lisp:null)
                         :accessor
                         %list-migration-workflows-response-migration-workflow-summary
                         :initform
                         (common-lisp:error
                          ":migrationworkflowsummary is required"))
                        (next-token :initarg :|nextToken| :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %list-migration-workflows-response-next-token
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-migration-workflows-response
                    'make-list-migration-workflows-response))
 (common-lisp:defun make-list-migration-workflows-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key migration-workflow-summary next-token)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-migration-workflows-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-migration-workflows-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-migration-workflows-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'migration-workflow-summary))
      (common-lisp:list
       (common-lisp:cons "migrationWorkflowSummary"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-migration-workflows-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-plugins-request common-lisp:nil
                       ((next-token :initarg :|nextToken| :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %list-plugins-request-next-token :initform
                         common-lisp:nil)
                        (max-results :initarg :|maxResults| :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor %list-plugins-request-max-results :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-plugins-request 'make-list-plugins-request))
 (common-lisp:defun make-list-plugins-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token max-results)
   (common-lisp:apply #'common-lisp:make-instance 'list-plugins-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-plugins-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-plugins-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-plugins-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-plugins-response common-lisp:nil
                       ((plugins :initarg :|plugins| :type
                         (common-lisp:or plugin-summaries common-lisp:null)
                         :accessor %list-plugins-response-plugins :initform
                         common-lisp:nil)
                        (next-token :initarg :|nextToken| :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %list-plugins-response-next-token :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-plugins-response 'make-list-plugins-response))
 (common-lisp:defun make-list-plugins-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key plugins next-token)
   (common-lisp:apply #'common-lisp:make-instance 'list-plugins-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-plugins-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-plugins-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'plugins))
      (common-lisp:list
       (common-lisp:cons "plugins"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-plugins-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-tags-for-resource-request common-lisp:nil
                       ((resource-arn :initarg :|resourceArn| :type
                         (common-lisp:or resource-arn common-lisp:null)
                         :accessor %list-tags-for-resource-request-resource-arn
                         :initform
                         (common-lisp:error ":resourcearn is required"))))
 (common-lisp:export
  (common-lisp:list 'list-tags-for-resource-request
                    'make-list-tags-for-resource-request))
 (common-lisp:defun make-list-tags-for-resource-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key resource-arn)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-tags-for-resource-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-tags-for-resource-response common-lisp:nil
                       ((tags :initarg :|tags| :type
                         (common-lisp:or tag-map common-lisp:null) :accessor
                         %list-tags-for-resource-response-tags :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-tags-for-resource-response
                    'make-list-tags-for-resource-response))
 (common-lisp:defun make-list-tags-for-resource-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tags)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-tags-for-resource-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-template-step-groups-request common-lisp:nil
                       ((template-id :initarg :|templateId| :type
                         (common-lisp:or template-id common-lisp:null)
                         :accessor
                         %list-template-step-groups-request-template-id
                         :initform
                         (common-lisp:error ":templateid is required"))
                        (next-token :initarg :|nextToken| :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %list-template-step-groups-request-next-token
                         :initform common-lisp:nil)
                        (max-results :initarg :|maxResults| :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor
                         %list-template-step-groups-request-max-results
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-template-step-groups-request
                    'make-list-template-step-groups-request))
 (common-lisp:defun make-list-template-step-groups-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key template-id next-token max-results)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-template-step-groups-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-template-step-groups-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-template-step-groups-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-template-step-groups-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-template-step-groups-response common-lisp:nil
                       ((template-step-group-summary :initarg
                         :|templateStepGroupSummary| :type
                         (common-lisp:or template-step-group-summary-list
                                         common-lisp:null)
                         :accessor
                         %list-template-step-groups-response-template-step-group-summary
                         :initform
                         (common-lisp:error
                          ":templatestepgroupsummary is required"))
                        (next-token :initarg :|nextToken| :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %list-template-step-groups-response-next-token
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-template-step-groups-response
                    'make-list-template-step-groups-response))
 (common-lisp:defun make-list-template-step-groups-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key template-step-group-summary next-token)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-template-step-groups-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-template-step-groups-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-template-step-groups-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'template-step-group-summary))
      (common-lisp:list
       (common-lisp:cons "templateStepGroupSummary"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-template-step-groups-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-template-steps-request common-lisp:nil
                       ((step-group-id :initarg :|stepGroupId| :type
                         (common-lisp:or step-group-id common-lisp:null)
                         :accessor %list-template-steps-request-step-group-id
                         :initform
                         (common-lisp:error ":stepgroupid is required"))
                        (template-id :initarg :|templateId| :type
                         (common-lisp:or template-id common-lisp:null)
                         :accessor %list-template-steps-request-template-id
                         :initform
                         (common-lisp:error ":templateid is required"))
                        (next-token :initarg :|nextToken| :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %list-template-steps-request-next-token :initform
                         common-lisp:nil)
                        (max-results :initarg :|maxResults| :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor %list-template-steps-request-max-results
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-template-steps-request
                    'make-list-template-steps-request))
 (common-lisp:defun make-list-template-steps-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key step-group-id template-id next-token
                     max-results)
   (common-lisp:apply #'common-lisp:make-instance 'list-template-steps-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-template-steps-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-template-steps-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-template-steps-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-template-steps-response common-lisp:nil
                       ((template-step-summary-list :initarg
                         :|templateStepSummaryList| :type
                         (common-lisp:or template-step-summary-list
                                         common-lisp:null)
                         :accessor
                         %list-template-steps-response-template-step-summary-list
                         :initform common-lisp:nil)
                        (next-token :initarg :|nextToken| :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %list-template-steps-response-next-token :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-template-steps-response
                    'make-list-template-steps-response))
 (common-lisp:defun make-list-template-steps-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key template-step-summary-list next-token)
   (common-lisp:apply #'common-lisp:make-instance 'list-template-steps-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-template-steps-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-template-steps-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'template-step-summary-list))
      (common-lisp:list
       (common-lisp:cons "templateStepSummaryList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-template-steps-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-workflow-step-groups-request common-lisp:nil
                       ((workflow-id :initarg :|workflowId| :type
                         (common-lisp:or migration-workflow-id
                                         common-lisp:null)
                         :accessor
                         %list-workflow-step-groups-request-workflow-id
                         :initform
                         (common-lisp:error ":workflowid is required"))
                        (max-results :initarg :|maxResults| :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor
                         %list-workflow-step-groups-request-max-results
                         :initform common-lisp:nil)
                        (next-token :initarg :|nextToken| :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %list-workflow-step-groups-request-next-token
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-workflow-step-groups-request
                    'make-list-workflow-step-groups-request))
 (common-lisp:defun make-list-workflow-step-groups-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key workflow-id max-results next-token)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-workflow-step-groups-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-workflow-step-groups-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-workflow-step-groups-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-workflow-step-groups-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-workflow-step-groups-response common-lisp:nil
                       ((workflow-step-groups-summary :initarg
                         :|workflowStepGroupsSummary| :type
                         (common-lisp:or workflow-step-groups-summary-list
                                         common-lisp:null)
                         :accessor
                         %list-workflow-step-groups-response-workflow-step-groups-summary
                         :initform
                         (common-lisp:error
                          ":workflowstepgroupssummary is required"))
                        (next-token :initarg :|nextToken| :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %list-workflow-step-groups-response-next-token
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-workflow-step-groups-response
                    'make-list-workflow-step-groups-response))
 (common-lisp:defun make-list-workflow-step-groups-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key workflow-step-groups-summary next-token)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-workflow-step-groups-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-workflow-step-groups-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-workflow-step-groups-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'workflow-step-groups-summary))
      (common-lisp:list
       (common-lisp:cons "workflowStepGroupsSummary"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-workflow-step-groups-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-workflow-steps-request common-lisp:nil
                       ((step-group-id :initarg :|stepGroupId| :type
                         (common-lisp:or step-group-id common-lisp:null)
                         :accessor %list-workflow-steps-request-step-group-id
                         :initform
                         (common-lisp:error ":stepgroupid is required"))
                        (workflow-id :initarg :|workflowId| :type
                         (common-lisp:or migration-workflow-id
                                         common-lisp:null)
                         :accessor %list-workflow-steps-request-workflow-id
                         :initform
                         (common-lisp:error ":workflowid is required"))
                        (max-results :initarg :|maxResults| :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor %list-workflow-steps-request-max-results
                         :initform common-lisp:nil)
                        (next-token :initarg :|nextToken| :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %list-workflow-steps-request-next-token :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-workflow-steps-request
                    'make-list-workflow-steps-request))
 (common-lisp:defun make-list-workflow-steps-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key step-group-id workflow-id max-results
                     next-token)
   (common-lisp:apply #'common-lisp:make-instance 'list-workflow-steps-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-workflow-steps-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-workflow-steps-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-workflow-steps-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-workflow-steps-response common-lisp:nil
                       ((workflow-steps-summary :initarg
                         :|workflowStepsSummary| :type
                         (common-lisp:or workflow-steps-summary-list
                                         common-lisp:null)
                         :accessor
                         %list-workflow-steps-response-workflow-steps-summary
                         :initform
                         (common-lisp:error
                          ":workflowstepssummary is required"))
                        (next-token :initarg :|nextToken| :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %list-workflow-steps-response-next-token :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-workflow-steps-response
                    'make-list-workflow-steps-response))
 (common-lisp:defun make-list-workflow-steps-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key workflow-steps-summary next-token)
   (common-lisp:apply #'common-lisp:make-instance 'list-workflow-steps-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-workflow-steps-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-workflow-steps-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'workflow-steps-summary))
      (common-lisp:list
       (common-lisp:cons "workflowStepsSummary"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-workflow-steps-response))
   common-lisp:nil))
(common-lisp:deftype max-results () 'common-lisp:integer)
(common-lisp:deftype migration-workflow-description () 'common-lisp:string)
(common-lisp:deftype migration-workflow-id () 'common-lisp:string)
(common-lisp:deftype migration-workflow-name () 'common-lisp:string)
(common-lisp:deftype migration-workflow-status-enum () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass migration-workflow-summary common-lisp:nil
                       ((total-steps :initarg :|totalSteps| :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         %migration-workflow-summary-total-steps :initform
                         common-lisp:nil)
                        (completed-steps :initarg :|completedSteps| :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         %migration-workflow-summary-completed-steps :initform
                         common-lisp:nil)
                        (status-message :initarg :|statusMessage| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %migration-workflow-summary-status-message :initform
                         common-lisp:nil)
                        (end-time :initarg :|endTime| :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %migration-workflow-summary-end-time :initform
                         common-lisp:nil)
                        (creation-time :initarg :|creationTime| :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %migration-workflow-summary-creation-time :initform
                         common-lisp:nil)
                        (status :initarg :|status| :type
                         (common-lisp:or migration-workflow-status-enum
                                         common-lisp:null)
                         :accessor %migration-workflow-summary-status :initform
                         common-lisp:nil)
                        (ads-application-configuration-name :initarg
                         :|adsApplicationConfigurationName| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %migration-workflow-summary-ads-application-configuration-name
                         :initform common-lisp:nil)
                        (template-id :initarg :|templateId| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %migration-workflow-summary-template-id :initform
                         common-lisp:nil)
                        (name :initarg :|name| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %migration-workflow-summary-name :initform
                         common-lisp:nil)
                        (id :initarg :|id| :type
                         (common-lisp:or migration-workflow-id
                                         common-lisp:null)
                         :accessor %migration-workflow-summary-id :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'migration-workflow-summary
                    'make-migration-workflow-summary))
 (common-lisp:defun make-migration-workflow-summary
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key total-steps completed-steps
                     status-message end-time creation-time status
                     ads-application-configuration-name template-id name id)
   (common-lisp:apply #'common-lisp:make-instance 'migration-workflow-summary
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          migration-workflow-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          migration-workflow-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'template-id))
      (common-lisp:list
       (common-lisp:cons "templateId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'ads-application-configuration-name))
      (common-lisp:list
       (common-lisp:cons "adsApplicationConfigurationName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-time))
      (common-lisp:list
       (common-lisp:cons "creationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'end-time))
      (common-lisp:list
       (common-lisp:cons "endTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status-message))
      (common-lisp:list
       (common-lisp:cons "statusMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'completed-steps))
      (common-lisp:list
       (common-lisp:cons "completedSteps"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'total-steps))
      (common-lisp:list
       (common-lisp:cons "totalSteps"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          migration-workflow-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype migration-workflow-summary-list ()
   '(trivial-types:proper-list migration-workflow-summary))
 (common-lisp:defun |make-migration-workflow-summary-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            migration-workflow-summary))
   aws-sdk/generator/shape::members))
(common-lisp:deftype next-token () 'common-lisp:string)
(common-lisp:deftype owner () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass platform-command common-lisp:nil
                       ((windows :initarg :|windows| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %platform-command-windows :initform common-lisp:nil)
                        (linux :initarg :|linux| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %platform-command-linux :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'platform-command 'make-platform-command))
 (common-lisp:defun make-platform-command
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key windows linux)
   (common-lisp:apply #'common-lisp:make-instance 'platform-command
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input platform-command))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input platform-command))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'linux))
      (common-lisp:list
       (common-lisp:cons "linux"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'windows))
      (common-lisp:list
       (common-lisp:cons "windows"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input platform-command))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass platform-script-key common-lisp:nil
                       ((windows :initarg :|windows| :type
                         (common-lisp:or s3key common-lisp:null) :accessor
                         %platform-script-key-windows :initform
                         common-lisp:nil)
                        (linux :initarg :|linux| :type
                         (common-lisp:or s3key common-lisp:null) :accessor
                         %platform-script-key-linux :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'platform-script-key 'make-platform-script-key))
 (common-lisp:defun make-platform-script-key
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key windows linux)
   (common-lisp:apply #'common-lisp:make-instance 'platform-script-key
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input platform-script-key))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input platform-script-key))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'linux))
      (common-lisp:list
       (common-lisp:cons "linux"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'windows))
      (common-lisp:list
       (common-lisp:cons "windows"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input platform-script-key))
   common-lisp:nil))
(common-lisp:deftype plugin-health () 'common-lisp:string)
(common-lisp:deftype plugin-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype plugin-summaries ()
   '(trivial-types:proper-list plugin-summary))
 (common-lisp:defun |make-plugin-summaries|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list plugin-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass plugin-summary common-lisp:nil
                       ((registered-time :initarg :|registeredTime| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %plugin-summary-registered-time :initform
                         common-lisp:nil)
                        (version :initarg :|version| :type
                         (common-lisp:or plugin-version common-lisp:null)
                         :accessor %plugin-summary-version :initform
                         common-lisp:nil)
                        (ip-address :initarg :|ipAddress| :type
                         (common-lisp:or ipaddress common-lisp:null) :accessor
                         %plugin-summary-ip-address :initform common-lisp:nil)
                        (status :initarg :|status| :type
                         (common-lisp:or plugin-health common-lisp:null)
                         :accessor %plugin-summary-status :initform
                         common-lisp:nil)
                        (hostname :initarg :|hostname| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %plugin-summary-hostname :initform common-lisp:nil)
                        (plugin-id :initarg :|pluginId| :type
                         (common-lisp:or plugin-id common-lisp:null) :accessor
                         %plugin-summary-plugin-id :initform common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'plugin-summary 'make-plugin-summary))
 (common-lisp:defun make-plugin-summary
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key registered-time version ip-address status
                     hostname plugin-id)
   (common-lisp:apply #'common-lisp:make-instance 'plugin-summary
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input plugin-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input plugin-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'plugin-id))
      (common-lisp:list
       (common-lisp:cons "pluginId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'hostname))
      (common-lisp:list
       (common-lisp:cons "hostname"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ip-address))
      (common-lisp:list
       (common-lisp:cons "ipAddress"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version))
      (common-lisp:list
       (common-lisp:cons "version"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'registered-time))
      (common-lisp:list
       (common-lisp:cons "registeredTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input plugin-summary))
   common-lisp:nil))
(common-lisp:deftype plugin-version () 'common-lisp:string)
(common-lisp:deftype resource-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition resource-not-found-exception
     (migrationhuborchestrator-error)
     ((message :initarg :|message| :initform common-lisp:nil :reader
       resource-not-found-exception-message)))
 (common-lisp:export
  (common-lisp:list 'resource-not-found-exception
                    'resource-not-found-exception-message)))
(common-lisp:progn
 (common-lisp:defclass retry-workflow-step-request common-lisp:nil
                       ((id :initarg :|id| :type
                         (common-lisp:or step-id common-lisp:null) :accessor
                         %retry-workflow-step-request-id :initform
                         (common-lisp:error ":id is required"))
                        (step-group-id :initarg :|stepGroupId| :type
                         (common-lisp:or step-group-id common-lisp:null)
                         :accessor %retry-workflow-step-request-step-group-id
                         :initform
                         (common-lisp:error ":stepgroupid is required"))
                        (workflow-id :initarg :|workflowId| :type
                         (common-lisp:or migration-workflow-id
                                         common-lisp:null)
                         :accessor %retry-workflow-step-request-workflow-id
                         :initform
                         (common-lisp:error ":workflowid is required"))))
 (common-lisp:export
  (common-lisp:list 'retry-workflow-step-request
                    'make-retry-workflow-step-request))
 (common-lisp:defun make-retry-workflow-step-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key id step-group-id workflow-id)
   (common-lisp:apply #'common-lisp:make-instance 'retry-workflow-step-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          retry-workflow-step-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          retry-workflow-step-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          retry-workflow-step-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass retry-workflow-step-response common-lisp:nil
                       ((status :initarg :|status| :type
                         (common-lisp:or step-status common-lisp:null)
                         :accessor %retry-workflow-step-response-status
                         :initform common-lisp:nil)
                        (id :initarg :|id| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %retry-workflow-step-response-id :initform
                         common-lisp:nil)
                        (workflow-id :initarg :|workflowId| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %retry-workflow-step-response-workflow-id :initform
                         common-lisp:nil)
                        (step-group-id :initarg :|stepGroupId| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %retry-workflow-step-response-step-group-id :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'retry-workflow-step-response
                    'make-retry-workflow-step-response))
 (common-lisp:defun make-retry-workflow-step-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key status id workflow-id step-group-id)
   (common-lisp:apply #'common-lisp:make-instance 'retry-workflow-step-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          retry-workflow-step-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          retry-workflow-step-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'step-group-id))
      (common-lisp:list
       (common-lisp:cons "stepGroupId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'workflow-id))
      (common-lisp:list
       (common-lisp:cons "workflowId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          retry-workflow-step-response))
   common-lisp:nil))
(common-lisp:deftype run-environment () 'common-lisp:string)
(common-lisp:deftype s3bucket () 'common-lisp:string)
(common-lisp:deftype s3key () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass start-migration-workflow-request common-lisp:nil
                       ((id :initarg :|id| :type
                         (common-lisp:or migration-workflow-id
                                         common-lisp:null)
                         :accessor %start-migration-workflow-request-id
                         :initform (common-lisp:error ":id is required"))))
 (common-lisp:export
  (common-lisp:list 'start-migration-workflow-request
                    'make-start-migration-workflow-request))
 (common-lisp:defun make-start-migration-workflow-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key id)
   (common-lisp:apply #'common-lisp:make-instance
                      'start-migration-workflow-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-migration-workflow-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-migration-workflow-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-migration-workflow-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass start-migration-workflow-response common-lisp:nil
                       ((last-start-time :initarg :|lastStartTime| :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %start-migration-workflow-response-last-start-time
                         :initform common-lisp:nil)
                        (status-message :initarg :|statusMessage| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %start-migration-workflow-response-status-message
                         :initform common-lisp:nil)
                        (status :initarg :|status| :type
                         (common-lisp:or migration-workflow-status-enum
                                         common-lisp:null)
                         :accessor %start-migration-workflow-response-status
                         :initform common-lisp:nil)
                        (arn :initarg :|arn| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %start-migration-workflow-response-arn :initform
                         common-lisp:nil)
                        (id :initarg :|id| :type
                         (common-lisp:or migration-workflow-id
                                         common-lisp:null)
                         :accessor %start-migration-workflow-response-id
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'start-migration-workflow-response
                    'make-start-migration-workflow-response))
 (common-lisp:defun make-start-migration-workflow-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key last-start-time status-message status arn
                     id)
   (common-lisp:apply #'common-lisp:make-instance
                      'start-migration-workflow-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-migration-workflow-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-migration-workflow-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status-message))
      (common-lisp:list
       (common-lisp:cons "statusMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-start-time))
      (common-lisp:list
       (common-lisp:cons "lastStartTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-migration-workflow-response))
   common-lisp:nil))
(common-lisp:deftype step-action-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass step-automation-configuration common-lisp:nil
                       ((target-type :initarg :|targetType| :type
                         (common-lisp:or target-type common-lisp:null)
                         :accessor %step-automation-configuration-target-type
                         :initform common-lisp:nil)
                        (run-environment :initarg :|runEnvironment| :type
                         (common-lisp:or run-environment common-lisp:null)
                         :accessor
                         %step-automation-configuration-run-environment
                         :initform common-lisp:nil)
                        (command :initarg :|command| :type
                         (common-lisp:or platform-command common-lisp:null)
                         :accessor %step-automation-configuration-command
                         :initform common-lisp:nil)
                        (script-location-s3key :initarg :|scriptLocationS3Key|
                         :type
                         (common-lisp:or platform-script-key common-lisp:null)
                         :accessor
                         %step-automation-configuration-script-location-s3key
                         :initform common-lisp:nil)
                        (script-location-s3bucket :initarg
                         :|scriptLocationS3Bucket| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %step-automation-configuration-script-location-s3bucket
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'step-automation-configuration
                    'make-step-automation-configuration))
 (common-lisp:defun make-step-automation-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key target-type run-environment command
                     script-location-s3key script-location-s3bucket)
   (common-lisp:apply #'common-lisp:make-instance
                      'step-automation-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          step-automation-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          step-automation-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'script-location-s3bucket))
      (common-lisp:list
       (common-lisp:cons "scriptLocationS3Bucket"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'script-location-s3key))
      (common-lisp:list
       (common-lisp:cons "scriptLocationS3Key"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'command))
      (common-lisp:list
       (common-lisp:cons "command"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'run-environment))
      (common-lisp:list
       (common-lisp:cons "runEnvironment"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target-type))
      (common-lisp:list
       (common-lisp:cons "targetType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          step-automation-configuration))
   common-lisp:nil))
(common-lisp:deftype step-description () 'common-lisp:string)
(common-lisp:deftype step-group-description () 'common-lisp:string)
(common-lisp:deftype step-group-id () 'common-lisp:string)
(common-lisp:deftype step-group-name () 'common-lisp:string)
(common-lisp:deftype step-group-status () 'common-lisp:string)
(common-lisp:deftype step-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass step-input common-lisp:nil
                       ((map-of-string-value :initarg :|mapOfStringValue| :type
                         (common-lisp:or string-map common-lisp:null) :accessor
                         %step-input-map-of-string-value :initform
                         common-lisp:nil)
                        (list-of-strings-value :initarg :|listOfStringsValue|
                         :type (common-lisp:or string-list common-lisp:null)
                         :accessor %step-input-list-of-strings-value :initform
                         common-lisp:nil)
                        (string-value :initarg :|stringValue| :type
                         (common-lisp:or string-value common-lisp:null)
                         :accessor %step-input-string-value :initform
                         common-lisp:nil)
                        (integer-value :initarg :|integerValue| :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         %step-input-integer-value :initform common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'step-input 'make-step-input))
 (common-lisp:defun make-step-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key map-of-string-value list-of-strings-value
                     string-value integer-value)
   (common-lisp:apply #'common-lisp:make-instance 'step-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input step-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input step-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'integer-value))
      (common-lisp:list
       (common-lisp:cons "integerValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'string-value))
      (common-lisp:list
       (common-lisp:cons "stringValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'list-of-strings-value))
      (common-lisp:list
       (common-lisp:cons "listOfStringsValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'map-of-string-value))
      (common-lisp:list
       (common-lisp:cons "mapOfStringValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input step-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype step-input-parameters () 'common-lisp:hash-table)
 (common-lisp:defun |make-step-input-parameters|
                    (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:deftype step-input-parameters-key () 'common-lisp:string)
(common-lisp:deftype step-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass step-output common-lisp:nil
                       ((required :initarg :|required| :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         %step-output-required :initform common-lisp:nil)
                        (data-type :initarg :|dataType| :type
                         (common-lisp:or data-type common-lisp:null) :accessor
                         %step-output-data-type :initform common-lisp:nil)
                        (name :initarg :|name| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %step-output-name :initform common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'step-output 'make-step-output))
 (common-lisp:defun make-step-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key required data-type name)
   (common-lisp:apply #'common-lisp:make-instance 'step-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input step-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input step-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-type))
      (common-lisp:list
       (common-lisp:cons "dataType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'required))
      (common-lisp:list
       (common-lisp:cons "required"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input step-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype step-output-list ()
   '(trivial-types:proper-list step-output))
 (common-lisp:defun |make-step-output-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list step-output))
   aws-sdk/generator/shape::members))
(common-lisp:deftype step-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass stop-migration-workflow-request common-lisp:nil
                       ((id :initarg :|id| :type
                         (common-lisp:or migration-workflow-id
                                         common-lisp:null)
                         :accessor %stop-migration-workflow-request-id
                         :initform (common-lisp:error ":id is required"))))
 (common-lisp:export
  (common-lisp:list 'stop-migration-workflow-request
                    'make-stop-migration-workflow-request))
 (common-lisp:defun make-stop-migration-workflow-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key id)
   (common-lisp:apply #'common-lisp:make-instance
                      'stop-migration-workflow-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          stop-migration-workflow-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          stop-migration-workflow-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          stop-migration-workflow-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass stop-migration-workflow-response common-lisp:nil
                       ((last-stop-time :initarg :|lastStopTime| :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %stop-migration-workflow-response-last-stop-time
                         :initform common-lisp:nil)
                        (status-message :initarg :|statusMessage| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %stop-migration-workflow-response-status-message
                         :initform common-lisp:nil)
                        (status :initarg :|status| :type
                         (common-lisp:or migration-workflow-status-enum
                                         common-lisp:null)
                         :accessor %stop-migration-workflow-response-status
                         :initform common-lisp:nil)
                        (arn :initarg :|arn| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %stop-migration-workflow-response-arn :initform
                         common-lisp:nil)
                        (id :initarg :|id| :type
                         (common-lisp:or migration-workflow-id
                                         common-lisp:null)
                         :accessor %stop-migration-workflow-response-id
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'stop-migration-workflow-response
                    'make-stop-migration-workflow-response))
 (common-lisp:defun make-stop-migration-workflow-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key last-stop-time status-message status arn
                     id)
   (common-lisp:apply #'common-lisp:make-instance
                      'stop-migration-workflow-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          stop-migration-workflow-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          stop-migration-workflow-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status-message))
      (common-lisp:list
       (common-lisp:cons "statusMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-stop-time))
      (common-lisp:list
       (common-lisp:cons "lastStopTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          stop-migration-workflow-response))
   common-lisp:nil))
(common-lisp:deftype string () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype string-list ()
   '(trivial-types:proper-list string-list-member))
 (common-lisp:defun |make-string-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list string-list-member))
   aws-sdk/generator/shape::members))
(common-lisp:deftype string-list-member () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype string-map () 'common-lisp:hash-table)
 (common-lisp:defun |make-string-map| (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:deftype string-map-key () 'common-lisp:string)
(common-lisp:deftype string-map-value () 'common-lisp:string)
(common-lisp:deftype string-value () 'common-lisp:string)
(common-lisp:deftype tag-key () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype tag-key-list () '(trivial-types:proper-list tag-key))
 (common-lisp:defun |make-tag-key-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list tag-key))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype tag-map () 'common-lisp:hash-table)
 (common-lisp:defun |make-tag-map| (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:progn
 (common-lisp:defclass tag-resource-request common-lisp:nil
                       ((tags :initarg :|tags| :type
                         (common-lisp:or tag-map common-lisp:null) :accessor
                         %tag-resource-request-tags :initform
                         (common-lisp:error ":tags is required"))
                        (resource-arn :initarg :|resourceArn| :type
                         (common-lisp:or resource-arn common-lisp:null)
                         :accessor %tag-resource-request-resource-arn :initform
                         (common-lisp:error ":resourcearn is required"))))
 (common-lisp:export
  (common-lisp:list 'tag-resource-request 'make-tag-resource-request))
 (common-lisp:defun make-tag-resource-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tags resource-arn)
   (common-lisp:apply #'common-lisp:make-instance 'tag-resource-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input tag-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input tag-resource-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input tag-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass tag-resource-response common-lisp:nil common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'tag-resource-response 'make-tag-resource-response))
 (common-lisp:defun make-tag-resource-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance 'tag-resource-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          tag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          tag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          tag-resource-response))
   common-lisp:nil))
(common-lisp:deftype tag-value () 'common-lisp:string)
(common-lisp:deftype target-type () 'common-lisp:string)
(common-lisp:deftype template-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass template-input common-lisp:nil
                       ((required :initarg :|required| :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         %template-input-required :initform common-lisp:nil)
                        (data-type :initarg :|dataType| :type
                         (common-lisp:or data-type common-lisp:null) :accessor
                         %template-input-data-type :initform common-lisp:nil)
                        (input-name :initarg :|inputName| :type
                         (common-lisp:or template-input-name common-lisp:null)
                         :accessor %template-input-input-name :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'template-input 'make-template-input))
 (common-lisp:defun make-template-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key required data-type input-name)
   (common-lisp:apply #'common-lisp:make-instance 'template-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input template-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input template-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'input-name))
      (common-lisp:list
       (common-lisp:cons "inputName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-type))
      (common-lisp:list
       (common-lisp:cons "dataType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'required))
      (common-lisp:list
       (common-lisp:cons "required"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input template-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype template-input-list ()
   '(trivial-types:proper-list template-input))
 (common-lisp:defun |make-template-input-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list template-input))
   aws-sdk/generator/shape::members))
(common-lisp:deftype template-input-name () 'common-lisp:string)
(common-lisp:deftype template-name () 'common-lisp:string)
(common-lisp:deftype template-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass template-step-group-summary common-lisp:nil
                       ((next :initarg :|next| :type
                         (common-lisp:or string-list common-lisp:null)
                         :accessor %template-step-group-summary-next :initform
                         common-lisp:nil)
                        (previous :initarg :|previous| :type
                         (common-lisp:or string-list common-lisp:null)
                         :accessor %template-step-group-summary-previous
                         :initform common-lisp:nil)
                        (name :initarg :|name| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %template-step-group-summary-name :initform
                         common-lisp:nil)
                        (id :initarg :|id| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %template-step-group-summary-id :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'template-step-group-summary
                    'make-template-step-group-summary))
 (common-lisp:defun make-template-step-group-summary
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next previous name id)
   (common-lisp:apply #'common-lisp:make-instance 'template-step-group-summary
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          template-step-group-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          template-step-group-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'previous))
      (common-lisp:list
       (common-lisp:cons "previous"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next))
      (common-lisp:list
       (common-lisp:cons "next"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          template-step-group-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype template-step-group-summary-list ()
   '(trivial-types:proper-list template-step-group-summary))
 (common-lisp:defun |make-template-step-group-summary-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            template-step-group-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass template-step-summary common-lisp:nil
                       ((next :initarg :|next| :type
                         (common-lisp:or string-list common-lisp:null)
                         :accessor %template-step-summary-next :initform
                         common-lisp:nil)
                        (previous :initarg :|previous| :type
                         (common-lisp:or string-list common-lisp:null)
                         :accessor %template-step-summary-previous :initform
                         common-lisp:nil)
                        (owner :initarg :|owner| :type
                         (common-lisp:or owner common-lisp:null) :accessor
                         %template-step-summary-owner :initform
                         common-lisp:nil)
                        (target-type :initarg :|targetType| :type
                         (common-lisp:or target-type common-lisp:null)
                         :accessor %template-step-summary-target-type :initform
                         common-lisp:nil)
                        (step-action-type :initarg :|stepActionType| :type
                         (common-lisp:or step-action-type common-lisp:null)
                         :accessor %template-step-summary-step-action-type
                         :initform common-lisp:nil)
                        (name :initarg :|name| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %template-step-summary-name :initform common-lisp:nil)
                        (template-id :initarg :|templateId| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %template-step-summary-template-id :initform
                         common-lisp:nil)
                        (step-group-id :initarg :|stepGroupId| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %template-step-summary-step-group-id :initform
                         common-lisp:nil)
                        (id :initarg :|id| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %template-step-summary-id :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'template-step-summary 'make-template-step-summary))
 (common-lisp:defun make-template-step-summary
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next previous owner target-type
                     step-action-type name template-id step-group-id id)
   (common-lisp:apply #'common-lisp:make-instance 'template-step-summary
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          template-step-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          template-step-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'step-group-id))
      (common-lisp:list
       (common-lisp:cons "stepGroupId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'template-id))
      (common-lisp:list
       (common-lisp:cons "templateId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'step-action-type))
      (common-lisp:list
       (common-lisp:cons "stepActionType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target-type))
      (common-lisp:list
       (common-lisp:cons "targetType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'owner))
      (common-lisp:list
       (common-lisp:cons "owner"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'previous))
      (common-lisp:list
       (common-lisp:cons "previous"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next))
      (common-lisp:list
       (common-lisp:cons "next"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          template-step-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype template-step-summary-list ()
   '(trivial-types:proper-list template-step-summary))
 (common-lisp:defun |make-template-step-summary-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list template-step-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass template-summary common-lisp:nil
                       ((description :initarg :|description| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %template-summary-description :initform
                         common-lisp:nil)
                        (arn :initarg :|arn| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %template-summary-arn :initform common-lisp:nil)
                        (name :initarg :|name| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %template-summary-name :initform common-lisp:nil)
                        (id :initarg :|id| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %template-summary-id :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'template-summary 'make-template-summary))
 (common-lisp:defun make-template-summary
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key description arn name id)
   (common-lisp:apply #'common-lisp:make-instance 'template-summary
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input template-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input template-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input template-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype template-summary-list ()
   '(trivial-types:proper-list template-summary))
 (common-lisp:defun |make-template-summary-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list template-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition throttling-exception
     (migrationhuborchestrator-error)
     ((message :initarg :|message| :initform common-lisp:nil :reader
       throttling-exception-message)))
 (common-lisp:export
  (common-lisp:list 'throttling-exception 'throttling-exception-message)))
(common-lisp:deftype timestamp () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass tool common-lisp:nil
                       ((url :initarg :|url| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %tool-url :initform common-lisp:nil)
                        (name :initarg :|name| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %tool-name :initform common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'tool 'make-tool))
 (common-lisp:defun make-tool
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key url name)
   (common-lisp:apply #'common-lisp:make-instance 'tool
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input tool))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input tool))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'url))
      (common-lisp:list
       (common-lisp:cons "url"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input tool))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype tools-list () '(trivial-types:proper-list tool))
 (common-lisp:defun |make-tools-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list tool))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass untag-resource-request common-lisp:nil
                       ((tag-keys :initarg :|tagKeys| :type
                         (common-lisp:or tag-key-list common-lisp:null)
                         :accessor %untag-resource-request-tag-keys :initform
                         (common-lisp:error ":tagkeys is required"))
                        (resource-arn :initarg :|resourceArn| :type
                         (common-lisp:or resource-arn common-lisp:null)
                         :accessor %untag-resource-request-resource-arn
                         :initform
                         (common-lisp:error ":resourcearn is required"))))
 (common-lisp:export
  (common-lisp:list 'untag-resource-request 'make-untag-resource-request))
 (common-lisp:defun make-untag-resource-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tag-keys resource-arn)
   (common-lisp:apply #'common-lisp:make-instance 'untag-resource-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass untag-resource-response common-lisp:nil common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'untag-resource-response 'make-untag-resource-response))
 (common-lisp:defun make-untag-resource-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance 'untag-resource-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-migration-workflow-request common-lisp:nil
                       ((step-targets :initarg :|stepTargets| :type
                         (common-lisp:or string-list common-lisp:null)
                         :accessor
                         %update-migration-workflow-request-step-targets
                         :initform common-lisp:nil)
                        (input-parameters :initarg :|inputParameters| :type
                         (common-lisp:or step-input-parameters
                                         common-lisp:null)
                         :accessor
                         %update-migration-workflow-request-input-parameters
                         :initform common-lisp:nil)
                        (description :initarg :|description| :type
                         (common-lisp:or
                          update-migration-workflow-request-description-string
                          common-lisp:null)
                         :accessor
                         %update-migration-workflow-request-description
                         :initform common-lisp:nil)
                        (name :initarg :|name| :type
                         (common-lisp:or
                          update-migration-workflow-request-name-string
                          common-lisp:null)
                         :accessor %update-migration-workflow-request-name
                         :initform common-lisp:nil)
                        (id :initarg :|id| :type
                         (common-lisp:or migration-workflow-id
                                         common-lisp:null)
                         :accessor %update-migration-workflow-request-id
                         :initform (common-lisp:error ":id is required"))))
 (common-lisp:export
  (common-lisp:list 'update-migration-workflow-request
                    'make-update-migration-workflow-request))
 (common-lisp:defun make-update-migration-workflow-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key step-targets input-parameters description
                     name id)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-migration-workflow-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-migration-workflow-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-migration-workflow-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'input-parameters))
      (common-lisp:list
       (common-lisp:cons "inputParameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'step-targets))
      (common-lisp:list
       (common-lisp:cons "stepTargets"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-migration-workflow-request))
   common-lisp:nil))
(common-lisp:deftype update-migration-workflow-request-description-string ()
  'common-lisp:string)
(common-lisp:deftype update-migration-workflow-request-name-string ()
  'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass update-migration-workflow-response common-lisp:nil
                       ((tags :initarg :|tags| :type
                         (common-lisp:or string-map common-lisp:null) :accessor
                         %update-migration-workflow-response-tags :initform
                         common-lisp:nil)
                        (last-modified-time :initarg :|lastModifiedTime| :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %update-migration-workflow-response-last-modified-time
                         :initform common-lisp:nil)
                        (creation-time :initarg :|creationTime| :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %update-migration-workflow-response-creation-time
                         :initform common-lisp:nil)
                        (status :initarg :|status| :type
                         (common-lisp:or migration-workflow-status-enum
                                         common-lisp:null)
                         :accessor %update-migration-workflow-response-status
                         :initform common-lisp:nil)
                        (step-targets :initarg :|stepTargets| :type
                         (common-lisp:or string-list common-lisp:null)
                         :accessor
                         %update-migration-workflow-response-step-targets
                         :initform common-lisp:nil)
                        (workflow-inputs :initarg :|workflowInputs| :type
                         (common-lisp:or step-input-parameters
                                         common-lisp:null)
                         :accessor
                         %update-migration-workflow-response-workflow-inputs
                         :initform common-lisp:nil)
                        (ads-application-configuration-id :initarg
                         :|adsApplicationConfigurationId| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %update-migration-workflow-response-ads-application-configuration-id
                         :initform common-lisp:nil)
                        (template-id :initarg :|templateId| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %update-migration-workflow-response-template-id
                         :initform common-lisp:nil)
                        (description :initarg :|description| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %update-migration-workflow-response-description
                         :initform common-lisp:nil)
                        (name :initarg :|name| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %update-migration-workflow-response-name :initform
                         common-lisp:nil)
                        (arn :initarg :|arn| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %update-migration-workflow-response-arn :initform
                         common-lisp:nil)
                        (id :initarg :|id| :type
                         (common-lisp:or migration-workflow-id
                                         common-lisp:null)
                         :accessor %update-migration-workflow-response-id
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'update-migration-workflow-response
                    'make-update-migration-workflow-response))
 (common-lisp:defun make-update-migration-workflow-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tags last-modified-time creation-time
                     status step-targets workflow-inputs
                     ads-application-configuration-id template-id description
                     name arn id)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-migration-workflow-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-migration-workflow-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-migration-workflow-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'template-id))
      (common-lisp:list
       (common-lisp:cons "templateId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'ads-application-configuration-id))
      (common-lisp:list
       (common-lisp:cons "adsApplicationConfigurationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'workflow-inputs))
      (common-lisp:list
       (common-lisp:cons "workflowInputs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'step-targets))
      (common-lisp:list
       (common-lisp:cons "stepTargets"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-time))
      (common-lisp:list
       (common-lisp:cons "creationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-modified-time))
      (common-lisp:list
       (common-lisp:cons "lastModifiedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-migration-workflow-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-workflow-step-group-request common-lisp:nil
                       ((previous :initarg :|previous| :type
                         (common-lisp:or string-list common-lisp:null)
                         :accessor %update-workflow-step-group-request-previous
                         :initform common-lisp:nil)
                        (next :initarg :|next| :type
                         (common-lisp:or string-list common-lisp:null)
                         :accessor %update-workflow-step-group-request-next
                         :initform common-lisp:nil)
                        (description :initarg :|description| :type
                         (common-lisp:or step-group-description
                                         common-lisp:null)
                         :accessor
                         %update-workflow-step-group-request-description
                         :initform common-lisp:nil)
                        (name :initarg :|name| :type
                         (common-lisp:or step-group-name common-lisp:null)
                         :accessor %update-workflow-step-group-request-name
                         :initform common-lisp:nil)
                        (id :initarg :|id| :type
                         (common-lisp:or step-group-id common-lisp:null)
                         :accessor %update-workflow-step-group-request-id
                         :initform (common-lisp:error ":id is required"))
                        (workflow-id :initarg :|workflowId| :type
                         (common-lisp:or migration-workflow-id
                                         common-lisp:null)
                         :accessor
                         %update-workflow-step-group-request-workflow-id
                         :initform
                         (common-lisp:error ":workflowid is required"))))
 (common-lisp:export
  (common-lisp:list 'update-workflow-step-group-request
                    'make-update-workflow-step-group-request))
 (common-lisp:defun make-update-workflow-step-group-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key previous next description name id
                     workflow-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-workflow-step-group-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-workflow-step-group-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-workflow-step-group-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next))
      (common-lisp:list
       (common-lisp:cons "next"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'previous))
      (common-lisp:list
       (common-lisp:cons "previous"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-workflow-step-group-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-workflow-step-group-response common-lisp:nil
                       ((last-modified-time :initarg :|lastModifiedTime| :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %update-workflow-step-group-response-last-modified-time
                         :initform common-lisp:nil)
                        (previous :initarg :|previous| :type
                         (common-lisp:or string-list common-lisp:null)
                         :accessor
                         %update-workflow-step-group-response-previous
                         :initform common-lisp:nil)
                        (next :initarg :|next| :type
                         (common-lisp:or string-list common-lisp:null)
                         :accessor %update-workflow-step-group-response-next
                         :initform common-lisp:nil)
                        (tools :initarg :|tools| :type
                         (common-lisp:or tools-list common-lisp:null) :accessor
                         %update-workflow-step-group-response-tools :initform
                         common-lisp:nil)
                        (description :initarg :|description| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %update-workflow-step-group-response-description
                         :initform common-lisp:nil)
                        (id :initarg :|id| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %update-workflow-step-group-response-id :initform
                         common-lisp:nil)
                        (name :initarg :|name| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %update-workflow-step-group-response-name :initform
                         common-lisp:nil)
                        (workflow-id :initarg :|workflowId| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %update-workflow-step-group-response-workflow-id
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'update-workflow-step-group-response
                    'make-update-workflow-step-group-response))
 (common-lisp:defun make-update-workflow-step-group-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key last-modified-time previous next tools
                     description id name workflow-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-workflow-step-group-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-workflow-step-group-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-workflow-step-group-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'workflow-id))
      (common-lisp:list
       (common-lisp:cons "workflowId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tools))
      (common-lisp:list
       (common-lisp:cons "tools"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next))
      (common-lisp:list
       (common-lisp:cons "next"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'previous))
      (common-lisp:list
       (common-lisp:cons "previous"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-modified-time))
      (common-lisp:list
       (common-lisp:cons "lastModifiedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-workflow-step-group-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-workflow-step-request common-lisp:nil
                       ((status :initarg :|status| :type
                         (common-lisp:or step-status common-lisp:null)
                         :accessor %update-workflow-step-request-status
                         :initform common-lisp:nil)
                        (next :initarg :|next| :type
                         (common-lisp:or string-list common-lisp:null)
                         :accessor %update-workflow-step-request-next :initform
                         common-lisp:nil)
                        (previous :initarg :|previous| :type
                         (common-lisp:or string-list common-lisp:null)
                         :accessor %update-workflow-step-request-previous
                         :initform common-lisp:nil)
                        (outputs :initarg :|outputs| :type
                         (common-lisp:or workflow-step-output-list
                                         common-lisp:null)
                         :accessor %update-workflow-step-request-outputs
                         :initform common-lisp:nil)
                        (step-target :initarg :|stepTarget| :type
                         (common-lisp:or string-list common-lisp:null)
                         :accessor %update-workflow-step-request-step-target
                         :initform common-lisp:nil)
                        (workflow-step-automation-configuration :initarg
                         :|workflowStepAutomationConfiguration| :type
                         (common-lisp:or workflow-step-automation-configuration
                                         common-lisp:null)
                         :accessor
                         %update-workflow-step-request-workflow-step-automation-configuration
                         :initform common-lisp:nil)
                        (step-action-type :initarg :|stepActionType| :type
                         (common-lisp:or step-action-type common-lisp:null)
                         :accessor
                         %update-workflow-step-request-step-action-type
                         :initform common-lisp:nil)
                        (description :initarg :|description| :type
                         (common-lisp:or step-description common-lisp:null)
                         :accessor %update-workflow-step-request-description
                         :initform common-lisp:nil)
                        (name :initarg :|name| :type
                         (common-lisp:or step-name common-lisp:null) :accessor
                         %update-workflow-step-request-name :initform
                         common-lisp:nil)
                        (workflow-id :initarg :|workflowId| :type
                         (common-lisp:or migration-workflow-id
                                         common-lisp:null)
                         :accessor %update-workflow-step-request-workflow-id
                         :initform
                         (common-lisp:error ":workflowid is required"))
                        (step-group-id :initarg :|stepGroupId| :type
                         (common-lisp:or step-group-id common-lisp:null)
                         :accessor %update-workflow-step-request-step-group-id
                         :initform
                         (common-lisp:error ":stepgroupid is required"))
                        (id :initarg :|id| :type
                         (common-lisp:or step-id common-lisp:null) :accessor
                         %update-workflow-step-request-id :initform
                         (common-lisp:error ":id is required"))))
 (common-lisp:export
  (common-lisp:list 'update-workflow-step-request
                    'make-update-workflow-step-request))
 (common-lisp:defun make-update-workflow-step-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key status next previous outputs step-target
                     workflow-step-automation-configuration step-action-type
                     description name workflow-id step-group-id id)
   (common-lisp:apply #'common-lisp:make-instance 'update-workflow-step-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-workflow-step-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-workflow-step-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'step-group-id))
      (common-lisp:list
       (common-lisp:cons "stepGroupId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'workflow-id))
      (common-lisp:list
       (common-lisp:cons "workflowId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'step-action-type))
      (common-lisp:list
       (common-lisp:cons "stepActionType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'workflow-step-automation-configuration))
      (common-lisp:list
       (common-lisp:cons "workflowStepAutomationConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'step-target))
      (common-lisp:list
       (common-lisp:cons "stepTarget"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'outputs))
      (common-lisp:list
       (common-lisp:cons "outputs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'previous))
      (common-lisp:list
       (common-lisp:cons "previous"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next))
      (common-lisp:list
       (common-lisp:cons "next"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-workflow-step-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-workflow-step-response common-lisp:nil
                       ((name :initarg :|name| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %update-workflow-step-response-name :initform
                         common-lisp:nil)
                        (workflow-id :initarg :|workflowId| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %update-workflow-step-response-workflow-id :initform
                         common-lisp:nil)
                        (step-group-id :initarg :|stepGroupId| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %update-workflow-step-response-step-group-id :initform
                         common-lisp:nil)
                        (id :initarg :|id| :type
                         (common-lisp:or step-id common-lisp:null) :accessor
                         %update-workflow-step-response-id :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'update-workflow-step-response
                    'make-update-workflow-step-response))
 (common-lisp:defun make-update-workflow-step-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key name workflow-id step-group-id id)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-workflow-step-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-workflow-step-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-workflow-step-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'step-group-id))
      (common-lisp:list
       (common-lisp:cons "stepGroupId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'workflow-id))
      (common-lisp:list
       (common-lisp:cons "workflowId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-workflow-step-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition validation-exception
     (migrationhuborchestrator-error)
     ((message :initarg :|message| :initform common-lisp:nil :reader
       validation-exception-message)))
 (common-lisp:export
  (common-lisp:list 'validation-exception 'validation-exception-message)))
(common-lisp:progn
 (common-lisp:defclass workflow-step-automation-configuration common-lisp:nil
                       ((target-type :initarg :|targetType| :type
                         (common-lisp:or target-type common-lisp:null)
                         :accessor
                         %workflow-step-automation-configuration-target-type
                         :initform common-lisp:nil)
                        (run-environment :initarg :|runEnvironment| :type
                         (common-lisp:or run-environment common-lisp:null)
                         :accessor
                         %workflow-step-automation-configuration-run-environment
                         :initform common-lisp:nil)
                        (command :initarg :|command| :type
                         (common-lisp:or platform-command common-lisp:null)
                         :accessor
                         %workflow-step-automation-configuration-command
                         :initform common-lisp:nil)
                        (script-location-s3key :initarg :|scriptLocationS3Key|
                         :type
                         (common-lisp:or platform-script-key common-lisp:null)
                         :accessor
                         %workflow-step-automation-configuration-script-location-s3key
                         :initform common-lisp:nil)
                        (script-location-s3bucket :initarg
                         :|scriptLocationS3Bucket| :type
                         (common-lisp:or s3bucket common-lisp:null) :accessor
                         %workflow-step-automation-configuration-script-location-s3bucket
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'workflow-step-automation-configuration
                    'make-workflow-step-automation-configuration))
 (common-lisp:defun make-workflow-step-automation-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key target-type run-environment command
                     script-location-s3key script-location-s3bucket)
   (common-lisp:apply #'common-lisp:make-instance
                      'workflow-step-automation-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          workflow-step-automation-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          workflow-step-automation-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'script-location-s3bucket))
      (common-lisp:list
       (common-lisp:cons "scriptLocationS3Bucket"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'script-location-s3key))
      (common-lisp:list
       (common-lisp:cons "scriptLocationS3Key"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'command))
      (common-lisp:list
       (common-lisp:cons "command"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'run-environment))
      (common-lisp:list
       (common-lisp:cons "runEnvironment"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target-type))
      (common-lisp:list
       (common-lisp:cons "targetType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          workflow-step-automation-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass workflow-step-group-summary common-lisp:nil
                       ((next :initarg :|next| :type
                         (common-lisp:or string-list common-lisp:null)
                         :accessor %workflow-step-group-summary-next :initform
                         common-lisp:nil)
                        (previous :initarg :|previous| :type
                         (common-lisp:or string-list common-lisp:null)
                         :accessor %workflow-step-group-summary-previous
                         :initform common-lisp:nil)
                        (status :initarg :|status| :type
                         (common-lisp:or step-group-status common-lisp:null)
                         :accessor %workflow-step-group-summary-status
                         :initform common-lisp:nil)
                        (owner :initarg :|owner| :type
                         (common-lisp:or owner common-lisp:null) :accessor
                         %workflow-step-group-summary-owner :initform
                         common-lisp:nil)
                        (name :initarg :|name| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %workflow-step-group-summary-name :initform
                         common-lisp:nil)
                        (id :initarg :|id| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %workflow-step-group-summary-id :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'workflow-step-group-summary
                    'make-workflow-step-group-summary))
 (common-lisp:defun make-workflow-step-group-summary
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next previous status owner name id)
   (common-lisp:apply #'common-lisp:make-instance 'workflow-step-group-summary
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          workflow-step-group-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          workflow-step-group-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'owner))
      (common-lisp:list
       (common-lisp:cons "owner"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'previous))
      (common-lisp:list
       (common-lisp:cons "previous"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next))
      (common-lisp:list
       (common-lisp:cons "next"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          workflow-step-group-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype workflow-step-groups-summary-list ()
   '(trivial-types:proper-list workflow-step-group-summary))
 (common-lisp:defun |make-workflow-step-groups-summary-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            workflow-step-group-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass workflow-step-output common-lisp:nil
                       ((value :initarg :|value| :type
                         (common-lisp:or workflow-step-output-union
                                         common-lisp:null)
                         :accessor %workflow-step-output-value :initform
                         common-lisp:nil)
                        (required :initarg :|required| :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         %workflow-step-output-required :initform
                         common-lisp:nil)
                        (data-type :initarg :|dataType| :type
                         (common-lisp:or data-type common-lisp:null) :accessor
                         %workflow-step-output-data-type :initform
                         common-lisp:nil)
                        (name :initarg :|name| :type
                         (common-lisp:or workflow-step-output-name
                                         common-lisp:null)
                         :accessor %workflow-step-output-name :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'workflow-step-output 'make-workflow-step-output))
 (common-lisp:defun make-workflow-step-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key value required data-type name)
   (common-lisp:apply #'common-lisp:make-instance 'workflow-step-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input workflow-step-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input workflow-step-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-type))
      (common-lisp:list
       (common-lisp:cons "dataType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'required))
      (common-lisp:list
       (common-lisp:cons "required"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input workflow-step-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype workflow-step-output-list ()
   '(trivial-types:proper-list workflow-step-output))
 (common-lisp:defun |make-workflow-step-output-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list workflow-step-output))
   aws-sdk/generator/shape::members))
(common-lisp:deftype workflow-step-output-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass workflow-step-output-union common-lisp:nil
                       ((list-of-string-value :initarg :|listOfStringValue|
                         :type (common-lisp:or string-list common-lisp:null)
                         :accessor
                         %workflow-step-output-union-list-of-string-value
                         :initform common-lisp:nil)
                        (string-value :initarg :|stringValue| :type
                         (common-lisp:or string-value common-lisp:null)
                         :accessor %workflow-step-output-union-string-value
                         :initform common-lisp:nil)
                        (integer-value :initarg :|integerValue| :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         %workflow-step-output-union-integer-value :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'workflow-step-output-union
                    'make-workflow-step-output-union))
 (common-lisp:defun make-workflow-step-output-union
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key list-of-string-value string-value
                     integer-value)
   (common-lisp:apply #'common-lisp:make-instance 'workflow-step-output-union
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          workflow-step-output-union))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          workflow-step-output-union))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'integer-value))
      (common-lisp:list
       (common-lisp:cons "integerValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'string-value))
      (common-lisp:list
       (common-lisp:cons "stringValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'list-of-string-value))
      (common-lisp:list
       (common-lisp:cons "listOfStringValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          workflow-step-output-union))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass workflow-step-summary common-lisp:nil
                       ((script-location :initarg :|scriptLocation| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %workflow-step-summary-script-location :initform
                         common-lisp:nil)
                        (description :initarg :|description| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %workflow-step-summary-description :initform
                         common-lisp:nil)
                        (total-no-of-srv :initarg :|totalNoOfSrv| :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         %workflow-step-summary-total-no-of-srv :initform
                         common-lisp:nil)
                        (no-of-srv-failed :initarg :|noOfSrvFailed| :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         %workflow-step-summary-no-of-srv-failed :initform
                         common-lisp:nil)
                        (no-of-srv-completed :initarg :|noOfSrvCompleted| :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         %workflow-step-summary-no-of-srv-completed :initform
                         common-lisp:nil)
                        (status-message :initarg :|statusMessage| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %workflow-step-summary-status-message :initform
                         common-lisp:nil)
                        (status :initarg :|status| :type
                         (common-lisp:or step-status common-lisp:null)
                         :accessor %workflow-step-summary-status :initform
                         common-lisp:nil)
                        (next :initarg :|next| :type
                         (common-lisp:or string-list common-lisp:null)
                         :accessor %workflow-step-summary-next :initform
                         common-lisp:nil)
                        (previous :initarg :|previous| :type
                         (common-lisp:or string-list common-lisp:null)
                         :accessor %workflow-step-summary-previous :initform
                         common-lisp:nil)
                        (owner :initarg :|owner| :type
                         (common-lisp:or owner common-lisp:null) :accessor
                         %workflow-step-summary-owner :initform
                         common-lisp:nil)
                        (step-action-type :initarg :|stepActionType| :type
                         (common-lisp:or step-action-type common-lisp:null)
                         :accessor %workflow-step-summary-step-action-type
                         :initform common-lisp:nil)
                        (name :initarg :|name| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %workflow-step-summary-name :initform common-lisp:nil)
                        (step-id :initarg :|stepId| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %workflow-step-summary-step-id :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'workflow-step-summary 'make-workflow-step-summary))
 (common-lisp:defun make-workflow-step-summary
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key script-location description
                     total-no-of-srv no-of-srv-failed no-of-srv-completed
                     status-message status next previous owner step-action-type
                     name step-id)
   (common-lisp:apply #'common-lisp:make-instance 'workflow-step-summary
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          workflow-step-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          workflow-step-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'step-id))
      (common-lisp:list
       (common-lisp:cons "stepId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'step-action-type))
      (common-lisp:list
       (common-lisp:cons "stepActionType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'owner))
      (common-lisp:list
       (common-lisp:cons "owner"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'previous))
      (common-lisp:list
       (common-lisp:cons "previous"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next))
      (common-lisp:list
       (common-lisp:cons "next"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status-message))
      (common-lisp:list
       (common-lisp:cons "statusMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'no-of-srv-completed))
      (common-lisp:list
       (common-lisp:cons "noOfSrvCompleted"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'no-of-srv-failed))
      (common-lisp:list
       (common-lisp:cons "noOfSrvFailed"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'total-no-of-srv))
      (common-lisp:list
       (common-lisp:cons "totalNoOfSrv"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'script-location))
      (common-lisp:list
       (common-lisp:cons "scriptLocation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          workflow-step-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype workflow-steps-summary-list ()
   '(trivial-types:proper-list workflow-step-summary))
 (common-lisp:defun |make-workflow-steps-summary-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list workflow-step-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defun create-workflow
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name description template-id
                     application-configuration-id input-parameters step-targets
                     tags)
   (common-lisp:declare
    (common-lisp:ignorable name description template-id
     application-configuration-id input-parameters step-targets tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-create-migration-workflow-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'migrationhuborchestrator-request aws-sdk/generator/operation::input
        "POST" :rest-json "/migrationworkflow/" "CreateWorkflow" "2021-08-28"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-workflow))
(common-lisp:progn
 (common-lisp:defun create-workflow-step
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name step-group-id workflow-id
                     step-action-type description
                     workflow-step-automation-configuration step-target outputs
                     previous next)
   (common-lisp:declare
    (common-lisp:ignorable name step-group-id workflow-id step-action-type
     description workflow-step-automation-configuration step-target outputs
     previous next))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-workflow-step-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'migrationhuborchestrator-request aws-sdk/generator/operation::input
        "POST" :rest-json "/workflowstep" "CreateWorkflowStep" "2021-08-28"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-workflow-step))
(common-lisp:progn
 (common-lisp:defun create-workflow-step-group
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key workflow-id name description next
                     previous)
   (common-lisp:declare
    (common-lisp:ignorable workflow-id name description next previous))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-create-workflow-step-group-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'migrationhuborchestrator-request aws-sdk/generator/operation::input
        "POST" :rest-json "/workflowstepgroups" "CreateWorkflowStepGroup"
        "2021-08-28"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-workflow-step-group))
(common-lisp:progn
 (common-lisp:defun delete-workflow
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key id)
   (common-lisp:declare (common-lisp:ignorable id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-delete-migration-workflow-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'migrationhuborchestrator-request aws-sdk/generator/operation::input
        "DELETE" :rest-json
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil "/migrationworkflow/~A"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input 'id))))
        "DeleteWorkflow" "2021-08-28"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-workflow))
(common-lisp:progn
 (common-lisp:defun delete-workflow-step
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key id step-group-id workflow-id)
   (common-lisp:declare (common-lisp:ignorable id step-group-id workflow-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-workflow-step-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'migrationhuborchestrator-request aws-sdk/generator/operation::input
        "DELETE" :rest-json
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil "/workflowstep/~A"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input 'id))))
        "DeleteWorkflowStep" "2021-08-28"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-workflow-step))
(common-lisp:progn
 (common-lisp:defun delete-workflow-step-group
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key workflow-id id)
   (common-lisp:declare (common-lisp:ignorable workflow-id id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-delete-workflow-step-group-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'migrationhuborchestrator-request aws-sdk/generator/operation::input
        "DELETE" :rest-json
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil "/workflowstepgroup/~A"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input 'id))))
        "DeleteWorkflowStepGroup" "2021-08-28"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-workflow-step-group))
(common-lisp:progn
 (common-lisp:defun get-template
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key id)
   (common-lisp:declare (common-lisp:ignorable id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-get-migration-workflow-template-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'migrationhuborchestrator-request aws-sdk/generator/operation::input
        "GET" :rest-json
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil "/migrationworkflowtemplate/~A"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input 'id))))
        "GetTemplate" "2021-08-28"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-template))
(common-lisp:progn
 (common-lisp:defun get-template-step
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key id template-id step-group-id)
   (common-lisp:declare (common-lisp:ignorable id template-id step-group-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-template-step-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'migrationhuborchestrator-request aws-sdk/generator/operation::input
        "GET" :rest-json
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil "/templatestep/~A"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input 'id))))
        "GetTemplateStep" "2021-08-28"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-template-step))
(common-lisp:progn
 (common-lisp:defun get-template-step-group
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key template-id id)
   (common-lisp:declare (common-lisp:ignorable template-id id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-template-step-group-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'migrationhuborchestrator-request aws-sdk/generator/operation::input
        "GET" :rest-json
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil "/templates/~A/stepgroups/~A"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'template-id))
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input 'id))))
        "GetTemplateStepGroup" "2021-08-28"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-template-step-group))
(common-lisp:progn
 (common-lisp:defun get-workflow
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key id)
   (common-lisp:declare (common-lisp:ignorable id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-migration-workflow-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'migrationhuborchestrator-request aws-sdk/generator/operation::input
        "GET" :rest-json
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil "/migrationworkflow/~A"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input 'id))))
        "GetWorkflow" "2021-08-28"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-workflow))
(common-lisp:progn
 (common-lisp:defun get-workflow-step
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key workflow-id step-group-id id)
   (common-lisp:declare (common-lisp:ignorable workflow-id step-group-id id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-workflow-step-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'migrationhuborchestrator-request aws-sdk/generator/operation::input
        "GET" :rest-json
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil "/workflowstep/~A"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input 'id))))
        "GetWorkflowStep" "2021-08-28"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-workflow-step))
(common-lisp:progn
 (common-lisp:defun get-workflow-step-group
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key id workflow-id)
   (common-lisp:declare (common-lisp:ignorable id workflow-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-workflow-step-group-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'migrationhuborchestrator-request aws-sdk/generator/operation::input
        "GET" :rest-json
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil "/workflowstepgroup/~A"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input 'id))))
        "GetWorkflowStepGroup" "2021-08-28"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-workflow-step-group))
(common-lisp:progn
 (common-lisp:defun list-plugins
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key max-results next-token)
   (common-lisp:declare (common-lisp:ignorable max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-plugins-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'migrationhuborchestrator-request aws-sdk/generator/operation::input
        "GET" :rest-json "/plugins" "ListPlugins" "2021-08-28"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-plugins))
(common-lisp:progn
 (common-lisp:defun list-tags-for-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn)
   (common-lisp:declare (common-lisp:ignorable resource-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-tags-for-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'migrationhuborchestrator-request aws-sdk/generator/operation::input
        "GET" :rest-json
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil "/tags/~A"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'resource-arn))))
        "ListTagsForResource" "2021-08-28"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-tags-for-resource))
(common-lisp:progn
 (common-lisp:defun list-template-step-groups
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key max-results next-token template-id)
   (common-lisp:declare
    (common-lisp:ignorable max-results next-token template-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-template-step-groups-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'migrationhuborchestrator-request aws-sdk/generator/operation::input
        "GET" :rest-json
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil "/templatestepgroups/~A"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'template-id))))
        "ListTemplateStepGroups" "2021-08-28"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-template-step-groups))
(common-lisp:progn
 (common-lisp:defun list-template-steps
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key max-results next-token template-id
                     step-group-id)
   (common-lisp:declare
    (common-lisp:ignorable max-results next-token template-id step-group-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-template-steps-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'migrationhuborchestrator-request aws-sdk/generator/operation::input
        "GET" :rest-json "/templatesteps" "ListTemplateSteps" "2021-08-28"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-template-steps))
(common-lisp:progn
 (common-lisp:defun list-templates
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key max-results next-token name)
   (common-lisp:declare (common-lisp:ignorable max-results next-token name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-migration-workflow-templates-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'migrationhuborchestrator-request aws-sdk/generator/operation::input
        "GET" :rest-json "/migrationworkflowtemplates" "ListTemplates"
        "2021-08-28"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-templates))
(common-lisp:progn
 (common-lisp:defun list-workflow-step-groups
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key next-token max-results workflow-id)
   (common-lisp:declare
    (common-lisp:ignorable next-token max-results workflow-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-workflow-step-groups-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'migrationhuborchestrator-request aws-sdk/generator/operation::input
        "GET" :rest-json "/workflowstepgroups" "ListWorkflowStepGroups"
        "2021-08-28"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-workflow-step-groups))
(common-lisp:progn
 (common-lisp:defun list-workflow-steps
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key next-token max-results workflow-id
                     step-group-id)
   (common-lisp:declare
    (common-lisp:ignorable next-token max-results workflow-id step-group-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-workflow-steps-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'migrationhuborchestrator-request aws-sdk/generator/operation::input
        "GET" :rest-json
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil
                              "/workflow/~A/workflowstepgroups/~A/workflowsteps"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'workflow-id))
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'step-group-id))))
        "ListWorkflowSteps" "2021-08-28"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-workflow-steps))
(common-lisp:progn
 (common-lisp:defun list-workflows
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key max-results next-token template-id
                     ads-application-configuration-name status name)
   (common-lisp:declare
    (common-lisp:ignorable max-results next-token template-id
     ads-application-configuration-name status name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-migration-workflows-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'migrationhuborchestrator-request aws-sdk/generator/operation::input
        "GET" :rest-json "/migrationworkflows" "ListWorkflows" "2021-08-28"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-workflows))
(common-lisp:progn
 (common-lisp:defun retry-workflow-step
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key workflow-id step-group-id id)
   (common-lisp:declare (common-lisp:ignorable workflow-id step-group-id id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-retry-workflow-step-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'migrationhuborchestrator-request aws-sdk/generator/operation::input
        "POST" :rest-json
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil "/retryworkflowstep/~A"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input 'id))))
        "RetryWorkflowStep" "2021-08-28"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'retry-workflow-step))
(common-lisp:progn
 (common-lisp:defun start-workflow
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key id)
   (common-lisp:declare (common-lisp:ignorable id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-start-migration-workflow-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'migrationhuborchestrator-request aws-sdk/generator/operation::input
        "POST" :rest-json
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil "/migrationworkflow/~A/start"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input 'id))))
        "StartWorkflow" "2021-08-28"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'start-workflow))
(common-lisp:progn
 (common-lisp:defun stop-workflow
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key id)
   (common-lisp:declare (common-lisp:ignorable id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-stop-migration-workflow-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'migrationhuborchestrator-request aws-sdk/generator/operation::input
        "POST" :rest-json
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil "/migrationworkflow/~A/stop"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input 'id))))
        "StopWorkflow" "2021-08-28"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'stop-workflow))
(common-lisp:progn
 (common-lisp:defun tag-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn tags)
   (common-lisp:declare (common-lisp:ignorable resource-arn tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-tag-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'migrationhuborchestrator-request aws-sdk/generator/operation::input
        "POST" :rest-json
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil "/tags/~A"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'resource-arn))))
        "TagResource" "2021-08-28"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'tag-resource))
(common-lisp:progn
 (common-lisp:defun untag-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn tag-keys)
   (common-lisp:declare (common-lisp:ignorable resource-arn tag-keys))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-untag-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'migrationhuborchestrator-request aws-sdk/generator/operation::input
        "DELETE" :rest-json
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil "/tags/~A"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'resource-arn))))
        "UntagResource" "2021-08-28"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'untag-resource))
(common-lisp:progn
 (common-lisp:defun update-workflow
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key id name description input-parameters
                     step-targets)
   (common-lisp:declare
    (common-lisp:ignorable id name description input-parameters step-targets))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-update-migration-workflow-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'migrationhuborchestrator-request aws-sdk/generator/operation::input
        "POST" :rest-json
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil "/migrationworkflow/~A"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input 'id))))
        "UpdateWorkflow" "2021-08-28"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-workflow))
(common-lisp:progn
 (common-lisp:defun update-workflow-step
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key id step-group-id workflow-id name
                     description step-action-type
                     workflow-step-automation-configuration step-target outputs
                     previous next status)
   (common-lisp:declare
    (common-lisp:ignorable id step-group-id workflow-id name description
     step-action-type workflow-step-automation-configuration step-target
     outputs previous next status))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-workflow-step-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'migrationhuborchestrator-request aws-sdk/generator/operation::input
        "POST" :rest-json
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil "/workflowstep/~A"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input 'id))))
        "UpdateWorkflowStep" "2021-08-28"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-workflow-step))
(common-lisp:progn
 (common-lisp:defun update-workflow-step-group
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key workflow-id id name description next
                     previous)
   (common-lisp:declare
    (common-lisp:ignorable workflow-id id name description next previous))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-update-workflow-step-group-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'migrationhuborchestrator-request aws-sdk/generator/operation::input
        "POST" :rest-json
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil "/workflowstepgroup/~A"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input 'id))))
        "UpdateWorkflowStepGroup" "2021-08-28"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-workflow-step-group))
