;; DO NOT EDIT: File is generated by AWS-SDK/GENERATOR.

(common-lisp:defpackage #:aws-sdk/services/rds/api
  (:use)
  (:nicknames #:aws/rds)
  (:import-from #:aws-sdk/generator/shape)
  (:import-from #:aws-sdk/generator/operation)
  (:import-from #:aws-sdk/api)
  (:import-from #:aws-sdk/request)
  (:import-from #:aws-sdk/error))
(common-lisp:in-package #:aws-sdk/services/rds/api)
(common-lisp:progn
 (common-lisp:defclass rds-request (aws-sdk/request:request) common-lisp:nil
                       (:default-initargs :service "rds"))
 (common-lisp:export 'rds-request))
(common-lisp:progn
 (common-lisp:define-condition rds-error
     (aws-sdk/error:aws-error)
     common-lisp:nil)
 (common-lisp:export 'rds-error))
(common-lisp:defvar *error-map*
  '(("AuthorizationAlreadyExistsFault" . authorization-already-exists-fault)
    ("AuthorizationNotFoundFault" . authorization-not-found-fault)
    ("AuthorizationQuotaExceededFault" . authorization-quota-exceeded-fault)
    ("BackupPolicyNotFoundFault" . backup-policy-not-found-fault)
    ("BlueGreenDeploymentAlreadyExistsFault"
     . blue-green-deployment-already-exists-fault)
    ("BlueGreenDeploymentNotFoundFault"
     . blue-green-deployment-not-found-fault)
    ("CertificateNotFoundFault" . certificate-not-found-fault)
    ("CustomAvailabilityZoneNotFoundFault"
     . custom-availability-zone-not-found-fault)
    ("CustomDBEngineVersionAlreadyExistsFault"
     . custom-dbengine-version-already-exists-fault)
    ("CustomDBEngineVersionNotFoundFault"
     . custom-dbengine-version-not-found-fault)
    ("CustomDBEngineVersionQuotaExceededFault"
     . custom-dbengine-version-quota-exceeded-fault)
    ("DBClusterAlreadyExistsFault" . dbcluster-already-exists-fault)
    ("DBClusterBacktrackNotFoundFault" . dbcluster-backtrack-not-found-fault)
    ("DBClusterEndpointAlreadyExistsFault"
     . dbcluster-endpoint-already-exists-fault)
    ("DBClusterEndpointNotFoundFault" . dbcluster-endpoint-not-found-fault)
    ("DBClusterEndpointQuotaExceededFault"
     . dbcluster-endpoint-quota-exceeded-fault)
    ("DBClusterNotFoundFault" . dbcluster-not-found-fault)
    ("DBClusterParameterGroupNotFoundFault"
     . dbcluster-parameter-group-not-found-fault)
    ("DBClusterQuotaExceededFault" . dbcluster-quota-exceeded-fault)
    ("DBClusterRoleAlreadyExistsFault" . dbcluster-role-already-exists-fault)
    ("DBClusterRoleNotFoundFault" . dbcluster-role-not-found-fault)
    ("DBClusterRoleQuotaExceededFault" . dbcluster-role-quota-exceeded-fault)
    ("DBClusterSnapshotAlreadyExistsFault"
     . dbcluster-snapshot-already-exists-fault)
    ("DBClusterSnapshotNotFoundFault" . dbcluster-snapshot-not-found-fault)
    ("DBInstanceAlreadyExistsFault" . dbinstance-already-exists-fault)
    ("DBInstanceAutomatedBackupNotFoundFault"
     . dbinstance-automated-backup-not-found-fault)
    ("DBInstanceAutomatedBackupQuotaExceededFault"
     . dbinstance-automated-backup-quota-exceeded-fault)
    ("DBInstanceNotFoundFault" . dbinstance-not-found-fault)
    ("DBInstanceRoleAlreadyExistsFault" . dbinstance-role-already-exists-fault)
    ("DBInstanceRoleNotFoundFault" . dbinstance-role-not-found-fault)
    ("DBInstanceRoleQuotaExceededFault" . dbinstance-role-quota-exceeded-fault)
    ("DBLogFileNotFoundFault" . dblog-file-not-found-fault)
    ("DBParameterGroupAlreadyExistsFault"
     . dbparameter-group-already-exists-fault)
    ("DBParameterGroupNotFoundFault" . dbparameter-group-not-found-fault)
    ("DBParameterGroupQuotaExceededFault"
     . dbparameter-group-quota-exceeded-fault)
    ("DBProxyAlreadyExistsFault" . dbproxy-already-exists-fault)
    ("DBProxyEndpointAlreadyExistsFault"
     . dbproxy-endpoint-already-exists-fault)
    ("DBProxyEndpointNotFoundFault" . dbproxy-endpoint-not-found-fault)
    ("DBProxyEndpointQuotaExceededFault"
     . dbproxy-endpoint-quota-exceeded-fault)
    ("DBProxyNotFoundFault" . dbproxy-not-found-fault)
    ("DBProxyQuotaExceededFault" . dbproxy-quota-exceeded-fault)
    ("DBProxyTargetAlreadyRegisteredFault"
     . dbproxy-target-already-registered-fault)
    ("DBProxyTargetGroupNotFoundFault" . dbproxy-target-group-not-found-fault)
    ("DBProxyTargetNotFoundFault" . dbproxy-target-not-found-fault)
    ("DBSecurityGroupAlreadyExistsFault"
     . dbsecurity-group-already-exists-fault)
    ("DBSecurityGroupNotFoundFault" . dbsecurity-group-not-found-fault)
    ("DBSecurityGroupNotSupportedFault" . dbsecurity-group-not-supported-fault)
    ("DBSecurityGroupQuotaExceededFault"
     . dbsecurity-group-quota-exceeded-fault)
    ("DBSnapshotAlreadyExistsFault" . dbsnapshot-already-exists-fault)
    ("DBSnapshotNotFoundFault" . dbsnapshot-not-found-fault)
    ("DBSubnetGroupAlreadyExistsFault" . dbsubnet-group-already-exists-fault)
    ("DBSubnetGroupDoesNotCoverEnoughAZs"
     . dbsubnet-group-does-not-cover-enough-azs)
    ("DBSubnetGroupNotAllowedFault" . dbsubnet-group-not-allowed-fault)
    ("DBSubnetGroupNotFoundFault" . dbsubnet-group-not-found-fault)
    ("DBSubnetGroupQuotaExceededFault" . dbsubnet-group-quota-exceeded-fault)
    ("DBSubnetQuotaExceededFault" . dbsubnet-quota-exceeded-fault)
    ("DBUpgradeDependencyFailureFault" . dbupgrade-dependency-failure-fault)
    ("DomainNotFoundFault" . domain-not-found-fault)
    ("Ec2ImagePropertiesNotSupportedFault"
     . ec2image-properties-not-supported-fault)
    ("EventSubscriptionQuotaExceededFault"
     . event-subscription-quota-exceeded-fault)
    ("ExportTaskAlreadyExistsFault" . export-task-already-exists-fault)
    ("ExportTaskNotFoundFault" . export-task-not-found-fault)
    ("GlobalClusterAlreadyExistsFault" . global-cluster-already-exists-fault)
    ("GlobalClusterNotFoundFault" . global-cluster-not-found-fault)
    ("GlobalClusterQuotaExceededFault" . global-cluster-quota-exceeded-fault)
    ("IamRoleMissingPermissionsFault" . iam-role-missing-permissions-fault)
    ("IamRoleNotFoundFault" . iam-role-not-found-fault)
    ("InstanceQuotaExceededFault" . instance-quota-exceeded-fault)
    ("InsufficientAvailableIPsInSubnetFault"
     . insufficient-available-ips-in-subnet-fault)
    ("InsufficientDBClusterCapacityFault"
     . insufficient-dbcluster-capacity-fault)
    ("InsufficientDBInstanceCapacityFault"
     . insufficient-dbinstance-capacity-fault)
    ("InsufficientStorageClusterCapacityFault"
     . insufficient-storage-cluster-capacity-fault)
    ("InvalidBlueGreenDeploymentStateFault"
     . invalid-blue-green-deployment-state-fault)
    ("InvalidCustomDBEngineVersionStateFault"
     . invalid-custom-dbengine-version-state-fault)
    ("InvalidDBClusterCapacityFault" . invalid-dbcluster-capacity-fault)
    ("InvalidDBClusterEndpointStateFault"
     . invalid-dbcluster-endpoint-state-fault)
    ("InvalidDBClusterSnapshotStateFault"
     . invalid-dbcluster-snapshot-state-fault)
    ("InvalidDBClusterStateFault" . invalid-dbcluster-state-fault)
    ("InvalidDBInstanceAutomatedBackupStateFault"
     . invalid-dbinstance-automated-backup-state-fault)
    ("InvalidDBInstanceStateFault" . invalid-dbinstance-state-fault)
    ("InvalidDBParameterGroupStateFault"
     . invalid-dbparameter-group-state-fault)
    ("InvalidDBProxyEndpointStateFault" . invalid-dbproxy-endpoint-state-fault)
    ("InvalidDBProxyStateFault" . invalid-dbproxy-state-fault)
    ("InvalidDBSecurityGroupStateFault" . invalid-dbsecurity-group-state-fault)
    ("InvalidDBSnapshotStateFault" . invalid-dbsnapshot-state-fault)
    ("InvalidDBSubnetGroupFault" . invalid-dbsubnet-group-fault)
    ("InvalidDBSubnetGroupStateFault" . invalid-dbsubnet-group-state-fault)
    ("InvalidDBSubnetStateFault" . invalid-dbsubnet-state-fault)
    ("InvalidEventSubscriptionStateFault"
     . invalid-event-subscription-state-fault)
    ("InvalidExportOnlyFault" . invalid-export-only-fault)
    ("InvalidExportSourceStateFault" . invalid-export-source-state-fault)
    ("InvalidExportTaskStateFault" . invalid-export-task-state-fault)
    ("InvalidGlobalClusterStateFault" . invalid-global-cluster-state-fault)
    ("InvalidOptionGroupStateFault" . invalid-option-group-state-fault)
    ("InvalidRestoreFault" . invalid-restore-fault)
    ("InvalidS3BucketFault" . invalid-s3bucket-fault)
    ("InvalidSubnet" . invalid-subnet)
    ("InvalidVPCNetworkStateFault" . invalid-vpcnetwork-state-fault)
    ("KMSKeyNotAccessibleFault" . kmskey-not-accessible-fault)
    ("NetworkTypeNotSupported" . network-type-not-supported)
    ("OptionGroupAlreadyExistsFault" . option-group-already-exists-fault)
    ("OptionGroupNotFoundFault" . option-group-not-found-fault)
    ("OptionGroupQuotaExceededFault" . option-group-quota-exceeded-fault)
    ("PointInTimeRestoreNotEnabledFault"
     . point-in-time-restore-not-enabled-fault)
    ("ProvisionedIopsNotAvailableInAZFault"
     . provisioned-iops-not-available-in-azfault)
    ("ReservedDBInstanceAlreadyExistsFault"
     . reserved-dbinstance-already-exists-fault)
    ("ReservedDBInstanceNotFoundFault" . reserved-dbinstance-not-found-fault)
    ("ReservedDBInstanceQuotaExceededFault"
     . reserved-dbinstance-quota-exceeded-fault)
    ("ReservedDBInstancesOfferingNotFoundFault"
     . reserved-dbinstances-offering-not-found-fault)
    ("ResourceNotFoundFault" . resource-not-found-fault)
    ("SNSInvalidTopicFault" . snsinvalid-topic-fault)
    ("SNSNoAuthorizationFault" . snsno-authorization-fault)
    ("SNSTopicArnNotFoundFault" . snstopic-arn-not-found-fault)
    ("SharedSnapshotQuotaExceededFault" . shared-snapshot-quota-exceeded-fault)
    ("SnapshotQuotaExceededFault" . snapshot-quota-exceeded-fault)
    ("SourceClusterNotSupportedFault" . source-cluster-not-supported-fault)
    ("SourceDatabaseNotSupportedFault" . source-database-not-supported-fault)
    ("SourceNotFoundFault" . source-not-found-fault)
    ("StorageQuotaExceededFault" . storage-quota-exceeded-fault)
    ("StorageTypeNotSupportedFault" . storage-type-not-supported-fault)
    ("SubnetAlreadyInUse" . subnet-already-in-use)
    ("SubscriptionAlreadyExistFault" . subscription-already-exist-fault)
    ("SubscriptionCategoryNotFoundFault"
     . subscription-category-not-found-fault)
    ("SubscriptionNotFoundFault" . subscription-not-found-fault)))
(common-lisp:progn
 (common-lisp:defstruct
     (account-attributes-message (:copier common-lisp:nil)
      (:conc-name "struct-shape-account-attributes-message-"))
   (account-quotas common-lisp:nil :type
    (common-lisp:or account-quota-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'account-attributes-message
                    'make-account-attributes-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          account-attributes-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          account-attributes-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-quotas))
      (common-lisp:list
       (common-lisp:cons "AccountQuotas"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          account-attributes-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (account-quota (:copier common-lisp:nil)
      (:conc-name "struct-shape-account-quota-"))
   (account-quota-name common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (used common-lisp:nil :type (common-lisp:or long common-lisp:null))
   (max common-lisp:nil :type (common-lisp:or long common-lisp:null)))
 (common-lisp:export (common-lisp:list 'account-quota 'make-account-quota))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input account-quota))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input account-quota))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-quota-name))
      (common-lisp:list
       (common-lisp:cons "AccountQuotaName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'used))
      (common-lisp:list
       (common-lisp:cons "Used"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max))
      (common-lisp:list
       (common-lisp:cons "Max"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input account-quota))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype account-quota-list ()
   '(trivial-types:proper-list account-quota))
 (common-lisp:defun |make-account-quota-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list account-quota))
   aws-sdk/generator/shape::members))
(common-lisp:deftype activity-stream-mode () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype activity-stream-mode-list ()
   '(trivial-types:proper-list string))
 (common-lisp:defun |make-activity-stream-mode-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list string))
   aws-sdk/generator/shape::members))
(common-lisp:deftype activity-stream-policy-status () 'common-lisp:string)
(common-lisp:deftype activity-stream-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (add-role-to-dbcluster-message (:copier common-lisp:nil)
      (:conc-name "struct-shape-add-role-to-dbcluster-message-"))
   (dbcluster-identifier
    (common-lisp:error ":dbcluster-identifier is required") :type
    (common-lisp:or string common-lisp:null))
   (role-arn (common-lisp:error ":role-arn is required") :type
    (common-lisp:or string common-lisp:null))
   (feature-name common-lisp:nil :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'add-role-to-dbcluster-message
                    'make-add-role-to-dbcluster-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          add-role-to-dbcluster-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          add-role-to-dbcluster-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dbcluster-identifier))
      (common-lisp:list
       (common-lisp:cons "DBClusterIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "RoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'feature-name))
      (common-lisp:list
       (common-lisp:cons "FeatureName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          add-role-to-dbcluster-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (add-role-to-dbinstance-message (:copier common-lisp:nil)
      (:conc-name "struct-shape-add-role-to-dbinstance-message-"))
   (dbinstance-identifier
    (common-lisp:error ":dbinstance-identifier is required") :type
    (common-lisp:or string common-lisp:null))
   (role-arn (common-lisp:error ":role-arn is required") :type
    (common-lisp:or string common-lisp:null))
   (feature-name (common-lisp:error ":feature-name is required") :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'add-role-to-dbinstance-message
                    'make-add-role-to-dbinstance-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          add-role-to-dbinstance-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          add-role-to-dbinstance-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dbinstance-identifier))
      (common-lisp:list
       (common-lisp:cons "DBInstanceIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "RoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'feature-name))
      (common-lisp:list
       (common-lisp:cons "FeatureName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          add-role-to-dbinstance-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (add-source-identifier-to-subscription-message (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-add-source-identifier-to-subscription-message-"))
   (subscription-name (common-lisp:error ":subscription-name is required")
    :type (common-lisp:or string common-lisp:null))
   (source-identifier (common-lisp:error ":source-identifier is required")
    :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'add-source-identifier-to-subscription-message
                    'make-add-source-identifier-to-subscription-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          add-source-identifier-to-subscription-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          add-source-identifier-to-subscription-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subscription-name))
      (common-lisp:list
       (common-lisp:cons "SubscriptionName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-identifier))
      (common-lisp:list
       (common-lisp:cons "SourceIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          add-source-identifier-to-subscription-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (add-source-identifier-to-subscription-result (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-add-source-identifier-to-subscription-result-"))
   (event-subscription common-lisp:nil :type
    (common-lisp:or event-subscription common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'add-source-identifier-to-subscription-result
                    'make-add-source-identifier-to-subscription-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          add-source-identifier-to-subscription-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          add-source-identifier-to-subscription-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'event-subscription))
      (common-lisp:list
       (common-lisp:cons "EventSubscription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          add-source-identifier-to-subscription-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (add-tags-to-resource-message (:copier common-lisp:nil)
      (:conc-name "struct-shape-add-tags-to-resource-message-"))
   (resource-name (common-lisp:error ":resource-name is required") :type
    (common-lisp:or string common-lisp:null))
   (tags (common-lisp:error ":tags is required") :type
    (common-lisp:or tag-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'add-tags-to-resource-message
                    'make-add-tags-to-resource-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          add-tags-to-resource-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          add-tags-to-resource-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-name))
      (common-lisp:list
       (common-lisp:cons "ResourceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          add-tags-to-resource-message))
   common-lisp:nil))
(common-lisp:deftype apply-method () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (apply-pending-maintenance-action-message (:copier common-lisp:nil)
      (:conc-name "struct-shape-apply-pending-maintenance-action-message-"))
   (resource-identifier (common-lisp:error ":resource-identifier is required")
    :type (common-lisp:or string common-lisp:null))
   (apply-action (common-lisp:error ":apply-action is required") :type
    (common-lisp:or string common-lisp:null))
   (opt-in-type (common-lisp:error ":opt-in-type is required") :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'apply-pending-maintenance-action-message
                    'make-apply-pending-maintenance-action-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          apply-pending-maintenance-action-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          apply-pending-maintenance-action-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-identifier))
      (common-lisp:list
       (common-lisp:cons "ResourceIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'apply-action))
      (common-lisp:list
       (common-lisp:cons "ApplyAction"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'opt-in-type))
      (common-lisp:list
       (common-lisp:cons "OptInType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          apply-pending-maintenance-action-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (apply-pending-maintenance-action-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-apply-pending-maintenance-action-result-"))
   (resource-pending-maintenance-actions common-lisp:nil :type
    (common-lisp:or resource-pending-maintenance-actions common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'apply-pending-maintenance-action-result
                    'make-apply-pending-maintenance-action-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          apply-pending-maintenance-action-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          apply-pending-maintenance-action-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'resource-pending-maintenance-actions))
      (common-lisp:list
       (common-lisp:cons "ResourcePendingMaintenanceActions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          apply-pending-maintenance-action-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype attribute-value-list ()
   '(trivial-types:proper-list string))
 (common-lisp:defun |make-attribute-value-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list string))
   aws-sdk/generator/shape::members))
(common-lisp:deftype audit-policy-state () 'common-lisp:string)
(common-lisp:deftype auth-scheme () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition authorization-already-exists-fault
     (rds-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'authorization-already-exists-fault)))
(common-lisp:progn
 (common-lisp:define-condition authorization-not-found-fault
     (rds-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'authorization-not-found-fault)))
(common-lisp:progn
 (common-lisp:define-condition authorization-quota-exceeded-fault
     (rds-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'authorization-quota-exceeded-fault)))
(common-lisp:progn
 (common-lisp:defstruct
     (authorize-dbsecurity-group-ingress-message (:copier common-lisp:nil)
      (:conc-name "struct-shape-authorize-dbsecurity-group-ingress-message-"))
   (dbsecurity-group-name
    (common-lisp:error ":dbsecurity-group-name is required") :type
    (common-lisp:or string common-lisp:null))
   (cidrip common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (ec2security-group-name common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (ec2security-group-id common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (ec2security-group-owner-id common-lisp:nil :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'authorize-dbsecurity-group-ingress-message
                    'make-authorize-dbsecurity-group-ingress-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          authorize-dbsecurity-group-ingress-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          authorize-dbsecurity-group-ingress-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dbsecurity-group-name))
      (common-lisp:list
       (common-lisp:cons "DBSecurityGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cidrip))
      (common-lisp:list
       (common-lisp:cons "CIDRIP"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'ec2security-group-name))
      (common-lisp:list
       (common-lisp:cons "EC2SecurityGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'ec2security-group-id))
      (common-lisp:list
       (common-lisp:cons "EC2SecurityGroupId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'ec2security-group-owner-id))
      (common-lisp:list
       (common-lisp:cons "EC2SecurityGroupOwnerId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          authorize-dbsecurity-group-ingress-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (authorize-dbsecurity-group-ingress-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-authorize-dbsecurity-group-ingress-result-"))
   (dbsecurity-group common-lisp:nil :type
    (common-lisp:or dbsecurity-group common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'authorize-dbsecurity-group-ingress-result
                    'make-authorize-dbsecurity-group-ingress-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          authorize-dbsecurity-group-ingress-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          authorize-dbsecurity-group-ingress-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dbsecurity-group))
      (common-lisp:list
       (common-lisp:cons "DBSecurityGroup"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          authorize-dbsecurity-group-ingress-result))
   common-lisp:nil))
(common-lisp:deftype automation-mode () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (availability-zone (:copier common-lisp:nil)
      (:conc-name "struct-shape-availability-zone-"))
   (name common-lisp:nil :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'availability-zone 'make-availability-zone))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input availability-zone))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input availability-zone))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input availability-zone))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype availability-zone-list ()
   '(trivial-types:proper-list availability-zone))
 (common-lisp:defun |make-availability-zone-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list availability-zone))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype availability-zones ()
   '(trivial-types:proper-list string))
 (common-lisp:defun |make-availability-zones|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list string))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (available-processor-feature (:copier common-lisp:nil)
      (:conc-name "struct-shape-available-processor-feature-"))
   (name common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (default-value common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (allowed-values common-lisp:nil :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'available-processor-feature
                    'make-available-processor-feature))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          available-processor-feature))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          available-processor-feature))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'default-value))
      (common-lisp:list
       (common-lisp:cons "DefaultValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'allowed-values))
      (common-lisp:list
       (common-lisp:cons "AllowedValues"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          available-processor-feature))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype available-processor-feature-list ()
   '(trivial-types:proper-list available-processor-feature))
 (common-lisp:defun |make-available-processor-feature-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            available-processor-feature))
   aws-sdk/generator/shape::members))
(common-lisp:deftype aws-backup-recovery-point-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (backtrack-dbcluster-message (:copier common-lisp:nil)
      (:conc-name "struct-shape-backtrack-dbcluster-message-"))
   (dbcluster-identifier
    (common-lisp:error ":dbcluster-identifier is required") :type
    (common-lisp:or string common-lisp:null))
   (backtrack-to (common-lisp:error ":backtrack-to is required") :type
    (common-lisp:or tstamp common-lisp:null))
   (force common-lisp:nil :type
    (common-lisp:or boolean-optional common-lisp:null))
   (use-earliest-time-on-point-in-time-unavailable common-lisp:nil :type
    (common-lisp:or boolean-optional common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'backtrack-dbcluster-message
                    'make-backtrack-dbcluster-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          backtrack-dbcluster-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          backtrack-dbcluster-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dbcluster-identifier))
      (common-lisp:list
       (common-lisp:cons "DBClusterIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'backtrack-to))
      (common-lisp:list
       (common-lisp:cons "BacktrackTo"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'force))
      (common-lisp:list
       (common-lisp:cons "Force"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'use-earliest-time-on-point-in-time-unavailable))
      (common-lisp:list
       (common-lisp:cons "UseEarliestTimeOnPointInTimeUnavailable"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          backtrack-dbcluster-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition backup-policy-not-found-fault
     (rds-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'backup-policy-not-found-fault)))
(common-lisp:progn
 (common-lisp:defstruct
     (blue-green-deployment (:copier common-lisp:nil)
      (:conc-name "struct-shape-blue-green-deployment-"))
   (blue-green-deployment-identifier common-lisp:nil :type
    (common-lisp:or blue-green-deployment-identifier common-lisp:null))
   (blue-green-deployment-name common-lisp:nil :type
    (common-lisp:or blue-green-deployment-name common-lisp:null))
   (source common-lisp:nil :type
    (common-lisp:or database-arn common-lisp:null))
   (target common-lisp:nil :type
    (common-lisp:or database-arn common-lisp:null))
   (switchover-details common-lisp:nil :type
    (common-lisp:or switchover-detail-list common-lisp:null))
   (tasks common-lisp:nil :type
    (common-lisp:or blue-green-deployment-task-list common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or blue-green-deployment-status common-lisp:null))
   (status-details common-lisp:nil :type
    (common-lisp:or blue-green-deployment-status-details common-lisp:null))
   (create-time common-lisp:nil :type (common-lisp:or tstamp common-lisp:null))
   (delete-time common-lisp:nil :type (common-lisp:or tstamp common-lisp:null))
   (tag-list common-lisp:nil :type (common-lisp:or tag-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'blue-green-deployment 'make-blue-green-deployment))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          blue-green-deployment))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          blue-green-deployment))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'blue-green-deployment-identifier))
      (common-lisp:list
       (common-lisp:cons "BlueGreenDeploymentIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'blue-green-deployment-name))
      (common-lisp:list
       (common-lisp:cons "BlueGreenDeploymentName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source))
      (common-lisp:list
       (common-lisp:cons "Source"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target))
      (common-lisp:list
       (common-lisp:cons "Target"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'switchover-details))
      (common-lisp:list
       (common-lisp:cons "SwitchoverDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tasks))
      (common-lisp:list
       (common-lisp:cons "Tasks"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status-details))
      (common-lisp:list
       (common-lisp:cons "StatusDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'create-time))
      (common-lisp:list
       (common-lisp:cons "CreateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'delete-time))
      (common-lisp:list
       (common-lisp:cons "DeleteTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tag-list))
      (common-lisp:list
       (common-lisp:cons "TagList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          blue-green-deployment))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition blue-green-deployment-already-exists-fault
     (rds-error)
     common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'blue-green-deployment-already-exists-fault)))
(common-lisp:deftype blue-green-deployment-identifier () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype blue-green-deployment-list ()
   '(trivial-types:proper-list blue-green-deployment))
 (common-lisp:defun |make-blue-green-deployment-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list blue-green-deployment))
   aws-sdk/generator/shape::members))
(common-lisp:deftype blue-green-deployment-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition blue-green-deployment-not-found-fault
     (rds-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'blue-green-deployment-not-found-fault)))
(common-lisp:deftype blue-green-deployment-status () 'common-lisp:string)
(common-lisp:deftype blue-green-deployment-status-details ()
  'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (blue-green-deployment-task (:copier common-lisp:nil)
      (:conc-name "struct-shape-blue-green-deployment-task-"))
   (name common-lisp:nil :type
    (common-lisp:or blue-green-deployment-task-name common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or blue-green-deployment-task-status common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'blue-green-deployment-task
                    'make-blue-green-deployment-task))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          blue-green-deployment-task))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          blue-green-deployment-task))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          blue-green-deployment-task))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype blue-green-deployment-task-list ()
   '(trivial-types:proper-list blue-green-deployment-task))
 (common-lisp:defun |make-blue-green-deployment-task-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            blue-green-deployment-task))
   aws-sdk/generator/shape::members))
(common-lisp:deftype blue-green-deployment-task-name () 'common-lisp:string)
(common-lisp:deftype blue-green-deployment-task-status () 'common-lisp:string)
(common-lisp:deftype boolean () 'common-lisp:boolean)
(common-lisp:deftype boolean-optional () 'common-lisp:boolean)
(common-lisp:deftype bucket-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype cacertificate-identifiers-list ()
   '(trivial-types:proper-list string))
 (common-lisp:defun |make-cacertificate-identifiers-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list string))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (cancel-export-task-message (:copier common-lisp:nil)
      (:conc-name "struct-shape-cancel-export-task-message-"))
   (export-task-identifier
    (common-lisp:error ":export-task-identifier is required") :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'cancel-export-task-message
                    'make-cancel-export-task-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          cancel-export-task-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          cancel-export-task-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'export-task-identifier))
      (common-lisp:list
       (common-lisp:cons "ExportTaskIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          cancel-export-task-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (certificate (:copier common-lisp:nil)
      (:conc-name "struct-shape-certificate-"))
   (certificate-identifier common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (certificate-type common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (thumbprint common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (valid-from common-lisp:nil :type (common-lisp:or tstamp common-lisp:null))
   (valid-till common-lisp:nil :type (common-lisp:or tstamp common-lisp:null))
   (certificate-arn common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (customer-override common-lisp:nil :type
    (common-lisp:or boolean-optional common-lisp:null))
   (customer-override-valid-till common-lisp:nil :type
    (common-lisp:or tstamp common-lisp:null)))
 (common-lisp:export (common-lisp:list 'certificate 'make-certificate))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input certificate))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input certificate))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'certificate-identifier))
      (common-lisp:list
       (common-lisp:cons "CertificateIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'certificate-type))
      (common-lisp:list
       (common-lisp:cons "CertificateType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'thumbprint))
      (common-lisp:list
       (common-lisp:cons "Thumbprint"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'valid-from))
      (common-lisp:list
       (common-lisp:cons "ValidFrom"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'valid-till))
      (common-lisp:list
       (common-lisp:cons "ValidTill"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'certificate-arn))
      (common-lisp:list
       (common-lisp:cons "CertificateArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'customer-override))
      (common-lisp:list
       (common-lisp:cons "CustomerOverride"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'customer-override-valid-till))
      (common-lisp:list
       (common-lisp:cons "CustomerOverrideValidTill"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input certificate))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (certificate-details (:copier common-lisp:nil)
      (:conc-name "struct-shape-certificate-details-"))
   (caidentifier common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (valid-till common-lisp:nil :type (common-lisp:or tstamp common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'certificate-details 'make-certificate-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input certificate-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input certificate-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'caidentifier))
      (common-lisp:list
       (common-lisp:cons "CAIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'valid-till))
      (common-lisp:list
       (common-lisp:cons "ValidTill"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input certificate-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype certificate-list ()
   '(trivial-types:proper-list certificate))
 (common-lisp:defun |make-certificate-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list certificate))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (certificate-message (:copier common-lisp:nil)
      (:conc-name "struct-shape-certificate-message-"))
   (certificates common-lisp:nil :type
    (common-lisp:or certificate-list common-lisp:null))
   (marker common-lisp:nil :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'certificate-message 'make-certificate-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input certificate-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input certificate-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'certificates))
      (common-lisp:list
       (common-lisp:cons "Certificates"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input certificate-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition certificate-not-found-fault
     (rds-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'certificate-not-found-fault)))
(common-lisp:progn
 (common-lisp:defstruct
     (character-set (:copier common-lisp:nil)
      (:conc-name "struct-shape-character-set-"))
   (character-set-name common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (character-set-description common-lisp:nil :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export (common-lisp:list 'character-set 'make-character-set))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input character-set))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input character-set))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'character-set-name))
      (common-lisp:list
       (common-lisp:cons "CharacterSetName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'character-set-description))
      (common-lisp:list
       (common-lisp:cons "CharacterSetDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input character-set))
   common-lisp:nil))
(common-lisp:deftype client-password-auth-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (cloudwatch-logs-export-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-cloudwatch-logs-export-configuration-"))
   (enable-log-types common-lisp:nil :type
    (common-lisp:or log-type-list common-lisp:null))
   (disable-log-types common-lisp:nil :type
    (common-lisp:or log-type-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'cloudwatch-logs-export-configuration
                    'make-cloudwatch-logs-export-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          cloudwatch-logs-export-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          cloudwatch-logs-export-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'enable-log-types))
      (common-lisp:list
       (common-lisp:cons "EnableLogTypes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'disable-log-types))
      (common-lisp:list
       (common-lisp:cons "DisableLogTypes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          cloudwatch-logs-export-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (cluster-pending-modified-values (:copier common-lisp:nil)
      (:conc-name "struct-shape-cluster-pending-modified-values-"))
   (pending-cloudwatch-logs-exports common-lisp:nil :type
    (common-lisp:or pending-cloudwatch-logs-exports common-lisp:null))
   (dbcluster-identifier common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (master-user-password common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (iamdatabase-authentication-enabled common-lisp:nil :type
    (common-lisp:or boolean-optional common-lisp:null))
   (engine-version common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (backup-retention-period common-lisp:nil :type
    (common-lisp:or integer-optional common-lisp:null))
   (allocated-storage common-lisp:nil :type
    (common-lisp:or integer-optional common-lisp:null))
   (iops common-lisp:nil :type
    (common-lisp:or integer-optional common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'cluster-pending-modified-values
                    'make-cluster-pending-modified-values))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          cluster-pending-modified-values))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          cluster-pending-modified-values))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'pending-cloudwatch-logs-exports))
      (common-lisp:list
       (common-lisp:cons "PendingCloudwatchLogsExports"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dbcluster-identifier))
      (common-lisp:list
       (common-lisp:cons "DBClusterIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'master-user-password))
      (common-lisp:list
       (common-lisp:cons "MasterUserPassword"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'iamdatabase-authentication-enabled))
      (common-lisp:list
       (common-lisp:cons "IAMDatabaseAuthenticationEnabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'engine-version))
      (common-lisp:list
       (common-lisp:cons "EngineVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'backup-retention-period))
      (common-lisp:list
       (common-lisp:cons "BackupRetentionPeriod"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'allocated-storage))
      (common-lisp:list
       (common-lisp:cons "AllocatedStorage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'iops))
      (common-lisp:list
       (common-lisp:cons "Iops"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          cluster-pending-modified-values))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (connection-pool-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-connection-pool-configuration-"))
   (max-connections-percent common-lisp:nil :type
    (common-lisp:or integer-optional common-lisp:null))
   (max-idle-connections-percent common-lisp:nil :type
    (common-lisp:or integer-optional common-lisp:null))
   (connection-borrow-timeout common-lisp:nil :type
    (common-lisp:or integer-optional common-lisp:null))
   (session-pinning-filters common-lisp:nil :type
    (common-lisp:or string-list common-lisp:null))
   (init-query common-lisp:nil :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'connection-pool-configuration
                    'make-connection-pool-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          connection-pool-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          connection-pool-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'max-connections-percent))
      (common-lisp:list
       (common-lisp:cons "MaxConnectionsPercent"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'max-idle-connections-percent))
      (common-lisp:list
       (common-lisp:cons "MaxIdleConnectionsPercent"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'connection-borrow-timeout))
      (common-lisp:list
       (common-lisp:cons "ConnectionBorrowTimeout"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'session-pinning-filters))
      (common-lisp:list
       (common-lisp:cons "SessionPinningFilters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'init-query))
      (common-lisp:list
       (common-lisp:cons "InitQuery"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          connection-pool-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (connection-pool-configuration-info (:copier common-lisp:nil)
      (:conc-name "struct-shape-connection-pool-configuration-info-"))
   (max-connections-percent common-lisp:nil :type
    (common-lisp:or integer common-lisp:null))
   (max-idle-connections-percent common-lisp:nil :type
    (common-lisp:or integer common-lisp:null))
   (connection-borrow-timeout common-lisp:nil :type
    (common-lisp:or integer common-lisp:null))
   (session-pinning-filters common-lisp:nil :type
    (common-lisp:or string-list common-lisp:null))
   (init-query common-lisp:nil :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'connection-pool-configuration-info
                    'make-connection-pool-configuration-info))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          connection-pool-configuration-info))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          connection-pool-configuration-info))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'max-connections-percent))
      (common-lisp:list
       (common-lisp:cons "MaxConnectionsPercent"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'max-idle-connections-percent))
      (common-lisp:list
       (common-lisp:cons "MaxIdleConnectionsPercent"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'connection-borrow-timeout))
      (common-lisp:list
       (common-lisp:cons "ConnectionBorrowTimeout"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'session-pinning-filters))
      (common-lisp:list
       (common-lisp:cons "SessionPinningFilters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'init-query))
      (common-lisp:list
       (common-lisp:cons "InitQuery"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          connection-pool-configuration-info))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (copy-dbcluster-parameter-group-message (:copier common-lisp:nil)
      (:conc-name "struct-shape-copy-dbcluster-parameter-group-message-"))
   (source-dbcluster-parameter-group-identifier
    (common-lisp:error
     ":source-dbcluster-parameter-group-identifier is required")
    :type (common-lisp:or string common-lisp:null))
   (target-dbcluster-parameter-group-identifier
    (common-lisp:error
     ":target-dbcluster-parameter-group-identifier is required")
    :type (common-lisp:or string common-lisp:null))
   (target-dbcluster-parameter-group-description
    (common-lisp:error
     ":target-dbcluster-parameter-group-description is required")
    :type (common-lisp:or string common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'copy-dbcluster-parameter-group-message
                    'make-copy-dbcluster-parameter-group-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          copy-dbcluster-parameter-group-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          copy-dbcluster-parameter-group-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'source-dbcluster-parameter-group-identifier))
      (common-lisp:list
       (common-lisp:cons "SourceDBClusterParameterGroupIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'target-dbcluster-parameter-group-identifier))
      (common-lisp:list
       (common-lisp:cons "TargetDBClusterParameterGroupIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'target-dbcluster-parameter-group-description))
      (common-lisp:list
       (common-lisp:cons "TargetDBClusterParameterGroupDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          copy-dbcluster-parameter-group-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (copy-dbcluster-parameter-group-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-copy-dbcluster-parameter-group-result-"))
   (dbcluster-parameter-group common-lisp:nil :type
    (common-lisp:or dbcluster-parameter-group common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'copy-dbcluster-parameter-group-result
                    'make-copy-dbcluster-parameter-group-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          copy-dbcluster-parameter-group-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          copy-dbcluster-parameter-group-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dbcluster-parameter-group))
      (common-lisp:list
       (common-lisp:cons "DBClusterParameterGroup"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          copy-dbcluster-parameter-group-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (copy-dbcluster-snapshot-message (:copier common-lisp:nil)
      (:conc-name "struct-shape-copy-dbcluster-snapshot-message-"))
   (source-dbcluster-snapshot-identifier
    (common-lisp:error ":source-dbcluster-snapshot-identifier is required")
    :type (common-lisp:or string common-lisp:null))
   (target-dbcluster-snapshot-identifier
    (common-lisp:error ":target-dbcluster-snapshot-identifier is required")
    :type (common-lisp:or string common-lisp:null))
   (kms-key-id common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (pre-signed-url common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (copy-tags common-lisp:nil :type
    (common-lisp:or boolean-optional common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'copy-dbcluster-snapshot-message
                    'make-copy-dbcluster-snapshot-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          copy-dbcluster-snapshot-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          copy-dbcluster-snapshot-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'source-dbcluster-snapshot-identifier))
      (common-lisp:list
       (common-lisp:cons "SourceDBClusterSnapshotIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'target-dbcluster-snapshot-identifier))
      (common-lisp:list
       (common-lisp:cons "TargetDBClusterSnapshotIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kms-key-id))
      (common-lisp:list
       (common-lisp:cons "KmsKeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pre-signed-url))
      (common-lisp:list
       (common-lisp:cons "PreSignedUrl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'copy-tags))
      (common-lisp:list
       (common-lisp:cons "CopyTags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          copy-dbcluster-snapshot-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (copy-dbcluster-snapshot-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-copy-dbcluster-snapshot-result-"))
   (dbcluster-snapshot common-lisp:nil :type
    (common-lisp:or dbcluster-snapshot common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'copy-dbcluster-snapshot-result
                    'make-copy-dbcluster-snapshot-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          copy-dbcluster-snapshot-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          copy-dbcluster-snapshot-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dbcluster-snapshot))
      (common-lisp:list
       (common-lisp:cons "DBClusterSnapshot"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          copy-dbcluster-snapshot-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (copy-dbparameter-group-message (:copier common-lisp:nil)
      (:conc-name "struct-shape-copy-dbparameter-group-message-"))
   (source-dbparameter-group-identifier
    (common-lisp:error ":source-dbparameter-group-identifier is required")
    :type (common-lisp:or string common-lisp:null))
   (target-dbparameter-group-identifier
    (common-lisp:error ":target-dbparameter-group-identifier is required")
    :type (common-lisp:or string common-lisp:null))
   (target-dbparameter-group-description
    (common-lisp:error ":target-dbparameter-group-description is required")
    :type (common-lisp:or string common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'copy-dbparameter-group-message
                    'make-copy-dbparameter-group-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          copy-dbparameter-group-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          copy-dbparameter-group-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'source-dbparameter-group-identifier))
      (common-lisp:list
       (common-lisp:cons "SourceDBParameterGroupIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'target-dbparameter-group-identifier))
      (common-lisp:list
       (common-lisp:cons "TargetDBParameterGroupIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'target-dbparameter-group-description))
      (common-lisp:list
       (common-lisp:cons "TargetDBParameterGroupDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          copy-dbparameter-group-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (copy-dbparameter-group-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-copy-dbparameter-group-result-"))
   (dbparameter-group common-lisp:nil :type
    (common-lisp:or dbparameter-group common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'copy-dbparameter-group-result
                    'make-copy-dbparameter-group-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          copy-dbparameter-group-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          copy-dbparameter-group-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dbparameter-group))
      (common-lisp:list
       (common-lisp:cons "DBParameterGroup"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          copy-dbparameter-group-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (copy-dbsnapshot-message (:copier common-lisp:nil)
      (:conc-name "struct-shape-copy-dbsnapshot-message-"))
   (source-dbsnapshot-identifier
    (common-lisp:error ":source-dbsnapshot-identifier is required") :type
    (common-lisp:or string common-lisp:null))
   (target-dbsnapshot-identifier
    (common-lisp:error ":target-dbsnapshot-identifier is required") :type
    (common-lisp:or string common-lisp:null))
   (kms-key-id common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-list common-lisp:null))
   (copy-tags common-lisp:nil :type
    (common-lisp:or boolean-optional common-lisp:null))
   (pre-signed-url common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (option-group-name common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (target-custom-availability-zone common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (copy-option-group common-lisp:nil :type
    (common-lisp:or boolean-optional common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'copy-dbsnapshot-message 'make-copy-dbsnapshot-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          copy-dbsnapshot-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          copy-dbsnapshot-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'source-dbsnapshot-identifier))
      (common-lisp:list
       (common-lisp:cons "SourceDBSnapshotIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'target-dbsnapshot-identifier))
      (common-lisp:list
       (common-lisp:cons "TargetDBSnapshotIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kms-key-id))
      (common-lisp:list
       (common-lisp:cons "KmsKeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'copy-tags))
      (common-lisp:list
       (common-lisp:cons "CopyTags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pre-signed-url))
      (common-lisp:list
       (common-lisp:cons "PreSignedUrl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'option-group-name))
      (common-lisp:list
       (common-lisp:cons "OptionGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'target-custom-availability-zone))
      (common-lisp:list
       (common-lisp:cons "TargetCustomAvailabilityZone"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'copy-option-group))
      (common-lisp:list
       (common-lisp:cons "CopyOptionGroup"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          copy-dbsnapshot-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (copy-dbsnapshot-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-copy-dbsnapshot-result-"))
   (dbsnapshot common-lisp:nil :type
    (common-lisp:or dbsnapshot common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'copy-dbsnapshot-result 'make-copy-dbsnapshot-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          copy-dbsnapshot-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          copy-dbsnapshot-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dbsnapshot))
      (common-lisp:list
       (common-lisp:cons "DBSnapshot"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          copy-dbsnapshot-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (copy-option-group-message (:copier common-lisp:nil)
      (:conc-name "struct-shape-copy-option-group-message-"))
   (source-option-group-identifier
    (common-lisp:error ":source-option-group-identifier is required") :type
    (common-lisp:or string common-lisp:null))
   (target-option-group-identifier
    (common-lisp:error ":target-option-group-identifier is required") :type
    (common-lisp:or string common-lisp:null))
   (target-option-group-description
    (common-lisp:error ":target-option-group-description is required") :type
    (common-lisp:or string common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'copy-option-group-message
                    'make-copy-option-group-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          copy-option-group-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          copy-option-group-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'source-option-group-identifier))
      (common-lisp:list
       (common-lisp:cons "SourceOptionGroupIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'target-option-group-identifier))
      (common-lisp:list
       (common-lisp:cons "TargetOptionGroupIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'target-option-group-description))
      (common-lisp:list
       (common-lisp:cons "TargetOptionGroupDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          copy-option-group-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (copy-option-group-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-copy-option-group-result-"))
   (option-group common-lisp:nil :type
    (common-lisp:or option-group common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'copy-option-group-result 'make-copy-option-group-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          copy-option-group-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          copy-option-group-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'option-group))
      (common-lisp:list
       (common-lisp:cons "OptionGroup"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          copy-option-group-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-blue-green-deployment-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-blue-green-deployment-request-"))
   (blue-green-deployment-name
    (common-lisp:error ":blue-green-deployment-name is required") :type
    (common-lisp:or blue-green-deployment-name common-lisp:null))
   (source (common-lisp:error ":source is required") :type
    (common-lisp:or database-arn common-lisp:null))
   (target-engine-version common-lisp:nil :type
    (common-lisp:or target-engine-version common-lisp:null))
   (target-dbparameter-group-name common-lisp:nil :type
    (common-lisp:or target-dbparameter-group-name common-lisp:null))
   (target-dbcluster-parameter-group-name common-lisp:nil :type
    (common-lisp:or target-dbcluster-parameter-group-name common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-blue-green-deployment-request
                    'make-create-blue-green-deployment-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-blue-green-deployment-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-blue-green-deployment-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'blue-green-deployment-name))
      (common-lisp:list
       (common-lisp:cons "BlueGreenDeploymentName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source))
      (common-lisp:list
       (common-lisp:cons "Source"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'target-engine-version))
      (common-lisp:list
       (common-lisp:cons "TargetEngineVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'target-dbparameter-group-name))
      (common-lisp:list
       (common-lisp:cons "TargetDBParameterGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'target-dbcluster-parameter-group-name))
      (common-lisp:list
       (common-lisp:cons "TargetDBClusterParameterGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-blue-green-deployment-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-blue-green-deployment-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-blue-green-deployment-response-"))
   (blue-green-deployment common-lisp:nil :type
    (common-lisp:or blue-green-deployment common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-blue-green-deployment-response
                    'make-create-blue-green-deployment-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-blue-green-deployment-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-blue-green-deployment-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'blue-green-deployment))
      (common-lisp:list
       (common-lisp:cons "BlueGreenDeployment"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-blue-green-deployment-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-custom-dbengine-version-message (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-custom-dbengine-version-message-"))
   (engine (common-lisp:error ":engine is required") :type
    (common-lisp:or custom-engine-name common-lisp:null))
   (engine-version (common-lisp:error ":engine-version is required") :type
    (common-lisp:or custom-engine-version common-lisp:null))
   (database-installation-files-s3bucket-name common-lisp:nil :type
    (common-lisp:or bucket-name common-lisp:null))
   (database-installation-files-s3prefix common-lisp:nil :type
    (common-lisp:or string255 common-lisp:null))
   (image-id common-lisp:nil :type (common-lisp:or string255 common-lisp:null))
   (kmskey-id common-lisp:nil :type
    (common-lisp:or kms-key-id-or-arn common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or description common-lisp:null))
   (manifest common-lisp:nil :type
    (common-lisp:or custom-dbengine-version-manifest common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-custom-dbengine-version-message
                    'make-create-custom-dbengine-version-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-custom-dbengine-version-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-custom-dbengine-version-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'engine))
      (common-lisp:list
       (common-lisp:cons "Engine"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'engine-version))
      (common-lisp:list
       (common-lisp:cons "EngineVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'database-installation-files-s3bucket-name))
      (common-lisp:list
       (common-lisp:cons "DatabaseInstallationFilesS3BucketName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'database-installation-files-s3prefix))
      (common-lisp:list
       (common-lisp:cons "DatabaseInstallationFilesS3Prefix"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'image-id))
      (common-lisp:list
       (common-lisp:cons "ImageId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kmskey-id))
      (common-lisp:list
       (common-lisp:cons "KMSKeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'manifest))
      (common-lisp:list
       (common-lisp:cons "Manifest"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-custom-dbengine-version-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-dbcluster-endpoint-message (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-dbcluster-endpoint-message-"))
   (dbcluster-identifier
    (common-lisp:error ":dbcluster-identifier is required") :type
    (common-lisp:or string common-lisp:null))
   (dbcluster-endpoint-identifier
    (common-lisp:error ":dbcluster-endpoint-identifier is required") :type
    (common-lisp:or string common-lisp:null))
   (endpoint-type (common-lisp:error ":endpoint-type is required") :type
    (common-lisp:or string common-lisp:null))
   (static-members common-lisp:nil :type
    (common-lisp:or string-list common-lisp:null))
   (excluded-members common-lisp:nil :type
    (common-lisp:or string-list common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-dbcluster-endpoint-message
                    'make-create-dbcluster-endpoint-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-dbcluster-endpoint-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-dbcluster-endpoint-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dbcluster-identifier))
      (common-lisp:list
       (common-lisp:cons "DBClusterIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dbcluster-endpoint-identifier))
      (common-lisp:list
       (common-lisp:cons "DBClusterEndpointIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'endpoint-type))
      (common-lisp:list
       (common-lisp:cons "EndpointType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'static-members))
      (common-lisp:list
       (common-lisp:cons "StaticMembers"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'excluded-members))
      (common-lisp:list
       (common-lisp:cons "ExcludedMembers"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-dbcluster-endpoint-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-dbcluster-message (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-dbcluster-message-"))
   (availability-zones common-lisp:nil :type
    (common-lisp:or availability-zones common-lisp:null))
   (backup-retention-period common-lisp:nil :type
    (common-lisp:or integer-optional common-lisp:null))
   (character-set-name common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (database-name common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (dbcluster-identifier
    (common-lisp:error ":dbcluster-identifier is required") :type
    (common-lisp:or string common-lisp:null))
   (dbcluster-parameter-group-name common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (vpc-security-group-ids common-lisp:nil :type
    (common-lisp:or vpc-security-group-id-list common-lisp:null))
   (dbsubnet-group-name common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (engine (common-lisp:error ":engine is required") :type
    (common-lisp:or string common-lisp:null))
   (engine-version common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (port common-lisp:nil :type
    (common-lisp:or integer-optional common-lisp:null))
   (master-username common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (master-user-password common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (option-group-name common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (preferred-backup-window common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (preferred-maintenance-window common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (replication-source-identifier common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-list common-lisp:null))
   (storage-encrypted common-lisp:nil :type
    (common-lisp:or boolean-optional common-lisp:null))
   (kms-key-id common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (pre-signed-url common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (enable-iamdatabase-authentication common-lisp:nil :type
    (common-lisp:or boolean-optional common-lisp:null))
   (backtrack-window common-lisp:nil :type
    (common-lisp:or long-optional common-lisp:null))
   (enable-cloudwatch-logs-exports common-lisp:nil :type
    (common-lisp:or log-type-list common-lisp:null))
   (engine-mode common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (scaling-configuration common-lisp:nil :type
    (common-lisp:or scaling-configuration common-lisp:null))
   (deletion-protection common-lisp:nil :type
    (common-lisp:or boolean-optional common-lisp:null))
   (global-cluster-identifier common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (enable-http-endpoint common-lisp:nil :type
    (common-lisp:or boolean-optional common-lisp:null))
   (copy-tags-to-snapshot common-lisp:nil :type
    (common-lisp:or boolean-optional common-lisp:null))
   (domain common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (domain-iamrole-name common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (enable-global-write-forwarding common-lisp:nil :type
    (common-lisp:or boolean-optional common-lisp:null))
   (dbcluster-instance-class common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (allocated-storage common-lisp:nil :type
    (common-lisp:or integer-optional common-lisp:null))
   (storage-type common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (iops common-lisp:nil :type
    (common-lisp:or integer-optional common-lisp:null))
   (publicly-accessible common-lisp:nil :type
    (common-lisp:or boolean-optional common-lisp:null))
   (auto-minor-version-upgrade common-lisp:nil :type
    (common-lisp:or boolean-optional common-lisp:null))
   (monitoring-interval common-lisp:nil :type
    (common-lisp:or integer-optional common-lisp:null))
   (monitoring-role-arn common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (enable-performance-insights common-lisp:nil :type
    (common-lisp:or boolean-optional common-lisp:null))
   (performance-insights-kmskey-id common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (performance-insights-retention-period common-lisp:nil :type
    (common-lisp:or integer-optional common-lisp:null))
   (serverless-v2scaling-configuration common-lisp:nil :type
    (common-lisp:or serverless-v2scaling-configuration common-lisp:null))
   (network-type common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (dbsystem-id common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (manage-master-user-password common-lisp:nil :type
    (common-lisp:or boolean-optional common-lisp:null))
   (master-user-secret-kms-key-id common-lisp:nil :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-dbcluster-message 'make-create-dbcluster-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-dbcluster-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-dbcluster-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'availability-zones))
      (common-lisp:list
       (common-lisp:cons "AvailabilityZones"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'backup-retention-period))
      (common-lisp:list
       (common-lisp:cons "BackupRetentionPeriod"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'character-set-name))
      (common-lisp:list
       (common-lisp:cons "CharacterSetName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'database-name))
      (common-lisp:list
       (common-lisp:cons "DatabaseName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dbcluster-identifier))
      (common-lisp:list
       (common-lisp:cons "DBClusterIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dbcluster-parameter-group-name))
      (common-lisp:list
       (common-lisp:cons "DBClusterParameterGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'vpc-security-group-ids))
      (common-lisp:list
       (common-lisp:cons "VpcSecurityGroupIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dbsubnet-group-name))
      (common-lisp:list
       (common-lisp:cons "DBSubnetGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'engine))
      (common-lisp:list
       (common-lisp:cons "Engine"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'engine-version))
      (common-lisp:list
       (common-lisp:cons "EngineVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'port))
      (common-lisp:list
       (common-lisp:cons "Port"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'master-username))
      (common-lisp:list
       (common-lisp:cons "MasterUsername"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'master-user-password))
      (common-lisp:list
       (common-lisp:cons "MasterUserPassword"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'option-group-name))
      (common-lisp:list
       (common-lisp:cons "OptionGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'preferred-backup-window))
      (common-lisp:list
       (common-lisp:cons "PreferredBackupWindow"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'preferred-maintenance-window))
      (common-lisp:list
       (common-lisp:cons "PreferredMaintenanceWindow"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'replication-source-identifier))
      (common-lisp:list
       (common-lisp:cons "ReplicationSourceIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'storage-encrypted))
      (common-lisp:list
       (common-lisp:cons "StorageEncrypted"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kms-key-id))
      (common-lisp:list
       (common-lisp:cons "KmsKeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pre-signed-url))
      (common-lisp:list
       (common-lisp:cons "PreSignedUrl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'enable-iamdatabase-authentication))
      (common-lisp:list
       (common-lisp:cons "EnableIAMDatabaseAuthentication"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'backtrack-window))
      (common-lisp:list
       (common-lisp:cons "BacktrackWindow"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'enable-cloudwatch-logs-exports))
      (common-lisp:list
       (common-lisp:cons "EnableCloudwatchLogsExports"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'engine-mode))
      (common-lisp:list
       (common-lisp:cons "EngineMode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'scaling-configuration))
      (common-lisp:list
       (common-lisp:cons "ScalingConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'deletion-protection))
      (common-lisp:list
       (common-lisp:cons "DeletionProtection"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'global-cluster-identifier))
      (common-lisp:list
       (common-lisp:cons "GlobalClusterIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'enable-http-endpoint))
      (common-lisp:list
       (common-lisp:cons "EnableHttpEndpoint"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'copy-tags-to-snapshot))
      (common-lisp:list
       (common-lisp:cons "CopyTagsToSnapshot"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain))
      (common-lisp:list
       (common-lisp:cons "Domain"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-iamrole-name))
      (common-lisp:list
       (common-lisp:cons "DomainIAMRoleName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'enable-global-write-forwarding))
      (common-lisp:list
       (common-lisp:cons "EnableGlobalWriteForwarding"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dbcluster-instance-class))
      (common-lisp:list
       (common-lisp:cons "DBClusterInstanceClass"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'allocated-storage))
      (common-lisp:list
       (common-lisp:cons "AllocatedStorage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'storage-type))
      (common-lisp:list
       (common-lisp:cons "StorageType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'iops))
      (common-lisp:list
       (common-lisp:cons "Iops"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'publicly-accessible))
      (common-lisp:list
       (common-lisp:cons "PubliclyAccessible"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'auto-minor-version-upgrade))
      (common-lisp:list
       (common-lisp:cons "AutoMinorVersionUpgrade"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'monitoring-interval))
      (common-lisp:list
       (common-lisp:cons "MonitoringInterval"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'monitoring-role-arn))
      (common-lisp:list
       (common-lisp:cons "MonitoringRoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'enable-performance-insights))
      (common-lisp:list
       (common-lisp:cons "EnablePerformanceInsights"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'performance-insights-kmskey-id))
      (common-lisp:list
       (common-lisp:cons "PerformanceInsightsKMSKeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'performance-insights-retention-period))
      (common-lisp:list
       (common-lisp:cons "PerformanceInsightsRetentionPeriod"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'serverless-v2scaling-configuration))
      (common-lisp:list
       (common-lisp:cons "ServerlessV2ScalingConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'network-type))
      (common-lisp:list
       (common-lisp:cons "NetworkType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dbsystem-id))
      (common-lisp:list
       (common-lisp:cons "DBSystemId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'manage-master-user-password))
      (common-lisp:list
       (common-lisp:cons "ManageMasterUserPassword"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'master-user-secret-kms-key-id))
      (common-lisp:list
       (common-lisp:cons "MasterUserSecretKmsKeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-dbcluster-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-dbcluster-parameter-group-message (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-dbcluster-parameter-group-message-"))
   (dbcluster-parameter-group-name
    (common-lisp:error ":dbcluster-parameter-group-name is required") :type
    (common-lisp:or string common-lisp:null))
   (dbparameter-group-family
    (common-lisp:error ":dbparameter-group-family is required") :type
    (common-lisp:or string common-lisp:null))
   (description (common-lisp:error ":description is required") :type
    (common-lisp:or string common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-dbcluster-parameter-group-message
                    'make-create-dbcluster-parameter-group-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-dbcluster-parameter-group-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-dbcluster-parameter-group-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dbcluster-parameter-group-name))
      (common-lisp:list
       (common-lisp:cons "DBClusterParameterGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dbparameter-group-family))
      (common-lisp:list
       (common-lisp:cons "DBParameterGroupFamily"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-dbcluster-parameter-group-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-dbcluster-parameter-group-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-dbcluster-parameter-group-result-"))
   (dbcluster-parameter-group common-lisp:nil :type
    (common-lisp:or dbcluster-parameter-group common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-dbcluster-parameter-group-result
                    'make-create-dbcluster-parameter-group-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-dbcluster-parameter-group-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-dbcluster-parameter-group-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dbcluster-parameter-group))
      (common-lisp:list
       (common-lisp:cons "DBClusterParameterGroup"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-dbcluster-parameter-group-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-dbcluster-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-dbcluster-result-"))
   (dbcluster common-lisp:nil :type
    (common-lisp:or dbcluster common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-dbcluster-result 'make-create-dbcluster-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-dbcluster-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-dbcluster-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dbcluster))
      (common-lisp:list
       (common-lisp:cons "DBCluster"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-dbcluster-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-dbcluster-snapshot-message (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-dbcluster-snapshot-message-"))
   (dbcluster-snapshot-identifier
    (common-lisp:error ":dbcluster-snapshot-identifier is required") :type
    (common-lisp:or string common-lisp:null))
   (dbcluster-identifier
    (common-lisp:error ":dbcluster-identifier is required") :type
    (common-lisp:or string common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-dbcluster-snapshot-message
                    'make-create-dbcluster-snapshot-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-dbcluster-snapshot-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-dbcluster-snapshot-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dbcluster-snapshot-identifier))
      (common-lisp:list
       (common-lisp:cons "DBClusterSnapshotIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dbcluster-identifier))
      (common-lisp:list
       (common-lisp:cons "DBClusterIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-dbcluster-snapshot-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-dbcluster-snapshot-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-dbcluster-snapshot-result-"))
   (dbcluster-snapshot common-lisp:nil :type
    (common-lisp:or dbcluster-snapshot common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-dbcluster-snapshot-result
                    'make-create-dbcluster-snapshot-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-dbcluster-snapshot-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-dbcluster-snapshot-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dbcluster-snapshot))
      (common-lisp:list
       (common-lisp:cons "DBClusterSnapshot"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-dbcluster-snapshot-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-dbinstance-message (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-dbinstance-message-"))
   (dbname common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (dbinstance-identifier
    (common-lisp:error ":dbinstance-identifier is required") :type
    (common-lisp:or string common-lisp:null))
   (allocated-storage common-lisp:nil :type
    (common-lisp:or integer-optional common-lisp:null))
   (dbinstance-class (common-lisp:error ":dbinstance-class is required") :type
    (common-lisp:or string common-lisp:null))
   (engine (common-lisp:error ":engine is required") :type
    (common-lisp:or string common-lisp:null))
   (master-username common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (master-user-password common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (dbsecurity-groups common-lisp:nil :type
    (common-lisp:or dbsecurity-group-name-list common-lisp:null))
   (vpc-security-group-ids common-lisp:nil :type
    (common-lisp:or vpc-security-group-id-list common-lisp:null))
   (availability-zone common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (dbsubnet-group-name common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (preferred-maintenance-window common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (dbparameter-group-name common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (backup-retention-period common-lisp:nil :type
    (common-lisp:or integer-optional common-lisp:null))
   (preferred-backup-window common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (port common-lisp:nil :type
    (common-lisp:or integer-optional common-lisp:null))
   (multi-az common-lisp:nil :type
    (common-lisp:or boolean-optional common-lisp:null))
   (engine-version common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (auto-minor-version-upgrade common-lisp:nil :type
    (common-lisp:or boolean-optional common-lisp:null))
   (license-model common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (iops common-lisp:nil :type
    (common-lisp:or integer-optional common-lisp:null))
   (option-group-name common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (character-set-name common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (nchar-character-set-name common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (publicly-accessible common-lisp:nil :type
    (common-lisp:or boolean-optional common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-list common-lisp:null))
   (dbcluster-identifier common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (storage-type common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (tde-credential-arn common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (tde-credential-password common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (storage-encrypted common-lisp:nil :type
    (common-lisp:or boolean-optional common-lisp:null))
   (kms-key-id common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (domain common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (copy-tags-to-snapshot common-lisp:nil :type
    (common-lisp:or boolean-optional common-lisp:null))
   (monitoring-interval common-lisp:nil :type
    (common-lisp:or integer-optional common-lisp:null))
   (monitoring-role-arn common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (domain-iamrole-name common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (promotion-tier common-lisp:nil :type
    (common-lisp:or integer-optional common-lisp:null))
   (timezone common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (enable-iamdatabase-authentication common-lisp:nil :type
    (common-lisp:or boolean-optional common-lisp:null))
   (enable-performance-insights common-lisp:nil :type
    (common-lisp:or boolean-optional common-lisp:null))
   (performance-insights-kmskey-id common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (performance-insights-retention-period common-lisp:nil :type
    (common-lisp:or integer-optional common-lisp:null))
   (enable-cloudwatch-logs-exports common-lisp:nil :type
    (common-lisp:or log-type-list common-lisp:null))
   (processor-features common-lisp:nil :type
    (common-lisp:or processor-feature-list common-lisp:null))
   (deletion-protection common-lisp:nil :type
    (common-lisp:or boolean-optional common-lisp:null))
   (max-allocated-storage common-lisp:nil :type
    (common-lisp:or integer-optional common-lisp:null))
   (enable-customer-owned-ip common-lisp:nil :type
    (common-lisp:or boolean-optional common-lisp:null))
   (custom-iam-instance-profile common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (backup-target common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (network-type common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (storage-throughput common-lisp:nil :type
    (common-lisp:or integer-optional common-lisp:null))
   (manage-master-user-password common-lisp:nil :type
    (common-lisp:or boolean-optional common-lisp:null))
   (master-user-secret-kms-key-id common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (cacertificate-identifier common-lisp:nil :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-dbinstance-message
                    'make-create-dbinstance-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-dbinstance-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-dbinstance-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dbname))
      (common-lisp:list
       (common-lisp:cons "DBName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dbinstance-identifier))
      (common-lisp:list
       (common-lisp:cons "DBInstanceIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'allocated-storage))
      (common-lisp:list
       (common-lisp:cons "AllocatedStorage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dbinstance-class))
      (common-lisp:list
       (common-lisp:cons "DBInstanceClass"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'engine))
      (common-lisp:list
       (common-lisp:cons "Engine"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'master-username))
      (common-lisp:list
       (common-lisp:cons "MasterUsername"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'master-user-password))
      (common-lisp:list
       (common-lisp:cons "MasterUserPassword"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dbsecurity-groups))
      (common-lisp:list
       (common-lisp:cons "DBSecurityGroups"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'vpc-security-group-ids))
      (common-lisp:list
       (common-lisp:cons "VpcSecurityGroupIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'availability-zone))
      (common-lisp:list
       (common-lisp:cons "AvailabilityZone"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dbsubnet-group-name))
      (common-lisp:list
       (common-lisp:cons "DBSubnetGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'preferred-maintenance-window))
      (common-lisp:list
       (common-lisp:cons "PreferredMaintenanceWindow"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dbparameter-group-name))
      (common-lisp:list
       (common-lisp:cons "DBParameterGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'backup-retention-period))
      (common-lisp:list
       (common-lisp:cons "BackupRetentionPeriod"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'preferred-backup-window))
      (common-lisp:list
       (common-lisp:cons "PreferredBackupWindow"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'port))
      (common-lisp:list
       (common-lisp:cons "Port"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'multi-az))
      (common-lisp:list
       (common-lisp:cons "MultiAZ"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'engine-version))
      (common-lisp:list
       (common-lisp:cons "EngineVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'auto-minor-version-upgrade))
      (common-lisp:list
       (common-lisp:cons "AutoMinorVersionUpgrade"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'license-model))
      (common-lisp:list
       (common-lisp:cons "LicenseModel"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'iops))
      (common-lisp:list
       (common-lisp:cons "Iops"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'option-group-name))
      (common-lisp:list
       (common-lisp:cons "OptionGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'character-set-name))
      (common-lisp:list
       (common-lisp:cons "CharacterSetName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'nchar-character-set-name))
      (common-lisp:list
       (common-lisp:cons "NcharCharacterSetName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'publicly-accessible))
      (common-lisp:list
       (common-lisp:cons "PubliclyAccessible"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dbcluster-identifier))
      (common-lisp:list
       (common-lisp:cons "DBClusterIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'storage-type))
      (common-lisp:list
       (common-lisp:cons "StorageType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tde-credential-arn))
      (common-lisp:list
       (common-lisp:cons "TdeCredentialArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'tde-credential-password))
      (common-lisp:list
       (common-lisp:cons "TdeCredentialPassword"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'storage-encrypted))
      (common-lisp:list
       (common-lisp:cons "StorageEncrypted"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kms-key-id))
      (common-lisp:list
       (common-lisp:cons "KmsKeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain))
      (common-lisp:list
       (common-lisp:cons "Domain"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'copy-tags-to-snapshot))
      (common-lisp:list
       (common-lisp:cons "CopyTagsToSnapshot"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'monitoring-interval))
      (common-lisp:list
       (common-lisp:cons "MonitoringInterval"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'monitoring-role-arn))
      (common-lisp:list
       (common-lisp:cons "MonitoringRoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-iamrole-name))
      (common-lisp:list
       (common-lisp:cons "DomainIAMRoleName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'promotion-tier))
      (common-lisp:list
       (common-lisp:cons "PromotionTier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'timezone))
      (common-lisp:list
       (common-lisp:cons "Timezone"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'enable-iamdatabase-authentication))
      (common-lisp:list
       (common-lisp:cons "EnableIAMDatabaseAuthentication"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'enable-performance-insights))
      (common-lisp:list
       (common-lisp:cons "EnablePerformanceInsights"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'performance-insights-kmskey-id))
      (common-lisp:list
       (common-lisp:cons "PerformanceInsightsKMSKeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'performance-insights-retention-period))
      (common-lisp:list
       (common-lisp:cons "PerformanceInsightsRetentionPeriod"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'enable-cloudwatch-logs-exports))
      (common-lisp:list
       (common-lisp:cons "EnableCloudwatchLogsExports"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'processor-features))
      (common-lisp:list
       (common-lisp:cons "ProcessorFeatures"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'deletion-protection))
      (common-lisp:list
       (common-lisp:cons "DeletionProtection"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'max-allocated-storage))
      (common-lisp:list
       (common-lisp:cons "MaxAllocatedStorage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'enable-customer-owned-ip))
      (common-lisp:list
       (common-lisp:cons "EnableCustomerOwnedIp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'custom-iam-instance-profile))
      (common-lisp:list
       (common-lisp:cons "CustomIamInstanceProfile"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'backup-target))
      (common-lisp:list
       (common-lisp:cons "BackupTarget"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'network-type))
      (common-lisp:list
       (common-lisp:cons "NetworkType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'storage-throughput))
      (common-lisp:list
       (common-lisp:cons "StorageThroughput"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'manage-master-user-password))
      (common-lisp:list
       (common-lisp:cons "ManageMasterUserPassword"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'master-user-secret-kms-key-id))
      (common-lisp:list
       (common-lisp:cons "MasterUserSecretKmsKeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cacertificate-identifier))
      (common-lisp:list
       (common-lisp:cons "CACertificateIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-dbinstance-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-dbinstance-read-replica-message (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-dbinstance-read-replica-message-"))
   (dbinstance-identifier
    (common-lisp:error ":dbinstance-identifier is required") :type
    (common-lisp:or string common-lisp:null))
   (source-dbinstance-identifier
    (common-lisp:error ":source-dbinstance-identifier is required") :type
    (common-lisp:or string common-lisp:null))
   (dbinstance-class common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (availability-zone common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (port common-lisp:nil :type
    (common-lisp:or integer-optional common-lisp:null))
   (multi-az common-lisp:nil :type
    (common-lisp:or boolean-optional common-lisp:null))
   (auto-minor-version-upgrade common-lisp:nil :type
    (common-lisp:or boolean-optional common-lisp:null))
   (iops common-lisp:nil :type
    (common-lisp:or integer-optional common-lisp:null))
   (option-group-name common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (dbparameter-group-name common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (publicly-accessible common-lisp:nil :type
    (common-lisp:or boolean-optional common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-list common-lisp:null))
   (dbsubnet-group-name common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (vpc-security-group-ids common-lisp:nil :type
    (common-lisp:or vpc-security-group-id-list common-lisp:null))
   (storage-type common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (copy-tags-to-snapshot common-lisp:nil :type
    (common-lisp:or boolean-optional common-lisp:null))
   (monitoring-interval common-lisp:nil :type
    (common-lisp:or integer-optional common-lisp:null))
   (monitoring-role-arn common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (kms-key-id common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (pre-signed-url common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (enable-iamdatabase-authentication common-lisp:nil :type
    (common-lisp:or boolean-optional common-lisp:null))
   (enable-performance-insights common-lisp:nil :type
    (common-lisp:or boolean-optional common-lisp:null))
   (performance-insights-kmskey-id common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (performance-insights-retention-period common-lisp:nil :type
    (common-lisp:or integer-optional common-lisp:null))
   (enable-cloudwatch-logs-exports common-lisp:nil :type
    (common-lisp:or log-type-list common-lisp:null))
   (processor-features common-lisp:nil :type
    (common-lisp:or processor-feature-list common-lisp:null))
   (use-default-processor-features common-lisp:nil :type
    (common-lisp:or boolean-optional common-lisp:null))
   (deletion-protection common-lisp:nil :type
    (common-lisp:or boolean-optional common-lisp:null))
   (domain common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (domain-iamrole-name common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (replica-mode common-lisp:nil :type
    (common-lisp:or replica-mode common-lisp:null))
   (max-allocated-storage common-lisp:nil :type
    (common-lisp:or integer-optional common-lisp:null))
   (custom-iam-instance-profile common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (network-type common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (storage-throughput common-lisp:nil :type
    (common-lisp:or integer-optional common-lisp:null))
   (enable-customer-owned-ip common-lisp:nil :type
    (common-lisp:or boolean-optional common-lisp:null))
   (allocated-storage common-lisp:nil :type
    (common-lisp:or integer-optional common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-dbinstance-read-replica-message
                    'make-create-dbinstance-read-replica-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-dbinstance-read-replica-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-dbinstance-read-replica-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dbinstance-identifier))
      (common-lisp:list
       (common-lisp:cons "DBInstanceIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'source-dbinstance-identifier))
      (common-lisp:list
       (common-lisp:cons "SourceDBInstanceIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dbinstance-class))
      (common-lisp:list
       (common-lisp:cons "DBInstanceClass"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'availability-zone))
      (common-lisp:list
       (common-lisp:cons "AvailabilityZone"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'port))
      (common-lisp:list
       (common-lisp:cons "Port"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'multi-az))
      (common-lisp:list
       (common-lisp:cons "MultiAZ"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'auto-minor-version-upgrade))
      (common-lisp:list
       (common-lisp:cons "AutoMinorVersionUpgrade"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'iops))
      (common-lisp:list
       (common-lisp:cons "Iops"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'option-group-name))
      (common-lisp:list
       (common-lisp:cons "OptionGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dbparameter-group-name))
      (common-lisp:list
       (common-lisp:cons "DBParameterGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'publicly-accessible))
      (common-lisp:list
       (common-lisp:cons "PubliclyAccessible"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dbsubnet-group-name))
      (common-lisp:list
       (common-lisp:cons "DBSubnetGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'vpc-security-group-ids))
      (common-lisp:list
       (common-lisp:cons "VpcSecurityGroupIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'storage-type))
      (common-lisp:list
       (common-lisp:cons "StorageType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'copy-tags-to-snapshot))
      (common-lisp:list
       (common-lisp:cons "CopyTagsToSnapshot"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'monitoring-interval))
      (common-lisp:list
       (common-lisp:cons "MonitoringInterval"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'monitoring-role-arn))
      (common-lisp:list
       (common-lisp:cons "MonitoringRoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kms-key-id))
      (common-lisp:list
       (common-lisp:cons "KmsKeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pre-signed-url))
      (common-lisp:list
       (common-lisp:cons "PreSignedUrl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'enable-iamdatabase-authentication))
      (common-lisp:list
       (common-lisp:cons "EnableIAMDatabaseAuthentication"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'enable-performance-insights))
      (common-lisp:list
       (common-lisp:cons "EnablePerformanceInsights"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'performance-insights-kmskey-id))
      (common-lisp:list
       (common-lisp:cons "PerformanceInsightsKMSKeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'performance-insights-retention-period))
      (common-lisp:list
       (common-lisp:cons "PerformanceInsightsRetentionPeriod"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'enable-cloudwatch-logs-exports))
      (common-lisp:list
       (common-lisp:cons "EnableCloudwatchLogsExports"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'processor-features))
      (common-lisp:list
       (common-lisp:cons "ProcessorFeatures"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'use-default-processor-features))
      (common-lisp:list
       (common-lisp:cons "UseDefaultProcessorFeatures"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'deletion-protection))
      (common-lisp:list
       (common-lisp:cons "DeletionProtection"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain))
      (common-lisp:list
       (common-lisp:cons "Domain"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-iamrole-name))
      (common-lisp:list
       (common-lisp:cons "DomainIAMRoleName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'replica-mode))
      (common-lisp:list
       (common-lisp:cons "ReplicaMode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'max-allocated-storage))
      (common-lisp:list
       (common-lisp:cons "MaxAllocatedStorage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'custom-iam-instance-profile))
      (common-lisp:list
       (common-lisp:cons "CustomIamInstanceProfile"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'network-type))
      (common-lisp:list
       (common-lisp:cons "NetworkType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'storage-throughput))
      (common-lisp:list
       (common-lisp:cons "StorageThroughput"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'enable-customer-owned-ip))
      (common-lisp:list
       (common-lisp:cons "EnableCustomerOwnedIp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'allocated-storage))
      (common-lisp:list
       (common-lisp:cons "AllocatedStorage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-dbinstance-read-replica-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-dbinstance-read-replica-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-dbinstance-read-replica-result-"))
   (dbinstance common-lisp:nil :type
    (common-lisp:or dbinstance common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-dbinstance-read-replica-result
                    'make-create-dbinstance-read-replica-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-dbinstance-read-replica-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-dbinstance-read-replica-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dbinstance))
      (common-lisp:list
       (common-lisp:cons "DBInstance"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-dbinstance-read-replica-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-dbinstance-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-dbinstance-result-"))
   (dbinstance common-lisp:nil :type
    (common-lisp:or dbinstance common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-dbinstance-result 'make-create-dbinstance-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-dbinstance-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-dbinstance-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dbinstance))
      (common-lisp:list
       (common-lisp:cons "DBInstance"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-dbinstance-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-dbparameter-group-message (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-dbparameter-group-message-"))
   (dbparameter-group-name
    (common-lisp:error ":dbparameter-group-name is required") :type
    (common-lisp:or string common-lisp:null))
   (dbparameter-group-family
    (common-lisp:error ":dbparameter-group-family is required") :type
    (common-lisp:or string common-lisp:null))
   (description (common-lisp:error ":description is required") :type
    (common-lisp:or string common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-dbparameter-group-message
                    'make-create-dbparameter-group-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-dbparameter-group-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-dbparameter-group-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dbparameter-group-name))
      (common-lisp:list
       (common-lisp:cons "DBParameterGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dbparameter-group-family))
      (common-lisp:list
       (common-lisp:cons "DBParameterGroupFamily"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-dbparameter-group-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-dbparameter-group-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-dbparameter-group-result-"))
   (dbparameter-group common-lisp:nil :type
    (common-lisp:or dbparameter-group common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-dbparameter-group-result
                    'make-create-dbparameter-group-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-dbparameter-group-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-dbparameter-group-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dbparameter-group))
      (common-lisp:list
       (common-lisp:cons "DBParameterGroup"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-dbparameter-group-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-dbproxy-endpoint-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-dbproxy-endpoint-request-"))
   (dbproxy-name (common-lisp:error ":dbproxy-name is required") :type
    (common-lisp:or dbproxy-name common-lisp:null))
   (dbproxy-endpoint-name
    (common-lisp:error ":dbproxy-endpoint-name is required") :type
    (common-lisp:or dbproxy-endpoint-name common-lisp:null))
   (vpc-subnet-ids (common-lisp:error ":vpc-subnet-ids is required") :type
    (common-lisp:or string-list common-lisp:null))
   (vpc-security-group-ids common-lisp:nil :type
    (common-lisp:or string-list common-lisp:null))
   (target-role common-lisp:nil :type
    (common-lisp:or dbproxy-endpoint-target-role common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-dbproxy-endpoint-request
                    'make-create-dbproxy-endpoint-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-dbproxy-endpoint-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-dbproxy-endpoint-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dbproxy-name))
      (common-lisp:list
       (common-lisp:cons "DBProxyName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dbproxy-endpoint-name))
      (common-lisp:list
       (common-lisp:cons "DBProxyEndpointName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpc-subnet-ids))
      (common-lisp:list
       (common-lisp:cons "VpcSubnetIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'vpc-security-group-ids))
      (common-lisp:list
       (common-lisp:cons "VpcSecurityGroupIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target-role))
      (common-lisp:list
       (common-lisp:cons "TargetRole"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-dbproxy-endpoint-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-dbproxy-endpoint-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-dbproxy-endpoint-response-"))
   (dbproxy-endpoint common-lisp:nil :type
    (common-lisp:or dbproxy-endpoint common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-dbproxy-endpoint-response
                    'make-create-dbproxy-endpoint-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-dbproxy-endpoint-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-dbproxy-endpoint-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dbproxy-endpoint))
      (common-lisp:list
       (common-lisp:cons "DBProxyEndpoint"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-dbproxy-endpoint-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-dbproxy-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-dbproxy-request-"))
   (dbproxy-name (common-lisp:error ":dbproxy-name is required") :type
    (common-lisp:or string common-lisp:null))
   (engine-family (common-lisp:error ":engine-family is required") :type
    (common-lisp:or engine-family common-lisp:null))
   (auth (common-lisp:error ":auth is required") :type
    (common-lisp:or user-auth-config-list common-lisp:null))
   (role-arn (common-lisp:error ":role-arn is required") :type
    (common-lisp:or string common-lisp:null))
   (vpc-subnet-ids (common-lisp:error ":vpc-subnet-ids is required") :type
    (common-lisp:or string-list common-lisp:null))
   (vpc-security-group-ids common-lisp:nil :type
    (common-lisp:or string-list common-lisp:null))
   (require-tls common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (idle-client-timeout common-lisp:nil :type
    (common-lisp:or integer-optional common-lisp:null))
   (debug-logging common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-dbproxy-request 'make-create-dbproxy-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-dbproxy-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-dbproxy-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dbproxy-name))
      (common-lisp:list
       (common-lisp:cons "DBProxyName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'engine-family))
      (common-lisp:list
       (common-lisp:cons "EngineFamily"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'auth))
      (common-lisp:list
       (common-lisp:cons "Auth"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "RoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpc-subnet-ids))
      (common-lisp:list
       (common-lisp:cons "VpcSubnetIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'vpc-security-group-ids))
      (common-lisp:list
       (common-lisp:cons "VpcSecurityGroupIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'require-tls))
      (common-lisp:list
       (common-lisp:cons "RequireTLS"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'idle-client-timeout))
      (common-lisp:list
       (common-lisp:cons "IdleClientTimeout"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'debug-logging))
      (common-lisp:list
       (common-lisp:cons "DebugLogging"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-dbproxy-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-dbproxy-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-dbproxy-response-"))
   (dbproxy common-lisp:nil :type (common-lisp:or dbproxy common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-dbproxy-response 'make-create-dbproxy-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-dbproxy-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-dbproxy-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dbproxy))
      (common-lisp:list
       (common-lisp:cons "DBProxy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-dbproxy-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-dbsecurity-group-message (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-dbsecurity-group-message-"))
   (dbsecurity-group-name
    (common-lisp:error ":dbsecurity-group-name is required") :type
    (common-lisp:or string common-lisp:null))
   (dbsecurity-group-description
    (common-lisp:error ":dbsecurity-group-description is required") :type
    (common-lisp:or string common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-dbsecurity-group-message
                    'make-create-dbsecurity-group-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-dbsecurity-group-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-dbsecurity-group-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dbsecurity-group-name))
      (common-lisp:list
       (common-lisp:cons "DBSecurityGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dbsecurity-group-description))
      (common-lisp:list
       (common-lisp:cons "DBSecurityGroupDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-dbsecurity-group-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-dbsecurity-group-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-dbsecurity-group-result-"))
   (dbsecurity-group common-lisp:nil :type
    (common-lisp:or dbsecurity-group common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-dbsecurity-group-result
                    'make-create-dbsecurity-group-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-dbsecurity-group-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-dbsecurity-group-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dbsecurity-group))
      (common-lisp:list
       (common-lisp:cons "DBSecurityGroup"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-dbsecurity-group-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-dbsnapshot-message (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-dbsnapshot-message-"))
   (dbsnapshot-identifier
    (common-lisp:error ":dbsnapshot-identifier is required") :type
    (common-lisp:or string common-lisp:null))
   (dbinstance-identifier
    (common-lisp:error ":dbinstance-identifier is required") :type
    (common-lisp:or string common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-dbsnapshot-message
                    'make-create-dbsnapshot-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-dbsnapshot-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-dbsnapshot-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dbsnapshot-identifier))
      (common-lisp:list
       (common-lisp:cons "DBSnapshotIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dbinstance-identifier))
      (common-lisp:list
       (common-lisp:cons "DBInstanceIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-dbsnapshot-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-dbsnapshot-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-dbsnapshot-result-"))
   (dbsnapshot common-lisp:nil :type
    (common-lisp:or dbsnapshot common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-dbsnapshot-result 'make-create-dbsnapshot-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-dbsnapshot-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-dbsnapshot-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dbsnapshot))
      (common-lisp:list
       (common-lisp:cons "DBSnapshot"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-dbsnapshot-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-dbsubnet-group-message (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-dbsubnet-group-message-"))
   (dbsubnet-group-name (common-lisp:error ":dbsubnet-group-name is required")
    :type (common-lisp:or string common-lisp:null))
   (dbsubnet-group-description
    (common-lisp:error ":dbsubnet-group-description is required") :type
    (common-lisp:or string common-lisp:null))
   (subnet-ids (common-lisp:error ":subnet-ids is required") :type
    (common-lisp:or subnet-identifier-list common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-dbsubnet-group-message
                    'make-create-dbsubnet-group-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-dbsubnet-group-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-dbsubnet-group-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dbsubnet-group-name))
      (common-lisp:list
       (common-lisp:cons "DBSubnetGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dbsubnet-group-description))
      (common-lisp:list
       (common-lisp:cons "DBSubnetGroupDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subnet-ids))
      (common-lisp:list
       (common-lisp:cons "SubnetIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-dbsubnet-group-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-dbsubnet-group-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-dbsubnet-group-result-"))
   (dbsubnet-group common-lisp:nil :type
    (common-lisp:or dbsubnet-group common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-dbsubnet-group-result
                    'make-create-dbsubnet-group-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-dbsubnet-group-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-dbsubnet-group-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dbsubnet-group))
      (common-lisp:list
       (common-lisp:cons "DBSubnetGroup"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-dbsubnet-group-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-event-subscription-message (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-event-subscription-message-"))
   (subscription-name (common-lisp:error ":subscription-name is required")
    :type (common-lisp:or string common-lisp:null))
   (sns-topic-arn (common-lisp:error ":sns-topic-arn is required") :type
    (common-lisp:or string common-lisp:null))
   (source-type common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (event-categories common-lisp:nil :type
    (common-lisp:or event-categories-list common-lisp:null))
   (source-ids common-lisp:nil :type
    (common-lisp:or source-ids-list common-lisp:null))
   (enabled common-lisp:nil :type
    (common-lisp:or boolean-optional common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-event-subscription-message
                    'make-create-event-subscription-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-event-subscription-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-event-subscription-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subscription-name))
      (common-lisp:list
       (common-lisp:cons "SubscriptionName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sns-topic-arn))
      (common-lisp:list
       (common-lisp:cons "SnsTopicArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-type))
      (common-lisp:list
       (common-lisp:cons "SourceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'event-categories))
      (common-lisp:list
       (common-lisp:cons "EventCategories"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-ids))
      (common-lisp:list
       (common-lisp:cons "SourceIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'enabled))
      (common-lisp:list
       (common-lisp:cons "Enabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-event-subscription-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-event-subscription-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-event-subscription-result-"))
   (event-subscription common-lisp:nil :type
    (common-lisp:or event-subscription common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-event-subscription-result
                    'make-create-event-subscription-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-event-subscription-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-event-subscription-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'event-subscription))
      (common-lisp:list
       (common-lisp:cons "EventSubscription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-event-subscription-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-global-cluster-message (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-global-cluster-message-"))
   (global-cluster-identifier common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (source-dbcluster-identifier common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (engine common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (engine-version common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (deletion-protection common-lisp:nil :type
    (common-lisp:or boolean-optional common-lisp:null))
   (database-name common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (storage-encrypted common-lisp:nil :type
    (common-lisp:or boolean-optional common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-global-cluster-message
                    'make-create-global-cluster-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-global-cluster-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-global-cluster-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'global-cluster-identifier))
      (common-lisp:list
       (common-lisp:cons "GlobalClusterIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'source-dbcluster-identifier))
      (common-lisp:list
       (common-lisp:cons "SourceDBClusterIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'engine))
      (common-lisp:list
       (common-lisp:cons "Engine"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'engine-version))
      (common-lisp:list
       (common-lisp:cons "EngineVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'deletion-protection))
      (common-lisp:list
       (common-lisp:cons "DeletionProtection"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'database-name))
      (common-lisp:list
       (common-lisp:cons "DatabaseName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'storage-encrypted))
      (common-lisp:list
       (common-lisp:cons "StorageEncrypted"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-global-cluster-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-global-cluster-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-global-cluster-result-"))
   (global-cluster common-lisp:nil :type
    (common-lisp:or global-cluster common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-global-cluster-result
                    'make-create-global-cluster-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-global-cluster-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-global-cluster-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'global-cluster))
      (common-lisp:list
       (common-lisp:cons "GlobalCluster"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-global-cluster-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-option-group-message (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-option-group-message-"))
   (option-group-name (common-lisp:error ":option-group-name is required")
    :type (common-lisp:or string common-lisp:null))
   (engine-name (common-lisp:error ":engine-name is required") :type
    (common-lisp:or string common-lisp:null))
   (major-engine-version
    (common-lisp:error ":major-engine-version is required") :type
    (common-lisp:or string common-lisp:null))
   (option-group-description
    (common-lisp:error ":option-group-description is required") :type
    (common-lisp:or string common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-option-group-message
                    'make-create-option-group-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-option-group-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-option-group-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'option-group-name))
      (common-lisp:list
       (common-lisp:cons "OptionGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'engine-name))
      (common-lisp:list
       (common-lisp:cons "EngineName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'major-engine-version))
      (common-lisp:list
       (common-lisp:cons "MajorEngineVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'option-group-description))
      (common-lisp:list
       (common-lisp:cons "OptionGroupDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-option-group-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-option-group-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-option-group-result-"))
   (option-group common-lisp:nil :type
    (common-lisp:or option-group common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-option-group-result
                    'make-create-option-group-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-option-group-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-option-group-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'option-group))
      (common-lisp:list
       (common-lisp:cons "OptionGroup"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-option-group-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition custom-availability-zone-not-found-fault
     (rds-error)
     common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'custom-availability-zone-not-found-fault)))
(common-lisp:progn
 (common-lisp:defstruct
     (custom-dbengine-version-ami (:copier common-lisp:nil)
      (:conc-name "struct-shape-custom-dbengine-version-ami-"))
   (image-id common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (status common-lisp:nil :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'custom-dbengine-version-ami
                    'make-custom-dbengine-version-ami))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          custom-dbengine-version-ami))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          custom-dbengine-version-ami))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'image-id))
      (common-lisp:list
       (common-lisp:cons "ImageId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          custom-dbengine-version-ami))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition custom-dbengine-version-already-exists-fault
     (rds-error)
     common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'custom-dbengine-version-already-exists-fault)))
(common-lisp:deftype custom-dbengine-version-manifest () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition custom-dbengine-version-not-found-fault
     (rds-error)
     common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'custom-dbengine-version-not-found-fault)))
(common-lisp:progn
 (common-lisp:define-condition custom-dbengine-version-quota-exceeded-fault
     (rds-error)
     common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'custom-dbengine-version-quota-exceeded-fault)))
(common-lisp:deftype custom-engine-name () 'common-lisp:string)
(common-lisp:deftype custom-engine-version () 'common-lisp:string)
(common-lisp:deftype custom-engine-version-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (dbcluster (:copier common-lisp:nil)
      (:conc-name "struct-shape-dbcluster-"))
   (allocated-storage common-lisp:nil :type
    (common-lisp:or integer-optional common-lisp:null))
   (availability-zones common-lisp:nil :type
    (common-lisp:or availability-zones common-lisp:null))
   (backup-retention-period common-lisp:nil :type
    (common-lisp:or integer-optional common-lisp:null))
   (character-set-name common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (database-name common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (dbcluster-identifier common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (dbcluster-parameter-group common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (dbsubnet-group common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (status common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (automatic-restart-time common-lisp:nil :type
    (common-lisp:or tstamp common-lisp:null))
   (percent-progress common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (earliest-restorable-time common-lisp:nil :type
    (common-lisp:or tstamp common-lisp:null))
   (endpoint common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (reader-endpoint common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (custom-endpoints common-lisp:nil :type
    (common-lisp:or string-list common-lisp:null))
   (multi-az common-lisp:nil :type
    (common-lisp:or boolean-optional common-lisp:null))
   (engine common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (engine-version common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (latest-restorable-time common-lisp:nil :type
    (common-lisp:or tstamp common-lisp:null))
   (port common-lisp:nil :type
    (common-lisp:or integer-optional common-lisp:null))
   (master-username common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (dbcluster-option-group-memberships common-lisp:nil :type
    (common-lisp:or dbcluster-option-group-memberships common-lisp:null))
   (preferred-backup-window common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (preferred-maintenance-window common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (replication-source-identifier common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (read-replica-identifiers common-lisp:nil :type
    (common-lisp:or read-replica-identifier-list common-lisp:null))
   (dbcluster-members common-lisp:nil :type
    (common-lisp:or dbcluster-member-list common-lisp:null))
   (vpc-security-groups common-lisp:nil :type
    (common-lisp:or vpc-security-group-membership-list common-lisp:null))
   (hosted-zone-id common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (storage-encrypted common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (kms-key-id common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (db-cluster-resource-id common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (dbcluster-arn common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (associated-roles common-lisp:nil :type
    (common-lisp:or dbcluster-roles common-lisp:null))
   (iamdatabase-authentication-enabled common-lisp:nil :type
    (common-lisp:or boolean-optional common-lisp:null))
   (clone-group-id common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (cluster-create-time common-lisp:nil :type
    (common-lisp:or tstamp common-lisp:null))
   (earliest-backtrack-time common-lisp:nil :type
    (common-lisp:or tstamp common-lisp:null))
   (backtrack-window common-lisp:nil :type
    (common-lisp:or long-optional common-lisp:null))
   (backtrack-consumed-change-records common-lisp:nil :type
    (common-lisp:or long-optional common-lisp:null))
   (enabled-cloudwatch-logs-exports common-lisp:nil :type
    (common-lisp:or log-type-list common-lisp:null))
   (capacity common-lisp:nil :type
    (common-lisp:or integer-optional common-lisp:null))
   (engine-mode common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (scaling-configuration-info common-lisp:nil :type
    (common-lisp:or scaling-configuration-info common-lisp:null))
   (deletion-protection common-lisp:nil :type
    (common-lisp:or boolean-optional common-lisp:null))
   (http-endpoint-enabled common-lisp:nil :type
    (common-lisp:or boolean-optional common-lisp:null))
   (activity-stream-mode common-lisp:nil :type
    (common-lisp:or activity-stream-mode common-lisp:null))
   (activity-stream-status common-lisp:nil :type
    (common-lisp:or activity-stream-status common-lisp:null))
   (activity-stream-kms-key-id common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (activity-stream-kinesis-stream-name common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (copy-tags-to-snapshot common-lisp:nil :type
    (common-lisp:or boolean-optional common-lisp:null))
   (cross-account-clone common-lisp:nil :type
    (common-lisp:or boolean-optional common-lisp:null))
   (domain-memberships common-lisp:nil :type
    (common-lisp:or domain-membership-list common-lisp:null))
   (tag-list common-lisp:nil :type (common-lisp:or tag-list common-lisp:null))
   (global-write-forwarding-status common-lisp:nil :type
    (common-lisp:or write-forwarding-status common-lisp:null))
   (global-write-forwarding-requested common-lisp:nil :type
    (common-lisp:or boolean-optional common-lisp:null))
   (pending-modified-values common-lisp:nil :type
    (common-lisp:or cluster-pending-modified-values common-lisp:null))
   (dbcluster-instance-class common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (storage-type common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (iops common-lisp:nil :type
    (common-lisp:or integer-optional common-lisp:null))
   (publicly-accessible common-lisp:nil :type
    (common-lisp:or boolean-optional common-lisp:null))
   (auto-minor-version-upgrade common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (monitoring-interval common-lisp:nil :type
    (common-lisp:or integer-optional common-lisp:null))
   (monitoring-role-arn common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (performance-insights-enabled common-lisp:nil :type
    (common-lisp:or boolean-optional common-lisp:null))
   (performance-insights-kmskey-id common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (performance-insights-retention-period common-lisp:nil :type
    (common-lisp:or integer-optional common-lisp:null))
   (serverless-v2scaling-configuration common-lisp:nil :type
    (common-lisp:or serverless-v2scaling-configuration-info common-lisp:null))
   (network-type common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (dbsystem-id common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (master-user-secret common-lisp:nil :type
    (common-lisp:or master-user-secret common-lisp:null)))
 (common-lisp:export (common-lisp:list 'dbcluster 'make-dbcluster))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input dbcluster))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input dbcluster))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'allocated-storage))
      (common-lisp:list
       (common-lisp:cons "AllocatedStorage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'availability-zones))
      (common-lisp:list
       (common-lisp:cons "AvailabilityZones"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'backup-retention-period))
      (common-lisp:list
       (common-lisp:cons "BackupRetentionPeriod"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'character-set-name))
      (common-lisp:list
       (common-lisp:cons "CharacterSetName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'database-name))
      (common-lisp:list
       (common-lisp:cons "DatabaseName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dbcluster-identifier))
      (common-lisp:list
       (common-lisp:cons "DBClusterIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dbcluster-parameter-group))
      (common-lisp:list
       (common-lisp:cons "DBClusterParameterGroup"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dbsubnet-group))
      (common-lisp:list
       (common-lisp:cons "DBSubnetGroup"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'automatic-restart-time))
      (common-lisp:list
       (common-lisp:cons "AutomaticRestartTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'percent-progress))
      (common-lisp:list
       (common-lisp:cons "PercentProgress"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'earliest-restorable-time))
      (common-lisp:list
       (common-lisp:cons "EarliestRestorableTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'endpoint))
      (common-lisp:list
       (common-lisp:cons "Endpoint"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'reader-endpoint))
      (common-lisp:list
       (common-lisp:cons "ReaderEndpoint"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'custom-endpoints))
      (common-lisp:list
       (common-lisp:cons "CustomEndpoints"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'multi-az))
      (common-lisp:list
       (common-lisp:cons "MultiAZ"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'engine))
      (common-lisp:list
       (common-lisp:cons "Engine"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'engine-version))
      (common-lisp:list
       (common-lisp:cons "EngineVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'latest-restorable-time))
      (common-lisp:list
       (common-lisp:cons "LatestRestorableTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'port))
      (common-lisp:list
       (common-lisp:cons "Port"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'master-username))
      (common-lisp:list
       (common-lisp:cons "MasterUsername"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dbcluster-option-group-memberships))
      (common-lisp:list
       (common-lisp:cons "DBClusterOptionGroupMemberships"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'preferred-backup-window))
      (common-lisp:list
       (common-lisp:cons "PreferredBackupWindow"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'preferred-maintenance-window))
      (common-lisp:list
       (common-lisp:cons "PreferredMaintenanceWindow"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'replication-source-identifier))
      (common-lisp:list
       (common-lisp:cons "ReplicationSourceIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'read-replica-identifiers))
      (common-lisp:list
       (common-lisp:cons "ReadReplicaIdentifiers"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dbcluster-members))
      (common-lisp:list
       (common-lisp:cons "DBClusterMembers"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpc-security-groups))
      (common-lisp:list
       (common-lisp:cons "VpcSecurityGroups"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'hosted-zone-id))
      (common-lisp:list
       (common-lisp:cons "HostedZoneId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'storage-encrypted))
      (common-lisp:list
       (common-lisp:cons "StorageEncrypted"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kms-key-id))
      (common-lisp:list
       (common-lisp:cons "KmsKeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'db-cluster-resource-id))
      (common-lisp:list
       (common-lisp:cons "DbClusterResourceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dbcluster-arn))
      (common-lisp:list
       (common-lisp:cons "DBClusterArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'associated-roles))
      (common-lisp:list
       (common-lisp:cons "AssociatedRoles"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'iamdatabase-authentication-enabled))
      (common-lisp:list
       (common-lisp:cons "IAMDatabaseAuthenticationEnabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'clone-group-id))
      (common-lisp:list
       (common-lisp:cons "CloneGroupId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster-create-time))
      (common-lisp:list
       (common-lisp:cons "ClusterCreateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'earliest-backtrack-time))
      (common-lisp:list
       (common-lisp:cons "EarliestBacktrackTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'backtrack-window))
      (common-lisp:list
       (common-lisp:cons "BacktrackWindow"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'backtrack-consumed-change-records))
      (common-lisp:list
       (common-lisp:cons "BacktrackConsumedChangeRecords"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'enabled-cloudwatch-logs-exports))
      (common-lisp:list
       (common-lisp:cons "EnabledCloudwatchLogsExports"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'capacity))
      (common-lisp:list
       (common-lisp:cons "Capacity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'engine-mode))
      (common-lisp:list
       (common-lisp:cons "EngineMode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'scaling-configuration-info))
      (common-lisp:list
       (common-lisp:cons "ScalingConfigurationInfo"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'deletion-protection))
      (common-lisp:list
       (common-lisp:cons "DeletionProtection"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'http-endpoint-enabled))
      (common-lisp:list
       (common-lisp:cons "HttpEndpointEnabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'activity-stream-mode))
      (common-lisp:list
       (common-lisp:cons "ActivityStreamMode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'activity-stream-status))
      (common-lisp:list
       (common-lisp:cons "ActivityStreamStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'activity-stream-kms-key-id))
      (common-lisp:list
       (common-lisp:cons "ActivityStreamKmsKeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'activity-stream-kinesis-stream-name))
      (common-lisp:list
       (common-lisp:cons "ActivityStreamKinesisStreamName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'copy-tags-to-snapshot))
      (common-lisp:list
       (common-lisp:cons "CopyTagsToSnapshot"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cross-account-clone))
      (common-lisp:list
       (common-lisp:cons "CrossAccountClone"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-memberships))
      (common-lisp:list
       (common-lisp:cons "DomainMemberships"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tag-list))
      (common-lisp:list
       (common-lisp:cons "TagList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'global-write-forwarding-status))
      (common-lisp:list
       (common-lisp:cons "GlobalWriteForwardingStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'global-write-forwarding-requested))
      (common-lisp:list
       (common-lisp:cons "GlobalWriteForwardingRequested"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'pending-modified-values))
      (common-lisp:list
       (common-lisp:cons "PendingModifiedValues"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dbcluster-instance-class))
      (common-lisp:list
       (common-lisp:cons "DBClusterInstanceClass"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'storage-type))
      (common-lisp:list
       (common-lisp:cons "StorageType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'iops))
      (common-lisp:list
       (common-lisp:cons "Iops"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'publicly-accessible))
      (common-lisp:list
       (common-lisp:cons "PubliclyAccessible"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'auto-minor-version-upgrade))
      (common-lisp:list
       (common-lisp:cons "AutoMinorVersionUpgrade"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'monitoring-interval))
      (common-lisp:list
       (common-lisp:cons "MonitoringInterval"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'monitoring-role-arn))
      (common-lisp:list
       (common-lisp:cons "MonitoringRoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'performance-insights-enabled))
      (common-lisp:list
       (common-lisp:cons "PerformanceInsightsEnabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'performance-insights-kmskey-id))
      (common-lisp:list
       (common-lisp:cons "PerformanceInsightsKMSKeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'performance-insights-retention-period))
      (common-lisp:list
       (common-lisp:cons "PerformanceInsightsRetentionPeriod"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'serverless-v2scaling-configuration))
      (common-lisp:list
       (common-lisp:cons "ServerlessV2ScalingConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'network-type))
      (common-lisp:list
       (common-lisp:cons "NetworkType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dbsystem-id))
      (common-lisp:list
       (common-lisp:cons "DBSystemId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'master-user-secret))
      (common-lisp:list
       (common-lisp:cons "MasterUserSecret"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input dbcluster))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition dbcluster-already-exists-fault
     (rds-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'dbcluster-already-exists-fault)))
(common-lisp:progn
 (common-lisp:defstruct
     (dbcluster-backtrack (:copier common-lisp:nil)
      (:conc-name "struct-shape-dbcluster-backtrack-"))
   (dbcluster-identifier common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (backtrack-identifier common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (backtrack-to common-lisp:nil :type
    (common-lisp:or tstamp common-lisp:null))
   (backtracked-from common-lisp:nil :type
    (common-lisp:or tstamp common-lisp:null))
   (backtrack-request-creation-time common-lisp:nil :type
    (common-lisp:or tstamp common-lisp:null))
   (status common-lisp:nil :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'dbcluster-backtrack 'make-dbcluster-backtrack))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input dbcluster-backtrack))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input dbcluster-backtrack))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dbcluster-identifier))
      (common-lisp:list
       (common-lisp:cons "DBClusterIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'backtrack-identifier))
      (common-lisp:list
       (common-lisp:cons "BacktrackIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'backtrack-to))
      (common-lisp:list
       (common-lisp:cons "BacktrackTo"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'backtracked-from))
      (common-lisp:list
       (common-lisp:cons "BacktrackedFrom"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'backtrack-request-creation-time))
      (common-lisp:list
       (common-lisp:cons "BacktrackRequestCreationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input dbcluster-backtrack))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype dbcluster-backtrack-list ()
   '(trivial-types:proper-list dbcluster-backtrack))
 (common-lisp:defun |make-dbcluster-backtrack-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list dbcluster-backtrack))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (dbcluster-backtrack-message (:copier common-lisp:nil)
      (:conc-name "struct-shape-dbcluster-backtrack-message-"))
   (marker common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (dbcluster-backtracks common-lisp:nil :type
    (common-lisp:or dbcluster-backtrack-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'dbcluster-backtrack-message
                    'make-dbcluster-backtrack-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          dbcluster-backtrack-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          dbcluster-backtrack-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dbcluster-backtracks))
      (common-lisp:list
       (common-lisp:cons "DBClusterBacktracks"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          dbcluster-backtrack-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition dbcluster-backtrack-not-found-fault
     (rds-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'dbcluster-backtrack-not-found-fault)))
(common-lisp:progn
 (common-lisp:defstruct
     (dbcluster-capacity-info (:copier common-lisp:nil)
      (:conc-name "struct-shape-dbcluster-capacity-info-"))
   (dbcluster-identifier common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (pending-capacity common-lisp:nil :type
    (common-lisp:or integer-optional common-lisp:null))
   (current-capacity common-lisp:nil :type
    (common-lisp:or integer-optional common-lisp:null))
   (seconds-before-timeout common-lisp:nil :type
    (common-lisp:or integer-optional common-lisp:null))
   (timeout-action common-lisp:nil :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'dbcluster-capacity-info 'make-dbcluster-capacity-info))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          dbcluster-capacity-info))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          dbcluster-capacity-info))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dbcluster-identifier))
      (common-lisp:list
       (common-lisp:cons "DBClusterIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pending-capacity))
      (common-lisp:list
       (common-lisp:cons "PendingCapacity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'current-capacity))
      (common-lisp:list
       (common-lisp:cons "CurrentCapacity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'seconds-before-timeout))
      (common-lisp:list
       (common-lisp:cons "SecondsBeforeTimeout"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'timeout-action))
      (common-lisp:list
       (common-lisp:cons "TimeoutAction"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          dbcluster-capacity-info))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (dbcluster-endpoint (:copier common-lisp:nil)
      (:conc-name "struct-shape-dbcluster-endpoint-"))
   (dbcluster-endpoint-identifier common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (dbcluster-identifier common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (dbcluster-endpoint-resource-identifier common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (endpoint common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (status common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (endpoint-type common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (custom-endpoint-type common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (static-members common-lisp:nil :type
    (common-lisp:or string-list common-lisp:null))
   (excluded-members common-lisp:nil :type
    (common-lisp:or string-list common-lisp:null))
   (dbcluster-endpoint-arn common-lisp:nil :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'dbcluster-endpoint 'make-dbcluster-endpoint))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input dbcluster-endpoint))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input dbcluster-endpoint))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dbcluster-endpoint-identifier))
      (common-lisp:list
       (common-lisp:cons "DBClusterEndpointIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dbcluster-identifier))
      (common-lisp:list
       (common-lisp:cons "DBClusterIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dbcluster-endpoint-resource-identifier))
      (common-lisp:list
       (common-lisp:cons "DBClusterEndpointResourceIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'endpoint))
      (common-lisp:list
       (common-lisp:cons "Endpoint"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'endpoint-type))
      (common-lisp:list
       (common-lisp:cons "EndpointType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'custom-endpoint-type))
      (common-lisp:list
       (common-lisp:cons "CustomEndpointType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'static-members))
      (common-lisp:list
       (common-lisp:cons "StaticMembers"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'excluded-members))
      (common-lisp:list
       (common-lisp:cons "ExcludedMembers"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dbcluster-endpoint-arn))
      (common-lisp:list
       (common-lisp:cons "DBClusterEndpointArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input dbcluster-endpoint))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition dbcluster-endpoint-already-exists-fault
     (rds-error)
     common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'dbcluster-endpoint-already-exists-fault)))
(common-lisp:progn
 (common-lisp:deftype dbcluster-endpoint-list ()
   '(trivial-types:proper-list dbcluster-endpoint))
 (common-lisp:defun |make-dbcluster-endpoint-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list dbcluster-endpoint))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (dbcluster-endpoint-message (:copier common-lisp:nil)
      (:conc-name "struct-shape-dbcluster-endpoint-message-"))
   (marker common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (dbcluster-endpoints common-lisp:nil :type
    (common-lisp:or dbcluster-endpoint-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'dbcluster-endpoint-message
                    'make-dbcluster-endpoint-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          dbcluster-endpoint-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          dbcluster-endpoint-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dbcluster-endpoints))
      (common-lisp:list
       (common-lisp:cons "DBClusterEndpoints"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          dbcluster-endpoint-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition dbcluster-endpoint-not-found-fault
     (rds-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'dbcluster-endpoint-not-found-fault)))
(common-lisp:progn
 (common-lisp:define-condition dbcluster-endpoint-quota-exceeded-fault
     (rds-error)
     common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'dbcluster-endpoint-quota-exceeded-fault)))
(common-lisp:deftype dbcluster-identifier () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype dbcluster-list () '(trivial-types:proper-list dbcluster))
 (common-lisp:defun |make-dbcluster-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list dbcluster))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (dbcluster-member (:copier common-lisp:nil)
      (:conc-name "struct-shape-dbcluster-member-"))
   (dbinstance-identifier common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (is-cluster-writer common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (dbcluster-parameter-group-status common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (promotion-tier common-lisp:nil :type
    (common-lisp:or integer-optional common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'dbcluster-member 'make-dbcluster-member))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input dbcluster-member))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input dbcluster-member))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dbinstance-identifier))
      (common-lisp:list
       (common-lisp:cons "DBInstanceIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'is-cluster-writer))
      (common-lisp:list
       (common-lisp:cons "IsClusterWriter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dbcluster-parameter-group-status))
      (common-lisp:list
       (common-lisp:cons "DBClusterParameterGroupStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'promotion-tier))
      (common-lisp:list
       (common-lisp:cons "PromotionTier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input dbcluster-member))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype dbcluster-member-list ()
   '(trivial-types:proper-list dbcluster-member))
 (common-lisp:defun |make-dbcluster-member-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list dbcluster-member))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (dbcluster-message (:copier common-lisp:nil)
      (:conc-name "struct-shape-dbcluster-message-"))
   (marker common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (dbclusters common-lisp:nil :type
    (common-lisp:or dbcluster-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'dbcluster-message 'make-dbcluster-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input dbcluster-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input dbcluster-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dbclusters))
      (common-lisp:list
       (common-lisp:cons "DBClusters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input dbcluster-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition dbcluster-not-found-fault
     (rds-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'dbcluster-not-found-fault)))
(common-lisp:progn
 (common-lisp:deftype dbcluster-option-group-memberships ()
   '(trivial-types:proper-list dbcluster-option-group-status))
 (common-lisp:defun |make-dbcluster-option-group-memberships|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            dbcluster-option-group-status))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (dbcluster-option-group-status (:copier common-lisp:nil)
      (:conc-name "struct-shape-dbcluster-option-group-status-"))
   (dbcluster-option-group-name common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (status common-lisp:nil :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'dbcluster-option-group-status
                    'make-dbcluster-option-group-status))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          dbcluster-option-group-status))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          dbcluster-option-group-status))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dbcluster-option-group-name))
      (common-lisp:list
       (common-lisp:cons "DBClusterOptionGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          dbcluster-option-group-status))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (dbcluster-parameter-group (:copier common-lisp:nil)
      (:conc-name "struct-shape-dbcluster-parameter-group-"))
   (dbcluster-parameter-group-name common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (dbparameter-group-family common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (description common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (dbcluster-parameter-group-arn common-lisp:nil :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'dbcluster-parameter-group
                    'make-dbcluster-parameter-group))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          dbcluster-parameter-group))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          dbcluster-parameter-group))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dbcluster-parameter-group-name))
      (common-lisp:list
       (common-lisp:cons "DBClusterParameterGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dbparameter-group-family))
      (common-lisp:list
       (common-lisp:cons "DBParameterGroupFamily"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dbcluster-parameter-group-arn))
      (common-lisp:list
       (common-lisp:cons "DBClusterParameterGroupArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          dbcluster-parameter-group))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (dbcluster-parameter-group-details (:copier common-lisp:nil)
      (:conc-name "struct-shape-dbcluster-parameter-group-details-"))
   (parameters common-lisp:nil :type
    (common-lisp:or parameters-list common-lisp:null))
   (marker common-lisp:nil :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'dbcluster-parameter-group-details
                    'make-dbcluster-parameter-group-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          dbcluster-parameter-group-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          dbcluster-parameter-group-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'parameters))
      (common-lisp:list
       (common-lisp:cons "Parameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          dbcluster-parameter-group-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype dbcluster-parameter-group-list ()
   '(trivial-types:proper-list dbcluster-parameter-group))
 (common-lisp:defun |make-dbcluster-parameter-group-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            dbcluster-parameter-group))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (dbcluster-parameter-group-name-message (:copier common-lisp:nil)
      (:conc-name "struct-shape-dbcluster-parameter-group-name-message-"))
   (dbcluster-parameter-group-name common-lisp:nil :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'dbcluster-parameter-group-name-message
                    'make-dbcluster-parameter-group-name-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          dbcluster-parameter-group-name-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          dbcluster-parameter-group-name-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dbcluster-parameter-group-name))
      (common-lisp:list
       (common-lisp:cons "DBClusterParameterGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          dbcluster-parameter-group-name-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition dbcluster-parameter-group-not-found-fault
     (rds-error)
     common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'dbcluster-parameter-group-not-found-fault)))
(common-lisp:progn
 (common-lisp:defstruct
     (dbcluster-parameter-groups-message (:copier common-lisp:nil)
      (:conc-name "struct-shape-dbcluster-parameter-groups-message-"))
   (marker common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (dbcluster-parameter-groups common-lisp:nil :type
    (common-lisp:or dbcluster-parameter-group-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'dbcluster-parameter-groups-message
                    'make-dbcluster-parameter-groups-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          dbcluster-parameter-groups-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          dbcluster-parameter-groups-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dbcluster-parameter-groups))
      (common-lisp:list
       (common-lisp:cons "DBClusterParameterGroups"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          dbcluster-parameter-groups-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition dbcluster-quota-exceeded-fault
     (rds-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'dbcluster-quota-exceeded-fault)))
(common-lisp:progn
 (common-lisp:defstruct
     (dbcluster-role (:copier common-lisp:nil)
      (:conc-name "struct-shape-dbcluster-role-"))
   (role-arn common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (status common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (feature-name common-lisp:nil :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export (common-lisp:list 'dbcluster-role 'make-dbcluster-role))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input dbcluster-role))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input dbcluster-role))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "RoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'feature-name))
      (common-lisp:list
       (common-lisp:cons "FeatureName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input dbcluster-role))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition dbcluster-role-already-exists-fault
     (rds-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'dbcluster-role-already-exists-fault)))
(common-lisp:progn
 (common-lisp:define-condition dbcluster-role-not-found-fault
     (rds-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'dbcluster-role-not-found-fault)))
(common-lisp:progn
 (common-lisp:define-condition dbcluster-role-quota-exceeded-fault
     (rds-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'dbcluster-role-quota-exceeded-fault)))
(common-lisp:progn
 (common-lisp:deftype dbcluster-roles ()
   '(trivial-types:proper-list dbcluster-role))
 (common-lisp:defun |make-dbcluster-roles|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list dbcluster-role))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (dbcluster-snapshot (:copier common-lisp:nil)
      (:conc-name "struct-shape-dbcluster-snapshot-"))
   (availability-zones common-lisp:nil :type
    (common-lisp:or availability-zones common-lisp:null))
   (dbcluster-snapshot-identifier common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (dbcluster-identifier common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (snapshot-create-time common-lisp:nil :type
    (common-lisp:or tstamp common-lisp:null))
   (engine common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (engine-mode common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (allocated-storage common-lisp:nil :type
    (common-lisp:or integer common-lisp:null))
   (status common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (port common-lisp:nil :type (common-lisp:or integer common-lisp:null))
   (vpc-id common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (cluster-create-time common-lisp:nil :type
    (common-lisp:or tstamp common-lisp:null))
   (master-username common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (engine-version common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (license-model common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (snapshot-type common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (percent-progress common-lisp:nil :type
    (common-lisp:or integer common-lisp:null))
   (storage-encrypted common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (kms-key-id common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (dbcluster-snapshot-arn common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (source-dbcluster-snapshot-arn common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (iamdatabase-authentication-enabled common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (tag-list common-lisp:nil :type (common-lisp:or tag-list common-lisp:null))
   (dbsystem-id common-lisp:nil :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'dbcluster-snapshot 'make-dbcluster-snapshot))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input dbcluster-snapshot))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input dbcluster-snapshot))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'availability-zones))
      (common-lisp:list
       (common-lisp:cons "AvailabilityZones"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dbcluster-snapshot-identifier))
      (common-lisp:list
       (common-lisp:cons "DBClusterSnapshotIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dbcluster-identifier))
      (common-lisp:list
       (common-lisp:cons "DBClusterIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'snapshot-create-time))
      (common-lisp:list
       (common-lisp:cons "SnapshotCreateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'engine))
      (common-lisp:list
       (common-lisp:cons "Engine"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'engine-mode))
      (common-lisp:list
       (common-lisp:cons "EngineMode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'allocated-storage))
      (common-lisp:list
       (common-lisp:cons "AllocatedStorage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'port))
      (common-lisp:list
       (common-lisp:cons "Port"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpc-id))
      (common-lisp:list
       (common-lisp:cons "VpcId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster-create-time))
      (common-lisp:list
       (common-lisp:cons "ClusterCreateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'master-username))
      (common-lisp:list
       (common-lisp:cons "MasterUsername"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'engine-version))
      (common-lisp:list
       (common-lisp:cons "EngineVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'license-model))
      (common-lisp:list
       (common-lisp:cons "LicenseModel"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'snapshot-type))
      (common-lisp:list
       (common-lisp:cons "SnapshotType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'percent-progress))
      (common-lisp:list
       (common-lisp:cons "PercentProgress"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'storage-encrypted))
      (common-lisp:list
       (common-lisp:cons "StorageEncrypted"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kms-key-id))
      (common-lisp:list
       (common-lisp:cons "KmsKeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dbcluster-snapshot-arn))
      (common-lisp:list
       (common-lisp:cons "DBClusterSnapshotArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'source-dbcluster-snapshot-arn))
      (common-lisp:list
       (common-lisp:cons "SourceDBClusterSnapshotArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'iamdatabase-authentication-enabled))
      (common-lisp:list
       (common-lisp:cons "IAMDatabaseAuthenticationEnabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tag-list))
      (common-lisp:list
       (common-lisp:cons "TagList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dbsystem-id))
      (common-lisp:list
       (common-lisp:cons "DBSystemId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input dbcluster-snapshot))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition dbcluster-snapshot-already-exists-fault
     (rds-error)
     common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'dbcluster-snapshot-already-exists-fault)))
(common-lisp:progn
 (common-lisp:defstruct
     (dbcluster-snapshot-attribute (:copier common-lisp:nil)
      (:conc-name "struct-shape-dbcluster-snapshot-attribute-"))
   (attribute-name common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (attribute-values common-lisp:nil :type
    (common-lisp:or attribute-value-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'dbcluster-snapshot-attribute
                    'make-dbcluster-snapshot-attribute))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          dbcluster-snapshot-attribute))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          dbcluster-snapshot-attribute))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'attribute-name))
      (common-lisp:list
       (common-lisp:cons "AttributeName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'attribute-values))
      (common-lisp:list
       (common-lisp:cons "AttributeValues"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          dbcluster-snapshot-attribute))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype dbcluster-snapshot-attribute-list ()
   '(trivial-types:proper-list dbcluster-snapshot-attribute))
 (common-lisp:defun |make-dbcluster-snapshot-attribute-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            dbcluster-snapshot-attribute))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (dbcluster-snapshot-attributes-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-dbcluster-snapshot-attributes-result-"))
   (dbcluster-snapshot-identifier common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (dbcluster-snapshot-attributes common-lisp:nil :type
    (common-lisp:or dbcluster-snapshot-attribute-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'dbcluster-snapshot-attributes-result
                    'make-dbcluster-snapshot-attributes-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          dbcluster-snapshot-attributes-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          dbcluster-snapshot-attributes-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dbcluster-snapshot-identifier))
      (common-lisp:list
       (common-lisp:cons "DBClusterSnapshotIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dbcluster-snapshot-attributes))
      (common-lisp:list
       (common-lisp:cons "DBClusterSnapshotAttributes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          dbcluster-snapshot-attributes-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype dbcluster-snapshot-list ()
   '(trivial-types:proper-list dbcluster-snapshot))
 (common-lisp:defun |make-dbcluster-snapshot-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list dbcluster-snapshot))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (dbcluster-snapshot-message (:copier common-lisp:nil)
      (:conc-name "struct-shape-dbcluster-snapshot-message-"))
   (marker common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (dbcluster-snapshots common-lisp:nil :type
    (common-lisp:or dbcluster-snapshot-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'dbcluster-snapshot-message
                    'make-dbcluster-snapshot-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          dbcluster-snapshot-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          dbcluster-snapshot-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dbcluster-snapshots))
      (common-lisp:list
       (common-lisp:cons "DBClusterSnapshots"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          dbcluster-snapshot-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition dbcluster-snapshot-not-found-fault
     (rds-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'dbcluster-snapshot-not-found-fault)))
(common-lisp:progn
 (common-lisp:defstruct
     (dbengine-version (:copier common-lisp:nil)
      (:conc-name "struct-shape-dbengine-version-"))
   (engine common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (engine-version common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (dbparameter-group-family common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (dbengine-description common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (dbengine-version-description common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (default-character-set common-lisp:nil :type
    (common-lisp:or character-set common-lisp:null))
   (image common-lisp:nil :type
    (common-lisp:or custom-dbengine-version-ami common-lisp:null))
   (dbengine-media-type common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (supported-character-sets common-lisp:nil :type
    (common-lisp:or supported-character-sets-list common-lisp:null))
   (supported-nchar-character-sets common-lisp:nil :type
    (common-lisp:or supported-character-sets-list common-lisp:null))
   (valid-upgrade-target common-lisp:nil :type
    (common-lisp:or valid-upgrade-target-list common-lisp:null))
   (supported-timezones common-lisp:nil :type
    (common-lisp:or supported-timezones-list common-lisp:null))
   (exportable-log-types common-lisp:nil :type
    (common-lisp:or log-type-list common-lisp:null))
   (supports-log-exports-to-cloudwatch-logs common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (supports-read-replica common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (supported-engine-modes common-lisp:nil :type
    (common-lisp:or engine-mode-list common-lisp:null))
   (supported-feature-names common-lisp:nil :type
    (common-lisp:or feature-name-list common-lisp:null))
   (status common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (supports-parallel-query common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (supports-global-databases common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (major-engine-version common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (database-installation-files-s3bucket-name common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (database-installation-files-s3prefix common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (dbengine-version-arn common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (kmskey-id common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (create-time common-lisp:nil :type (common-lisp:or tstamp common-lisp:null))
   (tag-list common-lisp:nil :type (common-lisp:or tag-list common-lisp:null))
   (supports-babelfish common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (custom-dbengine-version-manifest common-lisp:nil :type
    (common-lisp:or custom-dbengine-version-manifest common-lisp:null))
   (supports-certificate-rotation-without-restart common-lisp:nil :type
    (common-lisp:or boolean-optional common-lisp:null))
   (supported-cacertificate-identifiers common-lisp:nil :type
    (common-lisp:or cacertificate-identifiers-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'dbengine-version 'make-dbengine-version))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input dbengine-version))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input dbengine-version))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'engine))
      (common-lisp:list
       (common-lisp:cons "Engine"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'engine-version))
      (common-lisp:list
       (common-lisp:cons "EngineVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dbparameter-group-family))
      (common-lisp:list
       (common-lisp:cons "DBParameterGroupFamily"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dbengine-description))
      (common-lisp:list
       (common-lisp:cons "DBEngineDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dbengine-version-description))
      (common-lisp:list
       (common-lisp:cons "DBEngineVersionDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'default-character-set))
      (common-lisp:list
       (common-lisp:cons "DefaultCharacterSet"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'image))
      (common-lisp:list
       (common-lisp:cons "Image"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dbengine-media-type))
      (common-lisp:list
       (common-lisp:cons "DBEngineMediaType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'supported-character-sets))
      (common-lisp:list
       (common-lisp:cons "SupportedCharacterSets"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'supported-nchar-character-sets))
      (common-lisp:list
       (common-lisp:cons "SupportedNcharCharacterSets"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'valid-upgrade-target))
      (common-lisp:list
       (common-lisp:cons "ValidUpgradeTarget"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'supported-timezones))
      (common-lisp:list
       (common-lisp:cons "SupportedTimezones"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'exportable-log-types))
      (common-lisp:list
       (common-lisp:cons "ExportableLogTypes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'supports-log-exports-to-cloudwatch-logs))
      (common-lisp:list
       (common-lisp:cons "SupportsLogExportsToCloudwatchLogs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'supports-read-replica))
      (common-lisp:list
       (common-lisp:cons "SupportsReadReplica"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'supported-engine-modes))
      (common-lisp:list
       (common-lisp:cons "SupportedEngineModes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'supported-feature-names))
      (common-lisp:list
       (common-lisp:cons "SupportedFeatureNames"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'supports-parallel-query))
      (common-lisp:list
       (common-lisp:cons "SupportsParallelQuery"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'supports-global-databases))
      (common-lisp:list
       (common-lisp:cons "SupportsGlobalDatabases"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'major-engine-version))
      (common-lisp:list
       (common-lisp:cons "MajorEngineVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'database-installation-files-s3bucket-name))
      (common-lisp:list
       (common-lisp:cons "DatabaseInstallationFilesS3BucketName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'database-installation-files-s3prefix))
      (common-lisp:list
       (common-lisp:cons "DatabaseInstallationFilesS3Prefix"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dbengine-version-arn))
      (common-lisp:list
       (common-lisp:cons "DBEngineVersionArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kmskey-id))
      (common-lisp:list
       (common-lisp:cons "KMSKeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'create-time))
      (common-lisp:list
       (common-lisp:cons "CreateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tag-list))
      (common-lisp:list
       (common-lisp:cons "TagList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'supports-babelfish))
      (common-lisp:list
       (common-lisp:cons "SupportsBabelfish"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'custom-dbengine-version-manifest))
      (common-lisp:list
       (common-lisp:cons "CustomDBEngineVersionManifest"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'supports-certificate-rotation-without-restart))
      (common-lisp:list
       (common-lisp:cons "SupportsCertificateRotationWithoutRestart"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'supported-cacertificate-identifiers))
      (common-lisp:list
       (common-lisp:cons "SupportedCACertificateIdentifiers"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input dbengine-version))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype dbengine-version-list ()
   '(trivial-types:proper-list dbengine-version))
 (common-lisp:defun |make-dbengine-version-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list dbengine-version))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (dbengine-version-message (:copier common-lisp:nil)
      (:conc-name "struct-shape-dbengine-version-message-"))
   (marker common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (dbengine-versions common-lisp:nil :type
    (common-lisp:or dbengine-version-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'dbengine-version-message 'make-dbengine-version-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          dbengine-version-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          dbengine-version-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dbengine-versions))
      (common-lisp:list
       (common-lisp:cons "DBEngineVersions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          dbengine-version-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (dbinstance (:copier common-lisp:nil)
      (:conc-name "struct-shape-dbinstance-"))
   (dbinstance-identifier common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (dbinstance-class common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (engine common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (dbinstance-status common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (automatic-restart-time common-lisp:nil :type
    (common-lisp:or tstamp common-lisp:null))
   (master-username common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (dbname common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (endpoint common-lisp:nil :type (common-lisp:or endpoint common-lisp:null))
   (allocated-storage common-lisp:nil :type
    (common-lisp:or integer common-lisp:null))
   (instance-create-time common-lisp:nil :type
    (common-lisp:or tstamp common-lisp:null))
   (preferred-backup-window common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (backup-retention-period common-lisp:nil :type
    (common-lisp:or integer common-lisp:null))
   (dbsecurity-groups common-lisp:nil :type
    (common-lisp:or dbsecurity-group-membership-list common-lisp:null))
   (vpc-security-groups common-lisp:nil :type
    (common-lisp:or vpc-security-group-membership-list common-lisp:null))
   (dbparameter-groups common-lisp:nil :type
    (common-lisp:or dbparameter-group-status-list common-lisp:null))
   (availability-zone common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (dbsubnet-group common-lisp:nil :type
    (common-lisp:or dbsubnet-group common-lisp:null))
   (preferred-maintenance-window common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (pending-modified-values common-lisp:nil :type
    (common-lisp:or pending-modified-values common-lisp:null))
   (latest-restorable-time common-lisp:nil :type
    (common-lisp:or tstamp common-lisp:null))
   (multi-az common-lisp:nil :type (common-lisp:or boolean common-lisp:null))
   (engine-version common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (auto-minor-version-upgrade common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (read-replica-source-dbinstance-identifier common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (read-replica-dbinstance-identifiers common-lisp:nil :type
    (common-lisp:or read-replica-dbinstance-identifier-list common-lisp:null))
   (read-replica-dbcluster-identifiers common-lisp:nil :type
    (common-lisp:or read-replica-dbcluster-identifier-list common-lisp:null))
   (replica-mode common-lisp:nil :type
    (common-lisp:or replica-mode common-lisp:null))
   (license-model common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (iops common-lisp:nil :type
    (common-lisp:or integer-optional common-lisp:null))
   (option-group-memberships common-lisp:nil :type
    (common-lisp:or option-group-membership-list common-lisp:null))
   (character-set-name common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (nchar-character-set-name common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (secondary-availability-zone common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (publicly-accessible common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (status-infos common-lisp:nil :type
    (common-lisp:or dbinstance-status-info-list common-lisp:null))
   (storage-type common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (tde-credential-arn common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (db-instance-port common-lisp:nil :type
    (common-lisp:or integer common-lisp:null))
   (dbcluster-identifier common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (storage-encrypted common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (kms-key-id common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (dbi-resource-id common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (cacertificate-identifier common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (domain-memberships common-lisp:nil :type
    (common-lisp:or domain-membership-list common-lisp:null))
   (copy-tags-to-snapshot common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (monitoring-interval common-lisp:nil :type
    (common-lisp:or integer-optional common-lisp:null))
   (enhanced-monitoring-resource-arn common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (monitoring-role-arn common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (promotion-tier common-lisp:nil :type
    (common-lisp:or integer-optional common-lisp:null))
   (dbinstance-arn common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (timezone common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (iamdatabase-authentication-enabled common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (performance-insights-enabled common-lisp:nil :type
    (common-lisp:or boolean-optional common-lisp:null))
   (performance-insights-kmskey-id common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (performance-insights-retention-period common-lisp:nil :type
    (common-lisp:or integer-optional common-lisp:null))
   (enabled-cloudwatch-logs-exports common-lisp:nil :type
    (common-lisp:or log-type-list common-lisp:null))
   (processor-features common-lisp:nil :type
    (common-lisp:or processor-feature-list common-lisp:null))
   (deletion-protection common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (associated-roles common-lisp:nil :type
    (common-lisp:or dbinstance-roles common-lisp:null))
   (listener-endpoint common-lisp:nil :type
    (common-lisp:or endpoint common-lisp:null))
   (max-allocated-storage common-lisp:nil :type
    (common-lisp:or integer-optional common-lisp:null))
   (tag-list common-lisp:nil :type (common-lisp:or tag-list common-lisp:null))
   (dbinstance-automated-backups-replications common-lisp:nil :type
    (common-lisp:or dbinstance-automated-backups-replication-list
                    common-lisp:null))
   (customer-owned-ip-enabled common-lisp:nil :type
    (common-lisp:or boolean-optional common-lisp:null))
   (aws-backup-recovery-point-arn common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (activity-stream-status common-lisp:nil :type
    (common-lisp:or activity-stream-status common-lisp:null))
   (activity-stream-kms-key-id common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (activity-stream-kinesis-stream-name common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (activity-stream-mode common-lisp:nil :type
    (common-lisp:or activity-stream-mode common-lisp:null))
   (activity-stream-engine-native-audit-fields-included common-lisp:nil :type
    (common-lisp:or boolean-optional common-lisp:null))
   (automation-mode common-lisp:nil :type
    (common-lisp:or automation-mode common-lisp:null))
   (resume-full-automation-mode-time common-lisp:nil :type
    (common-lisp:or tstamp common-lisp:null))
   (custom-iam-instance-profile common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (backup-target common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (network-type common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (activity-stream-policy-status common-lisp:nil :type
    (common-lisp:or activity-stream-policy-status common-lisp:null))
   (storage-throughput common-lisp:nil :type
    (common-lisp:or integer-optional common-lisp:null))
   (dbsystem-id common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (master-user-secret common-lisp:nil :type
    (common-lisp:or master-user-secret common-lisp:null))
   (certificate-details common-lisp:nil :type
    (common-lisp:or certificate-details common-lisp:null)))
 (common-lisp:export (common-lisp:list 'dbinstance 'make-dbinstance))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input dbinstance))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input dbinstance))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dbinstance-identifier))
      (common-lisp:list
       (common-lisp:cons "DBInstanceIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dbinstance-class))
      (common-lisp:list
       (common-lisp:cons "DBInstanceClass"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'engine))
      (common-lisp:list
       (common-lisp:cons "Engine"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dbinstance-status))
      (common-lisp:list
       (common-lisp:cons "DBInstanceStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'automatic-restart-time))
      (common-lisp:list
       (common-lisp:cons "AutomaticRestartTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'master-username))
      (common-lisp:list
       (common-lisp:cons "MasterUsername"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dbname))
      (common-lisp:list
       (common-lisp:cons "DBName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'endpoint))
      (common-lisp:list
       (common-lisp:cons "Endpoint"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'allocated-storage))
      (common-lisp:list
       (common-lisp:cons "AllocatedStorage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'instance-create-time))
      (common-lisp:list
       (common-lisp:cons "InstanceCreateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'preferred-backup-window))
      (common-lisp:list
       (common-lisp:cons "PreferredBackupWindow"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'backup-retention-period))
      (common-lisp:list
       (common-lisp:cons "BackupRetentionPeriod"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dbsecurity-groups))
      (common-lisp:list
       (common-lisp:cons "DBSecurityGroups"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpc-security-groups))
      (common-lisp:list
       (common-lisp:cons "VpcSecurityGroups"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dbparameter-groups))
      (common-lisp:list
       (common-lisp:cons "DBParameterGroups"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'availability-zone))
      (common-lisp:list
       (common-lisp:cons "AvailabilityZone"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dbsubnet-group))
      (common-lisp:list
       (common-lisp:cons "DBSubnetGroup"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'preferred-maintenance-window))
      (common-lisp:list
       (common-lisp:cons "PreferredMaintenanceWindow"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'pending-modified-values))
      (common-lisp:list
       (common-lisp:cons "PendingModifiedValues"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'latest-restorable-time))
      (common-lisp:list
       (common-lisp:cons "LatestRestorableTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'multi-az))
      (common-lisp:list
       (common-lisp:cons "MultiAZ"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'engine-version))
      (common-lisp:list
       (common-lisp:cons "EngineVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'auto-minor-version-upgrade))
      (common-lisp:list
       (common-lisp:cons "AutoMinorVersionUpgrade"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'read-replica-source-dbinstance-identifier))
      (common-lisp:list
       (common-lisp:cons "ReadReplicaSourceDBInstanceIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'read-replica-dbinstance-identifiers))
      (common-lisp:list
       (common-lisp:cons "ReadReplicaDBInstanceIdentifiers"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'read-replica-dbcluster-identifiers))
      (common-lisp:list
       (common-lisp:cons "ReadReplicaDBClusterIdentifiers"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'replica-mode))
      (common-lisp:list
       (common-lisp:cons "ReplicaMode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'license-model))
      (common-lisp:list
       (common-lisp:cons "LicenseModel"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'iops))
      (common-lisp:list
       (common-lisp:cons "Iops"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'option-group-memberships))
      (common-lisp:list
       (common-lisp:cons "OptionGroupMemberships"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'character-set-name))
      (common-lisp:list
       (common-lisp:cons "CharacterSetName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'nchar-character-set-name))
      (common-lisp:list
       (common-lisp:cons "NcharCharacterSetName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'secondary-availability-zone))
      (common-lisp:list
       (common-lisp:cons "SecondaryAvailabilityZone"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'publicly-accessible))
      (common-lisp:list
       (common-lisp:cons "PubliclyAccessible"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status-infos))
      (common-lisp:list
       (common-lisp:cons "StatusInfos"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'storage-type))
      (common-lisp:list
       (common-lisp:cons "StorageType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tde-credential-arn))
      (common-lisp:list
       (common-lisp:cons "TdeCredentialArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'db-instance-port))
      (common-lisp:list
       (common-lisp:cons "DbInstancePort"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dbcluster-identifier))
      (common-lisp:list
       (common-lisp:cons "DBClusterIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'storage-encrypted))
      (common-lisp:list
       (common-lisp:cons "StorageEncrypted"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kms-key-id))
      (common-lisp:list
       (common-lisp:cons "KmsKeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dbi-resource-id))
      (common-lisp:list
       (common-lisp:cons "DbiResourceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cacertificate-identifier))
      (common-lisp:list
       (common-lisp:cons "CACertificateIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-memberships))
      (common-lisp:list
       (common-lisp:cons "DomainMemberships"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'copy-tags-to-snapshot))
      (common-lisp:list
       (common-lisp:cons "CopyTagsToSnapshot"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'monitoring-interval))
      (common-lisp:list
       (common-lisp:cons "MonitoringInterval"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'enhanced-monitoring-resource-arn))
      (common-lisp:list
       (common-lisp:cons "EnhancedMonitoringResourceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'monitoring-role-arn))
      (common-lisp:list
       (common-lisp:cons "MonitoringRoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'promotion-tier))
      (common-lisp:list
       (common-lisp:cons "PromotionTier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dbinstance-arn))
      (common-lisp:list
       (common-lisp:cons "DBInstanceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'timezone))
      (common-lisp:list
       (common-lisp:cons "Timezone"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'iamdatabase-authentication-enabled))
      (common-lisp:list
       (common-lisp:cons "IAMDatabaseAuthenticationEnabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'performance-insights-enabled))
      (common-lisp:list
       (common-lisp:cons "PerformanceInsightsEnabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'performance-insights-kmskey-id))
      (common-lisp:list
       (common-lisp:cons "PerformanceInsightsKMSKeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'performance-insights-retention-period))
      (common-lisp:list
       (common-lisp:cons "PerformanceInsightsRetentionPeriod"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'enabled-cloudwatch-logs-exports))
      (common-lisp:list
       (common-lisp:cons "EnabledCloudwatchLogsExports"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'processor-features))
      (common-lisp:list
       (common-lisp:cons "ProcessorFeatures"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'deletion-protection))
      (common-lisp:list
       (common-lisp:cons "DeletionProtection"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'associated-roles))
      (common-lisp:list
       (common-lisp:cons "AssociatedRoles"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'listener-endpoint))
      (common-lisp:list
       (common-lisp:cons "ListenerEndpoint"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'max-allocated-storage))
      (common-lisp:list
       (common-lisp:cons "MaxAllocatedStorage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tag-list))
      (common-lisp:list
       (common-lisp:cons "TagList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dbinstance-automated-backups-replications))
      (common-lisp:list
       (common-lisp:cons "DBInstanceAutomatedBackupsReplications"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'customer-owned-ip-enabled))
      (common-lisp:list
       (common-lisp:cons "CustomerOwnedIpEnabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'aws-backup-recovery-point-arn))
      (common-lisp:list
       (common-lisp:cons "AwsBackupRecoveryPointArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'activity-stream-status))
      (common-lisp:list
       (common-lisp:cons "ActivityStreamStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'activity-stream-kms-key-id))
      (common-lisp:list
       (common-lisp:cons "ActivityStreamKmsKeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'activity-stream-kinesis-stream-name))
      (common-lisp:list
       (common-lisp:cons "ActivityStreamKinesisStreamName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'activity-stream-mode))
      (common-lisp:list
       (common-lisp:cons "ActivityStreamMode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'activity-stream-engine-native-audit-fields-included))
      (common-lisp:list
       (common-lisp:cons "ActivityStreamEngineNativeAuditFieldsIncluded"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'automation-mode))
      (common-lisp:list
       (common-lisp:cons "AutomationMode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'resume-full-automation-mode-time))
      (common-lisp:list
       (common-lisp:cons "ResumeFullAutomationModeTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'custom-iam-instance-profile))
      (common-lisp:list
       (common-lisp:cons "CustomIamInstanceProfile"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'backup-target))
      (common-lisp:list
       (common-lisp:cons "BackupTarget"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'network-type))
      (common-lisp:list
       (common-lisp:cons "NetworkType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'activity-stream-policy-status))
      (common-lisp:list
       (common-lisp:cons "ActivityStreamPolicyStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'storage-throughput))
      (common-lisp:list
       (common-lisp:cons "StorageThroughput"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dbsystem-id))
      (common-lisp:list
       (common-lisp:cons "DBSystemId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'master-user-secret))
      (common-lisp:list
       (common-lisp:cons "MasterUserSecret"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'certificate-details))
      (common-lisp:list
       (common-lisp:cons "CertificateDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input dbinstance))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition dbinstance-already-exists-fault
     (rds-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'dbinstance-already-exists-fault)))
(common-lisp:progn
 (common-lisp:defstruct
     (dbinstance-automated-backup (:copier common-lisp:nil)
      (:conc-name "struct-shape-dbinstance-automated-backup-"))
   (dbinstance-arn common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (dbi-resource-id common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (region common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (dbinstance-identifier common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (restore-window common-lisp:nil :type
    (common-lisp:or restore-window common-lisp:null))
   (allocated-storage common-lisp:nil :type
    (common-lisp:or integer common-lisp:null))
   (status common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (port common-lisp:nil :type (common-lisp:or integer common-lisp:null))
   (availability-zone common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (vpc-id common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (instance-create-time common-lisp:nil :type
    (common-lisp:or tstamp common-lisp:null))
   (master-username common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (engine common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (engine-version common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (license-model common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (iops common-lisp:nil :type
    (common-lisp:or integer-optional common-lisp:null))
   (option-group-name common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (tde-credential-arn common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (encrypted common-lisp:nil :type (common-lisp:or boolean common-lisp:null))
   (storage-type common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (kms-key-id common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (timezone common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (iamdatabase-authentication-enabled common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (backup-retention-period common-lisp:nil :type
    (common-lisp:or integer-optional common-lisp:null))
   (dbinstance-automated-backups-arn common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (dbinstance-automated-backups-replications common-lisp:nil :type
    (common-lisp:or dbinstance-automated-backups-replication-list
                    common-lisp:null))
   (backup-target common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (storage-throughput common-lisp:nil :type
    (common-lisp:or integer-optional common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'dbinstance-automated-backup
                    'make-dbinstance-automated-backup))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          dbinstance-automated-backup))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          dbinstance-automated-backup))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dbinstance-arn))
      (common-lisp:list
       (common-lisp:cons "DBInstanceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dbi-resource-id))
      (common-lisp:list
       (common-lisp:cons "DbiResourceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'region))
      (common-lisp:list
       (common-lisp:cons "Region"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dbinstance-identifier))
      (common-lisp:list
       (common-lisp:cons "DBInstanceIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'restore-window))
      (common-lisp:list
       (common-lisp:cons "RestoreWindow"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'allocated-storage))
      (common-lisp:list
       (common-lisp:cons "AllocatedStorage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'port))
      (common-lisp:list
       (common-lisp:cons "Port"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'availability-zone))
      (common-lisp:list
       (common-lisp:cons "AvailabilityZone"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpc-id))
      (common-lisp:list
       (common-lisp:cons "VpcId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'instance-create-time))
      (common-lisp:list
       (common-lisp:cons "InstanceCreateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'master-username))
      (common-lisp:list
       (common-lisp:cons "MasterUsername"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'engine))
      (common-lisp:list
       (common-lisp:cons "Engine"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'engine-version))
      (common-lisp:list
       (common-lisp:cons "EngineVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'license-model))
      (common-lisp:list
       (common-lisp:cons "LicenseModel"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'iops))
      (common-lisp:list
       (common-lisp:cons "Iops"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'option-group-name))
      (common-lisp:list
       (common-lisp:cons "OptionGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tde-credential-arn))
      (common-lisp:list
       (common-lisp:cons "TdeCredentialArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'encrypted))
      (common-lisp:list
       (common-lisp:cons "Encrypted"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'storage-type))
      (common-lisp:list
       (common-lisp:cons "StorageType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kms-key-id))
      (common-lisp:list
       (common-lisp:cons "KmsKeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'timezone))
      (common-lisp:list
       (common-lisp:cons "Timezone"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'iamdatabase-authentication-enabled))
      (common-lisp:list
       (common-lisp:cons "IAMDatabaseAuthenticationEnabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'backup-retention-period))
      (common-lisp:list
       (common-lisp:cons "BackupRetentionPeriod"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dbinstance-automated-backups-arn))
      (common-lisp:list
       (common-lisp:cons "DBInstanceAutomatedBackupsArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dbinstance-automated-backups-replications))
      (common-lisp:list
       (common-lisp:cons "DBInstanceAutomatedBackupsReplications"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'backup-target))
      (common-lisp:list
       (common-lisp:cons "BackupTarget"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'storage-throughput))
      (common-lisp:list
       (common-lisp:cons "StorageThroughput"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          dbinstance-automated-backup))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype dbinstance-automated-backup-list ()
   '(trivial-types:proper-list dbinstance-automated-backup))
 (common-lisp:defun |make-dbinstance-automated-backup-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            dbinstance-automated-backup))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (dbinstance-automated-backup-message (:copier common-lisp:nil)
      (:conc-name "struct-shape-dbinstance-automated-backup-message-"))
   (marker common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (dbinstance-automated-backups common-lisp:nil :type
    (common-lisp:or dbinstance-automated-backup-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'dbinstance-automated-backup-message
                    'make-dbinstance-automated-backup-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          dbinstance-automated-backup-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          dbinstance-automated-backup-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dbinstance-automated-backups))
      (common-lisp:list
       (common-lisp:cons "DBInstanceAutomatedBackups"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          dbinstance-automated-backup-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition dbinstance-automated-backup-not-found-fault
     (rds-error)
     common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'dbinstance-automated-backup-not-found-fault)))
(common-lisp:progn
 (common-lisp:define-condition dbinstance-automated-backup-quota-exceeded-fault
     (rds-error)
     common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'dbinstance-automated-backup-quota-exceeded-fault)))
(common-lisp:progn
 (common-lisp:defstruct
     (dbinstance-automated-backups-replication (:copier common-lisp:nil)
      (:conc-name "struct-shape-dbinstance-automated-backups-replication-"))
   (dbinstance-automated-backups-arn common-lisp:nil :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'dbinstance-automated-backups-replication
                    'make-dbinstance-automated-backups-replication))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          dbinstance-automated-backups-replication))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          dbinstance-automated-backups-replication))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dbinstance-automated-backups-arn))
      (common-lisp:list
       (common-lisp:cons "DBInstanceAutomatedBackupsArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          dbinstance-automated-backups-replication))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype dbinstance-automated-backups-replication-list ()
   '(trivial-types:proper-list dbinstance-automated-backups-replication))
 (common-lisp:defun |make-dbinstance-automated-backups-replication-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            dbinstance-automated-backups-replication))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype dbinstance-list ()
   '(trivial-types:proper-list dbinstance))
 (common-lisp:defun |make-dbinstance-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list dbinstance))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (dbinstance-message (:copier common-lisp:nil)
      (:conc-name "struct-shape-dbinstance-message-"))
   (marker common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (dbinstances common-lisp:nil :type
    (common-lisp:or dbinstance-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'dbinstance-message 'make-dbinstance-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input dbinstance-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input dbinstance-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dbinstances))
      (common-lisp:list
       (common-lisp:cons "DBInstances"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input dbinstance-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition dbinstance-not-found-fault
     (rds-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'dbinstance-not-found-fault)))
(common-lisp:progn
 (common-lisp:defstruct
     (dbinstance-role (:copier common-lisp:nil)
      (:conc-name "struct-shape-dbinstance-role-"))
   (role-arn common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (feature-name common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (status common-lisp:nil :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export (common-lisp:list 'dbinstance-role 'make-dbinstance-role))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input dbinstance-role))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input dbinstance-role))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "RoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'feature-name))
      (common-lisp:list
       (common-lisp:cons "FeatureName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input dbinstance-role))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition dbinstance-role-already-exists-fault
     (rds-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'dbinstance-role-already-exists-fault)))
(common-lisp:progn
 (common-lisp:define-condition dbinstance-role-not-found-fault
     (rds-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'dbinstance-role-not-found-fault)))
(common-lisp:progn
 (common-lisp:define-condition dbinstance-role-quota-exceeded-fault
     (rds-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'dbinstance-role-quota-exceeded-fault)))
(common-lisp:progn
 (common-lisp:deftype dbinstance-roles ()
   '(trivial-types:proper-list dbinstance-role))
 (common-lisp:defun |make-dbinstance-roles|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list dbinstance-role))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (dbinstance-status-info (:copier common-lisp:nil)
      (:conc-name "struct-shape-dbinstance-status-info-"))
   (status-type common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (normal common-lisp:nil :type (common-lisp:or boolean common-lisp:null))
   (status common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (message common-lisp:nil :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'dbinstance-status-info 'make-dbinstance-status-info))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          dbinstance-status-info))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          dbinstance-status-info))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status-type))
      (common-lisp:list
       (common-lisp:cons "StatusType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'normal))
      (common-lisp:list
       (common-lisp:cons "Normal"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message))
      (common-lisp:list
       (common-lisp:cons "Message"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          dbinstance-status-info))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype dbinstance-status-info-list ()
   '(trivial-types:proper-list dbinstance-status-info))
 (common-lisp:defun |make-dbinstance-status-info-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list dbinstance-status-info))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition dblog-file-not-found-fault
     (rds-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'dblog-file-not-found-fault)))
(common-lisp:progn
 (common-lisp:defstruct
     (dbparameter-group (:copier common-lisp:nil)
      (:conc-name "struct-shape-dbparameter-group-"))
   (dbparameter-group-name common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (dbparameter-group-family common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (description common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (dbparameter-group-arn common-lisp:nil :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'dbparameter-group 'make-dbparameter-group))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input dbparameter-group))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input dbparameter-group))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dbparameter-group-name))
      (common-lisp:list
       (common-lisp:cons "DBParameterGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dbparameter-group-family))
      (common-lisp:list
       (common-lisp:cons "DBParameterGroupFamily"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dbparameter-group-arn))
      (common-lisp:list
       (common-lisp:cons "DBParameterGroupArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input dbparameter-group))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition dbparameter-group-already-exists-fault
     (rds-error)
     common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'dbparameter-group-already-exists-fault)))
(common-lisp:progn
 (common-lisp:defstruct
     (dbparameter-group-details (:copier common-lisp:nil)
      (:conc-name "struct-shape-dbparameter-group-details-"))
   (parameters common-lisp:nil :type
    (common-lisp:or parameters-list common-lisp:null))
   (marker common-lisp:nil :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'dbparameter-group-details
                    'make-dbparameter-group-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          dbparameter-group-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          dbparameter-group-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'parameters))
      (common-lisp:list
       (common-lisp:cons "Parameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          dbparameter-group-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype dbparameter-group-list ()
   '(trivial-types:proper-list dbparameter-group))
 (common-lisp:defun |make-dbparameter-group-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list dbparameter-group))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (dbparameter-group-name-message (:copier common-lisp:nil)
      (:conc-name "struct-shape-dbparameter-group-name-message-"))
   (dbparameter-group-name common-lisp:nil :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'dbparameter-group-name-message
                    'make-dbparameter-group-name-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          dbparameter-group-name-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          dbparameter-group-name-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dbparameter-group-name))
      (common-lisp:list
       (common-lisp:cons "DBParameterGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          dbparameter-group-name-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition dbparameter-group-not-found-fault
     (rds-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'dbparameter-group-not-found-fault)))
(common-lisp:progn
 (common-lisp:define-condition dbparameter-group-quota-exceeded-fault
     (rds-error)
     common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'dbparameter-group-quota-exceeded-fault)))
(common-lisp:progn
 (common-lisp:defstruct
     (dbparameter-group-status (:copier common-lisp:nil)
      (:conc-name "struct-shape-dbparameter-group-status-"))
   (dbparameter-group-name common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (parameter-apply-status common-lisp:nil :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'dbparameter-group-status 'make-dbparameter-group-status))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          dbparameter-group-status))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          dbparameter-group-status))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dbparameter-group-name))
      (common-lisp:list
       (common-lisp:cons "DBParameterGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'parameter-apply-status))
      (common-lisp:list
       (common-lisp:cons "ParameterApplyStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          dbparameter-group-status))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype dbparameter-group-status-list ()
   '(trivial-types:proper-list dbparameter-group-status))
 (common-lisp:defun |make-dbparameter-group-status-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            dbparameter-group-status))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (dbparameter-groups-message (:copier common-lisp:nil)
      (:conc-name "struct-shape-dbparameter-groups-message-"))
   (marker common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (dbparameter-groups common-lisp:nil :type
    (common-lisp:or dbparameter-group-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'dbparameter-groups-message
                    'make-dbparameter-groups-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          dbparameter-groups-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          dbparameter-groups-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dbparameter-groups))
      (common-lisp:list
       (common-lisp:cons "DBParameterGroups"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          dbparameter-groups-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (dbproxy (:copier common-lisp:nil) (:conc-name "struct-shape-dbproxy-"))
   (dbproxy-name common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (dbproxy-arn common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or dbproxy-status common-lisp:null))
   (engine-family common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (vpc-id common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (vpc-security-group-ids common-lisp:nil :type
    (common-lisp:or string-list common-lisp:null))
   (vpc-subnet-ids common-lisp:nil :type
    (common-lisp:or string-list common-lisp:null))
   (auth common-lisp:nil :type
    (common-lisp:or user-auth-config-info-list common-lisp:null))
   (role-arn common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (endpoint common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (require-tls common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (idle-client-timeout common-lisp:nil :type
    (common-lisp:or integer common-lisp:null))
   (debug-logging common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (created-date common-lisp:nil :type
    (common-lisp:or tstamp common-lisp:null))
   (updated-date common-lisp:nil :type
    (common-lisp:or tstamp common-lisp:null)))
 (common-lisp:export (common-lisp:list 'dbproxy 'make-dbproxy))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input dbproxy))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input dbproxy))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dbproxy-name))
      (common-lisp:list
       (common-lisp:cons "DBProxyName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dbproxy-arn))
      (common-lisp:list
       (common-lisp:cons "DBProxyArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'engine-family))
      (common-lisp:list
       (common-lisp:cons "EngineFamily"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpc-id))
      (common-lisp:list
       (common-lisp:cons "VpcId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'vpc-security-group-ids))
      (common-lisp:list
       (common-lisp:cons "VpcSecurityGroupIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpc-subnet-ids))
      (common-lisp:list
       (common-lisp:cons "VpcSubnetIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'auth))
      (common-lisp:list
       (common-lisp:cons "Auth"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "RoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'endpoint))
      (common-lisp:list
       (common-lisp:cons "Endpoint"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'require-tls))
      (common-lisp:list
       (common-lisp:cons "RequireTLS"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'idle-client-timeout))
      (common-lisp:list
       (common-lisp:cons "IdleClientTimeout"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'debug-logging))
      (common-lisp:list
       (common-lisp:cons "DebugLogging"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-date))
      (common-lisp:list
       (common-lisp:cons "CreatedDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'updated-date))
      (common-lisp:list
       (common-lisp:cons "UpdatedDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input dbproxy))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition dbproxy-already-exists-fault
     (rds-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'dbproxy-already-exists-fault)))
(common-lisp:progn
 (common-lisp:defstruct
     (dbproxy-endpoint (:copier common-lisp:nil)
      (:conc-name "struct-shape-dbproxy-endpoint-"))
   (dbproxy-endpoint-name common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (dbproxy-endpoint-arn common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (dbproxy-name common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or dbproxy-endpoint-status common-lisp:null))
   (vpc-id common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (vpc-security-group-ids common-lisp:nil :type
    (common-lisp:or string-list common-lisp:null))
   (vpc-subnet-ids common-lisp:nil :type
    (common-lisp:or string-list common-lisp:null))
   (endpoint common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (created-date common-lisp:nil :type
    (common-lisp:or tstamp common-lisp:null))
   (target-role common-lisp:nil :type
    (common-lisp:or dbproxy-endpoint-target-role common-lisp:null))
   (is-default common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'dbproxy-endpoint 'make-dbproxy-endpoint))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input dbproxy-endpoint))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input dbproxy-endpoint))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dbproxy-endpoint-name))
      (common-lisp:list
       (common-lisp:cons "DBProxyEndpointName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dbproxy-endpoint-arn))
      (common-lisp:list
       (common-lisp:cons "DBProxyEndpointArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dbproxy-name))
      (common-lisp:list
       (common-lisp:cons "DBProxyName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpc-id))
      (common-lisp:list
       (common-lisp:cons "VpcId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'vpc-security-group-ids))
      (common-lisp:list
       (common-lisp:cons "VpcSecurityGroupIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpc-subnet-ids))
      (common-lisp:list
       (common-lisp:cons "VpcSubnetIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'endpoint))
      (common-lisp:list
       (common-lisp:cons "Endpoint"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-date))
      (common-lisp:list
       (common-lisp:cons "CreatedDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target-role))
      (common-lisp:list
       (common-lisp:cons "TargetRole"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'is-default))
      (common-lisp:list
       (common-lisp:cons "IsDefault"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input dbproxy-endpoint))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition dbproxy-endpoint-already-exists-fault
     (rds-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'dbproxy-endpoint-already-exists-fault)))
(common-lisp:progn
 (common-lisp:deftype dbproxy-endpoint-list ()
   '(trivial-types:proper-list dbproxy-endpoint))
 (common-lisp:defun |make-dbproxy-endpoint-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list dbproxy-endpoint))
   aws-sdk/generator/shape::members))
(common-lisp:deftype dbproxy-endpoint-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition dbproxy-endpoint-not-found-fault
     (rds-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'dbproxy-endpoint-not-found-fault)))
(common-lisp:progn
 (common-lisp:define-condition dbproxy-endpoint-quota-exceeded-fault
     (rds-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'dbproxy-endpoint-quota-exceeded-fault)))
(common-lisp:deftype dbproxy-endpoint-status () 'common-lisp:string)
(common-lisp:deftype dbproxy-endpoint-target-role () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype dbproxy-list () '(trivial-types:proper-list dbproxy))
 (common-lisp:defun |make-dbproxy-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list dbproxy))
   aws-sdk/generator/shape::members))
(common-lisp:deftype dbproxy-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition dbproxy-not-found-fault
     (rds-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'dbproxy-not-found-fault)))
(common-lisp:progn
 (common-lisp:define-condition dbproxy-quota-exceeded-fault
     (rds-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'dbproxy-quota-exceeded-fault)))
(common-lisp:deftype dbproxy-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (dbproxy-target (:copier common-lisp:nil)
      (:conc-name "struct-shape-dbproxy-target-"))
   (target-arn common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (endpoint common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (tracked-cluster-id common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (rds-resource-id common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (port common-lisp:nil :type (common-lisp:or integer common-lisp:null))
   (type common-lisp:nil :type (common-lisp:or target-type common-lisp:null))
   (role common-lisp:nil :type (common-lisp:or target-role common-lisp:null))
   (target-health common-lisp:nil :type
    (common-lisp:or target-health common-lisp:null)))
 (common-lisp:export (common-lisp:list 'dbproxy-target 'make-dbproxy-target))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input dbproxy-target))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input dbproxy-target))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target-arn))
      (common-lisp:list
       (common-lisp:cons "TargetArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'endpoint))
      (common-lisp:list
       (common-lisp:cons "Endpoint"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tracked-cluster-id))
      (common-lisp:list
       (common-lisp:cons "TrackedClusterId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rds-resource-id))
      (common-lisp:list
       (common-lisp:cons "RdsResourceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'port))
      (common-lisp:list
       (common-lisp:cons "Port"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role))
      (common-lisp:list
       (common-lisp:cons "Role"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target-health))
      (common-lisp:list
       (common-lisp:cons "TargetHealth"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input dbproxy-target))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition dbproxy-target-already-registered-fault
     (rds-error)
     common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'dbproxy-target-already-registered-fault)))
(common-lisp:progn
 (common-lisp:defstruct
     (dbproxy-target-group (:copier common-lisp:nil)
      (:conc-name "struct-shape-dbproxy-target-group-"))
   (dbproxy-name common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (target-group-name common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (target-group-arn common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (is-default common-lisp:nil :type (common-lisp:or boolean common-lisp:null))
   (status common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (connection-pool-config common-lisp:nil :type
    (common-lisp:or connection-pool-configuration-info common-lisp:null))
   (created-date common-lisp:nil :type
    (common-lisp:or tstamp common-lisp:null))
   (updated-date common-lisp:nil :type
    (common-lisp:or tstamp common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'dbproxy-target-group 'make-dbproxy-target-group))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input dbproxy-target-group))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input dbproxy-target-group))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dbproxy-name))
      (common-lisp:list
       (common-lisp:cons "DBProxyName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target-group-name))
      (common-lisp:list
       (common-lisp:cons "TargetGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target-group-arn))
      (common-lisp:list
       (common-lisp:cons "TargetGroupArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'is-default))
      (common-lisp:list
       (common-lisp:cons "IsDefault"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'connection-pool-config))
      (common-lisp:list
       (common-lisp:cons "ConnectionPoolConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-date))
      (common-lisp:list
       (common-lisp:cons "CreatedDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'updated-date))
      (common-lisp:list
       (common-lisp:cons "UpdatedDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input dbproxy-target-group))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition dbproxy-target-group-not-found-fault
     (rds-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'dbproxy-target-group-not-found-fault)))
(common-lisp:progn
 (common-lisp:define-condition dbproxy-target-not-found-fault
     (rds-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'dbproxy-target-not-found-fault)))
(common-lisp:progn
 (common-lisp:defstruct
     (dbsecurity-group (:copier common-lisp:nil)
      (:conc-name "struct-shape-dbsecurity-group-"))
   (owner-id common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (dbsecurity-group-name common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (dbsecurity-group-description common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (vpc-id common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (ec2security-groups common-lisp:nil :type
    (common-lisp:or ec2security-group-list common-lisp:null))
   (ipranges common-lisp:nil :type
    (common-lisp:or iprange-list common-lisp:null))
   (dbsecurity-group-arn common-lisp:nil :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'dbsecurity-group 'make-dbsecurity-group))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input dbsecurity-group))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input dbsecurity-group))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'owner-id))
      (common-lisp:list
       (common-lisp:cons "OwnerId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dbsecurity-group-name))
      (common-lisp:list
       (common-lisp:cons "DBSecurityGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dbsecurity-group-description))
      (common-lisp:list
       (common-lisp:cons "DBSecurityGroupDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpc-id))
      (common-lisp:list
       (common-lisp:cons "VpcId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ec2security-groups))
      (common-lisp:list
       (common-lisp:cons "EC2SecurityGroups"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ipranges))
      (common-lisp:list
       (common-lisp:cons "IPRanges"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dbsecurity-group-arn))
      (common-lisp:list
       (common-lisp:cons "DBSecurityGroupArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input dbsecurity-group))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition dbsecurity-group-already-exists-fault
     (rds-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'dbsecurity-group-already-exists-fault)))
(common-lisp:progn
 (common-lisp:defstruct
     (dbsecurity-group-membership (:copier common-lisp:nil)
      (:conc-name "struct-shape-dbsecurity-group-membership-"))
   (dbsecurity-group-name common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (status common-lisp:nil :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'dbsecurity-group-membership
                    'make-dbsecurity-group-membership))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          dbsecurity-group-membership))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          dbsecurity-group-membership))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dbsecurity-group-name))
      (common-lisp:list
       (common-lisp:cons "DBSecurityGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          dbsecurity-group-membership))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype dbsecurity-group-membership-list ()
   '(trivial-types:proper-list dbsecurity-group-membership))
 (common-lisp:defun |make-dbsecurity-group-membership-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            dbsecurity-group-membership))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (dbsecurity-group-message (:copier common-lisp:nil)
      (:conc-name "struct-shape-dbsecurity-group-message-"))
   (marker common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (dbsecurity-groups common-lisp:nil :type
    (common-lisp:or dbsecurity-groups common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'dbsecurity-group-message 'make-dbsecurity-group-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          dbsecurity-group-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          dbsecurity-group-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dbsecurity-groups))
      (common-lisp:list
       (common-lisp:cons "DBSecurityGroups"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          dbsecurity-group-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype dbsecurity-group-name-list ()
   '(trivial-types:proper-list string))
 (common-lisp:defun |make-dbsecurity-group-name-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list string))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition dbsecurity-group-not-found-fault
     (rds-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'dbsecurity-group-not-found-fault)))
(common-lisp:progn
 (common-lisp:define-condition dbsecurity-group-not-supported-fault
     (rds-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'dbsecurity-group-not-supported-fault)))
(common-lisp:progn
 (common-lisp:define-condition dbsecurity-group-quota-exceeded-fault
     (rds-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'dbsecurity-group-quota-exceeded-fault)))
(common-lisp:progn
 (common-lisp:deftype dbsecurity-groups ()
   '(trivial-types:proper-list dbsecurity-group))
 (common-lisp:defun |make-dbsecurity-groups|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list dbsecurity-group))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (dbsnapshot (:copier common-lisp:nil)
      (:conc-name "struct-shape-dbsnapshot-"))
   (dbsnapshot-identifier common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (dbinstance-identifier common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (snapshot-create-time common-lisp:nil :type
    (common-lisp:or tstamp common-lisp:null))
   (engine common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (allocated-storage common-lisp:nil :type
    (common-lisp:or integer common-lisp:null))
   (status common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (port common-lisp:nil :type (common-lisp:or integer common-lisp:null))
   (availability-zone common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (vpc-id common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (instance-create-time common-lisp:nil :type
    (common-lisp:or tstamp common-lisp:null))
   (master-username common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (engine-version common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (license-model common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (snapshot-type common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (iops common-lisp:nil :type
    (common-lisp:or integer-optional common-lisp:null))
   (option-group-name common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (percent-progress common-lisp:nil :type
    (common-lisp:or integer common-lisp:null))
   (source-region common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (source-dbsnapshot-identifier common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (storage-type common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (tde-credential-arn common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (encrypted common-lisp:nil :type (common-lisp:or boolean common-lisp:null))
   (kms-key-id common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (dbsnapshot-arn common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (timezone common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (iamdatabase-authentication-enabled common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (processor-features common-lisp:nil :type
    (common-lisp:or processor-feature-list common-lisp:null))
   (dbi-resource-id common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (tag-list common-lisp:nil :type (common-lisp:or tag-list common-lisp:null))
   (original-snapshot-create-time common-lisp:nil :type
    (common-lisp:or tstamp common-lisp:null))
   (snapshot-database-time common-lisp:nil :type
    (common-lisp:or tstamp common-lisp:null))
   (snapshot-target common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (storage-throughput common-lisp:nil :type
    (common-lisp:or integer-optional common-lisp:null)))
 (common-lisp:export (common-lisp:list 'dbsnapshot 'make-dbsnapshot))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input dbsnapshot))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input dbsnapshot))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dbsnapshot-identifier))
      (common-lisp:list
       (common-lisp:cons "DBSnapshotIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dbinstance-identifier))
      (common-lisp:list
       (common-lisp:cons "DBInstanceIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'snapshot-create-time))
      (common-lisp:list
       (common-lisp:cons "SnapshotCreateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'engine))
      (common-lisp:list
       (common-lisp:cons "Engine"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'allocated-storage))
      (common-lisp:list
       (common-lisp:cons "AllocatedStorage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'port))
      (common-lisp:list
       (common-lisp:cons "Port"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'availability-zone))
      (common-lisp:list
       (common-lisp:cons "AvailabilityZone"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpc-id))
      (common-lisp:list
       (common-lisp:cons "VpcId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'instance-create-time))
      (common-lisp:list
       (common-lisp:cons "InstanceCreateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'master-username))
      (common-lisp:list
       (common-lisp:cons "MasterUsername"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'engine-version))
      (common-lisp:list
       (common-lisp:cons "EngineVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'license-model))
      (common-lisp:list
       (common-lisp:cons "LicenseModel"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'snapshot-type))
      (common-lisp:list
       (common-lisp:cons "SnapshotType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'iops))
      (common-lisp:list
       (common-lisp:cons "Iops"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'option-group-name))
      (common-lisp:list
       (common-lisp:cons "OptionGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'percent-progress))
      (common-lisp:list
       (common-lisp:cons "PercentProgress"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-region))
      (common-lisp:list
       (common-lisp:cons "SourceRegion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'source-dbsnapshot-identifier))
      (common-lisp:list
       (common-lisp:cons "SourceDBSnapshotIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'storage-type))
      (common-lisp:list
       (common-lisp:cons "StorageType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tde-credential-arn))
      (common-lisp:list
       (common-lisp:cons "TdeCredentialArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'encrypted))
      (common-lisp:list
       (common-lisp:cons "Encrypted"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kms-key-id))
      (common-lisp:list
       (common-lisp:cons "KmsKeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dbsnapshot-arn))
      (common-lisp:list
       (common-lisp:cons "DBSnapshotArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'timezone))
      (common-lisp:list
       (common-lisp:cons "Timezone"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'iamdatabase-authentication-enabled))
      (common-lisp:list
       (common-lisp:cons "IAMDatabaseAuthenticationEnabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'processor-features))
      (common-lisp:list
       (common-lisp:cons "ProcessorFeatures"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dbi-resource-id))
      (common-lisp:list
       (common-lisp:cons "DbiResourceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tag-list))
      (common-lisp:list
       (common-lisp:cons "TagList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'original-snapshot-create-time))
      (common-lisp:list
       (common-lisp:cons "OriginalSnapshotCreateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'snapshot-database-time))
      (common-lisp:list
       (common-lisp:cons "SnapshotDatabaseTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'snapshot-target))
      (common-lisp:list
       (common-lisp:cons "SnapshotTarget"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'storage-throughput))
      (common-lisp:list
       (common-lisp:cons "StorageThroughput"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input dbsnapshot))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition dbsnapshot-already-exists-fault
     (rds-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'dbsnapshot-already-exists-fault)))
(common-lisp:progn
 (common-lisp:defstruct
     (dbsnapshot-attribute (:copier common-lisp:nil)
      (:conc-name "struct-shape-dbsnapshot-attribute-"))
   (attribute-name common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (attribute-values common-lisp:nil :type
    (common-lisp:or attribute-value-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'dbsnapshot-attribute 'make-dbsnapshot-attribute))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input dbsnapshot-attribute))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input dbsnapshot-attribute))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'attribute-name))
      (common-lisp:list
       (common-lisp:cons "AttributeName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'attribute-values))
      (common-lisp:list
       (common-lisp:cons "AttributeValues"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input dbsnapshot-attribute))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype dbsnapshot-attribute-list ()
   '(trivial-types:proper-list dbsnapshot-attribute))
 (common-lisp:defun |make-dbsnapshot-attribute-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list dbsnapshot-attribute))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (dbsnapshot-attributes-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-dbsnapshot-attributes-result-"))
   (dbsnapshot-identifier common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (dbsnapshot-attributes common-lisp:nil :type
    (common-lisp:or dbsnapshot-attribute-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'dbsnapshot-attributes-result
                    'make-dbsnapshot-attributes-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          dbsnapshot-attributes-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          dbsnapshot-attributes-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dbsnapshot-identifier))
      (common-lisp:list
       (common-lisp:cons "DBSnapshotIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dbsnapshot-attributes))
      (common-lisp:list
       (common-lisp:cons "DBSnapshotAttributes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          dbsnapshot-attributes-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype dbsnapshot-list ()
   '(trivial-types:proper-list dbsnapshot))
 (common-lisp:defun |make-dbsnapshot-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list dbsnapshot))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (dbsnapshot-message (:copier common-lisp:nil)
      (:conc-name "struct-shape-dbsnapshot-message-"))
   (marker common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (dbsnapshots common-lisp:nil :type
    (common-lisp:or dbsnapshot-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'dbsnapshot-message 'make-dbsnapshot-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input dbsnapshot-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input dbsnapshot-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dbsnapshots))
      (common-lisp:list
       (common-lisp:cons "DBSnapshots"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input dbsnapshot-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition dbsnapshot-not-found-fault
     (rds-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'dbsnapshot-not-found-fault)))
(common-lisp:progn
 (common-lisp:defstruct
     (dbsubnet-group (:copier common-lisp:nil)
      (:conc-name "struct-shape-dbsubnet-group-"))
   (dbsubnet-group-name common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (dbsubnet-group-description common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (vpc-id common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (subnet-group-status common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (subnets common-lisp:nil :type
    (common-lisp:or subnet-list common-lisp:null))
   (dbsubnet-group-arn common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (supported-network-types common-lisp:nil :type
    (common-lisp:or string-list common-lisp:null)))
 (common-lisp:export (common-lisp:list 'dbsubnet-group 'make-dbsubnet-group))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input dbsubnet-group))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input dbsubnet-group))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dbsubnet-group-name))
      (common-lisp:list
       (common-lisp:cons "DBSubnetGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dbsubnet-group-description))
      (common-lisp:list
       (common-lisp:cons "DBSubnetGroupDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpc-id))
      (common-lisp:list
       (common-lisp:cons "VpcId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subnet-group-status))
      (common-lisp:list
       (common-lisp:cons "SubnetGroupStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subnets))
      (common-lisp:list
       (common-lisp:cons "Subnets"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dbsubnet-group-arn))
      (common-lisp:list
       (common-lisp:cons "DBSubnetGroupArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'supported-network-types))
      (common-lisp:list
       (common-lisp:cons "SupportedNetworkTypes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input dbsubnet-group))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition dbsubnet-group-already-exists-fault
     (rds-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'dbsubnet-group-already-exists-fault)))
(common-lisp:progn
 (common-lisp:define-condition dbsubnet-group-does-not-cover-enough-azs
     (rds-error)
     common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'dbsubnet-group-does-not-cover-enough-azs)))
(common-lisp:progn
 (common-lisp:defstruct
     (dbsubnet-group-message (:copier common-lisp:nil)
      (:conc-name "struct-shape-dbsubnet-group-message-"))
   (marker common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (dbsubnet-groups common-lisp:nil :type
    (common-lisp:or dbsubnet-groups common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'dbsubnet-group-message 'make-dbsubnet-group-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          dbsubnet-group-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          dbsubnet-group-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dbsubnet-groups))
      (common-lisp:list
       (common-lisp:cons "DBSubnetGroups"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          dbsubnet-group-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition dbsubnet-group-not-allowed-fault
     (rds-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'dbsubnet-group-not-allowed-fault)))
(common-lisp:progn
 (common-lisp:define-condition dbsubnet-group-not-found-fault
     (rds-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'dbsubnet-group-not-found-fault)))
(common-lisp:progn
 (common-lisp:define-condition dbsubnet-group-quota-exceeded-fault
     (rds-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'dbsubnet-group-quota-exceeded-fault)))
(common-lisp:progn
 (common-lisp:deftype dbsubnet-groups ()
   '(trivial-types:proper-list dbsubnet-group))
 (common-lisp:defun |make-dbsubnet-groups|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list dbsubnet-group))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition dbsubnet-quota-exceeded-fault
     (rds-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'dbsubnet-quota-exceeded-fault)))
(common-lisp:progn
 (common-lisp:define-condition dbupgrade-dependency-failure-fault
     (rds-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'dbupgrade-dependency-failure-fault)))
(common-lisp:deftype database-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (delete-blue-green-deployment-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-blue-green-deployment-request-"))
   (blue-green-deployment-identifier
    (common-lisp:error ":blue-green-deployment-identifier is required") :type
    (common-lisp:or blue-green-deployment-identifier common-lisp:null))
   (delete-target common-lisp:nil :type
    (common-lisp:or boolean-optional common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-blue-green-deployment-request
                    'make-delete-blue-green-deployment-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-blue-green-deployment-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-blue-green-deployment-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'blue-green-deployment-identifier))
      (common-lisp:list
       (common-lisp:cons "BlueGreenDeploymentIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'delete-target))
      (common-lisp:list
       (common-lisp:cons "DeleteTarget"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-blue-green-deployment-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-blue-green-deployment-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-blue-green-deployment-response-"))
   (blue-green-deployment common-lisp:nil :type
    (common-lisp:or blue-green-deployment common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-blue-green-deployment-response
                    'make-delete-blue-green-deployment-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-blue-green-deployment-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-blue-green-deployment-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'blue-green-deployment))
      (common-lisp:list
       (common-lisp:cons "BlueGreenDeployment"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-blue-green-deployment-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-custom-dbengine-version-message (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-custom-dbengine-version-message-"))
   (engine (common-lisp:error ":engine is required") :type
    (common-lisp:or custom-engine-name common-lisp:null))
   (engine-version (common-lisp:error ":engine-version is required") :type
    (common-lisp:or custom-engine-version common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-custom-dbengine-version-message
                    'make-delete-custom-dbengine-version-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-custom-dbengine-version-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-custom-dbengine-version-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'engine))
      (common-lisp:list
       (common-lisp:cons "Engine"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'engine-version))
      (common-lisp:list
       (common-lisp:cons "EngineVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-custom-dbengine-version-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-dbcluster-endpoint-message (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-dbcluster-endpoint-message-"))
   (dbcluster-endpoint-identifier
    (common-lisp:error ":dbcluster-endpoint-identifier is required") :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-dbcluster-endpoint-message
                    'make-delete-dbcluster-endpoint-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-dbcluster-endpoint-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-dbcluster-endpoint-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dbcluster-endpoint-identifier))
      (common-lisp:list
       (common-lisp:cons "DBClusterEndpointIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-dbcluster-endpoint-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-dbcluster-message (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-dbcluster-message-"))
   (dbcluster-identifier
    (common-lisp:error ":dbcluster-identifier is required") :type
    (common-lisp:or string common-lisp:null))
   (skip-final-snapshot common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (final-dbsnapshot-identifier common-lisp:nil :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-dbcluster-message 'make-delete-dbcluster-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-dbcluster-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-dbcluster-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dbcluster-identifier))
      (common-lisp:list
       (common-lisp:cons "DBClusterIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'skip-final-snapshot))
      (common-lisp:list
       (common-lisp:cons "SkipFinalSnapshot"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'final-dbsnapshot-identifier))
      (common-lisp:list
       (common-lisp:cons "FinalDBSnapshotIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-dbcluster-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-dbcluster-parameter-group-message (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-dbcluster-parameter-group-message-"))
   (dbcluster-parameter-group-name
    (common-lisp:error ":dbcluster-parameter-group-name is required") :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-dbcluster-parameter-group-message
                    'make-delete-dbcluster-parameter-group-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-dbcluster-parameter-group-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-dbcluster-parameter-group-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dbcluster-parameter-group-name))
      (common-lisp:list
       (common-lisp:cons "DBClusterParameterGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-dbcluster-parameter-group-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-dbcluster-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-dbcluster-result-"))
   (dbcluster common-lisp:nil :type
    (common-lisp:or dbcluster common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-dbcluster-result 'make-delete-dbcluster-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-dbcluster-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-dbcluster-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dbcluster))
      (common-lisp:list
       (common-lisp:cons "DBCluster"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-dbcluster-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-dbcluster-snapshot-message (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-dbcluster-snapshot-message-"))
   (dbcluster-snapshot-identifier
    (common-lisp:error ":dbcluster-snapshot-identifier is required") :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-dbcluster-snapshot-message
                    'make-delete-dbcluster-snapshot-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-dbcluster-snapshot-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-dbcluster-snapshot-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dbcluster-snapshot-identifier))
      (common-lisp:list
       (common-lisp:cons "DBClusterSnapshotIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-dbcluster-snapshot-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-dbcluster-snapshot-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-dbcluster-snapshot-result-"))
   (dbcluster-snapshot common-lisp:nil :type
    (common-lisp:or dbcluster-snapshot common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-dbcluster-snapshot-result
                    'make-delete-dbcluster-snapshot-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-dbcluster-snapshot-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-dbcluster-snapshot-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dbcluster-snapshot))
      (common-lisp:list
       (common-lisp:cons "DBClusterSnapshot"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-dbcluster-snapshot-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-dbinstance-automated-backup-message (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-dbinstance-automated-backup-message-"))
   (dbi-resource-id common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (dbinstance-automated-backups-arn common-lisp:nil :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-dbinstance-automated-backup-message
                    'make-delete-dbinstance-automated-backup-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-dbinstance-automated-backup-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-dbinstance-automated-backup-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dbi-resource-id))
      (common-lisp:list
       (common-lisp:cons "DbiResourceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dbinstance-automated-backups-arn))
      (common-lisp:list
       (common-lisp:cons "DBInstanceAutomatedBackupsArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-dbinstance-automated-backup-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-dbinstance-automated-backup-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-dbinstance-automated-backup-result-"))
   (dbinstance-automated-backup common-lisp:nil :type
    (common-lisp:or dbinstance-automated-backup common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-dbinstance-automated-backup-result
                    'make-delete-dbinstance-automated-backup-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-dbinstance-automated-backup-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-dbinstance-automated-backup-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dbinstance-automated-backup))
      (common-lisp:list
       (common-lisp:cons "DBInstanceAutomatedBackup"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-dbinstance-automated-backup-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-dbinstance-message (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-dbinstance-message-"))
   (dbinstance-identifier
    (common-lisp:error ":dbinstance-identifier is required") :type
    (common-lisp:or string common-lisp:null))
   (skip-final-snapshot common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (final-dbsnapshot-identifier common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (delete-automated-backups common-lisp:nil :type
    (common-lisp:or boolean-optional common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-dbinstance-message
                    'make-delete-dbinstance-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-dbinstance-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-dbinstance-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dbinstance-identifier))
      (common-lisp:list
       (common-lisp:cons "DBInstanceIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'skip-final-snapshot))
      (common-lisp:list
       (common-lisp:cons "SkipFinalSnapshot"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'final-dbsnapshot-identifier))
      (common-lisp:list
       (common-lisp:cons "FinalDBSnapshotIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'delete-automated-backups))
      (common-lisp:list
       (common-lisp:cons "DeleteAutomatedBackups"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-dbinstance-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-dbinstance-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-dbinstance-result-"))
   (dbinstance common-lisp:nil :type
    (common-lisp:or dbinstance common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-dbinstance-result 'make-delete-dbinstance-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-dbinstance-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-dbinstance-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dbinstance))
      (common-lisp:list
       (common-lisp:cons "DBInstance"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-dbinstance-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-dbparameter-group-message (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-dbparameter-group-message-"))
   (dbparameter-group-name
    (common-lisp:error ":dbparameter-group-name is required") :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-dbparameter-group-message
                    'make-delete-dbparameter-group-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-dbparameter-group-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-dbparameter-group-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dbparameter-group-name))
      (common-lisp:list
       (common-lisp:cons "DBParameterGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-dbparameter-group-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-dbproxy-endpoint-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-dbproxy-endpoint-request-"))
   (dbproxy-endpoint-name
    (common-lisp:error ":dbproxy-endpoint-name is required") :type
    (common-lisp:or dbproxy-endpoint-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-dbproxy-endpoint-request
                    'make-delete-dbproxy-endpoint-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-dbproxy-endpoint-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-dbproxy-endpoint-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dbproxy-endpoint-name))
      (common-lisp:list
       (common-lisp:cons "DBProxyEndpointName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-dbproxy-endpoint-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-dbproxy-endpoint-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-dbproxy-endpoint-response-"))
   (dbproxy-endpoint common-lisp:nil :type
    (common-lisp:or dbproxy-endpoint common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-dbproxy-endpoint-response
                    'make-delete-dbproxy-endpoint-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-dbproxy-endpoint-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-dbproxy-endpoint-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dbproxy-endpoint))
      (common-lisp:list
       (common-lisp:cons "DBProxyEndpoint"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-dbproxy-endpoint-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-dbproxy-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-dbproxy-request-"))
   (dbproxy-name (common-lisp:error ":dbproxy-name is required") :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-dbproxy-request 'make-delete-dbproxy-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-dbproxy-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-dbproxy-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dbproxy-name))
      (common-lisp:list
       (common-lisp:cons "DBProxyName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-dbproxy-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-dbproxy-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-dbproxy-response-"))
   (dbproxy common-lisp:nil :type (common-lisp:or dbproxy common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-dbproxy-response 'make-delete-dbproxy-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-dbproxy-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-dbproxy-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dbproxy))
      (common-lisp:list
       (common-lisp:cons "DBProxy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-dbproxy-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-dbsecurity-group-message (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-dbsecurity-group-message-"))
   (dbsecurity-group-name
    (common-lisp:error ":dbsecurity-group-name is required") :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-dbsecurity-group-message
                    'make-delete-dbsecurity-group-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-dbsecurity-group-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-dbsecurity-group-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dbsecurity-group-name))
      (common-lisp:list
       (common-lisp:cons "DBSecurityGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-dbsecurity-group-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-dbsnapshot-message (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-dbsnapshot-message-"))
   (dbsnapshot-identifier
    (common-lisp:error ":dbsnapshot-identifier is required") :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-dbsnapshot-message
                    'make-delete-dbsnapshot-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-dbsnapshot-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-dbsnapshot-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dbsnapshot-identifier))
      (common-lisp:list
       (common-lisp:cons "DBSnapshotIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-dbsnapshot-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-dbsnapshot-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-dbsnapshot-result-"))
   (dbsnapshot common-lisp:nil :type
    (common-lisp:or dbsnapshot common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-dbsnapshot-result 'make-delete-dbsnapshot-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-dbsnapshot-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-dbsnapshot-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dbsnapshot))
      (common-lisp:list
       (common-lisp:cons "DBSnapshot"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-dbsnapshot-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-dbsubnet-group-message (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-dbsubnet-group-message-"))
   (dbsubnet-group-name (common-lisp:error ":dbsubnet-group-name is required")
    :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-dbsubnet-group-message
                    'make-delete-dbsubnet-group-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-dbsubnet-group-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-dbsubnet-group-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dbsubnet-group-name))
      (common-lisp:list
       (common-lisp:cons "DBSubnetGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-dbsubnet-group-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-event-subscription-message (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-event-subscription-message-"))
   (subscription-name (common-lisp:error ":subscription-name is required")
    :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-event-subscription-message
                    'make-delete-event-subscription-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-event-subscription-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-event-subscription-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subscription-name))
      (common-lisp:list
       (common-lisp:cons "SubscriptionName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-event-subscription-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-event-subscription-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-event-subscription-result-"))
   (event-subscription common-lisp:nil :type
    (common-lisp:or event-subscription common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-event-subscription-result
                    'make-delete-event-subscription-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-event-subscription-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-event-subscription-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'event-subscription))
      (common-lisp:list
       (common-lisp:cons "EventSubscription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-event-subscription-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-global-cluster-message (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-global-cluster-message-"))
   (global-cluster-identifier
    (common-lisp:error ":global-cluster-identifier is required") :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-global-cluster-message
                    'make-delete-global-cluster-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-global-cluster-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-global-cluster-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'global-cluster-identifier))
      (common-lisp:list
       (common-lisp:cons "GlobalClusterIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-global-cluster-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-global-cluster-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-global-cluster-result-"))
   (global-cluster common-lisp:nil :type
    (common-lisp:or global-cluster common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-global-cluster-result
                    'make-delete-global-cluster-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-global-cluster-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-global-cluster-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'global-cluster))
      (common-lisp:list
       (common-lisp:cons "GlobalCluster"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-global-cluster-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-option-group-message (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-option-group-message-"))
   (option-group-name (common-lisp:error ":option-group-name is required")
    :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-option-group-message
                    'make-delete-option-group-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-option-group-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-option-group-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'option-group-name))
      (common-lisp:list
       (common-lisp:cons "OptionGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-option-group-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (deregister-dbproxy-targets-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-deregister-dbproxy-targets-request-"))
   (dbproxy-name (common-lisp:error ":dbproxy-name is required") :type
    (common-lisp:or string common-lisp:null))
   (target-group-name common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (dbinstance-identifiers common-lisp:nil :type
    (common-lisp:or string-list common-lisp:null))
   (dbcluster-identifiers common-lisp:nil :type
    (common-lisp:or string-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'deregister-dbproxy-targets-request
                    'make-deregister-dbproxy-targets-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          deregister-dbproxy-targets-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          deregister-dbproxy-targets-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dbproxy-name))
      (common-lisp:list
       (common-lisp:cons "DBProxyName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target-group-name))
      (common-lisp:list
       (common-lisp:cons "TargetGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dbinstance-identifiers))
      (common-lisp:list
       (common-lisp:cons "DBInstanceIdentifiers"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dbcluster-identifiers))
      (common-lisp:list
       (common-lisp:cons "DBClusterIdentifiers"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          deregister-dbproxy-targets-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (deregister-dbproxy-targets-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-deregister-dbproxy-targets-response-")))
 (common-lisp:export
  (common-lisp:list 'deregister-dbproxy-targets-response
                    'make-deregister-dbproxy-targets-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          deregister-dbproxy-targets-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          deregister-dbproxy-targets-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          deregister-dbproxy-targets-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-account-attributes-message (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-account-attributes-message-")))
 (common-lisp:export
  (common-lisp:list 'describe-account-attributes-message
                    'make-describe-account-attributes-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-account-attributes-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-account-attributes-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-account-attributes-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-blue-green-deployments-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-blue-green-deployments-request-"))
   (blue-green-deployment-identifier common-lisp:nil :type
    (common-lisp:or blue-green-deployment-identifier common-lisp:null))
   (filters common-lisp:nil :type
    (common-lisp:or filter-list common-lisp:null))
   (marker common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (max-records common-lisp:nil :type
    (common-lisp:or max-records common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-blue-green-deployments-request
                    'make-describe-blue-green-deployments-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-blue-green-deployments-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-blue-green-deployments-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'blue-green-deployment-identifier))
      (common-lisp:list
       (common-lisp:cons "BlueGreenDeploymentIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filters))
      (common-lisp:list
       (common-lisp:cons "Filters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-records))
      (common-lisp:list
       (common-lisp:cons "MaxRecords"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-blue-green-deployments-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-blue-green-deployments-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-blue-green-deployments-response-"))
   (blue-green-deployments common-lisp:nil :type
    (common-lisp:or blue-green-deployment-list common-lisp:null))
   (marker common-lisp:nil :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-blue-green-deployments-response
                    'make-describe-blue-green-deployments-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-blue-green-deployments-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-blue-green-deployments-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'blue-green-deployments))
      (common-lisp:list
       (common-lisp:cons "BlueGreenDeployments"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-blue-green-deployments-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-certificates-message (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-certificates-message-"))
   (certificate-identifier common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (filters common-lisp:nil :type
    (common-lisp:or filter-list common-lisp:null))
   (max-records common-lisp:nil :type
    (common-lisp:or integer-optional common-lisp:null))
   (marker common-lisp:nil :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-certificates-message
                    'make-describe-certificates-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-certificates-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-certificates-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'certificate-identifier))
      (common-lisp:list
       (common-lisp:cons "CertificateIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filters))
      (common-lisp:list
       (common-lisp:cons "Filters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-records))
      (common-lisp:list
       (common-lisp:cons "MaxRecords"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-certificates-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-dbcluster-backtracks-message (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-dbcluster-backtracks-message-"))
   (dbcluster-identifier
    (common-lisp:error ":dbcluster-identifier is required") :type
    (common-lisp:or string common-lisp:null))
   (backtrack-identifier common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (filters common-lisp:nil :type
    (common-lisp:or filter-list common-lisp:null))
   (max-records common-lisp:nil :type
    (common-lisp:or integer-optional common-lisp:null))
   (marker common-lisp:nil :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-dbcluster-backtracks-message
                    'make-describe-dbcluster-backtracks-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-dbcluster-backtracks-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-dbcluster-backtracks-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dbcluster-identifier))
      (common-lisp:list
       (common-lisp:cons "DBClusterIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'backtrack-identifier))
      (common-lisp:list
       (common-lisp:cons "BacktrackIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filters))
      (common-lisp:list
       (common-lisp:cons "Filters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-records))
      (common-lisp:list
       (common-lisp:cons "MaxRecords"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-dbcluster-backtracks-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-dbcluster-endpoints-message (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-dbcluster-endpoints-message-"))
   (dbcluster-identifier common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (dbcluster-endpoint-identifier common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (filters common-lisp:nil :type
    (common-lisp:or filter-list common-lisp:null))
   (max-records common-lisp:nil :type
    (common-lisp:or integer-optional common-lisp:null))
   (marker common-lisp:nil :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-dbcluster-endpoints-message
                    'make-describe-dbcluster-endpoints-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-dbcluster-endpoints-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-dbcluster-endpoints-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dbcluster-identifier))
      (common-lisp:list
       (common-lisp:cons "DBClusterIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dbcluster-endpoint-identifier))
      (common-lisp:list
       (common-lisp:cons "DBClusterEndpointIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filters))
      (common-lisp:list
       (common-lisp:cons "Filters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-records))
      (common-lisp:list
       (common-lisp:cons "MaxRecords"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-dbcluster-endpoints-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-dbcluster-parameter-groups-message (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-dbcluster-parameter-groups-message-"))
   (dbcluster-parameter-group-name common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (filters common-lisp:nil :type
    (common-lisp:or filter-list common-lisp:null))
   (max-records common-lisp:nil :type
    (common-lisp:or integer-optional common-lisp:null))
   (marker common-lisp:nil :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-dbcluster-parameter-groups-message
                    'make-describe-dbcluster-parameter-groups-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-dbcluster-parameter-groups-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-dbcluster-parameter-groups-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dbcluster-parameter-group-name))
      (common-lisp:list
       (common-lisp:cons "DBClusterParameterGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filters))
      (common-lisp:list
       (common-lisp:cons "Filters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-records))
      (common-lisp:list
       (common-lisp:cons "MaxRecords"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-dbcluster-parameter-groups-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-dbcluster-parameters-message (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-dbcluster-parameters-message-"))
   (dbcluster-parameter-group-name
    (common-lisp:error ":dbcluster-parameter-group-name is required") :type
    (common-lisp:or string common-lisp:null))
   (source common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (filters common-lisp:nil :type
    (common-lisp:or filter-list common-lisp:null))
   (max-records common-lisp:nil :type
    (common-lisp:or integer-optional common-lisp:null))
   (marker common-lisp:nil :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-dbcluster-parameters-message
                    'make-describe-dbcluster-parameters-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-dbcluster-parameters-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-dbcluster-parameters-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dbcluster-parameter-group-name))
      (common-lisp:list
       (common-lisp:cons "DBClusterParameterGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source))
      (common-lisp:list
       (common-lisp:cons "Source"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filters))
      (common-lisp:list
       (common-lisp:cons "Filters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-records))
      (common-lisp:list
       (common-lisp:cons "MaxRecords"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-dbcluster-parameters-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-dbcluster-snapshot-attributes-message (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-describe-dbcluster-snapshot-attributes-message-"))
   (dbcluster-snapshot-identifier
    (common-lisp:error ":dbcluster-snapshot-identifier is required") :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-dbcluster-snapshot-attributes-message
                    'make-describe-dbcluster-snapshot-attributes-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-dbcluster-snapshot-attributes-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-dbcluster-snapshot-attributes-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dbcluster-snapshot-identifier))
      (common-lisp:list
       (common-lisp:cons "DBClusterSnapshotIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-dbcluster-snapshot-attributes-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-dbcluster-snapshot-attributes-result (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-describe-dbcluster-snapshot-attributes-result-"))
   (dbcluster-snapshot-attributes-result common-lisp:nil :type
    (common-lisp:or dbcluster-snapshot-attributes-result common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-dbcluster-snapshot-attributes-result
                    'make-describe-dbcluster-snapshot-attributes-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-dbcluster-snapshot-attributes-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-dbcluster-snapshot-attributes-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dbcluster-snapshot-attributes-result))
      (common-lisp:list
       (common-lisp:cons "DBClusterSnapshotAttributesResult"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-dbcluster-snapshot-attributes-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-dbcluster-snapshots-message (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-dbcluster-snapshots-message-"))
   (dbcluster-identifier common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (dbcluster-snapshot-identifier common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (snapshot-type common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (filters common-lisp:nil :type
    (common-lisp:or filter-list common-lisp:null))
   (max-records common-lisp:nil :type
    (common-lisp:or integer-optional common-lisp:null))
   (marker common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (include-shared common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (include-public common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-dbcluster-snapshots-message
                    'make-describe-dbcluster-snapshots-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-dbcluster-snapshots-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-dbcluster-snapshots-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dbcluster-identifier))
      (common-lisp:list
       (common-lisp:cons "DBClusterIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dbcluster-snapshot-identifier))
      (common-lisp:list
       (common-lisp:cons "DBClusterSnapshotIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'snapshot-type))
      (common-lisp:list
       (common-lisp:cons "SnapshotType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filters))
      (common-lisp:list
       (common-lisp:cons "Filters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-records))
      (common-lisp:list
       (common-lisp:cons "MaxRecords"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'include-shared))
      (common-lisp:list
       (common-lisp:cons "IncludeShared"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'include-public))
      (common-lisp:list
       (common-lisp:cons "IncludePublic"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-dbcluster-snapshots-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-dbclusters-message (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-dbclusters-message-"))
   (dbcluster-identifier common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (filters common-lisp:nil :type
    (common-lisp:or filter-list common-lisp:null))
   (max-records common-lisp:nil :type
    (common-lisp:or integer-optional common-lisp:null))
   (marker common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (include-shared common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-dbclusters-message
                    'make-describe-dbclusters-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-dbclusters-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-dbclusters-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dbcluster-identifier))
      (common-lisp:list
       (common-lisp:cons "DBClusterIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filters))
      (common-lisp:list
       (common-lisp:cons "Filters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-records))
      (common-lisp:list
       (common-lisp:cons "MaxRecords"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'include-shared))
      (common-lisp:list
       (common-lisp:cons "IncludeShared"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-dbclusters-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-dbengine-versions-message (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-dbengine-versions-message-"))
   (engine common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (engine-version common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (dbparameter-group-family common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (filters common-lisp:nil :type
    (common-lisp:or filter-list common-lisp:null))
   (max-records common-lisp:nil :type
    (common-lisp:or integer-optional common-lisp:null))
   (marker common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (default-only common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (list-supported-character-sets common-lisp:nil :type
    (common-lisp:or boolean-optional common-lisp:null))
   (list-supported-timezones common-lisp:nil :type
    (common-lisp:or boolean-optional common-lisp:null))
   (include-all common-lisp:nil :type
    (common-lisp:or boolean-optional common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-dbengine-versions-message
                    'make-describe-dbengine-versions-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-dbengine-versions-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-dbengine-versions-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'engine))
      (common-lisp:list
       (common-lisp:cons "Engine"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'engine-version))
      (common-lisp:list
       (common-lisp:cons "EngineVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dbparameter-group-family))
      (common-lisp:list
       (common-lisp:cons "DBParameterGroupFamily"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filters))
      (common-lisp:list
       (common-lisp:cons "Filters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-records))
      (common-lisp:list
       (common-lisp:cons "MaxRecords"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'default-only))
      (common-lisp:list
       (common-lisp:cons "DefaultOnly"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'list-supported-character-sets))
      (common-lisp:list
       (common-lisp:cons "ListSupportedCharacterSets"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'list-supported-timezones))
      (common-lisp:list
       (common-lisp:cons "ListSupportedTimezones"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'include-all))
      (common-lisp:list
       (common-lisp:cons "IncludeAll"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-dbengine-versions-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-dbinstance-automated-backups-message (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-describe-dbinstance-automated-backups-message-"))
   (dbi-resource-id common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (dbinstance-identifier common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (filters common-lisp:nil :type
    (common-lisp:or filter-list common-lisp:null))
   (max-records common-lisp:nil :type
    (common-lisp:or integer-optional common-lisp:null))
   (marker common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (dbinstance-automated-backups-arn common-lisp:nil :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-dbinstance-automated-backups-message
                    'make-describe-dbinstance-automated-backups-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-dbinstance-automated-backups-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-dbinstance-automated-backups-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dbi-resource-id))
      (common-lisp:list
       (common-lisp:cons "DbiResourceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dbinstance-identifier))
      (common-lisp:list
       (common-lisp:cons "DBInstanceIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filters))
      (common-lisp:list
       (common-lisp:cons "Filters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-records))
      (common-lisp:list
       (common-lisp:cons "MaxRecords"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dbinstance-automated-backups-arn))
      (common-lisp:list
       (common-lisp:cons "DBInstanceAutomatedBackupsArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-dbinstance-automated-backups-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-dbinstances-message (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-dbinstances-message-"))
   (dbinstance-identifier common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (filters common-lisp:nil :type
    (common-lisp:or filter-list common-lisp:null))
   (max-records common-lisp:nil :type
    (common-lisp:or integer-optional common-lisp:null))
   (marker common-lisp:nil :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-dbinstances-message
                    'make-describe-dbinstances-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-dbinstances-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-dbinstances-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dbinstance-identifier))
      (common-lisp:list
       (common-lisp:cons "DBInstanceIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filters))
      (common-lisp:list
       (common-lisp:cons "Filters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-records))
      (common-lisp:list
       (common-lisp:cons "MaxRecords"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-dbinstances-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-dblog-files-details (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-dblog-files-details-"))
   (log-file-name common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (last-written common-lisp:nil :type (common-lisp:or long common-lisp:null))
   (size common-lisp:nil :type (common-lisp:or long common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-dblog-files-details
                    'make-describe-dblog-files-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-dblog-files-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-dblog-files-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'log-file-name))
      (common-lisp:list
       (common-lisp:cons "LogFileName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-written))
      (common-lisp:list
       (common-lisp:cons "LastWritten"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'size))
      (common-lisp:list
       (common-lisp:cons "Size"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-dblog-files-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype describe-dblog-files-list ()
   '(trivial-types:proper-list describe-dblog-files-details))
 (common-lisp:defun |make-describe-dblog-files-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            describe-dblog-files-details))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-dblog-files-message (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-dblog-files-message-"))
   (dbinstance-identifier
    (common-lisp:error ":dbinstance-identifier is required") :type
    (common-lisp:or string common-lisp:null))
   (filename-contains common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (file-last-written common-lisp:nil :type
    (common-lisp:or long common-lisp:null))
   (file-size common-lisp:nil :type (common-lisp:or long common-lisp:null))
   (filters common-lisp:nil :type
    (common-lisp:or filter-list common-lisp:null))
   (max-records common-lisp:nil :type
    (common-lisp:or integer-optional common-lisp:null))
   (marker common-lisp:nil :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-dblog-files-message
                    'make-describe-dblog-files-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-dblog-files-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-dblog-files-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dbinstance-identifier))
      (common-lisp:list
       (common-lisp:cons "DBInstanceIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filename-contains))
      (common-lisp:list
       (common-lisp:cons "FilenameContains"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'file-last-written))
      (common-lisp:list
       (common-lisp:cons "FileLastWritten"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'file-size))
      (common-lisp:list
       (common-lisp:cons "FileSize"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filters))
      (common-lisp:list
       (common-lisp:cons "Filters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-records))
      (common-lisp:list
       (common-lisp:cons "MaxRecords"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-dblog-files-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-dblog-files-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-dblog-files-response-"))
   (describe-dblog-files common-lisp:nil :type
    (common-lisp:or describe-dblog-files-list common-lisp:null))
   (marker common-lisp:nil :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-dblog-files-response
                    'make-describe-dblog-files-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-dblog-files-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-dblog-files-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'describe-dblog-files))
      (common-lisp:list
       (common-lisp:cons "DescribeDBLogFiles"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-dblog-files-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-dbparameter-groups-message (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-dbparameter-groups-message-"))
   (dbparameter-group-name common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (filters common-lisp:nil :type
    (common-lisp:or filter-list common-lisp:null))
   (max-records common-lisp:nil :type
    (common-lisp:or integer-optional common-lisp:null))
   (marker common-lisp:nil :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-dbparameter-groups-message
                    'make-describe-dbparameter-groups-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-dbparameter-groups-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-dbparameter-groups-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dbparameter-group-name))
      (common-lisp:list
       (common-lisp:cons "DBParameterGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filters))
      (common-lisp:list
       (common-lisp:cons "Filters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-records))
      (common-lisp:list
       (common-lisp:cons "MaxRecords"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-dbparameter-groups-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-dbparameters-message (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-dbparameters-message-"))
   (dbparameter-group-name
    (common-lisp:error ":dbparameter-group-name is required") :type
    (common-lisp:or string common-lisp:null))
   (source common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (filters common-lisp:nil :type
    (common-lisp:or filter-list common-lisp:null))
   (max-records common-lisp:nil :type
    (common-lisp:or integer-optional common-lisp:null))
   (marker common-lisp:nil :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-dbparameters-message
                    'make-describe-dbparameters-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-dbparameters-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-dbparameters-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dbparameter-group-name))
      (common-lisp:list
       (common-lisp:cons "DBParameterGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source))
      (common-lisp:list
       (common-lisp:cons "Source"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filters))
      (common-lisp:list
       (common-lisp:cons "Filters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-records))
      (common-lisp:list
       (common-lisp:cons "MaxRecords"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-dbparameters-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-dbproxies-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-dbproxies-request-"))
   (dbproxy-name common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (filters common-lisp:nil :type
    (common-lisp:or filter-list common-lisp:null))
   (marker common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (max-records common-lisp:nil :type
    (common-lisp:or max-records common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-dbproxies-request
                    'make-describe-dbproxies-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-dbproxies-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-dbproxies-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dbproxy-name))
      (common-lisp:list
       (common-lisp:cons "DBProxyName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filters))
      (common-lisp:list
       (common-lisp:cons "Filters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-records))
      (common-lisp:list
       (common-lisp:cons "MaxRecords"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-dbproxies-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-dbproxies-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-dbproxies-response-"))
   (dbproxies common-lisp:nil :type
    (common-lisp:or dbproxy-list common-lisp:null))
   (marker common-lisp:nil :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-dbproxies-response
                    'make-describe-dbproxies-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-dbproxies-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-dbproxies-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dbproxies))
      (common-lisp:list
       (common-lisp:cons "DBProxies"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-dbproxies-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-dbproxy-endpoints-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-dbproxy-endpoints-request-"))
   (dbproxy-name common-lisp:nil :type
    (common-lisp:or dbproxy-name common-lisp:null))
   (dbproxy-endpoint-name common-lisp:nil :type
    (common-lisp:or dbproxy-endpoint-name common-lisp:null))
   (filters common-lisp:nil :type
    (common-lisp:or filter-list common-lisp:null))
   (marker common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (max-records common-lisp:nil :type
    (common-lisp:or max-records common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-dbproxy-endpoints-request
                    'make-describe-dbproxy-endpoints-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-dbproxy-endpoints-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-dbproxy-endpoints-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dbproxy-name))
      (common-lisp:list
       (common-lisp:cons "DBProxyName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dbproxy-endpoint-name))
      (common-lisp:list
       (common-lisp:cons "DBProxyEndpointName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filters))
      (common-lisp:list
       (common-lisp:cons "Filters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-records))
      (common-lisp:list
       (common-lisp:cons "MaxRecords"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-dbproxy-endpoints-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-dbproxy-endpoints-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-dbproxy-endpoints-response-"))
   (dbproxy-endpoints common-lisp:nil :type
    (common-lisp:or dbproxy-endpoint-list common-lisp:null))
   (marker common-lisp:nil :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-dbproxy-endpoints-response
                    'make-describe-dbproxy-endpoints-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-dbproxy-endpoints-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-dbproxy-endpoints-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dbproxy-endpoints))
      (common-lisp:list
       (common-lisp:cons "DBProxyEndpoints"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-dbproxy-endpoints-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-dbproxy-target-groups-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-dbproxy-target-groups-request-"))
   (dbproxy-name (common-lisp:error ":dbproxy-name is required") :type
    (common-lisp:or string common-lisp:null))
   (target-group-name common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (filters common-lisp:nil :type
    (common-lisp:or filter-list common-lisp:null))
   (marker common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (max-records common-lisp:nil :type
    (common-lisp:or max-records common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-dbproxy-target-groups-request
                    'make-describe-dbproxy-target-groups-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-dbproxy-target-groups-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-dbproxy-target-groups-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dbproxy-name))
      (common-lisp:list
       (common-lisp:cons "DBProxyName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target-group-name))
      (common-lisp:list
       (common-lisp:cons "TargetGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filters))
      (common-lisp:list
       (common-lisp:cons "Filters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-records))
      (common-lisp:list
       (common-lisp:cons "MaxRecords"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-dbproxy-target-groups-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-dbproxy-target-groups-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-dbproxy-target-groups-response-"))
   (target-groups common-lisp:nil :type
    (common-lisp:or target-group-list common-lisp:null))
   (marker common-lisp:nil :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-dbproxy-target-groups-response
                    'make-describe-dbproxy-target-groups-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-dbproxy-target-groups-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-dbproxy-target-groups-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target-groups))
      (common-lisp:list
       (common-lisp:cons "TargetGroups"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-dbproxy-target-groups-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-dbproxy-targets-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-dbproxy-targets-request-"))
   (dbproxy-name (common-lisp:error ":dbproxy-name is required") :type
    (common-lisp:or string common-lisp:null))
   (target-group-name common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (filters common-lisp:nil :type
    (common-lisp:or filter-list common-lisp:null))
   (marker common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (max-records common-lisp:nil :type
    (common-lisp:or max-records common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-dbproxy-targets-request
                    'make-describe-dbproxy-targets-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-dbproxy-targets-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-dbproxy-targets-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dbproxy-name))
      (common-lisp:list
       (common-lisp:cons "DBProxyName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target-group-name))
      (common-lisp:list
       (common-lisp:cons "TargetGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filters))
      (common-lisp:list
       (common-lisp:cons "Filters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-records))
      (common-lisp:list
       (common-lisp:cons "MaxRecords"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-dbproxy-targets-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-dbproxy-targets-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-dbproxy-targets-response-"))
   (targets common-lisp:nil :type
    (common-lisp:or target-list common-lisp:null))
   (marker common-lisp:nil :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-dbproxy-targets-response
                    'make-describe-dbproxy-targets-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-dbproxy-targets-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-dbproxy-targets-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'targets))
      (common-lisp:list
       (common-lisp:cons "Targets"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-dbproxy-targets-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-dbsecurity-groups-message (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-dbsecurity-groups-message-"))
   (dbsecurity-group-name common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (filters common-lisp:nil :type
    (common-lisp:or filter-list common-lisp:null))
   (max-records common-lisp:nil :type
    (common-lisp:or integer-optional common-lisp:null))
   (marker common-lisp:nil :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-dbsecurity-groups-message
                    'make-describe-dbsecurity-groups-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-dbsecurity-groups-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-dbsecurity-groups-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dbsecurity-group-name))
      (common-lisp:list
       (common-lisp:cons "DBSecurityGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filters))
      (common-lisp:list
       (common-lisp:cons "Filters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-records))
      (common-lisp:list
       (common-lisp:cons "MaxRecords"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-dbsecurity-groups-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-dbsnapshot-attributes-message (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-dbsnapshot-attributes-message-"))
   (dbsnapshot-identifier
    (common-lisp:error ":dbsnapshot-identifier is required") :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-dbsnapshot-attributes-message
                    'make-describe-dbsnapshot-attributes-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-dbsnapshot-attributes-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-dbsnapshot-attributes-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dbsnapshot-identifier))
      (common-lisp:list
       (common-lisp:cons "DBSnapshotIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-dbsnapshot-attributes-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-dbsnapshot-attributes-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-dbsnapshot-attributes-result-"))
   (dbsnapshot-attributes-result common-lisp:nil :type
    (common-lisp:or dbsnapshot-attributes-result common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-dbsnapshot-attributes-result
                    'make-describe-dbsnapshot-attributes-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-dbsnapshot-attributes-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-dbsnapshot-attributes-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dbsnapshot-attributes-result))
      (common-lisp:list
       (common-lisp:cons "DBSnapshotAttributesResult"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-dbsnapshot-attributes-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-dbsnapshots-message (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-dbsnapshots-message-"))
   (dbinstance-identifier common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (dbsnapshot-identifier common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (snapshot-type common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (filters common-lisp:nil :type
    (common-lisp:or filter-list common-lisp:null))
   (max-records common-lisp:nil :type
    (common-lisp:or integer-optional common-lisp:null))
   (marker common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (include-shared common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (include-public common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (dbi-resource-id common-lisp:nil :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-dbsnapshots-message
                    'make-describe-dbsnapshots-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-dbsnapshots-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-dbsnapshots-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dbinstance-identifier))
      (common-lisp:list
       (common-lisp:cons "DBInstanceIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dbsnapshot-identifier))
      (common-lisp:list
       (common-lisp:cons "DBSnapshotIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'snapshot-type))
      (common-lisp:list
       (common-lisp:cons "SnapshotType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filters))
      (common-lisp:list
       (common-lisp:cons "Filters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-records))
      (common-lisp:list
       (common-lisp:cons "MaxRecords"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'include-shared))
      (common-lisp:list
       (common-lisp:cons "IncludeShared"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'include-public))
      (common-lisp:list
       (common-lisp:cons "IncludePublic"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dbi-resource-id))
      (common-lisp:list
       (common-lisp:cons "DbiResourceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-dbsnapshots-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-dbsubnet-groups-message (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-dbsubnet-groups-message-"))
   (dbsubnet-group-name common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (filters common-lisp:nil :type
    (common-lisp:or filter-list common-lisp:null))
   (max-records common-lisp:nil :type
    (common-lisp:or integer-optional common-lisp:null))
   (marker common-lisp:nil :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-dbsubnet-groups-message
                    'make-describe-dbsubnet-groups-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-dbsubnet-groups-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-dbsubnet-groups-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dbsubnet-group-name))
      (common-lisp:list
       (common-lisp:cons "DBSubnetGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filters))
      (common-lisp:list
       (common-lisp:cons "Filters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-records))
      (common-lisp:list
       (common-lisp:cons "MaxRecords"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-dbsubnet-groups-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-engine-default-cluster-parameters-message
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-describe-engine-default-cluster-parameters-message-"))
   (dbparameter-group-family
    (common-lisp:error ":dbparameter-group-family is required") :type
    (common-lisp:or string common-lisp:null))
   (filters common-lisp:nil :type
    (common-lisp:or filter-list common-lisp:null))
   (max-records common-lisp:nil :type
    (common-lisp:or integer-optional common-lisp:null))
   (marker common-lisp:nil :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-engine-default-cluster-parameters-message
                    'make-describe-engine-default-cluster-parameters-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-engine-default-cluster-parameters-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-engine-default-cluster-parameters-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dbparameter-group-family))
      (common-lisp:list
       (common-lisp:cons "DBParameterGroupFamily"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filters))
      (common-lisp:list
       (common-lisp:cons "Filters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-records))
      (common-lisp:list
       (common-lisp:cons "MaxRecords"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-engine-default-cluster-parameters-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-engine-default-cluster-parameters-result
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-describe-engine-default-cluster-parameters-result-"))
   (engine-defaults common-lisp:nil :type
    (common-lisp:or engine-defaults common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-engine-default-cluster-parameters-result
                    'make-describe-engine-default-cluster-parameters-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-engine-default-cluster-parameters-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-engine-default-cluster-parameters-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'engine-defaults))
      (common-lisp:list
       (common-lisp:cons "EngineDefaults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-engine-default-cluster-parameters-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-engine-default-parameters-message (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-engine-default-parameters-message-"))
   (dbparameter-group-family
    (common-lisp:error ":dbparameter-group-family is required") :type
    (common-lisp:or string common-lisp:null))
   (filters common-lisp:nil :type
    (common-lisp:or filter-list common-lisp:null))
   (max-records common-lisp:nil :type
    (common-lisp:or integer-optional common-lisp:null))
   (marker common-lisp:nil :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-engine-default-parameters-message
                    'make-describe-engine-default-parameters-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-engine-default-parameters-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-engine-default-parameters-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dbparameter-group-family))
      (common-lisp:list
       (common-lisp:cons "DBParameterGroupFamily"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filters))
      (common-lisp:list
       (common-lisp:cons "Filters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-records))
      (common-lisp:list
       (common-lisp:cons "MaxRecords"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-engine-default-parameters-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-engine-default-parameters-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-engine-default-parameters-result-"))
   (engine-defaults common-lisp:nil :type
    (common-lisp:or engine-defaults common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-engine-default-parameters-result
                    'make-describe-engine-default-parameters-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-engine-default-parameters-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-engine-default-parameters-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'engine-defaults))
      (common-lisp:list
       (common-lisp:cons "EngineDefaults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-engine-default-parameters-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-event-categories-message (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-event-categories-message-"))
   (source-type common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (filters common-lisp:nil :type
    (common-lisp:or filter-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-event-categories-message
                    'make-describe-event-categories-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-event-categories-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-event-categories-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-type))
      (common-lisp:list
       (common-lisp:cons "SourceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filters))
      (common-lisp:list
       (common-lisp:cons "Filters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-event-categories-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-event-subscriptions-message (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-event-subscriptions-message-"))
   (subscription-name common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (filters common-lisp:nil :type
    (common-lisp:or filter-list common-lisp:null))
   (max-records common-lisp:nil :type
    (common-lisp:or integer-optional common-lisp:null))
   (marker common-lisp:nil :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-event-subscriptions-message
                    'make-describe-event-subscriptions-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-event-subscriptions-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-event-subscriptions-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subscription-name))
      (common-lisp:list
       (common-lisp:cons "SubscriptionName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filters))
      (common-lisp:list
       (common-lisp:cons "Filters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-records))
      (common-lisp:list
       (common-lisp:cons "MaxRecords"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-event-subscriptions-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-events-message (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-events-message-"))
   (source-identifier common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (source-type common-lisp:nil :type
    (common-lisp:or source-type common-lisp:null))
   (start-time common-lisp:nil :type (common-lisp:or tstamp common-lisp:null))
   (end-time common-lisp:nil :type (common-lisp:or tstamp common-lisp:null))
   (duration common-lisp:nil :type
    (common-lisp:or integer-optional common-lisp:null))
   (event-categories common-lisp:nil :type
    (common-lisp:or event-categories-list common-lisp:null))
   (filters common-lisp:nil :type
    (common-lisp:or filter-list common-lisp:null))
   (max-records common-lisp:nil :type
    (common-lisp:or integer-optional common-lisp:null))
   (marker common-lisp:nil :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-events-message 'make-describe-events-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-events-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-events-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-identifier))
      (common-lisp:list
       (common-lisp:cons "SourceIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-type))
      (common-lisp:list
       (common-lisp:cons "SourceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start-time))
      (common-lisp:list
       (common-lisp:cons "StartTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'end-time))
      (common-lisp:list
       (common-lisp:cons "EndTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'duration))
      (common-lisp:list
       (common-lisp:cons "Duration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'event-categories))
      (common-lisp:list
       (common-lisp:cons "EventCategories"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filters))
      (common-lisp:list
       (common-lisp:cons "Filters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-records))
      (common-lisp:list
       (common-lisp:cons "MaxRecords"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-events-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-export-tasks-message (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-export-tasks-message-"))
   (export-task-identifier common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (source-arn common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (filters common-lisp:nil :type
    (common-lisp:or filter-list common-lisp:null))
   (marker common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (max-records common-lisp:nil :type
    (common-lisp:or max-records common-lisp:null))
   (source-type common-lisp:nil :type
    (common-lisp:or export-source-type common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-export-tasks-message
                    'make-describe-export-tasks-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-export-tasks-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-export-tasks-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'export-task-identifier))
      (common-lisp:list
       (common-lisp:cons "ExportTaskIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-arn))
      (common-lisp:list
       (common-lisp:cons "SourceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filters))
      (common-lisp:list
       (common-lisp:cons "Filters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-records))
      (common-lisp:list
       (common-lisp:cons "MaxRecords"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-type))
      (common-lisp:list
       (common-lisp:cons "SourceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-export-tasks-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-global-clusters-message (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-global-clusters-message-"))
   (global-cluster-identifier common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (filters common-lisp:nil :type
    (common-lisp:or filter-list common-lisp:null))
   (max-records common-lisp:nil :type
    (common-lisp:or integer-optional common-lisp:null))
   (marker common-lisp:nil :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-global-clusters-message
                    'make-describe-global-clusters-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-global-clusters-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-global-clusters-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'global-cluster-identifier))
      (common-lisp:list
       (common-lisp:cons "GlobalClusterIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filters))
      (common-lisp:list
       (common-lisp:cons "Filters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-records))
      (common-lisp:list
       (common-lisp:cons "MaxRecords"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-global-clusters-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-option-group-options-message (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-option-group-options-message-"))
   (engine-name (common-lisp:error ":engine-name is required") :type
    (common-lisp:or string common-lisp:null))
   (major-engine-version common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (filters common-lisp:nil :type
    (common-lisp:or filter-list common-lisp:null))
   (max-records common-lisp:nil :type
    (common-lisp:or integer-optional common-lisp:null))
   (marker common-lisp:nil :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-option-group-options-message
                    'make-describe-option-group-options-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-option-group-options-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-option-group-options-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'engine-name))
      (common-lisp:list
       (common-lisp:cons "EngineName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'major-engine-version))
      (common-lisp:list
       (common-lisp:cons "MajorEngineVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filters))
      (common-lisp:list
       (common-lisp:cons "Filters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-records))
      (common-lisp:list
       (common-lisp:cons "MaxRecords"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-option-group-options-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-option-groups-message (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-option-groups-message-"))
   (option-group-name common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (filters common-lisp:nil :type
    (common-lisp:or filter-list common-lisp:null))
   (marker common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (max-records common-lisp:nil :type
    (common-lisp:or integer-optional common-lisp:null))
   (engine-name common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (major-engine-version common-lisp:nil :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-option-groups-message
                    'make-describe-option-groups-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-option-groups-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-option-groups-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'option-group-name))
      (common-lisp:list
       (common-lisp:cons "OptionGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filters))
      (common-lisp:list
       (common-lisp:cons "Filters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-records))
      (common-lisp:list
       (common-lisp:cons "MaxRecords"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'engine-name))
      (common-lisp:list
       (common-lisp:cons "EngineName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'major-engine-version))
      (common-lisp:list
       (common-lisp:cons "MajorEngineVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-option-groups-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-orderable-dbinstance-options-message (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-describe-orderable-dbinstance-options-message-"))
   (engine (common-lisp:error ":engine is required") :type
    (common-lisp:or string common-lisp:null))
   (engine-version common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (dbinstance-class common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (license-model common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (availability-zone-group common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (vpc common-lisp:nil :type
    (common-lisp:or boolean-optional common-lisp:null))
   (filters common-lisp:nil :type
    (common-lisp:or filter-list common-lisp:null))
   (max-records common-lisp:nil :type
    (common-lisp:or integer-optional common-lisp:null))
   (marker common-lisp:nil :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-orderable-dbinstance-options-message
                    'make-describe-orderable-dbinstance-options-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-orderable-dbinstance-options-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-orderable-dbinstance-options-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'engine))
      (common-lisp:list
       (common-lisp:cons "Engine"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'engine-version))
      (common-lisp:list
       (common-lisp:cons "EngineVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dbinstance-class))
      (common-lisp:list
       (common-lisp:cons "DBInstanceClass"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'license-model))
      (common-lisp:list
       (common-lisp:cons "LicenseModel"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'availability-zone-group))
      (common-lisp:list
       (common-lisp:cons "AvailabilityZoneGroup"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpc))
      (common-lisp:list
       (common-lisp:cons "Vpc"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filters))
      (common-lisp:list
       (common-lisp:cons "Filters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-records))
      (common-lisp:list
       (common-lisp:cons "MaxRecords"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-orderable-dbinstance-options-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-pending-maintenance-actions-message (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-describe-pending-maintenance-actions-message-"))
   (resource-identifier common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (filters common-lisp:nil :type
    (common-lisp:or filter-list common-lisp:null))
   (marker common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (max-records common-lisp:nil :type
    (common-lisp:or integer-optional common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-pending-maintenance-actions-message
                    'make-describe-pending-maintenance-actions-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-pending-maintenance-actions-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-pending-maintenance-actions-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-identifier))
      (common-lisp:list
       (common-lisp:cons "ResourceIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filters))
      (common-lisp:list
       (common-lisp:cons "Filters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-records))
      (common-lisp:list
       (common-lisp:cons "MaxRecords"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-pending-maintenance-actions-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-reserved-dbinstances-message (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-reserved-dbinstances-message-"))
   (reserved-dbinstance-id common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (reserved-dbinstances-offering-id common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (dbinstance-class common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (duration common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (product-description common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (offering-type common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (multi-az common-lisp:nil :type
    (common-lisp:or boolean-optional common-lisp:null))
   (lease-id common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (filters common-lisp:nil :type
    (common-lisp:or filter-list common-lisp:null))
   (max-records common-lisp:nil :type
    (common-lisp:or integer-optional common-lisp:null))
   (marker common-lisp:nil :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-reserved-dbinstances-message
                    'make-describe-reserved-dbinstances-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-reserved-dbinstances-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-reserved-dbinstances-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'reserved-dbinstance-id))
      (common-lisp:list
       (common-lisp:cons "ReservedDBInstanceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'reserved-dbinstances-offering-id))
      (common-lisp:list
       (common-lisp:cons "ReservedDBInstancesOfferingId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dbinstance-class))
      (common-lisp:list
       (common-lisp:cons "DBInstanceClass"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'duration))
      (common-lisp:list
       (common-lisp:cons "Duration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'product-description))
      (common-lisp:list
       (common-lisp:cons "ProductDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'offering-type))
      (common-lisp:list
       (common-lisp:cons "OfferingType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'multi-az))
      (common-lisp:list
       (common-lisp:cons "MultiAZ"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'lease-id))
      (common-lisp:list
       (common-lisp:cons "LeaseId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filters))
      (common-lisp:list
       (common-lisp:cons "Filters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-records))
      (common-lisp:list
       (common-lisp:cons "MaxRecords"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-reserved-dbinstances-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-reserved-dbinstances-offerings-message (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-describe-reserved-dbinstances-offerings-message-"))
   (reserved-dbinstances-offering-id common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (dbinstance-class common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (duration common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (product-description common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (offering-type common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (multi-az common-lisp:nil :type
    (common-lisp:or boolean-optional common-lisp:null))
   (filters common-lisp:nil :type
    (common-lisp:or filter-list common-lisp:null))
   (max-records common-lisp:nil :type
    (common-lisp:or integer-optional common-lisp:null))
   (marker common-lisp:nil :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-reserved-dbinstances-offerings-message
                    'make-describe-reserved-dbinstances-offerings-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-reserved-dbinstances-offerings-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-reserved-dbinstances-offerings-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'reserved-dbinstances-offering-id))
      (common-lisp:list
       (common-lisp:cons "ReservedDBInstancesOfferingId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dbinstance-class))
      (common-lisp:list
       (common-lisp:cons "DBInstanceClass"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'duration))
      (common-lisp:list
       (common-lisp:cons "Duration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'product-description))
      (common-lisp:list
       (common-lisp:cons "ProductDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'offering-type))
      (common-lisp:list
       (common-lisp:cons "OfferingType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'multi-az))
      (common-lisp:list
       (common-lisp:cons "MultiAZ"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filters))
      (common-lisp:list
       (common-lisp:cons "Filters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-records))
      (common-lisp:list
       (common-lisp:cons "MaxRecords"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-reserved-dbinstances-offerings-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-source-regions-message (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-source-regions-message-"))
   (region-name common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (max-records common-lisp:nil :type
    (common-lisp:or integer-optional common-lisp:null))
   (marker common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (filters common-lisp:nil :type
    (common-lisp:or filter-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-source-regions-message
                    'make-describe-source-regions-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-source-regions-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-source-regions-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'region-name))
      (common-lisp:list
       (common-lisp:cons "RegionName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-records))
      (common-lisp:list
       (common-lisp:cons "MaxRecords"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filters))
      (common-lisp:list
       (common-lisp:cons "Filters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-source-regions-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-valid-dbinstance-modifications-message (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-describe-valid-dbinstance-modifications-message-"))
   (dbinstance-identifier
    (common-lisp:error ":dbinstance-identifier is required") :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-valid-dbinstance-modifications-message
                    'make-describe-valid-dbinstance-modifications-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-valid-dbinstance-modifications-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-valid-dbinstance-modifications-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dbinstance-identifier))
      (common-lisp:list
       (common-lisp:cons "DBInstanceIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-valid-dbinstance-modifications-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-valid-dbinstance-modifications-result (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-describe-valid-dbinstance-modifications-result-"))
   (valid-dbinstance-modifications-message common-lisp:nil :type
    (common-lisp:or valid-dbinstance-modifications-message common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-valid-dbinstance-modifications-result
                    'make-describe-valid-dbinstance-modifications-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-valid-dbinstance-modifications-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-valid-dbinstance-modifications-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'valid-dbinstance-modifications-message))
      (common-lisp:list
       (common-lisp:cons "ValidDBInstanceModificationsMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-valid-dbinstance-modifications-result))
   common-lisp:nil))
(common-lisp:deftype description () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (domain-membership (:copier common-lisp:nil)
      (:conc-name "struct-shape-domain-membership-"))
   (domain common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (status common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (fqdn common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (iamrole-name common-lisp:nil :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'domain-membership 'make-domain-membership))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input domain-membership))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input domain-membership))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain))
      (common-lisp:list
       (common-lisp:cons "Domain"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'fqdn))
      (common-lisp:list
       (common-lisp:cons "FQDN"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'iamrole-name))
      (common-lisp:list
       (common-lisp:cons "IAMRoleName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input domain-membership))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype domain-membership-list ()
   '(trivial-types:proper-list domain-membership))
 (common-lisp:defun |make-domain-membership-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list domain-membership))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition domain-not-found-fault
     (rds-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'domain-not-found-fault)))
(common-lisp:deftype double () 'common-lisp:double-float)
(common-lisp:deftype double-optional () 'common-lisp:double-float)
(common-lisp:progn
 (common-lisp:defstruct
     (double-range (:copier common-lisp:nil)
      (:conc-name "struct-shape-double-range-"))
   (from common-lisp:nil :type (common-lisp:or double common-lisp:null))
   (to common-lisp:nil :type (common-lisp:or double common-lisp:null)))
 (common-lisp:export (common-lisp:list 'double-range 'make-double-range))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input double-range))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input double-range))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'from))
      (common-lisp:list
       (common-lisp:cons "From"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'to))
      (common-lisp:list
       (common-lisp:cons "To"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input double-range))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype double-range-list ()
   '(trivial-types:proper-list double-range))
 (common-lisp:defun |make-double-range-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list double-range))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (download-dblog-file-portion-details (:copier common-lisp:nil)
      (:conc-name "struct-shape-download-dblog-file-portion-details-"))
   (log-file-data common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (marker common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (additional-data-pending common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'download-dblog-file-portion-details
                    'make-download-dblog-file-portion-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          download-dblog-file-portion-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          download-dblog-file-portion-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'log-file-data))
      (common-lisp:list
       (common-lisp:cons "LogFileData"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'additional-data-pending))
      (common-lisp:list
       (common-lisp:cons "AdditionalDataPending"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          download-dblog-file-portion-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (download-dblog-file-portion-message (:copier common-lisp:nil)
      (:conc-name "struct-shape-download-dblog-file-portion-message-"))
   (dbinstance-identifier
    (common-lisp:error ":dbinstance-identifier is required") :type
    (common-lisp:or string common-lisp:null))
   (log-file-name (common-lisp:error ":log-file-name is required") :type
    (common-lisp:or string common-lisp:null))
   (marker common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (number-of-lines common-lisp:nil :type
    (common-lisp:or integer common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'download-dblog-file-portion-message
                    'make-download-dblog-file-portion-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          download-dblog-file-portion-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          download-dblog-file-portion-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dbinstance-identifier))
      (common-lisp:list
       (common-lisp:cons "DBInstanceIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'log-file-name))
      (common-lisp:list
       (common-lisp:cons "LogFileName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'number-of-lines))
      (common-lisp:list
       (common-lisp:cons "NumberOfLines"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          download-dblog-file-portion-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (ec2security-group (:copier common-lisp:nil)
      (:conc-name "struct-shape-ec2security-group-"))
   (status common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (ec2security-group-name common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (ec2security-group-id common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (ec2security-group-owner-id common-lisp:nil :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'ec2security-group 'make-ec2security-group))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input ec2security-group))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input ec2security-group))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'ec2security-group-name))
      (common-lisp:list
       (common-lisp:cons "EC2SecurityGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'ec2security-group-id))
      (common-lisp:list
       (common-lisp:cons "EC2SecurityGroupId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'ec2security-group-owner-id))
      (common-lisp:list
       (common-lisp:cons "EC2SecurityGroupOwnerId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input ec2security-group))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype ec2security-group-list ()
   '(trivial-types:proper-list ec2security-group))
 (common-lisp:defun |make-ec2security-group-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list ec2security-group))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition ec2image-properties-not-supported-fault
     (rds-error)
     common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'ec2image-properties-not-supported-fault)))
(common-lisp:progn
 (common-lisp:defstruct
     (endpoint (:copier common-lisp:nil) (:conc-name "struct-shape-endpoint-"))
   (address common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (port common-lisp:nil :type (common-lisp:or integer common-lisp:null))
   (hosted-zone-id common-lisp:nil :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export (common-lisp:list 'endpoint 'make-endpoint))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input endpoint))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input endpoint))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'address))
      (common-lisp:list
       (common-lisp:cons "Address"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'port))
      (common-lisp:list
       (common-lisp:cons "Port"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'hosted-zone-id))
      (common-lisp:list
       (common-lisp:cons "HostedZoneId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input endpoint))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (engine-defaults (:copier common-lisp:nil)
      (:conc-name "struct-shape-engine-defaults-"))
   (dbparameter-group-family common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (marker common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (parameters common-lisp:nil :type
    (common-lisp:or parameters-list common-lisp:null)))
 (common-lisp:export (common-lisp:list 'engine-defaults 'make-engine-defaults))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input engine-defaults))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input engine-defaults))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dbparameter-group-family))
      (common-lisp:list
       (common-lisp:cons "DBParameterGroupFamily"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'parameters))
      (common-lisp:list
       (common-lisp:cons "Parameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input engine-defaults))
   common-lisp:nil))
(common-lisp:deftype engine-family () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype engine-mode-list () '(trivial-types:proper-list string))
 (common-lisp:defun |make-engine-mode-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list string))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (event (:copier common-lisp:nil) (:conc-name "struct-shape-event-"))
   (source-identifier common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (source-type common-lisp:nil :type
    (common-lisp:or source-type common-lisp:null))
   (message common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (event-categories common-lisp:nil :type
    (common-lisp:or event-categories-list common-lisp:null))
   (date common-lisp:nil :type (common-lisp:or tstamp common-lisp:null))
   (source-arn common-lisp:nil :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export (common-lisp:list 'event 'make-event))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input event))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input event))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-identifier))
      (common-lisp:list
       (common-lisp:cons "SourceIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-type))
      (common-lisp:list
       (common-lisp:cons "SourceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message))
      (common-lisp:list
       (common-lisp:cons "Message"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'event-categories))
      (common-lisp:list
       (common-lisp:cons "EventCategories"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'date))
      (common-lisp:list
       (common-lisp:cons "Date"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-arn))
      (common-lisp:list
       (common-lisp:cons "SourceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input event))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype event-categories-list ()
   '(trivial-types:proper-list string))
 (common-lisp:defun |make-event-categories-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list string))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (event-categories-map (:copier common-lisp:nil)
      (:conc-name "struct-shape-event-categories-map-"))
   (source-type common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (event-categories common-lisp:nil :type
    (common-lisp:or event-categories-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'event-categories-map 'make-event-categories-map))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input event-categories-map))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input event-categories-map))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-type))
      (common-lisp:list
       (common-lisp:cons "SourceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'event-categories))
      (common-lisp:list
       (common-lisp:cons "EventCategories"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input event-categories-map))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype event-categories-map-list ()
   '(trivial-types:proper-list event-categories-map))
 (common-lisp:defun |make-event-categories-map-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list event-categories-map))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (event-categories-message (:copier common-lisp:nil)
      (:conc-name "struct-shape-event-categories-message-"))
   (event-categories-map-list common-lisp:nil :type
    (common-lisp:or event-categories-map-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'event-categories-message 'make-event-categories-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          event-categories-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          event-categories-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'event-categories-map-list))
      (common-lisp:list
       (common-lisp:cons "EventCategoriesMapList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          event-categories-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype event-list () '(trivial-types:proper-list event))
 (common-lisp:defun |make-event-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list event))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (event-subscription (:copier common-lisp:nil)
      (:conc-name "struct-shape-event-subscription-"))
   (customer-aws-id common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (cust-subscription-id common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (sns-topic-arn common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (status common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (subscription-creation-time common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (source-type common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (source-ids-list common-lisp:nil :type
    (common-lisp:or source-ids-list common-lisp:null))
   (event-categories-list common-lisp:nil :type
    (common-lisp:or event-categories-list common-lisp:null))
   (enabled common-lisp:nil :type (common-lisp:or boolean common-lisp:null))
   (event-subscription-arn common-lisp:nil :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'event-subscription 'make-event-subscription))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input event-subscription))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input event-subscription))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'customer-aws-id))
      (common-lisp:list
       (common-lisp:cons "CustomerAwsId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cust-subscription-id))
      (common-lisp:list
       (common-lisp:cons "CustSubscriptionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sns-topic-arn))
      (common-lisp:list
       (common-lisp:cons "SnsTopicArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'subscription-creation-time))
      (common-lisp:list
       (common-lisp:cons "SubscriptionCreationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-type))
      (common-lisp:list
       (common-lisp:cons "SourceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-ids-list))
      (common-lisp:list
       (common-lisp:cons "SourceIdsList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'event-categories-list))
      (common-lisp:list
       (common-lisp:cons "EventCategoriesList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'enabled))
      (common-lisp:list
       (common-lisp:cons "Enabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'event-subscription-arn))
      (common-lisp:list
       (common-lisp:cons "EventSubscriptionArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input event-subscription))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition event-subscription-quota-exceeded-fault
     (rds-error)
     common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'event-subscription-quota-exceeded-fault)))
(common-lisp:progn
 (common-lisp:deftype event-subscriptions-list ()
   '(trivial-types:proper-list event-subscription))
 (common-lisp:defun |make-event-subscriptions-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list event-subscription))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (event-subscriptions-message (:copier common-lisp:nil)
      (:conc-name "struct-shape-event-subscriptions-message-"))
   (marker common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (event-subscriptions-list common-lisp:nil :type
    (common-lisp:or event-subscriptions-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'event-subscriptions-message
                    'make-event-subscriptions-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          event-subscriptions-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          event-subscriptions-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'event-subscriptions-list))
      (common-lisp:list
       (common-lisp:cons "EventSubscriptionsList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          event-subscriptions-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (events-message (:copier common-lisp:nil)
      (:conc-name "struct-shape-events-message-"))
   (marker common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (events common-lisp:nil :type (common-lisp:or event-list common-lisp:null)))
 (common-lisp:export (common-lisp:list 'events-message 'make-events-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input events-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input events-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'events))
      (common-lisp:list
       (common-lisp:cons "Events"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input events-message))
   common-lisp:nil))
(common-lisp:deftype export-source-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (export-task (:copier common-lisp:nil)
      (:conc-name "struct-shape-export-task-"))
   (export-task-identifier common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (source-arn common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (export-only common-lisp:nil :type
    (common-lisp:or string-list common-lisp:null))
   (snapshot-time common-lisp:nil :type
    (common-lisp:or tstamp common-lisp:null))
   (task-start-time common-lisp:nil :type
    (common-lisp:or tstamp common-lisp:null))
   (task-end-time common-lisp:nil :type
    (common-lisp:or tstamp common-lisp:null))
   (s3bucket common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (s3prefix common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (iam-role-arn common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (kms-key-id common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (status common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (percent-progress common-lisp:nil :type
    (common-lisp:or integer common-lisp:null))
   (total-extracted-data-in-gb common-lisp:nil :type
    (common-lisp:or integer common-lisp:null))
   (failure-cause common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (warning-message common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (source-type common-lisp:nil :type
    (common-lisp:or export-source-type common-lisp:null)))
 (common-lisp:export (common-lisp:list 'export-task 'make-export-task))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input export-task))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input export-task))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'export-task-identifier))
      (common-lisp:list
       (common-lisp:cons "ExportTaskIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-arn))
      (common-lisp:list
       (common-lisp:cons "SourceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'export-only))
      (common-lisp:list
       (common-lisp:cons "ExportOnly"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'snapshot-time))
      (common-lisp:list
       (common-lisp:cons "SnapshotTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'task-start-time))
      (common-lisp:list
       (common-lisp:cons "TaskStartTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'task-end-time))
      (common-lisp:list
       (common-lisp:cons "TaskEndTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3bucket))
      (common-lisp:list
       (common-lisp:cons "S3Bucket"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3prefix))
      (common-lisp:list
       (common-lisp:cons "S3Prefix"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'iam-role-arn))
      (common-lisp:list
       (common-lisp:cons "IamRoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kms-key-id))
      (common-lisp:list
       (common-lisp:cons "KmsKeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'percent-progress))
      (common-lisp:list
       (common-lisp:cons "PercentProgress"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'total-extracted-data-in-gb))
      (common-lisp:list
       (common-lisp:cons "TotalExtractedDataInGB"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'failure-cause))
      (common-lisp:list
       (common-lisp:cons "FailureCause"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'warning-message))
      (common-lisp:list
       (common-lisp:cons "WarningMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-type))
      (common-lisp:list
       (common-lisp:cons "SourceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input export-task))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition export-task-already-exists-fault
     (rds-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'export-task-already-exists-fault)))
(common-lisp:progn
 (common-lisp:define-condition export-task-not-found-fault
     (rds-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'export-task-not-found-fault)))
(common-lisp:progn
 (common-lisp:deftype export-tasks-list ()
   '(trivial-types:proper-list export-task))
 (common-lisp:defun |make-export-tasks-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list export-task))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (export-tasks-message (:copier common-lisp:nil)
      (:conc-name "struct-shape-export-tasks-message-"))
   (marker common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (export-tasks common-lisp:nil :type
    (common-lisp:or export-tasks-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'export-tasks-message 'make-export-tasks-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input export-tasks-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input export-tasks-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'export-tasks))
      (common-lisp:list
       (common-lisp:cons "ExportTasks"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input export-tasks-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (failover-dbcluster-message (:copier common-lisp:nil)
      (:conc-name "struct-shape-failover-dbcluster-message-"))
   (dbcluster-identifier
    (common-lisp:error ":dbcluster-identifier is required") :type
    (common-lisp:or string common-lisp:null))
   (target-dbinstance-identifier common-lisp:nil :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'failover-dbcluster-message
                    'make-failover-dbcluster-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          failover-dbcluster-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          failover-dbcluster-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dbcluster-identifier))
      (common-lisp:list
       (common-lisp:cons "DBClusterIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'target-dbinstance-identifier))
      (common-lisp:list
       (common-lisp:cons "TargetDBInstanceIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          failover-dbcluster-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (failover-dbcluster-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-failover-dbcluster-result-"))
   (dbcluster common-lisp:nil :type
    (common-lisp:or dbcluster common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'failover-dbcluster-result
                    'make-failover-dbcluster-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          failover-dbcluster-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          failover-dbcluster-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dbcluster))
      (common-lisp:list
       (common-lisp:cons "DBCluster"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          failover-dbcluster-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (failover-global-cluster-message (:copier common-lisp:nil)
      (:conc-name "struct-shape-failover-global-cluster-message-"))
   (global-cluster-identifier
    (common-lisp:error ":global-cluster-identifier is required") :type
    (common-lisp:or global-cluster-identifier common-lisp:null))
   (target-db-cluster-identifier
    (common-lisp:error ":target-db-cluster-identifier is required") :type
    (common-lisp:or dbcluster-identifier common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'failover-global-cluster-message
                    'make-failover-global-cluster-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          failover-global-cluster-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          failover-global-cluster-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'global-cluster-identifier))
      (common-lisp:list
       (common-lisp:cons "GlobalClusterIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'target-db-cluster-identifier))
      (common-lisp:list
       (common-lisp:cons "TargetDbClusterIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          failover-global-cluster-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (failover-global-cluster-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-failover-global-cluster-result-"))
   (global-cluster common-lisp:nil :type
    (common-lisp:or global-cluster common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'failover-global-cluster-result
                    'make-failover-global-cluster-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          failover-global-cluster-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          failover-global-cluster-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'global-cluster))
      (common-lisp:list
       (common-lisp:cons "GlobalCluster"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          failover-global-cluster-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (failover-state (:copier common-lisp:nil)
      (:conc-name "struct-shape-failover-state-"))
   (status common-lisp:nil :type
    (common-lisp:or failover-status common-lisp:null))
   (from-db-cluster-arn common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (to-db-cluster-arn common-lisp:nil :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export (common-lisp:list 'failover-state 'make-failover-state))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input failover-state))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input failover-state))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'from-db-cluster-arn))
      (common-lisp:list
       (common-lisp:cons "FromDbClusterArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'to-db-cluster-arn))
      (common-lisp:list
       (common-lisp:cons "ToDbClusterArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input failover-state))
   common-lisp:nil))
(common-lisp:deftype failover-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype feature-name-list () '(trivial-types:proper-list string))
 (common-lisp:defun |make-feature-name-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list string))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (filter (:copier common-lisp:nil) (:conc-name "struct-shape-filter-"))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or string common-lisp:null))
   (values (common-lisp:error ":values is required") :type
    (common-lisp:or filter-value-list common-lisp:null)))
 (common-lisp:export (common-lisp:list 'filter 'make-filter))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input filter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input filter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'values))
      (common-lisp:list
       (common-lisp:cons "Values"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input filter))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype filter-list () '(trivial-types:proper-list filter))
 (common-lisp:defun |make-filter-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list filter))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype filter-value-list () '(trivial-types:proper-list string))
 (common-lisp:defun |make-filter-value-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list string))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (global-cluster (:copier common-lisp:nil)
      (:conc-name "struct-shape-global-cluster-"))
   (global-cluster-identifier common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (global-cluster-resource-id common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (global-cluster-arn common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (status common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (engine common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (engine-version common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (database-name common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (storage-encrypted common-lisp:nil :type
    (common-lisp:or boolean-optional common-lisp:null))
   (deletion-protection common-lisp:nil :type
    (common-lisp:or boolean-optional common-lisp:null))
   (global-cluster-members common-lisp:nil :type
    (common-lisp:or global-cluster-member-list common-lisp:null))
   (failover-state common-lisp:nil :type
    (common-lisp:or failover-state common-lisp:null)))
 (common-lisp:export (common-lisp:list 'global-cluster 'make-global-cluster))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input global-cluster))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input global-cluster))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'global-cluster-identifier))
      (common-lisp:list
       (common-lisp:cons "GlobalClusterIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'global-cluster-resource-id))
      (common-lisp:list
       (common-lisp:cons "GlobalClusterResourceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'global-cluster-arn))
      (common-lisp:list
       (common-lisp:cons "GlobalClusterArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'engine))
      (common-lisp:list
       (common-lisp:cons "Engine"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'engine-version))
      (common-lisp:list
       (common-lisp:cons "EngineVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'database-name))
      (common-lisp:list
       (common-lisp:cons "DatabaseName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'storage-encrypted))
      (common-lisp:list
       (common-lisp:cons "StorageEncrypted"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'deletion-protection))
      (common-lisp:list
       (common-lisp:cons "DeletionProtection"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'global-cluster-members))
      (common-lisp:list
       (common-lisp:cons "GlobalClusterMembers"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'failover-state))
      (common-lisp:list
       (common-lisp:cons "FailoverState"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input global-cluster))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition global-cluster-already-exists-fault
     (rds-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'global-cluster-already-exists-fault)))
(common-lisp:deftype global-cluster-identifier () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype global-cluster-list ()
   '(trivial-types:proper-list global-cluster))
 (common-lisp:defun |make-global-cluster-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list global-cluster))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (global-cluster-member (:copier common-lisp:nil)
      (:conc-name "struct-shape-global-cluster-member-"))
   (dbcluster-arn common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (readers common-lisp:nil :type
    (common-lisp:or readers-arn-list common-lisp:null))
   (is-writer common-lisp:nil :type (common-lisp:or boolean common-lisp:null))
   (global-write-forwarding-status common-lisp:nil :type
    (common-lisp:or write-forwarding-status common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'global-cluster-member 'make-global-cluster-member))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          global-cluster-member))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          global-cluster-member))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dbcluster-arn))
      (common-lisp:list
       (common-lisp:cons "DBClusterArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'readers))
      (common-lisp:list
       (common-lisp:cons "Readers"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'is-writer))
      (common-lisp:list
       (common-lisp:cons "IsWriter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'global-write-forwarding-status))
      (common-lisp:list
       (common-lisp:cons "GlobalWriteForwardingStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          global-cluster-member))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype global-cluster-member-list ()
   '(trivial-types:proper-list global-cluster-member))
 (common-lisp:defun |make-global-cluster-member-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list global-cluster-member))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition global-cluster-not-found-fault
     (rds-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'global-cluster-not-found-fault)))
(common-lisp:progn
 (common-lisp:define-condition global-cluster-quota-exceeded-fault
     (rds-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'global-cluster-quota-exceeded-fault)))
(common-lisp:progn
 (common-lisp:defstruct
     (global-clusters-message (:copier common-lisp:nil)
      (:conc-name "struct-shape-global-clusters-message-"))
   (marker common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (global-clusters common-lisp:nil :type
    (common-lisp:or global-cluster-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'global-clusters-message 'make-global-clusters-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          global-clusters-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          global-clusters-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'global-clusters))
      (common-lisp:list
       (common-lisp:cons "GlobalClusters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          global-clusters-message))
   common-lisp:nil))
(common-lisp:deftype iamauth-mode () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (iprange (:copier common-lisp:nil) (:conc-name "struct-shape-iprange-"))
   (status common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (cidrip common-lisp:nil :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export (common-lisp:list 'iprange 'make-iprange))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input iprange))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input iprange))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cidrip))
      (common-lisp:list
       (common-lisp:cons "CIDRIP"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input iprange))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype iprange-list () '(trivial-types:proper-list iprange))
 (common-lisp:defun |make-iprange-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list iprange))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition iam-role-missing-permissions-fault
     (rds-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'iam-role-missing-permissions-fault)))
(common-lisp:progn
 (common-lisp:define-condition iam-role-not-found-fault
     (rds-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'iam-role-not-found-fault)))
(common-lisp:progn
 (common-lisp:define-condition instance-quota-exceeded-fault
     (rds-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'instance-quota-exceeded-fault)))
(common-lisp:progn
 (common-lisp:define-condition insufficient-available-ips-in-subnet-fault
     (rds-error)
     common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'insufficient-available-ips-in-subnet-fault)))
(common-lisp:progn
 (common-lisp:define-condition insufficient-dbcluster-capacity-fault
     (rds-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'insufficient-dbcluster-capacity-fault)))
(common-lisp:progn
 (common-lisp:define-condition insufficient-dbinstance-capacity-fault
     (rds-error)
     common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'insufficient-dbinstance-capacity-fault)))
(common-lisp:progn
 (common-lisp:define-condition insufficient-storage-cluster-capacity-fault
     (rds-error)
     common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'insufficient-storage-cluster-capacity-fault)))
(common-lisp:deftype integer () 'common-lisp:integer)
(common-lisp:deftype integer-optional () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:define-condition invalid-blue-green-deployment-state-fault
     (rds-error)
     common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'invalid-blue-green-deployment-state-fault)))
(common-lisp:progn
 (common-lisp:define-condition invalid-custom-dbengine-version-state-fault
     (rds-error)
     common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'invalid-custom-dbengine-version-state-fault)))
(common-lisp:progn
 (common-lisp:define-condition invalid-dbcluster-capacity-fault
     (rds-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'invalid-dbcluster-capacity-fault)))
(common-lisp:progn
 (common-lisp:define-condition invalid-dbcluster-endpoint-state-fault
     (rds-error)
     common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'invalid-dbcluster-endpoint-state-fault)))
(common-lisp:progn
 (common-lisp:define-condition invalid-dbcluster-snapshot-state-fault
     (rds-error)
     common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'invalid-dbcluster-snapshot-state-fault)))
(common-lisp:progn
 (common-lisp:define-condition invalid-dbcluster-state-fault
     (rds-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'invalid-dbcluster-state-fault)))
(common-lisp:progn
 (common-lisp:define-condition invalid-dbinstance-automated-backup-state-fault
     (rds-error)
     common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'invalid-dbinstance-automated-backup-state-fault)))
(common-lisp:progn
 (common-lisp:define-condition invalid-dbinstance-state-fault
     (rds-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'invalid-dbinstance-state-fault)))
(common-lisp:progn
 (common-lisp:define-condition invalid-dbparameter-group-state-fault
     (rds-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'invalid-dbparameter-group-state-fault)))
(common-lisp:progn
 (common-lisp:define-condition invalid-dbproxy-endpoint-state-fault
     (rds-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'invalid-dbproxy-endpoint-state-fault)))
(common-lisp:progn
 (common-lisp:define-condition invalid-dbproxy-state-fault
     (rds-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'invalid-dbproxy-state-fault)))
(common-lisp:progn
 (common-lisp:define-condition invalid-dbsecurity-group-state-fault
     (rds-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'invalid-dbsecurity-group-state-fault)))
(common-lisp:progn
 (common-lisp:define-condition invalid-dbsnapshot-state-fault
     (rds-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'invalid-dbsnapshot-state-fault)))
(common-lisp:progn
 (common-lisp:define-condition invalid-dbsubnet-group-fault
     (rds-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'invalid-dbsubnet-group-fault)))
(common-lisp:progn
 (common-lisp:define-condition invalid-dbsubnet-group-state-fault
     (rds-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'invalid-dbsubnet-group-state-fault)))
(common-lisp:progn
 (common-lisp:define-condition invalid-dbsubnet-state-fault
     (rds-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'invalid-dbsubnet-state-fault)))
(common-lisp:progn
 (common-lisp:define-condition invalid-event-subscription-state-fault
     (rds-error)
     common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'invalid-event-subscription-state-fault)))
(common-lisp:progn
 (common-lisp:define-condition invalid-export-only-fault
     (rds-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'invalid-export-only-fault)))
(common-lisp:progn
 (common-lisp:define-condition invalid-export-source-state-fault
     (rds-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'invalid-export-source-state-fault)))
(common-lisp:progn
 (common-lisp:define-condition invalid-export-task-state-fault
     (rds-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'invalid-export-task-state-fault)))
(common-lisp:progn
 (common-lisp:define-condition invalid-global-cluster-state-fault
     (rds-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'invalid-global-cluster-state-fault)))
(common-lisp:progn
 (common-lisp:define-condition invalid-option-group-state-fault
     (rds-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'invalid-option-group-state-fault)))
(common-lisp:progn
 (common-lisp:define-condition invalid-restore-fault
     (rds-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'invalid-restore-fault)))
(common-lisp:progn
 (common-lisp:define-condition invalid-s3bucket-fault
     (rds-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'invalid-s3bucket-fault)))
(common-lisp:progn
 (common-lisp:define-condition invalid-subnet
     (rds-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'invalid-subnet)))
(common-lisp:progn
 (common-lisp:define-condition invalid-vpcnetwork-state-fault
     (rds-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'invalid-vpcnetwork-state-fault)))
(common-lisp:progn
 (common-lisp:define-condition kmskey-not-accessible-fault
     (rds-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'kmskey-not-accessible-fault)))
(common-lisp:progn
 (common-lisp:deftype key-list () '(trivial-types:proper-list string))
 (common-lisp:defun |make-key-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list string))
   aws-sdk/generator/shape::members))
(common-lisp:deftype kms-key-id-or-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (list-tags-for-resource-message (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-tags-for-resource-message-"))
   (resource-name (common-lisp:error ":resource-name is required") :type
    (common-lisp:or string common-lisp:null))
   (filters common-lisp:nil :type
    (common-lisp:or filter-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-tags-for-resource-message
                    'make-list-tags-for-resource-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-name))
      (common-lisp:list
       (common-lisp:cons "ResourceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filters))
      (common-lisp:list
       (common-lisp:cons "Filters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype log-type-list () '(trivial-types:proper-list string))
 (common-lisp:defun |make-log-type-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list string))
   aws-sdk/generator/shape::members))
(common-lisp:deftype long () 'common-lisp:integer)
(common-lisp:deftype long-optional () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defstruct
     (master-user-secret (:copier common-lisp:nil)
      (:conc-name "struct-shape-master-user-secret-"))
   (secret-arn common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (secret-status common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (kms-key-id common-lisp:nil :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'master-user-secret 'make-master-user-secret))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input master-user-secret))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input master-user-secret))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'secret-arn))
      (common-lisp:list
       (common-lisp:cons "SecretArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'secret-status))
      (common-lisp:list
       (common-lisp:cons "SecretStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kms-key-id))
      (common-lisp:list
       (common-lisp:cons "KmsKeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input master-user-secret))
   common-lisp:nil))
(common-lisp:deftype max-records () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defstruct
     (minimum-engine-version-per-allowed-value (:copier common-lisp:nil)
      (:conc-name "struct-shape-minimum-engine-version-per-allowed-value-"))
   (allowed-value common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (minimum-engine-version common-lisp:nil :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'minimum-engine-version-per-allowed-value
                    'make-minimum-engine-version-per-allowed-value))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          minimum-engine-version-per-allowed-value))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          minimum-engine-version-per-allowed-value))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'allowed-value))
      (common-lisp:list
       (common-lisp:cons "AllowedValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'minimum-engine-version))
      (common-lisp:list
       (common-lisp:cons "MinimumEngineVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          minimum-engine-version-per-allowed-value))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype minimum-engine-version-per-allowed-value-list ()
   '(trivial-types:proper-list minimum-engine-version-per-allowed-value))
 (common-lisp:defun |make-minimum-engine-version-per-allowed-value-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            minimum-engine-version-per-allowed-value))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (modify-activity-stream-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-modify-activity-stream-request-"))
   (resource-arn common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (audit-policy-state common-lisp:nil :type
    (common-lisp:or audit-policy-state common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'modify-activity-stream-request
                    'make-modify-activity-stream-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          modify-activity-stream-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          modify-activity-stream-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-arn))
      (common-lisp:list
       (common-lisp:cons "ResourceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'audit-policy-state))
      (common-lisp:list
       (common-lisp:cons "AuditPolicyState"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          modify-activity-stream-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (modify-activity-stream-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-modify-activity-stream-response-"))
   (kms-key-id common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (kinesis-stream-name common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or activity-stream-status common-lisp:null))
   (mode common-lisp:nil :type
    (common-lisp:or activity-stream-mode common-lisp:null))
   (engine-native-audit-fields-included common-lisp:nil :type
    (common-lisp:or boolean-optional common-lisp:null))
   (policy-status common-lisp:nil :type
    (common-lisp:or activity-stream-policy-status common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'modify-activity-stream-response
                    'make-modify-activity-stream-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          modify-activity-stream-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          modify-activity-stream-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kms-key-id))
      (common-lisp:list
       (common-lisp:cons "KmsKeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kinesis-stream-name))
      (common-lisp:list
       (common-lisp:cons "KinesisStreamName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'mode))
      (common-lisp:list
       (common-lisp:cons "Mode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'engine-native-audit-fields-included))
      (common-lisp:list
       (common-lisp:cons "EngineNativeAuditFieldsIncluded"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-status))
      (common-lisp:list
       (common-lisp:cons "PolicyStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          modify-activity-stream-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (modify-certificates-message (:copier common-lisp:nil)
      (:conc-name "struct-shape-modify-certificates-message-"))
   (certificate-identifier common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (remove-customer-override common-lisp:nil :type
    (common-lisp:or boolean-optional common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'modify-certificates-message
                    'make-modify-certificates-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          modify-certificates-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          modify-certificates-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'certificate-identifier))
      (common-lisp:list
       (common-lisp:cons "CertificateIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'remove-customer-override))
      (common-lisp:list
       (common-lisp:cons "RemoveCustomerOverride"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          modify-certificates-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (modify-certificates-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-modify-certificates-result-"))
   (certificate common-lisp:nil :type
    (common-lisp:or certificate common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'modify-certificates-result
                    'make-modify-certificates-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          modify-certificates-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          modify-certificates-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'certificate))
      (common-lisp:list
       (common-lisp:cons "Certificate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          modify-certificates-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (modify-current-dbcluster-capacity-message (:copier common-lisp:nil)
      (:conc-name "struct-shape-modify-current-dbcluster-capacity-message-"))
   (dbcluster-identifier
    (common-lisp:error ":dbcluster-identifier is required") :type
    (common-lisp:or string common-lisp:null))
   (capacity common-lisp:nil :type
    (common-lisp:or integer-optional common-lisp:null))
   (seconds-before-timeout common-lisp:nil :type
    (common-lisp:or integer-optional common-lisp:null))
   (timeout-action common-lisp:nil :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'modify-current-dbcluster-capacity-message
                    'make-modify-current-dbcluster-capacity-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          modify-current-dbcluster-capacity-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          modify-current-dbcluster-capacity-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dbcluster-identifier))
      (common-lisp:list
       (common-lisp:cons "DBClusterIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'capacity))
      (common-lisp:list
       (common-lisp:cons "Capacity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'seconds-before-timeout))
      (common-lisp:list
       (common-lisp:cons "SecondsBeforeTimeout"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'timeout-action))
      (common-lisp:list
       (common-lisp:cons "TimeoutAction"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          modify-current-dbcluster-capacity-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (modify-custom-dbengine-version-message (:copier common-lisp:nil)
      (:conc-name "struct-shape-modify-custom-dbengine-version-message-"))
   (engine (common-lisp:error ":engine is required") :type
    (common-lisp:or custom-engine-name common-lisp:null))
   (engine-version (common-lisp:error ":engine-version is required") :type
    (common-lisp:or custom-engine-version common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or description common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or custom-engine-version-status common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'modify-custom-dbengine-version-message
                    'make-modify-custom-dbengine-version-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          modify-custom-dbengine-version-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          modify-custom-dbengine-version-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'engine))
      (common-lisp:list
       (common-lisp:cons "Engine"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'engine-version))
      (common-lisp:list
       (common-lisp:cons "EngineVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          modify-custom-dbengine-version-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (modify-dbcluster-endpoint-message (:copier common-lisp:nil)
      (:conc-name "struct-shape-modify-dbcluster-endpoint-message-"))
   (dbcluster-endpoint-identifier
    (common-lisp:error ":dbcluster-endpoint-identifier is required") :type
    (common-lisp:or string common-lisp:null))
   (endpoint-type common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (static-members common-lisp:nil :type
    (common-lisp:or string-list common-lisp:null))
   (excluded-members common-lisp:nil :type
    (common-lisp:or string-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'modify-dbcluster-endpoint-message
                    'make-modify-dbcluster-endpoint-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          modify-dbcluster-endpoint-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          modify-dbcluster-endpoint-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dbcluster-endpoint-identifier))
      (common-lisp:list
       (common-lisp:cons "DBClusterEndpointIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'endpoint-type))
      (common-lisp:list
       (common-lisp:cons "EndpointType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'static-members))
      (common-lisp:list
       (common-lisp:cons "StaticMembers"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'excluded-members))
      (common-lisp:list
       (common-lisp:cons "ExcludedMembers"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          modify-dbcluster-endpoint-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (modify-dbcluster-message (:copier common-lisp:nil)
      (:conc-name "struct-shape-modify-dbcluster-message-"))
   (dbcluster-identifier
    (common-lisp:error ":dbcluster-identifier is required") :type
    (common-lisp:or string common-lisp:null))
   (new-dbcluster-identifier common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (apply-immediately common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (backup-retention-period common-lisp:nil :type
    (common-lisp:or integer-optional common-lisp:null))
   (dbcluster-parameter-group-name common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (vpc-security-group-ids common-lisp:nil :type
    (common-lisp:or vpc-security-group-id-list common-lisp:null))
   (port common-lisp:nil :type
    (common-lisp:or integer-optional common-lisp:null))
   (master-user-password common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (option-group-name common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (preferred-backup-window common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (preferred-maintenance-window common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (enable-iamdatabase-authentication common-lisp:nil :type
    (common-lisp:or boolean-optional common-lisp:null))
   (backtrack-window common-lisp:nil :type
    (common-lisp:or long-optional common-lisp:null))
   (cloudwatch-logs-export-configuration common-lisp:nil :type
    (common-lisp:or cloudwatch-logs-export-configuration common-lisp:null))
   (engine-version common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (allow-major-version-upgrade common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (dbinstance-parameter-group-name common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (domain common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (domain-iamrole-name common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (scaling-configuration common-lisp:nil :type
    (common-lisp:or scaling-configuration common-lisp:null))
   (deletion-protection common-lisp:nil :type
    (common-lisp:or boolean-optional common-lisp:null))
   (enable-http-endpoint common-lisp:nil :type
    (common-lisp:or boolean-optional common-lisp:null))
   (copy-tags-to-snapshot common-lisp:nil :type
    (common-lisp:or boolean-optional common-lisp:null))
   (enable-global-write-forwarding common-lisp:nil :type
    (common-lisp:or boolean-optional common-lisp:null))
   (dbcluster-instance-class common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (allocated-storage common-lisp:nil :type
    (common-lisp:or integer-optional common-lisp:null))
   (storage-type common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (iops common-lisp:nil :type
    (common-lisp:or integer-optional common-lisp:null))
   (auto-minor-version-upgrade common-lisp:nil :type
    (common-lisp:or boolean-optional common-lisp:null))
   (monitoring-interval common-lisp:nil :type
    (common-lisp:or integer-optional common-lisp:null))
   (monitoring-role-arn common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (enable-performance-insights common-lisp:nil :type
    (common-lisp:or boolean-optional common-lisp:null))
   (performance-insights-kmskey-id common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (performance-insights-retention-period common-lisp:nil :type
    (common-lisp:or integer-optional common-lisp:null))
   (serverless-v2scaling-configuration common-lisp:nil :type
    (common-lisp:or serverless-v2scaling-configuration common-lisp:null))
   (network-type common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (manage-master-user-password common-lisp:nil :type
    (common-lisp:or boolean-optional common-lisp:null))
   (rotate-master-user-password common-lisp:nil :type
    (common-lisp:or boolean-optional common-lisp:null))
   (master-user-secret-kms-key-id common-lisp:nil :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'modify-dbcluster-message 'make-modify-dbcluster-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          modify-dbcluster-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          modify-dbcluster-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dbcluster-identifier))
      (common-lisp:list
       (common-lisp:cons "DBClusterIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'new-dbcluster-identifier))
      (common-lisp:list
       (common-lisp:cons "NewDBClusterIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'apply-immediately))
      (common-lisp:list
       (common-lisp:cons "ApplyImmediately"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'backup-retention-period))
      (common-lisp:list
       (common-lisp:cons "BackupRetentionPeriod"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dbcluster-parameter-group-name))
      (common-lisp:list
       (common-lisp:cons "DBClusterParameterGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'vpc-security-group-ids))
      (common-lisp:list
       (common-lisp:cons "VpcSecurityGroupIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'port))
      (common-lisp:list
       (common-lisp:cons "Port"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'master-user-password))
      (common-lisp:list
       (common-lisp:cons "MasterUserPassword"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'option-group-name))
      (common-lisp:list
       (common-lisp:cons "OptionGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'preferred-backup-window))
      (common-lisp:list
       (common-lisp:cons "PreferredBackupWindow"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'preferred-maintenance-window))
      (common-lisp:list
       (common-lisp:cons "PreferredMaintenanceWindow"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'enable-iamdatabase-authentication))
      (common-lisp:list
       (common-lisp:cons "EnableIAMDatabaseAuthentication"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'backtrack-window))
      (common-lisp:list
       (common-lisp:cons "BacktrackWindow"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cloudwatch-logs-export-configuration))
      (common-lisp:list
       (common-lisp:cons "CloudwatchLogsExportConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'engine-version))
      (common-lisp:list
       (common-lisp:cons "EngineVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'allow-major-version-upgrade))
      (common-lisp:list
       (common-lisp:cons "AllowMajorVersionUpgrade"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dbinstance-parameter-group-name))
      (common-lisp:list
       (common-lisp:cons "DBInstanceParameterGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain))
      (common-lisp:list
       (common-lisp:cons "Domain"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-iamrole-name))
      (common-lisp:list
       (common-lisp:cons "DomainIAMRoleName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'scaling-configuration))
      (common-lisp:list
       (common-lisp:cons "ScalingConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'deletion-protection))
      (common-lisp:list
       (common-lisp:cons "DeletionProtection"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'enable-http-endpoint))
      (common-lisp:list
       (common-lisp:cons "EnableHttpEndpoint"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'copy-tags-to-snapshot))
      (common-lisp:list
       (common-lisp:cons "CopyTagsToSnapshot"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'enable-global-write-forwarding))
      (common-lisp:list
       (common-lisp:cons "EnableGlobalWriteForwarding"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dbcluster-instance-class))
      (common-lisp:list
       (common-lisp:cons "DBClusterInstanceClass"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'allocated-storage))
      (common-lisp:list
       (common-lisp:cons "AllocatedStorage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'storage-type))
      (common-lisp:list
       (common-lisp:cons "StorageType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'iops))
      (common-lisp:list
       (common-lisp:cons "Iops"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'auto-minor-version-upgrade))
      (common-lisp:list
       (common-lisp:cons "AutoMinorVersionUpgrade"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'monitoring-interval))
      (common-lisp:list
       (common-lisp:cons "MonitoringInterval"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'monitoring-role-arn))
      (common-lisp:list
       (common-lisp:cons "MonitoringRoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'enable-performance-insights))
      (common-lisp:list
       (common-lisp:cons "EnablePerformanceInsights"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'performance-insights-kmskey-id))
      (common-lisp:list
       (common-lisp:cons "PerformanceInsightsKMSKeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'performance-insights-retention-period))
      (common-lisp:list
       (common-lisp:cons "PerformanceInsightsRetentionPeriod"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'serverless-v2scaling-configuration))
      (common-lisp:list
       (common-lisp:cons "ServerlessV2ScalingConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'network-type))
      (common-lisp:list
       (common-lisp:cons "NetworkType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'manage-master-user-password))
      (common-lisp:list
       (common-lisp:cons "ManageMasterUserPassword"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'rotate-master-user-password))
      (common-lisp:list
       (common-lisp:cons "RotateMasterUserPassword"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'master-user-secret-kms-key-id))
      (common-lisp:list
       (common-lisp:cons "MasterUserSecretKmsKeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          modify-dbcluster-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (modify-dbcluster-parameter-group-message (:copier common-lisp:nil)
      (:conc-name "struct-shape-modify-dbcluster-parameter-group-message-"))
   (dbcluster-parameter-group-name
    (common-lisp:error ":dbcluster-parameter-group-name is required") :type
    (common-lisp:or string common-lisp:null))
   (parameters (common-lisp:error ":parameters is required") :type
    (common-lisp:or parameters-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'modify-dbcluster-parameter-group-message
                    'make-modify-dbcluster-parameter-group-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          modify-dbcluster-parameter-group-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          modify-dbcluster-parameter-group-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dbcluster-parameter-group-name))
      (common-lisp:list
       (common-lisp:cons "DBClusterParameterGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'parameters))
      (common-lisp:list
       (common-lisp:cons "Parameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          modify-dbcluster-parameter-group-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (modify-dbcluster-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-modify-dbcluster-result-"))
   (dbcluster common-lisp:nil :type
    (common-lisp:or dbcluster common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'modify-dbcluster-result 'make-modify-dbcluster-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          modify-dbcluster-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          modify-dbcluster-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dbcluster))
      (common-lisp:list
       (common-lisp:cons "DBCluster"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          modify-dbcluster-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (modify-dbcluster-snapshot-attribute-message (:copier common-lisp:nil)
      (:conc-name "struct-shape-modify-dbcluster-snapshot-attribute-message-"))
   (dbcluster-snapshot-identifier
    (common-lisp:error ":dbcluster-snapshot-identifier is required") :type
    (common-lisp:or string common-lisp:null))
   (attribute-name (common-lisp:error ":attribute-name is required") :type
    (common-lisp:or string common-lisp:null))
   (values-to-add common-lisp:nil :type
    (common-lisp:or attribute-value-list common-lisp:null))
   (values-to-remove common-lisp:nil :type
    (common-lisp:or attribute-value-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'modify-dbcluster-snapshot-attribute-message
                    'make-modify-dbcluster-snapshot-attribute-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          modify-dbcluster-snapshot-attribute-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          modify-dbcluster-snapshot-attribute-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dbcluster-snapshot-identifier))
      (common-lisp:list
       (common-lisp:cons "DBClusterSnapshotIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'attribute-name))
      (common-lisp:list
       (common-lisp:cons "AttributeName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'values-to-add))
      (common-lisp:list
       (common-lisp:cons "ValuesToAdd"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'values-to-remove))
      (common-lisp:list
       (common-lisp:cons "ValuesToRemove"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          modify-dbcluster-snapshot-attribute-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (modify-dbcluster-snapshot-attribute-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-modify-dbcluster-snapshot-attribute-result-"))
   (dbcluster-snapshot-attributes-result common-lisp:nil :type
    (common-lisp:or dbcluster-snapshot-attributes-result common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'modify-dbcluster-snapshot-attribute-result
                    'make-modify-dbcluster-snapshot-attribute-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          modify-dbcluster-snapshot-attribute-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          modify-dbcluster-snapshot-attribute-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dbcluster-snapshot-attributes-result))
      (common-lisp:list
       (common-lisp:cons "DBClusterSnapshotAttributesResult"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          modify-dbcluster-snapshot-attribute-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (modify-dbinstance-message (:copier common-lisp:nil)
      (:conc-name "struct-shape-modify-dbinstance-message-"))
   (dbinstance-identifier
    (common-lisp:error ":dbinstance-identifier is required") :type
    (common-lisp:or string common-lisp:null))
   (allocated-storage common-lisp:nil :type
    (common-lisp:or integer-optional common-lisp:null))
   (dbinstance-class common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (dbsubnet-group-name common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (dbsecurity-groups common-lisp:nil :type
    (common-lisp:or dbsecurity-group-name-list common-lisp:null))
   (vpc-security-group-ids common-lisp:nil :type
    (common-lisp:or vpc-security-group-id-list common-lisp:null))
   (apply-immediately common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (master-user-password common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (dbparameter-group-name common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (backup-retention-period common-lisp:nil :type
    (common-lisp:or integer-optional common-lisp:null))
   (preferred-backup-window common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (preferred-maintenance-window common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (multi-az common-lisp:nil :type
    (common-lisp:or boolean-optional common-lisp:null))
   (engine-version common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (allow-major-version-upgrade common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (auto-minor-version-upgrade common-lisp:nil :type
    (common-lisp:or boolean-optional common-lisp:null))
   (license-model common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (iops common-lisp:nil :type
    (common-lisp:or integer-optional common-lisp:null))
   (option-group-name common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (new-dbinstance-identifier common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (storage-type common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (tde-credential-arn common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (tde-credential-password common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (cacertificate-identifier common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (domain common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (copy-tags-to-snapshot common-lisp:nil :type
    (common-lisp:or boolean-optional common-lisp:null))
   (monitoring-interval common-lisp:nil :type
    (common-lisp:or integer-optional common-lisp:null))
   (dbport-number common-lisp:nil :type
    (common-lisp:or integer-optional common-lisp:null))
   (publicly-accessible common-lisp:nil :type
    (common-lisp:or boolean-optional common-lisp:null))
   (monitoring-role-arn common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (domain-iamrole-name common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (promotion-tier common-lisp:nil :type
    (common-lisp:or integer-optional common-lisp:null))
   (enable-iamdatabase-authentication common-lisp:nil :type
    (common-lisp:or boolean-optional common-lisp:null))
   (enable-performance-insights common-lisp:nil :type
    (common-lisp:or boolean-optional common-lisp:null))
   (performance-insights-kmskey-id common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (performance-insights-retention-period common-lisp:nil :type
    (common-lisp:or integer-optional common-lisp:null))
   (cloudwatch-logs-export-configuration common-lisp:nil :type
    (common-lisp:or cloudwatch-logs-export-configuration common-lisp:null))
   (processor-features common-lisp:nil :type
    (common-lisp:or processor-feature-list common-lisp:null))
   (use-default-processor-features common-lisp:nil :type
    (common-lisp:or boolean-optional common-lisp:null))
   (deletion-protection common-lisp:nil :type
    (common-lisp:or boolean-optional common-lisp:null))
   (max-allocated-storage common-lisp:nil :type
    (common-lisp:or integer-optional common-lisp:null))
   (certificate-rotation-restart common-lisp:nil :type
    (common-lisp:or boolean-optional common-lisp:null))
   (replica-mode common-lisp:nil :type
    (common-lisp:or replica-mode common-lisp:null))
   (enable-customer-owned-ip common-lisp:nil :type
    (common-lisp:or boolean-optional common-lisp:null))
   (aws-backup-recovery-point-arn common-lisp:nil :type
    (common-lisp:or aws-backup-recovery-point-arn common-lisp:null))
   (automation-mode common-lisp:nil :type
    (common-lisp:or automation-mode common-lisp:null))
   (resume-full-automation-mode-minutes common-lisp:nil :type
    (common-lisp:or integer-optional common-lisp:null))
   (network-type common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (storage-throughput common-lisp:nil :type
    (common-lisp:or integer-optional common-lisp:null))
   (manage-master-user-password common-lisp:nil :type
    (common-lisp:or boolean-optional common-lisp:null))
   (rotate-master-user-password common-lisp:nil :type
    (common-lisp:or boolean-optional common-lisp:null))
   (master-user-secret-kms-key-id common-lisp:nil :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'modify-dbinstance-message
                    'make-modify-dbinstance-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          modify-dbinstance-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          modify-dbinstance-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dbinstance-identifier))
      (common-lisp:list
       (common-lisp:cons "DBInstanceIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'allocated-storage))
      (common-lisp:list
       (common-lisp:cons "AllocatedStorage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dbinstance-class))
      (common-lisp:list
       (common-lisp:cons "DBInstanceClass"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dbsubnet-group-name))
      (common-lisp:list
       (common-lisp:cons "DBSubnetGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dbsecurity-groups))
      (common-lisp:list
       (common-lisp:cons "DBSecurityGroups"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'vpc-security-group-ids))
      (common-lisp:list
       (common-lisp:cons "VpcSecurityGroupIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'apply-immediately))
      (common-lisp:list
       (common-lisp:cons "ApplyImmediately"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'master-user-password))
      (common-lisp:list
       (common-lisp:cons "MasterUserPassword"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dbparameter-group-name))
      (common-lisp:list
       (common-lisp:cons "DBParameterGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'backup-retention-period))
      (common-lisp:list
       (common-lisp:cons "BackupRetentionPeriod"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'preferred-backup-window))
      (common-lisp:list
       (common-lisp:cons "PreferredBackupWindow"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'preferred-maintenance-window))
      (common-lisp:list
       (common-lisp:cons "PreferredMaintenanceWindow"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'multi-az))
      (common-lisp:list
       (common-lisp:cons "MultiAZ"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'engine-version))
      (common-lisp:list
       (common-lisp:cons "EngineVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'allow-major-version-upgrade))
      (common-lisp:list
       (common-lisp:cons "AllowMajorVersionUpgrade"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'auto-minor-version-upgrade))
      (common-lisp:list
       (common-lisp:cons "AutoMinorVersionUpgrade"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'license-model))
      (common-lisp:list
       (common-lisp:cons "LicenseModel"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'iops))
      (common-lisp:list
       (common-lisp:cons "Iops"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'option-group-name))
      (common-lisp:list
       (common-lisp:cons "OptionGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'new-dbinstance-identifier))
      (common-lisp:list
       (common-lisp:cons "NewDBInstanceIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'storage-type))
      (common-lisp:list
       (common-lisp:cons "StorageType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tde-credential-arn))
      (common-lisp:list
       (common-lisp:cons "TdeCredentialArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'tde-credential-password))
      (common-lisp:list
       (common-lisp:cons "TdeCredentialPassword"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cacertificate-identifier))
      (common-lisp:list
       (common-lisp:cons "CACertificateIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain))
      (common-lisp:list
       (common-lisp:cons "Domain"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'copy-tags-to-snapshot))
      (common-lisp:list
       (common-lisp:cons "CopyTagsToSnapshot"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'monitoring-interval))
      (common-lisp:list
       (common-lisp:cons "MonitoringInterval"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dbport-number))
      (common-lisp:list
       (common-lisp:cons "DBPortNumber"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'publicly-accessible))
      (common-lisp:list
       (common-lisp:cons "PubliclyAccessible"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'monitoring-role-arn))
      (common-lisp:list
       (common-lisp:cons "MonitoringRoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-iamrole-name))
      (common-lisp:list
       (common-lisp:cons "DomainIAMRoleName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'promotion-tier))
      (common-lisp:list
       (common-lisp:cons "PromotionTier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'enable-iamdatabase-authentication))
      (common-lisp:list
       (common-lisp:cons "EnableIAMDatabaseAuthentication"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'enable-performance-insights))
      (common-lisp:list
       (common-lisp:cons "EnablePerformanceInsights"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'performance-insights-kmskey-id))
      (common-lisp:list
       (common-lisp:cons "PerformanceInsightsKMSKeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'performance-insights-retention-period))
      (common-lisp:list
       (common-lisp:cons "PerformanceInsightsRetentionPeriod"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cloudwatch-logs-export-configuration))
      (common-lisp:list
       (common-lisp:cons "CloudwatchLogsExportConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'processor-features))
      (common-lisp:list
       (common-lisp:cons "ProcessorFeatures"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'use-default-processor-features))
      (common-lisp:list
       (common-lisp:cons "UseDefaultProcessorFeatures"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'deletion-protection))
      (common-lisp:list
       (common-lisp:cons "DeletionProtection"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'max-allocated-storage))
      (common-lisp:list
       (common-lisp:cons "MaxAllocatedStorage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'certificate-rotation-restart))
      (common-lisp:list
       (common-lisp:cons "CertificateRotationRestart"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'replica-mode))
      (common-lisp:list
       (common-lisp:cons "ReplicaMode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'enable-customer-owned-ip))
      (common-lisp:list
       (common-lisp:cons "EnableCustomerOwnedIp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'aws-backup-recovery-point-arn))
      (common-lisp:list
       (common-lisp:cons "AwsBackupRecoveryPointArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'automation-mode))
      (common-lisp:list
       (common-lisp:cons "AutomationMode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'resume-full-automation-mode-minutes))
      (common-lisp:list
       (common-lisp:cons "ResumeFullAutomationModeMinutes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'network-type))
      (common-lisp:list
       (common-lisp:cons "NetworkType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'storage-throughput))
      (common-lisp:list
       (common-lisp:cons "StorageThroughput"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'manage-master-user-password))
      (common-lisp:list
       (common-lisp:cons "ManageMasterUserPassword"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'rotate-master-user-password))
      (common-lisp:list
       (common-lisp:cons "RotateMasterUserPassword"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'master-user-secret-kms-key-id))
      (common-lisp:list
       (common-lisp:cons "MasterUserSecretKmsKeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          modify-dbinstance-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (modify-dbinstance-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-modify-dbinstance-result-"))
   (dbinstance common-lisp:nil :type
    (common-lisp:or dbinstance common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'modify-dbinstance-result 'make-modify-dbinstance-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          modify-dbinstance-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          modify-dbinstance-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dbinstance))
      (common-lisp:list
       (common-lisp:cons "DBInstance"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          modify-dbinstance-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (modify-dbparameter-group-message (:copier common-lisp:nil)
      (:conc-name "struct-shape-modify-dbparameter-group-message-"))
   (dbparameter-group-name
    (common-lisp:error ":dbparameter-group-name is required") :type
    (common-lisp:or string common-lisp:null))
   (parameters (common-lisp:error ":parameters is required") :type
    (common-lisp:or parameters-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'modify-dbparameter-group-message
                    'make-modify-dbparameter-group-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          modify-dbparameter-group-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          modify-dbparameter-group-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dbparameter-group-name))
      (common-lisp:list
       (common-lisp:cons "DBParameterGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'parameters))
      (common-lisp:list
       (common-lisp:cons "Parameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          modify-dbparameter-group-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (modify-dbproxy-endpoint-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-modify-dbproxy-endpoint-request-"))
   (dbproxy-endpoint-name
    (common-lisp:error ":dbproxy-endpoint-name is required") :type
    (common-lisp:or dbproxy-endpoint-name common-lisp:null))
   (new-dbproxy-endpoint-name common-lisp:nil :type
    (common-lisp:or dbproxy-endpoint-name common-lisp:null))
   (vpc-security-group-ids common-lisp:nil :type
    (common-lisp:or string-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'modify-dbproxy-endpoint-request
                    'make-modify-dbproxy-endpoint-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          modify-dbproxy-endpoint-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          modify-dbproxy-endpoint-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dbproxy-endpoint-name))
      (common-lisp:list
       (common-lisp:cons "DBProxyEndpointName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'new-dbproxy-endpoint-name))
      (common-lisp:list
       (common-lisp:cons "NewDBProxyEndpointName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'vpc-security-group-ids))
      (common-lisp:list
       (common-lisp:cons "VpcSecurityGroupIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          modify-dbproxy-endpoint-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (modify-dbproxy-endpoint-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-modify-dbproxy-endpoint-response-"))
   (dbproxy-endpoint common-lisp:nil :type
    (common-lisp:or dbproxy-endpoint common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'modify-dbproxy-endpoint-response
                    'make-modify-dbproxy-endpoint-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          modify-dbproxy-endpoint-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          modify-dbproxy-endpoint-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dbproxy-endpoint))
      (common-lisp:list
       (common-lisp:cons "DBProxyEndpoint"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          modify-dbproxy-endpoint-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (modify-dbproxy-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-modify-dbproxy-request-"))
   (dbproxy-name (common-lisp:error ":dbproxy-name is required") :type
    (common-lisp:or string common-lisp:null))
   (new-dbproxy-name common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (auth common-lisp:nil :type
    (common-lisp:or user-auth-config-list common-lisp:null))
   (require-tls common-lisp:nil :type
    (common-lisp:or boolean-optional common-lisp:null))
   (idle-client-timeout common-lisp:nil :type
    (common-lisp:or integer-optional common-lisp:null))
   (debug-logging common-lisp:nil :type
    (common-lisp:or boolean-optional common-lisp:null))
   (role-arn common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (security-groups common-lisp:nil :type
    (common-lisp:or string-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'modify-dbproxy-request 'make-modify-dbproxy-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          modify-dbproxy-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          modify-dbproxy-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dbproxy-name))
      (common-lisp:list
       (common-lisp:cons "DBProxyName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'new-dbproxy-name))
      (common-lisp:list
       (common-lisp:cons "NewDBProxyName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'auth))
      (common-lisp:list
       (common-lisp:cons "Auth"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'require-tls))
      (common-lisp:list
       (common-lisp:cons "RequireTLS"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'idle-client-timeout))
      (common-lisp:list
       (common-lisp:cons "IdleClientTimeout"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'debug-logging))
      (common-lisp:list
       (common-lisp:cons "DebugLogging"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "RoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'security-groups))
      (common-lisp:list
       (common-lisp:cons "SecurityGroups"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          modify-dbproxy-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (modify-dbproxy-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-modify-dbproxy-response-"))
   (dbproxy common-lisp:nil :type (common-lisp:or dbproxy common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'modify-dbproxy-response 'make-modify-dbproxy-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          modify-dbproxy-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          modify-dbproxy-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dbproxy))
      (common-lisp:list
       (common-lisp:cons "DBProxy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          modify-dbproxy-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (modify-dbproxy-target-group-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-modify-dbproxy-target-group-request-"))
   (target-group-name (common-lisp:error ":target-group-name is required")
    :type (common-lisp:or string common-lisp:null))
   (dbproxy-name (common-lisp:error ":dbproxy-name is required") :type
    (common-lisp:or string common-lisp:null))
   (connection-pool-config common-lisp:nil :type
    (common-lisp:or connection-pool-configuration common-lisp:null))
   (new-name common-lisp:nil :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'modify-dbproxy-target-group-request
                    'make-modify-dbproxy-target-group-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          modify-dbproxy-target-group-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          modify-dbproxy-target-group-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target-group-name))
      (common-lisp:list
       (common-lisp:cons "TargetGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dbproxy-name))
      (common-lisp:list
       (common-lisp:cons "DBProxyName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'connection-pool-config))
      (common-lisp:list
       (common-lisp:cons "ConnectionPoolConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'new-name))
      (common-lisp:list
       (common-lisp:cons "NewName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          modify-dbproxy-target-group-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (modify-dbproxy-target-group-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-modify-dbproxy-target-group-response-"))
   (dbproxy-target-group common-lisp:nil :type
    (common-lisp:or dbproxy-target-group common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'modify-dbproxy-target-group-response
                    'make-modify-dbproxy-target-group-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          modify-dbproxy-target-group-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          modify-dbproxy-target-group-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dbproxy-target-group))
      (common-lisp:list
       (common-lisp:cons "DBProxyTargetGroup"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          modify-dbproxy-target-group-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (modify-dbsnapshot-attribute-message (:copier common-lisp:nil)
      (:conc-name "struct-shape-modify-dbsnapshot-attribute-message-"))
   (dbsnapshot-identifier
    (common-lisp:error ":dbsnapshot-identifier is required") :type
    (common-lisp:or string common-lisp:null))
   (attribute-name (common-lisp:error ":attribute-name is required") :type
    (common-lisp:or string common-lisp:null))
   (values-to-add common-lisp:nil :type
    (common-lisp:or attribute-value-list common-lisp:null))
   (values-to-remove common-lisp:nil :type
    (common-lisp:or attribute-value-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'modify-dbsnapshot-attribute-message
                    'make-modify-dbsnapshot-attribute-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          modify-dbsnapshot-attribute-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          modify-dbsnapshot-attribute-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dbsnapshot-identifier))
      (common-lisp:list
       (common-lisp:cons "DBSnapshotIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'attribute-name))
      (common-lisp:list
       (common-lisp:cons "AttributeName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'values-to-add))
      (common-lisp:list
       (common-lisp:cons "ValuesToAdd"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'values-to-remove))
      (common-lisp:list
       (common-lisp:cons "ValuesToRemove"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          modify-dbsnapshot-attribute-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (modify-dbsnapshot-attribute-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-modify-dbsnapshot-attribute-result-"))
   (dbsnapshot-attributes-result common-lisp:nil :type
    (common-lisp:or dbsnapshot-attributes-result common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'modify-dbsnapshot-attribute-result
                    'make-modify-dbsnapshot-attribute-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          modify-dbsnapshot-attribute-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          modify-dbsnapshot-attribute-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dbsnapshot-attributes-result))
      (common-lisp:list
       (common-lisp:cons "DBSnapshotAttributesResult"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          modify-dbsnapshot-attribute-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (modify-dbsnapshot-message (:copier common-lisp:nil)
      (:conc-name "struct-shape-modify-dbsnapshot-message-"))
   (dbsnapshot-identifier
    (common-lisp:error ":dbsnapshot-identifier is required") :type
    (common-lisp:or string common-lisp:null))
   (engine-version common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (option-group-name common-lisp:nil :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'modify-dbsnapshot-message
                    'make-modify-dbsnapshot-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          modify-dbsnapshot-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          modify-dbsnapshot-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dbsnapshot-identifier))
      (common-lisp:list
       (common-lisp:cons "DBSnapshotIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'engine-version))
      (common-lisp:list
       (common-lisp:cons "EngineVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'option-group-name))
      (common-lisp:list
       (common-lisp:cons "OptionGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          modify-dbsnapshot-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (modify-dbsnapshot-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-modify-dbsnapshot-result-"))
   (dbsnapshot common-lisp:nil :type
    (common-lisp:or dbsnapshot common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'modify-dbsnapshot-result 'make-modify-dbsnapshot-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          modify-dbsnapshot-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          modify-dbsnapshot-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dbsnapshot))
      (common-lisp:list
       (common-lisp:cons "DBSnapshot"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          modify-dbsnapshot-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (modify-dbsubnet-group-message (:copier common-lisp:nil)
      (:conc-name "struct-shape-modify-dbsubnet-group-message-"))
   (dbsubnet-group-name (common-lisp:error ":dbsubnet-group-name is required")
    :type (common-lisp:or string common-lisp:null))
   (dbsubnet-group-description common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (subnet-ids (common-lisp:error ":subnet-ids is required") :type
    (common-lisp:or subnet-identifier-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'modify-dbsubnet-group-message
                    'make-modify-dbsubnet-group-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          modify-dbsubnet-group-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          modify-dbsubnet-group-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dbsubnet-group-name))
      (common-lisp:list
       (common-lisp:cons "DBSubnetGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dbsubnet-group-description))
      (common-lisp:list
       (common-lisp:cons "DBSubnetGroupDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subnet-ids))
      (common-lisp:list
       (common-lisp:cons "SubnetIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          modify-dbsubnet-group-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (modify-dbsubnet-group-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-modify-dbsubnet-group-result-"))
   (dbsubnet-group common-lisp:nil :type
    (common-lisp:or dbsubnet-group common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'modify-dbsubnet-group-result
                    'make-modify-dbsubnet-group-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          modify-dbsubnet-group-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          modify-dbsubnet-group-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dbsubnet-group))
      (common-lisp:list
       (common-lisp:cons "DBSubnetGroup"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          modify-dbsubnet-group-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (modify-event-subscription-message (:copier common-lisp:nil)
      (:conc-name "struct-shape-modify-event-subscription-message-"))
   (subscription-name (common-lisp:error ":subscription-name is required")
    :type (common-lisp:or string common-lisp:null))
   (sns-topic-arn common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (source-type common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (event-categories common-lisp:nil :type
    (common-lisp:or event-categories-list common-lisp:null))
   (enabled common-lisp:nil :type
    (common-lisp:or boolean-optional common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'modify-event-subscription-message
                    'make-modify-event-subscription-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          modify-event-subscription-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          modify-event-subscription-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subscription-name))
      (common-lisp:list
       (common-lisp:cons "SubscriptionName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sns-topic-arn))
      (common-lisp:list
       (common-lisp:cons "SnsTopicArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-type))
      (common-lisp:list
       (common-lisp:cons "SourceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'event-categories))
      (common-lisp:list
       (common-lisp:cons "EventCategories"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'enabled))
      (common-lisp:list
       (common-lisp:cons "Enabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          modify-event-subscription-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (modify-event-subscription-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-modify-event-subscription-result-"))
   (event-subscription common-lisp:nil :type
    (common-lisp:or event-subscription common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'modify-event-subscription-result
                    'make-modify-event-subscription-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          modify-event-subscription-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          modify-event-subscription-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'event-subscription))
      (common-lisp:list
       (common-lisp:cons "EventSubscription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          modify-event-subscription-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (modify-global-cluster-message (:copier common-lisp:nil)
      (:conc-name "struct-shape-modify-global-cluster-message-"))
   (global-cluster-identifier common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (new-global-cluster-identifier common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (deletion-protection common-lisp:nil :type
    (common-lisp:or boolean-optional common-lisp:null))
   (engine-version common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (allow-major-version-upgrade common-lisp:nil :type
    (common-lisp:or boolean-optional common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'modify-global-cluster-message
                    'make-modify-global-cluster-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          modify-global-cluster-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          modify-global-cluster-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'global-cluster-identifier))
      (common-lisp:list
       (common-lisp:cons "GlobalClusterIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'new-global-cluster-identifier))
      (common-lisp:list
       (common-lisp:cons "NewGlobalClusterIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'deletion-protection))
      (common-lisp:list
       (common-lisp:cons "DeletionProtection"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'engine-version))
      (common-lisp:list
       (common-lisp:cons "EngineVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'allow-major-version-upgrade))
      (common-lisp:list
       (common-lisp:cons "AllowMajorVersionUpgrade"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          modify-global-cluster-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (modify-global-cluster-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-modify-global-cluster-result-"))
   (global-cluster common-lisp:nil :type
    (common-lisp:or global-cluster common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'modify-global-cluster-result
                    'make-modify-global-cluster-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          modify-global-cluster-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          modify-global-cluster-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'global-cluster))
      (common-lisp:list
       (common-lisp:cons "GlobalCluster"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          modify-global-cluster-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (modify-option-group-message (:copier common-lisp:nil)
      (:conc-name "struct-shape-modify-option-group-message-"))
   (option-group-name (common-lisp:error ":option-group-name is required")
    :type (common-lisp:or string common-lisp:null))
   (options-to-include common-lisp:nil :type
    (common-lisp:or option-configuration-list common-lisp:null))
   (options-to-remove common-lisp:nil :type
    (common-lisp:or option-names-list common-lisp:null))
   (apply-immediately common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'modify-option-group-message
                    'make-modify-option-group-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          modify-option-group-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          modify-option-group-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'option-group-name))
      (common-lisp:list
       (common-lisp:cons "OptionGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'options-to-include))
      (common-lisp:list
       (common-lisp:cons "OptionsToInclude"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'options-to-remove))
      (common-lisp:list
       (common-lisp:cons "OptionsToRemove"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'apply-immediately))
      (common-lisp:list
       (common-lisp:cons "ApplyImmediately"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          modify-option-group-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (modify-option-group-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-modify-option-group-result-"))
   (option-group common-lisp:nil :type
    (common-lisp:or option-group common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'modify-option-group-result
                    'make-modify-option-group-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          modify-option-group-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          modify-option-group-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'option-group))
      (common-lisp:list
       (common-lisp:cons "OptionGroup"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          modify-option-group-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition network-type-not-supported
     (rds-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'network-type-not-supported)))
(common-lisp:progn
 (common-lisp:defstruct
     (option (:copier common-lisp:nil) (:conc-name "struct-shape-option-"))
   (option-name common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (option-description common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (persistent common-lisp:nil :type (common-lisp:or boolean common-lisp:null))
   (permanent common-lisp:nil :type (common-lisp:or boolean common-lisp:null))
   (port common-lisp:nil :type
    (common-lisp:or integer-optional common-lisp:null))
   (option-version common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (option-settings common-lisp:nil :type
    (common-lisp:or option-setting-configuration-list common-lisp:null))
   (dbsecurity-group-memberships common-lisp:nil :type
    (common-lisp:or dbsecurity-group-membership-list common-lisp:null))
   (vpc-security-group-memberships common-lisp:nil :type
    (common-lisp:or vpc-security-group-membership-list common-lisp:null)))
 (common-lisp:export (common-lisp:list 'option 'make-option))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input option))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input option))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'option-name))
      (common-lisp:list
       (common-lisp:cons "OptionName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'option-description))
      (common-lisp:list
       (common-lisp:cons "OptionDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'persistent))
      (common-lisp:list
       (common-lisp:cons "Persistent"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'permanent))
      (common-lisp:list
       (common-lisp:cons "Permanent"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'port))
      (common-lisp:list
       (common-lisp:cons "Port"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'option-version))
      (common-lisp:list
       (common-lisp:cons "OptionVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'option-settings))
      (common-lisp:list
       (common-lisp:cons "OptionSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dbsecurity-group-memberships))
      (common-lisp:list
       (common-lisp:cons "DBSecurityGroupMemberships"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'vpc-security-group-memberships))
      (common-lisp:list
       (common-lisp:cons "VpcSecurityGroupMemberships"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input option))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (option-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-option-configuration-"))
   (option-name (common-lisp:error ":option-name is required") :type
    (common-lisp:or string common-lisp:null))
   (port common-lisp:nil :type
    (common-lisp:or integer-optional common-lisp:null))
   (option-version common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (dbsecurity-group-memberships common-lisp:nil :type
    (common-lisp:or dbsecurity-group-name-list common-lisp:null))
   (vpc-security-group-memberships common-lisp:nil :type
    (common-lisp:or vpc-security-group-id-list common-lisp:null))
   (option-settings common-lisp:nil :type
    (common-lisp:or option-settings-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'option-configuration 'make-option-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input option-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input option-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'option-name))
      (common-lisp:list
       (common-lisp:cons "OptionName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'port))
      (common-lisp:list
       (common-lisp:cons "Port"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'option-version))
      (common-lisp:list
       (common-lisp:cons "OptionVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dbsecurity-group-memberships))
      (common-lisp:list
       (common-lisp:cons "DBSecurityGroupMemberships"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'vpc-security-group-memberships))
      (common-lisp:list
       (common-lisp:cons "VpcSecurityGroupMemberships"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'option-settings))
      (common-lisp:list
       (common-lisp:cons "OptionSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input option-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype option-configuration-list ()
   '(trivial-types:proper-list option-configuration))
 (common-lisp:defun |make-option-configuration-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list option-configuration))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (option-group (:copier common-lisp:nil)
      (:conc-name "struct-shape-option-group-"))
   (option-group-name common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (option-group-description common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (engine-name common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (major-engine-version common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (options common-lisp:nil :type
    (common-lisp:or options-list common-lisp:null))
   (allows-vpc-and-non-vpc-instance-memberships common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (vpc-id common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (option-group-arn common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (source-option-group common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (source-account-id common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (copy-timestamp common-lisp:nil :type
    (common-lisp:or tstamp common-lisp:null)))
 (common-lisp:export (common-lisp:list 'option-group 'make-option-group))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input option-group))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input option-group))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'option-group-name))
      (common-lisp:list
       (common-lisp:cons "OptionGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'option-group-description))
      (common-lisp:list
       (common-lisp:cons "OptionGroupDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'engine-name))
      (common-lisp:list
       (common-lisp:cons "EngineName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'major-engine-version))
      (common-lisp:list
       (common-lisp:cons "MajorEngineVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'options))
      (common-lisp:list
       (common-lisp:cons "Options"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'allows-vpc-and-non-vpc-instance-memberships))
      (common-lisp:list
       (common-lisp:cons "AllowsVpcAndNonVpcInstanceMemberships"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpc-id))
      (common-lisp:list
       (common-lisp:cons "VpcId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'option-group-arn))
      (common-lisp:list
       (common-lisp:cons "OptionGroupArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-option-group))
      (common-lisp:list
       (common-lisp:cons "SourceOptionGroup"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-account-id))
      (common-lisp:list
       (common-lisp:cons "SourceAccountId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'copy-timestamp))
      (common-lisp:list
       (common-lisp:cons "CopyTimestamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input option-group))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition option-group-already-exists-fault
     (rds-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'option-group-already-exists-fault)))
(common-lisp:progn
 (common-lisp:defstruct
     (option-group-membership (:copier common-lisp:nil)
      (:conc-name "struct-shape-option-group-membership-"))
   (option-group-name common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (status common-lisp:nil :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'option-group-membership 'make-option-group-membership))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          option-group-membership))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          option-group-membership))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'option-group-name))
      (common-lisp:list
       (common-lisp:cons "OptionGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          option-group-membership))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype option-group-membership-list ()
   '(trivial-types:proper-list option-group-membership))
 (common-lisp:defun |make-option-group-membership-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list option-group-membership))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition option-group-not-found-fault
     (rds-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'option-group-not-found-fault)))
(common-lisp:progn
 (common-lisp:defstruct
     (option-group-option (:copier common-lisp:nil)
      (:conc-name "struct-shape-option-group-option-"))
   (name common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (description common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (engine-name common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (major-engine-version common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (minimum-required-minor-engine-version common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (port-required common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (default-port common-lisp:nil :type
    (common-lisp:or integer-optional common-lisp:null))
   (options-depended-on common-lisp:nil :type
    (common-lisp:or options-depended-on common-lisp:null))
   (options-conflicts-with common-lisp:nil :type
    (common-lisp:or options-conflicts-with common-lisp:null))
   (persistent common-lisp:nil :type (common-lisp:or boolean common-lisp:null))
   (permanent common-lisp:nil :type (common-lisp:or boolean common-lisp:null))
   (requires-auto-minor-engine-version-upgrade common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (vpc-only common-lisp:nil :type (common-lisp:or boolean common-lisp:null))
   (supports-option-version-downgrade common-lisp:nil :type
    (common-lisp:or boolean-optional common-lisp:null))
   (option-group-option-settings common-lisp:nil :type
    (common-lisp:or option-group-option-settings-list common-lisp:null))
   (option-group-option-versions common-lisp:nil :type
    (common-lisp:or option-group-option-versions-list common-lisp:null))
   (copyable-cross-account common-lisp:nil :type
    (common-lisp:or boolean-optional common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'option-group-option 'make-option-group-option))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input option-group-option))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input option-group-option))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'engine-name))
      (common-lisp:list
       (common-lisp:cons "EngineName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'major-engine-version))
      (common-lisp:list
       (common-lisp:cons "MajorEngineVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'minimum-required-minor-engine-version))
      (common-lisp:list
       (common-lisp:cons "MinimumRequiredMinorEngineVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'port-required))
      (common-lisp:list
       (common-lisp:cons "PortRequired"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'default-port))
      (common-lisp:list
       (common-lisp:cons "DefaultPort"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'options-depended-on))
      (common-lisp:list
       (common-lisp:cons "OptionsDependedOn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'options-conflicts-with))
      (common-lisp:list
       (common-lisp:cons "OptionsConflictsWith"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'persistent))
      (common-lisp:list
       (common-lisp:cons "Persistent"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'permanent))
      (common-lisp:list
       (common-lisp:cons "Permanent"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'requires-auto-minor-engine-version-upgrade))
      (common-lisp:list
       (common-lisp:cons "RequiresAutoMinorEngineVersionUpgrade"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpc-only))
      (common-lisp:list
       (common-lisp:cons "VpcOnly"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'supports-option-version-downgrade))
      (common-lisp:list
       (common-lisp:cons "SupportsOptionVersionDowngrade"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'option-group-option-settings))
      (common-lisp:list
       (common-lisp:cons "OptionGroupOptionSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'option-group-option-versions))
      (common-lisp:list
       (common-lisp:cons "OptionGroupOptionVersions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'copyable-cross-account))
      (common-lisp:list
       (common-lisp:cons "CopyableCrossAccount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input option-group-option))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (option-group-option-setting (:copier common-lisp:nil)
      (:conc-name "struct-shape-option-group-option-setting-"))
   (setting-name common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (setting-description common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (default-value common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (apply-type common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (allowed-values common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (is-modifiable common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (is-required common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (minimum-engine-version-per-allowed-value common-lisp:nil :type
    (common-lisp:or minimum-engine-version-per-allowed-value-list
                    common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'option-group-option-setting
                    'make-option-group-option-setting))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          option-group-option-setting))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          option-group-option-setting))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'setting-name))
      (common-lisp:list
       (common-lisp:cons "SettingName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'setting-description))
      (common-lisp:list
       (common-lisp:cons "SettingDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'default-value))
      (common-lisp:list
       (common-lisp:cons "DefaultValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'apply-type))
      (common-lisp:list
       (common-lisp:cons "ApplyType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'allowed-values))
      (common-lisp:list
       (common-lisp:cons "AllowedValues"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'is-modifiable))
      (common-lisp:list
       (common-lisp:cons "IsModifiable"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'is-required))
      (common-lisp:list
       (common-lisp:cons "IsRequired"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'minimum-engine-version-per-allowed-value))
      (common-lisp:list
       (common-lisp:cons "MinimumEngineVersionPerAllowedValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          option-group-option-setting))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype option-group-option-settings-list ()
   '(trivial-types:proper-list option-group-option-setting))
 (common-lisp:defun |make-option-group-option-settings-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            option-group-option-setting))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype option-group-option-versions-list ()
   '(trivial-types:proper-list option-version))
 (common-lisp:defun |make-option-group-option-versions-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list option-version))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype option-group-options-list ()
   '(trivial-types:proper-list option-group-option))
 (common-lisp:defun |make-option-group-options-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list option-group-option))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (option-group-options-message (:copier common-lisp:nil)
      (:conc-name "struct-shape-option-group-options-message-"))
   (option-group-options common-lisp:nil :type
    (common-lisp:or option-group-options-list common-lisp:null))
   (marker common-lisp:nil :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'option-group-options-message
                    'make-option-group-options-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          option-group-options-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          option-group-options-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'option-group-options))
      (common-lisp:list
       (common-lisp:cons "OptionGroupOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          option-group-options-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition option-group-quota-exceeded-fault
     (rds-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'option-group-quota-exceeded-fault)))
(common-lisp:progn
 (common-lisp:defstruct
     (option-groups (:copier common-lisp:nil)
      (:conc-name "struct-shape-option-groups-"))
   (option-groups-list common-lisp:nil :type
    (common-lisp:or option-groups-list common-lisp:null))
   (marker common-lisp:nil :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export (common-lisp:list 'option-groups 'make-option-groups))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input option-groups))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input option-groups))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'option-groups-list))
      (common-lisp:list
       (common-lisp:cons "OptionGroupsList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input option-groups))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype option-groups-list ()
   '(trivial-types:proper-list option-group))
 (common-lisp:defun |make-option-groups-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list option-group))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype option-names-list () '(trivial-types:proper-list string))
 (common-lisp:defun |make-option-names-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list string))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (option-setting (:copier common-lisp:nil)
      (:conc-name "struct-shape-option-setting-"))
   (name common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (value common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (default-value common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (description common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (apply-type common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (data-type common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (allowed-values common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (is-modifiable common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (is-collection common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null)))
 (common-lisp:export (common-lisp:list 'option-setting 'make-option-setting))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input option-setting))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input option-setting))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "Value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'default-value))
      (common-lisp:list
       (common-lisp:cons "DefaultValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'apply-type))
      (common-lisp:list
       (common-lisp:cons "ApplyType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-type))
      (common-lisp:list
       (common-lisp:cons "DataType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'allowed-values))
      (common-lisp:list
       (common-lisp:cons "AllowedValues"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'is-modifiable))
      (common-lisp:list
       (common-lisp:cons "IsModifiable"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'is-collection))
      (common-lisp:list
       (common-lisp:cons "IsCollection"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input option-setting))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype option-setting-configuration-list ()
   '(trivial-types:proper-list option-setting))
 (common-lisp:defun |make-option-setting-configuration-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list option-setting))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype option-settings-list ()
   '(trivial-types:proper-list option-setting))
 (common-lisp:defun |make-option-settings-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list option-setting))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (option-version (:copier common-lisp:nil)
      (:conc-name "struct-shape-option-version-"))
   (version common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (is-default common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null)))
 (common-lisp:export (common-lisp:list 'option-version 'make-option-version))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input option-version))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input option-version))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version))
      (common-lisp:list
       (common-lisp:cons "Version"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'is-default))
      (common-lisp:list
       (common-lisp:cons "IsDefault"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input option-version))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype options-conflicts-with ()
   '(trivial-types:proper-list string))
 (common-lisp:defun |make-options-conflicts-with|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list string))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype options-depended-on ()
   '(trivial-types:proper-list string))
 (common-lisp:defun |make-options-depended-on|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list string))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype options-list () '(trivial-types:proper-list option))
 (common-lisp:defun |make-options-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list option))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (orderable-dbinstance-option (:copier common-lisp:nil)
      (:conc-name "struct-shape-orderable-dbinstance-option-"))
   (engine common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (engine-version common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (dbinstance-class common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (license-model common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (availability-zone-group common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (availability-zones common-lisp:nil :type
    (common-lisp:or availability-zone-list common-lisp:null))
   (multi-azcapable common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (read-replica-capable common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (vpc common-lisp:nil :type (common-lisp:or boolean common-lisp:null))
   (supports-storage-encryption common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (storage-type common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (supports-iops common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (supports-enhanced-monitoring common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (supports-iamdatabase-authentication common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (supports-performance-insights common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (min-storage-size common-lisp:nil :type
    (common-lisp:or integer-optional common-lisp:null))
   (max-storage-size common-lisp:nil :type
    (common-lisp:or integer-optional common-lisp:null))
   (min-iops-per-db-instance common-lisp:nil :type
    (common-lisp:or integer-optional common-lisp:null))
   (max-iops-per-db-instance common-lisp:nil :type
    (common-lisp:or integer-optional common-lisp:null))
   (min-iops-per-gib common-lisp:nil :type
    (common-lisp:or double-optional common-lisp:null))
   (max-iops-per-gib common-lisp:nil :type
    (common-lisp:or double-optional common-lisp:null))
   (available-processor-features common-lisp:nil :type
    (common-lisp:or available-processor-feature-list common-lisp:null))
   (supported-engine-modes common-lisp:nil :type
    (common-lisp:or engine-mode-list common-lisp:null))
   (supports-storage-autoscaling common-lisp:nil :type
    (common-lisp:or boolean-optional common-lisp:null))
   (supports-kerberos-authentication common-lisp:nil :type
    (common-lisp:or boolean-optional common-lisp:null))
   (outpost-capable common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (supported-activity-stream-modes common-lisp:nil :type
    (common-lisp:or activity-stream-mode-list common-lisp:null))
   (supports-global-databases common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (supports-clusters common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (supported-network-types common-lisp:nil :type
    (common-lisp:or string-list common-lisp:null))
   (supports-storage-throughput common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (min-storage-throughput-per-db-instance common-lisp:nil :type
    (common-lisp:or integer-optional common-lisp:null))
   (max-storage-throughput-per-db-instance common-lisp:nil :type
    (common-lisp:or integer-optional common-lisp:null))
   (min-storage-throughput-per-iops common-lisp:nil :type
    (common-lisp:or double-optional common-lisp:null))
   (max-storage-throughput-per-iops common-lisp:nil :type
    (common-lisp:or double-optional common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'orderable-dbinstance-option
                    'make-orderable-dbinstance-option))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          orderable-dbinstance-option))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          orderable-dbinstance-option))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'engine))
      (common-lisp:list
       (common-lisp:cons "Engine"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'engine-version))
      (common-lisp:list
       (common-lisp:cons "EngineVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dbinstance-class))
      (common-lisp:list
       (common-lisp:cons "DBInstanceClass"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'license-model))
      (common-lisp:list
       (common-lisp:cons "LicenseModel"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'availability-zone-group))
      (common-lisp:list
       (common-lisp:cons "AvailabilityZoneGroup"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'availability-zones))
      (common-lisp:list
       (common-lisp:cons "AvailabilityZones"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'multi-azcapable))
      (common-lisp:list
       (common-lisp:cons "MultiAZCapable"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'read-replica-capable))
      (common-lisp:list
       (common-lisp:cons "ReadReplicaCapable"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpc))
      (common-lisp:list
       (common-lisp:cons "Vpc"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'supports-storage-encryption))
      (common-lisp:list
       (common-lisp:cons "SupportsStorageEncryption"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'storage-type))
      (common-lisp:list
       (common-lisp:cons "StorageType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'supports-iops))
      (common-lisp:list
       (common-lisp:cons "SupportsIops"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'supports-enhanced-monitoring))
      (common-lisp:list
       (common-lisp:cons "SupportsEnhancedMonitoring"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'supports-iamdatabase-authentication))
      (common-lisp:list
       (common-lisp:cons "SupportsIAMDatabaseAuthentication"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'supports-performance-insights))
      (common-lisp:list
       (common-lisp:cons "SupportsPerformanceInsights"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'min-storage-size))
      (common-lisp:list
       (common-lisp:cons "MinStorageSize"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-storage-size))
      (common-lisp:list
       (common-lisp:cons "MaxStorageSize"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'min-iops-per-db-instance))
      (common-lisp:list
       (common-lisp:cons "MinIopsPerDbInstance"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'max-iops-per-db-instance))
      (common-lisp:list
       (common-lisp:cons "MaxIopsPerDbInstance"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'min-iops-per-gib))
      (common-lisp:list
       (common-lisp:cons "MinIopsPerGib"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-iops-per-gib))
      (common-lisp:list
       (common-lisp:cons "MaxIopsPerGib"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'available-processor-features))
      (common-lisp:list
       (common-lisp:cons "AvailableProcessorFeatures"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'supported-engine-modes))
      (common-lisp:list
       (common-lisp:cons "SupportedEngineModes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'supports-storage-autoscaling))
      (common-lisp:list
       (common-lisp:cons "SupportsStorageAutoscaling"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'supports-kerberos-authentication))
      (common-lisp:list
       (common-lisp:cons "SupportsKerberosAuthentication"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'outpost-capable))
      (common-lisp:list
       (common-lisp:cons "OutpostCapable"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'supported-activity-stream-modes))
      (common-lisp:list
       (common-lisp:cons "SupportedActivityStreamModes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'supports-global-databases))
      (common-lisp:list
       (common-lisp:cons "SupportsGlobalDatabases"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'supports-clusters))
      (common-lisp:list
       (common-lisp:cons "SupportsClusters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'supported-network-types))
      (common-lisp:list
       (common-lisp:cons "SupportedNetworkTypes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'supports-storage-throughput))
      (common-lisp:list
       (common-lisp:cons "SupportsStorageThroughput"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'min-storage-throughput-per-db-instance))
      (common-lisp:list
       (common-lisp:cons "MinStorageThroughputPerDbInstance"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'max-storage-throughput-per-db-instance))
      (common-lisp:list
       (common-lisp:cons "MaxStorageThroughputPerDbInstance"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'min-storage-throughput-per-iops))
      (common-lisp:list
       (common-lisp:cons "MinStorageThroughputPerIops"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'max-storage-throughput-per-iops))
      (common-lisp:list
       (common-lisp:cons "MaxStorageThroughputPerIops"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          orderable-dbinstance-option))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype orderable-dbinstance-options-list ()
   '(trivial-types:proper-list orderable-dbinstance-option))
 (common-lisp:defun |make-orderable-dbinstance-options-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            orderable-dbinstance-option))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (orderable-dbinstance-options-message (:copier common-lisp:nil)
      (:conc-name "struct-shape-orderable-dbinstance-options-message-"))
   (orderable-dbinstance-options common-lisp:nil :type
    (common-lisp:or orderable-dbinstance-options-list common-lisp:null))
   (marker common-lisp:nil :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'orderable-dbinstance-options-message
                    'make-orderable-dbinstance-options-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          orderable-dbinstance-options-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          orderable-dbinstance-options-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'orderable-dbinstance-options))
      (common-lisp:list
       (common-lisp:cons "OrderableDBInstanceOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          orderable-dbinstance-options-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (outpost (:copier common-lisp:nil) (:conc-name "struct-shape-outpost-"))
   (arn common-lisp:nil :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export (common-lisp:list 'outpost 'make-outpost))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input outpost))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input outpost))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input outpost))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (parameter (:copier common-lisp:nil)
      (:conc-name "struct-shape-parameter-"))
   (parameter-name common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (parameter-value common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (description common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (source common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (apply-type common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (data-type common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (allowed-values common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (is-modifiable common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (minimum-engine-version common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (apply-method common-lisp:nil :type
    (common-lisp:or apply-method common-lisp:null))
   (supported-engine-modes common-lisp:nil :type
    (common-lisp:or engine-mode-list common-lisp:null)))
 (common-lisp:export (common-lisp:list 'parameter 'make-parameter))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input parameter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input parameter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'parameter-name))
      (common-lisp:list
       (common-lisp:cons "ParameterName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'parameter-value))
      (common-lisp:list
       (common-lisp:cons "ParameterValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source))
      (common-lisp:list
       (common-lisp:cons "Source"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'apply-type))
      (common-lisp:list
       (common-lisp:cons "ApplyType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-type))
      (common-lisp:list
       (common-lisp:cons "DataType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'allowed-values))
      (common-lisp:list
       (common-lisp:cons "AllowedValues"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'is-modifiable))
      (common-lisp:list
       (common-lisp:cons "IsModifiable"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'minimum-engine-version))
      (common-lisp:list
       (common-lisp:cons "MinimumEngineVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'apply-method))
      (common-lisp:list
       (common-lisp:cons "ApplyMethod"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'supported-engine-modes))
      (common-lisp:list
       (common-lisp:cons "SupportedEngineModes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input parameter))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype parameters-list ()
   '(trivial-types:proper-list parameter))
 (common-lisp:defun |make-parameters-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list parameter))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (pending-cloudwatch-logs-exports (:copier common-lisp:nil)
      (:conc-name "struct-shape-pending-cloudwatch-logs-exports-"))
   (log-types-to-enable common-lisp:nil :type
    (common-lisp:or log-type-list common-lisp:null))
   (log-types-to-disable common-lisp:nil :type
    (common-lisp:or log-type-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'pending-cloudwatch-logs-exports
                    'make-pending-cloudwatch-logs-exports))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          pending-cloudwatch-logs-exports))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          pending-cloudwatch-logs-exports))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'log-types-to-enable))
      (common-lisp:list
       (common-lisp:cons "LogTypesToEnable"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'log-types-to-disable))
      (common-lisp:list
       (common-lisp:cons "LogTypesToDisable"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          pending-cloudwatch-logs-exports))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (pending-maintenance-action (:copier common-lisp:nil)
      (:conc-name "struct-shape-pending-maintenance-action-"))
   (action common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (auto-applied-after-date common-lisp:nil :type
    (common-lisp:or tstamp common-lisp:null))
   (forced-apply-date common-lisp:nil :type
    (common-lisp:or tstamp common-lisp:null))
   (opt-in-status common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (current-apply-date common-lisp:nil :type
    (common-lisp:or tstamp common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'pending-maintenance-action
                    'make-pending-maintenance-action))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          pending-maintenance-action))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          pending-maintenance-action))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'action))
      (common-lisp:list
       (common-lisp:cons "Action"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'auto-applied-after-date))
      (common-lisp:list
       (common-lisp:cons "AutoAppliedAfterDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'forced-apply-date))
      (common-lisp:list
       (common-lisp:cons "ForcedApplyDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'opt-in-status))
      (common-lisp:list
       (common-lisp:cons "OptInStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'current-apply-date))
      (common-lisp:list
       (common-lisp:cons "CurrentApplyDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          pending-maintenance-action))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype pending-maintenance-action-details ()
   '(trivial-types:proper-list pending-maintenance-action))
 (common-lisp:defun |make-pending-maintenance-action-details|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            pending-maintenance-action))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype pending-maintenance-actions ()
   '(trivial-types:proper-list resource-pending-maintenance-actions))
 (common-lisp:defun |make-pending-maintenance-actions|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            resource-pending-maintenance-actions))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (pending-maintenance-actions-message (:copier common-lisp:nil)
      (:conc-name "struct-shape-pending-maintenance-actions-message-"))
   (pending-maintenance-actions common-lisp:nil :type
    (common-lisp:or pending-maintenance-actions common-lisp:null))
   (marker common-lisp:nil :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'pending-maintenance-actions-message
                    'make-pending-maintenance-actions-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          pending-maintenance-actions-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          pending-maintenance-actions-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'pending-maintenance-actions))
      (common-lisp:list
       (common-lisp:cons "PendingMaintenanceActions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          pending-maintenance-actions-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (pending-modified-values (:copier common-lisp:nil)
      (:conc-name "struct-shape-pending-modified-values-"))
   (dbinstance-class common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (allocated-storage common-lisp:nil :type
    (common-lisp:or integer-optional common-lisp:null))
   (master-user-password common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (port common-lisp:nil :type
    (common-lisp:or integer-optional common-lisp:null))
   (backup-retention-period common-lisp:nil :type
    (common-lisp:or integer-optional common-lisp:null))
   (multi-az common-lisp:nil :type
    (common-lisp:or boolean-optional common-lisp:null))
   (engine-version common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (license-model common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (iops common-lisp:nil :type
    (common-lisp:or integer-optional common-lisp:null))
   (dbinstance-identifier common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (storage-type common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (cacertificate-identifier common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (dbsubnet-group-name common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (pending-cloudwatch-logs-exports common-lisp:nil :type
    (common-lisp:or pending-cloudwatch-logs-exports common-lisp:null))
   (processor-features common-lisp:nil :type
    (common-lisp:or processor-feature-list common-lisp:null))
   (iamdatabase-authentication-enabled common-lisp:nil :type
    (common-lisp:or boolean-optional common-lisp:null))
   (automation-mode common-lisp:nil :type
    (common-lisp:or automation-mode common-lisp:null))
   (resume-full-automation-mode-time common-lisp:nil :type
    (common-lisp:or tstamp common-lisp:null))
   (storage-throughput common-lisp:nil :type
    (common-lisp:or integer-optional common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'pending-modified-values 'make-pending-modified-values))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          pending-modified-values))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          pending-modified-values))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dbinstance-class))
      (common-lisp:list
       (common-lisp:cons "DBInstanceClass"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'allocated-storage))
      (common-lisp:list
       (common-lisp:cons "AllocatedStorage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'master-user-password))
      (common-lisp:list
       (common-lisp:cons "MasterUserPassword"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'port))
      (common-lisp:list
       (common-lisp:cons "Port"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'backup-retention-period))
      (common-lisp:list
       (common-lisp:cons "BackupRetentionPeriod"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'multi-az))
      (common-lisp:list
       (common-lisp:cons "MultiAZ"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'engine-version))
      (common-lisp:list
       (common-lisp:cons "EngineVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'license-model))
      (common-lisp:list
       (common-lisp:cons "LicenseModel"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'iops))
      (common-lisp:list
       (common-lisp:cons "Iops"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dbinstance-identifier))
      (common-lisp:list
       (common-lisp:cons "DBInstanceIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'storage-type))
      (common-lisp:list
       (common-lisp:cons "StorageType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cacertificate-identifier))
      (common-lisp:list
       (common-lisp:cons "CACertificateIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dbsubnet-group-name))
      (common-lisp:list
       (common-lisp:cons "DBSubnetGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'pending-cloudwatch-logs-exports))
      (common-lisp:list
       (common-lisp:cons "PendingCloudwatchLogsExports"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'processor-features))
      (common-lisp:list
       (common-lisp:cons "ProcessorFeatures"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'iamdatabase-authentication-enabled))
      (common-lisp:list
       (common-lisp:cons "IAMDatabaseAuthenticationEnabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'automation-mode))
      (common-lisp:list
       (common-lisp:cons "AutomationMode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'resume-full-automation-mode-time))
      (common-lisp:list
       (common-lisp:cons "ResumeFullAutomationModeTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'storage-throughput))
      (common-lisp:list
       (common-lisp:cons "StorageThroughput"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          pending-modified-values))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition point-in-time-restore-not-enabled-fault
     (rds-error)
     common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'point-in-time-restore-not-enabled-fault)))
(common-lisp:progn
 (common-lisp:defstruct
     (processor-feature (:copier common-lisp:nil)
      (:conc-name "struct-shape-processor-feature-"))
   (name common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (value common-lisp:nil :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'processor-feature 'make-processor-feature))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input processor-feature))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input processor-feature))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "Value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input processor-feature))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype processor-feature-list ()
   '(trivial-types:proper-list processor-feature))
 (common-lisp:defun |make-processor-feature-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list processor-feature))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (promote-read-replica-dbcluster-message (:copier common-lisp:nil)
      (:conc-name "struct-shape-promote-read-replica-dbcluster-message-"))
   (dbcluster-identifier
    (common-lisp:error ":dbcluster-identifier is required") :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'promote-read-replica-dbcluster-message
                    'make-promote-read-replica-dbcluster-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          promote-read-replica-dbcluster-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          promote-read-replica-dbcluster-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dbcluster-identifier))
      (common-lisp:list
       (common-lisp:cons "DBClusterIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          promote-read-replica-dbcluster-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (promote-read-replica-dbcluster-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-promote-read-replica-dbcluster-result-"))
   (dbcluster common-lisp:nil :type
    (common-lisp:or dbcluster common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'promote-read-replica-dbcluster-result
                    'make-promote-read-replica-dbcluster-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          promote-read-replica-dbcluster-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          promote-read-replica-dbcluster-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dbcluster))
      (common-lisp:list
       (common-lisp:cons "DBCluster"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          promote-read-replica-dbcluster-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (promote-read-replica-message (:copier common-lisp:nil)
      (:conc-name "struct-shape-promote-read-replica-message-"))
   (dbinstance-identifier
    (common-lisp:error ":dbinstance-identifier is required") :type
    (common-lisp:or string common-lisp:null))
   (backup-retention-period common-lisp:nil :type
    (common-lisp:or integer-optional common-lisp:null))
   (preferred-backup-window common-lisp:nil :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'promote-read-replica-message
                    'make-promote-read-replica-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          promote-read-replica-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          promote-read-replica-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dbinstance-identifier))
      (common-lisp:list
       (common-lisp:cons "DBInstanceIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'backup-retention-period))
      (common-lisp:list
       (common-lisp:cons "BackupRetentionPeriod"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'preferred-backup-window))
      (common-lisp:list
       (common-lisp:cons "PreferredBackupWindow"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          promote-read-replica-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (promote-read-replica-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-promote-read-replica-result-"))
   (dbinstance common-lisp:nil :type
    (common-lisp:or dbinstance common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'promote-read-replica-result
                    'make-promote-read-replica-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          promote-read-replica-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          promote-read-replica-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dbinstance))
      (common-lisp:list
       (common-lisp:cons "DBInstance"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          promote-read-replica-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition provisioned-iops-not-available-in-azfault
     (rds-error)
     common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'provisioned-iops-not-available-in-azfault)))
(common-lisp:progn
 (common-lisp:defstruct
     (purchase-reserved-dbinstances-offering-message (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-purchase-reserved-dbinstances-offering-message-"))
   (reserved-dbinstances-offering-id
    (common-lisp:error ":reserved-dbinstances-offering-id is required") :type
    (common-lisp:or string common-lisp:null))
   (reserved-dbinstance-id common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (dbinstance-count common-lisp:nil :type
    (common-lisp:or integer-optional common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'purchase-reserved-dbinstances-offering-message
                    'make-purchase-reserved-dbinstances-offering-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          purchase-reserved-dbinstances-offering-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          purchase-reserved-dbinstances-offering-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'reserved-dbinstances-offering-id))
      (common-lisp:list
       (common-lisp:cons "ReservedDBInstancesOfferingId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'reserved-dbinstance-id))
      (common-lisp:list
       (common-lisp:cons "ReservedDBInstanceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dbinstance-count))
      (common-lisp:list
       (common-lisp:cons "DBInstanceCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          purchase-reserved-dbinstances-offering-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (purchase-reserved-dbinstances-offering-result (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-purchase-reserved-dbinstances-offering-result-"))
   (reserved-dbinstance common-lisp:nil :type
    (common-lisp:or reserved-dbinstance common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'purchase-reserved-dbinstances-offering-result
                    'make-purchase-reserved-dbinstances-offering-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          purchase-reserved-dbinstances-offering-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          purchase-reserved-dbinstances-offering-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'reserved-dbinstance))
      (common-lisp:list
       (common-lisp:cons "ReservedDBInstance"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          purchase-reserved-dbinstances-offering-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (range (:copier common-lisp:nil) (:conc-name "struct-shape-range-"))
   (from common-lisp:nil :type (common-lisp:or integer common-lisp:null))
   (to common-lisp:nil :type (common-lisp:or integer common-lisp:null))
   (step common-lisp:nil :type
    (common-lisp:or integer-optional common-lisp:null)))
 (common-lisp:export (common-lisp:list 'range 'make-range))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input range))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input range))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'from))
      (common-lisp:list
       (common-lisp:cons "From"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'to))
      (common-lisp:list
       (common-lisp:cons "To"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'step))
      (common-lisp:list
       (common-lisp:cons "Step"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input range))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype range-list () '(trivial-types:proper-list range))
 (common-lisp:defun |make-range-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list range))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype read-replica-dbcluster-identifier-list ()
   '(trivial-types:proper-list string))
 (common-lisp:defun |make-read-replica-dbcluster-identifier-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list string))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype read-replica-dbinstance-identifier-list ()
   '(trivial-types:proper-list string))
 (common-lisp:defun |make-read-replica-dbinstance-identifier-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list string))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype read-replica-identifier-list ()
   '(trivial-types:proper-list string))
 (common-lisp:defun |make-read-replica-identifier-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list string))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype readers-arn-list () '(trivial-types:proper-list string))
 (common-lisp:defun |make-readers-arn-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list string))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (reboot-dbcluster-message (:copier common-lisp:nil)
      (:conc-name "struct-shape-reboot-dbcluster-message-"))
   (dbcluster-identifier
    (common-lisp:error ":dbcluster-identifier is required") :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'reboot-dbcluster-message 'make-reboot-dbcluster-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          reboot-dbcluster-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          reboot-dbcluster-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dbcluster-identifier))
      (common-lisp:list
       (common-lisp:cons "DBClusterIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          reboot-dbcluster-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (reboot-dbcluster-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-reboot-dbcluster-result-"))
   (dbcluster common-lisp:nil :type
    (common-lisp:or dbcluster common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'reboot-dbcluster-result 'make-reboot-dbcluster-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          reboot-dbcluster-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          reboot-dbcluster-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dbcluster))
      (common-lisp:list
       (common-lisp:cons "DBCluster"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          reboot-dbcluster-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (reboot-dbinstance-message (:copier common-lisp:nil)
      (:conc-name "struct-shape-reboot-dbinstance-message-"))
   (dbinstance-identifier
    (common-lisp:error ":dbinstance-identifier is required") :type
    (common-lisp:or string common-lisp:null))
   (force-failover common-lisp:nil :type
    (common-lisp:or boolean-optional common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'reboot-dbinstance-message
                    'make-reboot-dbinstance-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          reboot-dbinstance-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          reboot-dbinstance-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dbinstance-identifier))
      (common-lisp:list
       (common-lisp:cons "DBInstanceIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'force-failover))
      (common-lisp:list
       (common-lisp:cons "ForceFailover"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          reboot-dbinstance-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (reboot-dbinstance-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-reboot-dbinstance-result-"))
   (dbinstance common-lisp:nil :type
    (common-lisp:or dbinstance common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'reboot-dbinstance-result 'make-reboot-dbinstance-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          reboot-dbinstance-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          reboot-dbinstance-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dbinstance))
      (common-lisp:list
       (common-lisp:cons "DBInstance"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          reboot-dbinstance-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (recurring-charge (:copier common-lisp:nil)
      (:conc-name "struct-shape-recurring-charge-"))
   (recurring-charge-amount common-lisp:nil :type
    (common-lisp:or double common-lisp:null))
   (recurring-charge-frequency common-lisp:nil :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'recurring-charge 'make-recurring-charge))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input recurring-charge))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input recurring-charge))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'recurring-charge-amount))
      (common-lisp:list
       (common-lisp:cons "RecurringChargeAmount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'recurring-charge-frequency))
      (common-lisp:list
       (common-lisp:cons "RecurringChargeFrequency"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input recurring-charge))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype recurring-charge-list ()
   '(trivial-types:proper-list recurring-charge))
 (common-lisp:defun |make-recurring-charge-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list recurring-charge))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (register-dbproxy-targets-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-register-dbproxy-targets-request-"))
   (dbproxy-name (common-lisp:error ":dbproxy-name is required") :type
    (common-lisp:or string common-lisp:null))
   (target-group-name common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (dbinstance-identifiers common-lisp:nil :type
    (common-lisp:or string-list common-lisp:null))
   (dbcluster-identifiers common-lisp:nil :type
    (common-lisp:or string-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'register-dbproxy-targets-request
                    'make-register-dbproxy-targets-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          register-dbproxy-targets-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          register-dbproxy-targets-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dbproxy-name))
      (common-lisp:list
       (common-lisp:cons "DBProxyName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target-group-name))
      (common-lisp:list
       (common-lisp:cons "TargetGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dbinstance-identifiers))
      (common-lisp:list
       (common-lisp:cons "DBInstanceIdentifiers"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dbcluster-identifiers))
      (common-lisp:list
       (common-lisp:cons "DBClusterIdentifiers"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          register-dbproxy-targets-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (register-dbproxy-targets-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-register-dbproxy-targets-response-"))
   (dbproxy-targets common-lisp:nil :type
    (common-lisp:or target-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'register-dbproxy-targets-response
                    'make-register-dbproxy-targets-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          register-dbproxy-targets-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          register-dbproxy-targets-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dbproxy-targets))
      (common-lisp:list
       (common-lisp:cons "DBProxyTargets"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          register-dbproxy-targets-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (remove-from-global-cluster-message (:copier common-lisp:nil)
      (:conc-name "struct-shape-remove-from-global-cluster-message-"))
   (global-cluster-identifier common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (db-cluster-identifier common-lisp:nil :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'remove-from-global-cluster-message
                    'make-remove-from-global-cluster-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          remove-from-global-cluster-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          remove-from-global-cluster-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'global-cluster-identifier))
      (common-lisp:list
       (common-lisp:cons "GlobalClusterIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'db-cluster-identifier))
      (common-lisp:list
       (common-lisp:cons "DbClusterIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          remove-from-global-cluster-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (remove-from-global-cluster-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-remove-from-global-cluster-result-"))
   (global-cluster common-lisp:nil :type
    (common-lisp:or global-cluster common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'remove-from-global-cluster-result
                    'make-remove-from-global-cluster-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          remove-from-global-cluster-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          remove-from-global-cluster-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'global-cluster))
      (common-lisp:list
       (common-lisp:cons "GlobalCluster"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          remove-from-global-cluster-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (remove-role-from-dbcluster-message (:copier common-lisp:nil)
      (:conc-name "struct-shape-remove-role-from-dbcluster-message-"))
   (dbcluster-identifier
    (common-lisp:error ":dbcluster-identifier is required") :type
    (common-lisp:or string common-lisp:null))
   (role-arn (common-lisp:error ":role-arn is required") :type
    (common-lisp:or string common-lisp:null))
   (feature-name common-lisp:nil :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'remove-role-from-dbcluster-message
                    'make-remove-role-from-dbcluster-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          remove-role-from-dbcluster-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          remove-role-from-dbcluster-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dbcluster-identifier))
      (common-lisp:list
       (common-lisp:cons "DBClusterIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "RoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'feature-name))
      (common-lisp:list
       (common-lisp:cons "FeatureName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          remove-role-from-dbcluster-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (remove-role-from-dbinstance-message (:copier common-lisp:nil)
      (:conc-name "struct-shape-remove-role-from-dbinstance-message-"))
   (dbinstance-identifier
    (common-lisp:error ":dbinstance-identifier is required") :type
    (common-lisp:or string common-lisp:null))
   (role-arn (common-lisp:error ":role-arn is required") :type
    (common-lisp:or string common-lisp:null))
   (feature-name (common-lisp:error ":feature-name is required") :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'remove-role-from-dbinstance-message
                    'make-remove-role-from-dbinstance-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          remove-role-from-dbinstance-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          remove-role-from-dbinstance-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dbinstance-identifier))
      (common-lisp:list
       (common-lisp:cons "DBInstanceIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "RoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'feature-name))
      (common-lisp:list
       (common-lisp:cons "FeatureName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          remove-role-from-dbinstance-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (remove-source-identifier-from-subscription-message
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-remove-source-identifier-from-subscription-message-"))
   (subscription-name (common-lisp:error ":subscription-name is required")
    :type (common-lisp:or string common-lisp:null))
   (source-identifier (common-lisp:error ":source-identifier is required")
    :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'remove-source-identifier-from-subscription-message
                    'make-remove-source-identifier-from-subscription-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          remove-source-identifier-from-subscription-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          remove-source-identifier-from-subscription-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subscription-name))
      (common-lisp:list
       (common-lisp:cons "SubscriptionName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-identifier))
      (common-lisp:list
       (common-lisp:cons "SourceIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          remove-source-identifier-from-subscription-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (remove-source-identifier-from-subscription-result
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-remove-source-identifier-from-subscription-result-"))
   (event-subscription common-lisp:nil :type
    (common-lisp:or event-subscription common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'remove-source-identifier-from-subscription-result
                    'make-remove-source-identifier-from-subscription-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          remove-source-identifier-from-subscription-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          remove-source-identifier-from-subscription-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'event-subscription))
      (common-lisp:list
       (common-lisp:cons "EventSubscription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          remove-source-identifier-from-subscription-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (remove-tags-from-resource-message (:copier common-lisp:nil)
      (:conc-name "struct-shape-remove-tags-from-resource-message-"))
   (resource-name (common-lisp:error ":resource-name is required") :type
    (common-lisp:or string common-lisp:null))
   (tag-keys (common-lisp:error ":tag-keys is required") :type
    (common-lisp:or key-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'remove-tags-from-resource-message
                    'make-remove-tags-from-resource-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          remove-tags-from-resource-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          remove-tags-from-resource-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-name))
      (common-lisp:list
       (common-lisp:cons "ResourceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tag-keys))
      (common-lisp:list
       (common-lisp:cons "TagKeys"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          remove-tags-from-resource-message))
   common-lisp:nil))
(common-lisp:deftype replica-mode () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (reserved-dbinstance (:copier common-lisp:nil)
      (:conc-name "struct-shape-reserved-dbinstance-"))
   (reserved-dbinstance-id common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (reserved-dbinstances-offering-id common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (dbinstance-class common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (start-time common-lisp:nil :type (common-lisp:or tstamp common-lisp:null))
   (duration common-lisp:nil :type (common-lisp:or integer common-lisp:null))
   (fixed-price common-lisp:nil :type (common-lisp:or double common-lisp:null))
   (usage-price common-lisp:nil :type (common-lisp:or double common-lisp:null))
   (currency-code common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (dbinstance-count common-lisp:nil :type
    (common-lisp:or integer common-lisp:null))
   (product-description common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (offering-type common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (multi-az common-lisp:nil :type (common-lisp:or boolean common-lisp:null))
   (state common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (recurring-charges common-lisp:nil :type
    (common-lisp:or recurring-charge-list common-lisp:null))
   (reserved-dbinstance-arn common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (lease-id common-lisp:nil :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'reserved-dbinstance 'make-reserved-dbinstance))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input reserved-dbinstance))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input reserved-dbinstance))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'reserved-dbinstance-id))
      (common-lisp:list
       (common-lisp:cons "ReservedDBInstanceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'reserved-dbinstances-offering-id))
      (common-lisp:list
       (common-lisp:cons "ReservedDBInstancesOfferingId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dbinstance-class))
      (common-lisp:list
       (common-lisp:cons "DBInstanceClass"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start-time))
      (common-lisp:list
       (common-lisp:cons "StartTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'duration))
      (common-lisp:list
       (common-lisp:cons "Duration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'fixed-price))
      (common-lisp:list
       (common-lisp:cons "FixedPrice"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'usage-price))
      (common-lisp:list
       (common-lisp:cons "UsagePrice"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'currency-code))
      (common-lisp:list
       (common-lisp:cons "CurrencyCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dbinstance-count))
      (common-lisp:list
       (common-lisp:cons "DBInstanceCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'product-description))
      (common-lisp:list
       (common-lisp:cons "ProductDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'offering-type))
      (common-lisp:list
       (common-lisp:cons "OfferingType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'multi-az))
      (common-lisp:list
       (common-lisp:cons "MultiAZ"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "State"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'recurring-charges))
      (common-lisp:list
       (common-lisp:cons "RecurringCharges"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'reserved-dbinstance-arn))
      (common-lisp:list
       (common-lisp:cons "ReservedDBInstanceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'lease-id))
      (common-lisp:list
       (common-lisp:cons "LeaseId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input reserved-dbinstance))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition reserved-dbinstance-already-exists-fault
     (rds-error)
     common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'reserved-dbinstance-already-exists-fault)))
(common-lisp:progn
 (common-lisp:deftype reserved-dbinstance-list ()
   '(trivial-types:proper-list reserved-dbinstance))
 (common-lisp:defun |make-reserved-dbinstance-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list reserved-dbinstance))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (reserved-dbinstance-message (:copier common-lisp:nil)
      (:conc-name "struct-shape-reserved-dbinstance-message-"))
   (marker common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (reserved-dbinstances common-lisp:nil :type
    (common-lisp:or reserved-dbinstance-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'reserved-dbinstance-message
                    'make-reserved-dbinstance-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          reserved-dbinstance-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          reserved-dbinstance-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'reserved-dbinstances))
      (common-lisp:list
       (common-lisp:cons "ReservedDBInstances"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          reserved-dbinstance-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition reserved-dbinstance-not-found-fault
     (rds-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'reserved-dbinstance-not-found-fault)))
(common-lisp:progn
 (common-lisp:define-condition reserved-dbinstance-quota-exceeded-fault
     (rds-error)
     common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'reserved-dbinstance-quota-exceeded-fault)))
(common-lisp:progn
 (common-lisp:defstruct
     (reserved-dbinstances-offering (:copier common-lisp:nil)
      (:conc-name "struct-shape-reserved-dbinstances-offering-"))
   (reserved-dbinstances-offering-id common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (dbinstance-class common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (duration common-lisp:nil :type (common-lisp:or integer common-lisp:null))
   (fixed-price common-lisp:nil :type (common-lisp:or double common-lisp:null))
   (usage-price common-lisp:nil :type (common-lisp:or double common-lisp:null))
   (currency-code common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (product-description common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (offering-type common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (multi-az common-lisp:nil :type (common-lisp:or boolean common-lisp:null))
   (recurring-charges common-lisp:nil :type
    (common-lisp:or recurring-charge-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'reserved-dbinstances-offering
                    'make-reserved-dbinstances-offering))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          reserved-dbinstances-offering))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          reserved-dbinstances-offering))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'reserved-dbinstances-offering-id))
      (common-lisp:list
       (common-lisp:cons "ReservedDBInstancesOfferingId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dbinstance-class))
      (common-lisp:list
       (common-lisp:cons "DBInstanceClass"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'duration))
      (common-lisp:list
       (common-lisp:cons "Duration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'fixed-price))
      (common-lisp:list
       (common-lisp:cons "FixedPrice"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'usage-price))
      (common-lisp:list
       (common-lisp:cons "UsagePrice"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'currency-code))
      (common-lisp:list
       (common-lisp:cons "CurrencyCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'product-description))
      (common-lisp:list
       (common-lisp:cons "ProductDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'offering-type))
      (common-lisp:list
       (common-lisp:cons "OfferingType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'multi-az))
      (common-lisp:list
       (common-lisp:cons "MultiAZ"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'recurring-charges))
      (common-lisp:list
       (common-lisp:cons "RecurringCharges"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          reserved-dbinstances-offering))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype reserved-dbinstances-offering-list ()
   '(trivial-types:proper-list reserved-dbinstances-offering))
 (common-lisp:defun |make-reserved-dbinstances-offering-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            reserved-dbinstances-offering))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (reserved-dbinstances-offering-message (:copier common-lisp:nil)
      (:conc-name "struct-shape-reserved-dbinstances-offering-message-"))
   (marker common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (reserved-dbinstances-offerings common-lisp:nil :type
    (common-lisp:or reserved-dbinstances-offering-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'reserved-dbinstances-offering-message
                    'make-reserved-dbinstances-offering-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          reserved-dbinstances-offering-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          reserved-dbinstances-offering-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'reserved-dbinstances-offerings))
      (common-lisp:list
       (common-lisp:cons "ReservedDBInstancesOfferings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          reserved-dbinstances-offering-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition reserved-dbinstances-offering-not-found-fault
     (rds-error)
     common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'reserved-dbinstances-offering-not-found-fault)))
(common-lisp:progn
 (common-lisp:defstruct
     (reset-dbcluster-parameter-group-message (:copier common-lisp:nil)
      (:conc-name "struct-shape-reset-dbcluster-parameter-group-message-"))
   (dbcluster-parameter-group-name
    (common-lisp:error ":dbcluster-parameter-group-name is required") :type
    (common-lisp:or string common-lisp:null))
   (reset-all-parameters common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (parameters common-lisp:nil :type
    (common-lisp:or parameters-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'reset-dbcluster-parameter-group-message
                    'make-reset-dbcluster-parameter-group-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          reset-dbcluster-parameter-group-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          reset-dbcluster-parameter-group-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dbcluster-parameter-group-name))
      (common-lisp:list
       (common-lisp:cons "DBClusterParameterGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'reset-all-parameters))
      (common-lisp:list
       (common-lisp:cons "ResetAllParameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'parameters))
      (common-lisp:list
       (common-lisp:cons "Parameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          reset-dbcluster-parameter-group-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (reset-dbparameter-group-message (:copier common-lisp:nil)
      (:conc-name "struct-shape-reset-dbparameter-group-message-"))
   (dbparameter-group-name
    (common-lisp:error ":dbparameter-group-name is required") :type
    (common-lisp:or string common-lisp:null))
   (reset-all-parameters common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (parameters common-lisp:nil :type
    (common-lisp:or parameters-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'reset-dbparameter-group-message
                    'make-reset-dbparameter-group-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          reset-dbparameter-group-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          reset-dbparameter-group-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dbparameter-group-name))
      (common-lisp:list
       (common-lisp:cons "DBParameterGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'reset-all-parameters))
      (common-lisp:list
       (common-lisp:cons "ResetAllParameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'parameters))
      (common-lisp:list
       (common-lisp:cons "Parameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          reset-dbparameter-group-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition resource-not-found-fault
     (rds-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'resource-not-found-fault)))
(common-lisp:progn
 (common-lisp:defstruct
     (resource-pending-maintenance-actions (:copier common-lisp:nil)
      (:conc-name "struct-shape-resource-pending-maintenance-actions-"))
   (resource-identifier common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (pending-maintenance-action-details common-lisp:nil :type
    (common-lisp:or pending-maintenance-action-details common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'resource-pending-maintenance-actions
                    'make-resource-pending-maintenance-actions))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          resource-pending-maintenance-actions))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          resource-pending-maintenance-actions))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-identifier))
      (common-lisp:list
       (common-lisp:cons "ResourceIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'pending-maintenance-action-details))
      (common-lisp:list
       (common-lisp:cons "PendingMaintenanceActionDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          resource-pending-maintenance-actions))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (restore-dbcluster-from-s3message (:copier common-lisp:nil)
      (:conc-name "struct-shape-restore-dbcluster-from-s3message-"))
   (availability-zones common-lisp:nil :type
    (common-lisp:or availability-zones common-lisp:null))
   (backup-retention-period common-lisp:nil :type
    (common-lisp:or integer-optional common-lisp:null))
   (character-set-name common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (database-name common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (dbcluster-identifier
    (common-lisp:error ":dbcluster-identifier is required") :type
    (common-lisp:or string common-lisp:null))
   (dbcluster-parameter-group-name common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (vpc-security-group-ids common-lisp:nil :type
    (common-lisp:or vpc-security-group-id-list common-lisp:null))
   (dbsubnet-group-name common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (engine (common-lisp:error ":engine is required") :type
    (common-lisp:or string common-lisp:null))
   (engine-version common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (port common-lisp:nil :type
    (common-lisp:or integer-optional common-lisp:null))
   (master-username (common-lisp:error ":master-username is required") :type
    (common-lisp:or string common-lisp:null))
   (master-user-password common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (option-group-name common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (preferred-backup-window common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (preferred-maintenance-window common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-list common-lisp:null))
   (storage-encrypted common-lisp:nil :type
    (common-lisp:or boolean-optional common-lisp:null))
   (kms-key-id common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (enable-iamdatabase-authentication common-lisp:nil :type
    (common-lisp:or boolean-optional common-lisp:null))
   (source-engine (common-lisp:error ":source-engine is required") :type
    (common-lisp:or string common-lisp:null))
   (source-engine-version
    (common-lisp:error ":source-engine-version is required") :type
    (common-lisp:or string common-lisp:null))
   (s3bucket-name (common-lisp:error ":s3bucket-name is required") :type
    (common-lisp:or string common-lisp:null))
   (s3prefix common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (s3ingestion-role-arn
    (common-lisp:error ":s3ingestion-role-arn is required") :type
    (common-lisp:or string common-lisp:null))
   (backtrack-window common-lisp:nil :type
    (common-lisp:or long-optional common-lisp:null))
   (enable-cloudwatch-logs-exports common-lisp:nil :type
    (common-lisp:or log-type-list common-lisp:null))
   (deletion-protection common-lisp:nil :type
    (common-lisp:or boolean-optional common-lisp:null))
   (copy-tags-to-snapshot common-lisp:nil :type
    (common-lisp:or boolean-optional common-lisp:null))
   (domain common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (domain-iamrole-name common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (serverless-v2scaling-configuration common-lisp:nil :type
    (common-lisp:or serverless-v2scaling-configuration common-lisp:null))
   (network-type common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (manage-master-user-password common-lisp:nil :type
    (common-lisp:or boolean-optional common-lisp:null))
   (master-user-secret-kms-key-id common-lisp:nil :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'restore-dbcluster-from-s3message
                    'make-restore-dbcluster-from-s3message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          restore-dbcluster-from-s3message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          restore-dbcluster-from-s3message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'availability-zones))
      (common-lisp:list
       (common-lisp:cons "AvailabilityZones"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'backup-retention-period))
      (common-lisp:list
       (common-lisp:cons "BackupRetentionPeriod"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'character-set-name))
      (common-lisp:list
       (common-lisp:cons "CharacterSetName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'database-name))
      (common-lisp:list
       (common-lisp:cons "DatabaseName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dbcluster-identifier))
      (common-lisp:list
       (common-lisp:cons "DBClusterIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dbcluster-parameter-group-name))
      (common-lisp:list
       (common-lisp:cons "DBClusterParameterGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'vpc-security-group-ids))
      (common-lisp:list
       (common-lisp:cons "VpcSecurityGroupIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dbsubnet-group-name))
      (common-lisp:list
       (common-lisp:cons "DBSubnetGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'engine))
      (common-lisp:list
       (common-lisp:cons "Engine"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'engine-version))
      (common-lisp:list
       (common-lisp:cons "EngineVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'port))
      (common-lisp:list
       (common-lisp:cons "Port"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'master-username))
      (common-lisp:list
       (common-lisp:cons "MasterUsername"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'master-user-password))
      (common-lisp:list
       (common-lisp:cons "MasterUserPassword"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'option-group-name))
      (common-lisp:list
       (common-lisp:cons "OptionGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'preferred-backup-window))
      (common-lisp:list
       (common-lisp:cons "PreferredBackupWindow"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'preferred-maintenance-window))
      (common-lisp:list
       (common-lisp:cons "PreferredMaintenanceWindow"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'storage-encrypted))
      (common-lisp:list
       (common-lisp:cons "StorageEncrypted"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kms-key-id))
      (common-lisp:list
       (common-lisp:cons "KmsKeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'enable-iamdatabase-authentication))
      (common-lisp:list
       (common-lisp:cons "EnableIAMDatabaseAuthentication"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-engine))
      (common-lisp:list
       (common-lisp:cons "SourceEngine"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'source-engine-version))
      (common-lisp:list
       (common-lisp:cons "SourceEngineVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3bucket-name))
      (common-lisp:list
       (common-lisp:cons "S3BucketName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3prefix))
      (common-lisp:list
       (common-lisp:cons "S3Prefix"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           's3ingestion-role-arn))
      (common-lisp:list
       (common-lisp:cons "S3IngestionRoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'backtrack-window))
      (common-lisp:list
       (common-lisp:cons "BacktrackWindow"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'enable-cloudwatch-logs-exports))
      (common-lisp:list
       (common-lisp:cons "EnableCloudwatchLogsExports"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'deletion-protection))
      (common-lisp:list
       (common-lisp:cons "DeletionProtection"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'copy-tags-to-snapshot))
      (common-lisp:list
       (common-lisp:cons "CopyTagsToSnapshot"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain))
      (common-lisp:list
       (common-lisp:cons "Domain"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-iamrole-name))
      (common-lisp:list
       (common-lisp:cons "DomainIAMRoleName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'serverless-v2scaling-configuration))
      (common-lisp:list
       (common-lisp:cons "ServerlessV2ScalingConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'network-type))
      (common-lisp:list
       (common-lisp:cons "NetworkType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'manage-master-user-password))
      (common-lisp:list
       (common-lisp:cons "ManageMasterUserPassword"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'master-user-secret-kms-key-id))
      (common-lisp:list
       (common-lisp:cons "MasterUserSecretKmsKeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          restore-dbcluster-from-s3message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (restore-dbcluster-from-s3result (:copier common-lisp:nil)
      (:conc-name "struct-shape-restore-dbcluster-from-s3result-"))
   (dbcluster common-lisp:nil :type
    (common-lisp:or dbcluster common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'restore-dbcluster-from-s3result
                    'make-restore-dbcluster-from-s3result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          restore-dbcluster-from-s3result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          restore-dbcluster-from-s3result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dbcluster))
      (common-lisp:list
       (common-lisp:cons "DBCluster"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          restore-dbcluster-from-s3result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (restore-dbcluster-from-snapshot-message (:copier common-lisp:nil)
      (:conc-name "struct-shape-restore-dbcluster-from-snapshot-message-"))
   (availability-zones common-lisp:nil :type
    (common-lisp:or availability-zones common-lisp:null))
   (dbcluster-identifier
    (common-lisp:error ":dbcluster-identifier is required") :type
    (common-lisp:or string common-lisp:null))
   (snapshot-identifier (common-lisp:error ":snapshot-identifier is required")
    :type (common-lisp:or string common-lisp:null))
   (engine (common-lisp:error ":engine is required") :type
    (common-lisp:or string common-lisp:null))
   (engine-version common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (port common-lisp:nil :type
    (common-lisp:or integer-optional common-lisp:null))
   (dbsubnet-group-name common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (database-name common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (option-group-name common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (vpc-security-group-ids common-lisp:nil :type
    (common-lisp:or vpc-security-group-id-list common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-list common-lisp:null))
   (kms-key-id common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (enable-iamdatabase-authentication common-lisp:nil :type
    (common-lisp:or boolean-optional common-lisp:null))
   (backtrack-window common-lisp:nil :type
    (common-lisp:or long-optional common-lisp:null))
   (enable-cloudwatch-logs-exports common-lisp:nil :type
    (common-lisp:or log-type-list common-lisp:null))
   (engine-mode common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (scaling-configuration common-lisp:nil :type
    (common-lisp:or scaling-configuration common-lisp:null))
   (dbcluster-parameter-group-name common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (deletion-protection common-lisp:nil :type
    (common-lisp:or boolean-optional common-lisp:null))
   (copy-tags-to-snapshot common-lisp:nil :type
    (common-lisp:or boolean-optional common-lisp:null))
   (domain common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (domain-iamrole-name common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (dbcluster-instance-class common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (storage-type common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (iops common-lisp:nil :type
    (common-lisp:or integer-optional common-lisp:null))
   (publicly-accessible common-lisp:nil :type
    (common-lisp:or boolean-optional common-lisp:null))
   (serverless-v2scaling-configuration common-lisp:nil :type
    (common-lisp:or serverless-v2scaling-configuration common-lisp:null))
   (network-type common-lisp:nil :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'restore-dbcluster-from-snapshot-message
                    'make-restore-dbcluster-from-snapshot-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          restore-dbcluster-from-snapshot-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          restore-dbcluster-from-snapshot-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'availability-zones))
      (common-lisp:list
       (common-lisp:cons "AvailabilityZones"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dbcluster-identifier))
      (common-lisp:list
       (common-lisp:cons "DBClusterIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'snapshot-identifier))
      (common-lisp:list
       (common-lisp:cons "SnapshotIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'engine))
      (common-lisp:list
       (common-lisp:cons "Engine"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'engine-version))
      (common-lisp:list
       (common-lisp:cons "EngineVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'port))
      (common-lisp:list
       (common-lisp:cons "Port"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dbsubnet-group-name))
      (common-lisp:list
       (common-lisp:cons "DBSubnetGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'database-name))
      (common-lisp:list
       (common-lisp:cons "DatabaseName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'option-group-name))
      (common-lisp:list
       (common-lisp:cons "OptionGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'vpc-security-group-ids))
      (common-lisp:list
       (common-lisp:cons "VpcSecurityGroupIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kms-key-id))
      (common-lisp:list
       (common-lisp:cons "KmsKeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'enable-iamdatabase-authentication))
      (common-lisp:list
       (common-lisp:cons "EnableIAMDatabaseAuthentication"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'backtrack-window))
      (common-lisp:list
       (common-lisp:cons "BacktrackWindow"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'enable-cloudwatch-logs-exports))
      (common-lisp:list
       (common-lisp:cons "EnableCloudwatchLogsExports"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'engine-mode))
      (common-lisp:list
       (common-lisp:cons "EngineMode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'scaling-configuration))
      (common-lisp:list
       (common-lisp:cons "ScalingConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dbcluster-parameter-group-name))
      (common-lisp:list
       (common-lisp:cons "DBClusterParameterGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'deletion-protection))
      (common-lisp:list
       (common-lisp:cons "DeletionProtection"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'copy-tags-to-snapshot))
      (common-lisp:list
       (common-lisp:cons "CopyTagsToSnapshot"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain))
      (common-lisp:list
       (common-lisp:cons "Domain"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-iamrole-name))
      (common-lisp:list
       (common-lisp:cons "DomainIAMRoleName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dbcluster-instance-class))
      (common-lisp:list
       (common-lisp:cons "DBClusterInstanceClass"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'storage-type))
      (common-lisp:list
       (common-lisp:cons "StorageType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'iops))
      (common-lisp:list
       (common-lisp:cons "Iops"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'publicly-accessible))
      (common-lisp:list
       (common-lisp:cons "PubliclyAccessible"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'serverless-v2scaling-configuration))
      (common-lisp:list
       (common-lisp:cons "ServerlessV2ScalingConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'network-type))
      (common-lisp:list
       (common-lisp:cons "NetworkType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          restore-dbcluster-from-snapshot-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (restore-dbcluster-from-snapshot-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-restore-dbcluster-from-snapshot-result-"))
   (dbcluster common-lisp:nil :type
    (common-lisp:or dbcluster common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'restore-dbcluster-from-snapshot-result
                    'make-restore-dbcluster-from-snapshot-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          restore-dbcluster-from-snapshot-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          restore-dbcluster-from-snapshot-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dbcluster))
      (common-lisp:list
       (common-lisp:cons "DBCluster"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          restore-dbcluster-from-snapshot-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (restore-dbcluster-to-point-in-time-message (:copier common-lisp:nil)
      (:conc-name "struct-shape-restore-dbcluster-to-point-in-time-message-"))
   (dbcluster-identifier
    (common-lisp:error ":dbcluster-identifier is required") :type
    (common-lisp:or string common-lisp:null))
   (restore-type common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (source-dbcluster-identifier
    (common-lisp:error ":source-dbcluster-identifier is required") :type
    (common-lisp:or string common-lisp:null))
   (restore-to-time common-lisp:nil :type
    (common-lisp:or tstamp common-lisp:null))
   (use-latest-restorable-time common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (port common-lisp:nil :type
    (common-lisp:or integer-optional common-lisp:null))
   (dbsubnet-group-name common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (option-group-name common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (vpc-security-group-ids common-lisp:nil :type
    (common-lisp:or vpc-security-group-id-list common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-list common-lisp:null))
   (kms-key-id common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (enable-iamdatabase-authentication common-lisp:nil :type
    (common-lisp:or boolean-optional common-lisp:null))
   (backtrack-window common-lisp:nil :type
    (common-lisp:or long-optional common-lisp:null))
   (enable-cloudwatch-logs-exports common-lisp:nil :type
    (common-lisp:or log-type-list common-lisp:null))
   (dbcluster-parameter-group-name common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (deletion-protection common-lisp:nil :type
    (common-lisp:or boolean-optional common-lisp:null))
   (copy-tags-to-snapshot common-lisp:nil :type
    (common-lisp:or boolean-optional common-lisp:null))
   (domain common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (domain-iamrole-name common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (scaling-configuration common-lisp:nil :type
    (common-lisp:or scaling-configuration common-lisp:null))
   (engine-mode common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (dbcluster-instance-class common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (storage-type common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (publicly-accessible common-lisp:nil :type
    (common-lisp:or boolean-optional common-lisp:null))
   (iops common-lisp:nil :type
    (common-lisp:or integer-optional common-lisp:null))
   (serverless-v2scaling-configuration common-lisp:nil :type
    (common-lisp:or serverless-v2scaling-configuration common-lisp:null))
   (network-type common-lisp:nil :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'restore-dbcluster-to-point-in-time-message
                    'make-restore-dbcluster-to-point-in-time-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          restore-dbcluster-to-point-in-time-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          restore-dbcluster-to-point-in-time-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dbcluster-identifier))
      (common-lisp:list
       (common-lisp:cons "DBClusterIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'restore-type))
      (common-lisp:list
       (common-lisp:cons "RestoreType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'source-dbcluster-identifier))
      (common-lisp:list
       (common-lisp:cons "SourceDBClusterIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'restore-to-time))
      (common-lisp:list
       (common-lisp:cons "RestoreToTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'use-latest-restorable-time))
      (common-lisp:list
       (common-lisp:cons "UseLatestRestorableTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'port))
      (common-lisp:list
       (common-lisp:cons "Port"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dbsubnet-group-name))
      (common-lisp:list
       (common-lisp:cons "DBSubnetGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'option-group-name))
      (common-lisp:list
       (common-lisp:cons "OptionGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'vpc-security-group-ids))
      (common-lisp:list
       (common-lisp:cons "VpcSecurityGroupIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kms-key-id))
      (common-lisp:list
       (common-lisp:cons "KmsKeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'enable-iamdatabase-authentication))
      (common-lisp:list
       (common-lisp:cons "EnableIAMDatabaseAuthentication"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'backtrack-window))
      (common-lisp:list
       (common-lisp:cons "BacktrackWindow"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'enable-cloudwatch-logs-exports))
      (common-lisp:list
       (common-lisp:cons "EnableCloudwatchLogsExports"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dbcluster-parameter-group-name))
      (common-lisp:list
       (common-lisp:cons "DBClusterParameterGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'deletion-protection))
      (common-lisp:list
       (common-lisp:cons "DeletionProtection"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'copy-tags-to-snapshot))
      (common-lisp:list
       (common-lisp:cons "CopyTagsToSnapshot"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain))
      (common-lisp:list
       (common-lisp:cons "Domain"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-iamrole-name))
      (common-lisp:list
       (common-lisp:cons "DomainIAMRoleName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'scaling-configuration))
      (common-lisp:list
       (common-lisp:cons "ScalingConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'engine-mode))
      (common-lisp:list
       (common-lisp:cons "EngineMode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dbcluster-instance-class))
      (common-lisp:list
       (common-lisp:cons "DBClusterInstanceClass"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'storage-type))
      (common-lisp:list
       (common-lisp:cons "StorageType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'publicly-accessible))
      (common-lisp:list
       (common-lisp:cons "PubliclyAccessible"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'iops))
      (common-lisp:list
       (common-lisp:cons "Iops"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'serverless-v2scaling-configuration))
      (common-lisp:list
       (common-lisp:cons "ServerlessV2ScalingConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'network-type))
      (common-lisp:list
       (common-lisp:cons "NetworkType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          restore-dbcluster-to-point-in-time-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (restore-dbcluster-to-point-in-time-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-restore-dbcluster-to-point-in-time-result-"))
   (dbcluster common-lisp:nil :type
    (common-lisp:or dbcluster common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'restore-dbcluster-to-point-in-time-result
                    'make-restore-dbcluster-to-point-in-time-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          restore-dbcluster-to-point-in-time-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          restore-dbcluster-to-point-in-time-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dbcluster))
      (common-lisp:list
       (common-lisp:cons "DBCluster"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          restore-dbcluster-to-point-in-time-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (restore-dbinstance-from-dbsnapshot-message (:copier common-lisp:nil)
      (:conc-name "struct-shape-restore-dbinstance-from-dbsnapshot-message-"))
   (dbinstance-identifier
    (common-lisp:error ":dbinstance-identifier is required") :type
    (common-lisp:or string common-lisp:null))
   (dbsnapshot-identifier common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (dbinstance-class common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (port common-lisp:nil :type
    (common-lisp:or integer-optional common-lisp:null))
   (availability-zone common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (dbsubnet-group-name common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (multi-az common-lisp:nil :type
    (common-lisp:or boolean-optional common-lisp:null))
   (publicly-accessible common-lisp:nil :type
    (common-lisp:or boolean-optional common-lisp:null))
   (auto-minor-version-upgrade common-lisp:nil :type
    (common-lisp:or boolean-optional common-lisp:null))
   (license-model common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (dbname common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (engine common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (iops common-lisp:nil :type
    (common-lisp:or integer-optional common-lisp:null))
   (option-group-name common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-list common-lisp:null))
   (storage-type common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (tde-credential-arn common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (tde-credential-password common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (vpc-security-group-ids common-lisp:nil :type
    (common-lisp:or vpc-security-group-id-list common-lisp:null))
   (domain common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (copy-tags-to-snapshot common-lisp:nil :type
    (common-lisp:or boolean-optional common-lisp:null))
   (domain-iamrole-name common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (enable-iamdatabase-authentication common-lisp:nil :type
    (common-lisp:or boolean-optional common-lisp:null))
   (enable-cloudwatch-logs-exports common-lisp:nil :type
    (common-lisp:or log-type-list common-lisp:null))
   (processor-features common-lisp:nil :type
    (common-lisp:or processor-feature-list common-lisp:null))
   (use-default-processor-features common-lisp:nil :type
    (common-lisp:or boolean-optional common-lisp:null))
   (dbparameter-group-name common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (deletion-protection common-lisp:nil :type
    (common-lisp:or boolean-optional common-lisp:null))
   (enable-customer-owned-ip common-lisp:nil :type
    (common-lisp:or boolean-optional common-lisp:null))
   (custom-iam-instance-profile common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (backup-target common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (network-type common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (storage-throughput common-lisp:nil :type
    (common-lisp:or integer-optional common-lisp:null))
   (dbcluster-snapshot-identifier common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (allocated-storage common-lisp:nil :type
    (common-lisp:or integer-optional common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'restore-dbinstance-from-dbsnapshot-message
                    'make-restore-dbinstance-from-dbsnapshot-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          restore-dbinstance-from-dbsnapshot-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          restore-dbinstance-from-dbsnapshot-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dbinstance-identifier))
      (common-lisp:list
       (common-lisp:cons "DBInstanceIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dbsnapshot-identifier))
      (common-lisp:list
       (common-lisp:cons "DBSnapshotIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dbinstance-class))
      (common-lisp:list
       (common-lisp:cons "DBInstanceClass"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'port))
      (common-lisp:list
       (common-lisp:cons "Port"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'availability-zone))
      (common-lisp:list
       (common-lisp:cons "AvailabilityZone"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dbsubnet-group-name))
      (common-lisp:list
       (common-lisp:cons "DBSubnetGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'multi-az))
      (common-lisp:list
       (common-lisp:cons "MultiAZ"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'publicly-accessible))
      (common-lisp:list
       (common-lisp:cons "PubliclyAccessible"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'auto-minor-version-upgrade))
      (common-lisp:list
       (common-lisp:cons "AutoMinorVersionUpgrade"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'license-model))
      (common-lisp:list
       (common-lisp:cons "LicenseModel"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dbname))
      (common-lisp:list
       (common-lisp:cons "DBName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'engine))
      (common-lisp:list
       (common-lisp:cons "Engine"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'iops))
      (common-lisp:list
       (common-lisp:cons "Iops"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'option-group-name))
      (common-lisp:list
       (common-lisp:cons "OptionGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'storage-type))
      (common-lisp:list
       (common-lisp:cons "StorageType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tde-credential-arn))
      (common-lisp:list
       (common-lisp:cons "TdeCredentialArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'tde-credential-password))
      (common-lisp:list
       (common-lisp:cons "TdeCredentialPassword"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'vpc-security-group-ids))
      (common-lisp:list
       (common-lisp:cons "VpcSecurityGroupIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain))
      (common-lisp:list
       (common-lisp:cons "Domain"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'copy-tags-to-snapshot))
      (common-lisp:list
       (common-lisp:cons "CopyTagsToSnapshot"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-iamrole-name))
      (common-lisp:list
       (common-lisp:cons "DomainIAMRoleName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'enable-iamdatabase-authentication))
      (common-lisp:list
       (common-lisp:cons "EnableIAMDatabaseAuthentication"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'enable-cloudwatch-logs-exports))
      (common-lisp:list
       (common-lisp:cons "EnableCloudwatchLogsExports"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'processor-features))
      (common-lisp:list
       (common-lisp:cons "ProcessorFeatures"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'use-default-processor-features))
      (common-lisp:list
       (common-lisp:cons "UseDefaultProcessorFeatures"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dbparameter-group-name))
      (common-lisp:list
       (common-lisp:cons "DBParameterGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'deletion-protection))
      (common-lisp:list
       (common-lisp:cons "DeletionProtection"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'enable-customer-owned-ip))
      (common-lisp:list
       (common-lisp:cons "EnableCustomerOwnedIp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'custom-iam-instance-profile))
      (common-lisp:list
       (common-lisp:cons "CustomIamInstanceProfile"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'backup-target))
      (common-lisp:list
       (common-lisp:cons "BackupTarget"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'network-type))
      (common-lisp:list
       (common-lisp:cons "NetworkType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'storage-throughput))
      (common-lisp:list
       (common-lisp:cons "StorageThroughput"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dbcluster-snapshot-identifier))
      (common-lisp:list
       (common-lisp:cons "DBClusterSnapshotIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'allocated-storage))
      (common-lisp:list
       (common-lisp:cons "AllocatedStorage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          restore-dbinstance-from-dbsnapshot-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (restore-dbinstance-from-dbsnapshot-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-restore-dbinstance-from-dbsnapshot-result-"))
   (dbinstance common-lisp:nil :type
    (common-lisp:or dbinstance common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'restore-dbinstance-from-dbsnapshot-result
                    'make-restore-dbinstance-from-dbsnapshot-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          restore-dbinstance-from-dbsnapshot-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          restore-dbinstance-from-dbsnapshot-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dbinstance))
      (common-lisp:list
       (common-lisp:cons "DBInstance"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          restore-dbinstance-from-dbsnapshot-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (restore-dbinstance-from-s3message (:copier common-lisp:nil)
      (:conc-name "struct-shape-restore-dbinstance-from-s3message-"))
   (dbname common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (dbinstance-identifier
    (common-lisp:error ":dbinstance-identifier is required") :type
    (common-lisp:or string common-lisp:null))
   (allocated-storage common-lisp:nil :type
    (common-lisp:or integer-optional common-lisp:null))
   (dbinstance-class (common-lisp:error ":dbinstance-class is required") :type
    (common-lisp:or string common-lisp:null))
   (engine (common-lisp:error ":engine is required") :type
    (common-lisp:or string common-lisp:null))
   (master-username common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (master-user-password common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (dbsecurity-groups common-lisp:nil :type
    (common-lisp:or dbsecurity-group-name-list common-lisp:null))
   (vpc-security-group-ids common-lisp:nil :type
    (common-lisp:or vpc-security-group-id-list common-lisp:null))
   (availability-zone common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (dbsubnet-group-name common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (preferred-maintenance-window common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (dbparameter-group-name common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (backup-retention-period common-lisp:nil :type
    (common-lisp:or integer-optional common-lisp:null))
   (preferred-backup-window common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (port common-lisp:nil :type
    (common-lisp:or integer-optional common-lisp:null))
   (multi-az common-lisp:nil :type
    (common-lisp:or boolean-optional common-lisp:null))
   (engine-version common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (auto-minor-version-upgrade common-lisp:nil :type
    (common-lisp:or boolean-optional common-lisp:null))
   (license-model common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (iops common-lisp:nil :type
    (common-lisp:or integer-optional common-lisp:null))
   (option-group-name common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (publicly-accessible common-lisp:nil :type
    (common-lisp:or boolean-optional common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-list common-lisp:null))
   (storage-type common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (storage-encrypted common-lisp:nil :type
    (common-lisp:or boolean-optional common-lisp:null))
   (kms-key-id common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (copy-tags-to-snapshot common-lisp:nil :type
    (common-lisp:or boolean-optional common-lisp:null))
   (monitoring-interval common-lisp:nil :type
    (common-lisp:or integer-optional common-lisp:null))
   (monitoring-role-arn common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (enable-iamdatabase-authentication common-lisp:nil :type
    (common-lisp:or boolean-optional common-lisp:null))
   (source-engine (common-lisp:error ":source-engine is required") :type
    (common-lisp:or string common-lisp:null))
   (source-engine-version
    (common-lisp:error ":source-engine-version is required") :type
    (common-lisp:or string common-lisp:null))
   (s3bucket-name (common-lisp:error ":s3bucket-name is required") :type
    (common-lisp:or string common-lisp:null))
   (s3prefix common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (s3ingestion-role-arn
    (common-lisp:error ":s3ingestion-role-arn is required") :type
    (common-lisp:or string common-lisp:null))
   (enable-performance-insights common-lisp:nil :type
    (common-lisp:or boolean-optional common-lisp:null))
   (performance-insights-kmskey-id common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (performance-insights-retention-period common-lisp:nil :type
    (common-lisp:or integer-optional common-lisp:null))
   (enable-cloudwatch-logs-exports common-lisp:nil :type
    (common-lisp:or log-type-list common-lisp:null))
   (processor-features common-lisp:nil :type
    (common-lisp:or processor-feature-list common-lisp:null))
   (use-default-processor-features common-lisp:nil :type
    (common-lisp:or boolean-optional common-lisp:null))
   (deletion-protection common-lisp:nil :type
    (common-lisp:or boolean-optional common-lisp:null))
   (max-allocated-storage common-lisp:nil :type
    (common-lisp:or integer-optional common-lisp:null))
   (network-type common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (storage-throughput common-lisp:nil :type
    (common-lisp:or integer-optional common-lisp:null))
   (manage-master-user-password common-lisp:nil :type
    (common-lisp:or boolean-optional common-lisp:null))
   (master-user-secret-kms-key-id common-lisp:nil :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'restore-dbinstance-from-s3message
                    'make-restore-dbinstance-from-s3message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          restore-dbinstance-from-s3message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          restore-dbinstance-from-s3message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dbname))
      (common-lisp:list
       (common-lisp:cons "DBName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dbinstance-identifier))
      (common-lisp:list
       (common-lisp:cons "DBInstanceIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'allocated-storage))
      (common-lisp:list
       (common-lisp:cons "AllocatedStorage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dbinstance-class))
      (common-lisp:list
       (common-lisp:cons "DBInstanceClass"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'engine))
      (common-lisp:list
       (common-lisp:cons "Engine"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'master-username))
      (common-lisp:list
       (common-lisp:cons "MasterUsername"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'master-user-password))
      (common-lisp:list
       (common-lisp:cons "MasterUserPassword"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dbsecurity-groups))
      (common-lisp:list
       (common-lisp:cons "DBSecurityGroups"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'vpc-security-group-ids))
      (common-lisp:list
       (common-lisp:cons "VpcSecurityGroupIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'availability-zone))
      (common-lisp:list
       (common-lisp:cons "AvailabilityZone"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dbsubnet-group-name))
      (common-lisp:list
       (common-lisp:cons "DBSubnetGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'preferred-maintenance-window))
      (common-lisp:list
       (common-lisp:cons "PreferredMaintenanceWindow"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dbparameter-group-name))
      (common-lisp:list
       (common-lisp:cons "DBParameterGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'backup-retention-period))
      (common-lisp:list
       (common-lisp:cons "BackupRetentionPeriod"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'preferred-backup-window))
      (common-lisp:list
       (common-lisp:cons "PreferredBackupWindow"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'port))
      (common-lisp:list
       (common-lisp:cons "Port"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'multi-az))
      (common-lisp:list
       (common-lisp:cons "MultiAZ"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'engine-version))
      (common-lisp:list
       (common-lisp:cons "EngineVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'auto-minor-version-upgrade))
      (common-lisp:list
       (common-lisp:cons "AutoMinorVersionUpgrade"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'license-model))
      (common-lisp:list
       (common-lisp:cons "LicenseModel"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'iops))
      (common-lisp:list
       (common-lisp:cons "Iops"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'option-group-name))
      (common-lisp:list
       (common-lisp:cons "OptionGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'publicly-accessible))
      (common-lisp:list
       (common-lisp:cons "PubliclyAccessible"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'storage-type))
      (common-lisp:list
       (common-lisp:cons "StorageType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'storage-encrypted))
      (common-lisp:list
       (common-lisp:cons "StorageEncrypted"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kms-key-id))
      (common-lisp:list
       (common-lisp:cons "KmsKeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'copy-tags-to-snapshot))
      (common-lisp:list
       (common-lisp:cons "CopyTagsToSnapshot"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'monitoring-interval))
      (common-lisp:list
       (common-lisp:cons "MonitoringInterval"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'monitoring-role-arn))
      (common-lisp:list
       (common-lisp:cons "MonitoringRoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'enable-iamdatabase-authentication))
      (common-lisp:list
       (common-lisp:cons "EnableIAMDatabaseAuthentication"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-engine))
      (common-lisp:list
       (common-lisp:cons "SourceEngine"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'source-engine-version))
      (common-lisp:list
       (common-lisp:cons "SourceEngineVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3bucket-name))
      (common-lisp:list
       (common-lisp:cons "S3BucketName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3prefix))
      (common-lisp:list
       (common-lisp:cons "S3Prefix"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           's3ingestion-role-arn))
      (common-lisp:list
       (common-lisp:cons "S3IngestionRoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'enable-performance-insights))
      (common-lisp:list
       (common-lisp:cons "EnablePerformanceInsights"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'performance-insights-kmskey-id))
      (common-lisp:list
       (common-lisp:cons "PerformanceInsightsKMSKeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'performance-insights-retention-period))
      (common-lisp:list
       (common-lisp:cons "PerformanceInsightsRetentionPeriod"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'enable-cloudwatch-logs-exports))
      (common-lisp:list
       (common-lisp:cons "EnableCloudwatchLogsExports"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'processor-features))
      (common-lisp:list
       (common-lisp:cons "ProcessorFeatures"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'use-default-processor-features))
      (common-lisp:list
       (common-lisp:cons "UseDefaultProcessorFeatures"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'deletion-protection))
      (common-lisp:list
       (common-lisp:cons "DeletionProtection"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'max-allocated-storage))
      (common-lisp:list
       (common-lisp:cons "MaxAllocatedStorage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'network-type))
      (common-lisp:list
       (common-lisp:cons "NetworkType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'storage-throughput))
      (common-lisp:list
       (common-lisp:cons "StorageThroughput"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'manage-master-user-password))
      (common-lisp:list
       (common-lisp:cons "ManageMasterUserPassword"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'master-user-secret-kms-key-id))
      (common-lisp:list
       (common-lisp:cons "MasterUserSecretKmsKeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          restore-dbinstance-from-s3message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (restore-dbinstance-from-s3result (:copier common-lisp:nil)
      (:conc-name "struct-shape-restore-dbinstance-from-s3result-"))
   (dbinstance common-lisp:nil :type
    (common-lisp:or dbinstance common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'restore-dbinstance-from-s3result
                    'make-restore-dbinstance-from-s3result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          restore-dbinstance-from-s3result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          restore-dbinstance-from-s3result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dbinstance))
      (common-lisp:list
       (common-lisp:cons "DBInstance"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          restore-dbinstance-from-s3result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (restore-dbinstance-to-point-in-time-message (:copier common-lisp:nil)
      (:conc-name "struct-shape-restore-dbinstance-to-point-in-time-message-"))
   (source-dbinstance-identifier common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (target-dbinstance-identifier
    (common-lisp:error ":target-dbinstance-identifier is required") :type
    (common-lisp:or string common-lisp:null))
   (restore-time common-lisp:nil :type
    (common-lisp:or tstamp common-lisp:null))
   (use-latest-restorable-time common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (dbinstance-class common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (port common-lisp:nil :type
    (common-lisp:or integer-optional common-lisp:null))
   (availability-zone common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (dbsubnet-group-name common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (multi-az common-lisp:nil :type
    (common-lisp:or boolean-optional common-lisp:null))
   (publicly-accessible common-lisp:nil :type
    (common-lisp:or boolean-optional common-lisp:null))
   (auto-minor-version-upgrade common-lisp:nil :type
    (common-lisp:or boolean-optional common-lisp:null))
   (license-model common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (dbname common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (engine common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (iops common-lisp:nil :type
    (common-lisp:or integer-optional common-lisp:null))
   (option-group-name common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (copy-tags-to-snapshot common-lisp:nil :type
    (common-lisp:or boolean-optional common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-list common-lisp:null))
   (storage-type common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (tde-credential-arn common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (tde-credential-password common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (vpc-security-group-ids common-lisp:nil :type
    (common-lisp:or vpc-security-group-id-list common-lisp:null))
   (domain common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (domain-iamrole-name common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (enable-iamdatabase-authentication common-lisp:nil :type
    (common-lisp:or boolean-optional common-lisp:null))
   (enable-cloudwatch-logs-exports common-lisp:nil :type
    (common-lisp:or log-type-list common-lisp:null))
   (processor-features common-lisp:nil :type
    (common-lisp:or processor-feature-list common-lisp:null))
   (use-default-processor-features common-lisp:nil :type
    (common-lisp:or boolean-optional common-lisp:null))
   (dbparameter-group-name common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (deletion-protection common-lisp:nil :type
    (common-lisp:or boolean-optional common-lisp:null))
   (source-dbi-resource-id common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (max-allocated-storage common-lisp:nil :type
    (common-lisp:or integer-optional common-lisp:null))
   (source-dbinstance-automated-backups-arn common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (enable-customer-owned-ip common-lisp:nil :type
    (common-lisp:or boolean-optional common-lisp:null))
   (custom-iam-instance-profile common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (backup-target common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (network-type common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (storage-throughput common-lisp:nil :type
    (common-lisp:or integer-optional common-lisp:null))
   (allocated-storage common-lisp:nil :type
    (common-lisp:or integer-optional common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'restore-dbinstance-to-point-in-time-message
                    'make-restore-dbinstance-to-point-in-time-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          restore-dbinstance-to-point-in-time-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          restore-dbinstance-to-point-in-time-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'source-dbinstance-identifier))
      (common-lisp:list
       (common-lisp:cons "SourceDBInstanceIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'target-dbinstance-identifier))
      (common-lisp:list
       (common-lisp:cons "TargetDBInstanceIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'restore-time))
      (common-lisp:list
       (common-lisp:cons "RestoreTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'use-latest-restorable-time))
      (common-lisp:list
       (common-lisp:cons "UseLatestRestorableTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dbinstance-class))
      (common-lisp:list
       (common-lisp:cons "DBInstanceClass"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'port))
      (common-lisp:list
       (common-lisp:cons "Port"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'availability-zone))
      (common-lisp:list
       (common-lisp:cons "AvailabilityZone"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dbsubnet-group-name))
      (common-lisp:list
       (common-lisp:cons "DBSubnetGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'multi-az))
      (common-lisp:list
       (common-lisp:cons "MultiAZ"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'publicly-accessible))
      (common-lisp:list
       (common-lisp:cons "PubliclyAccessible"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'auto-minor-version-upgrade))
      (common-lisp:list
       (common-lisp:cons "AutoMinorVersionUpgrade"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'license-model))
      (common-lisp:list
       (common-lisp:cons "LicenseModel"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dbname))
      (common-lisp:list
       (common-lisp:cons "DBName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'engine))
      (common-lisp:list
       (common-lisp:cons "Engine"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'iops))
      (common-lisp:list
       (common-lisp:cons "Iops"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'option-group-name))
      (common-lisp:list
       (common-lisp:cons "OptionGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'copy-tags-to-snapshot))
      (common-lisp:list
       (common-lisp:cons "CopyTagsToSnapshot"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'storage-type))
      (common-lisp:list
       (common-lisp:cons "StorageType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tde-credential-arn))
      (common-lisp:list
       (common-lisp:cons "TdeCredentialArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'tde-credential-password))
      (common-lisp:list
       (common-lisp:cons "TdeCredentialPassword"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'vpc-security-group-ids))
      (common-lisp:list
       (common-lisp:cons "VpcSecurityGroupIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain))
      (common-lisp:list
       (common-lisp:cons "Domain"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-iamrole-name))
      (common-lisp:list
       (common-lisp:cons "DomainIAMRoleName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'enable-iamdatabase-authentication))
      (common-lisp:list
       (common-lisp:cons "EnableIAMDatabaseAuthentication"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'enable-cloudwatch-logs-exports))
      (common-lisp:list
       (common-lisp:cons "EnableCloudwatchLogsExports"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'processor-features))
      (common-lisp:list
       (common-lisp:cons "ProcessorFeatures"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'use-default-processor-features))
      (common-lisp:list
       (common-lisp:cons "UseDefaultProcessorFeatures"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dbparameter-group-name))
      (common-lisp:list
       (common-lisp:cons "DBParameterGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'deletion-protection))
      (common-lisp:list
       (common-lisp:cons "DeletionProtection"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'source-dbi-resource-id))
      (common-lisp:list
       (common-lisp:cons "SourceDbiResourceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'max-allocated-storage))
      (common-lisp:list
       (common-lisp:cons "MaxAllocatedStorage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'source-dbinstance-automated-backups-arn))
      (common-lisp:list
       (common-lisp:cons "SourceDBInstanceAutomatedBackupsArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'enable-customer-owned-ip))
      (common-lisp:list
       (common-lisp:cons "EnableCustomerOwnedIp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'custom-iam-instance-profile))
      (common-lisp:list
       (common-lisp:cons "CustomIamInstanceProfile"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'backup-target))
      (common-lisp:list
       (common-lisp:cons "BackupTarget"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'network-type))
      (common-lisp:list
       (common-lisp:cons "NetworkType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'storage-throughput))
      (common-lisp:list
       (common-lisp:cons "StorageThroughput"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'allocated-storage))
      (common-lisp:list
       (common-lisp:cons "AllocatedStorage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          restore-dbinstance-to-point-in-time-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (restore-dbinstance-to-point-in-time-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-restore-dbinstance-to-point-in-time-result-"))
   (dbinstance common-lisp:nil :type
    (common-lisp:or dbinstance common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'restore-dbinstance-to-point-in-time-result
                    'make-restore-dbinstance-to-point-in-time-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          restore-dbinstance-to-point-in-time-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          restore-dbinstance-to-point-in-time-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dbinstance))
      (common-lisp:list
       (common-lisp:cons "DBInstance"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          restore-dbinstance-to-point-in-time-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (restore-window (:copier common-lisp:nil)
      (:conc-name "struct-shape-restore-window-"))
   (earliest-time common-lisp:nil :type
    (common-lisp:or tstamp common-lisp:null))
   (latest-time common-lisp:nil :type
    (common-lisp:or tstamp common-lisp:null)))
 (common-lisp:export (common-lisp:list 'restore-window 'make-restore-window))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input restore-window))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input restore-window))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'earliest-time))
      (common-lisp:list
       (common-lisp:cons "EarliestTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'latest-time))
      (common-lisp:list
       (common-lisp:cons "LatestTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input restore-window))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (revoke-dbsecurity-group-ingress-message (:copier common-lisp:nil)
      (:conc-name "struct-shape-revoke-dbsecurity-group-ingress-message-"))
   (dbsecurity-group-name
    (common-lisp:error ":dbsecurity-group-name is required") :type
    (common-lisp:or string common-lisp:null))
   (cidrip common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (ec2security-group-name common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (ec2security-group-id common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (ec2security-group-owner-id common-lisp:nil :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'revoke-dbsecurity-group-ingress-message
                    'make-revoke-dbsecurity-group-ingress-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          revoke-dbsecurity-group-ingress-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          revoke-dbsecurity-group-ingress-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dbsecurity-group-name))
      (common-lisp:list
       (common-lisp:cons "DBSecurityGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cidrip))
      (common-lisp:list
       (common-lisp:cons "CIDRIP"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'ec2security-group-name))
      (common-lisp:list
       (common-lisp:cons "EC2SecurityGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'ec2security-group-id))
      (common-lisp:list
       (common-lisp:cons "EC2SecurityGroupId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'ec2security-group-owner-id))
      (common-lisp:list
       (common-lisp:cons "EC2SecurityGroupOwnerId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          revoke-dbsecurity-group-ingress-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (revoke-dbsecurity-group-ingress-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-revoke-dbsecurity-group-ingress-result-"))
   (dbsecurity-group common-lisp:nil :type
    (common-lisp:or dbsecurity-group common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'revoke-dbsecurity-group-ingress-result
                    'make-revoke-dbsecurity-group-ingress-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          revoke-dbsecurity-group-ingress-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          revoke-dbsecurity-group-ingress-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dbsecurity-group))
      (common-lisp:list
       (common-lisp:cons "DBSecurityGroup"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          revoke-dbsecurity-group-ingress-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition snsinvalid-topic-fault
     (rds-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'snsinvalid-topic-fault)))
(common-lisp:progn
 (common-lisp:define-condition snsno-authorization-fault
     (rds-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'snsno-authorization-fault)))
(common-lisp:progn
 (common-lisp:define-condition snstopic-arn-not-found-fault
     (rds-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'snstopic-arn-not-found-fault)))
(common-lisp:progn
 (common-lisp:defstruct
     (scaling-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-scaling-configuration-"))
   (min-capacity common-lisp:nil :type
    (common-lisp:or integer-optional common-lisp:null))
   (max-capacity common-lisp:nil :type
    (common-lisp:or integer-optional common-lisp:null))
   (auto-pause common-lisp:nil :type
    (common-lisp:or boolean-optional common-lisp:null))
   (seconds-until-auto-pause common-lisp:nil :type
    (common-lisp:or integer-optional common-lisp:null))
   (timeout-action common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (seconds-before-timeout common-lisp:nil :type
    (common-lisp:or integer-optional common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'scaling-configuration 'make-scaling-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          scaling-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          scaling-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'min-capacity))
      (common-lisp:list
       (common-lisp:cons "MinCapacity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-capacity))
      (common-lisp:list
       (common-lisp:cons "MaxCapacity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'auto-pause))
      (common-lisp:list
       (common-lisp:cons "AutoPause"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'seconds-until-auto-pause))
      (common-lisp:list
       (common-lisp:cons "SecondsUntilAutoPause"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'timeout-action))
      (common-lisp:list
       (common-lisp:cons "TimeoutAction"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'seconds-before-timeout))
      (common-lisp:list
       (common-lisp:cons "SecondsBeforeTimeout"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          scaling-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (scaling-configuration-info (:copier common-lisp:nil)
      (:conc-name "struct-shape-scaling-configuration-info-"))
   (min-capacity common-lisp:nil :type
    (common-lisp:or integer-optional common-lisp:null))
   (max-capacity common-lisp:nil :type
    (common-lisp:or integer-optional common-lisp:null))
   (auto-pause common-lisp:nil :type
    (common-lisp:or boolean-optional common-lisp:null))
   (seconds-until-auto-pause common-lisp:nil :type
    (common-lisp:or integer-optional common-lisp:null))
   (timeout-action common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (seconds-before-timeout common-lisp:nil :type
    (common-lisp:or integer-optional common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'scaling-configuration-info
                    'make-scaling-configuration-info))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          scaling-configuration-info))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          scaling-configuration-info))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'min-capacity))
      (common-lisp:list
       (common-lisp:cons "MinCapacity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-capacity))
      (common-lisp:list
       (common-lisp:cons "MaxCapacity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'auto-pause))
      (common-lisp:list
       (common-lisp:cons "AutoPause"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'seconds-until-auto-pause))
      (common-lisp:list
       (common-lisp:cons "SecondsUntilAutoPause"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'timeout-action))
      (common-lisp:list
       (common-lisp:cons "TimeoutAction"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'seconds-before-timeout))
      (common-lisp:list
       (common-lisp:cons "SecondsBeforeTimeout"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          scaling-configuration-info))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (serverless-v2scaling-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-serverless-v2scaling-configuration-"))
   (min-capacity common-lisp:nil :type
    (common-lisp:or double-optional common-lisp:null))
   (max-capacity common-lisp:nil :type
    (common-lisp:or double-optional common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'serverless-v2scaling-configuration
                    'make-serverless-v2scaling-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          serverless-v2scaling-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          serverless-v2scaling-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'min-capacity))
      (common-lisp:list
       (common-lisp:cons "MinCapacity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-capacity))
      (common-lisp:list
       (common-lisp:cons "MaxCapacity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          serverless-v2scaling-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (serverless-v2scaling-configuration-info (:copier common-lisp:nil)
      (:conc-name "struct-shape-serverless-v2scaling-configuration-info-"))
   (min-capacity common-lisp:nil :type
    (common-lisp:or double-optional common-lisp:null))
   (max-capacity common-lisp:nil :type
    (common-lisp:or double-optional common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'serverless-v2scaling-configuration-info
                    'make-serverless-v2scaling-configuration-info))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          serverless-v2scaling-configuration-info))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          serverless-v2scaling-configuration-info))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'min-capacity))
      (common-lisp:list
       (common-lisp:cons "MinCapacity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-capacity))
      (common-lisp:list
       (common-lisp:cons "MaxCapacity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          serverless-v2scaling-configuration-info))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition shared-snapshot-quota-exceeded-fault
     (rds-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'shared-snapshot-quota-exceeded-fault)))
(common-lisp:progn
 (common-lisp:define-condition snapshot-quota-exceeded-fault
     (rds-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'snapshot-quota-exceeded-fault)))
(common-lisp:progn
 (common-lisp:define-condition source-cluster-not-supported-fault
     (rds-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'source-cluster-not-supported-fault)))
(common-lisp:progn
 (common-lisp:define-condition source-database-not-supported-fault
     (rds-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'source-database-not-supported-fault)))
(common-lisp:progn
 (common-lisp:deftype source-ids-list () '(trivial-types:proper-list string))
 (common-lisp:defun |make-source-ids-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list string))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition source-not-found-fault
     (rds-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'source-not-found-fault)))
(common-lisp:progn
 (common-lisp:defstruct
     (source-region (:copier common-lisp:nil)
      (:conc-name "struct-shape-source-region-"))
   (region-name common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (endpoint common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (status common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (supports-dbinstance-automated-backups-replication common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null)))
 (common-lisp:export (common-lisp:list 'source-region 'make-source-region))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input source-region))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input source-region))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'region-name))
      (common-lisp:list
       (common-lisp:cons "RegionName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'endpoint))
      (common-lisp:list
       (common-lisp:cons "Endpoint"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'supports-dbinstance-automated-backups-replication))
      (common-lisp:list
       (common-lisp:cons "SupportsDBInstanceAutomatedBackupsReplication"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input source-region))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype source-region-list ()
   '(trivial-types:proper-list source-region))
 (common-lisp:defun |make-source-region-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list source-region))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (source-region-message (:copier common-lisp:nil)
      (:conc-name "struct-shape-source-region-message-"))
   (marker common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (source-regions common-lisp:nil :type
    (common-lisp:or source-region-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'source-region-message 'make-source-region-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          source-region-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          source-region-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-regions))
      (common-lisp:list
       (common-lisp:cons "SourceRegions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          source-region-message))
   common-lisp:nil))
(common-lisp:deftype source-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (start-activity-stream-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-start-activity-stream-request-"))
   (resource-arn (common-lisp:error ":resource-arn is required") :type
    (common-lisp:or string common-lisp:null))
   (mode (common-lisp:error ":mode is required") :type
    (common-lisp:or activity-stream-mode common-lisp:null))
   (kms-key-id (common-lisp:error ":kms-key-id is required") :type
    (common-lisp:or string common-lisp:null))
   (apply-immediately common-lisp:nil :type
    (common-lisp:or boolean-optional common-lisp:null))
   (engine-native-audit-fields-included common-lisp:nil :type
    (common-lisp:or boolean-optional common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'start-activity-stream-request
                    'make-start-activity-stream-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-activity-stream-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-activity-stream-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-arn))
      (common-lisp:list
       (common-lisp:cons "ResourceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'mode))
      (common-lisp:list
       (common-lisp:cons "Mode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kms-key-id))
      (common-lisp:list
       (common-lisp:cons "KmsKeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'apply-immediately))
      (common-lisp:list
       (common-lisp:cons "ApplyImmediately"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'engine-native-audit-fields-included))
      (common-lisp:list
       (common-lisp:cons "EngineNativeAuditFieldsIncluded"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-activity-stream-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (start-activity-stream-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-start-activity-stream-response-"))
   (kms-key-id common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (kinesis-stream-name common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or activity-stream-status common-lisp:null))
   (mode common-lisp:nil :type
    (common-lisp:or activity-stream-mode common-lisp:null))
   (apply-immediately common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (engine-native-audit-fields-included common-lisp:nil :type
    (common-lisp:or boolean-optional common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'start-activity-stream-response
                    'make-start-activity-stream-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-activity-stream-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-activity-stream-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kms-key-id))
      (common-lisp:list
       (common-lisp:cons "KmsKeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kinesis-stream-name))
      (common-lisp:list
       (common-lisp:cons "KinesisStreamName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'mode))
      (common-lisp:list
       (common-lisp:cons "Mode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'apply-immediately))
      (common-lisp:list
       (common-lisp:cons "ApplyImmediately"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'engine-native-audit-fields-included))
      (common-lisp:list
       (common-lisp:cons "EngineNativeAuditFieldsIncluded"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-activity-stream-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (start-dbcluster-message (:copier common-lisp:nil)
      (:conc-name "struct-shape-start-dbcluster-message-"))
   (dbcluster-identifier
    (common-lisp:error ":dbcluster-identifier is required") :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'start-dbcluster-message 'make-start-dbcluster-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-dbcluster-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-dbcluster-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dbcluster-identifier))
      (common-lisp:list
       (common-lisp:cons "DBClusterIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-dbcluster-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (start-dbcluster-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-start-dbcluster-result-"))
   (dbcluster common-lisp:nil :type
    (common-lisp:or dbcluster common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'start-dbcluster-result 'make-start-dbcluster-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-dbcluster-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-dbcluster-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dbcluster))
      (common-lisp:list
       (common-lisp:cons "DBCluster"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-dbcluster-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (start-dbinstance-automated-backups-replication-message
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-start-dbinstance-automated-backups-replication-message-"))
   (source-dbinstance-arn
    (common-lisp:error ":source-dbinstance-arn is required") :type
    (common-lisp:or string common-lisp:null))
   (backup-retention-period common-lisp:nil :type
    (common-lisp:or integer-optional common-lisp:null))
   (kms-key-id common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (pre-signed-url common-lisp:nil :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'start-dbinstance-automated-backups-replication-message
                    'make-start-dbinstance-automated-backups-replication-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-dbinstance-automated-backups-replication-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-dbinstance-automated-backups-replication-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'source-dbinstance-arn))
      (common-lisp:list
       (common-lisp:cons "SourceDBInstanceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'backup-retention-period))
      (common-lisp:list
       (common-lisp:cons "BackupRetentionPeriod"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kms-key-id))
      (common-lisp:list
       (common-lisp:cons "KmsKeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pre-signed-url))
      (common-lisp:list
       (common-lisp:cons "PreSignedUrl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-dbinstance-automated-backups-replication-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (start-dbinstance-automated-backups-replication-result
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-start-dbinstance-automated-backups-replication-result-"))
   (dbinstance-automated-backup common-lisp:nil :type
    (common-lisp:or dbinstance-automated-backup common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'start-dbinstance-automated-backups-replication-result
                    'make-start-dbinstance-automated-backups-replication-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-dbinstance-automated-backups-replication-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-dbinstance-automated-backups-replication-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dbinstance-automated-backup))
      (common-lisp:list
       (common-lisp:cons "DBInstanceAutomatedBackup"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-dbinstance-automated-backups-replication-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (start-dbinstance-message (:copier common-lisp:nil)
      (:conc-name "struct-shape-start-dbinstance-message-"))
   (dbinstance-identifier
    (common-lisp:error ":dbinstance-identifier is required") :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'start-dbinstance-message 'make-start-dbinstance-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-dbinstance-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-dbinstance-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dbinstance-identifier))
      (common-lisp:list
       (common-lisp:cons "DBInstanceIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-dbinstance-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (start-dbinstance-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-start-dbinstance-result-"))
   (dbinstance common-lisp:nil :type
    (common-lisp:or dbinstance common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'start-dbinstance-result 'make-start-dbinstance-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-dbinstance-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-dbinstance-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dbinstance))
      (common-lisp:list
       (common-lisp:cons "DBInstance"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-dbinstance-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (start-export-task-message (:copier common-lisp:nil)
      (:conc-name "struct-shape-start-export-task-message-"))
   (export-task-identifier
    (common-lisp:error ":export-task-identifier is required") :type
    (common-lisp:or string common-lisp:null))
   (source-arn (common-lisp:error ":source-arn is required") :type
    (common-lisp:or string common-lisp:null))
   (s3bucket-name (common-lisp:error ":s3bucket-name is required") :type
    (common-lisp:or string common-lisp:null))
   (iam-role-arn (common-lisp:error ":iam-role-arn is required") :type
    (common-lisp:or string common-lisp:null))
   (kms-key-id (common-lisp:error ":kms-key-id is required") :type
    (common-lisp:or string common-lisp:null))
   (s3prefix common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (export-only common-lisp:nil :type
    (common-lisp:or string-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'start-export-task-message
                    'make-start-export-task-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-export-task-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-export-task-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'export-task-identifier))
      (common-lisp:list
       (common-lisp:cons "ExportTaskIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-arn))
      (common-lisp:list
       (common-lisp:cons "SourceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3bucket-name))
      (common-lisp:list
       (common-lisp:cons "S3BucketName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'iam-role-arn))
      (common-lisp:list
       (common-lisp:cons "IamRoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kms-key-id))
      (common-lisp:list
       (common-lisp:cons "KmsKeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3prefix))
      (common-lisp:list
       (common-lisp:cons "S3Prefix"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'export-only))
      (common-lisp:list
       (common-lisp:cons "ExportOnly"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-export-task-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (stop-activity-stream-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-stop-activity-stream-request-"))
   (resource-arn (common-lisp:error ":resource-arn is required") :type
    (common-lisp:or string common-lisp:null))
   (apply-immediately common-lisp:nil :type
    (common-lisp:or boolean-optional common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'stop-activity-stream-request
                    'make-stop-activity-stream-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          stop-activity-stream-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          stop-activity-stream-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-arn))
      (common-lisp:list
       (common-lisp:cons "ResourceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'apply-immediately))
      (common-lisp:list
       (common-lisp:cons "ApplyImmediately"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          stop-activity-stream-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (stop-activity-stream-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-stop-activity-stream-response-"))
   (kms-key-id common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (kinesis-stream-name common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or activity-stream-status common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'stop-activity-stream-response
                    'make-stop-activity-stream-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          stop-activity-stream-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          stop-activity-stream-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kms-key-id))
      (common-lisp:list
       (common-lisp:cons "KmsKeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kinesis-stream-name))
      (common-lisp:list
       (common-lisp:cons "KinesisStreamName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          stop-activity-stream-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (stop-dbcluster-message (:copier common-lisp:nil)
      (:conc-name "struct-shape-stop-dbcluster-message-"))
   (dbcluster-identifier
    (common-lisp:error ":dbcluster-identifier is required") :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'stop-dbcluster-message 'make-stop-dbcluster-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          stop-dbcluster-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          stop-dbcluster-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dbcluster-identifier))
      (common-lisp:list
       (common-lisp:cons "DBClusterIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          stop-dbcluster-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (stop-dbcluster-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-stop-dbcluster-result-"))
   (dbcluster common-lisp:nil :type
    (common-lisp:or dbcluster common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'stop-dbcluster-result 'make-stop-dbcluster-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          stop-dbcluster-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          stop-dbcluster-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dbcluster))
      (common-lisp:list
       (common-lisp:cons "DBCluster"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          stop-dbcluster-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (stop-dbinstance-automated-backups-replication-message
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-stop-dbinstance-automated-backups-replication-message-"))
   (source-dbinstance-arn
    (common-lisp:error ":source-dbinstance-arn is required") :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'stop-dbinstance-automated-backups-replication-message
                    'make-stop-dbinstance-automated-backups-replication-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          stop-dbinstance-automated-backups-replication-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          stop-dbinstance-automated-backups-replication-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'source-dbinstance-arn))
      (common-lisp:list
       (common-lisp:cons "SourceDBInstanceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          stop-dbinstance-automated-backups-replication-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (stop-dbinstance-automated-backups-replication-result
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-stop-dbinstance-automated-backups-replication-result-"))
   (dbinstance-automated-backup common-lisp:nil :type
    (common-lisp:or dbinstance-automated-backup common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'stop-dbinstance-automated-backups-replication-result
                    'make-stop-dbinstance-automated-backups-replication-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          stop-dbinstance-automated-backups-replication-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          stop-dbinstance-automated-backups-replication-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dbinstance-automated-backup))
      (common-lisp:list
       (common-lisp:cons "DBInstanceAutomatedBackup"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          stop-dbinstance-automated-backups-replication-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (stop-dbinstance-message (:copier common-lisp:nil)
      (:conc-name "struct-shape-stop-dbinstance-message-"))
   (dbinstance-identifier
    (common-lisp:error ":dbinstance-identifier is required") :type
    (common-lisp:or string common-lisp:null))
   (dbsnapshot-identifier common-lisp:nil :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'stop-dbinstance-message 'make-stop-dbinstance-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          stop-dbinstance-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          stop-dbinstance-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dbinstance-identifier))
      (common-lisp:list
       (common-lisp:cons "DBInstanceIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dbsnapshot-identifier))
      (common-lisp:list
       (common-lisp:cons "DBSnapshotIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          stop-dbinstance-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (stop-dbinstance-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-stop-dbinstance-result-"))
   (dbinstance common-lisp:nil :type
    (common-lisp:or dbinstance common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'stop-dbinstance-result 'make-stop-dbinstance-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          stop-dbinstance-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          stop-dbinstance-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dbinstance))
      (common-lisp:list
       (common-lisp:cons "DBInstance"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          stop-dbinstance-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition storage-quota-exceeded-fault
     (rds-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'storage-quota-exceeded-fault)))
(common-lisp:progn
 (common-lisp:define-condition storage-type-not-supported-fault
     (rds-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'storage-type-not-supported-fault)))
(common-lisp:deftype string () 'common-lisp:string)
(common-lisp:deftype string255 () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype string-list () '(trivial-types:proper-list string))
 (common-lisp:defun |make-string-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list string))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (subnet (:copier common-lisp:nil) (:conc-name "struct-shape-subnet-"))
   (subnet-identifier common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (subnet-availability-zone common-lisp:nil :type
    (common-lisp:or availability-zone common-lisp:null))
   (subnet-outpost common-lisp:nil :type
    (common-lisp:or outpost common-lisp:null))
   (subnet-status common-lisp:nil :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export (common-lisp:list 'subnet 'make-subnet))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input subnet))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input subnet))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subnet-identifier))
      (common-lisp:list
       (common-lisp:cons "SubnetIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'subnet-availability-zone))
      (common-lisp:list
       (common-lisp:cons "SubnetAvailabilityZone"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subnet-outpost))
      (common-lisp:list
       (common-lisp:cons "SubnetOutpost"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subnet-status))
      (common-lisp:list
       (common-lisp:cons "SubnetStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input subnet))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition subnet-already-in-use
     (rds-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'subnet-already-in-use)))
(common-lisp:progn
 (common-lisp:deftype subnet-identifier-list ()
   '(trivial-types:proper-list string))
 (common-lisp:defun |make-subnet-identifier-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list string))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype subnet-list () '(trivial-types:proper-list subnet))
 (common-lisp:defun |make-subnet-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list subnet))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition subscription-already-exist-fault
     (rds-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'subscription-already-exist-fault)))
(common-lisp:progn
 (common-lisp:define-condition subscription-category-not-found-fault
     (rds-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'subscription-category-not-found-fault)))
(common-lisp:progn
 (common-lisp:define-condition subscription-not-found-fault
     (rds-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'subscription-not-found-fault)))
(common-lisp:progn
 (common-lisp:deftype supported-character-sets-list ()
   '(trivial-types:proper-list character-set))
 (common-lisp:defun |make-supported-character-sets-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list character-set))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype supported-timezones-list ()
   '(trivial-types:proper-list timezone))
 (common-lisp:defun |make-supported-timezones-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list timezone))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (switchover-blue-green-deployment-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-switchover-blue-green-deployment-request-"))
   (blue-green-deployment-identifier
    (common-lisp:error ":blue-green-deployment-identifier is required") :type
    (common-lisp:or blue-green-deployment-identifier common-lisp:null))
   (switchover-timeout common-lisp:nil :type
    (common-lisp:or switchover-timeout common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'switchover-blue-green-deployment-request
                    'make-switchover-blue-green-deployment-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          switchover-blue-green-deployment-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          switchover-blue-green-deployment-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'blue-green-deployment-identifier))
      (common-lisp:list
       (common-lisp:cons "BlueGreenDeploymentIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'switchover-timeout))
      (common-lisp:list
       (common-lisp:cons "SwitchoverTimeout"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          switchover-blue-green-deployment-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (switchover-blue-green-deployment-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-switchover-blue-green-deployment-response-"))
   (blue-green-deployment common-lisp:nil :type
    (common-lisp:or blue-green-deployment common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'switchover-blue-green-deployment-response
                    'make-switchover-blue-green-deployment-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          switchover-blue-green-deployment-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          switchover-blue-green-deployment-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'blue-green-deployment))
      (common-lisp:list
       (common-lisp:cons "BlueGreenDeployment"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          switchover-blue-green-deployment-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (switchover-detail (:copier common-lisp:nil)
      (:conc-name "struct-shape-switchover-detail-"))
   (source-member common-lisp:nil :type
    (common-lisp:or database-arn common-lisp:null))
   (target-member common-lisp:nil :type
    (common-lisp:or database-arn common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or switchover-detail-status common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'switchover-detail 'make-switchover-detail))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input switchover-detail))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input switchover-detail))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-member))
      (common-lisp:list
       (common-lisp:cons "SourceMember"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target-member))
      (common-lisp:list
       (common-lisp:cons "TargetMember"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input switchover-detail))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype switchover-detail-list ()
   '(trivial-types:proper-list switchover-detail))
 (common-lisp:defun |make-switchover-detail-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list switchover-detail))
   aws-sdk/generator/shape::members))
(common-lisp:deftype switchover-detail-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (switchover-read-replica-message (:copier common-lisp:nil)
      (:conc-name "struct-shape-switchover-read-replica-message-"))
   (dbinstance-identifier
    (common-lisp:error ":dbinstance-identifier is required") :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'switchover-read-replica-message
                    'make-switchover-read-replica-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          switchover-read-replica-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          switchover-read-replica-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dbinstance-identifier))
      (common-lisp:list
       (common-lisp:cons "DBInstanceIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          switchover-read-replica-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (switchover-read-replica-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-switchover-read-replica-result-"))
   (dbinstance common-lisp:nil :type
    (common-lisp:or dbinstance common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'switchover-read-replica-result
                    'make-switchover-read-replica-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          switchover-read-replica-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          switchover-read-replica-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dbinstance))
      (common-lisp:list
       (common-lisp:cons "DBInstance"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          switchover-read-replica-result))
   common-lisp:nil))
(common-lisp:deftype switchover-timeout () 'common-lisp:integer)
(common-lisp:deftype tstamp () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (tag (:copier common-lisp:nil) (:conc-name "struct-shape-tag-"))
   (key common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (value common-lisp:nil :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export (common-lisp:list 'tag 'make-tag))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input tag))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input tag))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key))
      (common-lisp:list
       (common-lisp:cons "Key"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "Value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input tag))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype tag-list () '(trivial-types:proper-list tag))
 (common-lisp:defun |make-tag-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list tag))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (tag-list-message (:copier common-lisp:nil)
      (:conc-name "struct-shape-tag-list-message-"))
   (tag-list common-lisp:nil :type (common-lisp:or tag-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'tag-list-message 'make-tag-list-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input tag-list-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input tag-list-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tag-list))
      (common-lisp:list
       (common-lisp:cons "TagList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input tag-list-message))
   common-lisp:nil))
(common-lisp:deftype target-dbcluster-parameter-group-name ()
  'common-lisp:string)
(common-lisp:deftype target-dbparameter-group-name () 'common-lisp:string)
(common-lisp:deftype target-engine-version () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype target-group-list ()
   '(trivial-types:proper-list dbproxy-target-group))
 (common-lisp:defun |make-target-group-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list dbproxy-target-group))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (target-health (:copier common-lisp:nil)
      (:conc-name "struct-shape-target-health-"))
   (state common-lisp:nil :type (common-lisp:or target-state common-lisp:null))
   (reason common-lisp:nil :type
    (common-lisp:or target-health-reason common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export (common-lisp:list 'target-health 'make-target-health))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input target-health))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input target-health))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "State"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'reason))
      (common-lisp:list
       (common-lisp:cons "Reason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input target-health))
   common-lisp:nil))
(common-lisp:deftype target-health-reason () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype target-list ()
   '(trivial-types:proper-list dbproxy-target))
 (common-lisp:defun |make-target-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list dbproxy-target))
   aws-sdk/generator/shape::members))
(common-lisp:deftype target-role () 'common-lisp:string)
(common-lisp:deftype target-state () 'common-lisp:string)
(common-lisp:deftype target-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (timezone (:copier common-lisp:nil) (:conc-name "struct-shape-timezone-"))
   (timezone-name common-lisp:nil :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export (common-lisp:list 'timezone 'make-timezone))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input timezone))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input timezone))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'timezone-name))
      (common-lisp:list
       (common-lisp:cons "TimezoneName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input timezone))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (upgrade-target (:copier common-lisp:nil)
      (:conc-name "struct-shape-upgrade-target-"))
   (engine common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (engine-version common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (description common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (auto-upgrade common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (is-major-version-upgrade common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (supported-engine-modes common-lisp:nil :type
    (common-lisp:or engine-mode-list common-lisp:null))
   (supports-parallel-query common-lisp:nil :type
    (common-lisp:or boolean-optional common-lisp:null))
   (supports-global-databases common-lisp:nil :type
    (common-lisp:or boolean-optional common-lisp:null))
   (supports-babelfish common-lisp:nil :type
    (common-lisp:or boolean-optional common-lisp:null)))
 (common-lisp:export (common-lisp:list 'upgrade-target 'make-upgrade-target))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input upgrade-target))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input upgrade-target))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'engine))
      (common-lisp:list
       (common-lisp:cons "Engine"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'engine-version))
      (common-lisp:list
       (common-lisp:cons "EngineVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'auto-upgrade))
      (common-lisp:list
       (common-lisp:cons "AutoUpgrade"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'is-major-version-upgrade))
      (common-lisp:list
       (common-lisp:cons "IsMajorVersionUpgrade"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'supported-engine-modes))
      (common-lisp:list
       (common-lisp:cons "SupportedEngineModes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'supports-parallel-query))
      (common-lisp:list
       (common-lisp:cons "SupportsParallelQuery"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'supports-global-databases))
      (common-lisp:list
       (common-lisp:cons "SupportsGlobalDatabases"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'supports-babelfish))
      (common-lisp:list
       (common-lisp:cons "SupportsBabelfish"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input upgrade-target))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (user-auth-config (:copier common-lisp:nil)
      (:conc-name "struct-shape-user-auth-config-"))
   (description common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (user-name common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (auth-scheme common-lisp:nil :type
    (common-lisp:or auth-scheme common-lisp:null))
   (secret-arn common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (iamauth common-lisp:nil :type
    (common-lisp:or iamauth-mode common-lisp:null))
   (client-password-auth-type common-lisp:nil :type
    (common-lisp:or client-password-auth-type common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'user-auth-config 'make-user-auth-config))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input user-auth-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input user-auth-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-name))
      (common-lisp:list
       (common-lisp:cons "UserName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'auth-scheme))
      (common-lisp:list
       (common-lisp:cons "AuthScheme"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'secret-arn))
      (common-lisp:list
       (common-lisp:cons "SecretArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'iamauth))
      (common-lisp:list
       (common-lisp:cons "IAMAuth"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'client-password-auth-type))
      (common-lisp:list
       (common-lisp:cons "ClientPasswordAuthType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input user-auth-config))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (user-auth-config-info (:copier common-lisp:nil)
      (:conc-name "struct-shape-user-auth-config-info-"))
   (description common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (user-name common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (auth-scheme common-lisp:nil :type
    (common-lisp:or auth-scheme common-lisp:null))
   (secret-arn common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (iamauth common-lisp:nil :type
    (common-lisp:or iamauth-mode common-lisp:null))
   (client-password-auth-type common-lisp:nil :type
    (common-lisp:or client-password-auth-type common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'user-auth-config-info 'make-user-auth-config-info))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          user-auth-config-info))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          user-auth-config-info))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-name))
      (common-lisp:list
       (common-lisp:cons "UserName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'auth-scheme))
      (common-lisp:list
       (common-lisp:cons "AuthScheme"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'secret-arn))
      (common-lisp:list
       (common-lisp:cons "SecretArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'iamauth))
      (common-lisp:list
       (common-lisp:cons "IAMAuth"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'client-password-auth-type))
      (common-lisp:list
       (common-lisp:cons "ClientPasswordAuthType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          user-auth-config-info))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype user-auth-config-info-list ()
   '(trivial-types:proper-list user-auth-config-info))
 (common-lisp:defun |make-user-auth-config-info-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list user-auth-config-info))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype user-auth-config-list ()
   '(trivial-types:proper-list user-auth-config))
 (common-lisp:defun |make-user-auth-config-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list user-auth-config))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (valid-dbinstance-modifications-message (:copier common-lisp:nil)
      (:conc-name "struct-shape-valid-dbinstance-modifications-message-"))
   (storage common-lisp:nil :type
    (common-lisp:or valid-storage-options-list common-lisp:null))
   (valid-processor-features common-lisp:nil :type
    (common-lisp:or available-processor-feature-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'valid-dbinstance-modifications-message
                    'make-valid-dbinstance-modifications-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          valid-dbinstance-modifications-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          valid-dbinstance-modifications-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'storage))
      (common-lisp:list
       (common-lisp:cons "Storage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'valid-processor-features))
      (common-lisp:list
       (common-lisp:cons "ValidProcessorFeatures"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          valid-dbinstance-modifications-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (valid-storage-options (:copier common-lisp:nil)
      (:conc-name "struct-shape-valid-storage-options-"))
   (storage-type common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (storage-size common-lisp:nil :type
    (common-lisp:or range-list common-lisp:null))
   (provisioned-iops common-lisp:nil :type
    (common-lisp:or range-list common-lisp:null))
   (iops-to-storage-ratio common-lisp:nil :type
    (common-lisp:or double-range-list common-lisp:null))
   (supports-storage-autoscaling common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (provisioned-storage-throughput common-lisp:nil :type
    (common-lisp:or range-list common-lisp:null))
   (storage-throughput-to-iops-ratio common-lisp:nil :type
    (common-lisp:or double-range-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'valid-storage-options 'make-valid-storage-options))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          valid-storage-options))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          valid-storage-options))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'storage-type))
      (common-lisp:list
       (common-lisp:cons "StorageType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'storage-size))
      (common-lisp:list
       (common-lisp:cons "StorageSize"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'provisioned-iops))
      (common-lisp:list
       (common-lisp:cons "ProvisionedIops"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'iops-to-storage-ratio))
      (common-lisp:list
       (common-lisp:cons "IopsToStorageRatio"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'supports-storage-autoscaling))
      (common-lisp:list
       (common-lisp:cons "SupportsStorageAutoscaling"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'provisioned-storage-throughput))
      (common-lisp:list
       (common-lisp:cons "ProvisionedStorageThroughput"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'storage-throughput-to-iops-ratio))
      (common-lisp:list
       (common-lisp:cons "StorageThroughputToIopsRatio"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          valid-storage-options))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype valid-storage-options-list ()
   '(trivial-types:proper-list valid-storage-options))
 (common-lisp:defun |make-valid-storage-options-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list valid-storage-options))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype valid-upgrade-target-list ()
   '(trivial-types:proper-list upgrade-target))
 (common-lisp:defun |make-valid-upgrade-target-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list upgrade-target))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype vpc-security-group-id-list ()
   '(trivial-types:proper-list string))
 (common-lisp:defun |make-vpc-security-group-id-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list string))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (vpc-security-group-membership (:copier common-lisp:nil)
      (:conc-name "struct-shape-vpc-security-group-membership-"))
   (vpc-security-group-id common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (status common-lisp:nil :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'vpc-security-group-membership
                    'make-vpc-security-group-membership))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          vpc-security-group-membership))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          vpc-security-group-membership))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'vpc-security-group-id))
      (common-lisp:list
       (common-lisp:cons "VpcSecurityGroupId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          vpc-security-group-membership))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype vpc-security-group-membership-list ()
   '(trivial-types:proper-list vpc-security-group-membership))
 (common-lisp:defun |make-vpc-security-group-membership-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            vpc-security-group-membership))
   aws-sdk/generator/shape::members))
(common-lisp:deftype write-forwarding-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defun add-role-to-dbcluster
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key dbcluster-identifier role-arn
                     feature-name)
   (common-lisp:declare
    (common-lisp:ignorable dbcluster-identifier role-arn feature-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-add-role-to-dbcluster-message
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'rds-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "AddRoleToDBCluster"
                                                        "2014-10-31"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'add-role-to-dbcluster))
(common-lisp:progn
 (common-lisp:defun add-role-to-dbinstance
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key dbinstance-identifier role-arn
                     feature-name)
   (common-lisp:declare
    (common-lisp:ignorable dbinstance-identifier role-arn feature-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-add-role-to-dbinstance-message
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'rds-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "AddRoleToDBInstance"
                                                        "2014-10-31"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'add-role-to-dbinstance))
(common-lisp:progn
 (common-lisp:defun add-source-identifier-to-subscription
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key subscription-name source-identifier)
   (common-lisp:declare
    (common-lisp:ignorable subscription-name source-identifier))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-add-source-identifier-to-subscription-message
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'rds-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "AddSourceIdentifierToSubscription"
                                                        "2014-10-31"))
      common-lisp:nil "AddSourceIdentifierToSubscriptionResult" *error-map*)))
 (common-lisp:export 'add-source-identifier-to-subscription))
(common-lisp:progn
 (common-lisp:defun add-tags-to-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-name tags)
   (common-lisp:declare (common-lisp:ignorable resource-name tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-add-tags-to-resource-message
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'rds-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "AddTagsToResource"
                                                        "2014-10-31"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'add-tags-to-resource))
(common-lisp:progn
 (common-lisp:defun apply-pending-maintenance-action
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-identifier apply-action
                     opt-in-type)
   (common-lisp:declare
    (common-lisp:ignorable resource-identifier apply-action opt-in-type))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-apply-pending-maintenance-action-message
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'rds-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ApplyPendingMaintenanceAction"
                                                        "2014-10-31"))
      common-lisp:nil "ApplyPendingMaintenanceActionResult" *error-map*)))
 (common-lisp:export 'apply-pending-maintenance-action))
(common-lisp:progn
 (common-lisp:defun authorize-dbsecurity-group-ingress
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key dbsecurity-group-name cidrip
                     ec2security-group-name ec2security-group-id
                     ec2security-group-owner-id)
   (common-lisp:declare
    (common-lisp:ignorable dbsecurity-group-name cidrip ec2security-group-name
     ec2security-group-id ec2security-group-owner-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-authorize-dbsecurity-group-ingress-message
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'rds-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "AuthorizeDBSecurityGroupIngress"
                                                        "2014-10-31"))
      common-lisp:nil "AuthorizeDBSecurityGroupIngressResult" *error-map*)))
 (common-lisp:export 'authorize-dbsecurity-group-ingress))
(common-lisp:progn
 (common-lisp:defun backtrack-dbcluster
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key dbcluster-identifier backtrack-to force
                     use-earliest-time-on-point-in-time-unavailable)
   (common-lisp:declare
    (common-lisp:ignorable dbcluster-identifier backtrack-to force
     use-earliest-time-on-point-in-time-unavailable))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-backtrack-dbcluster-message
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'rds-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "BacktrackDBCluster"
                                                        "2014-10-31"))
      common-lisp:nil "BacktrackDBClusterResult" *error-map*)))
 (common-lisp:export 'backtrack-dbcluster))
(common-lisp:progn
 (common-lisp:defun cancel-export-task
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key export-task-identifier)
   (common-lisp:declare (common-lisp:ignorable export-task-identifier))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-cancel-export-task-message
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'rds-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CancelExportTask"
                                                        "2014-10-31"))
      common-lisp:nil "CancelExportTaskResult" *error-map*)))
 (common-lisp:export 'cancel-export-task))
(common-lisp:progn
 (common-lisp:defun copy-dbcluster-parameter-group
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key
                     source-dbcluster-parameter-group-identifier
                     target-dbcluster-parameter-group-identifier
                     target-dbcluster-parameter-group-description tags)
   (common-lisp:declare
    (common-lisp:ignorable source-dbcluster-parameter-group-identifier
     target-dbcluster-parameter-group-identifier
     target-dbcluster-parameter-group-description tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-copy-dbcluster-parameter-group-message
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'rds-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CopyDBClusterParameterGroup"
                                                        "2014-10-31"))
      common-lisp:nil "CopyDBClusterParameterGroupResult" *error-map*)))
 (common-lisp:export 'copy-dbcluster-parameter-group))
(common-lisp:progn
 (common-lisp:defun copy-dbcluster-snapshot
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key source-dbcluster-snapshot-identifier
                     target-dbcluster-snapshot-identifier kms-key-id
                     pre-signed-url copy-tags tags)
   (common-lisp:declare
    (common-lisp:ignorable source-dbcluster-snapshot-identifier
     target-dbcluster-snapshot-identifier kms-key-id pre-signed-url copy-tags
     tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-copy-dbcluster-snapshot-message
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'rds-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CopyDBClusterSnapshot"
                                                        "2014-10-31"))
      common-lisp:nil "CopyDBClusterSnapshotResult" *error-map*)))
 (common-lisp:export 'copy-dbcluster-snapshot))
(common-lisp:progn
 (common-lisp:defun copy-dbparameter-group
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key source-dbparameter-group-identifier
                     target-dbparameter-group-identifier
                     target-dbparameter-group-description tags)
   (common-lisp:declare
    (common-lisp:ignorable source-dbparameter-group-identifier
     target-dbparameter-group-identifier target-dbparameter-group-description
     tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-copy-dbparameter-group-message
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'rds-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CopyDBParameterGroup"
                                                        "2014-10-31"))
      common-lisp:nil "CopyDBParameterGroupResult" *error-map*)))
 (common-lisp:export 'copy-dbparameter-group))
(common-lisp:progn
 (common-lisp:defun copy-dbsnapshot
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key source-dbsnapshot-identifier
                     target-dbsnapshot-identifier kms-key-id tags copy-tags
                     pre-signed-url option-group-name
                     target-custom-availability-zone copy-option-group)
   (common-lisp:declare
    (common-lisp:ignorable source-dbsnapshot-identifier
     target-dbsnapshot-identifier kms-key-id tags copy-tags pre-signed-url
     option-group-name target-custom-availability-zone copy-option-group))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-copy-dbsnapshot-message
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'rds-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CopyDBSnapshot"
                                                        "2014-10-31"))
      common-lisp:nil "CopyDBSnapshotResult" *error-map*)))
 (common-lisp:export 'copy-dbsnapshot))
(common-lisp:progn
 (common-lisp:defun copy-option-group
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key source-option-group-identifier
                     target-option-group-identifier
                     target-option-group-description tags)
   (common-lisp:declare
    (common-lisp:ignorable source-option-group-identifier
     target-option-group-identifier target-option-group-description tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-copy-option-group-message
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'rds-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CopyOptionGroup"
                                                        "2014-10-31"))
      common-lisp:nil "CopyOptionGroupResult" *error-map*)))
 (common-lisp:export 'copy-option-group))
(common-lisp:progn
 (common-lisp:defun create-blue-green-deployment
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key blue-green-deployment-name source
                     target-engine-version target-dbparameter-group-name
                     target-dbcluster-parameter-group-name tags)
   (common-lisp:declare
    (common-lisp:ignorable blue-green-deployment-name source
     target-engine-version target-dbparameter-group-name
     target-dbcluster-parameter-group-name tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-create-blue-green-deployment-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'rds-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CreateBlueGreenDeployment"
                                                        "2014-10-31"))
      common-lisp:nil "CreateBlueGreenDeploymentResult" *error-map*)))
 (common-lisp:export 'create-blue-green-deployment))
(common-lisp:progn
 (common-lisp:defun create-custom-dbengine-version
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key engine engine-version
                     database-installation-files-s3bucket-name
                     database-installation-files-s3prefix image-id kmskey-id
                     description manifest tags)
   (common-lisp:declare
    (common-lisp:ignorable engine engine-version
     database-installation-files-s3bucket-name
     database-installation-files-s3prefix image-id kmskey-id description
     manifest tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-create-custom-dbengine-version-message
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'rds-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CreateCustomDBEngineVersion"
                                                        "2014-10-31"))
      common-lisp:nil "CreateCustomDBEngineVersionResult" *error-map*)))
 (common-lisp:export 'create-custom-dbengine-version))
(common-lisp:progn
 (common-lisp:defun create-dbcluster
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key availability-zones
                     backup-retention-period character-set-name database-name
                     dbcluster-identifier dbcluster-parameter-group-name
                     vpc-security-group-ids dbsubnet-group-name engine
                     engine-version port master-username master-user-password
                     option-group-name preferred-backup-window
                     preferred-maintenance-window replication-source-identifier
                     tags storage-encrypted kms-key-id pre-signed-url
                     enable-iamdatabase-authentication backtrack-window
                     enable-cloudwatch-logs-exports engine-mode
                     scaling-configuration deletion-protection
                     global-cluster-identifier enable-http-endpoint
                     copy-tags-to-snapshot domain domain-iamrole-name
                     enable-global-write-forwarding dbcluster-instance-class
                     allocated-storage storage-type iops publicly-accessible
                     auto-minor-version-upgrade monitoring-interval
                     monitoring-role-arn enable-performance-insights
                     performance-insights-kmskey-id
                     performance-insights-retention-period
                     serverless-v2scaling-configuration network-type
                     dbsystem-id manage-master-user-password
                     master-user-secret-kms-key-id)
   (common-lisp:declare
    (common-lisp:ignorable availability-zones backup-retention-period
     character-set-name database-name dbcluster-identifier
     dbcluster-parameter-group-name vpc-security-group-ids dbsubnet-group-name
     engine engine-version port master-username master-user-password
     option-group-name preferred-backup-window preferred-maintenance-window
     replication-source-identifier tags storage-encrypted kms-key-id
     pre-signed-url enable-iamdatabase-authentication backtrack-window
     enable-cloudwatch-logs-exports engine-mode scaling-configuration
     deletion-protection global-cluster-identifier enable-http-endpoint
     copy-tags-to-snapshot domain domain-iamrole-name
     enable-global-write-forwarding dbcluster-instance-class allocated-storage
     storage-type iops publicly-accessible auto-minor-version-upgrade
     monitoring-interval monitoring-role-arn enable-performance-insights
     performance-insights-kmskey-id performance-insights-retention-period
     serverless-v2scaling-configuration network-type dbsystem-id
     manage-master-user-password master-user-secret-kms-key-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-dbcluster-message
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'rds-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CreateDBCluster"
                                                        "2014-10-31"))
      common-lisp:nil "CreateDBClusterResult" *error-map*)))
 (common-lisp:export 'create-dbcluster))
(common-lisp:progn
 (common-lisp:defun create-dbcluster-endpoint
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key dbcluster-identifier
                     dbcluster-endpoint-identifier endpoint-type static-members
                     excluded-members tags)
   (common-lisp:declare
    (common-lisp:ignorable dbcluster-identifier dbcluster-endpoint-identifier
     endpoint-type static-members excluded-members tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-create-dbcluster-endpoint-message
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'rds-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CreateDBClusterEndpoint"
                                                        "2014-10-31"))
      common-lisp:nil "CreateDBClusterEndpointResult" *error-map*)))
 (common-lisp:export 'create-dbcluster-endpoint))
(common-lisp:progn
 (common-lisp:defun create-dbcluster-parameter-group
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key dbcluster-parameter-group-name
                     dbparameter-group-family description tags)
   (common-lisp:declare
    (common-lisp:ignorable dbcluster-parameter-group-name
     dbparameter-group-family description tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-create-dbcluster-parameter-group-message
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'rds-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CreateDBClusterParameterGroup"
                                                        "2014-10-31"))
      common-lisp:nil "CreateDBClusterParameterGroupResult" *error-map*)))
 (common-lisp:export 'create-dbcluster-parameter-group))
(common-lisp:progn
 (common-lisp:defun create-dbcluster-snapshot
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key dbcluster-snapshot-identifier
                     dbcluster-identifier tags)
   (common-lisp:declare
    (common-lisp:ignorable dbcluster-snapshot-identifier dbcluster-identifier
     tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-create-dbcluster-snapshot-message
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'rds-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CreateDBClusterSnapshot"
                                                        "2014-10-31"))
      common-lisp:nil "CreateDBClusterSnapshotResult" *error-map*)))
 (common-lisp:export 'create-dbcluster-snapshot))
(common-lisp:progn
 (common-lisp:defun create-dbinstance
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key dbname dbinstance-identifier
                     allocated-storage dbinstance-class engine master-username
                     master-user-password dbsecurity-groups
                     vpc-security-group-ids availability-zone
                     dbsubnet-group-name preferred-maintenance-window
                     dbparameter-group-name backup-retention-period
                     preferred-backup-window port multi-az engine-version
                     auto-minor-version-upgrade license-model iops
                     option-group-name character-set-name
                     nchar-character-set-name publicly-accessible tags
                     dbcluster-identifier storage-type tde-credential-arn
                     tde-credential-password storage-encrypted kms-key-id
                     domain copy-tags-to-snapshot monitoring-interval
                     monitoring-role-arn domain-iamrole-name promotion-tier
                     timezone enable-iamdatabase-authentication
                     enable-performance-insights performance-insights-kmskey-id
                     performance-insights-retention-period
                     enable-cloudwatch-logs-exports processor-features
                     deletion-protection max-allocated-storage
                     enable-customer-owned-ip custom-iam-instance-profile
                     backup-target network-type storage-throughput
                     manage-master-user-password master-user-secret-kms-key-id
                     cacertificate-identifier)
   (common-lisp:declare
    (common-lisp:ignorable dbname dbinstance-identifier allocated-storage
     dbinstance-class engine master-username master-user-password
     dbsecurity-groups vpc-security-group-ids availability-zone
     dbsubnet-group-name preferred-maintenance-window dbparameter-group-name
     backup-retention-period preferred-backup-window port multi-az
     engine-version auto-minor-version-upgrade license-model iops
     option-group-name character-set-name nchar-character-set-name
     publicly-accessible tags dbcluster-identifier storage-type
     tde-credential-arn tde-credential-password storage-encrypted kms-key-id
     domain copy-tags-to-snapshot monitoring-interval monitoring-role-arn
     domain-iamrole-name promotion-tier timezone
     enable-iamdatabase-authentication enable-performance-insights
     performance-insights-kmskey-id performance-insights-retention-period
     enable-cloudwatch-logs-exports processor-features deletion-protection
     max-allocated-storage enable-customer-owned-ip custom-iam-instance-profile
     backup-target network-type storage-throughput manage-master-user-password
     master-user-secret-kms-key-id cacertificate-identifier))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-dbinstance-message
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'rds-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CreateDBInstance"
                                                        "2014-10-31"))
      common-lisp:nil "CreateDBInstanceResult" *error-map*)))
 (common-lisp:export 'create-dbinstance))
(common-lisp:progn
 (common-lisp:defun create-dbinstance-read-replica
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key dbinstance-identifier
                     source-dbinstance-identifier dbinstance-class
                     availability-zone port multi-az auto-minor-version-upgrade
                     iops option-group-name dbparameter-group-name
                     publicly-accessible tags dbsubnet-group-name
                     vpc-security-group-ids storage-type copy-tags-to-snapshot
                     monitoring-interval monitoring-role-arn kms-key-id
                     pre-signed-url enable-iamdatabase-authentication
                     enable-performance-insights performance-insights-kmskey-id
                     performance-insights-retention-period
                     enable-cloudwatch-logs-exports processor-features
                     use-default-processor-features deletion-protection domain
                     domain-iamrole-name replica-mode max-allocated-storage
                     custom-iam-instance-profile network-type
                     storage-throughput enable-customer-owned-ip
                     allocated-storage)
   (common-lisp:declare
    (common-lisp:ignorable dbinstance-identifier source-dbinstance-identifier
     dbinstance-class availability-zone port multi-az
     auto-minor-version-upgrade iops option-group-name dbparameter-group-name
     publicly-accessible tags dbsubnet-group-name vpc-security-group-ids
     storage-type copy-tags-to-snapshot monitoring-interval monitoring-role-arn
     kms-key-id pre-signed-url enable-iamdatabase-authentication
     enable-performance-insights performance-insights-kmskey-id
     performance-insights-retention-period enable-cloudwatch-logs-exports
     processor-features use-default-processor-features deletion-protection
     domain domain-iamrole-name replica-mode max-allocated-storage
     custom-iam-instance-profile network-type storage-throughput
     enable-customer-owned-ip allocated-storage))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-create-dbinstance-read-replica-message
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'rds-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CreateDBInstanceReadReplica"
                                                        "2014-10-31"))
      common-lisp:nil "CreateDBInstanceReadReplicaResult" *error-map*)))
 (common-lisp:export 'create-dbinstance-read-replica))
(common-lisp:progn
 (common-lisp:defun create-dbparameter-group
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key dbparameter-group-name
                     dbparameter-group-family description tags)
   (common-lisp:declare
    (common-lisp:ignorable dbparameter-group-name dbparameter-group-family
     description tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-dbparameter-group-message
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'rds-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CreateDBParameterGroup"
                                                        "2014-10-31"))
      common-lisp:nil "CreateDBParameterGroupResult" *error-map*)))
 (common-lisp:export 'create-dbparameter-group))
(common-lisp:progn
 (common-lisp:defun create-dbproxy
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key dbproxy-name engine-family auth role-arn
                     vpc-subnet-ids vpc-security-group-ids require-tls
                     idle-client-timeout debug-logging tags)
   (common-lisp:declare
    (common-lisp:ignorable dbproxy-name engine-family auth role-arn
     vpc-subnet-ids vpc-security-group-ids require-tls idle-client-timeout
     debug-logging tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-dbproxy-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'rds-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CreateDBProxy"
                                                        "2014-10-31"))
      common-lisp:nil "CreateDBProxyResult" *error-map*)))
 (common-lisp:export 'create-dbproxy))
(common-lisp:progn
 (common-lisp:defun create-dbproxy-endpoint
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key dbproxy-name dbproxy-endpoint-name
                     vpc-subnet-ids vpc-security-group-ids target-role tags)
   (common-lisp:declare
    (common-lisp:ignorable dbproxy-name dbproxy-endpoint-name vpc-subnet-ids
     vpc-security-group-ids target-role tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-dbproxy-endpoint-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'rds-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CreateDBProxyEndpoint"
                                                        "2014-10-31"))
      common-lisp:nil "CreateDBProxyEndpointResult" *error-map*)))
 (common-lisp:export 'create-dbproxy-endpoint))
(common-lisp:progn
 (common-lisp:defun create-dbsecurity-group
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key dbsecurity-group-name
                     dbsecurity-group-description tags)
   (common-lisp:declare
    (common-lisp:ignorable dbsecurity-group-name dbsecurity-group-description
     tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-dbsecurity-group-message
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'rds-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CreateDBSecurityGroup"
                                                        "2014-10-31"))
      common-lisp:nil "CreateDBSecurityGroupResult" *error-map*)))
 (common-lisp:export 'create-dbsecurity-group))
(common-lisp:progn
 (common-lisp:defun create-dbsnapshot
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key dbsnapshot-identifier
                     dbinstance-identifier tags)
   (common-lisp:declare
    (common-lisp:ignorable dbsnapshot-identifier dbinstance-identifier tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-dbsnapshot-message
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'rds-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CreateDBSnapshot"
                                                        "2014-10-31"))
      common-lisp:nil "CreateDBSnapshotResult" *error-map*)))
 (common-lisp:export 'create-dbsnapshot))
(common-lisp:progn
 (common-lisp:defun create-dbsubnet-group
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key dbsubnet-group-name
                     dbsubnet-group-description subnet-ids tags)
   (common-lisp:declare
    (common-lisp:ignorable dbsubnet-group-name dbsubnet-group-description
     subnet-ids tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-dbsubnet-group-message
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'rds-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CreateDBSubnetGroup"
                                                        "2014-10-31"))
      common-lisp:nil "CreateDBSubnetGroupResult" *error-map*)))
 (common-lisp:export 'create-dbsubnet-group))
(common-lisp:progn
 (common-lisp:defun create-event-subscription
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key subscription-name sns-topic-arn
                     source-type event-categories source-ids enabled tags)
   (common-lisp:declare
    (common-lisp:ignorable subscription-name sns-topic-arn source-type
     event-categories source-ids enabled tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-create-event-subscription-message
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'rds-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CreateEventSubscription"
                                                        "2014-10-31"))
      common-lisp:nil "CreateEventSubscriptionResult" *error-map*)))
 (common-lisp:export 'create-event-subscription))
(common-lisp:progn
 (common-lisp:defun create-global-cluster
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key global-cluster-identifier
                     source-dbcluster-identifier engine engine-version
                     deletion-protection database-name storage-encrypted)
   (common-lisp:declare
    (common-lisp:ignorable global-cluster-identifier
     source-dbcluster-identifier engine engine-version deletion-protection
     database-name storage-encrypted))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-global-cluster-message
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'rds-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CreateGlobalCluster"
                                                        "2014-10-31"))
      common-lisp:nil "CreateGlobalClusterResult" *error-map*)))
 (common-lisp:export 'create-global-cluster))
(common-lisp:progn
 (common-lisp:defun create-option-group
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key option-group-name engine-name
                     major-engine-version option-group-description tags)
   (common-lisp:declare
    (common-lisp:ignorable option-group-name engine-name major-engine-version
     option-group-description tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-option-group-message
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'rds-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CreateOptionGroup"
                                                        "2014-10-31"))
      common-lisp:nil "CreateOptionGroupResult" *error-map*)))
 (common-lisp:export 'create-option-group))
(common-lisp:progn
 (common-lisp:defun delete-blue-green-deployment
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key blue-green-deployment-identifier
                     delete-target)
   (common-lisp:declare
    (common-lisp:ignorable blue-green-deployment-identifier delete-target))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-delete-blue-green-deployment-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'rds-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteBlueGreenDeployment"
                                                        "2014-10-31"))
      common-lisp:nil "DeleteBlueGreenDeploymentResult" *error-map*)))
 (common-lisp:export 'delete-blue-green-deployment))
(common-lisp:progn
 (common-lisp:defun delete-custom-dbengine-version
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key engine engine-version)
   (common-lisp:declare (common-lisp:ignorable engine engine-version))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-delete-custom-dbengine-version-message
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'rds-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteCustomDBEngineVersion"
                                                        "2014-10-31"))
      common-lisp:nil "DeleteCustomDBEngineVersionResult" *error-map*)))
 (common-lisp:export 'delete-custom-dbengine-version))
(common-lisp:progn
 (common-lisp:defun delete-dbcluster
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key dbcluster-identifier skip-final-snapshot
                     final-dbsnapshot-identifier)
   (common-lisp:declare
    (common-lisp:ignorable dbcluster-identifier skip-final-snapshot
     final-dbsnapshot-identifier))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-dbcluster-message
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'rds-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteDBCluster"
                                                        "2014-10-31"))
      common-lisp:nil "DeleteDBClusterResult" *error-map*)))
 (common-lisp:export 'delete-dbcluster))
(common-lisp:progn
 (common-lisp:defun delete-dbcluster-endpoint
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key dbcluster-endpoint-identifier)
   (common-lisp:declare (common-lisp:ignorable dbcluster-endpoint-identifier))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-delete-dbcluster-endpoint-message
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'rds-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteDBClusterEndpoint"
                                                        "2014-10-31"))
      common-lisp:nil "DeleteDBClusterEndpointResult" *error-map*)))
 (common-lisp:export 'delete-dbcluster-endpoint))
(common-lisp:progn
 (common-lisp:defun delete-dbcluster-parameter-group
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key dbcluster-parameter-group-name)
   (common-lisp:declare (common-lisp:ignorable dbcluster-parameter-group-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-delete-dbcluster-parameter-group-message
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'rds-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteDBClusterParameterGroup"
                                                        "2014-10-31"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-dbcluster-parameter-group))
(common-lisp:progn
 (common-lisp:defun delete-dbcluster-snapshot
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key dbcluster-snapshot-identifier)
   (common-lisp:declare (common-lisp:ignorable dbcluster-snapshot-identifier))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-delete-dbcluster-snapshot-message
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'rds-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteDBClusterSnapshot"
                                                        "2014-10-31"))
      common-lisp:nil "DeleteDBClusterSnapshotResult" *error-map*)))
 (common-lisp:export 'delete-dbcluster-snapshot))
(common-lisp:progn
 (common-lisp:defun delete-dbinstance
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key dbinstance-identifier skip-final-snapshot
                     final-dbsnapshot-identifier delete-automated-backups)
   (common-lisp:declare
    (common-lisp:ignorable dbinstance-identifier skip-final-snapshot
     final-dbsnapshot-identifier delete-automated-backups))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-dbinstance-message
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'rds-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteDBInstance"
                                                        "2014-10-31"))
      common-lisp:nil "DeleteDBInstanceResult" *error-map*)))
 (common-lisp:export 'delete-dbinstance))
(common-lisp:progn
 (common-lisp:defun delete-dbinstance-automated-backup
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key dbi-resource-id
                     dbinstance-automated-backups-arn)
   (common-lisp:declare
    (common-lisp:ignorable dbi-resource-id dbinstance-automated-backups-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-delete-dbinstance-automated-backup-message
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'rds-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteDBInstanceAutomatedBackup"
                                                        "2014-10-31"))
      common-lisp:nil "DeleteDBInstanceAutomatedBackupResult" *error-map*)))
 (common-lisp:export 'delete-dbinstance-automated-backup))
(common-lisp:progn
 (common-lisp:defun delete-dbparameter-group
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key dbparameter-group-name)
   (common-lisp:declare (common-lisp:ignorable dbparameter-group-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-dbparameter-group-message
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'rds-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteDBParameterGroup"
                                                        "2014-10-31"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-dbparameter-group))
(common-lisp:progn
 (common-lisp:defun delete-dbproxy
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key dbproxy-name)
   (common-lisp:declare (common-lisp:ignorable dbproxy-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-dbproxy-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'rds-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteDBProxy"
                                                        "2014-10-31"))
      common-lisp:nil "DeleteDBProxyResult" *error-map*)))
 (common-lisp:export 'delete-dbproxy))
(common-lisp:progn
 (common-lisp:defun delete-dbproxy-endpoint
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key dbproxy-endpoint-name)
   (common-lisp:declare (common-lisp:ignorable dbproxy-endpoint-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-dbproxy-endpoint-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'rds-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteDBProxyEndpoint"
                                                        "2014-10-31"))
      common-lisp:nil "DeleteDBProxyEndpointResult" *error-map*)))
 (common-lisp:export 'delete-dbproxy-endpoint))
(common-lisp:progn
 (common-lisp:defun delete-dbsecurity-group
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key dbsecurity-group-name)
   (common-lisp:declare (common-lisp:ignorable dbsecurity-group-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-dbsecurity-group-message
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'rds-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteDBSecurityGroup"
                                                        "2014-10-31"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-dbsecurity-group))
(common-lisp:progn
 (common-lisp:defun delete-dbsnapshot
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key dbsnapshot-identifier)
   (common-lisp:declare (common-lisp:ignorable dbsnapshot-identifier))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-dbsnapshot-message
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'rds-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteDBSnapshot"
                                                        "2014-10-31"))
      common-lisp:nil "DeleteDBSnapshotResult" *error-map*)))
 (common-lisp:export 'delete-dbsnapshot))
(common-lisp:progn
 (common-lisp:defun delete-dbsubnet-group
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key dbsubnet-group-name)
   (common-lisp:declare (common-lisp:ignorable dbsubnet-group-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-dbsubnet-group-message
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'rds-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteDBSubnetGroup"
                                                        "2014-10-31"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-dbsubnet-group))
(common-lisp:progn
 (common-lisp:defun delete-event-subscription
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key subscription-name)
   (common-lisp:declare (common-lisp:ignorable subscription-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-delete-event-subscription-message
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'rds-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteEventSubscription"
                                                        "2014-10-31"))
      common-lisp:nil "DeleteEventSubscriptionResult" *error-map*)))
 (common-lisp:export 'delete-event-subscription))
(common-lisp:progn
 (common-lisp:defun delete-global-cluster
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key global-cluster-identifier)
   (common-lisp:declare (common-lisp:ignorable global-cluster-identifier))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-global-cluster-message
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'rds-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteGlobalCluster"
                                                        "2014-10-31"))
      common-lisp:nil "DeleteGlobalClusterResult" *error-map*)))
 (common-lisp:export 'delete-global-cluster))
(common-lisp:progn
 (common-lisp:defun delete-option-group
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key option-group-name)
   (common-lisp:declare (common-lisp:ignorable option-group-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-option-group-message
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'rds-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteOptionGroup"
                                                        "2014-10-31"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-option-group))
(common-lisp:progn
 (common-lisp:defun deregister-dbproxy-targets
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key dbproxy-name target-group-name
                     dbinstance-identifiers dbcluster-identifiers)
   (common-lisp:declare
    (common-lisp:ignorable dbproxy-name target-group-name
     dbinstance-identifiers dbcluster-identifiers))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-deregister-dbproxy-targets-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'rds-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeregisterDBProxyTargets"
                                                        "2014-10-31"))
      common-lisp:nil "DeregisterDBProxyTargetsResult" *error-map*)))
 (common-lisp:export 'deregister-dbproxy-targets))
(common-lisp:progn
 (common-lisp:defun describe-account-attributes ()
   (aws-sdk/generator/operation::parse-response
    (aws-sdk/api:aws-request
     (common-lisp:make-instance 'rds-request :method "POST" :path "/" :params
                                `(("Action" ,@"DescribeAccountAttributes")
                                  ("Version" ,@"2014-10-31"))))
    common-lisp:nil "DescribeAccountAttributesResult" *error-map*))
 (common-lisp:export 'describe-account-attributes))
(common-lisp:progn
 (common-lisp:defun describe-blue-green-deployments
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key blue-green-deployment-identifier filters
                     marker max-records)
   (common-lisp:declare
    (common-lisp:ignorable blue-green-deployment-identifier filters marker
     max-records))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-blue-green-deployments-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'rds-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeBlueGreenDeployments"
                                                        "2014-10-31"))
      common-lisp:nil "DescribeBlueGreenDeploymentsResult" *error-map*)))
 (common-lisp:export 'describe-blue-green-deployments))
(common-lisp:progn
 (common-lisp:defun describe-certificates
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key certificate-identifier filters
                     max-records marker)
   (common-lisp:declare
    (common-lisp:ignorable certificate-identifier filters max-records marker))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-certificates-message
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'rds-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeCertificates"
                                                        "2014-10-31"))
      common-lisp:nil "DescribeCertificatesResult" *error-map*)))
 (common-lisp:export 'describe-certificates))
(common-lisp:progn
 (common-lisp:defun describe-dbcluster-backtracks
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key dbcluster-identifier backtrack-identifier
                     filters max-records marker)
   (common-lisp:declare
    (common-lisp:ignorable dbcluster-identifier backtrack-identifier filters
     max-records marker))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-dbcluster-backtracks-message
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'rds-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeDBClusterBacktracks"
                                                        "2014-10-31"))
      common-lisp:nil "DescribeDBClusterBacktracksResult" *error-map*)))
 (common-lisp:export 'describe-dbcluster-backtracks))
(common-lisp:progn
 (common-lisp:defun describe-dbcluster-endpoints
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key dbcluster-identifier
                     dbcluster-endpoint-identifier filters max-records marker)
   (common-lisp:declare
    (common-lisp:ignorable dbcluster-identifier dbcluster-endpoint-identifier
     filters max-records marker))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-dbcluster-endpoints-message
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'rds-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeDBClusterEndpoints"
                                                        "2014-10-31"))
      common-lisp:nil "DescribeDBClusterEndpointsResult" *error-map*)))
 (common-lisp:export 'describe-dbcluster-endpoints))
(common-lisp:progn
 (common-lisp:defun describe-dbcluster-parameter-groups
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key dbcluster-parameter-group-name filters
                     max-records marker)
   (common-lisp:declare
    (common-lisp:ignorable dbcluster-parameter-group-name filters max-records
     marker))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-dbcluster-parameter-groups-message
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'rds-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeDBClusterParameterGroups"
                                                        "2014-10-31"))
      common-lisp:nil "DescribeDBClusterParameterGroupsResult" *error-map*)))
 (common-lisp:export 'describe-dbcluster-parameter-groups))
(common-lisp:progn
 (common-lisp:defun describe-dbcluster-parameters
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key dbcluster-parameter-group-name source
                     filters max-records marker)
   (common-lisp:declare
    (common-lisp:ignorable dbcluster-parameter-group-name source filters
     max-records marker))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-dbcluster-parameters-message
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'rds-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeDBClusterParameters"
                                                        "2014-10-31"))
      common-lisp:nil "DescribeDBClusterParametersResult" *error-map*)))
 (common-lisp:export 'describe-dbcluster-parameters))
(common-lisp:progn
 (common-lisp:defun describe-dbcluster-snapshot-attributes
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key dbcluster-snapshot-identifier)
   (common-lisp:declare (common-lisp:ignorable dbcluster-snapshot-identifier))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-dbcluster-snapshot-attributes-message
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'rds-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeDBClusterSnapshotAttributes"
                                                        "2014-10-31"))
      common-lisp:nil "DescribeDBClusterSnapshotAttributesResult"
      *error-map*)))
 (common-lisp:export 'describe-dbcluster-snapshot-attributes))
(common-lisp:progn
 (common-lisp:defun describe-dbcluster-snapshots
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key dbcluster-identifier
                     dbcluster-snapshot-identifier snapshot-type filters
                     max-records marker include-shared include-public)
   (common-lisp:declare
    (common-lisp:ignorable dbcluster-identifier dbcluster-snapshot-identifier
     snapshot-type filters max-records marker include-shared include-public))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-dbcluster-snapshots-message
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'rds-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeDBClusterSnapshots"
                                                        "2014-10-31"))
      common-lisp:nil "DescribeDBClusterSnapshotsResult" *error-map*)))
 (common-lisp:export 'describe-dbcluster-snapshots))
(common-lisp:progn
 (common-lisp:defun describe-dbclusters
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key dbcluster-identifier filters max-records
                     marker include-shared)
   (common-lisp:declare
    (common-lisp:ignorable dbcluster-identifier filters max-records marker
     include-shared))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-dbclusters-message
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'rds-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeDBClusters"
                                                        "2014-10-31"))
      common-lisp:nil "DescribeDBClustersResult" *error-map*)))
 (common-lisp:export 'describe-dbclusters))
(common-lisp:progn
 (common-lisp:defun describe-dbengine-versions
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key engine engine-version
                     dbparameter-group-family filters max-records marker
                     default-only list-supported-character-sets
                     list-supported-timezones include-all)
   (common-lisp:declare
    (common-lisp:ignorable engine engine-version dbparameter-group-family
     filters max-records marker default-only list-supported-character-sets
     list-supported-timezones include-all))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-dbengine-versions-message
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'rds-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeDBEngineVersions"
                                                        "2014-10-31"))
      common-lisp:nil "DescribeDBEngineVersionsResult" *error-map*)))
 (common-lisp:export 'describe-dbengine-versions))
(common-lisp:progn
 (common-lisp:defun describe-dbinstance-automated-backups
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key dbi-resource-id dbinstance-identifier
                     filters max-records marker
                     dbinstance-automated-backups-arn)
   (common-lisp:declare
    (common-lisp:ignorable dbi-resource-id dbinstance-identifier filters
     max-records marker dbinstance-automated-backups-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-dbinstance-automated-backups-message
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'rds-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeDBInstanceAutomatedBackups"
                                                        "2014-10-31"))
      common-lisp:nil "DescribeDBInstanceAutomatedBackupsResult" *error-map*)))
 (common-lisp:export 'describe-dbinstance-automated-backups))
(common-lisp:progn
 (common-lisp:defun describe-dbinstances
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key dbinstance-identifier filters max-records
                     marker)
   (common-lisp:declare
    (common-lisp:ignorable dbinstance-identifier filters max-records marker))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-dbinstances-message
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'rds-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeDBInstances"
                                                        "2014-10-31"))
      common-lisp:nil "DescribeDBInstancesResult" *error-map*)))
 (common-lisp:export 'describe-dbinstances))
(common-lisp:progn
 (common-lisp:defun describe-dblog-files
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key dbinstance-identifier filename-contains
                     file-last-written file-size filters max-records marker)
   (common-lisp:declare
    (common-lisp:ignorable dbinstance-identifier filename-contains
     file-last-written file-size filters max-records marker))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-dblog-files-message
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'rds-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeDBLogFiles"
                                                        "2014-10-31"))
      common-lisp:nil "DescribeDBLogFilesResult" *error-map*)))
 (common-lisp:export 'describe-dblog-files))
(common-lisp:progn
 (common-lisp:defun describe-dbparameter-groups
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key dbparameter-group-name filters
                     max-records marker)
   (common-lisp:declare
    (common-lisp:ignorable dbparameter-group-name filters max-records marker))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-dbparameter-groups-message
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'rds-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeDBParameterGroups"
                                                        "2014-10-31"))
      common-lisp:nil "DescribeDBParameterGroupsResult" *error-map*)))
 (common-lisp:export 'describe-dbparameter-groups))
(common-lisp:progn
 (common-lisp:defun describe-dbparameters
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key dbparameter-group-name source filters
                     max-records marker)
   (common-lisp:declare
    (common-lisp:ignorable dbparameter-group-name source filters max-records
     marker))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-dbparameters-message
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'rds-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeDBParameters"
                                                        "2014-10-31"))
      common-lisp:nil "DescribeDBParametersResult" *error-map*)))
 (common-lisp:export 'describe-dbparameters))
(common-lisp:progn
 (common-lisp:defun describe-dbproxies
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key dbproxy-name filters marker max-records)
   (common-lisp:declare
    (common-lisp:ignorable dbproxy-name filters marker max-records))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-dbproxies-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'rds-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeDBProxies"
                                                        "2014-10-31"))
      common-lisp:nil "DescribeDBProxiesResult" *error-map*)))
 (common-lisp:export 'describe-dbproxies))
(common-lisp:progn
 (common-lisp:defun describe-dbproxy-endpoints
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key dbproxy-name dbproxy-endpoint-name
                     filters marker max-records)
   (common-lisp:declare
    (common-lisp:ignorable dbproxy-name dbproxy-endpoint-name filters marker
     max-records))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-dbproxy-endpoints-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'rds-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeDBProxyEndpoints"
                                                        "2014-10-31"))
      common-lisp:nil "DescribeDBProxyEndpointsResult" *error-map*)))
 (common-lisp:export 'describe-dbproxy-endpoints))
(common-lisp:progn
 (common-lisp:defun describe-dbproxy-target-groups
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key dbproxy-name target-group-name filters
                     marker max-records)
   (common-lisp:declare
    (common-lisp:ignorable dbproxy-name target-group-name filters marker
     max-records))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-dbproxy-target-groups-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'rds-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeDBProxyTargetGroups"
                                                        "2014-10-31"))
      common-lisp:nil "DescribeDBProxyTargetGroupsResult" *error-map*)))
 (common-lisp:export 'describe-dbproxy-target-groups))
(common-lisp:progn
 (common-lisp:defun describe-dbproxy-targets
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key dbproxy-name target-group-name filters
                     marker max-records)
   (common-lisp:declare
    (common-lisp:ignorable dbproxy-name target-group-name filters marker
     max-records))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-dbproxy-targets-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'rds-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeDBProxyTargets"
                                                        "2014-10-31"))
      common-lisp:nil "DescribeDBProxyTargetsResult" *error-map*)))
 (common-lisp:export 'describe-dbproxy-targets))
(common-lisp:progn
 (common-lisp:defun describe-dbsecurity-groups
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key dbsecurity-group-name filters max-records
                     marker)
   (common-lisp:declare
    (common-lisp:ignorable dbsecurity-group-name filters max-records marker))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-dbsecurity-groups-message
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'rds-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeDBSecurityGroups"
                                                        "2014-10-31"))
      common-lisp:nil "DescribeDBSecurityGroupsResult" *error-map*)))
 (common-lisp:export 'describe-dbsecurity-groups))
(common-lisp:progn
 (common-lisp:defun describe-dbsnapshot-attributes
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key dbsnapshot-identifier)
   (common-lisp:declare (common-lisp:ignorable dbsnapshot-identifier))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-dbsnapshot-attributes-message
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'rds-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeDBSnapshotAttributes"
                                                        "2014-10-31"))
      common-lisp:nil "DescribeDBSnapshotAttributesResult" *error-map*)))
 (common-lisp:export 'describe-dbsnapshot-attributes))
(common-lisp:progn
 (common-lisp:defun describe-dbsnapshots
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key dbinstance-identifier
                     dbsnapshot-identifier snapshot-type filters max-records
                     marker include-shared include-public dbi-resource-id)
   (common-lisp:declare
    (common-lisp:ignorable dbinstance-identifier dbsnapshot-identifier
     snapshot-type filters max-records marker include-shared include-public
     dbi-resource-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-dbsnapshots-message
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'rds-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeDBSnapshots"
                                                        "2014-10-31"))
      common-lisp:nil "DescribeDBSnapshotsResult" *error-map*)))
 (common-lisp:export 'describe-dbsnapshots))
(common-lisp:progn
 (common-lisp:defun describe-dbsubnet-groups
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key dbsubnet-group-name filters max-records
                     marker)
   (common-lisp:declare
    (common-lisp:ignorable dbsubnet-group-name filters max-records marker))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-dbsubnet-groups-message
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'rds-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeDBSubnetGroups"
                                                        "2014-10-31"))
      common-lisp:nil "DescribeDBSubnetGroupsResult" *error-map*)))
 (common-lisp:export 'describe-dbsubnet-groups))
(common-lisp:progn
 (common-lisp:defun describe-engine-default-cluster-parameters
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key dbparameter-group-family filters
                     max-records marker)
   (common-lisp:declare
    (common-lisp:ignorable dbparameter-group-family filters max-records
     marker))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-engine-default-cluster-parameters-message
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'rds-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeEngineDefaultClusterParameters"
                                                        "2014-10-31"))
      common-lisp:nil "DescribeEngineDefaultClusterParametersResult"
      *error-map*)))
 (common-lisp:export 'describe-engine-default-cluster-parameters))
(common-lisp:progn
 (common-lisp:defun describe-engine-default-parameters
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key dbparameter-group-family filters
                     max-records marker)
   (common-lisp:declare
    (common-lisp:ignorable dbparameter-group-family filters max-records
     marker))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-engine-default-parameters-message
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'rds-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeEngineDefaultParameters"
                                                        "2014-10-31"))
      common-lisp:nil "DescribeEngineDefaultParametersResult" *error-map*)))
 (common-lisp:export 'describe-engine-default-parameters))
(common-lisp:progn
 (common-lisp:defun describe-event-categories
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key source-type filters)
   (common-lisp:declare (common-lisp:ignorable source-type filters))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-event-categories-message
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'rds-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeEventCategories"
                                                        "2014-10-31"))
      common-lisp:nil "DescribeEventCategoriesResult" *error-map*)))
 (common-lisp:export 'describe-event-categories))
(common-lisp:progn
 (common-lisp:defun describe-event-subscriptions
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key subscription-name filters max-records
                     marker)
   (common-lisp:declare
    (common-lisp:ignorable subscription-name filters max-records marker))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-event-subscriptions-message
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'rds-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeEventSubscriptions"
                                                        "2014-10-31"))
      common-lisp:nil "DescribeEventSubscriptionsResult" *error-map*)))
 (common-lisp:export 'describe-event-subscriptions))
(common-lisp:progn
 (common-lisp:defun describe-events
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key source-identifier source-type start-time
                     end-time duration event-categories filters max-records
                     marker)
   (common-lisp:declare
    (common-lisp:ignorable source-identifier source-type start-time end-time
     duration event-categories filters max-records marker))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-events-message
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'rds-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeEvents"
                                                        "2014-10-31"))
      common-lisp:nil "DescribeEventsResult" *error-map*)))
 (common-lisp:export 'describe-events))
(common-lisp:progn
 (common-lisp:defun describe-export-tasks
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key export-task-identifier source-arn filters
                     marker max-records source-type)
   (common-lisp:declare
    (common-lisp:ignorable export-task-identifier source-arn filters marker
     max-records source-type))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-export-tasks-message
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'rds-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeExportTasks"
                                                        "2014-10-31"))
      common-lisp:nil "DescribeExportTasksResult" *error-map*)))
 (common-lisp:export 'describe-export-tasks))
(common-lisp:progn
 (common-lisp:defun describe-global-clusters
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key global-cluster-identifier filters
                     max-records marker)
   (common-lisp:declare
    (common-lisp:ignorable global-cluster-identifier filters max-records
     marker))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-global-clusters-message
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'rds-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeGlobalClusters"
                                                        "2014-10-31"))
      common-lisp:nil "DescribeGlobalClustersResult" *error-map*)))
 (common-lisp:export 'describe-global-clusters))
(common-lisp:progn
 (common-lisp:defun describe-option-group-options
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key engine-name major-engine-version filters
                     max-records marker)
   (common-lisp:declare
    (common-lisp:ignorable engine-name major-engine-version filters max-records
     marker))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-option-group-options-message
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'rds-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeOptionGroupOptions"
                                                        "2014-10-31"))
      common-lisp:nil "DescribeOptionGroupOptionsResult" *error-map*)))
 (common-lisp:export 'describe-option-group-options))
(common-lisp:progn
 (common-lisp:defun describe-option-groups
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key option-group-name filters marker
                     max-records engine-name major-engine-version)
   (common-lisp:declare
    (common-lisp:ignorable option-group-name filters marker max-records
     engine-name major-engine-version))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-option-groups-message
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'rds-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeOptionGroups"
                                                        "2014-10-31"))
      common-lisp:nil "DescribeOptionGroupsResult" *error-map*)))
 (common-lisp:export 'describe-option-groups))
(common-lisp:progn
 (common-lisp:defun describe-orderable-dbinstance-options
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key engine engine-version dbinstance-class
                     license-model availability-zone-group vpc filters
                     max-records marker)
   (common-lisp:declare
    (common-lisp:ignorable engine engine-version dbinstance-class license-model
     availability-zone-group vpc filters max-records marker))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-orderable-dbinstance-options-message
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'rds-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeOrderableDBInstanceOptions"
                                                        "2014-10-31"))
      common-lisp:nil "DescribeOrderableDBInstanceOptionsResult" *error-map*)))
 (common-lisp:export 'describe-orderable-dbinstance-options))
(common-lisp:progn
 (common-lisp:defun describe-pending-maintenance-actions
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-identifier filters marker
                     max-records)
   (common-lisp:declare
    (common-lisp:ignorable resource-identifier filters marker max-records))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-pending-maintenance-actions-message
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'rds-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribePendingMaintenanceActions"
                                                        "2014-10-31"))
      common-lisp:nil "DescribePendingMaintenanceActionsResult" *error-map*)))
 (common-lisp:export 'describe-pending-maintenance-actions))
(common-lisp:progn
 (common-lisp:defun describe-reserved-dbinstances
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key reserved-dbinstance-id
                     reserved-dbinstances-offering-id dbinstance-class duration
                     product-description offering-type multi-az lease-id
                     filters max-records marker)
   (common-lisp:declare
    (common-lisp:ignorable reserved-dbinstance-id
     reserved-dbinstances-offering-id dbinstance-class duration
     product-description offering-type multi-az lease-id filters max-records
     marker))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-reserved-dbinstances-message
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'rds-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeReservedDBInstances"
                                                        "2014-10-31"))
      common-lisp:nil "DescribeReservedDBInstancesResult" *error-map*)))
 (common-lisp:export 'describe-reserved-dbinstances))
(common-lisp:progn
 (common-lisp:defun describe-reserved-dbinstances-offerings
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key reserved-dbinstances-offering-id
                     dbinstance-class duration product-description
                     offering-type multi-az filters max-records marker)
   (common-lisp:declare
    (common-lisp:ignorable reserved-dbinstances-offering-id dbinstance-class
     duration product-description offering-type multi-az filters max-records
     marker))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-reserved-dbinstances-offerings-message
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'rds-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeReservedDBInstancesOfferings"
                                                        "2014-10-31"))
      common-lisp:nil "DescribeReservedDBInstancesOfferingsResult"
      *error-map*)))
 (common-lisp:export 'describe-reserved-dbinstances-offerings))
(common-lisp:progn
 (common-lisp:defun describe-source-regions
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key region-name max-records marker filters)
   (common-lisp:declare
    (common-lisp:ignorable region-name max-records marker filters))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-source-regions-message
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'rds-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeSourceRegions"
                                                        "2014-10-31"))
      common-lisp:nil "DescribeSourceRegionsResult" *error-map*)))
 (common-lisp:export 'describe-source-regions))
(common-lisp:progn
 (common-lisp:defun describe-valid-dbinstance-modifications
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key dbinstance-identifier)
   (common-lisp:declare (common-lisp:ignorable dbinstance-identifier))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-valid-dbinstance-modifications-message
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'rds-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeValidDBInstanceModifications"
                                                        "2014-10-31"))
      common-lisp:nil "DescribeValidDBInstanceModificationsResult"
      *error-map*)))
 (common-lisp:export 'describe-valid-dbinstance-modifications))
(common-lisp:progn
 (common-lisp:defun download-dblog-file-portion
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key dbinstance-identifier log-file-name
                     marker number-of-lines)
   (common-lisp:declare
    (common-lisp:ignorable dbinstance-identifier log-file-name marker
     number-of-lines))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-download-dblog-file-portion-message
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'rds-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DownloadDBLogFilePortion"
                                                        "2014-10-31"))
      common-lisp:nil "DownloadDBLogFilePortionResult" *error-map*)))
 (common-lisp:export 'download-dblog-file-portion))
(common-lisp:progn
 (common-lisp:defun failover-dbcluster
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key dbcluster-identifier
                     target-dbinstance-identifier)
   (common-lisp:declare
    (common-lisp:ignorable dbcluster-identifier target-dbinstance-identifier))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-failover-dbcluster-message
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'rds-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "FailoverDBCluster"
                                                        "2014-10-31"))
      common-lisp:nil "FailoverDBClusterResult" *error-map*)))
 (common-lisp:export 'failover-dbcluster))
(common-lisp:progn
 (common-lisp:defun failover-global-cluster
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key global-cluster-identifier
                     target-db-cluster-identifier)
   (common-lisp:declare
    (common-lisp:ignorable global-cluster-identifier
     target-db-cluster-identifier))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-failover-global-cluster-message
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'rds-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "FailoverGlobalCluster"
                                                        "2014-10-31"))
      common-lisp:nil "FailoverGlobalClusterResult" *error-map*)))
 (common-lisp:export 'failover-global-cluster))
(common-lisp:progn
 (common-lisp:defun list-tags-for-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-name filters)
   (common-lisp:declare (common-lisp:ignorable resource-name filters))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-tags-for-resource-message
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'rds-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ListTagsForResource"
                                                        "2014-10-31"))
      common-lisp:nil "ListTagsForResourceResult" *error-map*)))
 (common-lisp:export 'list-tags-for-resource))
(common-lisp:progn
 (common-lisp:defun modify-activity-stream
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn audit-policy-state)
   (common-lisp:declare
    (common-lisp:ignorable resource-arn audit-policy-state))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-modify-activity-stream-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'rds-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ModifyActivityStream"
                                                        "2014-10-31"))
      common-lisp:nil "ModifyActivityStreamResult" *error-map*)))
 (common-lisp:export 'modify-activity-stream))
(common-lisp:progn
 (common-lisp:defun modify-certificates
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key certificate-identifier
                     remove-customer-override)
   (common-lisp:declare
    (common-lisp:ignorable certificate-identifier remove-customer-override))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-modify-certificates-message
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'rds-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ModifyCertificates"
                                                        "2014-10-31"))
      common-lisp:nil "ModifyCertificatesResult" *error-map*)))
 (common-lisp:export 'modify-certificates))
(common-lisp:progn
 (common-lisp:defun modify-current-dbcluster-capacity
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key dbcluster-identifier capacity
                     seconds-before-timeout timeout-action)
   (common-lisp:declare
    (common-lisp:ignorable dbcluster-identifier capacity seconds-before-timeout
     timeout-action))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-modify-current-dbcluster-capacity-message
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'rds-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ModifyCurrentDBClusterCapacity"
                                                        "2014-10-31"))
      common-lisp:nil "ModifyCurrentDBClusterCapacityResult" *error-map*)))
 (common-lisp:export 'modify-current-dbcluster-capacity))
(common-lisp:progn
 (common-lisp:defun modify-custom-dbengine-version
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key engine engine-version description status)
   (common-lisp:declare
    (common-lisp:ignorable engine engine-version description status))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-modify-custom-dbengine-version-message
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'rds-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ModifyCustomDBEngineVersion"
                                                        "2014-10-31"))
      common-lisp:nil "ModifyCustomDBEngineVersionResult" *error-map*)))
 (common-lisp:export 'modify-custom-dbengine-version))
(common-lisp:progn
 (common-lisp:defun modify-dbcluster
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key dbcluster-identifier
                     new-dbcluster-identifier apply-immediately
                     backup-retention-period dbcluster-parameter-group-name
                     vpc-security-group-ids port master-user-password
                     option-group-name preferred-backup-window
                     preferred-maintenance-window
                     enable-iamdatabase-authentication backtrack-window
                     cloudwatch-logs-export-configuration engine-version
                     allow-major-version-upgrade
                     dbinstance-parameter-group-name domain domain-iamrole-name
                     scaling-configuration deletion-protection
                     enable-http-endpoint copy-tags-to-snapshot
                     enable-global-write-forwarding dbcluster-instance-class
                     allocated-storage storage-type iops
                     auto-minor-version-upgrade monitoring-interval
                     monitoring-role-arn enable-performance-insights
                     performance-insights-kmskey-id
                     performance-insights-retention-period
                     serverless-v2scaling-configuration network-type
                     manage-master-user-password rotate-master-user-password
                     master-user-secret-kms-key-id)
   (common-lisp:declare
    (common-lisp:ignorable dbcluster-identifier new-dbcluster-identifier
     apply-immediately backup-retention-period dbcluster-parameter-group-name
     vpc-security-group-ids port master-user-password option-group-name
     preferred-backup-window preferred-maintenance-window
     enable-iamdatabase-authentication backtrack-window
     cloudwatch-logs-export-configuration engine-version
     allow-major-version-upgrade dbinstance-parameter-group-name domain
     domain-iamrole-name scaling-configuration deletion-protection
     enable-http-endpoint copy-tags-to-snapshot enable-global-write-forwarding
     dbcluster-instance-class allocated-storage storage-type iops
     auto-minor-version-upgrade monitoring-interval monitoring-role-arn
     enable-performance-insights performance-insights-kmskey-id
     performance-insights-retention-period serverless-v2scaling-configuration
     network-type manage-master-user-password rotate-master-user-password
     master-user-secret-kms-key-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-modify-dbcluster-message
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'rds-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ModifyDBCluster"
                                                        "2014-10-31"))
      common-lisp:nil "ModifyDBClusterResult" *error-map*)))
 (common-lisp:export 'modify-dbcluster))
(common-lisp:progn
 (common-lisp:defun modify-dbcluster-endpoint
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key dbcluster-endpoint-identifier
                     endpoint-type static-members excluded-members)
   (common-lisp:declare
    (common-lisp:ignorable dbcluster-endpoint-identifier endpoint-type
     static-members excluded-members))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-modify-dbcluster-endpoint-message
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'rds-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ModifyDBClusterEndpoint"
                                                        "2014-10-31"))
      common-lisp:nil "ModifyDBClusterEndpointResult" *error-map*)))
 (common-lisp:export 'modify-dbcluster-endpoint))
(common-lisp:progn
 (common-lisp:defun modify-dbcluster-parameter-group
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key dbcluster-parameter-group-name
                     parameters)
   (common-lisp:declare
    (common-lisp:ignorable dbcluster-parameter-group-name parameters))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-modify-dbcluster-parameter-group-message
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'rds-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ModifyDBClusterParameterGroup"
                                                        "2014-10-31"))
      common-lisp:nil "ModifyDBClusterParameterGroupResult" *error-map*)))
 (common-lisp:export 'modify-dbcluster-parameter-group))
(common-lisp:progn
 (common-lisp:defun modify-dbcluster-snapshot-attribute
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key dbcluster-snapshot-identifier
                     attribute-name values-to-add values-to-remove)
   (common-lisp:declare
    (common-lisp:ignorable dbcluster-snapshot-identifier attribute-name
     values-to-add values-to-remove))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-modify-dbcluster-snapshot-attribute-message
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'rds-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ModifyDBClusterSnapshotAttribute"
                                                        "2014-10-31"))
      common-lisp:nil "ModifyDBClusterSnapshotAttributeResult" *error-map*)))
 (common-lisp:export 'modify-dbcluster-snapshot-attribute))
(common-lisp:progn
 (common-lisp:defun modify-dbinstance
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key dbinstance-identifier allocated-storage
                     dbinstance-class dbsubnet-group-name dbsecurity-groups
                     vpc-security-group-ids apply-immediately
                     master-user-password dbparameter-group-name
                     backup-retention-period preferred-backup-window
                     preferred-maintenance-window multi-az engine-version
                     allow-major-version-upgrade auto-minor-version-upgrade
                     license-model iops option-group-name
                     new-dbinstance-identifier storage-type tde-credential-arn
                     tde-credential-password cacertificate-identifier domain
                     copy-tags-to-snapshot monitoring-interval dbport-number
                     publicly-accessible monitoring-role-arn
                     domain-iamrole-name promotion-tier
                     enable-iamdatabase-authentication
                     enable-performance-insights performance-insights-kmskey-id
                     performance-insights-retention-period
                     cloudwatch-logs-export-configuration processor-features
                     use-default-processor-features deletion-protection
                     max-allocated-storage certificate-rotation-restart
                     replica-mode enable-customer-owned-ip
                     aws-backup-recovery-point-arn automation-mode
                     resume-full-automation-mode-minutes network-type
                     storage-throughput manage-master-user-password
                     rotate-master-user-password master-user-secret-kms-key-id)
   (common-lisp:declare
    (common-lisp:ignorable dbinstance-identifier allocated-storage
     dbinstance-class dbsubnet-group-name dbsecurity-groups
     vpc-security-group-ids apply-immediately master-user-password
     dbparameter-group-name backup-retention-period preferred-backup-window
     preferred-maintenance-window multi-az engine-version
     allow-major-version-upgrade auto-minor-version-upgrade license-model iops
     option-group-name new-dbinstance-identifier storage-type
     tde-credential-arn tde-credential-password cacertificate-identifier domain
     copy-tags-to-snapshot monitoring-interval dbport-number
     publicly-accessible monitoring-role-arn domain-iamrole-name promotion-tier
     enable-iamdatabase-authentication enable-performance-insights
     performance-insights-kmskey-id performance-insights-retention-period
     cloudwatch-logs-export-configuration processor-features
     use-default-processor-features deletion-protection max-allocated-storage
     certificate-rotation-restart replica-mode enable-customer-owned-ip
     aws-backup-recovery-point-arn automation-mode
     resume-full-automation-mode-minutes network-type storage-throughput
     manage-master-user-password rotate-master-user-password
     master-user-secret-kms-key-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-modify-dbinstance-message
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'rds-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ModifyDBInstance"
                                                        "2014-10-31"))
      common-lisp:nil "ModifyDBInstanceResult" *error-map*)))
 (common-lisp:export 'modify-dbinstance))
(common-lisp:progn
 (common-lisp:defun modify-dbparameter-group
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key dbparameter-group-name parameters)
   (common-lisp:declare
    (common-lisp:ignorable dbparameter-group-name parameters))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-modify-dbparameter-group-message
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'rds-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ModifyDBParameterGroup"
                                                        "2014-10-31"))
      common-lisp:nil "ModifyDBParameterGroupResult" *error-map*)))
 (common-lisp:export 'modify-dbparameter-group))
(common-lisp:progn
 (common-lisp:defun modify-dbproxy
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key dbproxy-name new-dbproxy-name auth
                     require-tls idle-client-timeout debug-logging role-arn
                     security-groups)
   (common-lisp:declare
    (common-lisp:ignorable dbproxy-name new-dbproxy-name auth require-tls
     idle-client-timeout debug-logging role-arn security-groups))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-modify-dbproxy-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'rds-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ModifyDBProxy"
                                                        "2014-10-31"))
      common-lisp:nil "ModifyDBProxyResult" *error-map*)))
 (common-lisp:export 'modify-dbproxy))
(common-lisp:progn
 (common-lisp:defun modify-dbproxy-endpoint
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key dbproxy-endpoint-name
                     new-dbproxy-endpoint-name vpc-security-group-ids)
   (common-lisp:declare
    (common-lisp:ignorable dbproxy-endpoint-name new-dbproxy-endpoint-name
     vpc-security-group-ids))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-modify-dbproxy-endpoint-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'rds-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ModifyDBProxyEndpoint"
                                                        "2014-10-31"))
      common-lisp:nil "ModifyDBProxyEndpointResult" *error-map*)))
 (common-lisp:export 'modify-dbproxy-endpoint))
(common-lisp:progn
 (common-lisp:defun modify-dbproxy-target-group
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key target-group-name dbproxy-name
                     connection-pool-config new-name)
   (common-lisp:declare
    (common-lisp:ignorable target-group-name dbproxy-name
     connection-pool-config new-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-modify-dbproxy-target-group-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'rds-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ModifyDBProxyTargetGroup"
                                                        "2014-10-31"))
      common-lisp:nil "ModifyDBProxyTargetGroupResult" *error-map*)))
 (common-lisp:export 'modify-dbproxy-target-group))
(common-lisp:progn
 (common-lisp:defun modify-dbsnapshot
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key dbsnapshot-identifier engine-version
                     option-group-name)
   (common-lisp:declare
    (common-lisp:ignorable dbsnapshot-identifier engine-version
     option-group-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-modify-dbsnapshot-message
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'rds-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ModifyDBSnapshot"
                                                        "2014-10-31"))
      common-lisp:nil "ModifyDBSnapshotResult" *error-map*)))
 (common-lisp:export 'modify-dbsnapshot))
(common-lisp:progn
 (common-lisp:defun modify-dbsnapshot-attribute
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key dbsnapshot-identifier attribute-name
                     values-to-add values-to-remove)
   (common-lisp:declare
    (common-lisp:ignorable dbsnapshot-identifier attribute-name values-to-add
     values-to-remove))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-modify-dbsnapshot-attribute-message
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'rds-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ModifyDBSnapshotAttribute"
                                                        "2014-10-31"))
      common-lisp:nil "ModifyDBSnapshotAttributeResult" *error-map*)))
 (common-lisp:export 'modify-dbsnapshot-attribute))
(common-lisp:progn
 (common-lisp:defun modify-dbsubnet-group
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key dbsubnet-group-name
                     dbsubnet-group-description subnet-ids)
   (common-lisp:declare
    (common-lisp:ignorable dbsubnet-group-name dbsubnet-group-description
     subnet-ids))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-modify-dbsubnet-group-message
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'rds-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ModifyDBSubnetGroup"
                                                        "2014-10-31"))
      common-lisp:nil "ModifyDBSubnetGroupResult" *error-map*)))
 (common-lisp:export 'modify-dbsubnet-group))
(common-lisp:progn
 (common-lisp:defun modify-event-subscription
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key subscription-name sns-topic-arn
                     source-type event-categories enabled)
   (common-lisp:declare
    (common-lisp:ignorable subscription-name sns-topic-arn source-type
     event-categories enabled))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-modify-event-subscription-message
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'rds-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ModifyEventSubscription"
                                                        "2014-10-31"))
      common-lisp:nil "ModifyEventSubscriptionResult" *error-map*)))
 (common-lisp:export 'modify-event-subscription))
(common-lisp:progn
 (common-lisp:defun modify-global-cluster
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key global-cluster-identifier
                     new-global-cluster-identifier deletion-protection
                     engine-version allow-major-version-upgrade)
   (common-lisp:declare
    (common-lisp:ignorable global-cluster-identifier
     new-global-cluster-identifier deletion-protection engine-version
     allow-major-version-upgrade))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-modify-global-cluster-message
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'rds-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ModifyGlobalCluster"
                                                        "2014-10-31"))
      common-lisp:nil "ModifyGlobalClusterResult" *error-map*)))
 (common-lisp:export 'modify-global-cluster))
(common-lisp:progn
 (common-lisp:defun modify-option-group
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key option-group-name options-to-include
                     options-to-remove apply-immediately)
   (common-lisp:declare
    (common-lisp:ignorable option-group-name options-to-include
     options-to-remove apply-immediately))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-modify-option-group-message
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'rds-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ModifyOptionGroup"
                                                        "2014-10-31"))
      common-lisp:nil "ModifyOptionGroupResult" *error-map*)))
 (common-lisp:export 'modify-option-group))
(common-lisp:progn
 (common-lisp:defun promote-read-replica
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key dbinstance-identifier
                     backup-retention-period preferred-backup-window)
   (common-lisp:declare
    (common-lisp:ignorable dbinstance-identifier backup-retention-period
     preferred-backup-window))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-promote-read-replica-message
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'rds-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "PromoteReadReplica"
                                                        "2014-10-31"))
      common-lisp:nil "PromoteReadReplicaResult" *error-map*)))
 (common-lisp:export 'promote-read-replica))
(common-lisp:progn
 (common-lisp:defun promote-read-replica-dbcluster
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key dbcluster-identifier)
   (common-lisp:declare (common-lisp:ignorable dbcluster-identifier))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-promote-read-replica-dbcluster-message
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'rds-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "PromoteReadReplicaDBCluster"
                                                        "2014-10-31"))
      common-lisp:nil "PromoteReadReplicaDBClusterResult" *error-map*)))
 (common-lisp:export 'promote-read-replica-dbcluster))
(common-lisp:progn
 (common-lisp:defun purchase-reserved-dbinstances-offering
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key reserved-dbinstances-offering-id
                     reserved-dbinstance-id dbinstance-count tags)
   (common-lisp:declare
    (common-lisp:ignorable reserved-dbinstances-offering-id
     reserved-dbinstance-id dbinstance-count tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-purchase-reserved-dbinstances-offering-message
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'rds-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "PurchaseReservedDBInstancesOffering"
                                                        "2014-10-31"))
      common-lisp:nil "PurchaseReservedDBInstancesOfferingResult"
      *error-map*)))
 (common-lisp:export 'purchase-reserved-dbinstances-offering))
(common-lisp:progn
 (common-lisp:defun reboot-dbcluster
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key dbcluster-identifier)
   (common-lisp:declare (common-lisp:ignorable dbcluster-identifier))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-reboot-dbcluster-message
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'rds-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "RebootDBCluster"
                                                        "2014-10-31"))
      common-lisp:nil "RebootDBClusterResult" *error-map*)))
 (common-lisp:export 'reboot-dbcluster))
(common-lisp:progn
 (common-lisp:defun reboot-dbinstance
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key dbinstance-identifier force-failover)
   (common-lisp:declare
    (common-lisp:ignorable dbinstance-identifier force-failover))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-reboot-dbinstance-message
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'rds-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "RebootDBInstance"
                                                        "2014-10-31"))
      common-lisp:nil "RebootDBInstanceResult" *error-map*)))
 (common-lisp:export 'reboot-dbinstance))
(common-lisp:progn
 (common-lisp:defun register-dbproxy-targets
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key dbproxy-name target-group-name
                     dbinstance-identifiers dbcluster-identifiers)
   (common-lisp:declare
    (common-lisp:ignorable dbproxy-name target-group-name
     dbinstance-identifiers dbcluster-identifiers))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-register-dbproxy-targets-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'rds-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "RegisterDBProxyTargets"
                                                        "2014-10-31"))
      common-lisp:nil "RegisterDBProxyTargetsResult" *error-map*)))
 (common-lisp:export 'register-dbproxy-targets))
(common-lisp:progn
 (common-lisp:defun remove-from-global-cluster
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key global-cluster-identifier
                     db-cluster-identifier)
   (common-lisp:declare
    (common-lisp:ignorable global-cluster-identifier db-cluster-identifier))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-remove-from-global-cluster-message
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'rds-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "RemoveFromGlobalCluster"
                                                        "2014-10-31"))
      common-lisp:nil "RemoveFromGlobalClusterResult" *error-map*)))
 (common-lisp:export 'remove-from-global-cluster))
(common-lisp:progn
 (common-lisp:defun remove-role-from-dbcluster
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key dbcluster-identifier role-arn
                     feature-name)
   (common-lisp:declare
    (common-lisp:ignorable dbcluster-identifier role-arn feature-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-remove-role-from-dbcluster-message
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'rds-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "RemoveRoleFromDBCluster"
                                                        "2014-10-31"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'remove-role-from-dbcluster))
(common-lisp:progn
 (common-lisp:defun remove-role-from-dbinstance
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key dbinstance-identifier role-arn
                     feature-name)
   (common-lisp:declare
    (common-lisp:ignorable dbinstance-identifier role-arn feature-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-remove-role-from-dbinstance-message
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'rds-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "RemoveRoleFromDBInstance"
                                                        "2014-10-31"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'remove-role-from-dbinstance))
(common-lisp:progn
 (common-lisp:defun remove-source-identifier-from-subscription
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key subscription-name source-identifier)
   (common-lisp:declare
    (common-lisp:ignorable subscription-name source-identifier))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-remove-source-identifier-from-subscription-message
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'rds-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "RemoveSourceIdentifierFromSubscription"
                                                        "2014-10-31"))
      common-lisp:nil "RemoveSourceIdentifierFromSubscriptionResult"
      *error-map*)))
 (common-lisp:export 'remove-source-identifier-from-subscription))
(common-lisp:progn
 (common-lisp:defun remove-tags-from-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-name tag-keys)
   (common-lisp:declare (common-lisp:ignorable resource-name tag-keys))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-remove-tags-from-resource-message
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'rds-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "RemoveTagsFromResource"
                                                        "2014-10-31"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'remove-tags-from-resource))
(common-lisp:progn
 (common-lisp:defun reset-dbcluster-parameter-group
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key dbcluster-parameter-group-name
                     reset-all-parameters parameters)
   (common-lisp:declare
    (common-lisp:ignorable dbcluster-parameter-group-name reset-all-parameters
     parameters))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-reset-dbcluster-parameter-group-message
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'rds-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ResetDBClusterParameterGroup"
                                                        "2014-10-31"))
      common-lisp:nil "ResetDBClusterParameterGroupResult" *error-map*)))
 (common-lisp:export 'reset-dbcluster-parameter-group))
(common-lisp:progn
 (common-lisp:defun reset-dbparameter-group
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key dbparameter-group-name
                     reset-all-parameters parameters)
   (common-lisp:declare
    (common-lisp:ignorable dbparameter-group-name reset-all-parameters
     parameters))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-reset-dbparameter-group-message
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'rds-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ResetDBParameterGroup"
                                                        "2014-10-31"))
      common-lisp:nil "ResetDBParameterGroupResult" *error-map*)))
 (common-lisp:export 'reset-dbparameter-group))
(common-lisp:progn
 (common-lisp:defun restore-dbcluster-from-s3
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key availability-zones
                     backup-retention-period character-set-name database-name
                     dbcluster-identifier dbcluster-parameter-group-name
                     vpc-security-group-ids dbsubnet-group-name engine
                     engine-version port master-username master-user-password
                     option-group-name preferred-backup-window
                     preferred-maintenance-window tags storage-encrypted
                     kms-key-id enable-iamdatabase-authentication source-engine
                     source-engine-version s3bucket-name s3prefix
                     s3ingestion-role-arn backtrack-window
                     enable-cloudwatch-logs-exports deletion-protection
                     copy-tags-to-snapshot domain domain-iamrole-name
                     serverless-v2scaling-configuration network-type
                     manage-master-user-password master-user-secret-kms-key-id)
   (common-lisp:declare
    (common-lisp:ignorable availability-zones backup-retention-period
     character-set-name database-name dbcluster-identifier
     dbcluster-parameter-group-name vpc-security-group-ids dbsubnet-group-name
     engine engine-version port master-username master-user-password
     option-group-name preferred-backup-window preferred-maintenance-window
     tags storage-encrypted kms-key-id enable-iamdatabase-authentication
     source-engine source-engine-version s3bucket-name s3prefix
     s3ingestion-role-arn backtrack-window enable-cloudwatch-logs-exports
     deletion-protection copy-tags-to-snapshot domain domain-iamrole-name
     serverless-v2scaling-configuration network-type
     manage-master-user-password master-user-secret-kms-key-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-restore-dbcluster-from-s3message
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'rds-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "RestoreDBClusterFromS3"
                                                        "2014-10-31"))
      common-lisp:nil "RestoreDBClusterFromS3Result" *error-map*)))
 (common-lisp:export 'restore-dbcluster-from-s3))
(common-lisp:progn
 (common-lisp:defun restore-dbcluster-from-snapshot
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key availability-zones dbcluster-identifier
                     snapshot-identifier engine engine-version port
                     dbsubnet-group-name database-name option-group-name
                     vpc-security-group-ids tags kms-key-id
                     enable-iamdatabase-authentication backtrack-window
                     enable-cloudwatch-logs-exports engine-mode
                     scaling-configuration dbcluster-parameter-group-name
                     deletion-protection copy-tags-to-snapshot domain
                     domain-iamrole-name dbcluster-instance-class storage-type
                     iops publicly-accessible
                     serverless-v2scaling-configuration network-type)
   (common-lisp:declare
    (common-lisp:ignorable availability-zones dbcluster-identifier
     snapshot-identifier engine engine-version port dbsubnet-group-name
     database-name option-group-name vpc-security-group-ids tags kms-key-id
     enable-iamdatabase-authentication backtrack-window
     enable-cloudwatch-logs-exports engine-mode scaling-configuration
     dbcluster-parameter-group-name deletion-protection copy-tags-to-snapshot
     domain domain-iamrole-name dbcluster-instance-class storage-type iops
     publicly-accessible serverless-v2scaling-configuration network-type))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-restore-dbcluster-from-snapshot-message
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'rds-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "RestoreDBClusterFromSnapshot"
                                                        "2014-10-31"))
      common-lisp:nil "RestoreDBClusterFromSnapshotResult" *error-map*)))
 (common-lisp:export 'restore-dbcluster-from-snapshot))
(common-lisp:progn
 (common-lisp:defun restore-dbcluster-to-point-in-time
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key dbcluster-identifier restore-type
                     source-dbcluster-identifier restore-to-time
                     use-latest-restorable-time port dbsubnet-group-name
                     option-group-name vpc-security-group-ids tags kms-key-id
                     enable-iamdatabase-authentication backtrack-window
                     enable-cloudwatch-logs-exports
                     dbcluster-parameter-group-name deletion-protection
                     copy-tags-to-snapshot domain domain-iamrole-name
                     scaling-configuration engine-mode dbcluster-instance-class
                     storage-type publicly-accessible iops
                     serverless-v2scaling-configuration network-type)
   (common-lisp:declare
    (common-lisp:ignorable dbcluster-identifier restore-type
     source-dbcluster-identifier restore-to-time use-latest-restorable-time
     port dbsubnet-group-name option-group-name vpc-security-group-ids tags
     kms-key-id enable-iamdatabase-authentication backtrack-window
     enable-cloudwatch-logs-exports dbcluster-parameter-group-name
     deletion-protection copy-tags-to-snapshot domain domain-iamrole-name
     scaling-configuration engine-mode dbcluster-instance-class storage-type
     publicly-accessible iops serverless-v2scaling-configuration network-type))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-restore-dbcluster-to-point-in-time-message
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'rds-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "RestoreDBClusterToPointInTime"
                                                        "2014-10-31"))
      common-lisp:nil "RestoreDBClusterToPointInTimeResult" *error-map*)))
 (common-lisp:export 'restore-dbcluster-to-point-in-time))
(common-lisp:progn
 (common-lisp:defun restore-dbinstance-from-dbsnapshot
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key dbinstance-identifier
                     dbsnapshot-identifier dbinstance-class port
                     availability-zone dbsubnet-group-name multi-az
                     publicly-accessible auto-minor-version-upgrade
                     license-model dbname engine iops option-group-name tags
                     storage-type tde-credential-arn tde-credential-password
                     vpc-security-group-ids domain copy-tags-to-snapshot
                     domain-iamrole-name enable-iamdatabase-authentication
                     enable-cloudwatch-logs-exports processor-features
                     use-default-processor-features dbparameter-group-name
                     deletion-protection enable-customer-owned-ip
                     custom-iam-instance-profile backup-target network-type
                     storage-throughput dbcluster-snapshot-identifier
                     allocated-storage)
   (common-lisp:declare
    (common-lisp:ignorable dbinstance-identifier dbsnapshot-identifier
     dbinstance-class port availability-zone dbsubnet-group-name multi-az
     publicly-accessible auto-minor-version-upgrade license-model dbname engine
     iops option-group-name tags storage-type tde-credential-arn
     tde-credential-password vpc-security-group-ids domain
     copy-tags-to-snapshot domain-iamrole-name
     enable-iamdatabase-authentication enable-cloudwatch-logs-exports
     processor-features use-default-processor-features dbparameter-group-name
     deletion-protection enable-customer-owned-ip custom-iam-instance-profile
     backup-target network-type storage-throughput
     dbcluster-snapshot-identifier allocated-storage))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-restore-dbinstance-from-dbsnapshot-message
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'rds-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "RestoreDBInstanceFromDBSnapshot"
                                                        "2014-10-31"))
      common-lisp:nil "RestoreDBInstanceFromDBSnapshotResult" *error-map*)))
 (common-lisp:export 'restore-dbinstance-from-dbsnapshot))
(common-lisp:progn
 (common-lisp:defun restore-dbinstance-from-s3
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key dbname dbinstance-identifier
                     allocated-storage dbinstance-class engine master-username
                     master-user-password dbsecurity-groups
                     vpc-security-group-ids availability-zone
                     dbsubnet-group-name preferred-maintenance-window
                     dbparameter-group-name backup-retention-period
                     preferred-backup-window port multi-az engine-version
                     auto-minor-version-upgrade license-model iops
                     option-group-name publicly-accessible tags storage-type
                     storage-encrypted kms-key-id copy-tags-to-snapshot
                     monitoring-interval monitoring-role-arn
                     enable-iamdatabase-authentication source-engine
                     source-engine-version s3bucket-name s3prefix
                     s3ingestion-role-arn enable-performance-insights
                     performance-insights-kmskey-id
                     performance-insights-retention-period
                     enable-cloudwatch-logs-exports processor-features
                     use-default-processor-features deletion-protection
                     max-allocated-storage network-type storage-throughput
                     manage-master-user-password master-user-secret-kms-key-id)
   (common-lisp:declare
    (common-lisp:ignorable dbname dbinstance-identifier allocated-storage
     dbinstance-class engine master-username master-user-password
     dbsecurity-groups vpc-security-group-ids availability-zone
     dbsubnet-group-name preferred-maintenance-window dbparameter-group-name
     backup-retention-period preferred-backup-window port multi-az
     engine-version auto-minor-version-upgrade license-model iops
     option-group-name publicly-accessible tags storage-type storage-encrypted
     kms-key-id copy-tags-to-snapshot monitoring-interval monitoring-role-arn
     enable-iamdatabase-authentication source-engine source-engine-version
     s3bucket-name s3prefix s3ingestion-role-arn enable-performance-insights
     performance-insights-kmskey-id performance-insights-retention-period
     enable-cloudwatch-logs-exports processor-features
     use-default-processor-features deletion-protection max-allocated-storage
     network-type storage-throughput manage-master-user-password
     master-user-secret-kms-key-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-restore-dbinstance-from-s3message
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'rds-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "RestoreDBInstanceFromS3"
                                                        "2014-10-31"))
      common-lisp:nil "RestoreDBInstanceFromS3Result" *error-map*)))
 (common-lisp:export 'restore-dbinstance-from-s3))
(common-lisp:progn
 (common-lisp:defun restore-dbinstance-to-point-in-time
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key source-dbinstance-identifier
                     target-dbinstance-identifier restore-time
                     use-latest-restorable-time dbinstance-class port
                     availability-zone dbsubnet-group-name multi-az
                     publicly-accessible auto-minor-version-upgrade
                     license-model dbname engine iops option-group-name
                     copy-tags-to-snapshot tags storage-type tde-credential-arn
                     tde-credential-password vpc-security-group-ids domain
                     domain-iamrole-name enable-iamdatabase-authentication
                     enable-cloudwatch-logs-exports processor-features
                     use-default-processor-features dbparameter-group-name
                     deletion-protection source-dbi-resource-id
                     max-allocated-storage
                     source-dbinstance-automated-backups-arn
                     enable-customer-owned-ip custom-iam-instance-profile
                     backup-target network-type storage-throughput
                     allocated-storage)
   (common-lisp:declare
    (common-lisp:ignorable source-dbinstance-identifier
     target-dbinstance-identifier restore-time use-latest-restorable-time
     dbinstance-class port availability-zone dbsubnet-group-name multi-az
     publicly-accessible auto-minor-version-upgrade license-model dbname engine
     iops option-group-name copy-tags-to-snapshot tags storage-type
     tde-credential-arn tde-credential-password vpc-security-group-ids domain
     domain-iamrole-name enable-iamdatabase-authentication
     enable-cloudwatch-logs-exports processor-features
     use-default-processor-features dbparameter-group-name deletion-protection
     source-dbi-resource-id max-allocated-storage
     source-dbinstance-automated-backups-arn enable-customer-owned-ip
     custom-iam-instance-profile backup-target network-type storage-throughput
     allocated-storage))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-restore-dbinstance-to-point-in-time-message
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'rds-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "RestoreDBInstanceToPointInTime"
                                                        "2014-10-31"))
      common-lisp:nil "RestoreDBInstanceToPointInTimeResult" *error-map*)))
 (common-lisp:export 'restore-dbinstance-to-point-in-time))
(common-lisp:progn
 (common-lisp:defun revoke-dbsecurity-group-ingress
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key dbsecurity-group-name cidrip
                     ec2security-group-name ec2security-group-id
                     ec2security-group-owner-id)
   (common-lisp:declare
    (common-lisp:ignorable dbsecurity-group-name cidrip ec2security-group-name
     ec2security-group-id ec2security-group-owner-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-revoke-dbsecurity-group-ingress-message
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'rds-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "RevokeDBSecurityGroupIngress"
                                                        "2014-10-31"))
      common-lisp:nil "RevokeDBSecurityGroupIngressResult" *error-map*)))
 (common-lisp:export 'revoke-dbsecurity-group-ingress))
(common-lisp:progn
 (common-lisp:defun start-activity-stream
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn mode kms-key-id
                     apply-immediately engine-native-audit-fields-included)
   (common-lisp:declare
    (common-lisp:ignorable resource-arn mode kms-key-id apply-immediately
     engine-native-audit-fields-included))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-start-activity-stream-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'rds-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "StartActivityStream"
                                                        "2014-10-31"))
      common-lisp:nil "StartActivityStreamResult" *error-map*)))
 (common-lisp:export 'start-activity-stream))
(common-lisp:progn
 (common-lisp:defun start-dbcluster
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key dbcluster-identifier)
   (common-lisp:declare (common-lisp:ignorable dbcluster-identifier))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-start-dbcluster-message
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'rds-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "StartDBCluster"
                                                        "2014-10-31"))
      common-lisp:nil "StartDBClusterResult" *error-map*)))
 (common-lisp:export 'start-dbcluster))
(common-lisp:progn
 (common-lisp:defun start-dbinstance
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key dbinstance-identifier)
   (common-lisp:declare (common-lisp:ignorable dbinstance-identifier))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-start-dbinstance-message
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'rds-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "StartDBInstance"
                                                        "2014-10-31"))
      common-lisp:nil "StartDBInstanceResult" *error-map*)))
 (common-lisp:export 'start-dbinstance))
(common-lisp:progn
 (common-lisp:defun start-dbinstance-automated-backups-replication
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key source-dbinstance-arn
                     backup-retention-period kms-key-id pre-signed-url)
   (common-lisp:declare
    (common-lisp:ignorable source-dbinstance-arn backup-retention-period
     kms-key-id pre-signed-url))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-start-dbinstance-automated-backups-replication-message
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'rds-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "StartDBInstanceAutomatedBackupsReplication"
                                                        "2014-10-31"))
      common-lisp:nil "StartDBInstanceAutomatedBackupsReplicationResult"
      *error-map*)))
 (common-lisp:export 'start-dbinstance-automated-backups-replication))
(common-lisp:progn
 (common-lisp:defun start-export-task
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key export-task-identifier source-arn
                     s3bucket-name iam-role-arn kms-key-id s3prefix
                     export-only)
   (common-lisp:declare
    (common-lisp:ignorable export-task-identifier source-arn s3bucket-name
     iam-role-arn kms-key-id s3prefix export-only))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-start-export-task-message
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'rds-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "StartExportTask"
                                                        "2014-10-31"))
      common-lisp:nil "StartExportTaskResult" *error-map*)))
 (common-lisp:export 'start-export-task))
(common-lisp:progn
 (common-lisp:defun stop-activity-stream
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn apply-immediately)
   (common-lisp:declare (common-lisp:ignorable resource-arn apply-immediately))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-stop-activity-stream-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'rds-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "StopActivityStream"
                                                        "2014-10-31"))
      common-lisp:nil "StopActivityStreamResult" *error-map*)))
 (common-lisp:export 'stop-activity-stream))
(common-lisp:progn
 (common-lisp:defun stop-dbcluster
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key dbcluster-identifier)
   (common-lisp:declare (common-lisp:ignorable dbcluster-identifier))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-stop-dbcluster-message
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'rds-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "StopDBCluster"
                                                        "2014-10-31"))
      common-lisp:nil "StopDBClusterResult" *error-map*)))
 (common-lisp:export 'stop-dbcluster))
(common-lisp:progn
 (common-lisp:defun stop-dbinstance
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key dbinstance-identifier
                     dbsnapshot-identifier)
   (common-lisp:declare
    (common-lisp:ignorable dbinstance-identifier dbsnapshot-identifier))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-stop-dbinstance-message
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'rds-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "StopDBInstance"
                                                        "2014-10-31"))
      common-lisp:nil "StopDBInstanceResult" *error-map*)))
 (common-lisp:export 'stop-dbinstance))
(common-lisp:progn
 (common-lisp:defun stop-dbinstance-automated-backups-replication
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key source-dbinstance-arn)
   (common-lisp:declare (common-lisp:ignorable source-dbinstance-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-stop-dbinstance-automated-backups-replication-message
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'rds-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "StopDBInstanceAutomatedBackupsReplication"
                                                        "2014-10-31"))
      common-lisp:nil "StopDBInstanceAutomatedBackupsReplicationResult"
      *error-map*)))
 (common-lisp:export 'stop-dbinstance-automated-backups-replication))
(common-lisp:progn
 (common-lisp:defun switchover-blue-green-deployment
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key blue-green-deployment-identifier
                     switchover-timeout)
   (common-lisp:declare
    (common-lisp:ignorable blue-green-deployment-identifier
     switchover-timeout))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-switchover-blue-green-deployment-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'rds-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "SwitchoverBlueGreenDeployment"
                                                        "2014-10-31"))
      common-lisp:nil "SwitchoverBlueGreenDeploymentResult" *error-map*)))
 (common-lisp:export 'switchover-blue-green-deployment))
(common-lisp:progn
 (common-lisp:defun switchover-read-replica
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key dbinstance-identifier)
   (common-lisp:declare (common-lisp:ignorable dbinstance-identifier))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-switchover-read-replica-message
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'rds-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "SwitchoverReadReplica"
                                                        "2014-10-31"))
      common-lisp:nil "SwitchoverReadReplicaResult" *error-map*)))
 (common-lisp:export 'switchover-read-replica))
