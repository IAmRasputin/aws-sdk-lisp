;; DO NOT EDIT: File is generated by AWS-SDK/GENERATOR.

(common-lisp:defpackage #:aws-sdk/services/appmesh/api
  (:use)
  (:nicknames #:aws/appmesh)
  (:import-from #:aws-sdk/generator/shape)
  (:import-from #:aws-sdk/generator/operation)
  (:import-from #:aws-sdk/api)
  (:import-from #:aws-sdk/request)
  (:import-from #:aws-sdk/error))
(common-lisp:in-package #:aws-sdk/services/appmesh/api)
(common-lisp:progn
 (common-lisp:defclass appmesh-request (aws-sdk/request:request)
                       common-lisp:nil
                       (:default-initargs :service "appmesh" :protocol
                        :rest-json))
 (common-lisp:export 'appmesh-request))
(common-lisp:progn
 (common-lisp:define-condition appmesh-error
     (aws-sdk/error:aws-error)
     common-lisp:nil)
 (common-lisp:export 'appmesh-error))
(common-lisp:defvar *error-map*
  '(("BadRequestException" . bad-request-exception)
    ("ConflictException" . conflict-exception)
    ("ForbiddenException" . forbidden-exception)
    ("InternalServerErrorException" . internal-server-error-exception)
    ("LimitExceededException" . limit-exceeded-exception)
    ("NotFoundException" . not-found-exception)
    ("ResourceInUseException" . resource-in-use-exception)
    ("ServiceUnavailableException" . service-unavailable-exception)
    ("TooManyRequestsException" . too-many-requests-exception)
    ("TooManyTagsException" . too-many-tags-exception)))
(common-lisp:progn
 (common-lisp:defclass access-log common-lisp:nil
                       ((file :initarg :|file| :type
                         (common-lisp:or file-access-log common-lisp:null)
                         :accessor %access-log-file :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'access-log 'make-access-log))
 (common-lisp:defun make-access-log
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key file)
   (common-lisp:apply #'common-lisp:make-instance 'access-log
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input access-log))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input access-log))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'file))
      (common-lisp:list
       (common-lisp:cons "file"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input access-log))
   common-lisp:nil))
(common-lisp:deftype account-id () 'common-lisp:string)
(common-lisp:deftype arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass aws-cloud-map-instance-attribute common-lisp:nil
                       ((value :initarg :|value| :type
                         (common-lisp:or aws-cloud-map-instance-attribute-value
                                         common-lisp:null)
                         :accessor %aws-cloud-map-instance-attribute-value
                         :initform (common-lisp:error ":value is required"))
                        (key :initarg :|key| :type
                         (common-lisp:or aws-cloud-map-instance-attribute-key
                                         common-lisp:null)
                         :accessor %aws-cloud-map-instance-attribute-key
                         :initform (common-lisp:error ":key is required"))))
 (common-lisp:export
  (common-lisp:list 'aws-cloud-map-instance-attribute
                    'make-aws-cloud-map-instance-attribute))
 (common-lisp:defun make-aws-cloud-map-instance-attribute
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key value key)
   (common-lisp:apply #'common-lisp:make-instance
                      'aws-cloud-map-instance-attribute
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-cloud-map-instance-attribute))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-cloud-map-instance-attribute))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key))
      (common-lisp:list
       (common-lisp:cons "key"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-cloud-map-instance-attribute))
   common-lisp:nil))
(common-lisp:deftype aws-cloud-map-instance-attribute-key ()
  'common-lisp:string)
(common-lisp:deftype aws-cloud-map-instance-attribute-value ()
  'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype aws-cloud-map-instance-attributes ()
   '(trivial-types:proper-list aws-cloud-map-instance-attribute))
 (common-lisp:defun |make-aws-cloud-map-instance-attributes|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            aws-cloud-map-instance-attribute))
   aws-sdk/generator/shape::members))
(common-lisp:deftype aws-cloud-map-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass aws-cloud-map-service-discovery common-lisp:nil
                       ((service-name :initarg :|serviceName| :type
                         (common-lisp:or aws-cloud-map-name common-lisp:null)
                         :accessor
                         %aws-cloud-map-service-discovery-service-name
                         :initform
                         (common-lisp:error ":servicename is required"))
                        (namespace-name :initarg :|namespaceName| :type
                         (common-lisp:or aws-cloud-map-name common-lisp:null)
                         :accessor
                         %aws-cloud-map-service-discovery-namespace-name
                         :initform
                         (common-lisp:error ":namespacename is required"))
                        (ip-preference :initarg :|ipPreference| :type
                         (common-lisp:or ip-preference common-lisp:null)
                         :accessor
                         %aws-cloud-map-service-discovery-ip-preference
                         :initform common-lisp:nil)
                        (attributes :initarg :|attributes| :type
                         (common-lisp:or aws-cloud-map-instance-attributes
                                         common-lisp:null)
                         :accessor %aws-cloud-map-service-discovery-attributes
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'aws-cloud-map-service-discovery
                    'make-aws-cloud-map-service-discovery))
 (common-lisp:defun make-aws-cloud-map-service-discovery
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key service-name namespace-name ip-preference
                     attributes)
   (common-lisp:apply #'common-lisp:make-instance
                      'aws-cloud-map-service-discovery
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-cloud-map-service-discovery))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-cloud-map-service-discovery))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'attributes))
      (common-lisp:list
       (common-lisp:cons "attributes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ip-preference))
      (common-lisp:list
       (common-lisp:cons "ipPreference"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'namespace-name))
      (common-lisp:list
       (common-lisp:cons "namespaceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service-name))
      (common-lisp:list
       (common-lisp:cons "serviceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-cloud-map-service-discovery))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass backend common-lisp:nil
                       ((virtual-service :initarg :|virtualService| :type
                         (common-lisp:or virtual-service-backend
                                         common-lisp:null)
                         :accessor %backend-virtual-service :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'backend 'make-backend))
 (common-lisp:defun make-backend
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key virtual-service)
   (common-lisp:apply #'common-lisp:make-instance 'backend
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input backend))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input backend))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'virtual-service))
      (common-lisp:list
       (common-lisp:cons "virtualService"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input backend))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass backend-defaults common-lisp:nil
                       ((client-policy :initarg :|clientPolicy| :type
                         (common-lisp:or client-policy common-lisp:null)
                         :accessor %backend-defaults-client-policy :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'backend-defaults 'make-backend-defaults))
 (common-lisp:defun make-backend-defaults
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key client-policy)
   (common-lisp:apply #'common-lisp:make-instance 'backend-defaults
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input backend-defaults))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input backend-defaults))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-policy))
      (common-lisp:list
       (common-lisp:cons "clientPolicy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input backend-defaults))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype backends () '(trivial-types:proper-list backend))
 (common-lisp:defun |make-backends|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list backend))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition bad-request-exception
     (appmesh-error)
     ((message :initarg :|message| :initform common-lisp:nil :reader
       bad-request-exception-message)))
 (common-lisp:export
  (common-lisp:list 'bad-request-exception 'bad-request-exception-message)))
(common-lisp:deftype boolean () 'common-lisp:boolean)
(common-lisp:progn
 (common-lisp:deftype certificate-authority-arns ()
   '(trivial-types:proper-list arn))
 (common-lisp:defun |make-certificate-authority-arns|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list arn))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass client-policy common-lisp:nil
                       ((tls :initarg :|tls| :type
                         (common-lisp:or client-policy-tls common-lisp:null)
                         :accessor %client-policy-tls :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'client-policy 'make-client-policy))
 (common-lisp:defun make-client-policy
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tls)
   (common-lisp:apply #'common-lisp:make-instance 'client-policy
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input client-policy))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input client-policy))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tls))
      (common-lisp:list
       (common-lisp:cons "tls"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input client-policy))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass client-policy-tls common-lisp:nil
                       ((validation :initarg :|validation| :type
                         (common-lisp:or tls-validation-context
                                         common-lisp:null)
                         :accessor %client-policy-tls-validation :initform
                         (common-lisp:error ":validation is required"))
                        (ports :initarg :|ports| :type
                         (common-lisp:or port-set common-lisp:null) :accessor
                         %client-policy-tls-ports :initform common-lisp:nil)
                        (enforce :initarg :|enforce| :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         %client-policy-tls-enforce :initform common-lisp:nil)
                        (certificate :initarg :|certificate| :type
                         (common-lisp:or client-tls-certificate
                                         common-lisp:null)
                         :accessor %client-policy-tls-certificate :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'client-policy-tls 'make-client-policy-tls))
 (common-lisp:defun make-client-policy-tls
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key validation ports enforce certificate)
   (common-lisp:apply #'common-lisp:make-instance 'client-policy-tls
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input client-policy-tls))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input client-policy-tls))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'certificate))
      (common-lisp:list
       (common-lisp:cons "certificate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'enforce))
      (common-lisp:list
       (common-lisp:cons "enforce"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ports))
      (common-lisp:list
       (common-lisp:cons "ports"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'validation))
      (common-lisp:list
       (common-lisp:cons "validation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input client-policy-tls))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass client-tls-certificate common-lisp:nil
                       ((sds :initarg :|sds| :type
                         (common-lisp:or listener-tls-sds-certificate
                                         common-lisp:null)
                         :accessor %client-tls-certificate-sds :initform
                         common-lisp:nil)
                        (file :initarg :|file| :type
                         (common-lisp:or listener-tls-file-certificate
                                         common-lisp:null)
                         :accessor %client-tls-certificate-file :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'client-tls-certificate 'make-client-tls-certificate))
 (common-lisp:defun make-client-tls-certificate
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key sds file)
   (common-lisp:apply #'common-lisp:make-instance 'client-tls-certificate
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          client-tls-certificate))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          client-tls-certificate))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'file))
      (common-lisp:list
       (common-lisp:cons "file"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sds))
      (common-lisp:list
       (common-lisp:cons "sds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          client-tls-certificate))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition conflict-exception
     (appmesh-error)
     ((message :initarg :|message| :initform common-lisp:nil :reader
       conflict-exception-message)))
 (common-lisp:export
  (common-lisp:list 'conflict-exception 'conflict-exception-message)))
(common-lisp:progn
 (common-lisp:defclass create-gateway-route-input common-lisp:nil
                       ((virtual-gateway-name :initarg :|virtualGatewayName|
                         :type (common-lisp:or resource-name common-lisp:null)
                         :accessor
                         %create-gateway-route-input-virtual-gateway-name
                         :initform
                         (common-lisp:error ":virtualgatewayname is required"))
                        (tags :initarg :|tags| :type
                         (common-lisp:or tag-list common-lisp:null) :accessor
                         %create-gateway-route-input-tags :initform
                         common-lisp:nil)
                        (spec :initarg :|spec| :type
                         (common-lisp:or gateway-route-spec common-lisp:null)
                         :accessor %create-gateway-route-input-spec :initform
                         (common-lisp:error ":spec is required"))
                        (mesh-owner :initarg :|meshOwner| :type
                         (common-lisp:or account-id common-lisp:null) :accessor
                         %create-gateway-route-input-mesh-owner :initform
                         common-lisp:nil)
                        (mesh-name :initarg :|meshName| :type
                         (common-lisp:or resource-name common-lisp:null)
                         :accessor %create-gateway-route-input-mesh-name
                         :initform (common-lisp:error ":meshname is required"))
                        (gateway-route-name :initarg :|gatewayRouteName| :type
                         (common-lisp:or resource-name common-lisp:null)
                         :accessor
                         %create-gateway-route-input-gateway-route-name
                         :initform
                         (common-lisp:error ":gatewayroutename is required"))
                        (client-token :initarg :|clientToken| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %create-gateway-route-input-client-token :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'create-gateway-route-input
                    'make-create-gateway-route-input))
 (common-lisp:defun make-create-gateway-route-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key virtual-gateway-name tags spec mesh-owner
                     mesh-name gateway-route-name client-token)
   (common-lisp:apply #'common-lisp:make-instance 'create-gateway-route-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-gateway-route-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-gateway-route-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "clientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'gateway-route-name))
      (common-lisp:list
       (common-lisp:cons "gatewayRouteName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'spec))
      (common-lisp:list
       (common-lisp:cons "spec"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-gateway-route-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-gateway-route-output common-lisp:nil
                       ((gateway-route :initarg :|gatewayRoute| :type
                         (common-lisp:or gateway-route-data common-lisp:null)
                         :accessor %create-gateway-route-output-gateway-route
                         :initform
                         (common-lisp:error ":gatewayroute is required"))))
 (common-lisp:export
  (common-lisp:list 'create-gateway-route-output
                    'make-create-gateway-route-output))
 (common-lisp:defun make-create-gateway-route-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key gateway-route)
   (common-lisp:apply #'common-lisp:make-instance 'create-gateway-route-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-gateway-route-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-gateway-route-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'gateway-route))
      (common-lisp:list
       (common-lisp:cons "gatewayRoute"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-gateway-route-output))
   (com.inuoe.jzon:stringify
    (common-lisp:slot-value aws-sdk/generator/shape::input 'gateway-route))))
(common-lisp:progn
 (common-lisp:defclass create-mesh-input common-lisp:nil
                       ((tags :initarg :|tags| :type
                         (common-lisp:or tag-list common-lisp:null) :accessor
                         %create-mesh-input-tags :initform common-lisp:nil)
                        (spec :initarg :|spec| :type
                         (common-lisp:or mesh-spec common-lisp:null) :accessor
                         %create-mesh-input-spec :initform common-lisp:nil)
                        (mesh-name :initarg :|meshName| :type
                         (common-lisp:or resource-name common-lisp:null)
                         :accessor %create-mesh-input-mesh-name :initform
                         (common-lisp:error ":meshname is required"))
                        (client-token :initarg :|clientToken| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %create-mesh-input-client-token :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'create-mesh-input 'make-create-mesh-input))
 (common-lisp:defun make-create-mesh-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tags spec mesh-name client-token)
   (common-lisp:apply #'common-lisp:make-instance 'create-mesh-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input create-mesh-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input create-mesh-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "clientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'mesh-name))
      (common-lisp:list
       (common-lisp:cons "meshName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'spec))
      (common-lisp:list
       (common-lisp:cons "spec"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input create-mesh-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-mesh-output common-lisp:nil
                       ((mesh :initarg :|mesh| :type
                         (common-lisp:or mesh-data common-lisp:null) :accessor
                         %create-mesh-output-mesh :initform
                         (common-lisp:error ":mesh is required"))))
 (common-lisp:export
  (common-lisp:list 'create-mesh-output 'make-create-mesh-output))
 (common-lisp:defun make-create-mesh-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key mesh)
   (common-lisp:apply #'common-lisp:make-instance 'create-mesh-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input create-mesh-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input create-mesh-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'mesh))
      (common-lisp:list
       (common-lisp:cons "mesh"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input create-mesh-output))
   (com.inuoe.jzon:stringify
    (common-lisp:slot-value aws-sdk/generator/shape::input 'mesh))))
(common-lisp:progn
 (common-lisp:defclass create-route-input common-lisp:nil
                       ((virtual-router-name :initarg :|virtualRouterName|
                         :type (common-lisp:or resource-name common-lisp:null)
                         :accessor %create-route-input-virtual-router-name
                         :initform
                         (common-lisp:error ":virtualroutername is required"))
                        (tags :initarg :|tags| :type
                         (common-lisp:or tag-list common-lisp:null) :accessor
                         %create-route-input-tags :initform common-lisp:nil)
                        (spec :initarg :|spec| :type
                         (common-lisp:or route-spec common-lisp:null) :accessor
                         %create-route-input-spec :initform
                         (common-lisp:error ":spec is required"))
                        (route-name :initarg :|routeName| :type
                         (common-lisp:or resource-name common-lisp:null)
                         :accessor %create-route-input-route-name :initform
                         (common-lisp:error ":routename is required"))
                        (mesh-owner :initarg :|meshOwner| :type
                         (common-lisp:or account-id common-lisp:null) :accessor
                         %create-route-input-mesh-owner :initform
                         common-lisp:nil)
                        (mesh-name :initarg :|meshName| :type
                         (common-lisp:or resource-name common-lisp:null)
                         :accessor %create-route-input-mesh-name :initform
                         (common-lisp:error ":meshname is required"))
                        (client-token :initarg :|clientToken| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %create-route-input-client-token :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'create-route-input 'make-create-route-input))
 (common-lisp:defun make-create-route-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key virtual-router-name tags spec route-name
                     mesh-owner mesh-name client-token)
   (common-lisp:apply #'common-lisp:make-instance 'create-route-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input create-route-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input create-route-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "clientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'route-name))
      (common-lisp:list
       (common-lisp:cons "routeName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'spec))
      (common-lisp:list
       (common-lisp:cons "spec"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input create-route-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-route-output common-lisp:nil
                       ((route :initarg :|route| :type
                         (common-lisp:or route-data common-lisp:null) :accessor
                         %create-route-output-route :initform
                         (common-lisp:error ":route is required"))))
 (common-lisp:export
  (common-lisp:list 'create-route-output 'make-create-route-output))
 (common-lisp:defun make-create-route-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key route)
   (common-lisp:apply #'common-lisp:make-instance 'create-route-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input create-route-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input create-route-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'route))
      (common-lisp:list
       (common-lisp:cons "route"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input create-route-output))
   (com.inuoe.jzon:stringify
    (common-lisp:slot-value aws-sdk/generator/shape::input 'route))))
(common-lisp:progn
 (common-lisp:defclass create-virtual-gateway-input common-lisp:nil
                       ((virtual-gateway-name :initarg :|virtualGatewayName|
                         :type (common-lisp:or resource-name common-lisp:null)
                         :accessor
                         %create-virtual-gateway-input-virtual-gateway-name
                         :initform
                         (common-lisp:error ":virtualgatewayname is required"))
                        (tags :initarg :|tags| :type
                         (common-lisp:or tag-list common-lisp:null) :accessor
                         %create-virtual-gateway-input-tags :initform
                         common-lisp:nil)
                        (spec :initarg :|spec| :type
                         (common-lisp:or virtual-gateway-spec common-lisp:null)
                         :accessor %create-virtual-gateway-input-spec :initform
                         (common-lisp:error ":spec is required"))
                        (mesh-owner :initarg :|meshOwner| :type
                         (common-lisp:or account-id common-lisp:null) :accessor
                         %create-virtual-gateway-input-mesh-owner :initform
                         common-lisp:nil)
                        (mesh-name :initarg :|meshName| :type
                         (common-lisp:or resource-name common-lisp:null)
                         :accessor %create-virtual-gateway-input-mesh-name
                         :initform (common-lisp:error ":meshname is required"))
                        (client-token :initarg :|clientToken| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %create-virtual-gateway-input-client-token :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'create-virtual-gateway-input
                    'make-create-virtual-gateway-input))
 (common-lisp:defun make-create-virtual-gateway-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key virtual-gateway-name tags spec mesh-owner
                     mesh-name client-token)
   (common-lisp:apply #'common-lisp:make-instance 'create-virtual-gateway-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-virtual-gateway-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-virtual-gateway-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "clientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'spec))
      (common-lisp:list
       (common-lisp:cons "spec"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'virtual-gateway-name))
      (common-lisp:list
       (common-lisp:cons "virtualGatewayName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-virtual-gateway-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-virtual-gateway-output common-lisp:nil
                       ((virtual-gateway :initarg :|virtualGateway| :type
                         (common-lisp:or virtual-gateway-data common-lisp:null)
                         :accessor
                         %create-virtual-gateway-output-virtual-gateway
                         :initform
                         (common-lisp:error ":virtualgateway is required"))))
 (common-lisp:export
  (common-lisp:list 'create-virtual-gateway-output
                    'make-create-virtual-gateway-output))
 (common-lisp:defun make-create-virtual-gateway-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key virtual-gateway)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-virtual-gateway-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-virtual-gateway-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-virtual-gateway-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'virtual-gateway))
      (common-lisp:list
       (common-lisp:cons "virtualGateway"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-virtual-gateway-output))
   (com.inuoe.jzon:stringify
    (common-lisp:slot-value aws-sdk/generator/shape::input 'virtual-gateway))))
(common-lisp:progn
 (common-lisp:defclass create-virtual-node-input common-lisp:nil
                       ((virtual-node-name :initarg :|virtualNodeName| :type
                         (common-lisp:or resource-name common-lisp:null)
                         :accessor %create-virtual-node-input-virtual-node-name
                         :initform
                         (common-lisp:error ":virtualnodename is required"))
                        (tags :initarg :|tags| :type
                         (common-lisp:or tag-list common-lisp:null) :accessor
                         %create-virtual-node-input-tags :initform
                         common-lisp:nil)
                        (spec :initarg :|spec| :type
                         (common-lisp:or virtual-node-spec common-lisp:null)
                         :accessor %create-virtual-node-input-spec :initform
                         (common-lisp:error ":spec is required"))
                        (mesh-owner :initarg :|meshOwner| :type
                         (common-lisp:or account-id common-lisp:null) :accessor
                         %create-virtual-node-input-mesh-owner :initform
                         common-lisp:nil)
                        (mesh-name :initarg :|meshName| :type
                         (common-lisp:or resource-name common-lisp:null)
                         :accessor %create-virtual-node-input-mesh-name
                         :initform (common-lisp:error ":meshname is required"))
                        (client-token :initarg :|clientToken| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %create-virtual-node-input-client-token :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'create-virtual-node-input
                    'make-create-virtual-node-input))
 (common-lisp:defun make-create-virtual-node-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key virtual-node-name tags spec mesh-owner
                     mesh-name client-token)
   (common-lisp:apply #'common-lisp:make-instance 'create-virtual-node-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-virtual-node-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-virtual-node-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "clientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'spec))
      (common-lisp:list
       (common-lisp:cons "spec"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'virtual-node-name))
      (common-lisp:list
       (common-lisp:cons "virtualNodeName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-virtual-node-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-virtual-node-output common-lisp:nil
                       ((virtual-node :initarg :|virtualNode| :type
                         (common-lisp:or virtual-node-data common-lisp:null)
                         :accessor %create-virtual-node-output-virtual-node
                         :initform
                         (common-lisp:error ":virtualnode is required"))))
 (common-lisp:export
  (common-lisp:list 'create-virtual-node-output
                    'make-create-virtual-node-output))
 (common-lisp:defun make-create-virtual-node-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key virtual-node)
   (common-lisp:apply #'common-lisp:make-instance 'create-virtual-node-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-virtual-node-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-virtual-node-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'virtual-node))
      (common-lisp:list
       (common-lisp:cons "virtualNode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-virtual-node-output))
   (com.inuoe.jzon:stringify
    (common-lisp:slot-value aws-sdk/generator/shape::input 'virtual-node))))
(common-lisp:progn
 (common-lisp:defclass create-virtual-router-input common-lisp:nil
                       ((virtual-router-name :initarg :|virtualRouterName|
                         :type (common-lisp:or resource-name common-lisp:null)
                         :accessor
                         %create-virtual-router-input-virtual-router-name
                         :initform
                         (common-lisp:error ":virtualroutername is required"))
                        (tags :initarg :|tags| :type
                         (common-lisp:or tag-list common-lisp:null) :accessor
                         %create-virtual-router-input-tags :initform
                         common-lisp:nil)
                        (spec :initarg :|spec| :type
                         (common-lisp:or virtual-router-spec common-lisp:null)
                         :accessor %create-virtual-router-input-spec :initform
                         (common-lisp:error ":spec is required"))
                        (mesh-owner :initarg :|meshOwner| :type
                         (common-lisp:or account-id common-lisp:null) :accessor
                         %create-virtual-router-input-mesh-owner :initform
                         common-lisp:nil)
                        (mesh-name :initarg :|meshName| :type
                         (common-lisp:or resource-name common-lisp:null)
                         :accessor %create-virtual-router-input-mesh-name
                         :initform (common-lisp:error ":meshname is required"))
                        (client-token :initarg :|clientToken| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %create-virtual-router-input-client-token :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'create-virtual-router-input
                    'make-create-virtual-router-input))
 (common-lisp:defun make-create-virtual-router-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key virtual-router-name tags spec mesh-owner
                     mesh-name client-token)
   (common-lisp:apply #'common-lisp:make-instance 'create-virtual-router-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-virtual-router-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-virtual-router-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "clientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'spec))
      (common-lisp:list
       (common-lisp:cons "spec"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'virtual-router-name))
      (common-lisp:list
       (common-lisp:cons "virtualRouterName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-virtual-router-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-virtual-router-output common-lisp:nil
                       ((virtual-router :initarg :|virtualRouter| :type
                         (common-lisp:or virtual-router-data common-lisp:null)
                         :accessor %create-virtual-router-output-virtual-router
                         :initform
                         (common-lisp:error ":virtualrouter is required"))))
 (common-lisp:export
  (common-lisp:list 'create-virtual-router-output
                    'make-create-virtual-router-output))
 (common-lisp:defun make-create-virtual-router-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key virtual-router)
   (common-lisp:apply #'common-lisp:make-instance 'create-virtual-router-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-virtual-router-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-virtual-router-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'virtual-router))
      (common-lisp:list
       (common-lisp:cons "virtualRouter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-virtual-router-output))
   (com.inuoe.jzon:stringify
    (common-lisp:slot-value aws-sdk/generator/shape::input 'virtual-router))))
(common-lisp:progn
 (common-lisp:defclass create-virtual-service-input common-lisp:nil
                       ((virtual-service-name :initarg :|virtualServiceName|
                         :type (common-lisp:or service-name common-lisp:null)
                         :accessor
                         %create-virtual-service-input-virtual-service-name
                         :initform
                         (common-lisp:error ":virtualservicename is required"))
                        (tags :initarg :|tags| :type
                         (common-lisp:or tag-list common-lisp:null) :accessor
                         %create-virtual-service-input-tags :initform
                         common-lisp:nil)
                        (spec :initarg :|spec| :type
                         (common-lisp:or virtual-service-spec common-lisp:null)
                         :accessor %create-virtual-service-input-spec :initform
                         (common-lisp:error ":spec is required"))
                        (mesh-owner :initarg :|meshOwner| :type
                         (common-lisp:or account-id common-lisp:null) :accessor
                         %create-virtual-service-input-mesh-owner :initform
                         common-lisp:nil)
                        (mesh-name :initarg :|meshName| :type
                         (common-lisp:or resource-name common-lisp:null)
                         :accessor %create-virtual-service-input-mesh-name
                         :initform (common-lisp:error ":meshname is required"))
                        (client-token :initarg :|clientToken| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %create-virtual-service-input-client-token :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'create-virtual-service-input
                    'make-create-virtual-service-input))
 (common-lisp:defun make-create-virtual-service-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key virtual-service-name tags spec mesh-owner
                     mesh-name client-token)
   (common-lisp:apply #'common-lisp:make-instance 'create-virtual-service-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-virtual-service-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-virtual-service-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "clientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'spec))
      (common-lisp:list
       (common-lisp:cons "spec"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'virtual-service-name))
      (common-lisp:list
       (common-lisp:cons "virtualServiceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-virtual-service-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-virtual-service-output common-lisp:nil
                       ((virtual-service :initarg :|virtualService| :type
                         (common-lisp:or virtual-service-data common-lisp:null)
                         :accessor
                         %create-virtual-service-output-virtual-service
                         :initform
                         (common-lisp:error ":virtualservice is required"))))
 (common-lisp:export
  (common-lisp:list 'create-virtual-service-output
                    'make-create-virtual-service-output))
 (common-lisp:defun make-create-virtual-service-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key virtual-service)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-virtual-service-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-virtual-service-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-virtual-service-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'virtual-service))
      (common-lisp:list
       (common-lisp:cons "virtualService"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-virtual-service-output))
   (com.inuoe.jzon:stringify
    (common-lisp:slot-value aws-sdk/generator/shape::input 'virtual-service))))
(common-lisp:deftype default-gateway-route-rewrite () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass delete-gateway-route-input common-lisp:nil
                       ((virtual-gateway-name :initarg :|virtualGatewayName|
                         :type (common-lisp:or resource-name common-lisp:null)
                         :accessor
                         %delete-gateway-route-input-virtual-gateway-name
                         :initform
                         (common-lisp:error ":virtualgatewayname is required"))
                        (mesh-owner :initarg :|meshOwner| :type
                         (common-lisp:or account-id common-lisp:null) :accessor
                         %delete-gateway-route-input-mesh-owner :initform
                         common-lisp:nil)
                        (mesh-name :initarg :|meshName| :type
                         (common-lisp:or resource-name common-lisp:null)
                         :accessor %delete-gateway-route-input-mesh-name
                         :initform (common-lisp:error ":meshname is required"))
                        (gateway-route-name :initarg :|gatewayRouteName| :type
                         (common-lisp:or resource-name common-lisp:null)
                         :accessor
                         %delete-gateway-route-input-gateway-route-name
                         :initform
                         (common-lisp:error ":gatewayroutename is required"))))
 (common-lisp:export
  (common-lisp:list 'delete-gateway-route-input
                    'make-delete-gateway-route-input))
 (common-lisp:defun make-delete-gateway-route-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key virtual-gateway-name mesh-owner mesh-name
                     gateway-route-name)
   (common-lisp:apply #'common-lisp:make-instance 'delete-gateway-route-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-gateway-route-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-gateway-route-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-gateway-route-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-gateway-route-output common-lisp:nil
                       ((gateway-route :initarg :|gatewayRoute| :type
                         (common-lisp:or gateway-route-data common-lisp:null)
                         :accessor %delete-gateway-route-output-gateway-route
                         :initform
                         (common-lisp:error ":gatewayroute is required"))))
 (common-lisp:export
  (common-lisp:list 'delete-gateway-route-output
                    'make-delete-gateway-route-output))
 (common-lisp:defun make-delete-gateway-route-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key gateway-route)
   (common-lisp:apply #'common-lisp:make-instance 'delete-gateway-route-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-gateway-route-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-gateway-route-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'gateway-route))
      (common-lisp:list
       (common-lisp:cons "gatewayRoute"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-gateway-route-output))
   (com.inuoe.jzon:stringify
    (common-lisp:slot-value aws-sdk/generator/shape::input 'gateway-route))))
(common-lisp:progn
 (common-lisp:defclass delete-mesh-input common-lisp:nil
                       ((mesh-name :initarg :|meshName| :type
                         (common-lisp:or resource-name common-lisp:null)
                         :accessor %delete-mesh-input-mesh-name :initform
                         (common-lisp:error ":meshname is required"))))
 (common-lisp:export
  (common-lisp:list 'delete-mesh-input 'make-delete-mesh-input))
 (common-lisp:defun make-delete-mesh-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key mesh-name)
   (common-lisp:apply #'common-lisp:make-instance 'delete-mesh-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input delete-mesh-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input delete-mesh-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input delete-mesh-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-mesh-output common-lisp:nil
                       ((mesh :initarg :|mesh| :type
                         (common-lisp:or mesh-data common-lisp:null) :accessor
                         %delete-mesh-output-mesh :initform
                         (common-lisp:error ":mesh is required"))))
 (common-lisp:export
  (common-lisp:list 'delete-mesh-output 'make-delete-mesh-output))
 (common-lisp:defun make-delete-mesh-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key mesh)
   (common-lisp:apply #'common-lisp:make-instance 'delete-mesh-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input delete-mesh-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input delete-mesh-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'mesh))
      (common-lisp:list
       (common-lisp:cons "mesh"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input delete-mesh-output))
   (com.inuoe.jzon:stringify
    (common-lisp:slot-value aws-sdk/generator/shape::input 'mesh))))
(common-lisp:progn
 (common-lisp:defclass delete-route-input common-lisp:nil
                       ((virtual-router-name :initarg :|virtualRouterName|
                         :type (common-lisp:or resource-name common-lisp:null)
                         :accessor %delete-route-input-virtual-router-name
                         :initform
                         (common-lisp:error ":virtualroutername is required"))
                        (route-name :initarg :|routeName| :type
                         (common-lisp:or resource-name common-lisp:null)
                         :accessor %delete-route-input-route-name :initform
                         (common-lisp:error ":routename is required"))
                        (mesh-owner :initarg :|meshOwner| :type
                         (common-lisp:or account-id common-lisp:null) :accessor
                         %delete-route-input-mesh-owner :initform
                         common-lisp:nil)
                        (mesh-name :initarg :|meshName| :type
                         (common-lisp:or resource-name common-lisp:null)
                         :accessor %delete-route-input-mesh-name :initform
                         (common-lisp:error ":meshname is required"))))
 (common-lisp:export
  (common-lisp:list 'delete-route-input 'make-delete-route-input))
 (common-lisp:defun make-delete-route-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key virtual-router-name route-name mesh-owner
                     mesh-name)
   (common-lisp:apply #'common-lisp:make-instance 'delete-route-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input delete-route-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input delete-route-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input delete-route-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-route-output common-lisp:nil
                       ((route :initarg :|route| :type
                         (common-lisp:or route-data common-lisp:null) :accessor
                         %delete-route-output-route :initform
                         (common-lisp:error ":route is required"))))
 (common-lisp:export
  (common-lisp:list 'delete-route-output 'make-delete-route-output))
 (common-lisp:defun make-delete-route-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key route)
   (common-lisp:apply #'common-lisp:make-instance 'delete-route-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input delete-route-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input delete-route-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'route))
      (common-lisp:list
       (common-lisp:cons "route"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input delete-route-output))
   (com.inuoe.jzon:stringify
    (common-lisp:slot-value aws-sdk/generator/shape::input 'route))))
(common-lisp:progn
 (common-lisp:defclass delete-virtual-gateway-input common-lisp:nil
                       ((virtual-gateway-name :initarg :|virtualGatewayName|
                         :type (common-lisp:or resource-name common-lisp:null)
                         :accessor
                         %delete-virtual-gateway-input-virtual-gateway-name
                         :initform
                         (common-lisp:error ":virtualgatewayname is required"))
                        (mesh-owner :initarg :|meshOwner| :type
                         (common-lisp:or account-id common-lisp:null) :accessor
                         %delete-virtual-gateway-input-mesh-owner :initform
                         common-lisp:nil)
                        (mesh-name :initarg :|meshName| :type
                         (common-lisp:or resource-name common-lisp:null)
                         :accessor %delete-virtual-gateway-input-mesh-name
                         :initform
                         (common-lisp:error ":meshname is required"))))
 (common-lisp:export
  (common-lisp:list 'delete-virtual-gateway-input
                    'make-delete-virtual-gateway-input))
 (common-lisp:defun make-delete-virtual-gateway-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key virtual-gateway-name mesh-owner
                     mesh-name)
   (common-lisp:apply #'common-lisp:make-instance 'delete-virtual-gateway-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-virtual-gateway-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-virtual-gateway-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-virtual-gateway-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-virtual-gateway-output common-lisp:nil
                       ((virtual-gateway :initarg :|virtualGateway| :type
                         (common-lisp:or virtual-gateway-data common-lisp:null)
                         :accessor
                         %delete-virtual-gateway-output-virtual-gateway
                         :initform
                         (common-lisp:error ":virtualgateway is required"))))
 (common-lisp:export
  (common-lisp:list 'delete-virtual-gateway-output
                    'make-delete-virtual-gateway-output))
 (common-lisp:defun make-delete-virtual-gateway-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key virtual-gateway)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-virtual-gateway-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-virtual-gateway-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-virtual-gateway-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'virtual-gateway))
      (common-lisp:list
       (common-lisp:cons "virtualGateway"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-virtual-gateway-output))
   (com.inuoe.jzon:stringify
    (common-lisp:slot-value aws-sdk/generator/shape::input 'virtual-gateway))))
(common-lisp:progn
 (common-lisp:defclass delete-virtual-node-input common-lisp:nil
                       ((virtual-node-name :initarg :|virtualNodeName| :type
                         (common-lisp:or resource-name common-lisp:null)
                         :accessor %delete-virtual-node-input-virtual-node-name
                         :initform
                         (common-lisp:error ":virtualnodename is required"))
                        (mesh-owner :initarg :|meshOwner| :type
                         (common-lisp:or account-id common-lisp:null) :accessor
                         %delete-virtual-node-input-mesh-owner :initform
                         common-lisp:nil)
                        (mesh-name :initarg :|meshName| :type
                         (common-lisp:or resource-name common-lisp:null)
                         :accessor %delete-virtual-node-input-mesh-name
                         :initform
                         (common-lisp:error ":meshname is required"))))
 (common-lisp:export
  (common-lisp:list 'delete-virtual-node-input
                    'make-delete-virtual-node-input))
 (common-lisp:defun make-delete-virtual-node-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key virtual-node-name mesh-owner mesh-name)
   (common-lisp:apply #'common-lisp:make-instance 'delete-virtual-node-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-virtual-node-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-virtual-node-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-virtual-node-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-virtual-node-output common-lisp:nil
                       ((virtual-node :initarg :|virtualNode| :type
                         (common-lisp:or virtual-node-data common-lisp:null)
                         :accessor %delete-virtual-node-output-virtual-node
                         :initform
                         (common-lisp:error ":virtualnode is required"))))
 (common-lisp:export
  (common-lisp:list 'delete-virtual-node-output
                    'make-delete-virtual-node-output))
 (common-lisp:defun make-delete-virtual-node-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key virtual-node)
   (common-lisp:apply #'common-lisp:make-instance 'delete-virtual-node-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-virtual-node-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-virtual-node-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'virtual-node))
      (common-lisp:list
       (common-lisp:cons "virtualNode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-virtual-node-output))
   (com.inuoe.jzon:stringify
    (common-lisp:slot-value aws-sdk/generator/shape::input 'virtual-node))))
(common-lisp:progn
 (common-lisp:defclass delete-virtual-router-input common-lisp:nil
                       ((virtual-router-name :initarg :|virtualRouterName|
                         :type (common-lisp:or resource-name common-lisp:null)
                         :accessor
                         %delete-virtual-router-input-virtual-router-name
                         :initform
                         (common-lisp:error ":virtualroutername is required"))
                        (mesh-owner :initarg :|meshOwner| :type
                         (common-lisp:or account-id common-lisp:null) :accessor
                         %delete-virtual-router-input-mesh-owner :initform
                         common-lisp:nil)
                        (mesh-name :initarg :|meshName| :type
                         (common-lisp:or resource-name common-lisp:null)
                         :accessor %delete-virtual-router-input-mesh-name
                         :initform
                         (common-lisp:error ":meshname is required"))))
 (common-lisp:export
  (common-lisp:list 'delete-virtual-router-input
                    'make-delete-virtual-router-input))
 (common-lisp:defun make-delete-virtual-router-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key virtual-router-name mesh-owner mesh-name)
   (common-lisp:apply #'common-lisp:make-instance 'delete-virtual-router-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-virtual-router-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-virtual-router-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-virtual-router-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-virtual-router-output common-lisp:nil
                       ((virtual-router :initarg :|virtualRouter| :type
                         (common-lisp:or virtual-router-data common-lisp:null)
                         :accessor %delete-virtual-router-output-virtual-router
                         :initform
                         (common-lisp:error ":virtualrouter is required"))))
 (common-lisp:export
  (common-lisp:list 'delete-virtual-router-output
                    'make-delete-virtual-router-output))
 (common-lisp:defun make-delete-virtual-router-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key virtual-router)
   (common-lisp:apply #'common-lisp:make-instance 'delete-virtual-router-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-virtual-router-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-virtual-router-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'virtual-router))
      (common-lisp:list
       (common-lisp:cons "virtualRouter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-virtual-router-output))
   (com.inuoe.jzon:stringify
    (common-lisp:slot-value aws-sdk/generator/shape::input 'virtual-router))))
(common-lisp:progn
 (common-lisp:defclass delete-virtual-service-input common-lisp:nil
                       ((virtual-service-name :initarg :|virtualServiceName|
                         :type (common-lisp:or service-name common-lisp:null)
                         :accessor
                         %delete-virtual-service-input-virtual-service-name
                         :initform
                         (common-lisp:error ":virtualservicename is required"))
                        (mesh-owner :initarg :|meshOwner| :type
                         (common-lisp:or account-id common-lisp:null) :accessor
                         %delete-virtual-service-input-mesh-owner :initform
                         common-lisp:nil)
                        (mesh-name :initarg :|meshName| :type
                         (common-lisp:or resource-name common-lisp:null)
                         :accessor %delete-virtual-service-input-mesh-name
                         :initform
                         (common-lisp:error ":meshname is required"))))
 (common-lisp:export
  (common-lisp:list 'delete-virtual-service-input
                    'make-delete-virtual-service-input))
 (common-lisp:defun make-delete-virtual-service-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key virtual-service-name mesh-owner
                     mesh-name)
   (common-lisp:apply #'common-lisp:make-instance 'delete-virtual-service-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-virtual-service-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-virtual-service-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-virtual-service-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-virtual-service-output common-lisp:nil
                       ((virtual-service :initarg :|virtualService| :type
                         (common-lisp:or virtual-service-data common-lisp:null)
                         :accessor
                         %delete-virtual-service-output-virtual-service
                         :initform
                         (common-lisp:error ":virtualservice is required"))))
 (common-lisp:export
  (common-lisp:list 'delete-virtual-service-output
                    'make-delete-virtual-service-output))
 (common-lisp:defun make-delete-virtual-service-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key virtual-service)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-virtual-service-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-virtual-service-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-virtual-service-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'virtual-service))
      (common-lisp:list
       (common-lisp:cons "virtualService"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-virtual-service-output))
   (com.inuoe.jzon:stringify
    (common-lisp:slot-value aws-sdk/generator/shape::input 'virtual-service))))
(common-lisp:progn
 (common-lisp:defclass describe-gateway-route-input common-lisp:nil
                       ((virtual-gateway-name :initarg :|virtualGatewayName|
                         :type (common-lisp:or resource-name common-lisp:null)
                         :accessor
                         %describe-gateway-route-input-virtual-gateway-name
                         :initform
                         (common-lisp:error ":virtualgatewayname is required"))
                        (mesh-owner :initarg :|meshOwner| :type
                         (common-lisp:or account-id common-lisp:null) :accessor
                         %describe-gateway-route-input-mesh-owner :initform
                         common-lisp:nil)
                        (mesh-name :initarg :|meshName| :type
                         (common-lisp:or resource-name common-lisp:null)
                         :accessor %describe-gateway-route-input-mesh-name
                         :initform (common-lisp:error ":meshname is required"))
                        (gateway-route-name :initarg :|gatewayRouteName| :type
                         (common-lisp:or resource-name common-lisp:null)
                         :accessor
                         %describe-gateway-route-input-gateway-route-name
                         :initform
                         (common-lisp:error ":gatewayroutename is required"))))
 (common-lisp:export
  (common-lisp:list 'describe-gateway-route-input
                    'make-describe-gateway-route-input))
 (common-lisp:defun make-describe-gateway-route-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key virtual-gateway-name mesh-owner mesh-name
                     gateway-route-name)
   (common-lisp:apply #'common-lisp:make-instance 'describe-gateway-route-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-gateway-route-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-gateway-route-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-gateway-route-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-gateway-route-output common-lisp:nil
                       ((gateway-route :initarg :|gatewayRoute| :type
                         (common-lisp:or gateway-route-data common-lisp:null)
                         :accessor %describe-gateway-route-output-gateway-route
                         :initform
                         (common-lisp:error ":gatewayroute is required"))))
 (common-lisp:export
  (common-lisp:list 'describe-gateway-route-output
                    'make-describe-gateway-route-output))
 (common-lisp:defun make-describe-gateway-route-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key gateway-route)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-gateway-route-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-gateway-route-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-gateway-route-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'gateway-route))
      (common-lisp:list
       (common-lisp:cons "gatewayRoute"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-gateway-route-output))
   (com.inuoe.jzon:stringify
    (common-lisp:slot-value aws-sdk/generator/shape::input 'gateway-route))))
(common-lisp:progn
 (common-lisp:defclass describe-mesh-input common-lisp:nil
                       ((mesh-owner :initarg :|meshOwner| :type
                         (common-lisp:or account-id common-lisp:null) :accessor
                         %describe-mesh-input-mesh-owner :initform
                         common-lisp:nil)
                        (mesh-name :initarg :|meshName| :type
                         (common-lisp:or resource-name common-lisp:null)
                         :accessor %describe-mesh-input-mesh-name :initform
                         (common-lisp:error ":meshname is required"))))
 (common-lisp:export
  (common-lisp:list 'describe-mesh-input 'make-describe-mesh-input))
 (common-lisp:defun make-describe-mesh-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key mesh-owner mesh-name)
   (common-lisp:apply #'common-lisp:make-instance 'describe-mesh-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input describe-mesh-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input describe-mesh-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input describe-mesh-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-mesh-output common-lisp:nil
                       ((mesh :initarg :|mesh| :type
                         (common-lisp:or mesh-data common-lisp:null) :accessor
                         %describe-mesh-output-mesh :initform
                         (common-lisp:error ":mesh is required"))))
 (common-lisp:export
  (common-lisp:list 'describe-mesh-output 'make-describe-mesh-output))
 (common-lisp:defun make-describe-mesh-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key mesh)
   (common-lisp:apply #'common-lisp:make-instance 'describe-mesh-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input describe-mesh-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input describe-mesh-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'mesh))
      (common-lisp:list
       (common-lisp:cons "mesh"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input describe-mesh-output))
   (com.inuoe.jzon:stringify
    (common-lisp:slot-value aws-sdk/generator/shape::input 'mesh))))
(common-lisp:progn
 (common-lisp:defclass describe-route-input common-lisp:nil
                       ((virtual-router-name :initarg :|virtualRouterName|
                         :type (common-lisp:or resource-name common-lisp:null)
                         :accessor %describe-route-input-virtual-router-name
                         :initform
                         (common-lisp:error ":virtualroutername is required"))
                        (route-name :initarg :|routeName| :type
                         (common-lisp:or resource-name common-lisp:null)
                         :accessor %describe-route-input-route-name :initform
                         (common-lisp:error ":routename is required"))
                        (mesh-owner :initarg :|meshOwner| :type
                         (common-lisp:or account-id common-lisp:null) :accessor
                         %describe-route-input-mesh-owner :initform
                         common-lisp:nil)
                        (mesh-name :initarg :|meshName| :type
                         (common-lisp:or resource-name common-lisp:null)
                         :accessor %describe-route-input-mesh-name :initform
                         (common-lisp:error ":meshname is required"))))
 (common-lisp:export
  (common-lisp:list 'describe-route-input 'make-describe-route-input))
 (common-lisp:defun make-describe-route-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key virtual-router-name route-name mesh-owner
                     mesh-name)
   (common-lisp:apply #'common-lisp:make-instance 'describe-route-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input describe-route-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input describe-route-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input describe-route-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-route-output common-lisp:nil
                       ((route :initarg :|route| :type
                         (common-lisp:or route-data common-lisp:null) :accessor
                         %describe-route-output-route :initform
                         (common-lisp:error ":route is required"))))
 (common-lisp:export
  (common-lisp:list 'describe-route-output 'make-describe-route-output))
 (common-lisp:defun make-describe-route-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key route)
   (common-lisp:apply #'common-lisp:make-instance 'describe-route-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-route-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-route-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'route))
      (common-lisp:list
       (common-lisp:cons "route"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-route-output))
   (com.inuoe.jzon:stringify
    (common-lisp:slot-value aws-sdk/generator/shape::input 'route))))
(common-lisp:progn
 (common-lisp:defclass describe-virtual-gateway-input common-lisp:nil
                       ((virtual-gateway-name :initarg :|virtualGatewayName|
                         :type (common-lisp:or resource-name common-lisp:null)
                         :accessor
                         %describe-virtual-gateway-input-virtual-gateway-name
                         :initform
                         (common-lisp:error ":virtualgatewayname is required"))
                        (mesh-owner :initarg :|meshOwner| :type
                         (common-lisp:or account-id common-lisp:null) :accessor
                         %describe-virtual-gateway-input-mesh-owner :initform
                         common-lisp:nil)
                        (mesh-name :initarg :|meshName| :type
                         (common-lisp:or resource-name common-lisp:null)
                         :accessor %describe-virtual-gateway-input-mesh-name
                         :initform
                         (common-lisp:error ":meshname is required"))))
 (common-lisp:export
  (common-lisp:list 'describe-virtual-gateway-input
                    'make-describe-virtual-gateway-input))
 (common-lisp:defun make-describe-virtual-gateway-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key virtual-gateway-name mesh-owner
                     mesh-name)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-virtual-gateway-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-virtual-gateway-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-virtual-gateway-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-virtual-gateway-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-virtual-gateway-output common-lisp:nil
                       ((virtual-gateway :initarg :|virtualGateway| :type
                         (common-lisp:or virtual-gateway-data common-lisp:null)
                         :accessor
                         %describe-virtual-gateway-output-virtual-gateway
                         :initform
                         (common-lisp:error ":virtualgateway is required"))))
 (common-lisp:export
  (common-lisp:list 'describe-virtual-gateway-output
                    'make-describe-virtual-gateway-output))
 (common-lisp:defun make-describe-virtual-gateway-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key virtual-gateway)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-virtual-gateway-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-virtual-gateway-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-virtual-gateway-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'virtual-gateway))
      (common-lisp:list
       (common-lisp:cons "virtualGateway"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-virtual-gateway-output))
   (com.inuoe.jzon:stringify
    (common-lisp:slot-value aws-sdk/generator/shape::input 'virtual-gateway))))
(common-lisp:progn
 (common-lisp:defclass describe-virtual-node-input common-lisp:nil
                       ((virtual-node-name :initarg :|virtualNodeName| :type
                         (common-lisp:or resource-name common-lisp:null)
                         :accessor
                         %describe-virtual-node-input-virtual-node-name
                         :initform
                         (common-lisp:error ":virtualnodename is required"))
                        (mesh-owner :initarg :|meshOwner| :type
                         (common-lisp:or account-id common-lisp:null) :accessor
                         %describe-virtual-node-input-mesh-owner :initform
                         common-lisp:nil)
                        (mesh-name :initarg :|meshName| :type
                         (common-lisp:or resource-name common-lisp:null)
                         :accessor %describe-virtual-node-input-mesh-name
                         :initform
                         (common-lisp:error ":meshname is required"))))
 (common-lisp:export
  (common-lisp:list 'describe-virtual-node-input
                    'make-describe-virtual-node-input))
 (common-lisp:defun make-describe-virtual-node-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key virtual-node-name mesh-owner mesh-name)
   (common-lisp:apply #'common-lisp:make-instance 'describe-virtual-node-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-virtual-node-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-virtual-node-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-virtual-node-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-virtual-node-output common-lisp:nil
                       ((virtual-node :initarg :|virtualNode| :type
                         (common-lisp:or virtual-node-data common-lisp:null)
                         :accessor %describe-virtual-node-output-virtual-node
                         :initform
                         (common-lisp:error ":virtualnode is required"))))
 (common-lisp:export
  (common-lisp:list 'describe-virtual-node-output
                    'make-describe-virtual-node-output))
 (common-lisp:defun make-describe-virtual-node-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key virtual-node)
   (common-lisp:apply #'common-lisp:make-instance 'describe-virtual-node-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-virtual-node-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-virtual-node-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'virtual-node))
      (common-lisp:list
       (common-lisp:cons "virtualNode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-virtual-node-output))
   (com.inuoe.jzon:stringify
    (common-lisp:slot-value aws-sdk/generator/shape::input 'virtual-node))))
(common-lisp:progn
 (common-lisp:defclass describe-virtual-router-input common-lisp:nil
                       ((virtual-router-name :initarg :|virtualRouterName|
                         :type (common-lisp:or resource-name common-lisp:null)
                         :accessor
                         %describe-virtual-router-input-virtual-router-name
                         :initform
                         (common-lisp:error ":virtualroutername is required"))
                        (mesh-owner :initarg :|meshOwner| :type
                         (common-lisp:or account-id common-lisp:null) :accessor
                         %describe-virtual-router-input-mesh-owner :initform
                         common-lisp:nil)
                        (mesh-name :initarg :|meshName| :type
                         (common-lisp:or resource-name common-lisp:null)
                         :accessor %describe-virtual-router-input-mesh-name
                         :initform
                         (common-lisp:error ":meshname is required"))))
 (common-lisp:export
  (common-lisp:list 'describe-virtual-router-input
                    'make-describe-virtual-router-input))
 (common-lisp:defun make-describe-virtual-router-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key virtual-router-name mesh-owner mesh-name)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-virtual-router-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-virtual-router-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-virtual-router-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-virtual-router-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-virtual-router-output common-lisp:nil
                       ((virtual-router :initarg :|virtualRouter| :type
                         (common-lisp:or virtual-router-data common-lisp:null)
                         :accessor
                         %describe-virtual-router-output-virtual-router
                         :initform
                         (common-lisp:error ":virtualrouter is required"))))
 (common-lisp:export
  (common-lisp:list 'describe-virtual-router-output
                    'make-describe-virtual-router-output))
 (common-lisp:defun make-describe-virtual-router-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key virtual-router)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-virtual-router-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-virtual-router-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-virtual-router-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'virtual-router))
      (common-lisp:list
       (common-lisp:cons "virtualRouter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-virtual-router-output))
   (com.inuoe.jzon:stringify
    (common-lisp:slot-value aws-sdk/generator/shape::input 'virtual-router))))
(common-lisp:progn
 (common-lisp:defclass describe-virtual-service-input common-lisp:nil
                       ((virtual-service-name :initarg :|virtualServiceName|
                         :type (common-lisp:or service-name common-lisp:null)
                         :accessor
                         %describe-virtual-service-input-virtual-service-name
                         :initform
                         (common-lisp:error ":virtualservicename is required"))
                        (mesh-owner :initarg :|meshOwner| :type
                         (common-lisp:or account-id common-lisp:null) :accessor
                         %describe-virtual-service-input-mesh-owner :initform
                         common-lisp:nil)
                        (mesh-name :initarg :|meshName| :type
                         (common-lisp:or resource-name common-lisp:null)
                         :accessor %describe-virtual-service-input-mesh-name
                         :initform
                         (common-lisp:error ":meshname is required"))))
 (common-lisp:export
  (common-lisp:list 'describe-virtual-service-input
                    'make-describe-virtual-service-input))
 (common-lisp:defun make-describe-virtual-service-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key virtual-service-name mesh-owner
                     mesh-name)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-virtual-service-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-virtual-service-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-virtual-service-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-virtual-service-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-virtual-service-output common-lisp:nil
                       ((virtual-service :initarg :|virtualService| :type
                         (common-lisp:or virtual-service-data common-lisp:null)
                         :accessor
                         %describe-virtual-service-output-virtual-service
                         :initform
                         (common-lisp:error ":virtualservice is required"))))
 (common-lisp:export
  (common-lisp:list 'describe-virtual-service-output
                    'make-describe-virtual-service-output))
 (common-lisp:defun make-describe-virtual-service-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key virtual-service)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-virtual-service-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-virtual-service-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-virtual-service-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'virtual-service))
      (common-lisp:list
       (common-lisp:cons "virtualService"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-virtual-service-output))
   (com.inuoe.jzon:stringify
    (common-lisp:slot-value aws-sdk/generator/shape::input 'virtual-service))))
(common-lisp:deftype dns-response-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass dns-service-discovery common-lisp:nil
                       ((response-type :initarg :|responseType| :type
                         (common-lisp:or dns-response-type common-lisp:null)
                         :accessor %dns-service-discovery-response-type
                         :initform common-lisp:nil)
                        (ip-preference :initarg :|ipPreference| :type
                         (common-lisp:or ip-preference common-lisp:null)
                         :accessor %dns-service-discovery-ip-preference
                         :initform common-lisp:nil)
                        (hostname :initarg :|hostname| :type
                         (common-lisp:or hostname common-lisp:null) :accessor
                         %dns-service-discovery-hostname :initform
                         (common-lisp:error ":hostname is required"))))
 (common-lisp:export
  (common-lisp:list 'dns-service-discovery 'make-dns-service-discovery))
 (common-lisp:defun make-dns-service-discovery
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key response-type ip-preference hostname)
   (common-lisp:apply #'common-lisp:make-instance 'dns-service-discovery
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          dns-service-discovery))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          dns-service-discovery))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'hostname))
      (common-lisp:list
       (common-lisp:cons "hostname"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ip-preference))
      (common-lisp:list
       (common-lisp:cons "ipPreference"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'response-type))
      (common-lisp:list
       (common-lisp:cons "responseType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          dns-service-discovery))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass duration common-lisp:nil
                       ((value :initarg :|value| :type
                         (common-lisp:or duration-value common-lisp:null)
                         :accessor %duration-value :initform common-lisp:nil)
                        (unit :initarg :|unit| :type
                         (common-lisp:or duration-unit common-lisp:null)
                         :accessor %duration-unit :initform common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'duration 'make-duration))
 (common-lisp:defun make-duration
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key value unit)
   (common-lisp:apply #'common-lisp:make-instance 'duration
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input duration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input duration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'unit))
      (common-lisp:list
       (common-lisp:cons "unit"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input duration))
   common-lisp:nil))
(common-lisp:deftype duration-unit () 'common-lisp:string)
(common-lisp:deftype duration-value () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass egress-filter common-lisp:nil
                       ((type :initarg :|type| :type
                         (common-lisp:or egress-filter-type common-lisp:null)
                         :accessor %egress-filter-type :initform
                         (common-lisp:error ":type is required"))))
 (common-lisp:export (common-lisp:list 'egress-filter 'make-egress-filter))
 (common-lisp:defun make-egress-filter
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key type)
   (common-lisp:apply #'common-lisp:make-instance 'egress-filter
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input egress-filter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input egress-filter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input egress-filter))
   common-lisp:nil))
(common-lisp:deftype egress-filter-type () 'common-lisp:string)
(common-lisp:deftype exact-host-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass file-access-log common-lisp:nil
                       ((path :initarg :|path| :type
                         (common-lisp:or file-path common-lisp:null) :accessor
                         %file-access-log-path :initform
                         (common-lisp:error ":path is required"))
                        (format :initarg :|format| :type
                         (common-lisp:or logging-format common-lisp:null)
                         :accessor %file-access-log-format :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'file-access-log 'make-file-access-log))
 (common-lisp:defun make-file-access-log
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key path format)
   (common-lisp:apply #'common-lisp:make-instance 'file-access-log
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input file-access-log))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input file-access-log))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'format))
      (common-lisp:list
       (common-lisp:cons "format"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'path))
      (common-lisp:list
       (common-lisp:cons "path"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input file-access-log))
   common-lisp:nil))
(common-lisp:deftype file-path () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition forbidden-exception
     (appmesh-error)
     ((message :initarg :|message| :initform common-lisp:nil :reader
       forbidden-exception-message)))
 (common-lisp:export
  (common-lisp:list 'forbidden-exception 'forbidden-exception-message)))
(common-lisp:progn
 (common-lisp:defclass gateway-route-data common-lisp:nil
                       ((virtual-gateway-name :initarg :|virtualGatewayName|
                         :type (common-lisp:or resource-name common-lisp:null)
                         :accessor %gateway-route-data-virtual-gateway-name
                         :initform
                         (common-lisp:error ":virtualgatewayname is required"))
                        (status :initarg :|status| :type
                         (common-lisp:or gateway-route-status common-lisp:null)
                         :accessor %gateway-route-data-status :initform
                         (common-lisp:error ":status is required"))
                        (spec :initarg :|spec| :type
                         (common-lisp:or gateway-route-spec common-lisp:null)
                         :accessor %gateway-route-data-spec :initform
                         (common-lisp:error ":spec is required"))
                        (metadata :initarg :|metadata| :type
                         (common-lisp:or resource-metadata common-lisp:null)
                         :accessor %gateway-route-data-metadata :initform
                         (common-lisp:error ":metadata is required"))
                        (mesh-name :initarg :|meshName| :type
                         (common-lisp:or resource-name common-lisp:null)
                         :accessor %gateway-route-data-mesh-name :initform
                         (common-lisp:error ":meshname is required"))
                        (gateway-route-name :initarg :|gatewayRouteName| :type
                         (common-lisp:or resource-name common-lisp:null)
                         :accessor %gateway-route-data-gateway-route-name
                         :initform
                         (common-lisp:error ":gatewayroutename is required"))))
 (common-lisp:export
  (common-lisp:list 'gateway-route-data 'make-gateway-route-data))
 (common-lisp:defun make-gateway-route-data
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key virtual-gateway-name status spec metadata
                     mesh-name gateway-route-name)
   (common-lisp:apply #'common-lisp:make-instance 'gateway-route-data
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input gateway-route-data))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input gateway-route-data))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'gateway-route-name))
      (common-lisp:list
       (common-lisp:cons "gatewayRouteName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'mesh-name))
      (common-lisp:list
       (common-lisp:cons "meshName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metadata))
      (common-lisp:list
       (common-lisp:cons "metadata"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'spec))
      (common-lisp:list
       (common-lisp:cons "spec"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'virtual-gateway-name))
      (common-lisp:list
       (common-lisp:cons "virtualGatewayName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input gateway-route-data))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass gateway-route-hostname-match common-lisp:nil
                       ((suffix :initarg :|suffix| :type
                         (common-lisp:or suffix-hostname common-lisp:null)
                         :accessor %gateway-route-hostname-match-suffix
                         :initform common-lisp:nil)
                        (exact :initarg :|exact| :type
                         (common-lisp:or exact-host-name common-lisp:null)
                         :accessor %gateway-route-hostname-match-exact
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'gateway-route-hostname-match
                    'make-gateway-route-hostname-match))
 (common-lisp:defun make-gateway-route-hostname-match
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key suffix exact)
   (common-lisp:apply #'common-lisp:make-instance 'gateway-route-hostname-match
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          gateway-route-hostname-match))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          gateway-route-hostname-match))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'exact))
      (common-lisp:list
       (common-lisp:cons "exact"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'suffix))
      (common-lisp:list
       (common-lisp:cons "suffix"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          gateway-route-hostname-match))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass gateway-route-hostname-rewrite common-lisp:nil
                       ((default-target-hostname :initarg
                         :|defaultTargetHostname| :type
                         (common-lisp:or default-gateway-route-rewrite
                                         common-lisp:null)
                         :accessor
                         %gateway-route-hostname-rewrite-default-target-hostname
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'gateway-route-hostname-rewrite
                    'make-gateway-route-hostname-rewrite))
 (common-lisp:defun make-gateway-route-hostname-rewrite
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key default-target-hostname)
   (common-lisp:apply #'common-lisp:make-instance
                      'gateway-route-hostname-rewrite
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          gateway-route-hostname-rewrite))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          gateway-route-hostname-rewrite))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'default-target-hostname))
      (common-lisp:list
       (common-lisp:cons "defaultTargetHostname"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          gateway-route-hostname-rewrite))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype gateway-route-list ()
   '(trivial-types:proper-list gateway-route-ref))
 (common-lisp:defun |make-gateway-route-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list gateway-route-ref))
   aws-sdk/generator/shape::members))
(common-lisp:deftype gateway-route-priority () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass gateway-route-ref common-lisp:nil
                       ((virtual-gateway-name :initarg :|virtualGatewayName|
                         :type (common-lisp:or resource-name common-lisp:null)
                         :accessor %gateway-route-ref-virtual-gateway-name
                         :initform
                         (common-lisp:error ":virtualgatewayname is required"))
                        (version :initarg :|version| :type
                         (common-lisp:or long common-lisp:null) :accessor
                         %gateway-route-ref-version :initform
                         (common-lisp:error ":version is required"))
                        (resource-owner :initarg :|resourceOwner| :type
                         (common-lisp:or account-id common-lisp:null) :accessor
                         %gateway-route-ref-resource-owner :initform
                         (common-lisp:error ":resourceowner is required"))
                        (mesh-owner :initarg :|meshOwner| :type
                         (common-lisp:or account-id common-lisp:null) :accessor
                         %gateway-route-ref-mesh-owner :initform
                         (common-lisp:error ":meshowner is required"))
                        (mesh-name :initarg :|meshName| :type
                         (common-lisp:or resource-name common-lisp:null)
                         :accessor %gateway-route-ref-mesh-name :initform
                         (common-lisp:error ":meshname is required"))
                        (last-updated-at :initarg :|lastUpdatedAt| :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %gateway-route-ref-last-updated-at :initform
                         (common-lisp:error ":lastupdatedat is required"))
                        (gateway-route-name :initarg :|gatewayRouteName| :type
                         (common-lisp:or resource-name common-lisp:null)
                         :accessor %gateway-route-ref-gateway-route-name
                         :initform
                         (common-lisp:error ":gatewayroutename is required"))
                        (created-at :initarg :|createdAt| :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %gateway-route-ref-created-at :initform
                         (common-lisp:error ":createdat is required"))
                        (arn :initarg :|arn| :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %gateway-route-ref-arn :initform
                         (common-lisp:error ":arn is required"))))
 (common-lisp:export
  (common-lisp:list 'gateway-route-ref 'make-gateway-route-ref))
 (common-lisp:defun make-gateway-route-ref
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key virtual-gateway-name version
                     resource-owner mesh-owner mesh-name last-updated-at
                     gateway-route-name created-at arn)
   (common-lisp:apply #'common-lisp:make-instance 'gateway-route-ref
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input gateway-route-ref))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input gateway-route-ref))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "createdAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'gateway-route-name))
      (common-lisp:list
       (common-lisp:cons "gatewayRouteName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-updated-at))
      (common-lisp:list
       (common-lisp:cons "lastUpdatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'mesh-name))
      (common-lisp:list
       (common-lisp:cons "meshName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'mesh-owner))
      (common-lisp:list
       (common-lisp:cons "meshOwner"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-owner))
      (common-lisp:list
       (common-lisp:cons "resourceOwner"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version))
      (common-lisp:list
       (common-lisp:cons "version"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'virtual-gateway-name))
      (common-lisp:list
       (common-lisp:cons "virtualGatewayName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input gateway-route-ref))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass gateway-route-spec common-lisp:nil
                       ((priority :initarg :|priority| :type
                         (common-lisp:or gateway-route-priority
                                         common-lisp:null)
                         :accessor %gateway-route-spec-priority :initform
                         common-lisp:nil)
                        (http-route :initarg :|httpRoute| :type
                         (common-lisp:or http-gateway-route common-lisp:null)
                         :accessor %gateway-route-spec-http-route :initform
                         common-lisp:nil)
                        (http2route :initarg :|http2Route| :type
                         (common-lisp:or http-gateway-route common-lisp:null)
                         :accessor %gateway-route-spec-http2route :initform
                         common-lisp:nil)
                        (grpc-route :initarg :|grpcRoute| :type
                         (common-lisp:or grpc-gateway-route common-lisp:null)
                         :accessor %gateway-route-spec-grpc-route :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'gateway-route-spec 'make-gateway-route-spec))
 (common-lisp:defun make-gateway-route-spec
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key priority http-route http2route
                     grpc-route)
   (common-lisp:apply #'common-lisp:make-instance 'gateway-route-spec
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input gateway-route-spec))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input gateway-route-spec))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'grpc-route))
      (common-lisp:list
       (common-lisp:cons "grpcRoute"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'http2route))
      (common-lisp:list
       (common-lisp:cons "http2Route"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'http-route))
      (common-lisp:list
       (common-lisp:cons "httpRoute"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'priority))
      (common-lisp:list
       (common-lisp:cons "priority"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input gateway-route-spec))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass gateway-route-status common-lisp:nil
                       ((status :initarg :|status| :type
                         (common-lisp:or gateway-route-status-code
                                         common-lisp:null)
                         :accessor %gateway-route-status-status :initform
                         (common-lisp:error ":status is required"))))
 (common-lisp:export
  (common-lisp:list 'gateway-route-status 'make-gateway-route-status))
 (common-lisp:defun make-gateway-route-status
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key status)
   (common-lisp:apply #'common-lisp:make-instance 'gateway-route-status
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input gateway-route-status))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input gateway-route-status))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input gateway-route-status))
   common-lisp:nil))
(common-lisp:deftype gateway-route-status-code () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass gateway-route-target common-lisp:nil
                       ((virtual-service :initarg :|virtualService| :type
                         (common-lisp:or gateway-route-virtual-service
                                         common-lisp:null)
                         :accessor %gateway-route-target-virtual-service
                         :initform
                         (common-lisp:error ":virtualservice is required"))
                        (port :initarg :|port| :type
                         (common-lisp:or listener-port common-lisp:null)
                         :accessor %gateway-route-target-port :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'gateway-route-target 'make-gateway-route-target))
 (common-lisp:defun make-gateway-route-target
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key virtual-service port)
   (common-lisp:apply #'common-lisp:make-instance 'gateway-route-target
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input gateway-route-target))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input gateway-route-target))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'port))
      (common-lisp:list
       (common-lisp:cons "port"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'virtual-service))
      (common-lisp:list
       (common-lisp:cons "virtualService"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input gateway-route-target))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass gateway-route-virtual-service common-lisp:nil
                       ((virtual-service-name :initarg :|virtualServiceName|
                         :type (common-lisp:or resource-name common-lisp:null)
                         :accessor
                         %gateway-route-virtual-service-virtual-service-name
                         :initform
                         (common-lisp:error
                          ":virtualservicename is required"))))
 (common-lisp:export
  (common-lisp:list 'gateway-route-virtual-service
                    'make-gateway-route-virtual-service))
 (common-lisp:defun make-gateway-route-virtual-service
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key virtual-service-name)
   (common-lisp:apply #'common-lisp:make-instance
                      'gateway-route-virtual-service
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          gateway-route-virtual-service))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          gateway-route-virtual-service))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'virtual-service-name))
      (common-lisp:list
       (common-lisp:cons "virtualServiceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          gateway-route-virtual-service))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass grpc-gateway-route common-lisp:nil
                       ((match :initarg :|match| :type
                         (common-lisp:or grpc-gateway-route-match
                                         common-lisp:null)
                         :accessor %grpc-gateway-route-match :initform
                         (common-lisp:error ":match is required"))
                        (action :initarg :|action| :type
                         (common-lisp:or grpc-gateway-route-action
                                         common-lisp:null)
                         :accessor %grpc-gateway-route-action :initform
                         (common-lisp:error ":action is required"))))
 (common-lisp:export
  (common-lisp:list 'grpc-gateway-route 'make-grpc-gateway-route))
 (common-lisp:defun make-grpc-gateway-route
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key match action)
   (common-lisp:apply #'common-lisp:make-instance 'grpc-gateway-route
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input grpc-gateway-route))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input grpc-gateway-route))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'action))
      (common-lisp:list
       (common-lisp:cons "action"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'match))
      (common-lisp:list
       (common-lisp:cons "match"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input grpc-gateway-route))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass grpc-gateway-route-action common-lisp:nil
                       ((target :initarg :|target| :type
                         (common-lisp:or gateway-route-target common-lisp:null)
                         :accessor %grpc-gateway-route-action-target :initform
                         (common-lisp:error ":target is required"))
                        (rewrite :initarg :|rewrite| :type
                         (common-lisp:or grpc-gateway-route-rewrite
                                         common-lisp:null)
                         :accessor %grpc-gateway-route-action-rewrite :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'grpc-gateway-route-action
                    'make-grpc-gateway-route-action))
 (common-lisp:defun make-grpc-gateway-route-action
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key target rewrite)
   (common-lisp:apply #'common-lisp:make-instance 'grpc-gateway-route-action
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          grpc-gateway-route-action))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          grpc-gateway-route-action))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rewrite))
      (common-lisp:list
       (common-lisp:cons "rewrite"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target))
      (common-lisp:list
       (common-lisp:cons "target"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          grpc-gateway-route-action))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass grpc-gateway-route-match common-lisp:nil
                       ((service-name :initarg :|serviceName| :type
                         (common-lisp:or service-name common-lisp:null)
                         :accessor %grpc-gateway-route-match-service-name
                         :initform common-lisp:nil)
                        (port :initarg :|port| :type
                         (common-lisp:or listener-port common-lisp:null)
                         :accessor %grpc-gateway-route-match-port :initform
                         common-lisp:nil)
                        (metadata :initarg :|metadata| :type
                         (common-lisp:or grpc-gateway-route-metadata-list
                                         common-lisp:null)
                         :accessor %grpc-gateway-route-match-metadata :initform
                         common-lisp:nil)
                        (hostname :initarg :|hostname| :type
                         (common-lisp:or gateway-route-hostname-match
                                         common-lisp:null)
                         :accessor %grpc-gateway-route-match-hostname :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'grpc-gateway-route-match 'make-grpc-gateway-route-match))
 (common-lisp:defun make-grpc-gateway-route-match
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key service-name port metadata hostname)
   (common-lisp:apply #'common-lisp:make-instance 'grpc-gateway-route-match
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          grpc-gateway-route-match))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          grpc-gateway-route-match))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'hostname))
      (common-lisp:list
       (common-lisp:cons "hostname"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metadata))
      (common-lisp:list
       (common-lisp:cons "metadata"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'port))
      (common-lisp:list
       (common-lisp:cons "port"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service-name))
      (common-lisp:list
       (common-lisp:cons "serviceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          grpc-gateway-route-match))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass grpc-gateway-route-metadata common-lisp:nil
                       ((name :initarg :|name| :type
                         (common-lisp:or header-name common-lisp:null)
                         :accessor %grpc-gateway-route-metadata-name :initform
                         (common-lisp:error ":name is required"))
                        (match :initarg :|match| :type
                         (common-lisp:or grpc-metadata-match-method
                                         common-lisp:null)
                         :accessor %grpc-gateway-route-metadata-match :initform
                         common-lisp:nil)
                        (invert :initarg :|invert| :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         %grpc-gateway-route-metadata-invert :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'grpc-gateway-route-metadata
                    'make-grpc-gateway-route-metadata))
 (common-lisp:defun make-grpc-gateway-route-metadata
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key name match invert)
   (common-lisp:apply #'common-lisp:make-instance 'grpc-gateway-route-metadata
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          grpc-gateway-route-metadata))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          grpc-gateway-route-metadata))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'invert))
      (common-lisp:list
       (common-lisp:cons "invert"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'match))
      (common-lisp:list
       (common-lisp:cons "match"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          grpc-gateway-route-metadata))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype grpc-gateway-route-metadata-list ()
   '(trivial-types:proper-list grpc-gateway-route-metadata))
 (common-lisp:defun |make-grpc-gateway-route-metadata-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            grpc-gateway-route-metadata))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass grpc-gateway-route-rewrite common-lisp:nil
                       ((hostname :initarg :|hostname| :type
                         (common-lisp:or gateway-route-hostname-rewrite
                                         common-lisp:null)
                         :accessor %grpc-gateway-route-rewrite-hostname
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'grpc-gateway-route-rewrite
                    'make-grpc-gateway-route-rewrite))
 (common-lisp:defun make-grpc-gateway-route-rewrite
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key hostname)
   (common-lisp:apply #'common-lisp:make-instance 'grpc-gateway-route-rewrite
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          grpc-gateway-route-rewrite))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          grpc-gateway-route-rewrite))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'hostname))
      (common-lisp:list
       (common-lisp:cons "hostname"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          grpc-gateway-route-rewrite))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass grpc-metadata-match-method common-lisp:nil
                       ((suffix :initarg :|suffix| :type
                         (common-lisp:or header-match common-lisp:null)
                         :accessor %grpc-metadata-match-method-suffix :initform
                         common-lisp:nil)
                        (regex :initarg :|regex| :type
                         (common-lisp:or header-match common-lisp:null)
                         :accessor %grpc-metadata-match-method-regex :initform
                         common-lisp:nil)
                        (range :initarg :|range| :type
                         (common-lisp:or match-range common-lisp:null)
                         :accessor %grpc-metadata-match-method-range :initform
                         common-lisp:nil)
                        (prefix :initarg :|prefix| :type
                         (common-lisp:or header-match common-lisp:null)
                         :accessor %grpc-metadata-match-method-prefix :initform
                         common-lisp:nil)
                        (exact :initarg :|exact| :type
                         (common-lisp:or header-match common-lisp:null)
                         :accessor %grpc-metadata-match-method-exact :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'grpc-metadata-match-method
                    'make-grpc-metadata-match-method))
 (common-lisp:defun make-grpc-metadata-match-method
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key suffix regex range prefix exact)
   (common-lisp:apply #'common-lisp:make-instance 'grpc-metadata-match-method
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          grpc-metadata-match-method))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          grpc-metadata-match-method))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'exact))
      (common-lisp:list
       (common-lisp:cons "exact"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'prefix))
      (common-lisp:list
       (common-lisp:cons "prefix"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'range))
      (common-lisp:list
       (common-lisp:cons "range"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'regex))
      (common-lisp:list
       (common-lisp:cons "regex"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'suffix))
      (common-lisp:list
       (common-lisp:cons "suffix"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          grpc-metadata-match-method))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass grpc-retry-policy common-lisp:nil
                       ((tcp-retry-events :initarg :|tcpRetryEvents| :type
                         (common-lisp:or tcp-retry-policy-events
                                         common-lisp:null)
                         :accessor %grpc-retry-policy-tcp-retry-events
                         :initform common-lisp:nil)
                        (per-retry-timeout :initarg :|perRetryTimeout| :type
                         (common-lisp:or duration common-lisp:null) :accessor
                         %grpc-retry-policy-per-retry-timeout :initform
                         (common-lisp:error ":perretrytimeout is required"))
                        (max-retries :initarg :|maxRetries| :type
                         (common-lisp:or max-retries common-lisp:null)
                         :accessor %grpc-retry-policy-max-retries :initform
                         (common-lisp:error ":maxretries is required"))
                        (http-retry-events :initarg :|httpRetryEvents| :type
                         (common-lisp:or http-retry-policy-events
                                         common-lisp:null)
                         :accessor %grpc-retry-policy-http-retry-events
                         :initform common-lisp:nil)
                        (grpc-retry-events :initarg :|grpcRetryEvents| :type
                         (common-lisp:or grpc-retry-policy-events
                                         common-lisp:null)
                         :accessor %grpc-retry-policy-grpc-retry-events
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'grpc-retry-policy 'make-grpc-retry-policy))
 (common-lisp:defun make-grpc-retry-policy
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tcp-retry-events per-retry-timeout
                     max-retries http-retry-events grpc-retry-events)
   (common-lisp:apply #'common-lisp:make-instance 'grpc-retry-policy
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input grpc-retry-policy))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input grpc-retry-policy))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'grpc-retry-events))
      (common-lisp:list
       (common-lisp:cons "grpcRetryEvents"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'http-retry-events))
      (common-lisp:list
       (common-lisp:cons "httpRetryEvents"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-retries))
      (common-lisp:list
       (common-lisp:cons "maxRetries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'per-retry-timeout))
      (common-lisp:list
       (common-lisp:cons "perRetryTimeout"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tcp-retry-events))
      (common-lisp:list
       (common-lisp:cons "tcpRetryEvents"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input grpc-retry-policy))
   common-lisp:nil))
(common-lisp:deftype grpc-retry-policy-event () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype grpc-retry-policy-events ()
   '(trivial-types:proper-list grpc-retry-policy-event))
 (common-lisp:defun |make-grpc-retry-policy-events|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list grpc-retry-policy-event))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass grpc-route common-lisp:nil
                       ((timeout :initarg :|timeout| :type
                         (common-lisp:or grpc-timeout common-lisp:null)
                         :accessor %grpc-route-timeout :initform
                         common-lisp:nil)
                        (retry-policy :initarg :|retryPolicy| :type
                         (common-lisp:or grpc-retry-policy common-lisp:null)
                         :accessor %grpc-route-retry-policy :initform
                         common-lisp:nil)
                        (match :initarg :|match| :type
                         (common-lisp:or grpc-route-match common-lisp:null)
                         :accessor %grpc-route-match :initform
                         (common-lisp:error ":match is required"))
                        (action :initarg :|action| :type
                         (common-lisp:or grpc-route-action common-lisp:null)
                         :accessor %grpc-route-action :initform
                         (common-lisp:error ":action is required"))))
 (common-lisp:export (common-lisp:list 'grpc-route 'make-grpc-route))
 (common-lisp:defun make-grpc-route
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key timeout retry-policy match action)
   (common-lisp:apply #'common-lisp:make-instance 'grpc-route
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input grpc-route))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input grpc-route))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'action))
      (common-lisp:list
       (common-lisp:cons "action"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'match))
      (common-lisp:list
       (common-lisp:cons "match"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'retry-policy))
      (common-lisp:list
       (common-lisp:cons "retryPolicy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'timeout))
      (common-lisp:list
       (common-lisp:cons "timeout"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input grpc-route))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass grpc-route-action common-lisp:nil
                       ((weighted-targets :initarg :|weightedTargets| :type
                         (common-lisp:or weighted-targets common-lisp:null)
                         :accessor %grpc-route-action-weighted-targets
                         :initform
                         (common-lisp:error ":weightedtargets is required"))))
 (common-lisp:export
  (common-lisp:list 'grpc-route-action 'make-grpc-route-action))
 (common-lisp:defun make-grpc-route-action
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key weighted-targets)
   (common-lisp:apply #'common-lisp:make-instance 'grpc-route-action
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input grpc-route-action))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input grpc-route-action))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'weighted-targets))
      (common-lisp:list
       (common-lisp:cons "weightedTargets"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input grpc-route-action))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass grpc-route-match common-lisp:nil
                       ((service-name :initarg :|serviceName| :type
                         (common-lisp:or service-name common-lisp:null)
                         :accessor %grpc-route-match-service-name :initform
                         common-lisp:nil)
                        (port :initarg :|port| :type
                         (common-lisp:or listener-port common-lisp:null)
                         :accessor %grpc-route-match-port :initform
                         common-lisp:nil)
                        (method-name :initarg :|methodName| :type
                         (common-lisp:or method-name common-lisp:null)
                         :accessor %grpc-route-match-method-name :initform
                         common-lisp:nil)
                        (metadata :initarg :|metadata| :type
                         (common-lisp:or grpc-route-metadata-list
                                         common-lisp:null)
                         :accessor %grpc-route-match-metadata :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'grpc-route-match 'make-grpc-route-match))
 (common-lisp:defun make-grpc-route-match
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key service-name port method-name metadata)
   (common-lisp:apply #'common-lisp:make-instance 'grpc-route-match
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input grpc-route-match))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input grpc-route-match))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metadata))
      (common-lisp:list
       (common-lisp:cons "metadata"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'method-name))
      (common-lisp:list
       (common-lisp:cons "methodName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'port))
      (common-lisp:list
       (common-lisp:cons "port"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service-name))
      (common-lisp:list
       (common-lisp:cons "serviceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input grpc-route-match))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass grpc-route-metadata common-lisp:nil
                       ((name :initarg :|name| :type
                         (common-lisp:or header-name common-lisp:null)
                         :accessor %grpc-route-metadata-name :initform
                         (common-lisp:error ":name is required"))
                        (match :initarg :|match| :type
                         (common-lisp:or grpc-route-metadata-match-method
                                         common-lisp:null)
                         :accessor %grpc-route-metadata-match :initform
                         common-lisp:nil)
                        (invert :initarg :|invert| :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         %grpc-route-metadata-invert :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'grpc-route-metadata 'make-grpc-route-metadata))
 (common-lisp:defun make-grpc-route-metadata
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key name match invert)
   (common-lisp:apply #'common-lisp:make-instance 'grpc-route-metadata
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input grpc-route-metadata))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input grpc-route-metadata))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'invert))
      (common-lisp:list
       (common-lisp:cons "invert"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'match))
      (common-lisp:list
       (common-lisp:cons "match"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input grpc-route-metadata))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype grpc-route-metadata-list ()
   '(trivial-types:proper-list grpc-route-metadata))
 (common-lisp:defun |make-grpc-route-metadata-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list grpc-route-metadata))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass grpc-route-metadata-match-method common-lisp:nil
                       ((suffix :initarg :|suffix| :type
                         (common-lisp:or header-match common-lisp:null)
                         :accessor %grpc-route-metadata-match-method-suffix
                         :initform common-lisp:nil)
                        (regex :initarg :|regex| :type
                         (common-lisp:or header-match common-lisp:null)
                         :accessor %grpc-route-metadata-match-method-regex
                         :initform common-lisp:nil)
                        (range :initarg :|range| :type
                         (common-lisp:or match-range common-lisp:null)
                         :accessor %grpc-route-metadata-match-method-range
                         :initform common-lisp:nil)
                        (prefix :initarg :|prefix| :type
                         (common-lisp:or header-match common-lisp:null)
                         :accessor %grpc-route-metadata-match-method-prefix
                         :initform common-lisp:nil)
                        (exact :initarg :|exact| :type
                         (common-lisp:or header-match common-lisp:null)
                         :accessor %grpc-route-metadata-match-method-exact
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'grpc-route-metadata-match-method
                    'make-grpc-route-metadata-match-method))
 (common-lisp:defun make-grpc-route-metadata-match-method
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key suffix regex range prefix exact)
   (common-lisp:apply #'common-lisp:make-instance
                      'grpc-route-metadata-match-method
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          grpc-route-metadata-match-method))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          grpc-route-metadata-match-method))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'exact))
      (common-lisp:list
       (common-lisp:cons "exact"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'prefix))
      (common-lisp:list
       (common-lisp:cons "prefix"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'range))
      (common-lisp:list
       (common-lisp:cons "range"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'regex))
      (common-lisp:list
       (common-lisp:cons "regex"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'suffix))
      (common-lisp:list
       (common-lisp:cons "suffix"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          grpc-route-metadata-match-method))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass grpc-timeout common-lisp:nil
                       ((per-request :initarg :|perRequest| :type
                         (common-lisp:or duration common-lisp:null) :accessor
                         %grpc-timeout-per-request :initform common-lisp:nil)
                        (idle :initarg :|idle| :type
                         (common-lisp:or duration common-lisp:null) :accessor
                         %grpc-timeout-idle :initform common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'grpc-timeout 'make-grpc-timeout))
 (common-lisp:defun make-grpc-timeout
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key per-request idle)
   (common-lisp:apply #'common-lisp:make-instance 'grpc-timeout
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input grpc-timeout))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input grpc-timeout))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'idle))
      (common-lisp:list
       (common-lisp:cons "idle"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'per-request))
      (common-lisp:list
       (common-lisp:cons "perRequest"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input grpc-timeout))
   common-lisp:nil))
(common-lisp:deftype header-match () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass header-match-method common-lisp:nil
                       ((suffix :initarg :|suffix| :type
                         (common-lisp:or header-match common-lisp:null)
                         :accessor %header-match-method-suffix :initform
                         common-lisp:nil)
                        (regex :initarg :|regex| :type
                         (common-lisp:or header-match common-lisp:null)
                         :accessor %header-match-method-regex :initform
                         common-lisp:nil)
                        (range :initarg :|range| :type
                         (common-lisp:or match-range common-lisp:null)
                         :accessor %header-match-method-range :initform
                         common-lisp:nil)
                        (prefix :initarg :|prefix| :type
                         (common-lisp:or header-match common-lisp:null)
                         :accessor %header-match-method-prefix :initform
                         common-lisp:nil)
                        (exact :initarg :|exact| :type
                         (common-lisp:or header-match common-lisp:null)
                         :accessor %header-match-method-exact :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'header-match-method 'make-header-match-method))
 (common-lisp:defun make-header-match-method
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key suffix regex range prefix exact)
   (common-lisp:apply #'common-lisp:make-instance 'header-match-method
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input header-match-method))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input header-match-method))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'exact))
      (common-lisp:list
       (common-lisp:cons "exact"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'prefix))
      (common-lisp:list
       (common-lisp:cons "prefix"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'range))
      (common-lisp:list
       (common-lisp:cons "range"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'regex))
      (common-lisp:list
       (common-lisp:cons "regex"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'suffix))
      (common-lisp:list
       (common-lisp:cons "suffix"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input header-match-method))
   common-lisp:nil))
(common-lisp:deftype header-name () 'common-lisp:string)
(common-lisp:deftype health-check-interval-millis () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass health-check-policy common-lisp:nil
                       ((unhealthy-threshold :initarg :|unhealthyThreshold|
                         :type
                         (common-lisp:or health-check-threshold
                                         common-lisp:null)
                         :accessor %health-check-policy-unhealthy-threshold
                         :initform
                         (common-lisp:error ":unhealthythreshold is required"))
                        (timeout-millis :initarg :|timeoutMillis| :type
                         (common-lisp:or health-check-timeout-millis
                                         common-lisp:null)
                         :accessor %health-check-policy-timeout-millis
                         :initform
                         (common-lisp:error ":timeoutmillis is required"))
                        (protocol :initarg :|protocol| :type
                         (common-lisp:or port-protocol common-lisp:null)
                         :accessor %health-check-policy-protocol :initform
                         (common-lisp:error ":protocol is required"))
                        (port :initarg :|port| :type
                         (common-lisp:or port-number common-lisp:null)
                         :accessor %health-check-policy-port :initform
                         common-lisp:nil)
                        (path :initarg :|path| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %health-check-policy-path :initform common-lisp:nil)
                        (interval-millis :initarg :|intervalMillis| :type
                         (common-lisp:or health-check-interval-millis
                                         common-lisp:null)
                         :accessor %health-check-policy-interval-millis
                         :initform
                         (common-lisp:error ":intervalmillis is required"))
                        (healthy-threshold :initarg :|healthyThreshold| :type
                         (common-lisp:or health-check-threshold
                                         common-lisp:null)
                         :accessor %health-check-policy-healthy-threshold
                         :initform
                         (common-lisp:error ":healthythreshold is required"))))
 (common-lisp:export
  (common-lisp:list 'health-check-policy 'make-health-check-policy))
 (common-lisp:defun make-health-check-policy
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key unhealthy-threshold timeout-millis
                     protocol port path interval-millis healthy-threshold)
   (common-lisp:apply #'common-lisp:make-instance 'health-check-policy
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input health-check-policy))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input health-check-policy))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'healthy-threshold))
      (common-lisp:list
       (common-lisp:cons "healthyThreshold"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'interval-millis))
      (common-lisp:list
       (common-lisp:cons "intervalMillis"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'path))
      (common-lisp:list
       (common-lisp:cons "path"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'port))
      (common-lisp:list
       (common-lisp:cons "port"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'protocol))
      (common-lisp:list
       (common-lisp:cons "protocol"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'timeout-millis))
      (common-lisp:list
       (common-lisp:cons "timeoutMillis"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'unhealthy-threshold))
      (common-lisp:list
       (common-lisp:cons "unhealthyThreshold"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input health-check-policy))
   common-lisp:nil))
(common-lisp:deftype health-check-threshold () 'common-lisp:integer)
(common-lisp:deftype health-check-timeout-millis () 'common-lisp:integer)
(common-lisp:deftype hostname () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass http-gateway-route common-lisp:nil
                       ((match :initarg :|match| :type
                         (common-lisp:or http-gateway-route-match
                                         common-lisp:null)
                         :accessor %http-gateway-route-match :initform
                         (common-lisp:error ":match is required"))
                        (action :initarg :|action| :type
                         (common-lisp:or http-gateway-route-action
                                         common-lisp:null)
                         :accessor %http-gateway-route-action :initform
                         (common-lisp:error ":action is required"))))
 (common-lisp:export
  (common-lisp:list 'http-gateway-route 'make-http-gateway-route))
 (common-lisp:defun make-http-gateway-route
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key match action)
   (common-lisp:apply #'common-lisp:make-instance 'http-gateway-route
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input http-gateway-route))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input http-gateway-route))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'action))
      (common-lisp:list
       (common-lisp:cons "action"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'match))
      (common-lisp:list
       (common-lisp:cons "match"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input http-gateway-route))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass http-gateway-route-action common-lisp:nil
                       ((target :initarg :|target| :type
                         (common-lisp:or gateway-route-target common-lisp:null)
                         :accessor %http-gateway-route-action-target :initform
                         (common-lisp:error ":target is required"))
                        (rewrite :initarg :|rewrite| :type
                         (common-lisp:or http-gateway-route-rewrite
                                         common-lisp:null)
                         :accessor %http-gateway-route-action-rewrite :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'http-gateway-route-action
                    'make-http-gateway-route-action))
 (common-lisp:defun make-http-gateway-route-action
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key target rewrite)
   (common-lisp:apply #'common-lisp:make-instance 'http-gateway-route-action
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          http-gateway-route-action))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          http-gateway-route-action))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rewrite))
      (common-lisp:list
       (common-lisp:cons "rewrite"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target))
      (common-lisp:list
       (common-lisp:cons "target"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          http-gateway-route-action))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass http-gateway-route-header common-lisp:nil
                       ((name :initarg :|name| :type
                         (common-lisp:or header-name common-lisp:null)
                         :accessor %http-gateway-route-header-name :initform
                         (common-lisp:error ":name is required"))
                        (match :initarg :|match| :type
                         (common-lisp:or header-match-method common-lisp:null)
                         :accessor %http-gateway-route-header-match :initform
                         common-lisp:nil)
                        (invert :initarg :|invert| :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         %http-gateway-route-header-invert :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'http-gateway-route-header
                    'make-http-gateway-route-header))
 (common-lisp:defun make-http-gateway-route-header
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key name match invert)
   (common-lisp:apply #'common-lisp:make-instance 'http-gateway-route-header
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          http-gateway-route-header))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          http-gateway-route-header))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'invert))
      (common-lisp:list
       (common-lisp:cons "invert"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'match))
      (common-lisp:list
       (common-lisp:cons "match"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          http-gateway-route-header))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype http-gateway-route-headers ()
   '(trivial-types:proper-list http-gateway-route-header))
 (common-lisp:defun |make-http-gateway-route-headers|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            http-gateway-route-header))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass http-gateway-route-match common-lisp:nil
                       ((query-parameters :initarg :|queryParameters| :type
                         (common-lisp:or http-query-parameters
                                         common-lisp:null)
                         :accessor %http-gateway-route-match-query-parameters
                         :initform common-lisp:nil)
                        (prefix :initarg :|prefix| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %http-gateway-route-match-prefix :initform
                         common-lisp:nil)
                        (port :initarg :|port| :type
                         (common-lisp:or listener-port common-lisp:null)
                         :accessor %http-gateway-route-match-port :initform
                         common-lisp:nil)
                        (path :initarg :|path| :type
                         (common-lisp:or http-path-match common-lisp:null)
                         :accessor %http-gateway-route-match-path :initform
                         common-lisp:nil)
                        (method :initarg :|method| :type
                         (common-lisp:or http-method common-lisp:null)
                         :accessor %http-gateway-route-match-method :initform
                         common-lisp:nil)
                        (hostname :initarg :|hostname| :type
                         (common-lisp:or gateway-route-hostname-match
                                         common-lisp:null)
                         :accessor %http-gateway-route-match-hostname :initform
                         common-lisp:nil)
                        (headers :initarg :|headers| :type
                         (common-lisp:or http-gateway-route-headers
                                         common-lisp:null)
                         :accessor %http-gateway-route-match-headers :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'http-gateway-route-match 'make-http-gateway-route-match))
 (common-lisp:defun make-http-gateway-route-match
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key query-parameters prefix port path method
                     hostname headers)
   (common-lisp:apply #'common-lisp:make-instance 'http-gateway-route-match
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          http-gateway-route-match))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          http-gateway-route-match))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'headers))
      (common-lisp:list
       (common-lisp:cons "headers"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'hostname))
      (common-lisp:list
       (common-lisp:cons "hostname"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'method))
      (common-lisp:list
       (common-lisp:cons "method"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'path))
      (common-lisp:list
       (common-lisp:cons "path"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'port))
      (common-lisp:list
       (common-lisp:cons "port"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'prefix))
      (common-lisp:list
       (common-lisp:cons "prefix"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'query-parameters))
      (common-lisp:list
       (common-lisp:cons "queryParameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          http-gateway-route-match))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass http-gateway-route-path-rewrite common-lisp:nil
                       ((exact :initarg :|exact| :type
                         (common-lisp:or http-path-exact common-lisp:null)
                         :accessor %http-gateway-route-path-rewrite-exact
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'http-gateway-route-path-rewrite
                    'make-http-gateway-route-path-rewrite))
 (common-lisp:defun make-http-gateway-route-path-rewrite
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key exact)
   (common-lisp:apply #'common-lisp:make-instance
                      'http-gateway-route-path-rewrite
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          http-gateway-route-path-rewrite))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          http-gateway-route-path-rewrite))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'exact))
      (common-lisp:list
       (common-lisp:cons "exact"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          http-gateway-route-path-rewrite))
   common-lisp:nil))
(common-lisp:deftype http-gateway-route-prefix () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass http-gateway-route-prefix-rewrite common-lisp:nil
                       ((value :initarg :|value| :type
                         (common-lisp:or http-gateway-route-prefix
                                         common-lisp:null)
                         :accessor %http-gateway-route-prefix-rewrite-value
                         :initform common-lisp:nil)
                        (default-prefix :initarg :|defaultPrefix| :type
                         (common-lisp:or default-gateway-route-rewrite
                                         common-lisp:null)
                         :accessor
                         %http-gateway-route-prefix-rewrite-default-prefix
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'http-gateway-route-prefix-rewrite
                    'make-http-gateway-route-prefix-rewrite))
 (common-lisp:defun make-http-gateway-route-prefix-rewrite
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key value default-prefix)
   (common-lisp:apply #'common-lisp:make-instance
                      'http-gateway-route-prefix-rewrite
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          http-gateway-route-prefix-rewrite))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          http-gateway-route-prefix-rewrite))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'default-prefix))
      (common-lisp:list
       (common-lisp:cons "defaultPrefix"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          http-gateway-route-prefix-rewrite))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass http-gateway-route-rewrite common-lisp:nil
                       ((prefix :initarg :|prefix| :type
                         (common-lisp:or http-gateway-route-prefix-rewrite
                                         common-lisp:null)
                         :accessor %http-gateway-route-rewrite-prefix :initform
                         common-lisp:nil)
                        (path :initarg :|path| :type
                         (common-lisp:or http-gateway-route-path-rewrite
                                         common-lisp:null)
                         :accessor %http-gateway-route-rewrite-path :initform
                         common-lisp:nil)
                        (hostname :initarg :|hostname| :type
                         (common-lisp:or gateway-route-hostname-rewrite
                                         common-lisp:null)
                         :accessor %http-gateway-route-rewrite-hostname
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'http-gateway-route-rewrite
                    'make-http-gateway-route-rewrite))
 (common-lisp:defun make-http-gateway-route-rewrite
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key prefix path hostname)
   (common-lisp:apply #'common-lisp:make-instance 'http-gateway-route-rewrite
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          http-gateway-route-rewrite))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          http-gateway-route-rewrite))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'hostname))
      (common-lisp:list
       (common-lisp:cons "hostname"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'path))
      (common-lisp:list
       (common-lisp:cons "path"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'prefix))
      (common-lisp:list
       (common-lisp:cons "prefix"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          http-gateway-route-rewrite))
   common-lisp:nil))
(common-lisp:deftype http-method () 'common-lisp:string)
(common-lisp:deftype http-path-exact () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass http-path-match common-lisp:nil
                       ((regex :initarg :|regex| :type
                         (common-lisp:or http-path-regex common-lisp:null)
                         :accessor %http-path-match-regex :initform
                         common-lisp:nil)
                        (exact :initarg :|exact| :type
                         (common-lisp:or http-path-exact common-lisp:null)
                         :accessor %http-path-match-exact :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'http-path-match 'make-http-path-match))
 (common-lisp:defun make-http-path-match
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key regex exact)
   (common-lisp:apply #'common-lisp:make-instance 'http-path-match
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input http-path-match))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input http-path-match))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'exact))
      (common-lisp:list
       (common-lisp:cons "exact"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'regex))
      (common-lisp:list
       (common-lisp:cons "regex"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input http-path-match))
   common-lisp:nil))
(common-lisp:deftype http-path-regex () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass http-query-parameter common-lisp:nil
                       ((name :initarg :|name| :type
                         (common-lisp:or query-parameter-name common-lisp:null)
                         :accessor %http-query-parameter-name :initform
                         (common-lisp:error ":name is required"))
                        (match :initarg :|match| :type
                         (common-lisp:or query-parameter-match
                                         common-lisp:null)
                         :accessor %http-query-parameter-match :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'http-query-parameter 'make-http-query-parameter))
 (common-lisp:defun make-http-query-parameter
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key name match)
   (common-lisp:apply #'common-lisp:make-instance 'http-query-parameter
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input http-query-parameter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input http-query-parameter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'match))
      (common-lisp:list
       (common-lisp:cons "match"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input http-query-parameter))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype http-query-parameters ()
   '(trivial-types:proper-list http-query-parameter))
 (common-lisp:defun |make-http-query-parameters|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list http-query-parameter))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass http-retry-policy common-lisp:nil
                       ((tcp-retry-events :initarg :|tcpRetryEvents| :type
                         (common-lisp:or tcp-retry-policy-events
                                         common-lisp:null)
                         :accessor %http-retry-policy-tcp-retry-events
                         :initform common-lisp:nil)
                        (per-retry-timeout :initarg :|perRetryTimeout| :type
                         (common-lisp:or duration common-lisp:null) :accessor
                         %http-retry-policy-per-retry-timeout :initform
                         (common-lisp:error ":perretrytimeout is required"))
                        (max-retries :initarg :|maxRetries| :type
                         (common-lisp:or max-retries common-lisp:null)
                         :accessor %http-retry-policy-max-retries :initform
                         (common-lisp:error ":maxretries is required"))
                        (http-retry-events :initarg :|httpRetryEvents| :type
                         (common-lisp:or http-retry-policy-events
                                         common-lisp:null)
                         :accessor %http-retry-policy-http-retry-events
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'http-retry-policy 'make-http-retry-policy))
 (common-lisp:defun make-http-retry-policy
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tcp-retry-events per-retry-timeout
                     max-retries http-retry-events)
   (common-lisp:apply #'common-lisp:make-instance 'http-retry-policy
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input http-retry-policy))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input http-retry-policy))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'http-retry-events))
      (common-lisp:list
       (common-lisp:cons "httpRetryEvents"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-retries))
      (common-lisp:list
       (common-lisp:cons "maxRetries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'per-retry-timeout))
      (common-lisp:list
       (common-lisp:cons "perRetryTimeout"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tcp-retry-events))
      (common-lisp:list
       (common-lisp:cons "tcpRetryEvents"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input http-retry-policy))
   common-lisp:nil))
(common-lisp:deftype http-retry-policy-event () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype http-retry-policy-events ()
   '(trivial-types:proper-list http-retry-policy-event))
 (common-lisp:defun |make-http-retry-policy-events|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list http-retry-policy-event))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass http-route common-lisp:nil
                       ((timeout :initarg :|timeout| :type
                         (common-lisp:or http-timeout common-lisp:null)
                         :accessor %http-route-timeout :initform
                         common-lisp:nil)
                        (retry-policy :initarg :|retryPolicy| :type
                         (common-lisp:or http-retry-policy common-lisp:null)
                         :accessor %http-route-retry-policy :initform
                         common-lisp:nil)
                        (match :initarg :|match| :type
                         (common-lisp:or http-route-match common-lisp:null)
                         :accessor %http-route-match :initform
                         (common-lisp:error ":match is required"))
                        (action :initarg :|action| :type
                         (common-lisp:or http-route-action common-lisp:null)
                         :accessor %http-route-action :initform
                         (common-lisp:error ":action is required"))))
 (common-lisp:export (common-lisp:list 'http-route 'make-http-route))
 (common-lisp:defun make-http-route
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key timeout retry-policy match action)
   (common-lisp:apply #'common-lisp:make-instance 'http-route
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input http-route))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input http-route))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'action))
      (common-lisp:list
       (common-lisp:cons "action"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'match))
      (common-lisp:list
       (common-lisp:cons "match"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'retry-policy))
      (common-lisp:list
       (common-lisp:cons "retryPolicy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'timeout))
      (common-lisp:list
       (common-lisp:cons "timeout"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input http-route))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass http-route-action common-lisp:nil
                       ((weighted-targets :initarg :|weightedTargets| :type
                         (common-lisp:or weighted-targets common-lisp:null)
                         :accessor %http-route-action-weighted-targets
                         :initform
                         (common-lisp:error ":weightedtargets is required"))))
 (common-lisp:export
  (common-lisp:list 'http-route-action 'make-http-route-action))
 (common-lisp:defun make-http-route-action
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key weighted-targets)
   (common-lisp:apply #'common-lisp:make-instance 'http-route-action
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input http-route-action))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input http-route-action))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'weighted-targets))
      (common-lisp:list
       (common-lisp:cons "weightedTargets"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input http-route-action))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass http-route-header common-lisp:nil
                       ((name :initarg :|name| :type
                         (common-lisp:or header-name common-lisp:null)
                         :accessor %http-route-header-name :initform
                         (common-lisp:error ":name is required"))
                        (match :initarg :|match| :type
                         (common-lisp:or header-match-method common-lisp:null)
                         :accessor %http-route-header-match :initform
                         common-lisp:nil)
                        (invert :initarg :|invert| :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         %http-route-header-invert :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'http-route-header 'make-http-route-header))
 (common-lisp:defun make-http-route-header
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key name match invert)
   (common-lisp:apply #'common-lisp:make-instance 'http-route-header
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input http-route-header))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input http-route-header))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'invert))
      (common-lisp:list
       (common-lisp:cons "invert"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'match))
      (common-lisp:list
       (common-lisp:cons "match"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input http-route-header))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype http-route-headers ()
   '(trivial-types:proper-list http-route-header))
 (common-lisp:defun |make-http-route-headers|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list http-route-header))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass http-route-match common-lisp:nil
                       ((scheme :initarg :|scheme| :type
                         (common-lisp:or http-scheme common-lisp:null)
                         :accessor %http-route-match-scheme :initform
                         common-lisp:nil)
                        (query-parameters :initarg :|queryParameters| :type
                         (common-lisp:or http-query-parameters
                                         common-lisp:null)
                         :accessor %http-route-match-query-parameters :initform
                         common-lisp:nil)
                        (prefix :initarg :|prefix| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %http-route-match-prefix :initform common-lisp:nil)
                        (port :initarg :|port| :type
                         (common-lisp:or listener-port common-lisp:null)
                         :accessor %http-route-match-port :initform
                         common-lisp:nil)
                        (path :initarg :|path| :type
                         (common-lisp:or http-path-match common-lisp:null)
                         :accessor %http-route-match-path :initform
                         common-lisp:nil)
                        (method :initarg :|method| :type
                         (common-lisp:or http-method common-lisp:null)
                         :accessor %http-route-match-method :initform
                         common-lisp:nil)
                        (headers :initarg :|headers| :type
                         (common-lisp:or http-route-headers common-lisp:null)
                         :accessor %http-route-match-headers :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'http-route-match 'make-http-route-match))
 (common-lisp:defun make-http-route-match
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key scheme query-parameters prefix port path
                     method headers)
   (common-lisp:apply #'common-lisp:make-instance 'http-route-match
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input http-route-match))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input http-route-match))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'headers))
      (common-lisp:list
       (common-lisp:cons "headers"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'method))
      (common-lisp:list
       (common-lisp:cons "method"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'path))
      (common-lisp:list
       (common-lisp:cons "path"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'port))
      (common-lisp:list
       (common-lisp:cons "port"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'prefix))
      (common-lisp:list
       (common-lisp:cons "prefix"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'query-parameters))
      (common-lisp:list
       (common-lisp:cons "queryParameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'scheme))
      (common-lisp:list
       (common-lisp:cons "scheme"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input http-route-match))
   common-lisp:nil))
(common-lisp:deftype http-scheme () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass http-timeout common-lisp:nil
                       ((per-request :initarg :|perRequest| :type
                         (common-lisp:or duration common-lisp:null) :accessor
                         %http-timeout-per-request :initform common-lisp:nil)
                        (idle :initarg :|idle| :type
                         (common-lisp:or duration common-lisp:null) :accessor
                         %http-timeout-idle :initform common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'http-timeout 'make-http-timeout))
 (common-lisp:defun make-http-timeout
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key per-request idle)
   (common-lisp:apply #'common-lisp:make-instance 'http-timeout
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input http-timeout))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input http-timeout))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'idle))
      (common-lisp:list
       (common-lisp:cons "idle"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'per-request))
      (common-lisp:list
       (common-lisp:cons "perRequest"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input http-timeout))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition internal-server-error-exception
     (appmesh-error)
     ((message :initarg :|message| :initform common-lisp:nil :reader
       internal-server-error-exception-message)))
 (common-lisp:export
  (common-lisp:list 'internal-server-error-exception
                    'internal-server-error-exception-message)))
(common-lisp:deftype ip-preference () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype json-format ()
   '(trivial-types:proper-list json-format-ref))
 (common-lisp:defun |make-json-format|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list json-format-ref))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass json-format-ref common-lisp:nil
                       ((value :initarg :|value| :type
                         (common-lisp:or json-value common-lisp:null) :accessor
                         %json-format-ref-value :initform
                         (common-lisp:error ":value is required"))
                        (key :initarg :|key| :type
                         (common-lisp:or json-key common-lisp:null) :accessor
                         %json-format-ref-key :initform
                         (common-lisp:error ":key is required"))))
 (common-lisp:export (common-lisp:list 'json-format-ref 'make-json-format-ref))
 (common-lisp:defun make-json-format-ref
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key value key)
   (common-lisp:apply #'common-lisp:make-instance 'json-format-ref
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input json-format-ref))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input json-format-ref))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key))
      (common-lisp:list
       (common-lisp:cons "key"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input json-format-ref))
   common-lisp:nil))
(common-lisp:deftype json-key () 'common-lisp:string)
(common-lisp:deftype json-value () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition limit-exceeded-exception
     (appmesh-error)
     ((message :initarg :|message| :initform common-lisp:nil :reader
       limit-exceeded-exception-message)))
 (common-lisp:export
  (common-lisp:list 'limit-exceeded-exception
                    'limit-exceeded-exception-message)))
(common-lisp:progn
 (common-lisp:defclass list-gateway-routes-input common-lisp:nil
                       ((virtual-gateway-name :initarg :|virtualGatewayName|
                         :type (common-lisp:or resource-name common-lisp:null)
                         :accessor
                         %list-gateway-routes-input-virtual-gateway-name
                         :initform
                         (common-lisp:error ":virtualgatewayname is required"))
                        (next-token :initarg :|nextToken| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %list-gateway-routes-input-next-token :initform
                         common-lisp:nil)
                        (mesh-owner :initarg :|meshOwner| :type
                         (common-lisp:or account-id common-lisp:null) :accessor
                         %list-gateway-routes-input-mesh-owner :initform
                         common-lisp:nil)
                        (mesh-name :initarg :|meshName| :type
                         (common-lisp:or resource-name common-lisp:null)
                         :accessor %list-gateway-routes-input-mesh-name
                         :initform (common-lisp:error ":meshname is required"))
                        (limit :initarg :|limit| :type
                         (common-lisp:or list-gateway-routes-limit
                                         common-lisp:null)
                         :accessor %list-gateway-routes-input-limit :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-gateway-routes-input
                    'make-list-gateway-routes-input))
 (common-lisp:defun make-list-gateway-routes-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key virtual-gateway-name next-token
                     mesh-owner mesh-name limit)
   (common-lisp:apply #'common-lisp:make-instance 'list-gateway-routes-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-gateway-routes-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-gateway-routes-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-gateway-routes-input))
   common-lisp:nil))
(common-lisp:deftype list-gateway-routes-limit () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass list-gateway-routes-output common-lisp:nil
                       ((next-token :initarg :|nextToken| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %list-gateway-routes-output-next-token :initform
                         common-lisp:nil)
                        (gateway-routes :initarg :|gatewayRoutes| :type
                         (common-lisp:or gateway-route-list common-lisp:null)
                         :accessor %list-gateway-routes-output-gateway-routes
                         :initform
                         (common-lisp:error ":gatewayroutes is required"))))
 (common-lisp:export
  (common-lisp:list 'list-gateway-routes-output
                    'make-list-gateway-routes-output))
 (common-lisp:defun make-list-gateway-routes-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token gateway-routes)
   (common-lisp:apply #'common-lisp:make-instance 'list-gateway-routes-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-gateway-routes-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-gateway-routes-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'gateway-routes))
      (common-lisp:list
       (common-lisp:cons "gatewayRoutes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-gateway-routes-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-meshes-input common-lisp:nil
                       ((next-token :initarg :|nextToken| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %list-meshes-input-next-token :initform
                         common-lisp:nil)
                        (limit :initarg :|limit| :type
                         (common-lisp:or list-meshes-limit common-lisp:null)
                         :accessor %list-meshes-input-limit :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-meshes-input 'make-list-meshes-input))
 (common-lisp:defun make-list-meshes-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token limit)
   (common-lisp:apply #'common-lisp:make-instance 'list-meshes-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-meshes-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-meshes-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-meshes-input))
   common-lisp:nil))
(common-lisp:deftype list-meshes-limit () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass list-meshes-output common-lisp:nil
                       ((next-token :initarg :|nextToken| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %list-meshes-output-next-token :initform
                         common-lisp:nil)
                        (meshes :initarg :|meshes| :type
                         (common-lisp:or mesh-list common-lisp:null) :accessor
                         %list-meshes-output-meshes :initform
                         (common-lisp:error ":meshes is required"))))
 (common-lisp:export
  (common-lisp:list 'list-meshes-output 'make-list-meshes-output))
 (common-lisp:defun make-list-meshes-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token meshes)
   (common-lisp:apply #'common-lisp:make-instance 'list-meshes-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-meshes-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-meshes-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'meshes))
      (common-lisp:list
       (common-lisp:cons "meshes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-meshes-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-routes-input common-lisp:nil
                       ((virtual-router-name :initarg :|virtualRouterName|
                         :type (common-lisp:or resource-name common-lisp:null)
                         :accessor %list-routes-input-virtual-router-name
                         :initform
                         (common-lisp:error ":virtualroutername is required"))
                        (next-token :initarg :|nextToken| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %list-routes-input-next-token :initform
                         common-lisp:nil)
                        (mesh-owner :initarg :|meshOwner| :type
                         (common-lisp:or account-id common-lisp:null) :accessor
                         %list-routes-input-mesh-owner :initform
                         common-lisp:nil)
                        (mesh-name :initarg :|meshName| :type
                         (common-lisp:or resource-name common-lisp:null)
                         :accessor %list-routes-input-mesh-name :initform
                         (common-lisp:error ":meshname is required"))
                        (limit :initarg :|limit| :type
                         (common-lisp:or list-routes-limit common-lisp:null)
                         :accessor %list-routes-input-limit :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-routes-input 'make-list-routes-input))
 (common-lisp:defun make-list-routes-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key virtual-router-name next-token mesh-owner
                     mesh-name limit)
   (common-lisp:apply #'common-lisp:make-instance 'list-routes-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-routes-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-routes-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-routes-input))
   common-lisp:nil))
(common-lisp:deftype list-routes-limit () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass list-routes-output common-lisp:nil
                       ((routes :initarg :|routes| :type
                         (common-lisp:or route-list common-lisp:null) :accessor
                         %list-routes-output-routes :initform
                         (common-lisp:error ":routes is required"))
                        (next-token :initarg :|nextToken| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %list-routes-output-next-token :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-routes-output 'make-list-routes-output))
 (common-lisp:defun make-list-routes-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key routes next-token)
   (common-lisp:apply #'common-lisp:make-instance 'list-routes-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-routes-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-routes-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'routes))
      (common-lisp:list
       (common-lisp:cons "routes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-routes-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-tags-for-resource-input common-lisp:nil
                       ((resource-arn :initarg :|resourceArn| :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %list-tags-for-resource-input-resource-arn :initform
                         (common-lisp:error ":resourcearn is required"))
                        (next-token :initarg :|nextToken| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %list-tags-for-resource-input-next-token :initform
                         common-lisp:nil)
                        (limit :initarg :|limit| :type
                         (common-lisp:or tags-limit common-lisp:null) :accessor
                         %list-tags-for-resource-input-limit :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-tags-for-resource-input
                    'make-list-tags-for-resource-input))
 (common-lisp:defun make-list-tags-for-resource-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key resource-arn next-token limit)
   (common-lisp:apply #'common-lisp:make-instance 'list-tags-for-resource-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-tags-for-resource-output common-lisp:nil
                       ((tags :initarg :|tags| :type
                         (common-lisp:or tag-list common-lisp:null) :accessor
                         %list-tags-for-resource-output-tags :initform
                         (common-lisp:error ":tags is required"))
                        (next-token :initarg :|nextToken| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %list-tags-for-resource-output-next-token :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-tags-for-resource-output
                    'make-list-tags-for-resource-output))
 (common-lisp:defun make-list-tags-for-resource-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tags next-token)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-tags-for-resource-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-virtual-gateways-input common-lisp:nil
                       ((next-token :initarg :|nextToken| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %list-virtual-gateways-input-next-token :initform
                         common-lisp:nil)
                        (mesh-owner :initarg :|meshOwner| :type
                         (common-lisp:or account-id common-lisp:null) :accessor
                         %list-virtual-gateways-input-mesh-owner :initform
                         common-lisp:nil)
                        (mesh-name :initarg :|meshName| :type
                         (common-lisp:or resource-name common-lisp:null)
                         :accessor %list-virtual-gateways-input-mesh-name
                         :initform (common-lisp:error ":meshname is required"))
                        (limit :initarg :|limit| :type
                         (common-lisp:or list-virtual-gateways-limit
                                         common-lisp:null)
                         :accessor %list-virtual-gateways-input-limit :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-virtual-gateways-input
                    'make-list-virtual-gateways-input))
 (common-lisp:defun make-list-virtual-gateways-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token mesh-owner mesh-name limit)
   (common-lisp:apply #'common-lisp:make-instance 'list-virtual-gateways-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-virtual-gateways-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-virtual-gateways-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-virtual-gateways-input))
   common-lisp:nil))
(common-lisp:deftype list-virtual-gateways-limit () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass list-virtual-gateways-output common-lisp:nil
                       ((virtual-gateways :initarg :|virtualGateways| :type
                         (common-lisp:or virtual-gateway-list common-lisp:null)
                         :accessor
                         %list-virtual-gateways-output-virtual-gateways
                         :initform
                         (common-lisp:error ":virtualgateways is required"))
                        (next-token :initarg :|nextToken| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %list-virtual-gateways-output-next-token :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-virtual-gateways-output
                    'make-list-virtual-gateways-output))
 (common-lisp:defun make-list-virtual-gateways-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key virtual-gateways next-token)
   (common-lisp:apply #'common-lisp:make-instance 'list-virtual-gateways-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-virtual-gateways-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-virtual-gateways-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'virtual-gateways))
      (common-lisp:list
       (common-lisp:cons "virtualGateways"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-virtual-gateways-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-virtual-nodes-input common-lisp:nil
                       ((next-token :initarg :|nextToken| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %list-virtual-nodes-input-next-token :initform
                         common-lisp:nil)
                        (mesh-owner :initarg :|meshOwner| :type
                         (common-lisp:or account-id common-lisp:null) :accessor
                         %list-virtual-nodes-input-mesh-owner :initform
                         common-lisp:nil)
                        (mesh-name :initarg :|meshName| :type
                         (common-lisp:or resource-name common-lisp:null)
                         :accessor %list-virtual-nodes-input-mesh-name
                         :initform (common-lisp:error ":meshname is required"))
                        (limit :initarg :|limit| :type
                         (common-lisp:or list-virtual-nodes-limit
                                         common-lisp:null)
                         :accessor %list-virtual-nodes-input-limit :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-virtual-nodes-input 'make-list-virtual-nodes-input))
 (common-lisp:defun make-list-virtual-nodes-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token mesh-owner mesh-name limit)
   (common-lisp:apply #'common-lisp:make-instance 'list-virtual-nodes-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-virtual-nodes-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-virtual-nodes-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-virtual-nodes-input))
   common-lisp:nil))
(common-lisp:deftype list-virtual-nodes-limit () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass list-virtual-nodes-output common-lisp:nil
                       ((virtual-nodes :initarg :|virtualNodes| :type
                         (common-lisp:or virtual-node-list common-lisp:null)
                         :accessor %list-virtual-nodes-output-virtual-nodes
                         :initform
                         (common-lisp:error ":virtualnodes is required"))
                        (next-token :initarg :|nextToken| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %list-virtual-nodes-output-next-token :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-virtual-nodes-output
                    'make-list-virtual-nodes-output))
 (common-lisp:defun make-list-virtual-nodes-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key virtual-nodes next-token)
   (common-lisp:apply #'common-lisp:make-instance 'list-virtual-nodes-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-virtual-nodes-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-virtual-nodes-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'virtual-nodes))
      (common-lisp:list
       (common-lisp:cons "virtualNodes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-virtual-nodes-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-virtual-routers-input common-lisp:nil
                       ((next-token :initarg :|nextToken| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %list-virtual-routers-input-next-token :initform
                         common-lisp:nil)
                        (mesh-owner :initarg :|meshOwner| :type
                         (common-lisp:or account-id common-lisp:null) :accessor
                         %list-virtual-routers-input-mesh-owner :initform
                         common-lisp:nil)
                        (mesh-name :initarg :|meshName| :type
                         (common-lisp:or resource-name common-lisp:null)
                         :accessor %list-virtual-routers-input-mesh-name
                         :initform (common-lisp:error ":meshname is required"))
                        (limit :initarg :|limit| :type
                         (common-lisp:or list-virtual-routers-limit
                                         common-lisp:null)
                         :accessor %list-virtual-routers-input-limit :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-virtual-routers-input
                    'make-list-virtual-routers-input))
 (common-lisp:defun make-list-virtual-routers-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token mesh-owner mesh-name limit)
   (common-lisp:apply #'common-lisp:make-instance 'list-virtual-routers-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-virtual-routers-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-virtual-routers-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-virtual-routers-input))
   common-lisp:nil))
(common-lisp:deftype list-virtual-routers-limit () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass list-virtual-routers-output common-lisp:nil
                       ((virtual-routers :initarg :|virtualRouters| :type
                         (common-lisp:or virtual-router-list common-lisp:null)
                         :accessor %list-virtual-routers-output-virtual-routers
                         :initform
                         (common-lisp:error ":virtualrouters is required"))
                        (next-token :initarg :|nextToken| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %list-virtual-routers-output-next-token :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-virtual-routers-output
                    'make-list-virtual-routers-output))
 (common-lisp:defun make-list-virtual-routers-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key virtual-routers next-token)
   (common-lisp:apply #'common-lisp:make-instance 'list-virtual-routers-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-virtual-routers-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-virtual-routers-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'virtual-routers))
      (common-lisp:list
       (common-lisp:cons "virtualRouters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-virtual-routers-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-virtual-services-input common-lisp:nil
                       ((next-token :initarg :|nextToken| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %list-virtual-services-input-next-token :initform
                         common-lisp:nil)
                        (mesh-owner :initarg :|meshOwner| :type
                         (common-lisp:or account-id common-lisp:null) :accessor
                         %list-virtual-services-input-mesh-owner :initform
                         common-lisp:nil)
                        (mesh-name :initarg :|meshName| :type
                         (common-lisp:or resource-name common-lisp:null)
                         :accessor %list-virtual-services-input-mesh-name
                         :initform (common-lisp:error ":meshname is required"))
                        (limit :initarg :|limit| :type
                         (common-lisp:or list-virtual-services-limit
                                         common-lisp:null)
                         :accessor %list-virtual-services-input-limit :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-virtual-services-input
                    'make-list-virtual-services-input))
 (common-lisp:defun make-list-virtual-services-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token mesh-owner mesh-name limit)
   (common-lisp:apply #'common-lisp:make-instance 'list-virtual-services-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-virtual-services-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-virtual-services-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-virtual-services-input))
   common-lisp:nil))
(common-lisp:deftype list-virtual-services-limit () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass list-virtual-services-output common-lisp:nil
                       ((virtual-services :initarg :|virtualServices| :type
                         (common-lisp:or virtual-service-list common-lisp:null)
                         :accessor
                         %list-virtual-services-output-virtual-services
                         :initform
                         (common-lisp:error ":virtualservices is required"))
                        (next-token :initarg :|nextToken| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %list-virtual-services-output-next-token :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-virtual-services-output
                    'make-list-virtual-services-output))
 (common-lisp:defun make-list-virtual-services-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key virtual-services next-token)
   (common-lisp:apply #'common-lisp:make-instance 'list-virtual-services-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-virtual-services-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-virtual-services-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'virtual-services))
      (common-lisp:list
       (common-lisp:cons "virtualServices"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-virtual-services-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass listener common-lisp:nil
                       ((tls :initarg :|tls| :type
                         (common-lisp:or listener-tls common-lisp:null)
                         :accessor %listener-tls :initform common-lisp:nil)
                        (timeout :initarg :|timeout| :type
                         (common-lisp:or listener-timeout common-lisp:null)
                         :accessor %listener-timeout :initform common-lisp:nil)
                        (port-mapping :initarg :|portMapping| :type
                         (common-lisp:or port-mapping common-lisp:null)
                         :accessor %listener-port-mapping :initform
                         (common-lisp:error ":portmapping is required"))
                        (outlier-detection :initarg :|outlierDetection| :type
                         (common-lisp:or outlier-detection common-lisp:null)
                         :accessor %listener-outlier-detection :initform
                         common-lisp:nil)
                        (health-check :initarg :|healthCheck| :type
                         (common-lisp:or health-check-policy common-lisp:null)
                         :accessor %listener-health-check :initform
                         common-lisp:nil)
                        (connection-pool :initarg :|connectionPool| :type
                         (common-lisp:or virtual-node-connection-pool
                                         common-lisp:null)
                         :accessor %listener-connection-pool :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'listener 'make-listener))
 (common-lisp:defun make-listener
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tls timeout port-mapping
                     outlier-detection health-check connection-pool)
   (common-lisp:apply #'common-lisp:make-instance 'listener
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input listener))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input listener))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'connection-pool))
      (common-lisp:list
       (common-lisp:cons "connectionPool"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'health-check))
      (common-lisp:list
       (common-lisp:cons "healthCheck"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'outlier-detection))
      (common-lisp:list
       (common-lisp:cons "outlierDetection"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'port-mapping))
      (common-lisp:list
       (common-lisp:cons "portMapping"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'timeout))
      (common-lisp:list
       (common-lisp:cons "timeout"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tls))
      (common-lisp:list
       (common-lisp:cons "tls"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input listener))
   common-lisp:nil))
(common-lisp:deftype listener-port () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass listener-timeout common-lisp:nil
                       ((tcp :initarg :|tcp| :type
                         (common-lisp:or tcp-timeout common-lisp:null)
                         :accessor %listener-timeout-tcp :initform
                         common-lisp:nil)
                        (http2 :initarg :|http2| :type
                         (common-lisp:or http-timeout common-lisp:null)
                         :accessor %listener-timeout-http2 :initform
                         common-lisp:nil)
                        (http :initarg :|http| :type
                         (common-lisp:or http-timeout common-lisp:null)
                         :accessor %listener-timeout-http :initform
                         common-lisp:nil)
                        (grpc :initarg :|grpc| :type
                         (common-lisp:or grpc-timeout common-lisp:null)
                         :accessor %listener-timeout-grpc :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'listener-timeout 'make-listener-timeout))
 (common-lisp:defun make-listener-timeout
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tcp http2 http grpc)
   (common-lisp:apply #'common-lisp:make-instance 'listener-timeout
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input listener-timeout))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input listener-timeout))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'grpc))
      (common-lisp:list
       (common-lisp:cons "grpc"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'http))
      (common-lisp:list
       (common-lisp:cons "http"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'http2))
      (common-lisp:list
       (common-lisp:cons "http2"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tcp))
      (common-lisp:list
       (common-lisp:cons "tcp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input listener-timeout))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass listener-tls common-lisp:nil
                       ((validation :initarg :|validation| :type
                         (common-lisp:or listener-tls-validation-context
                                         common-lisp:null)
                         :accessor %listener-tls-validation :initform
                         common-lisp:nil)
                        (mode :initarg :|mode| :type
                         (common-lisp:or listener-tls-mode common-lisp:null)
                         :accessor %listener-tls-mode :initform
                         (common-lisp:error ":mode is required"))
                        (certificate :initarg :|certificate| :type
                         (common-lisp:or listener-tls-certificate
                                         common-lisp:null)
                         :accessor %listener-tls-certificate :initform
                         (common-lisp:error ":certificate is required"))))
 (common-lisp:export (common-lisp:list 'listener-tls 'make-listener-tls))
 (common-lisp:defun make-listener-tls
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key validation mode certificate)
   (common-lisp:apply #'common-lisp:make-instance 'listener-tls
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input listener-tls))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input listener-tls))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'certificate))
      (common-lisp:list
       (common-lisp:cons "certificate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'mode))
      (common-lisp:list
       (common-lisp:cons "mode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'validation))
      (common-lisp:list
       (common-lisp:cons "validation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input listener-tls))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass listener-tls-acm-certificate common-lisp:nil
                       ((certificate-arn :initarg :|certificateArn| :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %listener-tls-acm-certificate-certificate-arn
                         :initform
                         (common-lisp:error ":certificatearn is required"))))
 (common-lisp:export
  (common-lisp:list 'listener-tls-acm-certificate
                    'make-listener-tls-acm-certificate))
 (common-lisp:defun make-listener-tls-acm-certificate
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key certificate-arn)
   (common-lisp:apply #'common-lisp:make-instance 'listener-tls-acm-certificate
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          listener-tls-acm-certificate))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          listener-tls-acm-certificate))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'certificate-arn))
      (common-lisp:list
       (common-lisp:cons "certificateArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          listener-tls-acm-certificate))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass listener-tls-certificate common-lisp:nil
                       ((sds :initarg :|sds| :type
                         (common-lisp:or listener-tls-sds-certificate
                                         common-lisp:null)
                         :accessor %listener-tls-certificate-sds :initform
                         common-lisp:nil)
                        (file :initarg :|file| :type
                         (common-lisp:or listener-tls-file-certificate
                                         common-lisp:null)
                         :accessor %listener-tls-certificate-file :initform
                         common-lisp:nil)
                        (acm :initarg :|acm| :type
                         (common-lisp:or listener-tls-acm-certificate
                                         common-lisp:null)
                         :accessor %listener-tls-certificate-acm :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'listener-tls-certificate 'make-listener-tls-certificate))
 (common-lisp:defun make-listener-tls-certificate
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key sds file acm)
   (common-lisp:apply #'common-lisp:make-instance 'listener-tls-certificate
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          listener-tls-certificate))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          listener-tls-certificate))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'acm))
      (common-lisp:list
       (common-lisp:cons "acm"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'file))
      (common-lisp:list
       (common-lisp:cons "file"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sds))
      (common-lisp:list
       (common-lisp:cons "sds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          listener-tls-certificate))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass listener-tls-file-certificate common-lisp:nil
                       ((private-key :initarg :|privateKey| :type
                         (common-lisp:or file-path common-lisp:null) :accessor
                         %listener-tls-file-certificate-private-key :initform
                         (common-lisp:error ":privatekey is required"))
                        (certificate-chain :initarg :|certificateChain| :type
                         (common-lisp:or file-path common-lisp:null) :accessor
                         %listener-tls-file-certificate-certificate-chain
                         :initform
                         (common-lisp:error ":certificatechain is required"))))
 (common-lisp:export
  (common-lisp:list 'listener-tls-file-certificate
                    'make-listener-tls-file-certificate))
 (common-lisp:defun make-listener-tls-file-certificate
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key private-key certificate-chain)
   (common-lisp:apply #'common-lisp:make-instance
                      'listener-tls-file-certificate
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          listener-tls-file-certificate))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          listener-tls-file-certificate))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'certificate-chain))
      (common-lisp:list
       (common-lisp:cons "certificateChain"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'private-key))
      (common-lisp:list
       (common-lisp:cons "privateKey"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          listener-tls-file-certificate))
   common-lisp:nil))
(common-lisp:deftype listener-tls-mode () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass listener-tls-sds-certificate common-lisp:nil
                       ((secret-name :initarg :|secretName| :type
                         (common-lisp:or sds-secret-name common-lisp:null)
                         :accessor %listener-tls-sds-certificate-secret-name
                         :initform
                         (common-lisp:error ":secretname is required"))))
 (common-lisp:export
  (common-lisp:list 'listener-tls-sds-certificate
                    'make-listener-tls-sds-certificate))
 (common-lisp:defun make-listener-tls-sds-certificate
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key secret-name)
   (common-lisp:apply #'common-lisp:make-instance 'listener-tls-sds-certificate
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          listener-tls-sds-certificate))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          listener-tls-sds-certificate))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'secret-name))
      (common-lisp:list
       (common-lisp:cons "secretName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          listener-tls-sds-certificate))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass listener-tls-validation-context common-lisp:nil
                       ((trust :initarg :|trust| :type
                         (common-lisp:or listener-tls-validation-context-trust
                                         common-lisp:null)
                         :accessor %listener-tls-validation-context-trust
                         :initform (common-lisp:error ":trust is required"))
                        (subject-alternative-names :initarg
                         :|subjectAlternativeNames| :type
                         (common-lisp:or subject-alternative-names
                                         common-lisp:null)
                         :accessor
                         %listener-tls-validation-context-subject-alternative-names
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'listener-tls-validation-context
                    'make-listener-tls-validation-context))
 (common-lisp:defun make-listener-tls-validation-context
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key trust subject-alternative-names)
   (common-lisp:apply #'common-lisp:make-instance
                      'listener-tls-validation-context
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          listener-tls-validation-context))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          listener-tls-validation-context))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'subject-alternative-names))
      (common-lisp:list
       (common-lisp:cons "subjectAlternativeNames"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'trust))
      (common-lisp:list
       (common-lisp:cons "trust"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          listener-tls-validation-context))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass listener-tls-validation-context-trust common-lisp:nil
                       ((sds :initarg :|sds| :type
                         (common-lisp:or tls-validation-context-sds-trust
                                         common-lisp:null)
                         :accessor %listener-tls-validation-context-trust-sds
                         :initform common-lisp:nil)
                        (file :initarg :|file| :type
                         (common-lisp:or tls-validation-context-file-trust
                                         common-lisp:null)
                         :accessor %listener-tls-validation-context-trust-file
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'listener-tls-validation-context-trust
                    'make-listener-tls-validation-context-trust))
 (common-lisp:defun make-listener-tls-validation-context-trust
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key sds file)
   (common-lisp:apply #'common-lisp:make-instance
                      'listener-tls-validation-context-trust
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          listener-tls-validation-context-trust))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          listener-tls-validation-context-trust))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'file))
      (common-lisp:list
       (common-lisp:cons "file"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sds))
      (common-lisp:list
       (common-lisp:cons "sds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          listener-tls-validation-context-trust))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype listeners () '(trivial-types:proper-list listener))
 (common-lisp:defun |make-listeners|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list listener))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass logging common-lisp:nil
                       ((access-log :initarg :|accessLog| :type
                         (common-lisp:or access-log common-lisp:null) :accessor
                         %logging-access-log :initform common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'logging 'make-logging))
 (common-lisp:defun make-logging
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key access-log)
   (common-lisp:apply #'common-lisp:make-instance 'logging
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input logging))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input logging))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'access-log))
      (common-lisp:list
       (common-lisp:cons "accessLog"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input logging))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass logging-format common-lisp:nil
                       ((text :initarg :|text| :type
                         (common-lisp:or text-format common-lisp:null)
                         :accessor %logging-format-text :initform
                         common-lisp:nil)
                        (json :initarg :|json| :type
                         (common-lisp:or json-format common-lisp:null)
                         :accessor %logging-format-json :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'logging-format 'make-logging-format))
 (common-lisp:defun make-logging-format
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key text json)
   (common-lisp:apply #'common-lisp:make-instance 'logging-format
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input logging-format))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input logging-format))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'json))
      (common-lisp:list
       (common-lisp:cons "json"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'text))
      (common-lisp:list
       (common-lisp:cons "text"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input logging-format))
   common-lisp:nil))
(common-lisp:deftype long () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass match-range common-lisp:nil
                       ((start :initarg :|start| :type
                         (common-lisp:or long common-lisp:null) :accessor
                         %match-range-start :initform
                         (common-lisp:error ":start is required"))
                        (end :initarg :|end| :type
                         (common-lisp:or long common-lisp:null) :accessor
                         %match-range-end :initform
                         (common-lisp:error ":end is required"))))
 (common-lisp:export (common-lisp:list 'match-range 'make-match-range))
 (common-lisp:defun make-match-range
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key start end)
   (common-lisp:apply #'common-lisp:make-instance 'match-range
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input match-range))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input match-range))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'end))
      (common-lisp:list
       (common-lisp:cons "end"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start))
      (common-lisp:list
       (common-lisp:cons "start"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input match-range))
   common-lisp:nil))
(common-lisp:deftype max-connections () 'common-lisp:integer)
(common-lisp:deftype max-pending-requests () 'common-lisp:integer)
(common-lisp:deftype max-requests () 'common-lisp:integer)
(common-lisp:deftype max-retries () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass mesh-data common-lisp:nil
                       ((status :initarg :|status| :type
                         (common-lisp:or mesh-status common-lisp:null)
                         :accessor %mesh-data-status :initform
                         (common-lisp:error ":status is required"))
                        (spec :initarg :|spec| :type
                         (common-lisp:or mesh-spec common-lisp:null) :accessor
                         %mesh-data-spec :initform
                         (common-lisp:error ":spec is required"))
                        (metadata :initarg :|metadata| :type
                         (common-lisp:or resource-metadata common-lisp:null)
                         :accessor %mesh-data-metadata :initform
                         (common-lisp:error ":metadata is required"))
                        (mesh-name :initarg :|meshName| :type
                         (common-lisp:or resource-name common-lisp:null)
                         :accessor %mesh-data-mesh-name :initform
                         (common-lisp:error ":meshname is required"))))
 (common-lisp:export (common-lisp:list 'mesh-data 'make-mesh-data))
 (common-lisp:defun make-mesh-data
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key status spec metadata mesh-name)
   (common-lisp:apply #'common-lisp:make-instance 'mesh-data
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input mesh-data))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input mesh-data))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'mesh-name))
      (common-lisp:list
       (common-lisp:cons "meshName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metadata))
      (common-lisp:list
       (common-lisp:cons "metadata"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'spec))
      (common-lisp:list
       (common-lisp:cons "spec"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input mesh-data))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype mesh-list () '(trivial-types:proper-list mesh-ref))
 (common-lisp:defun |make-mesh-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list mesh-ref))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass mesh-ref common-lisp:nil
                       ((version :initarg :|version| :type
                         (common-lisp:or long common-lisp:null) :accessor
                         %mesh-ref-version :initform
                         (common-lisp:error ":version is required"))
                        (resource-owner :initarg :|resourceOwner| :type
                         (common-lisp:or account-id common-lisp:null) :accessor
                         %mesh-ref-resource-owner :initform
                         (common-lisp:error ":resourceowner is required"))
                        (mesh-owner :initarg :|meshOwner| :type
                         (common-lisp:or account-id common-lisp:null) :accessor
                         %mesh-ref-mesh-owner :initform
                         (common-lisp:error ":meshowner is required"))
                        (mesh-name :initarg :|meshName| :type
                         (common-lisp:or resource-name common-lisp:null)
                         :accessor %mesh-ref-mesh-name :initform
                         (common-lisp:error ":meshname is required"))
                        (last-updated-at :initarg :|lastUpdatedAt| :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %mesh-ref-last-updated-at :initform
                         (common-lisp:error ":lastupdatedat is required"))
                        (created-at :initarg :|createdAt| :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %mesh-ref-created-at :initform
                         (common-lisp:error ":createdat is required"))
                        (arn :initarg :|arn| :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %mesh-ref-arn :initform
                         (common-lisp:error ":arn is required"))))
 (common-lisp:export (common-lisp:list 'mesh-ref 'make-mesh-ref))
 (common-lisp:defun make-mesh-ref
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key version resource-owner mesh-owner
                     mesh-name last-updated-at created-at arn)
   (common-lisp:apply #'common-lisp:make-instance 'mesh-ref
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input mesh-ref))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input mesh-ref))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "createdAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-updated-at))
      (common-lisp:list
       (common-lisp:cons "lastUpdatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'mesh-name))
      (common-lisp:list
       (common-lisp:cons "meshName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'mesh-owner))
      (common-lisp:list
       (common-lisp:cons "meshOwner"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-owner))
      (common-lisp:list
       (common-lisp:cons "resourceOwner"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version))
      (common-lisp:list
       (common-lisp:cons "version"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input mesh-ref))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass mesh-service-discovery common-lisp:nil
                       ((ip-preference :initarg :|ipPreference| :type
                         (common-lisp:or ip-preference common-lisp:null)
                         :accessor %mesh-service-discovery-ip-preference
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'mesh-service-discovery 'make-mesh-service-discovery))
 (common-lisp:defun make-mesh-service-discovery
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key ip-preference)
   (common-lisp:apply #'common-lisp:make-instance 'mesh-service-discovery
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          mesh-service-discovery))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          mesh-service-discovery))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ip-preference))
      (common-lisp:list
       (common-lisp:cons "ipPreference"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          mesh-service-discovery))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass mesh-spec common-lisp:nil
                       ((service-discovery :initarg :|serviceDiscovery| :type
                         (common-lisp:or mesh-service-discovery
                                         common-lisp:null)
                         :accessor %mesh-spec-service-discovery :initform
                         common-lisp:nil)
                        (egress-filter :initarg :|egressFilter| :type
                         (common-lisp:or egress-filter common-lisp:null)
                         :accessor %mesh-spec-egress-filter :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'mesh-spec 'make-mesh-spec))
 (common-lisp:defun make-mesh-spec
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key service-discovery egress-filter)
   (common-lisp:apply #'common-lisp:make-instance 'mesh-spec
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input mesh-spec))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input mesh-spec))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'egress-filter))
      (common-lisp:list
       (common-lisp:cons "egressFilter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service-discovery))
      (common-lisp:list
       (common-lisp:cons "serviceDiscovery"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input mesh-spec))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass mesh-status common-lisp:nil
                       ((status :initarg :|status| :type
                         (common-lisp:or mesh-status-code common-lisp:null)
                         :accessor %mesh-status-status :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'mesh-status 'make-mesh-status))
 (common-lisp:defun make-mesh-status
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key status)
   (common-lisp:apply #'common-lisp:make-instance 'mesh-status
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input mesh-status))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input mesh-status))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input mesh-status))
   common-lisp:nil))
(common-lisp:deftype mesh-status-code () 'common-lisp:string)
(common-lisp:deftype method-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition not-found-exception
     (appmesh-error)
     ((message :initarg :|message| :initform common-lisp:nil :reader
       not-found-exception-message)))
 (common-lisp:export
  (common-lisp:list 'not-found-exception 'not-found-exception-message)))
(common-lisp:progn
 (common-lisp:defclass outlier-detection common-lisp:nil
                       ((max-server-errors :initarg :|maxServerErrors| :type
                         (common-lisp:or outlier-detection-max-server-errors
                                         common-lisp:null)
                         :accessor %outlier-detection-max-server-errors
                         :initform
                         (common-lisp:error ":maxservererrors is required"))
                        (max-ejection-percent :initarg :|maxEjectionPercent|
                         :type
                         (common-lisp:or outlier-detection-max-ejection-percent
                                         common-lisp:null)
                         :accessor %outlier-detection-max-ejection-percent
                         :initform
                         (common-lisp:error ":maxejectionpercent is required"))
                        (interval :initarg :|interval| :type
                         (common-lisp:or duration common-lisp:null) :accessor
                         %outlier-detection-interval :initform
                         (common-lisp:error ":interval is required"))
                        (base-ejection-duration :initarg
                         :|baseEjectionDuration| :type
                         (common-lisp:or duration common-lisp:null) :accessor
                         %outlier-detection-base-ejection-duration :initform
                         (common-lisp:error
                          ":baseejectionduration is required"))))
 (common-lisp:export
  (common-lisp:list 'outlier-detection 'make-outlier-detection))
 (common-lisp:defun make-outlier-detection
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key max-server-errors max-ejection-percent
                     interval base-ejection-duration)
   (common-lisp:apply #'common-lisp:make-instance 'outlier-detection
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input outlier-detection))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input outlier-detection))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'base-ejection-duration))
      (common-lisp:list
       (common-lisp:cons "baseEjectionDuration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'interval))
      (common-lisp:list
       (common-lisp:cons "interval"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'max-ejection-percent))
      (common-lisp:list
       (common-lisp:cons "maxEjectionPercent"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-server-errors))
      (common-lisp:list
       (common-lisp:cons "maxServerErrors"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input outlier-detection))
   common-lisp:nil))
(common-lisp:deftype outlier-detection-max-ejection-percent ()
  'common-lisp:integer)
(common-lisp:deftype outlier-detection-max-server-errors ()
  'common-lisp:integer)
(common-lisp:deftype percent-int () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass port-mapping common-lisp:nil
                       ((protocol :initarg :|protocol| :type
                         (common-lisp:or port-protocol common-lisp:null)
                         :accessor %port-mapping-protocol :initform
                         (common-lisp:error ":protocol is required"))
                        (port :initarg :|port| :type
                         (common-lisp:or port-number common-lisp:null)
                         :accessor %port-mapping-port :initform
                         (common-lisp:error ":port is required"))))
 (common-lisp:export (common-lisp:list 'port-mapping 'make-port-mapping))
 (common-lisp:defun make-port-mapping
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key protocol port)
   (common-lisp:apply #'common-lisp:make-instance 'port-mapping
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input port-mapping))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input port-mapping))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'port))
      (common-lisp:list
       (common-lisp:cons "port"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'protocol))
      (common-lisp:list
       (common-lisp:cons "protocol"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input port-mapping))
   common-lisp:nil))
(common-lisp:deftype port-number () 'common-lisp:integer)
(common-lisp:deftype port-protocol () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype port-set () '(trivial-types:proper-list port-number))
 (common-lisp:defun |make-port-set|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list port-number))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass query-parameter-match common-lisp:nil
                       ((exact :initarg :|exact| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %query-parameter-match-exact :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'query-parameter-match 'make-query-parameter-match))
 (common-lisp:defun make-query-parameter-match
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key exact)
   (common-lisp:apply #'common-lisp:make-instance 'query-parameter-match
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          query-parameter-match))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          query-parameter-match))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'exact))
      (common-lisp:list
       (common-lisp:cons "exact"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          query-parameter-match))
   common-lisp:nil))
(common-lisp:deftype query-parameter-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition resource-in-use-exception
     (appmesh-error)
     ((message :initarg :|message| :initform common-lisp:nil :reader
       resource-in-use-exception-message)))
 (common-lisp:export
  (common-lisp:list 'resource-in-use-exception
                    'resource-in-use-exception-message)))
(common-lisp:progn
 (common-lisp:defclass resource-metadata common-lisp:nil
                       ((version :initarg :|version| :type
                         (common-lisp:or long common-lisp:null) :accessor
                         %resource-metadata-version :initform
                         (common-lisp:error ":version is required"))
                        (uid :initarg :|uid| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %resource-metadata-uid :initform
                         (common-lisp:error ":uid is required"))
                        (resource-owner :initarg :|resourceOwner| :type
                         (common-lisp:or account-id common-lisp:null) :accessor
                         %resource-metadata-resource-owner :initform
                         (common-lisp:error ":resourceowner is required"))
                        (mesh-owner :initarg :|meshOwner| :type
                         (common-lisp:or account-id common-lisp:null) :accessor
                         %resource-metadata-mesh-owner :initform
                         (common-lisp:error ":meshowner is required"))
                        (last-updated-at :initarg :|lastUpdatedAt| :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %resource-metadata-last-updated-at :initform
                         (common-lisp:error ":lastupdatedat is required"))
                        (created-at :initarg :|createdAt| :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %resource-metadata-created-at :initform
                         (common-lisp:error ":createdat is required"))
                        (arn :initarg :|arn| :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %resource-metadata-arn :initform
                         (common-lisp:error ":arn is required"))))
 (common-lisp:export
  (common-lisp:list 'resource-metadata 'make-resource-metadata))
 (common-lisp:defun make-resource-metadata
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key version uid resource-owner mesh-owner
                     last-updated-at created-at arn)
   (common-lisp:apply #'common-lisp:make-instance 'resource-metadata
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input resource-metadata))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input resource-metadata))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "createdAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-updated-at))
      (common-lisp:list
       (common-lisp:cons "lastUpdatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'mesh-owner))
      (common-lisp:list
       (common-lisp:cons "meshOwner"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-owner))
      (common-lisp:list
       (common-lisp:cons "resourceOwner"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'uid))
      (common-lisp:list
       (common-lisp:cons "uid"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version))
      (common-lisp:list
       (common-lisp:cons "version"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input resource-metadata))
   common-lisp:nil))
(common-lisp:deftype resource-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass route-data common-lisp:nil
                       ((virtual-router-name :initarg :|virtualRouterName|
                         :type (common-lisp:or resource-name common-lisp:null)
                         :accessor %route-data-virtual-router-name :initform
                         (common-lisp:error ":virtualroutername is required"))
                        (status :initarg :|status| :type
                         (common-lisp:or route-status common-lisp:null)
                         :accessor %route-data-status :initform
                         (common-lisp:error ":status is required"))
                        (spec :initarg :|spec| :type
                         (common-lisp:or route-spec common-lisp:null) :accessor
                         %route-data-spec :initform
                         (common-lisp:error ":spec is required"))
                        (route-name :initarg :|routeName| :type
                         (common-lisp:or resource-name common-lisp:null)
                         :accessor %route-data-route-name :initform
                         (common-lisp:error ":routename is required"))
                        (metadata :initarg :|metadata| :type
                         (common-lisp:or resource-metadata common-lisp:null)
                         :accessor %route-data-metadata :initform
                         (common-lisp:error ":metadata is required"))
                        (mesh-name :initarg :|meshName| :type
                         (common-lisp:or resource-name common-lisp:null)
                         :accessor %route-data-mesh-name :initform
                         (common-lisp:error ":meshname is required"))))
 (common-lisp:export (common-lisp:list 'route-data 'make-route-data))
 (common-lisp:defun make-route-data
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key virtual-router-name status spec
                     route-name metadata mesh-name)
   (common-lisp:apply #'common-lisp:make-instance 'route-data
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input route-data))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input route-data))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'mesh-name))
      (common-lisp:list
       (common-lisp:cons "meshName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metadata))
      (common-lisp:list
       (common-lisp:cons "metadata"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'route-name))
      (common-lisp:list
       (common-lisp:cons "routeName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'spec))
      (common-lisp:list
       (common-lisp:cons "spec"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'virtual-router-name))
      (common-lisp:list
       (common-lisp:cons "virtualRouterName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input route-data))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype route-list () '(trivial-types:proper-list route-ref))
 (common-lisp:defun |make-route-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list route-ref))
   aws-sdk/generator/shape::members))
(common-lisp:deftype route-priority () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass route-ref common-lisp:nil
                       ((virtual-router-name :initarg :|virtualRouterName|
                         :type (common-lisp:or resource-name common-lisp:null)
                         :accessor %route-ref-virtual-router-name :initform
                         (common-lisp:error ":virtualroutername is required"))
                        (version :initarg :|version| :type
                         (common-lisp:or long common-lisp:null) :accessor
                         %route-ref-version :initform
                         (common-lisp:error ":version is required"))
                        (route-name :initarg :|routeName| :type
                         (common-lisp:or resource-name common-lisp:null)
                         :accessor %route-ref-route-name :initform
                         (common-lisp:error ":routename is required"))
                        (resource-owner :initarg :|resourceOwner| :type
                         (common-lisp:or account-id common-lisp:null) :accessor
                         %route-ref-resource-owner :initform
                         (common-lisp:error ":resourceowner is required"))
                        (mesh-owner :initarg :|meshOwner| :type
                         (common-lisp:or account-id common-lisp:null) :accessor
                         %route-ref-mesh-owner :initform
                         (common-lisp:error ":meshowner is required"))
                        (mesh-name :initarg :|meshName| :type
                         (common-lisp:or resource-name common-lisp:null)
                         :accessor %route-ref-mesh-name :initform
                         (common-lisp:error ":meshname is required"))
                        (last-updated-at :initarg :|lastUpdatedAt| :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %route-ref-last-updated-at :initform
                         (common-lisp:error ":lastupdatedat is required"))
                        (created-at :initarg :|createdAt| :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %route-ref-created-at :initform
                         (common-lisp:error ":createdat is required"))
                        (arn :initarg :|arn| :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %route-ref-arn :initform
                         (common-lisp:error ":arn is required"))))
 (common-lisp:export (common-lisp:list 'route-ref 'make-route-ref))
 (common-lisp:defun make-route-ref
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key virtual-router-name version route-name
                     resource-owner mesh-owner mesh-name last-updated-at
                     created-at arn)
   (common-lisp:apply #'common-lisp:make-instance 'route-ref
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input route-ref))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input route-ref))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "createdAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-updated-at))
      (common-lisp:list
       (common-lisp:cons "lastUpdatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'mesh-name))
      (common-lisp:list
       (common-lisp:cons "meshName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'mesh-owner))
      (common-lisp:list
       (common-lisp:cons "meshOwner"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-owner))
      (common-lisp:list
       (common-lisp:cons "resourceOwner"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'route-name))
      (common-lisp:list
       (common-lisp:cons "routeName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version))
      (common-lisp:list
       (common-lisp:cons "version"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'virtual-router-name))
      (common-lisp:list
       (common-lisp:cons "virtualRouterName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input route-ref))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass route-spec common-lisp:nil
                       ((tcp-route :initarg :|tcpRoute| :type
                         (common-lisp:or tcp-route common-lisp:null) :accessor
                         %route-spec-tcp-route :initform common-lisp:nil)
                        (priority :initarg :|priority| :type
                         (common-lisp:or route-priority common-lisp:null)
                         :accessor %route-spec-priority :initform
                         common-lisp:nil)
                        (http-route :initarg :|httpRoute| :type
                         (common-lisp:or http-route common-lisp:null) :accessor
                         %route-spec-http-route :initform common-lisp:nil)
                        (http2route :initarg :|http2Route| :type
                         (common-lisp:or http-route common-lisp:null) :accessor
                         %route-spec-http2route :initform common-lisp:nil)
                        (grpc-route :initarg :|grpcRoute| :type
                         (common-lisp:or grpc-route common-lisp:null) :accessor
                         %route-spec-grpc-route :initform common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'route-spec 'make-route-spec))
 (common-lisp:defun make-route-spec
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tcp-route priority http-route http2route
                     grpc-route)
   (common-lisp:apply #'common-lisp:make-instance 'route-spec
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input route-spec))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input route-spec))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'grpc-route))
      (common-lisp:list
       (common-lisp:cons "grpcRoute"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'http2route))
      (common-lisp:list
       (common-lisp:cons "http2Route"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'http-route))
      (common-lisp:list
       (common-lisp:cons "httpRoute"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'priority))
      (common-lisp:list
       (common-lisp:cons "priority"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tcp-route))
      (common-lisp:list
       (common-lisp:cons "tcpRoute"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input route-spec))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass route-status common-lisp:nil
                       ((status :initarg :|status| :type
                         (common-lisp:or route-status-code common-lisp:null)
                         :accessor %route-status-status :initform
                         (common-lisp:error ":status is required"))))
 (common-lisp:export (common-lisp:list 'route-status 'make-route-status))
 (common-lisp:defun make-route-status
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key status)
   (common-lisp:apply #'common-lisp:make-instance 'route-status
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input route-status))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input route-status))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input route-status))
   common-lisp:nil))
(common-lisp:deftype route-status-code () 'common-lisp:string)
(common-lisp:deftype sds-secret-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass service-discovery common-lisp:nil
                       ((dns :initarg :|dns| :type
                         (common-lisp:or dns-service-discovery
                                         common-lisp:null)
                         :accessor %service-discovery-dns :initform
                         common-lisp:nil)
                        (aws-cloud-map :initarg :|awsCloudMap| :type
                         (common-lisp:or aws-cloud-map-service-discovery
                                         common-lisp:null)
                         :accessor %service-discovery-aws-cloud-map :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'service-discovery 'make-service-discovery))
 (common-lisp:defun make-service-discovery
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key dns aws-cloud-map)
   (common-lisp:apply #'common-lisp:make-instance 'service-discovery
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input service-discovery))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input service-discovery))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'aws-cloud-map))
      (common-lisp:list
       (common-lisp:cons "awsCloudMap"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dns))
      (common-lisp:list
       (common-lisp:cons "dns"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input service-discovery))
   common-lisp:nil))
(common-lisp:deftype service-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition service-unavailable-exception
     (appmesh-error)
     ((message :initarg :|message| :initform common-lisp:nil :reader
       service-unavailable-exception-message)))
 (common-lisp:export
  (common-lisp:list 'service-unavailable-exception
                    'service-unavailable-exception-message)))
(common-lisp:deftype string () 'common-lisp:string)
(common-lisp:deftype subject-alternative-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype subject-alternative-name-list ()
   '(trivial-types:proper-list subject-alternative-name))
 (common-lisp:defun |make-subject-alternative-name-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            subject-alternative-name))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass subject-alternative-name-matchers common-lisp:nil
                       ((exact :initarg :|exact| :type
                         (common-lisp:or subject-alternative-name-list
                                         common-lisp:null)
                         :accessor %subject-alternative-name-matchers-exact
                         :initform (common-lisp:error ":exact is required"))))
 (common-lisp:export
  (common-lisp:list 'subject-alternative-name-matchers
                    'make-subject-alternative-name-matchers))
 (common-lisp:defun make-subject-alternative-name-matchers
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key exact)
   (common-lisp:apply #'common-lisp:make-instance
                      'subject-alternative-name-matchers
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          subject-alternative-name-matchers))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          subject-alternative-name-matchers))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'exact))
      (common-lisp:list
       (common-lisp:cons "exact"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          subject-alternative-name-matchers))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass subject-alternative-names common-lisp:nil
                       ((match :initarg :|match| :type
                         (common-lisp:or subject-alternative-name-matchers
                                         common-lisp:null)
                         :accessor %subject-alternative-names-match :initform
                         (common-lisp:error ":match is required"))))
 (common-lisp:export
  (common-lisp:list 'subject-alternative-names
                    'make-subject-alternative-names))
 (common-lisp:defun make-subject-alternative-names
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key match)
   (common-lisp:apply #'common-lisp:make-instance 'subject-alternative-names
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          subject-alternative-names))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          subject-alternative-names))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'match))
      (common-lisp:list
       (common-lisp:cons "match"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          subject-alternative-names))
   common-lisp:nil))
(common-lisp:deftype suffix-hostname () 'common-lisp:string)
(common-lisp:deftype tag-key () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype tag-key-list () '(trivial-types:proper-list tag-key))
 (common-lisp:defun |make-tag-key-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list tag-key))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype tag-list () '(trivial-types:proper-list tag-ref))
 (common-lisp:defun |make-tag-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list tag-ref))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass tag-ref common-lisp:nil
                       ((value :initarg :|value| :type
                         (common-lisp:or tag-value common-lisp:null) :accessor
                         %tag-ref-value :initform
                         (common-lisp:error ":value is required"))
                        (key :initarg :|key| :type
                         (common-lisp:or tag-key common-lisp:null) :accessor
                         %tag-ref-key :initform
                         (common-lisp:error ":key is required"))))
 (common-lisp:export (common-lisp:list 'tag-ref 'make-tag-ref))
 (common-lisp:defun make-tag-ref
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key value key)
   (common-lisp:apply #'common-lisp:make-instance 'tag-ref
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input tag-ref))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input tag-ref))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key))
      (common-lisp:list
       (common-lisp:cons "key"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input tag-ref))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass tag-resource-input common-lisp:nil
                       ((tags :initarg :|tags| :type
                         (common-lisp:or tag-list common-lisp:null) :accessor
                         %tag-resource-input-tags :initform
                         (common-lisp:error ":tags is required"))
                        (resource-arn :initarg :|resourceArn| :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %tag-resource-input-resource-arn :initform
                         (common-lisp:error ":resourcearn is required"))))
 (common-lisp:export
  (common-lisp:list 'tag-resource-input 'make-tag-resource-input))
 (common-lisp:defun make-tag-resource-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tags resource-arn)
   (common-lisp:apply #'common-lisp:make-instance 'tag-resource-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input tag-resource-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input tag-resource-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input tag-resource-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass tag-resource-output common-lisp:nil common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'tag-resource-output 'make-tag-resource-output))
 (common-lisp:defun make-tag-resource-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance 'tag-resource-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input tag-resource-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input tag-resource-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input tag-resource-output))
   common-lisp:nil))
(common-lisp:deftype tag-value () 'common-lisp:string)
(common-lisp:deftype tags-limit () 'common-lisp:integer)
(common-lisp:deftype tcp-retry-policy-event () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype tcp-retry-policy-events ()
   '(trivial-types:proper-list tcp-retry-policy-event))
 (common-lisp:defun |make-tcp-retry-policy-events|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list tcp-retry-policy-event))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass tcp-route common-lisp:nil
                       ((timeout :initarg :|timeout| :type
                         (common-lisp:or tcp-timeout common-lisp:null)
                         :accessor %tcp-route-timeout :initform
                         common-lisp:nil)
                        (match :initarg :|match| :type
                         (common-lisp:or tcp-route-match common-lisp:null)
                         :accessor %tcp-route-match :initform common-lisp:nil)
                        (action :initarg :|action| :type
                         (common-lisp:or tcp-route-action common-lisp:null)
                         :accessor %tcp-route-action :initform
                         (common-lisp:error ":action is required"))))
 (common-lisp:export (common-lisp:list 'tcp-route 'make-tcp-route))
 (common-lisp:defun make-tcp-route
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key timeout match action)
   (common-lisp:apply #'common-lisp:make-instance 'tcp-route
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input tcp-route))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input tcp-route))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'action))
      (common-lisp:list
       (common-lisp:cons "action"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'match))
      (common-lisp:list
       (common-lisp:cons "match"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'timeout))
      (common-lisp:list
       (common-lisp:cons "timeout"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input tcp-route))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass tcp-route-action common-lisp:nil
                       ((weighted-targets :initarg :|weightedTargets| :type
                         (common-lisp:or weighted-targets common-lisp:null)
                         :accessor %tcp-route-action-weighted-targets :initform
                         (common-lisp:error ":weightedtargets is required"))))
 (common-lisp:export
  (common-lisp:list 'tcp-route-action 'make-tcp-route-action))
 (common-lisp:defun make-tcp-route-action
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key weighted-targets)
   (common-lisp:apply #'common-lisp:make-instance 'tcp-route-action
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input tcp-route-action))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input tcp-route-action))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'weighted-targets))
      (common-lisp:list
       (common-lisp:cons "weightedTargets"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input tcp-route-action))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass tcp-route-match common-lisp:nil
                       ((port :initarg :|port| :type
                         (common-lisp:or listener-port common-lisp:null)
                         :accessor %tcp-route-match-port :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'tcp-route-match 'make-tcp-route-match))
 (common-lisp:defun make-tcp-route-match
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key port)
   (common-lisp:apply #'common-lisp:make-instance 'tcp-route-match
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input tcp-route-match))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input tcp-route-match))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'port))
      (common-lisp:list
       (common-lisp:cons "port"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input tcp-route-match))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass tcp-timeout common-lisp:nil
                       ((idle :initarg :|idle| :type
                         (common-lisp:or duration common-lisp:null) :accessor
                         %tcp-timeout-idle :initform common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'tcp-timeout 'make-tcp-timeout))
 (common-lisp:defun make-tcp-timeout
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key idle)
   (common-lisp:apply #'common-lisp:make-instance 'tcp-timeout
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input tcp-timeout))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input tcp-timeout))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'idle))
      (common-lisp:list
       (common-lisp:cons "idle"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input tcp-timeout))
   common-lisp:nil))
(common-lisp:deftype text-format () 'common-lisp:string)
(common-lisp:deftype timestamp () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass tls-validation-context common-lisp:nil
                       ((trust :initarg :|trust| :type
                         (common-lisp:or tls-validation-context-trust
                                         common-lisp:null)
                         :accessor %tls-validation-context-trust :initform
                         (common-lisp:error ":trust is required"))
                        (subject-alternative-names :initarg
                         :|subjectAlternativeNames| :type
                         (common-lisp:or subject-alternative-names
                                         common-lisp:null)
                         :accessor
                         %tls-validation-context-subject-alternative-names
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'tls-validation-context 'make-tls-validation-context))
 (common-lisp:defun make-tls-validation-context
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key trust subject-alternative-names)
   (common-lisp:apply #'common-lisp:make-instance 'tls-validation-context
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          tls-validation-context))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          tls-validation-context))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'subject-alternative-names))
      (common-lisp:list
       (common-lisp:cons "subjectAlternativeNames"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'trust))
      (common-lisp:list
       (common-lisp:cons "trust"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          tls-validation-context))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass tls-validation-context-acm-trust common-lisp:nil
                       ((certificate-authority-arns :initarg
                         :|certificateAuthorityArns| :type
                         (common-lisp:or certificate-authority-arns
                                         common-lisp:null)
                         :accessor
                         %tls-validation-context-acm-trust-certificate-authority-arns
                         :initform
                         (common-lisp:error
                          ":certificateauthorityarns is required"))))
 (common-lisp:export
  (common-lisp:list 'tls-validation-context-acm-trust
                    'make-tls-validation-context-acm-trust))
 (common-lisp:defun make-tls-validation-context-acm-trust
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key certificate-authority-arns)
   (common-lisp:apply #'common-lisp:make-instance
                      'tls-validation-context-acm-trust
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          tls-validation-context-acm-trust))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          tls-validation-context-acm-trust))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'certificate-authority-arns))
      (common-lisp:list
       (common-lisp:cons "certificateAuthorityArns"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          tls-validation-context-acm-trust))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass tls-validation-context-file-trust common-lisp:nil
                       ((certificate-chain :initarg :|certificateChain| :type
                         (common-lisp:or file-path common-lisp:null) :accessor
                         %tls-validation-context-file-trust-certificate-chain
                         :initform
                         (common-lisp:error ":certificatechain is required"))))
 (common-lisp:export
  (common-lisp:list 'tls-validation-context-file-trust
                    'make-tls-validation-context-file-trust))
 (common-lisp:defun make-tls-validation-context-file-trust
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key certificate-chain)
   (common-lisp:apply #'common-lisp:make-instance
                      'tls-validation-context-file-trust
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          tls-validation-context-file-trust))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          tls-validation-context-file-trust))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'certificate-chain))
      (common-lisp:list
       (common-lisp:cons "certificateChain"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          tls-validation-context-file-trust))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass tls-validation-context-sds-trust common-lisp:nil
                       ((secret-name :initarg :|secretName| :type
                         (common-lisp:or sds-secret-name common-lisp:null)
                         :accessor
                         %tls-validation-context-sds-trust-secret-name
                         :initform
                         (common-lisp:error ":secretname is required"))))
 (common-lisp:export
  (common-lisp:list 'tls-validation-context-sds-trust
                    'make-tls-validation-context-sds-trust))
 (common-lisp:defun make-tls-validation-context-sds-trust
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key secret-name)
   (common-lisp:apply #'common-lisp:make-instance
                      'tls-validation-context-sds-trust
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          tls-validation-context-sds-trust))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          tls-validation-context-sds-trust))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'secret-name))
      (common-lisp:list
       (common-lisp:cons "secretName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          tls-validation-context-sds-trust))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass tls-validation-context-trust common-lisp:nil
                       ((sds :initarg :|sds| :type
                         (common-lisp:or tls-validation-context-sds-trust
                                         common-lisp:null)
                         :accessor %tls-validation-context-trust-sds :initform
                         common-lisp:nil)
                        (file :initarg :|file| :type
                         (common-lisp:or tls-validation-context-file-trust
                                         common-lisp:null)
                         :accessor %tls-validation-context-trust-file :initform
                         common-lisp:nil)
                        (acm :initarg :|acm| :type
                         (common-lisp:or tls-validation-context-acm-trust
                                         common-lisp:null)
                         :accessor %tls-validation-context-trust-acm :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'tls-validation-context-trust
                    'make-tls-validation-context-trust))
 (common-lisp:defun make-tls-validation-context-trust
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key sds file acm)
   (common-lisp:apply #'common-lisp:make-instance 'tls-validation-context-trust
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          tls-validation-context-trust))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          tls-validation-context-trust))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'acm))
      (common-lisp:list
       (common-lisp:cons "acm"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'file))
      (common-lisp:list
       (common-lisp:cons "file"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sds))
      (common-lisp:list
       (common-lisp:cons "sds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          tls-validation-context-trust))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition too-many-requests-exception
     (appmesh-error)
     ((message :initarg :|message| :initform common-lisp:nil :reader
       too-many-requests-exception-message)))
 (common-lisp:export
  (common-lisp:list 'too-many-requests-exception
                    'too-many-requests-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition too-many-tags-exception
     (appmesh-error)
     ((message :initarg :|message| :initform common-lisp:nil :reader
       too-many-tags-exception-message)))
 (common-lisp:export
  (common-lisp:list 'too-many-tags-exception 'too-many-tags-exception-message)))
(common-lisp:progn
 (common-lisp:defclass untag-resource-input common-lisp:nil
                       ((tag-keys :initarg :|tagKeys| :type
                         (common-lisp:or tag-key-list common-lisp:null)
                         :accessor %untag-resource-input-tag-keys :initform
                         (common-lisp:error ":tagkeys is required"))
                        (resource-arn :initarg :|resourceArn| :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %untag-resource-input-resource-arn :initform
                         (common-lisp:error ":resourcearn is required"))))
 (common-lisp:export
  (common-lisp:list 'untag-resource-input 'make-untag-resource-input))
 (common-lisp:defun make-untag-resource-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tag-keys resource-arn)
   (common-lisp:apply #'common-lisp:make-instance 'untag-resource-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input untag-resource-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input untag-resource-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tag-keys))
      (common-lisp:list
       (common-lisp:cons "tagKeys"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input untag-resource-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass untag-resource-output common-lisp:nil common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'untag-resource-output 'make-untag-resource-output))
 (common-lisp:defun make-untag-resource-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance 'untag-resource-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-gateway-route-input common-lisp:nil
                       ((virtual-gateway-name :initarg :|virtualGatewayName|
                         :type (common-lisp:or resource-name common-lisp:null)
                         :accessor
                         %update-gateway-route-input-virtual-gateway-name
                         :initform
                         (common-lisp:error ":virtualgatewayname is required"))
                        (spec :initarg :|spec| :type
                         (common-lisp:or gateway-route-spec common-lisp:null)
                         :accessor %update-gateway-route-input-spec :initform
                         (common-lisp:error ":spec is required"))
                        (mesh-owner :initarg :|meshOwner| :type
                         (common-lisp:or account-id common-lisp:null) :accessor
                         %update-gateway-route-input-mesh-owner :initform
                         common-lisp:nil)
                        (mesh-name :initarg :|meshName| :type
                         (common-lisp:or resource-name common-lisp:null)
                         :accessor %update-gateway-route-input-mesh-name
                         :initform (common-lisp:error ":meshname is required"))
                        (gateway-route-name :initarg :|gatewayRouteName| :type
                         (common-lisp:or resource-name common-lisp:null)
                         :accessor
                         %update-gateway-route-input-gateway-route-name
                         :initform
                         (common-lisp:error ":gatewayroutename is required"))
                        (client-token :initarg :|clientToken| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %update-gateway-route-input-client-token :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'update-gateway-route-input
                    'make-update-gateway-route-input))
 (common-lisp:defun make-update-gateway-route-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key virtual-gateway-name spec mesh-owner
                     mesh-name gateway-route-name client-token)
   (common-lisp:apply #'common-lisp:make-instance 'update-gateway-route-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-gateway-route-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-gateway-route-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "clientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'spec))
      (common-lisp:list
       (common-lisp:cons "spec"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-gateway-route-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-gateway-route-output common-lisp:nil
                       ((gateway-route :initarg :|gatewayRoute| :type
                         (common-lisp:or gateway-route-data common-lisp:null)
                         :accessor %update-gateway-route-output-gateway-route
                         :initform
                         (common-lisp:error ":gatewayroute is required"))))
 (common-lisp:export
  (common-lisp:list 'update-gateway-route-output
                    'make-update-gateway-route-output))
 (common-lisp:defun make-update-gateway-route-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key gateway-route)
   (common-lisp:apply #'common-lisp:make-instance 'update-gateway-route-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-gateway-route-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-gateway-route-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'gateway-route))
      (common-lisp:list
       (common-lisp:cons "gatewayRoute"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-gateway-route-output))
   (com.inuoe.jzon:stringify
    (common-lisp:slot-value aws-sdk/generator/shape::input 'gateway-route))))
(common-lisp:progn
 (common-lisp:defclass update-mesh-input common-lisp:nil
                       ((spec :initarg :|spec| :type
                         (common-lisp:or mesh-spec common-lisp:null) :accessor
                         %update-mesh-input-spec :initform common-lisp:nil)
                        (mesh-name :initarg :|meshName| :type
                         (common-lisp:or resource-name common-lisp:null)
                         :accessor %update-mesh-input-mesh-name :initform
                         (common-lisp:error ":meshname is required"))
                        (client-token :initarg :|clientToken| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %update-mesh-input-client-token :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'update-mesh-input 'make-update-mesh-input))
 (common-lisp:defun make-update-mesh-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key spec mesh-name client-token)
   (common-lisp:apply #'common-lisp:make-instance 'update-mesh-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input update-mesh-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input update-mesh-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "clientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'spec))
      (common-lisp:list
       (common-lisp:cons "spec"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input update-mesh-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-mesh-output common-lisp:nil
                       ((mesh :initarg :|mesh| :type
                         (common-lisp:or mesh-data common-lisp:null) :accessor
                         %update-mesh-output-mesh :initform
                         (common-lisp:error ":mesh is required"))))
 (common-lisp:export
  (common-lisp:list 'update-mesh-output 'make-update-mesh-output))
 (common-lisp:defun make-update-mesh-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key mesh)
   (common-lisp:apply #'common-lisp:make-instance 'update-mesh-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input update-mesh-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input update-mesh-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'mesh))
      (common-lisp:list
       (common-lisp:cons "mesh"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input update-mesh-output))
   (com.inuoe.jzon:stringify
    (common-lisp:slot-value aws-sdk/generator/shape::input 'mesh))))
(common-lisp:progn
 (common-lisp:defclass update-route-input common-lisp:nil
                       ((virtual-router-name :initarg :|virtualRouterName|
                         :type (common-lisp:or resource-name common-lisp:null)
                         :accessor %update-route-input-virtual-router-name
                         :initform
                         (common-lisp:error ":virtualroutername is required"))
                        (spec :initarg :|spec| :type
                         (common-lisp:or route-spec common-lisp:null) :accessor
                         %update-route-input-spec :initform
                         (common-lisp:error ":spec is required"))
                        (route-name :initarg :|routeName| :type
                         (common-lisp:or resource-name common-lisp:null)
                         :accessor %update-route-input-route-name :initform
                         (common-lisp:error ":routename is required"))
                        (mesh-owner :initarg :|meshOwner| :type
                         (common-lisp:or account-id common-lisp:null) :accessor
                         %update-route-input-mesh-owner :initform
                         common-lisp:nil)
                        (mesh-name :initarg :|meshName| :type
                         (common-lisp:or resource-name common-lisp:null)
                         :accessor %update-route-input-mesh-name :initform
                         (common-lisp:error ":meshname is required"))
                        (client-token :initarg :|clientToken| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %update-route-input-client-token :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'update-route-input 'make-update-route-input))
 (common-lisp:defun make-update-route-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key virtual-router-name spec route-name
                     mesh-owner mesh-name client-token)
   (common-lisp:apply #'common-lisp:make-instance 'update-route-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input update-route-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input update-route-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "clientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'spec))
      (common-lisp:list
       (common-lisp:cons "spec"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input update-route-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-route-output common-lisp:nil
                       ((route :initarg :|route| :type
                         (common-lisp:or route-data common-lisp:null) :accessor
                         %update-route-output-route :initform
                         (common-lisp:error ":route is required"))))
 (common-lisp:export
  (common-lisp:list 'update-route-output 'make-update-route-output))
 (common-lisp:defun make-update-route-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key route)
   (common-lisp:apply #'common-lisp:make-instance 'update-route-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input update-route-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input update-route-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'route))
      (common-lisp:list
       (common-lisp:cons "route"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input update-route-output))
   (com.inuoe.jzon:stringify
    (common-lisp:slot-value aws-sdk/generator/shape::input 'route))))
(common-lisp:progn
 (common-lisp:defclass update-virtual-gateway-input common-lisp:nil
                       ((virtual-gateway-name :initarg :|virtualGatewayName|
                         :type (common-lisp:or resource-name common-lisp:null)
                         :accessor
                         %update-virtual-gateway-input-virtual-gateway-name
                         :initform
                         (common-lisp:error ":virtualgatewayname is required"))
                        (spec :initarg :|spec| :type
                         (common-lisp:or virtual-gateway-spec common-lisp:null)
                         :accessor %update-virtual-gateway-input-spec :initform
                         (common-lisp:error ":spec is required"))
                        (mesh-owner :initarg :|meshOwner| :type
                         (common-lisp:or account-id common-lisp:null) :accessor
                         %update-virtual-gateway-input-mesh-owner :initform
                         common-lisp:nil)
                        (mesh-name :initarg :|meshName| :type
                         (common-lisp:or resource-name common-lisp:null)
                         :accessor %update-virtual-gateway-input-mesh-name
                         :initform (common-lisp:error ":meshname is required"))
                        (client-token :initarg :|clientToken| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %update-virtual-gateway-input-client-token :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'update-virtual-gateway-input
                    'make-update-virtual-gateway-input))
 (common-lisp:defun make-update-virtual-gateway-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key virtual-gateway-name spec mesh-owner
                     mesh-name client-token)
   (common-lisp:apply #'common-lisp:make-instance 'update-virtual-gateway-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-virtual-gateway-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-virtual-gateway-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "clientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'spec))
      (common-lisp:list
       (common-lisp:cons "spec"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-virtual-gateway-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-virtual-gateway-output common-lisp:nil
                       ((virtual-gateway :initarg :|virtualGateway| :type
                         (common-lisp:or virtual-gateway-data common-lisp:null)
                         :accessor
                         %update-virtual-gateway-output-virtual-gateway
                         :initform
                         (common-lisp:error ":virtualgateway is required"))))
 (common-lisp:export
  (common-lisp:list 'update-virtual-gateway-output
                    'make-update-virtual-gateway-output))
 (common-lisp:defun make-update-virtual-gateway-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key virtual-gateway)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-virtual-gateway-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-virtual-gateway-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-virtual-gateway-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'virtual-gateway))
      (common-lisp:list
       (common-lisp:cons "virtualGateway"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-virtual-gateway-output))
   (com.inuoe.jzon:stringify
    (common-lisp:slot-value aws-sdk/generator/shape::input 'virtual-gateway))))
(common-lisp:progn
 (common-lisp:defclass update-virtual-node-input common-lisp:nil
                       ((virtual-node-name :initarg :|virtualNodeName| :type
                         (common-lisp:or resource-name common-lisp:null)
                         :accessor %update-virtual-node-input-virtual-node-name
                         :initform
                         (common-lisp:error ":virtualnodename is required"))
                        (spec :initarg :|spec| :type
                         (common-lisp:or virtual-node-spec common-lisp:null)
                         :accessor %update-virtual-node-input-spec :initform
                         (common-lisp:error ":spec is required"))
                        (mesh-owner :initarg :|meshOwner| :type
                         (common-lisp:or account-id common-lisp:null) :accessor
                         %update-virtual-node-input-mesh-owner :initform
                         common-lisp:nil)
                        (mesh-name :initarg :|meshName| :type
                         (common-lisp:or resource-name common-lisp:null)
                         :accessor %update-virtual-node-input-mesh-name
                         :initform (common-lisp:error ":meshname is required"))
                        (client-token :initarg :|clientToken| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %update-virtual-node-input-client-token :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'update-virtual-node-input
                    'make-update-virtual-node-input))
 (common-lisp:defun make-update-virtual-node-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key virtual-node-name spec mesh-owner
                     mesh-name client-token)
   (common-lisp:apply #'common-lisp:make-instance 'update-virtual-node-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-virtual-node-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-virtual-node-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "clientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'spec))
      (common-lisp:list
       (common-lisp:cons "spec"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-virtual-node-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-virtual-node-output common-lisp:nil
                       ((virtual-node :initarg :|virtualNode| :type
                         (common-lisp:or virtual-node-data common-lisp:null)
                         :accessor %update-virtual-node-output-virtual-node
                         :initform
                         (common-lisp:error ":virtualnode is required"))))
 (common-lisp:export
  (common-lisp:list 'update-virtual-node-output
                    'make-update-virtual-node-output))
 (common-lisp:defun make-update-virtual-node-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key virtual-node)
   (common-lisp:apply #'common-lisp:make-instance 'update-virtual-node-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-virtual-node-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-virtual-node-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'virtual-node))
      (common-lisp:list
       (common-lisp:cons "virtualNode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-virtual-node-output))
   (com.inuoe.jzon:stringify
    (common-lisp:slot-value aws-sdk/generator/shape::input 'virtual-node))))
(common-lisp:progn
 (common-lisp:defclass update-virtual-router-input common-lisp:nil
                       ((virtual-router-name :initarg :|virtualRouterName|
                         :type (common-lisp:or resource-name common-lisp:null)
                         :accessor
                         %update-virtual-router-input-virtual-router-name
                         :initform
                         (common-lisp:error ":virtualroutername is required"))
                        (spec :initarg :|spec| :type
                         (common-lisp:or virtual-router-spec common-lisp:null)
                         :accessor %update-virtual-router-input-spec :initform
                         (common-lisp:error ":spec is required"))
                        (mesh-owner :initarg :|meshOwner| :type
                         (common-lisp:or account-id common-lisp:null) :accessor
                         %update-virtual-router-input-mesh-owner :initform
                         common-lisp:nil)
                        (mesh-name :initarg :|meshName| :type
                         (common-lisp:or resource-name common-lisp:null)
                         :accessor %update-virtual-router-input-mesh-name
                         :initform (common-lisp:error ":meshname is required"))
                        (client-token :initarg :|clientToken| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %update-virtual-router-input-client-token :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'update-virtual-router-input
                    'make-update-virtual-router-input))
 (common-lisp:defun make-update-virtual-router-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key virtual-router-name spec mesh-owner
                     mesh-name client-token)
   (common-lisp:apply #'common-lisp:make-instance 'update-virtual-router-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-virtual-router-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-virtual-router-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "clientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'spec))
      (common-lisp:list
       (common-lisp:cons "spec"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-virtual-router-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-virtual-router-output common-lisp:nil
                       ((virtual-router :initarg :|virtualRouter| :type
                         (common-lisp:or virtual-router-data common-lisp:null)
                         :accessor %update-virtual-router-output-virtual-router
                         :initform
                         (common-lisp:error ":virtualrouter is required"))))
 (common-lisp:export
  (common-lisp:list 'update-virtual-router-output
                    'make-update-virtual-router-output))
 (common-lisp:defun make-update-virtual-router-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key virtual-router)
   (common-lisp:apply #'common-lisp:make-instance 'update-virtual-router-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-virtual-router-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-virtual-router-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'virtual-router))
      (common-lisp:list
       (common-lisp:cons "virtualRouter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-virtual-router-output))
   (com.inuoe.jzon:stringify
    (common-lisp:slot-value aws-sdk/generator/shape::input 'virtual-router))))
(common-lisp:progn
 (common-lisp:defclass update-virtual-service-input common-lisp:nil
                       ((virtual-service-name :initarg :|virtualServiceName|
                         :type (common-lisp:or service-name common-lisp:null)
                         :accessor
                         %update-virtual-service-input-virtual-service-name
                         :initform
                         (common-lisp:error ":virtualservicename is required"))
                        (spec :initarg :|spec| :type
                         (common-lisp:or virtual-service-spec common-lisp:null)
                         :accessor %update-virtual-service-input-spec :initform
                         (common-lisp:error ":spec is required"))
                        (mesh-owner :initarg :|meshOwner| :type
                         (common-lisp:or account-id common-lisp:null) :accessor
                         %update-virtual-service-input-mesh-owner :initform
                         common-lisp:nil)
                        (mesh-name :initarg :|meshName| :type
                         (common-lisp:or resource-name common-lisp:null)
                         :accessor %update-virtual-service-input-mesh-name
                         :initform (common-lisp:error ":meshname is required"))
                        (client-token :initarg :|clientToken| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %update-virtual-service-input-client-token :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'update-virtual-service-input
                    'make-update-virtual-service-input))
 (common-lisp:defun make-update-virtual-service-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key virtual-service-name spec mesh-owner
                     mesh-name client-token)
   (common-lisp:apply #'common-lisp:make-instance 'update-virtual-service-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-virtual-service-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-virtual-service-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "clientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'spec))
      (common-lisp:list
       (common-lisp:cons "spec"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-virtual-service-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-virtual-service-output common-lisp:nil
                       ((virtual-service :initarg :|virtualService| :type
                         (common-lisp:or virtual-service-data common-lisp:null)
                         :accessor
                         %update-virtual-service-output-virtual-service
                         :initform
                         (common-lisp:error ":virtualservice is required"))))
 (common-lisp:export
  (common-lisp:list 'update-virtual-service-output
                    'make-update-virtual-service-output))
 (common-lisp:defun make-update-virtual-service-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key virtual-service)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-virtual-service-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-virtual-service-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-virtual-service-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'virtual-service))
      (common-lisp:list
       (common-lisp:cons "virtualService"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-virtual-service-output))
   (com.inuoe.jzon:stringify
    (common-lisp:slot-value aws-sdk/generator/shape::input 'virtual-service))))
(common-lisp:progn
 (common-lisp:defclass virtual-gateway-access-log common-lisp:nil
                       ((file :initarg :|file| :type
                         (common-lisp:or virtual-gateway-file-access-log
                                         common-lisp:null)
                         :accessor %virtual-gateway-access-log-file :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'virtual-gateway-access-log
                    'make-virtual-gateway-access-log))
 (common-lisp:defun make-virtual-gateway-access-log
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key file)
   (common-lisp:apply #'common-lisp:make-instance 'virtual-gateway-access-log
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          virtual-gateway-access-log))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          virtual-gateway-access-log))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'file))
      (common-lisp:list
       (common-lisp:cons "file"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          virtual-gateway-access-log))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass virtual-gateway-backend-defaults common-lisp:nil
                       ((client-policy :initarg :|clientPolicy| :type
                         (common-lisp:or virtual-gateway-client-policy
                                         common-lisp:null)
                         :accessor
                         %virtual-gateway-backend-defaults-client-policy
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'virtual-gateway-backend-defaults
                    'make-virtual-gateway-backend-defaults))
 (common-lisp:defun make-virtual-gateway-backend-defaults
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key client-policy)
   (common-lisp:apply #'common-lisp:make-instance
                      'virtual-gateway-backend-defaults
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          virtual-gateway-backend-defaults))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          virtual-gateway-backend-defaults))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-policy))
      (common-lisp:list
       (common-lisp:cons "clientPolicy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          virtual-gateway-backend-defaults))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype virtual-gateway-certificate-authority-arns ()
   '(trivial-types:proper-list arn))
 (common-lisp:defun |make-virtual-gateway-certificate-authority-arns|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list arn))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass virtual-gateway-client-policy common-lisp:nil
                       ((tls :initarg :|tls| :type
                         (common-lisp:or virtual-gateway-client-policy-tls
                                         common-lisp:null)
                         :accessor %virtual-gateway-client-policy-tls :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'virtual-gateway-client-policy
                    'make-virtual-gateway-client-policy))
 (common-lisp:defun make-virtual-gateway-client-policy
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tls)
   (common-lisp:apply #'common-lisp:make-instance
                      'virtual-gateway-client-policy
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          virtual-gateway-client-policy))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          virtual-gateway-client-policy))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tls))
      (common-lisp:list
       (common-lisp:cons "tls"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          virtual-gateway-client-policy))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass virtual-gateway-client-policy-tls common-lisp:nil
                       ((validation :initarg :|validation| :type
                         (common-lisp:or virtual-gateway-tls-validation-context
                                         common-lisp:null)
                         :accessor
                         %virtual-gateway-client-policy-tls-validation
                         :initform
                         (common-lisp:error ":validation is required"))
                        (ports :initarg :|ports| :type
                         (common-lisp:or port-set common-lisp:null) :accessor
                         %virtual-gateway-client-policy-tls-ports :initform
                         common-lisp:nil)
                        (enforce :initarg :|enforce| :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         %virtual-gateway-client-policy-tls-enforce :initform
                         common-lisp:nil)
                        (certificate :initarg :|certificate| :type
                         (common-lisp:or virtual-gateway-client-tls-certificate
                                         common-lisp:null)
                         :accessor
                         %virtual-gateway-client-policy-tls-certificate
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'virtual-gateway-client-policy-tls
                    'make-virtual-gateway-client-policy-tls))
 (common-lisp:defun make-virtual-gateway-client-policy-tls
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key validation ports enforce certificate)
   (common-lisp:apply #'common-lisp:make-instance
                      'virtual-gateway-client-policy-tls
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          virtual-gateway-client-policy-tls))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          virtual-gateway-client-policy-tls))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'certificate))
      (common-lisp:list
       (common-lisp:cons "certificate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'enforce))
      (common-lisp:list
       (common-lisp:cons "enforce"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ports))
      (common-lisp:list
       (common-lisp:cons "ports"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'validation))
      (common-lisp:list
       (common-lisp:cons "validation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          virtual-gateway-client-policy-tls))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass virtual-gateway-client-tls-certificate common-lisp:nil
                       ((sds :initarg :|sds| :type
                         (common-lisp:or
                          virtual-gateway-listener-tls-sds-certificate
                          common-lisp:null)
                         :accessor %virtual-gateway-client-tls-certificate-sds
                         :initform common-lisp:nil)
                        (file :initarg :|file| :type
                         (common-lisp:or
                          virtual-gateway-listener-tls-file-certificate
                          common-lisp:null)
                         :accessor %virtual-gateway-client-tls-certificate-file
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'virtual-gateway-client-tls-certificate
                    'make-virtual-gateway-client-tls-certificate))
 (common-lisp:defun make-virtual-gateway-client-tls-certificate
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key sds file)
   (common-lisp:apply #'common-lisp:make-instance
                      'virtual-gateway-client-tls-certificate
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          virtual-gateway-client-tls-certificate))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          virtual-gateway-client-tls-certificate))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'file))
      (common-lisp:list
       (common-lisp:cons "file"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sds))
      (common-lisp:list
       (common-lisp:cons "sds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          virtual-gateway-client-tls-certificate))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass virtual-gateway-connection-pool common-lisp:nil
                       ((http2 :initarg :|http2| :type
                         (common-lisp:or virtual-gateway-http2connection-pool
                                         common-lisp:null)
                         :accessor %virtual-gateway-connection-pool-http2
                         :initform common-lisp:nil)
                        (http :initarg :|http| :type
                         (common-lisp:or virtual-gateway-http-connection-pool
                                         common-lisp:null)
                         :accessor %virtual-gateway-connection-pool-http
                         :initform common-lisp:nil)
                        (grpc :initarg :|grpc| :type
                         (common-lisp:or virtual-gateway-grpc-connection-pool
                                         common-lisp:null)
                         :accessor %virtual-gateway-connection-pool-grpc
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'virtual-gateway-connection-pool
                    'make-virtual-gateway-connection-pool))
 (common-lisp:defun make-virtual-gateway-connection-pool
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key http2 http grpc)
   (common-lisp:apply #'common-lisp:make-instance
                      'virtual-gateway-connection-pool
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          virtual-gateway-connection-pool))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          virtual-gateway-connection-pool))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'grpc))
      (common-lisp:list
       (common-lisp:cons "grpc"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'http))
      (common-lisp:list
       (common-lisp:cons "http"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'http2))
      (common-lisp:list
       (common-lisp:cons "http2"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          virtual-gateway-connection-pool))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass virtual-gateway-data common-lisp:nil
                       ((virtual-gateway-name :initarg :|virtualGatewayName|
                         :type (common-lisp:or resource-name common-lisp:null)
                         :accessor %virtual-gateway-data-virtual-gateway-name
                         :initform
                         (common-lisp:error ":virtualgatewayname is required"))
                        (status :initarg :|status| :type
                         (common-lisp:or virtual-gateway-status
                                         common-lisp:null)
                         :accessor %virtual-gateway-data-status :initform
                         (common-lisp:error ":status is required"))
                        (spec :initarg :|spec| :type
                         (common-lisp:or virtual-gateway-spec common-lisp:null)
                         :accessor %virtual-gateway-data-spec :initform
                         (common-lisp:error ":spec is required"))
                        (metadata :initarg :|metadata| :type
                         (common-lisp:or resource-metadata common-lisp:null)
                         :accessor %virtual-gateway-data-metadata :initform
                         (common-lisp:error ":metadata is required"))
                        (mesh-name :initarg :|meshName| :type
                         (common-lisp:or resource-name common-lisp:null)
                         :accessor %virtual-gateway-data-mesh-name :initform
                         (common-lisp:error ":meshname is required"))))
 (common-lisp:export
  (common-lisp:list 'virtual-gateway-data 'make-virtual-gateway-data))
 (common-lisp:defun make-virtual-gateway-data
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key virtual-gateway-name status spec metadata
                     mesh-name)
   (common-lisp:apply #'common-lisp:make-instance 'virtual-gateway-data
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input virtual-gateway-data))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input virtual-gateway-data))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'mesh-name))
      (common-lisp:list
       (common-lisp:cons "meshName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metadata))
      (common-lisp:list
       (common-lisp:cons "metadata"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'spec))
      (common-lisp:list
       (common-lisp:cons "spec"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'virtual-gateway-name))
      (common-lisp:list
       (common-lisp:cons "virtualGatewayName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input virtual-gateway-data))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass virtual-gateway-file-access-log common-lisp:nil
                       ((path :initarg :|path| :type
                         (common-lisp:or file-path common-lisp:null) :accessor
                         %virtual-gateway-file-access-log-path :initform
                         (common-lisp:error ":path is required"))
                        (format :initarg :|format| :type
                         (common-lisp:or logging-format common-lisp:null)
                         :accessor %virtual-gateway-file-access-log-format
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'virtual-gateway-file-access-log
                    'make-virtual-gateway-file-access-log))
 (common-lisp:defun make-virtual-gateway-file-access-log
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key path format)
   (common-lisp:apply #'common-lisp:make-instance
                      'virtual-gateway-file-access-log
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          virtual-gateway-file-access-log))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          virtual-gateway-file-access-log))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'format))
      (common-lisp:list
       (common-lisp:cons "format"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'path))
      (common-lisp:list
       (common-lisp:cons "path"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          virtual-gateway-file-access-log))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass virtual-gateway-grpc-connection-pool common-lisp:nil
                       ((max-requests :initarg :|maxRequests| :type
                         (common-lisp:or max-requests common-lisp:null)
                         :accessor
                         %virtual-gateway-grpc-connection-pool-max-requests
                         :initform
                         (common-lisp:error ":maxrequests is required"))))
 (common-lisp:export
  (common-lisp:list 'virtual-gateway-grpc-connection-pool
                    'make-virtual-gateway-grpc-connection-pool))
 (common-lisp:defun make-virtual-gateway-grpc-connection-pool
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key max-requests)
   (common-lisp:apply #'common-lisp:make-instance
                      'virtual-gateway-grpc-connection-pool
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          virtual-gateway-grpc-connection-pool))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          virtual-gateway-grpc-connection-pool))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-requests))
      (common-lisp:list
       (common-lisp:cons "maxRequests"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          virtual-gateway-grpc-connection-pool))
   common-lisp:nil))
(common-lisp:deftype virtual-gateway-health-check-interval-millis ()
  'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass virtual-gateway-health-check-policy common-lisp:nil
                       ((unhealthy-threshold :initarg :|unhealthyThreshold|
                         :type
                         (common-lisp:or virtual-gateway-health-check-threshold
                                         common-lisp:null)
                         :accessor
                         %virtual-gateway-health-check-policy-unhealthy-threshold
                         :initform
                         (common-lisp:error ":unhealthythreshold is required"))
                        (timeout-millis :initarg :|timeoutMillis| :type
                         (common-lisp:or
                          virtual-gateway-health-check-timeout-millis
                          common-lisp:null)
                         :accessor
                         %virtual-gateway-health-check-policy-timeout-millis
                         :initform
                         (common-lisp:error ":timeoutmillis is required"))
                        (protocol :initarg :|protocol| :type
                         (common-lisp:or virtual-gateway-port-protocol
                                         common-lisp:null)
                         :accessor
                         %virtual-gateway-health-check-policy-protocol
                         :initform (common-lisp:error ":protocol is required"))
                        (port :initarg :|port| :type
                         (common-lisp:or port-number common-lisp:null)
                         :accessor %virtual-gateway-health-check-policy-port
                         :initform common-lisp:nil)
                        (path :initarg :|path| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %virtual-gateway-health-check-policy-path :initform
                         common-lisp:nil)
                        (interval-millis :initarg :|intervalMillis| :type
                         (common-lisp:or
                          virtual-gateway-health-check-interval-millis
                          common-lisp:null)
                         :accessor
                         %virtual-gateway-health-check-policy-interval-millis
                         :initform
                         (common-lisp:error ":intervalmillis is required"))
                        (healthy-threshold :initarg :|healthyThreshold| :type
                         (common-lisp:or virtual-gateway-health-check-threshold
                                         common-lisp:null)
                         :accessor
                         %virtual-gateway-health-check-policy-healthy-threshold
                         :initform
                         (common-lisp:error ":healthythreshold is required"))))
 (common-lisp:export
  (common-lisp:list 'virtual-gateway-health-check-policy
                    'make-virtual-gateway-health-check-policy))
 (common-lisp:defun make-virtual-gateway-health-check-policy
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key unhealthy-threshold timeout-millis
                     protocol port path interval-millis healthy-threshold)
   (common-lisp:apply #'common-lisp:make-instance
                      'virtual-gateway-health-check-policy
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          virtual-gateway-health-check-policy))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          virtual-gateway-health-check-policy))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'healthy-threshold))
      (common-lisp:list
       (common-lisp:cons "healthyThreshold"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'interval-millis))
      (common-lisp:list
       (common-lisp:cons "intervalMillis"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'path))
      (common-lisp:list
       (common-lisp:cons "path"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'port))
      (common-lisp:list
       (common-lisp:cons "port"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'protocol))
      (common-lisp:list
       (common-lisp:cons "protocol"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'timeout-millis))
      (common-lisp:list
       (common-lisp:cons "timeoutMillis"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'unhealthy-threshold))
      (common-lisp:list
       (common-lisp:cons "unhealthyThreshold"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          virtual-gateway-health-check-policy))
   common-lisp:nil))
(common-lisp:deftype virtual-gateway-health-check-threshold ()
  'common-lisp:integer)
(common-lisp:deftype virtual-gateway-health-check-timeout-millis ()
  'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass virtual-gateway-http2connection-pool common-lisp:nil
                       ((max-requests :initarg :|maxRequests| :type
                         (common-lisp:or max-requests common-lisp:null)
                         :accessor
                         %virtual-gateway-http2connection-pool-max-requests
                         :initform
                         (common-lisp:error ":maxrequests is required"))))
 (common-lisp:export
  (common-lisp:list 'virtual-gateway-http2connection-pool
                    'make-virtual-gateway-http2connection-pool))
 (common-lisp:defun make-virtual-gateway-http2connection-pool
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key max-requests)
   (common-lisp:apply #'common-lisp:make-instance
                      'virtual-gateway-http2connection-pool
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          virtual-gateway-http2connection-pool))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          virtual-gateway-http2connection-pool))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-requests))
      (common-lisp:list
       (common-lisp:cons "maxRequests"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          virtual-gateway-http2connection-pool))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass virtual-gateway-http-connection-pool common-lisp:nil
                       ((max-pending-requests :initarg :|maxPendingRequests|
                         :type
                         (common-lisp:or max-pending-requests common-lisp:null)
                         :accessor
                         %virtual-gateway-http-connection-pool-max-pending-requests
                         :initform common-lisp:nil)
                        (max-connections :initarg :|maxConnections| :type
                         (common-lisp:or max-connections common-lisp:null)
                         :accessor
                         %virtual-gateway-http-connection-pool-max-connections
                         :initform
                         (common-lisp:error ":maxconnections is required"))))
 (common-lisp:export
  (common-lisp:list 'virtual-gateway-http-connection-pool
                    'make-virtual-gateway-http-connection-pool))
 (common-lisp:defun make-virtual-gateway-http-connection-pool
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key max-pending-requests max-connections)
   (common-lisp:apply #'common-lisp:make-instance
                      'virtual-gateway-http-connection-pool
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          virtual-gateway-http-connection-pool))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          virtual-gateway-http-connection-pool))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-connections))
      (common-lisp:list
       (common-lisp:cons "maxConnections"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'max-pending-requests))
      (common-lisp:list
       (common-lisp:cons "maxPendingRequests"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          virtual-gateway-http-connection-pool))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype virtual-gateway-list ()
   '(trivial-types:proper-list virtual-gateway-ref))
 (common-lisp:defun |make-virtual-gateway-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list virtual-gateway-ref))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass virtual-gateway-listener common-lisp:nil
                       ((tls :initarg :|tls| :type
                         (common-lisp:or virtual-gateway-listener-tls
                                         common-lisp:null)
                         :accessor %virtual-gateway-listener-tls :initform
                         common-lisp:nil)
                        (port-mapping :initarg :|portMapping| :type
                         (common-lisp:or virtual-gateway-port-mapping
                                         common-lisp:null)
                         :accessor %virtual-gateway-listener-port-mapping
                         :initform
                         (common-lisp:error ":portmapping is required"))
                        (health-check :initarg :|healthCheck| :type
                         (common-lisp:or virtual-gateway-health-check-policy
                                         common-lisp:null)
                         :accessor %virtual-gateway-listener-health-check
                         :initform common-lisp:nil)
                        (connection-pool :initarg :|connectionPool| :type
                         (common-lisp:or virtual-gateway-connection-pool
                                         common-lisp:null)
                         :accessor %virtual-gateway-listener-connection-pool
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'virtual-gateway-listener 'make-virtual-gateway-listener))
 (common-lisp:defun make-virtual-gateway-listener
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tls port-mapping health-check
                     connection-pool)
   (common-lisp:apply #'common-lisp:make-instance 'virtual-gateway-listener
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          virtual-gateway-listener))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          virtual-gateway-listener))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'connection-pool))
      (common-lisp:list
       (common-lisp:cons "connectionPool"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'health-check))
      (common-lisp:list
       (common-lisp:cons "healthCheck"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'port-mapping))
      (common-lisp:list
       (common-lisp:cons "portMapping"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tls))
      (common-lisp:list
       (common-lisp:cons "tls"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          virtual-gateway-listener))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass virtual-gateway-listener-tls common-lisp:nil
                       ((validation :initarg :|validation| :type
                         (common-lisp:or
                          virtual-gateway-listener-tls-validation-context
                          common-lisp:null)
                         :accessor %virtual-gateway-listener-tls-validation
                         :initform common-lisp:nil)
                        (mode :initarg :|mode| :type
                         (common-lisp:or virtual-gateway-listener-tls-mode
                                         common-lisp:null)
                         :accessor %virtual-gateway-listener-tls-mode :initform
                         (common-lisp:error ":mode is required"))
                        (certificate :initarg :|certificate| :type
                         (common-lisp:or
                          virtual-gateway-listener-tls-certificate
                          common-lisp:null)
                         :accessor %virtual-gateway-listener-tls-certificate
                         :initform
                         (common-lisp:error ":certificate is required"))))
 (common-lisp:export
  (common-lisp:list 'virtual-gateway-listener-tls
                    'make-virtual-gateway-listener-tls))
 (common-lisp:defun make-virtual-gateway-listener-tls
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key validation mode certificate)
   (common-lisp:apply #'common-lisp:make-instance 'virtual-gateway-listener-tls
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          virtual-gateway-listener-tls))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          virtual-gateway-listener-tls))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'certificate))
      (common-lisp:list
       (common-lisp:cons "certificate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'mode))
      (common-lisp:list
       (common-lisp:cons "mode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'validation))
      (common-lisp:list
       (common-lisp:cons "validation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          virtual-gateway-listener-tls))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass virtual-gateway-listener-tls-acm-certificate
                       common-lisp:nil
                       ((certificate-arn :initarg :|certificateArn| :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %virtual-gateway-listener-tls-acm-certificate-certificate-arn
                         :initform
                         (common-lisp:error ":certificatearn is required"))))
 (common-lisp:export
  (common-lisp:list 'virtual-gateway-listener-tls-acm-certificate
                    'make-virtual-gateway-listener-tls-acm-certificate))
 (common-lisp:defun make-virtual-gateway-listener-tls-acm-certificate
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key certificate-arn)
   (common-lisp:apply #'common-lisp:make-instance
                      'virtual-gateway-listener-tls-acm-certificate
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          virtual-gateway-listener-tls-acm-certificate))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          virtual-gateway-listener-tls-acm-certificate))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'certificate-arn))
      (common-lisp:list
       (common-lisp:cons "certificateArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          virtual-gateway-listener-tls-acm-certificate))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass virtual-gateway-listener-tls-certificate common-lisp:nil
                       ((sds :initarg :|sds| :type
                         (common-lisp:or
                          virtual-gateway-listener-tls-sds-certificate
                          common-lisp:null)
                         :accessor
                         %virtual-gateway-listener-tls-certificate-sds
                         :initform common-lisp:nil)
                        (file :initarg :|file| :type
                         (common-lisp:or
                          virtual-gateway-listener-tls-file-certificate
                          common-lisp:null)
                         :accessor
                         %virtual-gateway-listener-tls-certificate-file
                         :initform common-lisp:nil)
                        (acm :initarg :|acm| :type
                         (common-lisp:or
                          virtual-gateway-listener-tls-acm-certificate
                          common-lisp:null)
                         :accessor
                         %virtual-gateway-listener-tls-certificate-acm
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'virtual-gateway-listener-tls-certificate
                    'make-virtual-gateway-listener-tls-certificate))
 (common-lisp:defun make-virtual-gateway-listener-tls-certificate
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key sds file acm)
   (common-lisp:apply #'common-lisp:make-instance
                      'virtual-gateway-listener-tls-certificate
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          virtual-gateway-listener-tls-certificate))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          virtual-gateway-listener-tls-certificate))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'acm))
      (common-lisp:list
       (common-lisp:cons "acm"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'file))
      (common-lisp:list
       (common-lisp:cons "file"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sds))
      (common-lisp:list
       (common-lisp:cons "sds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          virtual-gateway-listener-tls-certificate))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass virtual-gateway-listener-tls-file-certificate
                       common-lisp:nil
                       ((private-key :initarg :|privateKey| :type
                         (common-lisp:or file-path common-lisp:null) :accessor
                         %virtual-gateway-listener-tls-file-certificate-private-key
                         :initform
                         (common-lisp:error ":privatekey is required"))
                        (certificate-chain :initarg :|certificateChain| :type
                         (common-lisp:or file-path common-lisp:null) :accessor
                         %virtual-gateway-listener-tls-file-certificate-certificate-chain
                         :initform
                         (common-lisp:error ":certificatechain is required"))))
 (common-lisp:export
  (common-lisp:list 'virtual-gateway-listener-tls-file-certificate
                    'make-virtual-gateway-listener-tls-file-certificate))
 (common-lisp:defun make-virtual-gateway-listener-tls-file-certificate
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key private-key certificate-chain)
   (common-lisp:apply #'common-lisp:make-instance
                      'virtual-gateway-listener-tls-file-certificate
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          virtual-gateway-listener-tls-file-certificate))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          virtual-gateway-listener-tls-file-certificate))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'certificate-chain))
      (common-lisp:list
       (common-lisp:cons "certificateChain"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'private-key))
      (common-lisp:list
       (common-lisp:cons "privateKey"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          virtual-gateway-listener-tls-file-certificate))
   common-lisp:nil))
(common-lisp:deftype virtual-gateway-listener-tls-mode () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass virtual-gateway-listener-tls-sds-certificate
                       common-lisp:nil
                       ((secret-name :initarg :|secretName| :type
                         (common-lisp:or virtual-gateway-sds-secret-name
                                         common-lisp:null)
                         :accessor
                         %virtual-gateway-listener-tls-sds-certificate-secret-name
                         :initform
                         (common-lisp:error ":secretname is required"))))
 (common-lisp:export
  (common-lisp:list 'virtual-gateway-listener-tls-sds-certificate
                    'make-virtual-gateway-listener-tls-sds-certificate))
 (common-lisp:defun make-virtual-gateway-listener-tls-sds-certificate
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key secret-name)
   (common-lisp:apply #'common-lisp:make-instance
                      'virtual-gateway-listener-tls-sds-certificate
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          virtual-gateway-listener-tls-sds-certificate))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          virtual-gateway-listener-tls-sds-certificate))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'secret-name))
      (common-lisp:list
       (common-lisp:cons "secretName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          virtual-gateway-listener-tls-sds-certificate))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass virtual-gateway-listener-tls-validation-context
                       common-lisp:nil
                       ((trust :initarg :|trust| :type
                         (common-lisp:or
                          virtual-gateway-listener-tls-validation-context-trust
                          common-lisp:null)
                         :accessor
                         %virtual-gateway-listener-tls-validation-context-trust
                         :initform (common-lisp:error ":trust is required"))
                        (subject-alternative-names :initarg
                         :|subjectAlternativeNames| :type
                         (common-lisp:or subject-alternative-names
                                         common-lisp:null)
                         :accessor
                         %virtual-gateway-listener-tls-validation-context-subject-alternative-names
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'virtual-gateway-listener-tls-validation-context
                    'make-virtual-gateway-listener-tls-validation-context))
 (common-lisp:defun make-virtual-gateway-listener-tls-validation-context
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key trust subject-alternative-names)
   (common-lisp:apply #'common-lisp:make-instance
                      'virtual-gateway-listener-tls-validation-context
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          virtual-gateway-listener-tls-validation-context))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          virtual-gateway-listener-tls-validation-context))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'subject-alternative-names))
      (common-lisp:list
       (common-lisp:cons "subjectAlternativeNames"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'trust))
      (common-lisp:list
       (common-lisp:cons "trust"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          virtual-gateway-listener-tls-validation-context))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass virtual-gateway-listener-tls-validation-context-trust
                       common-lisp:nil
                       ((sds :initarg :|sds| :type
                         (common-lisp:or
                          virtual-gateway-tls-validation-context-sds-trust
                          common-lisp:null)
                         :accessor
                         %virtual-gateway-listener-tls-validation-context-trust-sds
                         :initform common-lisp:nil)
                        (file :initarg :|file| :type
                         (common-lisp:or
                          virtual-gateway-tls-validation-context-file-trust
                          common-lisp:null)
                         :accessor
                         %virtual-gateway-listener-tls-validation-context-trust-file
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'virtual-gateway-listener-tls-validation-context-trust
                    'make-virtual-gateway-listener-tls-validation-context-trust))
 (common-lisp:defun make-virtual-gateway-listener-tls-validation-context-trust
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key sds file)
   (common-lisp:apply #'common-lisp:make-instance
                      'virtual-gateway-listener-tls-validation-context-trust
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          virtual-gateway-listener-tls-validation-context-trust))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          virtual-gateway-listener-tls-validation-context-trust))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'file))
      (common-lisp:list
       (common-lisp:cons "file"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sds))
      (common-lisp:list
       (common-lisp:cons "sds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          virtual-gateway-listener-tls-validation-context-trust))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype virtual-gateway-listeners ()
   '(trivial-types:proper-list virtual-gateway-listener))
 (common-lisp:defun |make-virtual-gateway-listeners|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            virtual-gateway-listener))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass virtual-gateway-logging common-lisp:nil
                       ((access-log :initarg :|accessLog| :type
                         (common-lisp:or virtual-gateway-access-log
                                         common-lisp:null)
                         :accessor %virtual-gateway-logging-access-log
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'virtual-gateway-logging 'make-virtual-gateway-logging))
 (common-lisp:defun make-virtual-gateway-logging
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key access-log)
   (common-lisp:apply #'common-lisp:make-instance 'virtual-gateway-logging
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          virtual-gateway-logging))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          virtual-gateway-logging))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'access-log))
      (common-lisp:list
       (common-lisp:cons "accessLog"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          virtual-gateway-logging))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass virtual-gateway-port-mapping common-lisp:nil
                       ((protocol :initarg :|protocol| :type
                         (common-lisp:or virtual-gateway-port-protocol
                                         common-lisp:null)
                         :accessor %virtual-gateway-port-mapping-protocol
                         :initform (common-lisp:error ":protocol is required"))
                        (port :initarg :|port| :type
                         (common-lisp:or port-number common-lisp:null)
                         :accessor %virtual-gateway-port-mapping-port :initform
                         (common-lisp:error ":port is required"))))
 (common-lisp:export
  (common-lisp:list 'virtual-gateway-port-mapping
                    'make-virtual-gateway-port-mapping))
 (common-lisp:defun make-virtual-gateway-port-mapping
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key protocol port)
   (common-lisp:apply #'common-lisp:make-instance 'virtual-gateway-port-mapping
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          virtual-gateway-port-mapping))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          virtual-gateway-port-mapping))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'port))
      (common-lisp:list
       (common-lisp:cons "port"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'protocol))
      (common-lisp:list
       (common-lisp:cons "protocol"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          virtual-gateway-port-mapping))
   common-lisp:nil))
(common-lisp:deftype virtual-gateway-port-protocol () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass virtual-gateway-ref common-lisp:nil
                       ((virtual-gateway-name :initarg :|virtualGatewayName|
                         :type (common-lisp:or resource-name common-lisp:null)
                         :accessor %virtual-gateway-ref-virtual-gateway-name
                         :initform
                         (common-lisp:error ":virtualgatewayname is required"))
                        (version :initarg :|version| :type
                         (common-lisp:or long common-lisp:null) :accessor
                         %virtual-gateway-ref-version :initform
                         (common-lisp:error ":version is required"))
                        (resource-owner :initarg :|resourceOwner| :type
                         (common-lisp:or account-id common-lisp:null) :accessor
                         %virtual-gateway-ref-resource-owner :initform
                         (common-lisp:error ":resourceowner is required"))
                        (mesh-owner :initarg :|meshOwner| :type
                         (common-lisp:or account-id common-lisp:null) :accessor
                         %virtual-gateway-ref-mesh-owner :initform
                         (common-lisp:error ":meshowner is required"))
                        (mesh-name :initarg :|meshName| :type
                         (common-lisp:or resource-name common-lisp:null)
                         :accessor %virtual-gateway-ref-mesh-name :initform
                         (common-lisp:error ":meshname is required"))
                        (last-updated-at :initarg :|lastUpdatedAt| :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %virtual-gateway-ref-last-updated-at :initform
                         (common-lisp:error ":lastupdatedat is required"))
                        (created-at :initarg :|createdAt| :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %virtual-gateway-ref-created-at :initform
                         (common-lisp:error ":createdat is required"))
                        (arn :initarg :|arn| :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %virtual-gateway-ref-arn :initform
                         (common-lisp:error ":arn is required"))))
 (common-lisp:export
  (common-lisp:list 'virtual-gateway-ref 'make-virtual-gateway-ref))
 (common-lisp:defun make-virtual-gateway-ref
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key virtual-gateway-name version
                     resource-owner mesh-owner mesh-name last-updated-at
                     created-at arn)
   (common-lisp:apply #'common-lisp:make-instance 'virtual-gateway-ref
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input virtual-gateway-ref))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input virtual-gateway-ref))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "createdAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-updated-at))
      (common-lisp:list
       (common-lisp:cons "lastUpdatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'mesh-name))
      (common-lisp:list
       (common-lisp:cons "meshName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'mesh-owner))
      (common-lisp:list
       (common-lisp:cons "meshOwner"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-owner))
      (common-lisp:list
       (common-lisp:cons "resourceOwner"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version))
      (common-lisp:list
       (common-lisp:cons "version"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'virtual-gateway-name))
      (common-lisp:list
       (common-lisp:cons "virtualGatewayName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input virtual-gateway-ref))
   common-lisp:nil))
(common-lisp:deftype virtual-gateway-sds-secret-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass virtual-gateway-spec common-lisp:nil
                       ((logging :initarg :|logging| :type
                         (common-lisp:or virtual-gateway-logging
                                         common-lisp:null)
                         :accessor %virtual-gateway-spec-logging :initform
                         common-lisp:nil)
                        (listeners :initarg :|listeners| :type
                         (common-lisp:or virtual-gateway-listeners
                                         common-lisp:null)
                         :accessor %virtual-gateway-spec-listeners :initform
                         (common-lisp:error ":listeners is required"))
                        (backend-defaults :initarg :|backendDefaults| :type
                         (common-lisp:or virtual-gateway-backend-defaults
                                         common-lisp:null)
                         :accessor %virtual-gateway-spec-backend-defaults
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'virtual-gateway-spec 'make-virtual-gateway-spec))
 (common-lisp:defun make-virtual-gateway-spec
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key logging listeners backend-defaults)
   (common-lisp:apply #'common-lisp:make-instance 'virtual-gateway-spec
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input virtual-gateway-spec))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input virtual-gateway-spec))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'backend-defaults))
      (common-lisp:list
       (common-lisp:cons "backendDefaults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'listeners))
      (common-lisp:list
       (common-lisp:cons "listeners"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'logging))
      (common-lisp:list
       (common-lisp:cons "logging"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input virtual-gateway-spec))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass virtual-gateway-status common-lisp:nil
                       ((status :initarg :|status| :type
                         (common-lisp:or virtual-gateway-status-code
                                         common-lisp:null)
                         :accessor %virtual-gateway-status-status :initform
                         (common-lisp:error ":status is required"))))
 (common-lisp:export
  (common-lisp:list 'virtual-gateway-status 'make-virtual-gateway-status))
 (common-lisp:defun make-virtual-gateway-status
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key status)
   (common-lisp:apply #'common-lisp:make-instance 'virtual-gateway-status
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          virtual-gateway-status))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          virtual-gateway-status))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          virtual-gateway-status))
   common-lisp:nil))
(common-lisp:deftype virtual-gateway-status-code () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass virtual-gateway-tls-validation-context common-lisp:nil
                       ((trust :initarg :|trust| :type
                         (common-lisp:or
                          virtual-gateway-tls-validation-context-trust
                          common-lisp:null)
                         :accessor
                         %virtual-gateway-tls-validation-context-trust
                         :initform (common-lisp:error ":trust is required"))
                        (subject-alternative-names :initarg
                         :|subjectAlternativeNames| :type
                         (common-lisp:or subject-alternative-names
                                         common-lisp:null)
                         :accessor
                         %virtual-gateway-tls-validation-context-subject-alternative-names
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'virtual-gateway-tls-validation-context
                    'make-virtual-gateway-tls-validation-context))
 (common-lisp:defun make-virtual-gateway-tls-validation-context
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key trust subject-alternative-names)
   (common-lisp:apply #'common-lisp:make-instance
                      'virtual-gateway-tls-validation-context
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          virtual-gateway-tls-validation-context))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          virtual-gateway-tls-validation-context))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'subject-alternative-names))
      (common-lisp:list
       (common-lisp:cons "subjectAlternativeNames"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'trust))
      (common-lisp:list
       (common-lisp:cons "trust"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          virtual-gateway-tls-validation-context))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass virtual-gateway-tls-validation-context-acm-trust
                       common-lisp:nil
                       ((certificate-authority-arns :initarg
                         :|certificateAuthorityArns| :type
                         (common-lisp:or
                          virtual-gateway-certificate-authority-arns
                          common-lisp:null)
                         :accessor
                         %virtual-gateway-tls-validation-context-acm-trust-certificate-authority-arns
                         :initform
                         (common-lisp:error
                          ":certificateauthorityarns is required"))))
 (common-lisp:export
  (common-lisp:list 'virtual-gateway-tls-validation-context-acm-trust
                    'make-virtual-gateway-tls-validation-context-acm-trust))
 (common-lisp:defun make-virtual-gateway-tls-validation-context-acm-trust
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key certificate-authority-arns)
   (common-lisp:apply #'common-lisp:make-instance
                      'virtual-gateway-tls-validation-context-acm-trust
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          virtual-gateway-tls-validation-context-acm-trust))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          virtual-gateway-tls-validation-context-acm-trust))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'certificate-authority-arns))
      (common-lisp:list
       (common-lisp:cons "certificateAuthorityArns"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          virtual-gateway-tls-validation-context-acm-trust))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass virtual-gateway-tls-validation-context-file-trust
                       common-lisp:nil
                       ((certificate-chain :initarg :|certificateChain| :type
                         (common-lisp:or file-path common-lisp:null) :accessor
                         %virtual-gateway-tls-validation-context-file-trust-certificate-chain
                         :initform
                         (common-lisp:error ":certificatechain is required"))))
 (common-lisp:export
  (common-lisp:list 'virtual-gateway-tls-validation-context-file-trust
                    'make-virtual-gateway-tls-validation-context-file-trust))
 (common-lisp:defun make-virtual-gateway-tls-validation-context-file-trust
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key certificate-chain)
   (common-lisp:apply #'common-lisp:make-instance
                      'virtual-gateway-tls-validation-context-file-trust
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          virtual-gateway-tls-validation-context-file-trust))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          virtual-gateway-tls-validation-context-file-trust))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'certificate-chain))
      (common-lisp:list
       (common-lisp:cons "certificateChain"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          virtual-gateway-tls-validation-context-file-trust))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass virtual-gateway-tls-validation-context-sds-trust
                       common-lisp:nil
                       ((secret-name :initarg :|secretName| :type
                         (common-lisp:or virtual-gateway-sds-secret-name
                                         common-lisp:null)
                         :accessor
                         %virtual-gateway-tls-validation-context-sds-trust-secret-name
                         :initform
                         (common-lisp:error ":secretname is required"))))
 (common-lisp:export
  (common-lisp:list 'virtual-gateway-tls-validation-context-sds-trust
                    'make-virtual-gateway-tls-validation-context-sds-trust))
 (common-lisp:defun make-virtual-gateway-tls-validation-context-sds-trust
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key secret-name)
   (common-lisp:apply #'common-lisp:make-instance
                      'virtual-gateway-tls-validation-context-sds-trust
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          virtual-gateway-tls-validation-context-sds-trust))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          virtual-gateway-tls-validation-context-sds-trust))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'secret-name))
      (common-lisp:list
       (common-lisp:cons "secretName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          virtual-gateway-tls-validation-context-sds-trust))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass virtual-gateway-tls-validation-context-trust
                       common-lisp:nil
                       ((sds :initarg :|sds| :type
                         (common-lisp:or
                          virtual-gateway-tls-validation-context-sds-trust
                          common-lisp:null)
                         :accessor
                         %virtual-gateway-tls-validation-context-trust-sds
                         :initform common-lisp:nil)
                        (file :initarg :|file| :type
                         (common-lisp:or
                          virtual-gateway-tls-validation-context-file-trust
                          common-lisp:null)
                         :accessor
                         %virtual-gateway-tls-validation-context-trust-file
                         :initform common-lisp:nil)
                        (acm :initarg :|acm| :type
                         (common-lisp:or
                          virtual-gateway-tls-validation-context-acm-trust
                          common-lisp:null)
                         :accessor
                         %virtual-gateway-tls-validation-context-trust-acm
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'virtual-gateway-tls-validation-context-trust
                    'make-virtual-gateway-tls-validation-context-trust))
 (common-lisp:defun make-virtual-gateway-tls-validation-context-trust
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key sds file acm)
   (common-lisp:apply #'common-lisp:make-instance
                      'virtual-gateway-tls-validation-context-trust
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          virtual-gateway-tls-validation-context-trust))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          virtual-gateway-tls-validation-context-trust))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'acm))
      (common-lisp:list
       (common-lisp:cons "acm"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'file))
      (common-lisp:list
       (common-lisp:cons "file"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sds))
      (common-lisp:list
       (common-lisp:cons "sds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          virtual-gateway-tls-validation-context-trust))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass virtual-node-connection-pool common-lisp:nil
                       ((tcp :initarg :|tcp| :type
                         (common-lisp:or virtual-node-tcp-connection-pool
                                         common-lisp:null)
                         :accessor %virtual-node-connection-pool-tcp :initform
                         common-lisp:nil)
                        (http2 :initarg :|http2| :type
                         (common-lisp:or virtual-node-http2connection-pool
                                         common-lisp:null)
                         :accessor %virtual-node-connection-pool-http2
                         :initform common-lisp:nil)
                        (http :initarg :|http| :type
                         (common-lisp:or virtual-node-http-connection-pool
                                         common-lisp:null)
                         :accessor %virtual-node-connection-pool-http :initform
                         common-lisp:nil)
                        (grpc :initarg :|grpc| :type
                         (common-lisp:or virtual-node-grpc-connection-pool
                                         common-lisp:null)
                         :accessor %virtual-node-connection-pool-grpc :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'virtual-node-connection-pool
                    'make-virtual-node-connection-pool))
 (common-lisp:defun make-virtual-node-connection-pool
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tcp http2 http grpc)
   (common-lisp:apply #'common-lisp:make-instance 'virtual-node-connection-pool
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          virtual-node-connection-pool))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          virtual-node-connection-pool))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'grpc))
      (common-lisp:list
       (common-lisp:cons "grpc"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'http))
      (common-lisp:list
       (common-lisp:cons "http"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'http2))
      (common-lisp:list
       (common-lisp:cons "http2"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tcp))
      (common-lisp:list
       (common-lisp:cons "tcp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          virtual-node-connection-pool))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass virtual-node-data common-lisp:nil
                       ((virtual-node-name :initarg :|virtualNodeName| :type
                         (common-lisp:or resource-name common-lisp:null)
                         :accessor %virtual-node-data-virtual-node-name
                         :initform
                         (common-lisp:error ":virtualnodename is required"))
                        (status :initarg :|status| :type
                         (common-lisp:or virtual-node-status common-lisp:null)
                         :accessor %virtual-node-data-status :initform
                         (common-lisp:error ":status is required"))
                        (spec :initarg :|spec| :type
                         (common-lisp:or virtual-node-spec common-lisp:null)
                         :accessor %virtual-node-data-spec :initform
                         (common-lisp:error ":spec is required"))
                        (metadata :initarg :|metadata| :type
                         (common-lisp:or resource-metadata common-lisp:null)
                         :accessor %virtual-node-data-metadata :initform
                         (common-lisp:error ":metadata is required"))
                        (mesh-name :initarg :|meshName| :type
                         (common-lisp:or resource-name common-lisp:null)
                         :accessor %virtual-node-data-mesh-name :initform
                         (common-lisp:error ":meshname is required"))))
 (common-lisp:export
  (common-lisp:list 'virtual-node-data 'make-virtual-node-data))
 (common-lisp:defun make-virtual-node-data
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key virtual-node-name status spec metadata
                     mesh-name)
   (common-lisp:apply #'common-lisp:make-instance 'virtual-node-data
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input virtual-node-data))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input virtual-node-data))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'mesh-name))
      (common-lisp:list
       (common-lisp:cons "meshName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metadata))
      (common-lisp:list
       (common-lisp:cons "metadata"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'spec))
      (common-lisp:list
       (common-lisp:cons "spec"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'virtual-node-name))
      (common-lisp:list
       (common-lisp:cons "virtualNodeName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input virtual-node-data))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass virtual-node-grpc-connection-pool common-lisp:nil
                       ((max-requests :initarg :|maxRequests| :type
                         (common-lisp:or max-requests common-lisp:null)
                         :accessor
                         %virtual-node-grpc-connection-pool-max-requests
                         :initform
                         (common-lisp:error ":maxrequests is required"))))
 (common-lisp:export
  (common-lisp:list 'virtual-node-grpc-connection-pool
                    'make-virtual-node-grpc-connection-pool))
 (common-lisp:defun make-virtual-node-grpc-connection-pool
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key max-requests)
   (common-lisp:apply #'common-lisp:make-instance
                      'virtual-node-grpc-connection-pool
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          virtual-node-grpc-connection-pool))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          virtual-node-grpc-connection-pool))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-requests))
      (common-lisp:list
       (common-lisp:cons "maxRequests"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          virtual-node-grpc-connection-pool))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass virtual-node-http2connection-pool common-lisp:nil
                       ((max-requests :initarg :|maxRequests| :type
                         (common-lisp:or max-requests common-lisp:null)
                         :accessor
                         %virtual-node-http2connection-pool-max-requests
                         :initform
                         (common-lisp:error ":maxrequests is required"))))
 (common-lisp:export
  (common-lisp:list 'virtual-node-http2connection-pool
                    'make-virtual-node-http2connection-pool))
 (common-lisp:defun make-virtual-node-http2connection-pool
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key max-requests)
   (common-lisp:apply #'common-lisp:make-instance
                      'virtual-node-http2connection-pool
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          virtual-node-http2connection-pool))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          virtual-node-http2connection-pool))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-requests))
      (common-lisp:list
       (common-lisp:cons "maxRequests"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          virtual-node-http2connection-pool))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass virtual-node-http-connection-pool common-lisp:nil
                       ((max-pending-requests :initarg :|maxPendingRequests|
                         :type
                         (common-lisp:or max-pending-requests common-lisp:null)
                         :accessor
                         %virtual-node-http-connection-pool-max-pending-requests
                         :initform common-lisp:nil)
                        (max-connections :initarg :|maxConnections| :type
                         (common-lisp:or max-connections common-lisp:null)
                         :accessor
                         %virtual-node-http-connection-pool-max-connections
                         :initform
                         (common-lisp:error ":maxconnections is required"))))
 (common-lisp:export
  (common-lisp:list 'virtual-node-http-connection-pool
                    'make-virtual-node-http-connection-pool))
 (common-lisp:defun make-virtual-node-http-connection-pool
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key max-pending-requests max-connections)
   (common-lisp:apply #'common-lisp:make-instance
                      'virtual-node-http-connection-pool
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          virtual-node-http-connection-pool))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          virtual-node-http-connection-pool))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-connections))
      (common-lisp:list
       (common-lisp:cons "maxConnections"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'max-pending-requests))
      (common-lisp:list
       (common-lisp:cons "maxPendingRequests"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          virtual-node-http-connection-pool))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype virtual-node-list ()
   '(trivial-types:proper-list virtual-node-ref))
 (common-lisp:defun |make-virtual-node-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list virtual-node-ref))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass virtual-node-ref common-lisp:nil
                       ((virtual-node-name :initarg :|virtualNodeName| :type
                         (common-lisp:or resource-name common-lisp:null)
                         :accessor %virtual-node-ref-virtual-node-name
                         :initform
                         (common-lisp:error ":virtualnodename is required"))
                        (version :initarg :|version| :type
                         (common-lisp:or long common-lisp:null) :accessor
                         %virtual-node-ref-version :initform
                         (common-lisp:error ":version is required"))
                        (resource-owner :initarg :|resourceOwner| :type
                         (common-lisp:or account-id common-lisp:null) :accessor
                         %virtual-node-ref-resource-owner :initform
                         (common-lisp:error ":resourceowner is required"))
                        (mesh-owner :initarg :|meshOwner| :type
                         (common-lisp:or account-id common-lisp:null) :accessor
                         %virtual-node-ref-mesh-owner :initform
                         (common-lisp:error ":meshowner is required"))
                        (mesh-name :initarg :|meshName| :type
                         (common-lisp:or resource-name common-lisp:null)
                         :accessor %virtual-node-ref-mesh-name :initform
                         (common-lisp:error ":meshname is required"))
                        (last-updated-at :initarg :|lastUpdatedAt| :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %virtual-node-ref-last-updated-at :initform
                         (common-lisp:error ":lastupdatedat is required"))
                        (created-at :initarg :|createdAt| :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %virtual-node-ref-created-at :initform
                         (common-lisp:error ":createdat is required"))
                        (arn :initarg :|arn| :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %virtual-node-ref-arn :initform
                         (common-lisp:error ":arn is required"))))
 (common-lisp:export
  (common-lisp:list 'virtual-node-ref 'make-virtual-node-ref))
 (common-lisp:defun make-virtual-node-ref
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key virtual-node-name version resource-owner
                     mesh-owner mesh-name last-updated-at created-at arn)
   (common-lisp:apply #'common-lisp:make-instance 'virtual-node-ref
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input virtual-node-ref))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input virtual-node-ref))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "createdAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-updated-at))
      (common-lisp:list
       (common-lisp:cons "lastUpdatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'mesh-name))
      (common-lisp:list
       (common-lisp:cons "meshName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'mesh-owner))
      (common-lisp:list
       (common-lisp:cons "meshOwner"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-owner))
      (common-lisp:list
       (common-lisp:cons "resourceOwner"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version))
      (common-lisp:list
       (common-lisp:cons "version"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'virtual-node-name))
      (common-lisp:list
       (common-lisp:cons "virtualNodeName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input virtual-node-ref))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass virtual-node-service-provider common-lisp:nil
                       ((virtual-node-name :initarg :|virtualNodeName| :type
                         (common-lisp:or resource-name common-lisp:null)
                         :accessor
                         %virtual-node-service-provider-virtual-node-name
                         :initform
                         (common-lisp:error ":virtualnodename is required"))))
 (common-lisp:export
  (common-lisp:list 'virtual-node-service-provider
                    'make-virtual-node-service-provider))
 (common-lisp:defun make-virtual-node-service-provider
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key virtual-node-name)
   (common-lisp:apply #'common-lisp:make-instance
                      'virtual-node-service-provider
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          virtual-node-service-provider))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          virtual-node-service-provider))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'virtual-node-name))
      (common-lisp:list
       (common-lisp:cons "virtualNodeName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          virtual-node-service-provider))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass virtual-node-spec common-lisp:nil
                       ((service-discovery :initarg :|serviceDiscovery| :type
                         (common-lisp:or service-discovery common-lisp:null)
                         :accessor %virtual-node-spec-service-discovery
                         :initform common-lisp:nil)
                        (logging :initarg :|logging| :type
                         (common-lisp:or logging common-lisp:null) :accessor
                         %virtual-node-spec-logging :initform common-lisp:nil)
                        (listeners :initarg :|listeners| :type
                         (common-lisp:or listeners common-lisp:null) :accessor
                         %virtual-node-spec-listeners :initform
                         common-lisp:nil)
                        (backends :initarg :|backends| :type
                         (common-lisp:or backends common-lisp:null) :accessor
                         %virtual-node-spec-backends :initform common-lisp:nil)
                        (backend-defaults :initarg :|backendDefaults| :type
                         (common-lisp:or backend-defaults common-lisp:null)
                         :accessor %virtual-node-spec-backend-defaults
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'virtual-node-spec 'make-virtual-node-spec))
 (common-lisp:defun make-virtual-node-spec
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key service-discovery logging listeners
                     backends backend-defaults)
   (common-lisp:apply #'common-lisp:make-instance 'virtual-node-spec
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input virtual-node-spec))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input virtual-node-spec))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'backend-defaults))
      (common-lisp:list
       (common-lisp:cons "backendDefaults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'backends))
      (common-lisp:list
       (common-lisp:cons "backends"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'listeners))
      (common-lisp:list
       (common-lisp:cons "listeners"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'logging))
      (common-lisp:list
       (common-lisp:cons "logging"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service-discovery))
      (common-lisp:list
       (common-lisp:cons "serviceDiscovery"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input virtual-node-spec))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass virtual-node-status common-lisp:nil
                       ((status :initarg :|status| :type
                         (common-lisp:or virtual-node-status-code
                                         common-lisp:null)
                         :accessor %virtual-node-status-status :initform
                         (common-lisp:error ":status is required"))))
 (common-lisp:export
  (common-lisp:list 'virtual-node-status 'make-virtual-node-status))
 (common-lisp:defun make-virtual-node-status
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key status)
   (common-lisp:apply #'common-lisp:make-instance 'virtual-node-status
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input virtual-node-status))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input virtual-node-status))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input virtual-node-status))
   common-lisp:nil))
(common-lisp:deftype virtual-node-status-code () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass virtual-node-tcp-connection-pool common-lisp:nil
                       ((max-connections :initarg :|maxConnections| :type
                         (common-lisp:or max-connections common-lisp:null)
                         :accessor
                         %virtual-node-tcp-connection-pool-max-connections
                         :initform
                         (common-lisp:error ":maxconnections is required"))))
 (common-lisp:export
  (common-lisp:list 'virtual-node-tcp-connection-pool
                    'make-virtual-node-tcp-connection-pool))
 (common-lisp:defun make-virtual-node-tcp-connection-pool
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key max-connections)
   (common-lisp:apply #'common-lisp:make-instance
                      'virtual-node-tcp-connection-pool
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          virtual-node-tcp-connection-pool))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          virtual-node-tcp-connection-pool))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-connections))
      (common-lisp:list
       (common-lisp:cons "maxConnections"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          virtual-node-tcp-connection-pool))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass virtual-router-data common-lisp:nil
                       ((virtual-router-name :initarg :|virtualRouterName|
                         :type (common-lisp:or resource-name common-lisp:null)
                         :accessor %virtual-router-data-virtual-router-name
                         :initform
                         (common-lisp:error ":virtualroutername is required"))
                        (status :initarg :|status| :type
                         (common-lisp:or virtual-router-status
                                         common-lisp:null)
                         :accessor %virtual-router-data-status :initform
                         (common-lisp:error ":status is required"))
                        (spec :initarg :|spec| :type
                         (common-lisp:or virtual-router-spec common-lisp:null)
                         :accessor %virtual-router-data-spec :initform
                         (common-lisp:error ":spec is required"))
                        (metadata :initarg :|metadata| :type
                         (common-lisp:or resource-metadata common-lisp:null)
                         :accessor %virtual-router-data-metadata :initform
                         (common-lisp:error ":metadata is required"))
                        (mesh-name :initarg :|meshName| :type
                         (common-lisp:or resource-name common-lisp:null)
                         :accessor %virtual-router-data-mesh-name :initform
                         (common-lisp:error ":meshname is required"))))
 (common-lisp:export
  (common-lisp:list 'virtual-router-data 'make-virtual-router-data))
 (common-lisp:defun make-virtual-router-data
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key virtual-router-name status spec metadata
                     mesh-name)
   (common-lisp:apply #'common-lisp:make-instance 'virtual-router-data
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input virtual-router-data))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input virtual-router-data))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'mesh-name))
      (common-lisp:list
       (common-lisp:cons "meshName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metadata))
      (common-lisp:list
       (common-lisp:cons "metadata"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'spec))
      (common-lisp:list
       (common-lisp:cons "spec"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'virtual-router-name))
      (common-lisp:list
       (common-lisp:cons "virtualRouterName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input virtual-router-data))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype virtual-router-list ()
   '(trivial-types:proper-list virtual-router-ref))
 (common-lisp:defun |make-virtual-router-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list virtual-router-ref))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass virtual-router-listener common-lisp:nil
                       ((port-mapping :initarg :|portMapping| :type
                         (common-lisp:or port-mapping common-lisp:null)
                         :accessor %virtual-router-listener-port-mapping
                         :initform
                         (common-lisp:error ":portmapping is required"))))
 (common-lisp:export
  (common-lisp:list 'virtual-router-listener 'make-virtual-router-listener))
 (common-lisp:defun make-virtual-router-listener
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key port-mapping)
   (common-lisp:apply #'common-lisp:make-instance 'virtual-router-listener
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          virtual-router-listener))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          virtual-router-listener))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'port-mapping))
      (common-lisp:list
       (common-lisp:cons "portMapping"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          virtual-router-listener))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype virtual-router-listeners ()
   '(trivial-types:proper-list virtual-router-listener))
 (common-lisp:defun |make-virtual-router-listeners|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list virtual-router-listener))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass virtual-router-ref common-lisp:nil
                       ((virtual-router-name :initarg :|virtualRouterName|
                         :type (common-lisp:or resource-name common-lisp:null)
                         :accessor %virtual-router-ref-virtual-router-name
                         :initform
                         (common-lisp:error ":virtualroutername is required"))
                        (version :initarg :|version| :type
                         (common-lisp:or long common-lisp:null) :accessor
                         %virtual-router-ref-version :initform
                         (common-lisp:error ":version is required"))
                        (resource-owner :initarg :|resourceOwner| :type
                         (common-lisp:or account-id common-lisp:null) :accessor
                         %virtual-router-ref-resource-owner :initform
                         (common-lisp:error ":resourceowner is required"))
                        (mesh-owner :initarg :|meshOwner| :type
                         (common-lisp:or account-id common-lisp:null) :accessor
                         %virtual-router-ref-mesh-owner :initform
                         (common-lisp:error ":meshowner is required"))
                        (mesh-name :initarg :|meshName| :type
                         (common-lisp:or resource-name common-lisp:null)
                         :accessor %virtual-router-ref-mesh-name :initform
                         (common-lisp:error ":meshname is required"))
                        (last-updated-at :initarg :|lastUpdatedAt| :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %virtual-router-ref-last-updated-at :initform
                         (common-lisp:error ":lastupdatedat is required"))
                        (created-at :initarg :|createdAt| :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %virtual-router-ref-created-at :initform
                         (common-lisp:error ":createdat is required"))
                        (arn :initarg :|arn| :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %virtual-router-ref-arn :initform
                         (common-lisp:error ":arn is required"))))
 (common-lisp:export
  (common-lisp:list 'virtual-router-ref 'make-virtual-router-ref))
 (common-lisp:defun make-virtual-router-ref
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key virtual-router-name version
                     resource-owner mesh-owner mesh-name last-updated-at
                     created-at arn)
   (common-lisp:apply #'common-lisp:make-instance 'virtual-router-ref
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input virtual-router-ref))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input virtual-router-ref))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "createdAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-updated-at))
      (common-lisp:list
       (common-lisp:cons "lastUpdatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'mesh-name))
      (common-lisp:list
       (common-lisp:cons "meshName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'mesh-owner))
      (common-lisp:list
       (common-lisp:cons "meshOwner"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-owner))
      (common-lisp:list
       (common-lisp:cons "resourceOwner"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version))
      (common-lisp:list
       (common-lisp:cons "version"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'virtual-router-name))
      (common-lisp:list
       (common-lisp:cons "virtualRouterName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input virtual-router-ref))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass virtual-router-service-provider common-lisp:nil
                       ((virtual-router-name :initarg :|virtualRouterName|
                         :type (common-lisp:or resource-name common-lisp:null)
                         :accessor
                         %virtual-router-service-provider-virtual-router-name
                         :initform
                         (common-lisp:error
                          ":virtualroutername is required"))))
 (common-lisp:export
  (common-lisp:list 'virtual-router-service-provider
                    'make-virtual-router-service-provider))
 (common-lisp:defun make-virtual-router-service-provider
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key virtual-router-name)
   (common-lisp:apply #'common-lisp:make-instance
                      'virtual-router-service-provider
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          virtual-router-service-provider))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          virtual-router-service-provider))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'virtual-router-name))
      (common-lisp:list
       (common-lisp:cons "virtualRouterName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          virtual-router-service-provider))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass virtual-router-spec common-lisp:nil
                       ((listeners :initarg :|listeners| :type
                         (common-lisp:or virtual-router-listeners
                                         common-lisp:null)
                         :accessor %virtual-router-spec-listeners :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'virtual-router-spec 'make-virtual-router-spec))
 (common-lisp:defun make-virtual-router-spec
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key listeners)
   (common-lisp:apply #'common-lisp:make-instance 'virtual-router-spec
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input virtual-router-spec))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input virtual-router-spec))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'listeners))
      (common-lisp:list
       (common-lisp:cons "listeners"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input virtual-router-spec))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass virtual-router-status common-lisp:nil
                       ((status :initarg :|status| :type
                         (common-lisp:or virtual-router-status-code
                                         common-lisp:null)
                         :accessor %virtual-router-status-status :initform
                         (common-lisp:error ":status is required"))))
 (common-lisp:export
  (common-lisp:list 'virtual-router-status 'make-virtual-router-status))
 (common-lisp:defun make-virtual-router-status
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key status)
   (common-lisp:apply #'common-lisp:make-instance 'virtual-router-status
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          virtual-router-status))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          virtual-router-status))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          virtual-router-status))
   common-lisp:nil))
(common-lisp:deftype virtual-router-status-code () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass virtual-service-backend common-lisp:nil
                       ((virtual-service-name :initarg :|virtualServiceName|
                         :type (common-lisp:or service-name common-lisp:null)
                         :accessor
                         %virtual-service-backend-virtual-service-name
                         :initform
                         (common-lisp:error ":virtualservicename is required"))
                        (client-policy :initarg :|clientPolicy| :type
                         (common-lisp:or client-policy common-lisp:null)
                         :accessor %virtual-service-backend-client-policy
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'virtual-service-backend 'make-virtual-service-backend))
 (common-lisp:defun make-virtual-service-backend
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key virtual-service-name client-policy)
   (common-lisp:apply #'common-lisp:make-instance 'virtual-service-backend
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          virtual-service-backend))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          virtual-service-backend))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-policy))
      (common-lisp:list
       (common-lisp:cons "clientPolicy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'virtual-service-name))
      (common-lisp:list
       (common-lisp:cons "virtualServiceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          virtual-service-backend))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass virtual-service-data common-lisp:nil
                       ((virtual-service-name :initarg :|virtualServiceName|
                         :type (common-lisp:or service-name common-lisp:null)
                         :accessor %virtual-service-data-virtual-service-name
                         :initform
                         (common-lisp:error ":virtualservicename is required"))
                        (status :initarg :|status| :type
                         (common-lisp:or virtual-service-status
                                         common-lisp:null)
                         :accessor %virtual-service-data-status :initform
                         (common-lisp:error ":status is required"))
                        (spec :initarg :|spec| :type
                         (common-lisp:or virtual-service-spec common-lisp:null)
                         :accessor %virtual-service-data-spec :initform
                         (common-lisp:error ":spec is required"))
                        (metadata :initarg :|metadata| :type
                         (common-lisp:or resource-metadata common-lisp:null)
                         :accessor %virtual-service-data-metadata :initform
                         (common-lisp:error ":metadata is required"))
                        (mesh-name :initarg :|meshName| :type
                         (common-lisp:or resource-name common-lisp:null)
                         :accessor %virtual-service-data-mesh-name :initform
                         (common-lisp:error ":meshname is required"))))
 (common-lisp:export
  (common-lisp:list 'virtual-service-data 'make-virtual-service-data))
 (common-lisp:defun make-virtual-service-data
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key virtual-service-name status spec metadata
                     mesh-name)
   (common-lisp:apply #'common-lisp:make-instance 'virtual-service-data
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input virtual-service-data))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input virtual-service-data))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'mesh-name))
      (common-lisp:list
       (common-lisp:cons "meshName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metadata))
      (common-lisp:list
       (common-lisp:cons "metadata"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'spec))
      (common-lisp:list
       (common-lisp:cons "spec"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'virtual-service-name))
      (common-lisp:list
       (common-lisp:cons "virtualServiceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input virtual-service-data))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype virtual-service-list ()
   '(trivial-types:proper-list virtual-service-ref))
 (common-lisp:defun |make-virtual-service-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list virtual-service-ref))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass virtual-service-provider common-lisp:nil
                       ((virtual-router :initarg :|virtualRouter| :type
                         (common-lisp:or virtual-router-service-provider
                                         common-lisp:null)
                         :accessor %virtual-service-provider-virtual-router
                         :initform common-lisp:nil)
                        (virtual-node :initarg :|virtualNode| :type
                         (common-lisp:or virtual-node-service-provider
                                         common-lisp:null)
                         :accessor %virtual-service-provider-virtual-node
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'virtual-service-provider 'make-virtual-service-provider))
 (common-lisp:defun make-virtual-service-provider
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key virtual-router virtual-node)
   (common-lisp:apply #'common-lisp:make-instance 'virtual-service-provider
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          virtual-service-provider))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          virtual-service-provider))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'virtual-node))
      (common-lisp:list
       (common-lisp:cons "virtualNode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'virtual-router))
      (common-lisp:list
       (common-lisp:cons "virtualRouter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          virtual-service-provider))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass virtual-service-ref common-lisp:nil
                       ((virtual-service-name :initarg :|virtualServiceName|
                         :type (common-lisp:or service-name common-lisp:null)
                         :accessor %virtual-service-ref-virtual-service-name
                         :initform
                         (common-lisp:error ":virtualservicename is required"))
                        (version :initarg :|version| :type
                         (common-lisp:or long common-lisp:null) :accessor
                         %virtual-service-ref-version :initform
                         (common-lisp:error ":version is required"))
                        (resource-owner :initarg :|resourceOwner| :type
                         (common-lisp:or account-id common-lisp:null) :accessor
                         %virtual-service-ref-resource-owner :initform
                         (common-lisp:error ":resourceowner is required"))
                        (mesh-owner :initarg :|meshOwner| :type
                         (common-lisp:or account-id common-lisp:null) :accessor
                         %virtual-service-ref-mesh-owner :initform
                         (common-lisp:error ":meshowner is required"))
                        (mesh-name :initarg :|meshName| :type
                         (common-lisp:or resource-name common-lisp:null)
                         :accessor %virtual-service-ref-mesh-name :initform
                         (common-lisp:error ":meshname is required"))
                        (last-updated-at :initarg :|lastUpdatedAt| :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %virtual-service-ref-last-updated-at :initform
                         (common-lisp:error ":lastupdatedat is required"))
                        (created-at :initarg :|createdAt| :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %virtual-service-ref-created-at :initform
                         (common-lisp:error ":createdat is required"))
                        (arn :initarg :|arn| :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %virtual-service-ref-arn :initform
                         (common-lisp:error ":arn is required"))))
 (common-lisp:export
  (common-lisp:list 'virtual-service-ref 'make-virtual-service-ref))
 (common-lisp:defun make-virtual-service-ref
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key virtual-service-name version
                     resource-owner mesh-owner mesh-name last-updated-at
                     created-at arn)
   (common-lisp:apply #'common-lisp:make-instance 'virtual-service-ref
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input virtual-service-ref))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input virtual-service-ref))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "createdAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-updated-at))
      (common-lisp:list
       (common-lisp:cons "lastUpdatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'mesh-name))
      (common-lisp:list
       (common-lisp:cons "meshName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'mesh-owner))
      (common-lisp:list
       (common-lisp:cons "meshOwner"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-owner))
      (common-lisp:list
       (common-lisp:cons "resourceOwner"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version))
      (common-lisp:list
       (common-lisp:cons "version"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'virtual-service-name))
      (common-lisp:list
       (common-lisp:cons "virtualServiceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input virtual-service-ref))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass virtual-service-spec common-lisp:nil
                       ((provider :initarg :|provider| :type
                         (common-lisp:or virtual-service-provider
                                         common-lisp:null)
                         :accessor %virtual-service-spec-provider :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'virtual-service-spec 'make-virtual-service-spec))
 (common-lisp:defun make-virtual-service-spec
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key provider)
   (common-lisp:apply #'common-lisp:make-instance 'virtual-service-spec
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input virtual-service-spec))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input virtual-service-spec))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'provider))
      (common-lisp:list
       (common-lisp:cons "provider"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input virtual-service-spec))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass virtual-service-status common-lisp:nil
                       ((status :initarg :|status| :type
                         (common-lisp:or virtual-service-status-code
                                         common-lisp:null)
                         :accessor %virtual-service-status-status :initform
                         (common-lisp:error ":status is required"))))
 (common-lisp:export
  (common-lisp:list 'virtual-service-status 'make-virtual-service-status))
 (common-lisp:defun make-virtual-service-status
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key status)
   (common-lisp:apply #'common-lisp:make-instance 'virtual-service-status
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          virtual-service-status))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          virtual-service-status))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          virtual-service-status))
   common-lisp:nil))
(common-lisp:deftype virtual-service-status-code () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass weighted-target common-lisp:nil
                       ((weight :initarg :|weight| :type
                         (common-lisp:or percent-int common-lisp:null)
                         :accessor %weighted-target-weight :initform
                         (common-lisp:error ":weight is required"))
                        (virtual-node :initarg :|virtualNode| :type
                         (common-lisp:or resource-name common-lisp:null)
                         :accessor %weighted-target-virtual-node :initform
                         (common-lisp:error ":virtualnode is required"))
                        (port :initarg :|port| :type
                         (common-lisp:or listener-port common-lisp:null)
                         :accessor %weighted-target-port :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'weighted-target 'make-weighted-target))
 (common-lisp:defun make-weighted-target
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key weight virtual-node port)
   (common-lisp:apply #'common-lisp:make-instance 'weighted-target
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input weighted-target))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input weighted-target))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'port))
      (common-lisp:list
       (common-lisp:cons "port"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'virtual-node))
      (common-lisp:list
       (common-lisp:cons "virtualNode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'weight))
      (common-lisp:list
       (common-lisp:cons "weight"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input weighted-target))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype weighted-targets ()
   '(trivial-types:proper-list weighted-target))
 (common-lisp:defun |make-weighted-targets|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list weighted-target))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defun create-gateway-route
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key client-token gateway-route-name mesh-name
                     mesh-owner spec tags virtual-gateway-name)
   (common-lisp:declare
    (common-lisp:ignorable client-token gateway-route-name mesh-name mesh-owner
     spec tags virtual-gateway-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-gateway-route-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'appmesh-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v20190125/meshes/~A/virtualGateway/~A/gatewayRoutes"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'mesh-name))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'virtual-gateway-name))))
                                                        "CreateGatewayRoute"
                                                        "2019-01-25"))
      "structure" common-lisp:nil *error-map*)))
 (common-lisp:export 'create-gateway-route))
(common-lisp:progn
 (common-lisp:defun create-mesh
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key client-token mesh-name spec tags)
   (common-lisp:declare
    (common-lisp:ignorable client-token mesh-name spec tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-mesh-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'appmesh-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT" :rest-json
                                                        "/v20190125/meshes"
                                                        "CreateMesh"
                                                        "2019-01-25"))
      "structure" common-lisp:nil *error-map*)))
 (common-lisp:export 'create-mesh))
(common-lisp:progn
 (common-lisp:defun create-route
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key client-token mesh-name mesh-owner
                     route-name spec tags virtual-router-name)
   (common-lisp:declare
    (common-lisp:ignorable client-token mesh-name mesh-owner route-name spec
     tags virtual-router-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-route-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'appmesh-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v20190125/meshes/~A/virtualRouter/~A/routes"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'mesh-name))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'virtual-router-name))))
                                                        "CreateRoute"
                                                        "2019-01-25"))
      "structure" common-lisp:nil *error-map*)))
 (common-lisp:export 'create-route))
(common-lisp:progn
 (common-lisp:defun create-virtual-gateway
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key client-token mesh-name mesh-owner spec
                     tags virtual-gateway-name)
   (common-lisp:declare
    (common-lisp:ignorable client-token mesh-name mesh-owner spec tags
     virtual-gateway-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-virtual-gateway-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'appmesh-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v20190125/meshes/~A/virtualGateways"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'mesh-name))))
                                                        "CreateVirtualGateway"
                                                        "2019-01-25"))
      "structure" common-lisp:nil *error-map*)))
 (common-lisp:export 'create-virtual-gateway))
(common-lisp:progn
 (common-lisp:defun create-virtual-node
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key client-token mesh-name mesh-owner spec
                     tags virtual-node-name)
   (common-lisp:declare
    (common-lisp:ignorable client-token mesh-name mesh-owner spec tags
     virtual-node-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-virtual-node-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'appmesh-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v20190125/meshes/~A/virtualNodes"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'mesh-name))))
                                                        "CreateVirtualNode"
                                                        "2019-01-25"))
      "structure" common-lisp:nil *error-map*)))
 (common-lisp:export 'create-virtual-node))
(common-lisp:progn
 (common-lisp:defun create-virtual-router
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key client-token mesh-name mesh-owner spec
                     tags virtual-router-name)
   (common-lisp:declare
    (common-lisp:ignorable client-token mesh-name mesh-owner spec tags
     virtual-router-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-virtual-router-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'appmesh-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v20190125/meshes/~A/virtualRouters"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'mesh-name))))
                                                        "CreateVirtualRouter"
                                                        "2019-01-25"))
      "structure" common-lisp:nil *error-map*)))
 (common-lisp:export 'create-virtual-router))
(common-lisp:progn
 (common-lisp:defun create-virtual-service
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key client-token mesh-name mesh-owner spec
                     tags virtual-service-name)
   (common-lisp:declare
    (common-lisp:ignorable client-token mesh-name mesh-owner spec tags
     virtual-service-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-virtual-service-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'appmesh-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v20190125/meshes/~A/virtualServices"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'mesh-name))))
                                                        "CreateVirtualService"
                                                        "2019-01-25"))
      "structure" common-lisp:nil *error-map*)))
 (common-lisp:export 'create-virtual-service))
(common-lisp:progn
 (common-lisp:defun delete-gateway-route
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key gateway-route-name mesh-name mesh-owner
                     virtual-gateway-name)
   (common-lisp:declare
    (common-lisp:ignorable gateway-route-name mesh-name mesh-owner
     virtual-gateway-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-gateway-route-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'appmesh-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v20190125/meshes/~A/virtualGateway/~A/gatewayRoutes/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'mesh-name))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'virtual-gateway-name))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'gateway-route-name))))
                                                        "DeleteGatewayRoute"
                                                        "2019-01-25"))
      "structure" common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-gateway-route))
(common-lisp:progn
 (common-lisp:defun delete-mesh
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key mesh-name)
   (common-lisp:declare (common-lisp:ignorable mesh-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-mesh-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'appmesh-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v20190125/meshes/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'mesh-name))))
                                                        "DeleteMesh"
                                                        "2019-01-25"))
      "structure" common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-mesh))
(common-lisp:progn
 (common-lisp:defun delete-route
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key mesh-name mesh-owner route-name
                     virtual-router-name)
   (common-lisp:declare
    (common-lisp:ignorable mesh-name mesh-owner route-name
     virtual-router-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-route-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'appmesh-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v20190125/meshes/~A/virtualRouter/~A/routes/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'mesh-name))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'virtual-router-name))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'route-name))))
                                                        "DeleteRoute"
                                                        "2019-01-25"))
      "structure" common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-route))
(common-lisp:progn
 (common-lisp:defun delete-virtual-gateway
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key mesh-name mesh-owner
                     virtual-gateway-name)
   (common-lisp:declare
    (common-lisp:ignorable mesh-name mesh-owner virtual-gateway-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-virtual-gateway-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'appmesh-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v20190125/meshes/~A/virtualGateways/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'mesh-name))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'virtual-gateway-name))))
                                                        "DeleteVirtualGateway"
                                                        "2019-01-25"))
      "structure" common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-virtual-gateway))
(common-lisp:progn
 (common-lisp:defun delete-virtual-node
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key mesh-name mesh-owner virtual-node-name)
   (common-lisp:declare
    (common-lisp:ignorable mesh-name mesh-owner virtual-node-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-virtual-node-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'appmesh-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v20190125/meshes/~A/virtualNodes/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'mesh-name))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'virtual-node-name))))
                                                        "DeleteVirtualNode"
                                                        "2019-01-25"))
      "structure" common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-virtual-node))
(common-lisp:progn
 (common-lisp:defun delete-virtual-router
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key mesh-name mesh-owner virtual-router-name)
   (common-lisp:declare
    (common-lisp:ignorable mesh-name mesh-owner virtual-router-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-virtual-router-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'appmesh-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v20190125/meshes/~A/virtualRouters/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'mesh-name))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'virtual-router-name))))
                                                        "DeleteVirtualRouter"
                                                        "2019-01-25"))
      "structure" common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-virtual-router))
(common-lisp:progn
 (common-lisp:defun delete-virtual-service
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key mesh-name mesh-owner
                     virtual-service-name)
   (common-lisp:declare
    (common-lisp:ignorable mesh-name mesh-owner virtual-service-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-virtual-service-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'appmesh-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v20190125/meshes/~A/virtualServices/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'mesh-name))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'virtual-service-name))))
                                                        "DeleteVirtualService"
                                                        "2019-01-25"))
      "structure" common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-virtual-service))
(common-lisp:progn
 (common-lisp:defun describe-gateway-route
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key gateway-route-name mesh-name mesh-owner
                     virtual-gateway-name)
   (common-lisp:declare
    (common-lisp:ignorable gateway-route-name mesh-name mesh-owner
     virtual-gateway-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-gateway-route-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'appmesh-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v20190125/meshes/~A/virtualGateway/~A/gatewayRoutes/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'mesh-name))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'virtual-gateway-name))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'gateway-route-name))))
                                                        "DescribeGatewayRoute"
                                                        "2019-01-25"))
      "structure" common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-gateway-route))
(common-lisp:progn
 (common-lisp:defun describe-mesh
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key mesh-name mesh-owner)
   (common-lisp:declare (common-lisp:ignorable mesh-name mesh-owner))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-mesh-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'appmesh-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v20190125/meshes/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'mesh-name))))
                                                        "DescribeMesh"
                                                        "2019-01-25"))
      "structure" common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-mesh))
(common-lisp:progn
 (common-lisp:defun describe-route
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key mesh-name mesh-owner route-name
                     virtual-router-name)
   (common-lisp:declare
    (common-lisp:ignorable mesh-name mesh-owner route-name
     virtual-router-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-route-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'appmesh-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v20190125/meshes/~A/virtualRouter/~A/routes/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'mesh-name))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'virtual-router-name))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'route-name))))
                                                        "DescribeRoute"
                                                        "2019-01-25"))
      "structure" common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-route))
(common-lisp:progn
 (common-lisp:defun describe-virtual-gateway
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key mesh-name mesh-owner
                     virtual-gateway-name)
   (common-lisp:declare
    (common-lisp:ignorable mesh-name mesh-owner virtual-gateway-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-virtual-gateway-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'appmesh-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v20190125/meshes/~A/virtualGateways/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'mesh-name))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'virtual-gateway-name))))
                                                        "DescribeVirtualGateway"
                                                        "2019-01-25"))
      "structure" common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-virtual-gateway))
(common-lisp:progn
 (common-lisp:defun describe-virtual-node
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key mesh-name mesh-owner virtual-node-name)
   (common-lisp:declare
    (common-lisp:ignorable mesh-name mesh-owner virtual-node-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-virtual-node-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'appmesh-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v20190125/meshes/~A/virtualNodes/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'mesh-name))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'virtual-node-name))))
                                                        "DescribeVirtualNode"
                                                        "2019-01-25"))
      "structure" common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-virtual-node))
(common-lisp:progn
 (common-lisp:defun describe-virtual-router
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key mesh-name mesh-owner virtual-router-name)
   (common-lisp:declare
    (common-lisp:ignorable mesh-name mesh-owner virtual-router-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-virtual-router-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'appmesh-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v20190125/meshes/~A/virtualRouters/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'mesh-name))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'virtual-router-name))))
                                                        "DescribeVirtualRouter"
                                                        "2019-01-25"))
      "structure" common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-virtual-router))
(common-lisp:progn
 (common-lisp:defun describe-virtual-service
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key mesh-name mesh-owner
                     virtual-service-name)
   (common-lisp:declare
    (common-lisp:ignorable mesh-name mesh-owner virtual-service-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-virtual-service-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'appmesh-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v20190125/meshes/~A/virtualServices/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'mesh-name))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'virtual-service-name))))
                                                        "DescribeVirtualService"
                                                        "2019-01-25"))
      "structure" common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-virtual-service))
(common-lisp:progn
 (common-lisp:defun list-gateway-routes
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key limit mesh-name mesh-owner next-token
                     virtual-gateway-name)
   (common-lisp:declare
    (common-lisp:ignorable limit mesh-name mesh-owner next-token
     virtual-gateway-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-gateway-routes-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'appmesh-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v20190125/meshes/~A/virtualGateway/~A/gatewayRoutes"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'mesh-name))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'virtual-gateway-name))))
                                                        "ListGatewayRoutes"
                                                        "2019-01-25"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-gateway-routes))
(common-lisp:progn
 (common-lisp:defun list-meshes
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key limit next-token)
   (common-lisp:declare (common-lisp:ignorable limit next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-meshes-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'appmesh-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        "/v20190125/meshes"
                                                        "ListMeshes"
                                                        "2019-01-25"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-meshes))
(common-lisp:progn
 (common-lisp:defun list-routes
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key limit mesh-name mesh-owner next-token
                     virtual-router-name)
   (common-lisp:declare
    (common-lisp:ignorable limit mesh-name mesh-owner next-token
     virtual-router-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-routes-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'appmesh-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v20190125/meshes/~A/virtualRouter/~A/routes"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'mesh-name))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'virtual-router-name))))
                                                        "ListRoutes"
                                                        "2019-01-25"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-routes))
(common-lisp:progn
 (common-lisp:defun list-tags-for-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key limit next-token resource-arn)
   (common-lisp:declare (common-lisp:ignorable limit next-token resource-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-tags-for-resource-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'appmesh-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        "/v20190125/tags"
                                                        "ListTagsForResource"
                                                        "2019-01-25"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-tags-for-resource))
(common-lisp:progn
 (common-lisp:defun list-virtual-gateways
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key limit mesh-name mesh-owner next-token)
   (common-lisp:declare
    (common-lisp:ignorable limit mesh-name mesh-owner next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-virtual-gateways-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'appmesh-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v20190125/meshes/~A/virtualGateways"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'mesh-name))))
                                                        "ListVirtualGateways"
                                                        "2019-01-25"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-virtual-gateways))
(common-lisp:progn
 (common-lisp:defun list-virtual-nodes
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key limit mesh-name mesh-owner next-token)
   (common-lisp:declare
    (common-lisp:ignorable limit mesh-name mesh-owner next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-virtual-nodes-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'appmesh-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v20190125/meshes/~A/virtualNodes"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'mesh-name))))
                                                        "ListVirtualNodes"
                                                        "2019-01-25"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-virtual-nodes))
(common-lisp:progn
 (common-lisp:defun list-virtual-routers
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key limit mesh-name mesh-owner next-token)
   (common-lisp:declare
    (common-lisp:ignorable limit mesh-name mesh-owner next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-virtual-routers-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'appmesh-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v20190125/meshes/~A/virtualRouters"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'mesh-name))))
                                                        "ListVirtualRouters"
                                                        "2019-01-25"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-virtual-routers))
(common-lisp:progn
 (common-lisp:defun list-virtual-services
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key limit mesh-name mesh-owner next-token)
   (common-lisp:declare
    (common-lisp:ignorable limit mesh-name mesh-owner next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-virtual-services-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'appmesh-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v20190125/meshes/~A/virtualServices"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'mesh-name))))
                                                        "ListVirtualServices"
                                                        "2019-01-25"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-virtual-services))
(common-lisp:progn
 (common-lisp:defun tag-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn tags)
   (common-lisp:declare (common-lisp:ignorable resource-arn tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-tag-resource-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'appmesh-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT" :rest-json
                                                        "/v20190125/tag"
                                                        "TagResource"
                                                        "2019-01-25"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'tag-resource))
(common-lisp:progn
 (common-lisp:defun untag-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn tag-keys)
   (common-lisp:declare (common-lisp:ignorable resource-arn tag-keys))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-untag-resource-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'appmesh-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT" :rest-json
                                                        "/v20190125/untag"
                                                        "UntagResource"
                                                        "2019-01-25"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'untag-resource))
(common-lisp:progn
 (common-lisp:defun update-gateway-route
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key client-token gateway-route-name mesh-name
                     mesh-owner spec virtual-gateway-name)
   (common-lisp:declare
    (common-lisp:ignorable client-token gateway-route-name mesh-name mesh-owner
     spec virtual-gateway-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-gateway-route-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'appmesh-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v20190125/meshes/~A/virtualGateway/~A/gatewayRoutes/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'mesh-name))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'virtual-gateway-name))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'gateway-route-name))))
                                                        "UpdateGatewayRoute"
                                                        "2019-01-25"))
      "structure" common-lisp:nil *error-map*)))
 (common-lisp:export 'update-gateway-route))
(common-lisp:progn
 (common-lisp:defun update-mesh
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key client-token mesh-name spec)
   (common-lisp:declare (common-lisp:ignorable client-token mesh-name spec))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-mesh-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'appmesh-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v20190125/meshes/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'mesh-name))))
                                                        "UpdateMesh"
                                                        "2019-01-25"))
      "structure" common-lisp:nil *error-map*)))
 (common-lisp:export 'update-mesh))
(common-lisp:progn
 (common-lisp:defun update-route
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key client-token mesh-name mesh-owner
                     route-name spec virtual-router-name)
   (common-lisp:declare
    (common-lisp:ignorable client-token mesh-name mesh-owner route-name spec
     virtual-router-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-route-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'appmesh-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v20190125/meshes/~A/virtualRouter/~A/routes/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'mesh-name))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'virtual-router-name))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'route-name))))
                                                        "UpdateRoute"
                                                        "2019-01-25"))
      "structure" common-lisp:nil *error-map*)))
 (common-lisp:export 'update-route))
(common-lisp:progn
 (common-lisp:defun update-virtual-gateway
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key client-token mesh-name mesh-owner spec
                     virtual-gateway-name)
   (common-lisp:declare
    (common-lisp:ignorable client-token mesh-name mesh-owner spec
     virtual-gateway-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-virtual-gateway-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'appmesh-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v20190125/meshes/~A/virtualGateways/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'mesh-name))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'virtual-gateway-name))))
                                                        "UpdateVirtualGateway"
                                                        "2019-01-25"))
      "structure" common-lisp:nil *error-map*)))
 (common-lisp:export 'update-virtual-gateway))
(common-lisp:progn
 (common-lisp:defun update-virtual-node
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key client-token mesh-name mesh-owner spec
                     virtual-node-name)
   (common-lisp:declare
    (common-lisp:ignorable client-token mesh-name mesh-owner spec
     virtual-node-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-virtual-node-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'appmesh-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v20190125/meshes/~A/virtualNodes/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'mesh-name))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'virtual-node-name))))
                                                        "UpdateVirtualNode"
                                                        "2019-01-25"))
      "structure" common-lisp:nil *error-map*)))
 (common-lisp:export 'update-virtual-node))
(common-lisp:progn
 (common-lisp:defun update-virtual-router
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key client-token mesh-name mesh-owner spec
                     virtual-router-name)
   (common-lisp:declare
    (common-lisp:ignorable client-token mesh-name mesh-owner spec
     virtual-router-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-virtual-router-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'appmesh-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v20190125/meshes/~A/virtualRouters/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'mesh-name))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'virtual-router-name))))
                                                        "UpdateVirtualRouter"
                                                        "2019-01-25"))
      "structure" common-lisp:nil *error-map*)))
 (common-lisp:export 'update-virtual-router))
(common-lisp:progn
 (common-lisp:defun update-virtual-service
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key client-token mesh-name mesh-owner spec
                     virtual-service-name)
   (common-lisp:declare
    (common-lisp:ignorable client-token mesh-name mesh-owner spec
     virtual-service-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-virtual-service-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'appmesh-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v20190125/meshes/~A/virtualServices/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'mesh-name))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'virtual-service-name))))
                                                        "UpdateVirtualService"
                                                        "2019-01-25"))
      "structure" common-lisp:nil *error-map*)))
 (common-lisp:export 'update-virtual-service))
