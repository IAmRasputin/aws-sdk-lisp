;; DO NOT EDIT: File is generated by AWS-SDK/GENERATOR.

(common-lisp:defpackage #:aws-sdk/services/appmesh/api
  (:use)
  (:nicknames #:aws/appmesh)
  (:import-from #:aws-sdk/generator/shape)
  (:import-from #:aws-sdk/generator/operation)
  (:import-from #:aws-sdk/api)
  (:import-from #:aws-sdk/request)
  (:import-from #:aws-sdk/json-request)
  (:import-from #:aws-sdk/rest-json-request)
  (:import-from #:aws-sdk/rest-xml-request)
  (:import-from #:aws-sdk/query-request)
  (:import-from #:aws-sdk/error))
(common-lisp:in-package #:aws-sdk/services/appmesh/api)
(common-lisp:progn
 (common-lisp:define-condition appmesh-error
     (aws-sdk/error:aws-error)
     common-lisp:nil)
 (common-lisp:export 'appmesh-error))
(common-lisp:progn
 (common-lisp:defclass appmesh-request
                       (aws-sdk/generator/service::rest-json-request)
                       common-lisp:nil
                       (:default-initargs :service "appmesh" :api-version
                        "2019-01-25" :host-prefix "appmesh" :signing-name
                        "appmesh" :global-host common-lisp:nil))
 (common-lisp:export 'appmesh-request))
(common-lisp:defvar *error-map*
  '(("BadRequestException" . bad-request-exception)
    ("ConflictException" . conflict-exception)
    ("ForbiddenException" . forbidden-exception)
    ("InternalServerErrorException" . internal-server-error-exception)
    ("LimitExceededException" . limit-exceeded-exception)
    ("NotFoundException" . not-found-exception)
    ("ResourceInUseException" . resource-in-use-exception)
    ("ServiceUnavailableException" . service-unavailable-exception)
    ("TooManyRequestsException" . too-many-requests-exception)
    ("TooManyTagsException" . too-many-tags-exception)))
(common-lisp:progn
 (common-lisp:defstruct
     (access-log (:copier common-lisp:nil)
      (:conc-name "struct-shape-access-log-"))
   (file common-lisp:nil :type
    (common-lisp:or file-access-log common-lisp:null)))
 (common-lisp:export (common-lisp:list 'access-log 'make-access-log))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input access-log))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input access-log))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'file))
      (common-lisp:list
       (common-lisp:cons "file"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input access-log))
   common-lisp:nil))
(common-lisp:deftype account-id () 'common-lisp:string)
(common-lisp:deftype arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (aws-cloud-map-instance-attribute (:copier common-lisp:nil)
      (:conc-name "struct-shape-aws-cloud-map-instance-attribute-"))
   (key (common-lisp:error ":key is required") :type
    (common-lisp:or aws-cloud-map-instance-attribute-key common-lisp:null))
   (value (common-lisp:error ":value is required") :type
    (common-lisp:or aws-cloud-map-instance-attribute-value common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'aws-cloud-map-instance-attribute
                    'make-aws-cloud-map-instance-attribute))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-cloud-map-instance-attribute))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-cloud-map-instance-attribute))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key))
      (common-lisp:list
       (common-lisp:cons "key"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-cloud-map-instance-attribute))
   common-lisp:nil))
(common-lisp:deftype aws-cloud-map-instance-attribute-key ()
  'common-lisp:string)
(common-lisp:deftype aws-cloud-map-instance-attribute-value ()
  'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype aws-cloud-map-instance-attributes ()
   '(trivial-types:proper-list aws-cloud-map-instance-attribute))
 (common-lisp:defun make-aws-cloud-map-instance-attributes
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            aws-cloud-map-instance-attribute))
   aws-sdk/generator/shape::members))
(common-lisp:deftype aws-cloud-map-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (aws-cloud-map-service-discovery (:copier common-lisp:nil)
      (:conc-name "struct-shape-aws-cloud-map-service-discovery-"))
   (attributes common-lisp:nil :type
    (common-lisp:or aws-cloud-map-instance-attributes common-lisp:null))
   (ip-preference common-lisp:nil :type
    (common-lisp:or ip-preference common-lisp:null))
   (namespace-name (common-lisp:error ":namespacename is required") :type
    (common-lisp:or aws-cloud-map-name common-lisp:null))
   (service-name (common-lisp:error ":servicename is required") :type
    (common-lisp:or aws-cloud-map-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'aws-cloud-map-service-discovery
                    'make-aws-cloud-map-service-discovery))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-cloud-map-service-discovery))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-cloud-map-service-discovery))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'attributes))
      (common-lisp:list
       (common-lisp:cons "attributes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ip-preference))
      (common-lisp:list
       (common-lisp:cons "ipPreference"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'namespace-name))
      (common-lisp:list
       (common-lisp:cons "namespaceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service-name))
      (common-lisp:list
       (common-lisp:cons "serviceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-cloud-map-service-discovery))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (backend (:copier common-lisp:nil) (:conc-name "struct-shape-backend-"))
   (virtual-service common-lisp:nil :type
    (common-lisp:or virtual-service-backend common-lisp:null)))
 (common-lisp:export (common-lisp:list 'backend 'make-backend))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input backend))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input backend))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'virtual-service))
      (common-lisp:list
       (common-lisp:cons "virtualService"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input backend))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (backend-defaults (:copier common-lisp:nil)
      (:conc-name "struct-shape-backend-defaults-"))
   (client-policy common-lisp:nil :type
    (common-lisp:or client-policy common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'backend-defaults 'make-backend-defaults))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input backend-defaults))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input backend-defaults))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-policy))
      (common-lisp:list
       (common-lisp:cons "clientPolicy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input backend-defaults))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype backends () '(trivial-types:proper-list backend))
 (common-lisp:defun make-backends
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list backend))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition bad-request-exception
     (appmesh-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       bad-request-exception-message)))
 (common-lisp:export
  (common-lisp:list 'bad-request-exception 'bad-request-exception-message)))
(common-lisp:deftype boolean () 'common-lisp:boolean)
(common-lisp:progn
 (common-lisp:deftype certificate-authority-arns ()
   '(trivial-types:proper-list arn))
 (common-lisp:defun make-certificate-authority-arns
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list arn))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (client-policy (:copier common-lisp:nil)
      (:conc-name "struct-shape-client-policy-"))
   (tls common-lisp:nil :type
    (common-lisp:or client-policy-tls common-lisp:null)))
 (common-lisp:export (common-lisp:list 'client-policy 'make-client-policy))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input client-policy))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input client-policy))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tls))
      (common-lisp:list
       (common-lisp:cons "tls"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input client-policy))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (client-policy-tls (:copier common-lisp:nil)
      (:conc-name "struct-shape-client-policy-tls-"))
   (certificate common-lisp:nil :type
    (common-lisp:or client-tls-certificate common-lisp:null))
   (enforce common-lisp:nil :type (common-lisp:or boolean common-lisp:null))
   (ports common-lisp:nil :type (common-lisp:or port-set common-lisp:null))
   (validation (common-lisp:error ":validation is required") :type
    (common-lisp:or tls-validation-context common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'client-policy-tls 'make-client-policy-tls))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input client-policy-tls))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input client-policy-tls))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'certificate))
      (common-lisp:list
       (common-lisp:cons "certificate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'enforce))
      (common-lisp:list
       (common-lisp:cons "enforce"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ports))
      (common-lisp:list
       (common-lisp:cons "ports"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'validation))
      (common-lisp:list
       (common-lisp:cons "validation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input client-policy-tls))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (client-tls-certificate (:copier common-lisp:nil)
      (:conc-name "struct-shape-client-tls-certificate-"))
   (file common-lisp:nil :type
    (common-lisp:or listener-tls-file-certificate common-lisp:null))
   (sds common-lisp:nil :type
    (common-lisp:or listener-tls-sds-certificate common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'client-tls-certificate 'make-client-tls-certificate))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          client-tls-certificate))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          client-tls-certificate))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'file))
      (common-lisp:list
       (common-lisp:cons "file"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sds))
      (common-lisp:list
       (common-lisp:cons "sds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          client-tls-certificate))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition conflict-exception
     (appmesh-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       conflict-exception-message)))
 (common-lisp:export
  (common-lisp:list 'conflict-exception 'conflict-exception-message)))
(common-lisp:progn
 (common-lisp:defstruct
     (create-gateway-route-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-gateway-route-input-"))
   (client-token common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (gateway-route-name (common-lisp:error ":gatewayroutename is required")
    :type (common-lisp:or resource-name common-lisp:null))
   (mesh-name (common-lisp:error ":meshname is required") :type
    (common-lisp:or resource-name common-lisp:null))
   (mesh-owner common-lisp:nil :type
    (common-lisp:or account-id common-lisp:null))
   (spec (common-lisp:error ":spec is required") :type
    (common-lisp:or gateway-route-spec common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-list common-lisp:null))
   (virtual-gateway-name (common-lisp:error ":virtualgatewayname is required")
    :type (common-lisp:or resource-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-gateway-route-input
                    'make-create-gateway-route-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-gateway-route-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-gateway-route-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "clientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'gateway-route-name))
      (common-lisp:list
       (common-lisp:cons "gatewayRouteName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'spec))
      (common-lisp:list
       (common-lisp:cons "spec"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-gateway-route-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-gateway-route-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-gateway-route-output-"))
   (gateway-route (common-lisp:error ":gatewayroute is required") :type
    (common-lisp:or gateway-route-data common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-gateway-route-output
                    'make-create-gateway-route-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-gateway-route-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-gateway-route-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'gateway-route))
      (common-lisp:list
       (common-lisp:cons "gatewayRoute"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-gateway-route-output))
   (common-lisp:slot-value aws-sdk/generator/shape::input 'gateway-route)))
(common-lisp:progn
 (common-lisp:defstruct
     (create-mesh-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-mesh-input-"))
   (client-token common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (mesh-name (common-lisp:error ":meshname is required") :type
    (common-lisp:or resource-name common-lisp:null))
   (spec common-lisp:nil :type (common-lisp:or mesh-spec common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-mesh-input 'make-create-mesh-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input create-mesh-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input create-mesh-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "clientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'mesh-name))
      (common-lisp:list
       (common-lisp:cons "meshName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'spec))
      (common-lisp:list
       (common-lisp:cons "spec"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input create-mesh-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-mesh-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-mesh-output-"))
   (mesh (common-lisp:error ":mesh is required") :type
    (common-lisp:or mesh-data common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-mesh-output 'make-create-mesh-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input create-mesh-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input create-mesh-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'mesh))
      (common-lisp:list
       (common-lisp:cons "mesh"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input create-mesh-output))
   (common-lisp:slot-value aws-sdk/generator/shape::input 'mesh)))
(common-lisp:progn
 (common-lisp:defstruct
     (create-route-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-route-input-"))
   (client-token common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (mesh-name (common-lisp:error ":meshname is required") :type
    (common-lisp:or resource-name common-lisp:null))
   (mesh-owner common-lisp:nil :type
    (common-lisp:or account-id common-lisp:null))
   (route-name (common-lisp:error ":routename is required") :type
    (common-lisp:or resource-name common-lisp:null))
   (spec (common-lisp:error ":spec is required") :type
    (common-lisp:or route-spec common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-list common-lisp:null))
   (virtual-router-name (common-lisp:error ":virtualroutername is required")
    :type (common-lisp:or resource-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-route-input 'make-create-route-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input create-route-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input create-route-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "clientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'route-name))
      (common-lisp:list
       (common-lisp:cons "routeName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'spec))
      (common-lisp:list
       (common-lisp:cons "spec"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input create-route-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-route-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-route-output-"))
   (route (common-lisp:error ":route is required") :type
    (common-lisp:or route-data common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-route-output 'make-create-route-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input create-route-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input create-route-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'route))
      (common-lisp:list
       (common-lisp:cons "route"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input create-route-output))
   (common-lisp:slot-value aws-sdk/generator/shape::input 'route)))
(common-lisp:progn
 (common-lisp:defstruct
     (create-virtual-gateway-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-virtual-gateway-input-"))
   (client-token common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (mesh-name (common-lisp:error ":meshname is required") :type
    (common-lisp:or resource-name common-lisp:null))
   (mesh-owner common-lisp:nil :type
    (common-lisp:or account-id common-lisp:null))
   (spec (common-lisp:error ":spec is required") :type
    (common-lisp:or virtual-gateway-spec common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-list common-lisp:null))
   (virtual-gateway-name (common-lisp:error ":virtualgatewayname is required")
    :type (common-lisp:or resource-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-virtual-gateway-input
                    'make-create-virtual-gateway-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-virtual-gateway-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-virtual-gateway-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "clientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'spec))
      (common-lisp:list
       (common-lisp:cons "spec"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'virtual-gateway-name))
      (common-lisp:list
       (common-lisp:cons "virtualGatewayName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-virtual-gateway-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-virtual-gateway-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-virtual-gateway-output-"))
   (virtual-gateway (common-lisp:error ":virtualgateway is required") :type
    (common-lisp:or virtual-gateway-data common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-virtual-gateway-output
                    'make-create-virtual-gateway-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-virtual-gateway-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-virtual-gateway-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'virtual-gateway))
      (common-lisp:list
       (common-lisp:cons "virtualGateway"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-virtual-gateway-output))
   (common-lisp:slot-value aws-sdk/generator/shape::input 'virtual-gateway)))
(common-lisp:progn
 (common-lisp:defstruct
     (create-virtual-node-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-virtual-node-input-"))
   (client-token common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (mesh-name (common-lisp:error ":meshname is required") :type
    (common-lisp:or resource-name common-lisp:null))
   (mesh-owner common-lisp:nil :type
    (common-lisp:or account-id common-lisp:null))
   (spec (common-lisp:error ":spec is required") :type
    (common-lisp:or virtual-node-spec common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-list common-lisp:null))
   (virtual-node-name (common-lisp:error ":virtualnodename is required") :type
    (common-lisp:or resource-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-virtual-node-input
                    'make-create-virtual-node-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-virtual-node-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-virtual-node-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "clientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'spec))
      (common-lisp:list
       (common-lisp:cons "spec"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'virtual-node-name))
      (common-lisp:list
       (common-lisp:cons "virtualNodeName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-virtual-node-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-virtual-node-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-virtual-node-output-"))
   (virtual-node (common-lisp:error ":virtualnode is required") :type
    (common-lisp:or virtual-node-data common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-virtual-node-output
                    'make-create-virtual-node-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-virtual-node-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-virtual-node-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'virtual-node))
      (common-lisp:list
       (common-lisp:cons "virtualNode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-virtual-node-output))
   (common-lisp:slot-value aws-sdk/generator/shape::input 'virtual-node)))
(common-lisp:progn
 (common-lisp:defstruct
     (create-virtual-router-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-virtual-router-input-"))
   (client-token common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (mesh-name (common-lisp:error ":meshname is required") :type
    (common-lisp:or resource-name common-lisp:null))
   (mesh-owner common-lisp:nil :type
    (common-lisp:or account-id common-lisp:null))
   (spec (common-lisp:error ":spec is required") :type
    (common-lisp:or virtual-router-spec common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-list common-lisp:null))
   (virtual-router-name (common-lisp:error ":virtualroutername is required")
    :type (common-lisp:or resource-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-virtual-router-input
                    'make-create-virtual-router-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-virtual-router-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-virtual-router-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "clientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'spec))
      (common-lisp:list
       (common-lisp:cons "spec"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'virtual-router-name))
      (common-lisp:list
       (common-lisp:cons "virtualRouterName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-virtual-router-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-virtual-router-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-virtual-router-output-"))
   (virtual-router (common-lisp:error ":virtualrouter is required") :type
    (common-lisp:or virtual-router-data common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-virtual-router-output
                    'make-create-virtual-router-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-virtual-router-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-virtual-router-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'virtual-router))
      (common-lisp:list
       (common-lisp:cons "virtualRouter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-virtual-router-output))
   (common-lisp:slot-value aws-sdk/generator/shape::input 'virtual-router)))
(common-lisp:progn
 (common-lisp:defstruct
     (create-virtual-service-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-virtual-service-input-"))
   (client-token common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (mesh-name (common-lisp:error ":meshname is required") :type
    (common-lisp:or resource-name common-lisp:null))
   (mesh-owner common-lisp:nil :type
    (common-lisp:or account-id common-lisp:null))
   (spec (common-lisp:error ":spec is required") :type
    (common-lisp:or virtual-service-spec common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-list common-lisp:null))
   (virtual-service-name (common-lisp:error ":virtualservicename is required")
    :type (common-lisp:or service-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-virtual-service-input
                    'make-create-virtual-service-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-virtual-service-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-virtual-service-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "clientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'spec))
      (common-lisp:list
       (common-lisp:cons "spec"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'virtual-service-name))
      (common-lisp:list
       (common-lisp:cons "virtualServiceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-virtual-service-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-virtual-service-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-virtual-service-output-"))
   (virtual-service (common-lisp:error ":virtualservice is required") :type
    (common-lisp:or virtual-service-data common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-virtual-service-output
                    'make-create-virtual-service-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-virtual-service-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-virtual-service-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'virtual-service))
      (common-lisp:list
       (common-lisp:cons "virtualService"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-virtual-service-output))
   (common-lisp:slot-value aws-sdk/generator/shape::input 'virtual-service)))
(common-lisp:deftype default-gateway-route-rewrite () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (delete-gateway-route-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-gateway-route-input-"))
   (gateway-route-name (common-lisp:error ":gatewayroutename is required")
    :type (common-lisp:or resource-name common-lisp:null))
   (mesh-name (common-lisp:error ":meshname is required") :type
    (common-lisp:or resource-name common-lisp:null))
   (mesh-owner common-lisp:nil :type
    (common-lisp:or account-id common-lisp:null))
   (virtual-gateway-name (common-lisp:error ":virtualgatewayname is required")
    :type (common-lisp:or resource-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-gateway-route-input
                    'make-delete-gateway-route-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-gateway-route-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-gateway-route-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-gateway-route-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-gateway-route-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-gateway-route-output-"))
   (gateway-route (common-lisp:error ":gatewayroute is required") :type
    (common-lisp:or gateway-route-data common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-gateway-route-output
                    'make-delete-gateway-route-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-gateway-route-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-gateway-route-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'gateway-route))
      (common-lisp:list
       (common-lisp:cons "gatewayRoute"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-gateway-route-output))
   (common-lisp:slot-value aws-sdk/generator/shape::input 'gateway-route)))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-mesh-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-mesh-input-"))
   (mesh-name (common-lisp:error ":meshname is required") :type
    (common-lisp:or resource-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-mesh-input 'make-delete-mesh-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input delete-mesh-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input delete-mesh-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input delete-mesh-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-mesh-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-mesh-output-"))
   (mesh (common-lisp:error ":mesh is required") :type
    (common-lisp:or mesh-data common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-mesh-output 'make-delete-mesh-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input delete-mesh-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input delete-mesh-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'mesh))
      (common-lisp:list
       (common-lisp:cons "mesh"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input delete-mesh-output))
   (common-lisp:slot-value aws-sdk/generator/shape::input 'mesh)))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-route-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-route-input-"))
   (mesh-name (common-lisp:error ":meshname is required") :type
    (common-lisp:or resource-name common-lisp:null))
   (mesh-owner common-lisp:nil :type
    (common-lisp:or account-id common-lisp:null))
   (route-name (common-lisp:error ":routename is required") :type
    (common-lisp:or resource-name common-lisp:null))
   (virtual-router-name (common-lisp:error ":virtualroutername is required")
    :type (common-lisp:or resource-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-route-input 'make-delete-route-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input delete-route-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input delete-route-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input delete-route-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-route-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-route-output-"))
   (route (common-lisp:error ":route is required") :type
    (common-lisp:or route-data common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-route-output 'make-delete-route-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input delete-route-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input delete-route-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'route))
      (common-lisp:list
       (common-lisp:cons "route"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input delete-route-output))
   (common-lisp:slot-value aws-sdk/generator/shape::input 'route)))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-virtual-gateway-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-virtual-gateway-input-"))
   (mesh-name (common-lisp:error ":meshname is required") :type
    (common-lisp:or resource-name common-lisp:null))
   (mesh-owner common-lisp:nil :type
    (common-lisp:or account-id common-lisp:null))
   (virtual-gateway-name (common-lisp:error ":virtualgatewayname is required")
    :type (common-lisp:or resource-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-virtual-gateway-input
                    'make-delete-virtual-gateway-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-virtual-gateway-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-virtual-gateway-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-virtual-gateway-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-virtual-gateway-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-virtual-gateway-output-"))
   (virtual-gateway (common-lisp:error ":virtualgateway is required") :type
    (common-lisp:or virtual-gateway-data common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-virtual-gateway-output
                    'make-delete-virtual-gateway-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-virtual-gateway-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-virtual-gateway-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'virtual-gateway))
      (common-lisp:list
       (common-lisp:cons "virtualGateway"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-virtual-gateway-output))
   (common-lisp:slot-value aws-sdk/generator/shape::input 'virtual-gateway)))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-virtual-node-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-virtual-node-input-"))
   (mesh-name (common-lisp:error ":meshname is required") :type
    (common-lisp:or resource-name common-lisp:null))
   (mesh-owner common-lisp:nil :type
    (common-lisp:or account-id common-lisp:null))
   (virtual-node-name (common-lisp:error ":virtualnodename is required") :type
    (common-lisp:or resource-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-virtual-node-input
                    'make-delete-virtual-node-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-virtual-node-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-virtual-node-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-virtual-node-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-virtual-node-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-virtual-node-output-"))
   (virtual-node (common-lisp:error ":virtualnode is required") :type
    (common-lisp:or virtual-node-data common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-virtual-node-output
                    'make-delete-virtual-node-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-virtual-node-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-virtual-node-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'virtual-node))
      (common-lisp:list
       (common-lisp:cons "virtualNode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-virtual-node-output))
   (common-lisp:slot-value aws-sdk/generator/shape::input 'virtual-node)))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-virtual-router-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-virtual-router-input-"))
   (mesh-name (common-lisp:error ":meshname is required") :type
    (common-lisp:or resource-name common-lisp:null))
   (mesh-owner common-lisp:nil :type
    (common-lisp:or account-id common-lisp:null))
   (virtual-router-name (common-lisp:error ":virtualroutername is required")
    :type (common-lisp:or resource-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-virtual-router-input
                    'make-delete-virtual-router-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-virtual-router-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-virtual-router-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-virtual-router-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-virtual-router-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-virtual-router-output-"))
   (virtual-router (common-lisp:error ":virtualrouter is required") :type
    (common-lisp:or virtual-router-data common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-virtual-router-output
                    'make-delete-virtual-router-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-virtual-router-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-virtual-router-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'virtual-router))
      (common-lisp:list
       (common-lisp:cons "virtualRouter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-virtual-router-output))
   (common-lisp:slot-value aws-sdk/generator/shape::input 'virtual-router)))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-virtual-service-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-virtual-service-input-"))
   (mesh-name (common-lisp:error ":meshname is required") :type
    (common-lisp:or resource-name common-lisp:null))
   (mesh-owner common-lisp:nil :type
    (common-lisp:or account-id common-lisp:null))
   (virtual-service-name (common-lisp:error ":virtualservicename is required")
    :type (common-lisp:or service-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-virtual-service-input
                    'make-delete-virtual-service-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-virtual-service-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-virtual-service-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-virtual-service-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-virtual-service-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-virtual-service-output-"))
   (virtual-service (common-lisp:error ":virtualservice is required") :type
    (common-lisp:or virtual-service-data common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-virtual-service-output
                    'make-delete-virtual-service-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-virtual-service-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-virtual-service-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'virtual-service))
      (common-lisp:list
       (common-lisp:cons "virtualService"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-virtual-service-output))
   (common-lisp:slot-value aws-sdk/generator/shape::input 'virtual-service)))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-gateway-route-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-gateway-route-input-"))
   (gateway-route-name (common-lisp:error ":gatewayroutename is required")
    :type (common-lisp:or resource-name common-lisp:null))
   (mesh-name (common-lisp:error ":meshname is required") :type
    (common-lisp:or resource-name common-lisp:null))
   (mesh-owner common-lisp:nil :type
    (common-lisp:or account-id common-lisp:null))
   (virtual-gateway-name (common-lisp:error ":virtualgatewayname is required")
    :type (common-lisp:or resource-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-gateway-route-input
                    'make-describe-gateway-route-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-gateway-route-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-gateway-route-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-gateway-route-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-gateway-route-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-gateway-route-output-"))
   (gateway-route (common-lisp:error ":gatewayroute is required") :type
    (common-lisp:or gateway-route-data common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-gateway-route-output
                    'make-describe-gateway-route-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-gateway-route-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-gateway-route-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'gateway-route))
      (common-lisp:list
       (common-lisp:cons "gatewayRoute"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-gateway-route-output))
   (common-lisp:slot-value aws-sdk/generator/shape::input 'gateway-route)))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-mesh-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-mesh-input-"))
   (mesh-name (common-lisp:error ":meshname is required") :type
    (common-lisp:or resource-name common-lisp:null))
   (mesh-owner common-lisp:nil :type
    (common-lisp:or account-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-mesh-input 'make-describe-mesh-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input describe-mesh-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input describe-mesh-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input describe-mesh-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-mesh-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-mesh-output-"))
   (mesh (common-lisp:error ":mesh is required") :type
    (common-lisp:or mesh-data common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-mesh-output 'make-describe-mesh-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input describe-mesh-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input describe-mesh-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'mesh))
      (common-lisp:list
       (common-lisp:cons "mesh"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input describe-mesh-output))
   (common-lisp:slot-value aws-sdk/generator/shape::input 'mesh)))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-route-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-route-input-"))
   (mesh-name (common-lisp:error ":meshname is required") :type
    (common-lisp:or resource-name common-lisp:null))
   (mesh-owner common-lisp:nil :type
    (common-lisp:or account-id common-lisp:null))
   (route-name (common-lisp:error ":routename is required") :type
    (common-lisp:or resource-name common-lisp:null))
   (virtual-router-name (common-lisp:error ":virtualroutername is required")
    :type (common-lisp:or resource-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-route-input 'make-describe-route-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input describe-route-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input describe-route-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input describe-route-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-route-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-route-output-"))
   (route (common-lisp:error ":route is required") :type
    (common-lisp:or route-data common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-route-output 'make-describe-route-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-route-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-route-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'route))
      (common-lisp:list
       (common-lisp:cons "route"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-route-output))
   (common-lisp:slot-value aws-sdk/generator/shape::input 'route)))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-virtual-gateway-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-virtual-gateway-input-"))
   (mesh-name (common-lisp:error ":meshname is required") :type
    (common-lisp:or resource-name common-lisp:null))
   (mesh-owner common-lisp:nil :type
    (common-lisp:or account-id common-lisp:null))
   (virtual-gateway-name (common-lisp:error ":virtualgatewayname is required")
    :type (common-lisp:or resource-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-virtual-gateway-input
                    'make-describe-virtual-gateway-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-virtual-gateway-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-virtual-gateway-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-virtual-gateway-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-virtual-gateway-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-virtual-gateway-output-"))
   (virtual-gateway (common-lisp:error ":virtualgateway is required") :type
    (common-lisp:or virtual-gateway-data common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-virtual-gateway-output
                    'make-describe-virtual-gateway-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-virtual-gateway-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-virtual-gateway-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'virtual-gateway))
      (common-lisp:list
       (common-lisp:cons "virtualGateway"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-virtual-gateway-output))
   (common-lisp:slot-value aws-sdk/generator/shape::input 'virtual-gateway)))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-virtual-node-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-virtual-node-input-"))
   (mesh-name (common-lisp:error ":meshname is required") :type
    (common-lisp:or resource-name common-lisp:null))
   (mesh-owner common-lisp:nil :type
    (common-lisp:or account-id common-lisp:null))
   (virtual-node-name (common-lisp:error ":virtualnodename is required") :type
    (common-lisp:or resource-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-virtual-node-input
                    'make-describe-virtual-node-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-virtual-node-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-virtual-node-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-virtual-node-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-virtual-node-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-virtual-node-output-"))
   (virtual-node (common-lisp:error ":virtualnode is required") :type
    (common-lisp:or virtual-node-data common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-virtual-node-output
                    'make-describe-virtual-node-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-virtual-node-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-virtual-node-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'virtual-node))
      (common-lisp:list
       (common-lisp:cons "virtualNode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-virtual-node-output))
   (common-lisp:slot-value aws-sdk/generator/shape::input 'virtual-node)))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-virtual-router-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-virtual-router-input-"))
   (mesh-name (common-lisp:error ":meshname is required") :type
    (common-lisp:or resource-name common-lisp:null))
   (mesh-owner common-lisp:nil :type
    (common-lisp:or account-id common-lisp:null))
   (virtual-router-name (common-lisp:error ":virtualroutername is required")
    :type (common-lisp:or resource-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-virtual-router-input
                    'make-describe-virtual-router-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-virtual-router-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-virtual-router-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-virtual-router-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-virtual-router-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-virtual-router-output-"))
   (virtual-router (common-lisp:error ":virtualrouter is required") :type
    (common-lisp:or virtual-router-data common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-virtual-router-output
                    'make-describe-virtual-router-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-virtual-router-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-virtual-router-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'virtual-router))
      (common-lisp:list
       (common-lisp:cons "virtualRouter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-virtual-router-output))
   (common-lisp:slot-value aws-sdk/generator/shape::input 'virtual-router)))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-virtual-service-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-virtual-service-input-"))
   (mesh-name (common-lisp:error ":meshname is required") :type
    (common-lisp:or resource-name common-lisp:null))
   (mesh-owner common-lisp:nil :type
    (common-lisp:or account-id common-lisp:null))
   (virtual-service-name (common-lisp:error ":virtualservicename is required")
    :type (common-lisp:or service-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-virtual-service-input
                    'make-describe-virtual-service-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-virtual-service-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-virtual-service-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-virtual-service-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-virtual-service-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-virtual-service-output-"))
   (virtual-service (common-lisp:error ":virtualservice is required") :type
    (common-lisp:or virtual-service-data common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-virtual-service-output
                    'make-describe-virtual-service-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-virtual-service-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-virtual-service-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'virtual-service))
      (common-lisp:list
       (common-lisp:cons "virtualService"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-virtual-service-output))
   (common-lisp:slot-value aws-sdk/generator/shape::input 'virtual-service)))
(common-lisp:deftype dns-response-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (dns-service-discovery (:copier common-lisp:nil)
      (:conc-name "struct-shape-dns-service-discovery-"))
   (hostname (common-lisp:error ":hostname is required") :type
    (common-lisp:or hostname common-lisp:null))
   (ip-preference common-lisp:nil :type
    (common-lisp:or ip-preference common-lisp:null))
   (response-type common-lisp:nil :type
    (common-lisp:or dns-response-type common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'dns-service-discovery 'make-dns-service-discovery))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          dns-service-discovery))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          dns-service-discovery))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'hostname))
      (common-lisp:list
       (common-lisp:cons "hostname"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ip-preference))
      (common-lisp:list
       (common-lisp:cons "ipPreference"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'response-type))
      (common-lisp:list
       (common-lisp:cons "responseType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          dns-service-discovery))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (duration (:copier common-lisp:nil) (:conc-name "struct-shape-duration-"))
   (unit common-lisp:nil :type (common-lisp:or duration-unit common-lisp:null))
   (value common-lisp:nil :type
    (common-lisp:or duration-value common-lisp:null)))
 (common-lisp:export (common-lisp:list 'duration 'make-duration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input duration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input duration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'unit))
      (common-lisp:list
       (common-lisp:cons "unit"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input duration))
   common-lisp:nil))
(common-lisp:deftype duration-unit () 'common-lisp:string)
(common-lisp:deftype duration-value () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defstruct
     (egress-filter (:copier common-lisp:nil)
      (:conc-name "struct-shape-egress-filter-"))
   (type (common-lisp:error ":type is required") :type
    (common-lisp:or egress-filter-type common-lisp:null)))
 (common-lisp:export (common-lisp:list 'egress-filter 'make-egress-filter))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input egress-filter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input egress-filter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input egress-filter))
   common-lisp:nil))
(common-lisp:deftype egress-filter-type () 'common-lisp:string)
(common-lisp:deftype exact-host-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (file-access-log (:copier common-lisp:nil)
      (:conc-name "struct-shape-file-access-log-"))
   (format common-lisp:nil :type
    (common-lisp:or logging-format common-lisp:null))
   (path (common-lisp:error ":path is required") :type
    (common-lisp:or file-path common-lisp:null)))
 (common-lisp:export (common-lisp:list 'file-access-log 'make-file-access-log))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input file-access-log))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input file-access-log))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'format))
      (common-lisp:list
       (common-lisp:cons "format"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'path))
      (common-lisp:list
       (common-lisp:cons "path"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input file-access-log))
   common-lisp:nil))
(common-lisp:deftype file-path () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition forbidden-exception
     (appmesh-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       forbidden-exception-message)))
 (common-lisp:export
  (common-lisp:list 'forbidden-exception 'forbidden-exception-message)))
(common-lisp:progn
 (common-lisp:defstruct
     (gateway-route-data (:copier common-lisp:nil)
      (:conc-name "struct-shape-gateway-route-data-"))
   (gateway-route-name (common-lisp:error ":gatewayroutename is required")
    :type (common-lisp:or resource-name common-lisp:null))
   (mesh-name (common-lisp:error ":meshname is required") :type
    (common-lisp:or resource-name common-lisp:null))
   (metadata (common-lisp:error ":metadata is required") :type
    (common-lisp:or resource-metadata common-lisp:null))
   (spec (common-lisp:error ":spec is required") :type
    (common-lisp:or gateway-route-spec common-lisp:null))
   (status (common-lisp:error ":status is required") :type
    (common-lisp:or gateway-route-status common-lisp:null))
   (virtual-gateway-name (common-lisp:error ":virtualgatewayname is required")
    :type (common-lisp:or resource-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'gateway-route-data 'make-gateway-route-data))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input gateway-route-data))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input gateway-route-data))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'gateway-route-name))
      (common-lisp:list
       (common-lisp:cons "gatewayRouteName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'mesh-name))
      (common-lisp:list
       (common-lisp:cons "meshName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metadata))
      (common-lisp:list
       (common-lisp:cons "metadata"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'spec))
      (common-lisp:list
       (common-lisp:cons "spec"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'virtual-gateway-name))
      (common-lisp:list
       (common-lisp:cons "virtualGatewayName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input gateway-route-data))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (gateway-route-hostname-match (:copier common-lisp:nil)
      (:conc-name "struct-shape-gateway-route-hostname-match-"))
   (exact common-lisp:nil :type
    (common-lisp:or exact-host-name common-lisp:null))
   (suffix common-lisp:nil :type
    (common-lisp:or suffix-hostname common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'gateway-route-hostname-match
                    'make-gateway-route-hostname-match))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          gateway-route-hostname-match))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          gateway-route-hostname-match))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'exact))
      (common-lisp:list
       (common-lisp:cons "exact"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'suffix))
      (common-lisp:list
       (common-lisp:cons "suffix"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          gateway-route-hostname-match))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (gateway-route-hostname-rewrite (:copier common-lisp:nil)
      (:conc-name "struct-shape-gateway-route-hostname-rewrite-"))
   (default-target-hostname common-lisp:nil :type
    (common-lisp:or default-gateway-route-rewrite common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'gateway-route-hostname-rewrite
                    'make-gateway-route-hostname-rewrite))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          gateway-route-hostname-rewrite))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          gateway-route-hostname-rewrite))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'default-target-hostname))
      (common-lisp:list
       (common-lisp:cons "defaultTargetHostname"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          gateway-route-hostname-rewrite))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype gateway-route-list ()
   '(trivial-types:proper-list gateway-route-ref))
 (common-lisp:defun make-gateway-route-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list gateway-route-ref))
   aws-sdk/generator/shape::members))
(common-lisp:deftype gateway-route-priority () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defstruct
     (gateway-route-ref (:copier common-lisp:nil)
      (:conc-name "struct-shape-gateway-route-ref-"))
   (arn (common-lisp:error ":arn is required") :type
    (common-lisp:or arn common-lisp:null))
   (created-at (common-lisp:error ":createdat is required") :type
    (common-lisp:or timestamp common-lisp:null))
   (gateway-route-name (common-lisp:error ":gatewayroutename is required")
    :type (common-lisp:or resource-name common-lisp:null))
   (last-updated-at (common-lisp:error ":lastupdatedat is required") :type
    (common-lisp:or timestamp common-lisp:null))
   (mesh-name (common-lisp:error ":meshname is required") :type
    (common-lisp:or resource-name common-lisp:null))
   (mesh-owner (common-lisp:error ":meshowner is required") :type
    (common-lisp:or account-id common-lisp:null))
   (resource-owner (common-lisp:error ":resourceowner is required") :type
    (common-lisp:or account-id common-lisp:null))
   (version (common-lisp:error ":version is required") :type
    (common-lisp:or long common-lisp:null))
   (virtual-gateway-name (common-lisp:error ":virtualgatewayname is required")
    :type (common-lisp:or resource-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'gateway-route-ref 'make-gateway-route-ref))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input gateway-route-ref))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input gateway-route-ref))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "createdAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'gateway-route-name))
      (common-lisp:list
       (common-lisp:cons "gatewayRouteName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-updated-at))
      (common-lisp:list
       (common-lisp:cons "lastUpdatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'mesh-name))
      (common-lisp:list
       (common-lisp:cons "meshName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'mesh-owner))
      (common-lisp:list
       (common-lisp:cons "meshOwner"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-owner))
      (common-lisp:list
       (common-lisp:cons "resourceOwner"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version))
      (common-lisp:list
       (common-lisp:cons "version"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'virtual-gateway-name))
      (common-lisp:list
       (common-lisp:cons "virtualGatewayName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input gateway-route-ref))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (gateway-route-spec (:copier common-lisp:nil)
      (:conc-name "struct-shape-gateway-route-spec-"))
   (grpc-route common-lisp:nil :type
    (common-lisp:or grpc-gateway-route common-lisp:null))
   (http2route common-lisp:nil :type
    (common-lisp:or http-gateway-route common-lisp:null))
   (http-route common-lisp:nil :type
    (common-lisp:or http-gateway-route common-lisp:null))
   (priority common-lisp:nil :type
    (common-lisp:or gateway-route-priority common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'gateway-route-spec 'make-gateway-route-spec))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input gateway-route-spec))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input gateway-route-spec))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'grpc-route))
      (common-lisp:list
       (common-lisp:cons "grpcRoute"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'http2route))
      (common-lisp:list
       (common-lisp:cons "http2Route"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'http-route))
      (common-lisp:list
       (common-lisp:cons "httpRoute"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'priority))
      (common-lisp:list
       (common-lisp:cons "priority"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input gateway-route-spec))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (gateway-route-status (:copier common-lisp:nil)
      (:conc-name "struct-shape-gateway-route-status-"))
   (status (common-lisp:error ":status is required") :type
    (common-lisp:or gateway-route-status-code common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'gateway-route-status 'make-gateway-route-status))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input gateway-route-status))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input gateway-route-status))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input gateway-route-status))
   common-lisp:nil))
(common-lisp:deftype gateway-route-status-code () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (gateway-route-target (:copier common-lisp:nil)
      (:conc-name "struct-shape-gateway-route-target-"))
   (port common-lisp:nil :type (common-lisp:or listener-port common-lisp:null))
   (virtual-service (common-lisp:error ":virtualservice is required") :type
    (common-lisp:or gateway-route-virtual-service common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'gateway-route-target 'make-gateway-route-target))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input gateway-route-target))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input gateway-route-target))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'port))
      (common-lisp:list
       (common-lisp:cons "port"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'virtual-service))
      (common-lisp:list
       (common-lisp:cons "virtualService"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input gateway-route-target))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (gateway-route-virtual-service (:copier common-lisp:nil)
      (:conc-name "struct-shape-gateway-route-virtual-service-"))
   (virtual-service-name (common-lisp:error ":virtualservicename is required")
    :type (common-lisp:or resource-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'gateway-route-virtual-service
                    'make-gateway-route-virtual-service))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          gateway-route-virtual-service))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          gateway-route-virtual-service))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'virtual-service-name))
      (common-lisp:list
       (common-lisp:cons "virtualServiceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          gateway-route-virtual-service))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (grpc-gateway-route (:copier common-lisp:nil)
      (:conc-name "struct-shape-grpc-gateway-route-"))
   (action (common-lisp:error ":action is required") :type
    (common-lisp:or grpc-gateway-route-action common-lisp:null))
   (match (common-lisp:error ":match is required") :type
    (common-lisp:or grpc-gateway-route-match common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'grpc-gateway-route 'make-grpc-gateway-route))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input grpc-gateway-route))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input grpc-gateway-route))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'action))
      (common-lisp:list
       (common-lisp:cons "action"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'match))
      (common-lisp:list
       (common-lisp:cons "match"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input grpc-gateway-route))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (grpc-gateway-route-action (:copier common-lisp:nil)
      (:conc-name "struct-shape-grpc-gateway-route-action-"))
   (rewrite common-lisp:nil :type
    (common-lisp:or grpc-gateway-route-rewrite common-lisp:null))
   (target (common-lisp:error ":target is required") :type
    (common-lisp:or gateway-route-target common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'grpc-gateway-route-action
                    'make-grpc-gateway-route-action))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          grpc-gateway-route-action))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          grpc-gateway-route-action))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rewrite))
      (common-lisp:list
       (common-lisp:cons "rewrite"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target))
      (common-lisp:list
       (common-lisp:cons "target"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          grpc-gateway-route-action))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (grpc-gateway-route-match (:copier common-lisp:nil)
      (:conc-name "struct-shape-grpc-gateway-route-match-"))
   (hostname common-lisp:nil :type
    (common-lisp:or gateway-route-hostname-match common-lisp:null))
   (metadata common-lisp:nil :type
    (common-lisp:or grpc-gateway-route-metadata-list common-lisp:null))
   (port common-lisp:nil :type (common-lisp:or listener-port common-lisp:null))
   (service-name common-lisp:nil :type
    (common-lisp:or service-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'grpc-gateway-route-match 'make-grpc-gateway-route-match))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          grpc-gateway-route-match))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          grpc-gateway-route-match))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'hostname))
      (common-lisp:list
       (common-lisp:cons "hostname"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metadata))
      (common-lisp:list
       (common-lisp:cons "metadata"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'port))
      (common-lisp:list
       (common-lisp:cons "port"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service-name))
      (common-lisp:list
       (common-lisp:cons "serviceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          grpc-gateway-route-match))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (grpc-gateway-route-metadata (:copier common-lisp:nil)
      (:conc-name "struct-shape-grpc-gateway-route-metadata-"))
   (invert common-lisp:nil :type (common-lisp:or boolean common-lisp:null))
   (match common-lisp:nil :type
    (common-lisp:or grpc-metadata-match-method common-lisp:null))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or header-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'grpc-gateway-route-metadata
                    'make-grpc-gateway-route-metadata))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          grpc-gateway-route-metadata))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          grpc-gateway-route-metadata))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'invert))
      (common-lisp:list
       (common-lisp:cons "invert"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'match))
      (common-lisp:list
       (common-lisp:cons "match"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          grpc-gateway-route-metadata))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype grpc-gateway-route-metadata-list ()
   '(trivial-types:proper-list grpc-gateway-route-metadata))
 (common-lisp:defun make-grpc-gateway-route-metadata-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            grpc-gateway-route-metadata))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (grpc-gateway-route-rewrite (:copier common-lisp:nil)
      (:conc-name "struct-shape-grpc-gateway-route-rewrite-"))
   (hostname common-lisp:nil :type
    (common-lisp:or gateway-route-hostname-rewrite common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'grpc-gateway-route-rewrite
                    'make-grpc-gateway-route-rewrite))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          grpc-gateway-route-rewrite))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          grpc-gateway-route-rewrite))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'hostname))
      (common-lisp:list
       (common-lisp:cons "hostname"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          grpc-gateway-route-rewrite))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (grpc-metadata-match-method (:copier common-lisp:nil)
      (:conc-name "struct-shape-grpc-metadata-match-method-"))
   (exact common-lisp:nil :type (common-lisp:or header-match common-lisp:null))
   (prefix common-lisp:nil :type
    (common-lisp:or header-match common-lisp:null))
   (range common-lisp:nil :type (common-lisp:or match-range common-lisp:null))
   (regex common-lisp:nil :type (common-lisp:or header-match common-lisp:null))
   (suffix common-lisp:nil :type
    (common-lisp:or header-match common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'grpc-metadata-match-method
                    'make-grpc-metadata-match-method))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          grpc-metadata-match-method))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          grpc-metadata-match-method))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'exact))
      (common-lisp:list
       (common-lisp:cons "exact"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'prefix))
      (common-lisp:list
       (common-lisp:cons "prefix"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'range))
      (common-lisp:list
       (common-lisp:cons "range"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'regex))
      (common-lisp:list
       (common-lisp:cons "regex"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'suffix))
      (common-lisp:list
       (common-lisp:cons "suffix"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          grpc-metadata-match-method))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (grpc-retry-policy (:copier common-lisp:nil)
      (:conc-name "struct-shape-grpc-retry-policy-"))
   (grpc-retry-events common-lisp:nil :type
    (common-lisp:or grpc-retry-policy-events common-lisp:null))
   (http-retry-events common-lisp:nil :type
    (common-lisp:or http-retry-policy-events common-lisp:null))
   (max-retries (common-lisp:error ":maxretries is required") :type
    (common-lisp:or max-retries common-lisp:null))
   (per-retry-timeout (common-lisp:error ":perretrytimeout is required") :type
    (common-lisp:or duration common-lisp:null))
   (tcp-retry-events common-lisp:nil :type
    (common-lisp:or tcp-retry-policy-events common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'grpc-retry-policy 'make-grpc-retry-policy))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input grpc-retry-policy))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input grpc-retry-policy))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'grpc-retry-events))
      (common-lisp:list
       (common-lisp:cons "grpcRetryEvents"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'http-retry-events))
      (common-lisp:list
       (common-lisp:cons "httpRetryEvents"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-retries))
      (common-lisp:list
       (common-lisp:cons "maxRetries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'per-retry-timeout))
      (common-lisp:list
       (common-lisp:cons "perRetryTimeout"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tcp-retry-events))
      (common-lisp:list
       (common-lisp:cons "tcpRetryEvents"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input grpc-retry-policy))
   common-lisp:nil))
(common-lisp:deftype grpc-retry-policy-event () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype grpc-retry-policy-events ()
   '(trivial-types:proper-list grpc-retry-policy-event))
 (common-lisp:defun make-grpc-retry-policy-events
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list grpc-retry-policy-event))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (grpc-route (:copier common-lisp:nil)
      (:conc-name "struct-shape-grpc-route-"))
   (action (common-lisp:error ":action is required") :type
    (common-lisp:or grpc-route-action common-lisp:null))
   (match (common-lisp:error ":match is required") :type
    (common-lisp:or grpc-route-match common-lisp:null))
   (retry-policy common-lisp:nil :type
    (common-lisp:or grpc-retry-policy common-lisp:null))
   (timeout common-lisp:nil :type
    (common-lisp:or grpc-timeout common-lisp:null)))
 (common-lisp:export (common-lisp:list 'grpc-route 'make-grpc-route))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input grpc-route))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input grpc-route))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'action))
      (common-lisp:list
       (common-lisp:cons "action"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'match))
      (common-lisp:list
       (common-lisp:cons "match"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'retry-policy))
      (common-lisp:list
       (common-lisp:cons "retryPolicy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'timeout))
      (common-lisp:list
       (common-lisp:cons "timeout"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input grpc-route))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (grpc-route-action (:copier common-lisp:nil)
      (:conc-name "struct-shape-grpc-route-action-"))
   (weighted-targets (common-lisp:error ":weightedtargets is required") :type
    (common-lisp:or weighted-targets common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'grpc-route-action 'make-grpc-route-action))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input grpc-route-action))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input grpc-route-action))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'weighted-targets))
      (common-lisp:list
       (common-lisp:cons "weightedTargets"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input grpc-route-action))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (grpc-route-match (:copier common-lisp:nil)
      (:conc-name "struct-shape-grpc-route-match-"))
   (metadata common-lisp:nil :type
    (common-lisp:or grpc-route-metadata-list common-lisp:null))
   (method-name common-lisp:nil :type
    (common-lisp:or method-name common-lisp:null))
   (port common-lisp:nil :type (common-lisp:or listener-port common-lisp:null))
   (service-name common-lisp:nil :type
    (common-lisp:or service-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'grpc-route-match 'make-grpc-route-match))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input grpc-route-match))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input grpc-route-match))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metadata))
      (common-lisp:list
       (common-lisp:cons "metadata"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'method-name))
      (common-lisp:list
       (common-lisp:cons "methodName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'port))
      (common-lisp:list
       (common-lisp:cons "port"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service-name))
      (common-lisp:list
       (common-lisp:cons "serviceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input grpc-route-match))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (grpc-route-metadata (:copier common-lisp:nil)
      (:conc-name "struct-shape-grpc-route-metadata-"))
   (invert common-lisp:nil :type (common-lisp:or boolean common-lisp:null))
   (match common-lisp:nil :type
    (common-lisp:or grpc-route-metadata-match-method common-lisp:null))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or header-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'grpc-route-metadata 'make-grpc-route-metadata))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input grpc-route-metadata))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input grpc-route-metadata))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'invert))
      (common-lisp:list
       (common-lisp:cons "invert"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'match))
      (common-lisp:list
       (common-lisp:cons "match"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input grpc-route-metadata))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype grpc-route-metadata-list ()
   '(trivial-types:proper-list grpc-route-metadata))
 (common-lisp:defun make-grpc-route-metadata-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list grpc-route-metadata))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (grpc-route-metadata-match-method (:copier common-lisp:nil)
      (:conc-name "struct-shape-grpc-route-metadata-match-method-"))
   (exact common-lisp:nil :type (common-lisp:or header-match common-lisp:null))
   (prefix common-lisp:nil :type
    (common-lisp:or header-match common-lisp:null))
   (range common-lisp:nil :type (common-lisp:or match-range common-lisp:null))
   (regex common-lisp:nil :type (common-lisp:or header-match common-lisp:null))
   (suffix common-lisp:nil :type
    (common-lisp:or header-match common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'grpc-route-metadata-match-method
                    'make-grpc-route-metadata-match-method))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          grpc-route-metadata-match-method))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          grpc-route-metadata-match-method))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'exact))
      (common-lisp:list
       (common-lisp:cons "exact"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'prefix))
      (common-lisp:list
       (common-lisp:cons "prefix"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'range))
      (common-lisp:list
       (common-lisp:cons "range"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'regex))
      (common-lisp:list
       (common-lisp:cons "regex"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'suffix))
      (common-lisp:list
       (common-lisp:cons "suffix"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          grpc-route-metadata-match-method))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (grpc-timeout (:copier common-lisp:nil)
      (:conc-name "struct-shape-grpc-timeout-"))
   (idle common-lisp:nil :type (common-lisp:or duration common-lisp:null))
   (per-request common-lisp:nil :type
    (common-lisp:or duration common-lisp:null)))
 (common-lisp:export (common-lisp:list 'grpc-timeout 'make-grpc-timeout))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input grpc-timeout))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input grpc-timeout))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'idle))
      (common-lisp:list
       (common-lisp:cons "idle"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'per-request))
      (common-lisp:list
       (common-lisp:cons "perRequest"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input grpc-timeout))
   common-lisp:nil))
(common-lisp:deftype header-match () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (header-match-method (:copier common-lisp:nil)
      (:conc-name "struct-shape-header-match-method-"))
   (exact common-lisp:nil :type (common-lisp:or header-match common-lisp:null))
   (prefix common-lisp:nil :type
    (common-lisp:or header-match common-lisp:null))
   (range common-lisp:nil :type (common-lisp:or match-range common-lisp:null))
   (regex common-lisp:nil :type (common-lisp:or header-match common-lisp:null))
   (suffix common-lisp:nil :type
    (common-lisp:or header-match common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'header-match-method 'make-header-match-method))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input header-match-method))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input header-match-method))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'exact))
      (common-lisp:list
       (common-lisp:cons "exact"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'prefix))
      (common-lisp:list
       (common-lisp:cons "prefix"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'range))
      (common-lisp:list
       (common-lisp:cons "range"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'regex))
      (common-lisp:list
       (common-lisp:cons "regex"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'suffix))
      (common-lisp:list
       (common-lisp:cons "suffix"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input header-match-method))
   common-lisp:nil))
(common-lisp:deftype header-name () 'common-lisp:string)
(common-lisp:deftype health-check-interval-millis () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defstruct
     (health-check-policy (:copier common-lisp:nil)
      (:conc-name "struct-shape-health-check-policy-"))
   (healthy-threshold (common-lisp:error ":healthythreshold is required") :type
    (common-lisp:or health-check-threshold common-lisp:null))
   (interval-millis (common-lisp:error ":intervalmillis is required") :type
    (common-lisp:or health-check-interval-millis common-lisp:null))
   (path common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (port common-lisp:nil :type (common-lisp:or port-number common-lisp:null))
   (protocol (common-lisp:error ":protocol is required") :type
    (common-lisp:or port-protocol common-lisp:null))
   (timeout-millis (common-lisp:error ":timeoutmillis is required") :type
    (common-lisp:or health-check-timeout-millis common-lisp:null))
   (unhealthy-threshold (common-lisp:error ":unhealthythreshold is required")
    :type (common-lisp:or health-check-threshold common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'health-check-policy 'make-health-check-policy))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input health-check-policy))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input health-check-policy))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'healthy-threshold))
      (common-lisp:list
       (common-lisp:cons "healthyThreshold"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'interval-millis))
      (common-lisp:list
       (common-lisp:cons "intervalMillis"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'path))
      (common-lisp:list
       (common-lisp:cons "path"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'port))
      (common-lisp:list
       (common-lisp:cons "port"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'protocol))
      (common-lisp:list
       (common-lisp:cons "protocol"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'timeout-millis))
      (common-lisp:list
       (common-lisp:cons "timeoutMillis"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'unhealthy-threshold))
      (common-lisp:list
       (common-lisp:cons "unhealthyThreshold"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input health-check-policy))
   common-lisp:nil))
(common-lisp:deftype health-check-threshold () 'common-lisp:integer)
(common-lisp:deftype health-check-timeout-millis () 'common-lisp:integer)
(common-lisp:deftype hostname () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (http-gateway-route (:copier common-lisp:nil)
      (:conc-name "struct-shape-http-gateway-route-"))
   (action (common-lisp:error ":action is required") :type
    (common-lisp:or http-gateway-route-action common-lisp:null))
   (match (common-lisp:error ":match is required") :type
    (common-lisp:or http-gateway-route-match common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'http-gateway-route 'make-http-gateway-route))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input http-gateway-route))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input http-gateway-route))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'action))
      (common-lisp:list
       (common-lisp:cons "action"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'match))
      (common-lisp:list
       (common-lisp:cons "match"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input http-gateway-route))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (http-gateway-route-action (:copier common-lisp:nil)
      (:conc-name "struct-shape-http-gateway-route-action-"))
   (rewrite common-lisp:nil :type
    (common-lisp:or http-gateway-route-rewrite common-lisp:null))
   (target (common-lisp:error ":target is required") :type
    (common-lisp:or gateway-route-target common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'http-gateway-route-action
                    'make-http-gateway-route-action))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          http-gateway-route-action))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          http-gateway-route-action))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rewrite))
      (common-lisp:list
       (common-lisp:cons "rewrite"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target))
      (common-lisp:list
       (common-lisp:cons "target"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          http-gateway-route-action))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (http-gateway-route-header (:copier common-lisp:nil)
      (:conc-name "struct-shape-http-gateway-route-header-"))
   (invert common-lisp:nil :type (common-lisp:or boolean common-lisp:null))
   (match common-lisp:nil :type
    (common-lisp:or header-match-method common-lisp:null))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or header-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'http-gateway-route-header
                    'make-http-gateway-route-header))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          http-gateway-route-header))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          http-gateway-route-header))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'invert))
      (common-lisp:list
       (common-lisp:cons "invert"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'match))
      (common-lisp:list
       (common-lisp:cons "match"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          http-gateway-route-header))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype http-gateway-route-headers ()
   '(trivial-types:proper-list http-gateway-route-header))
 (common-lisp:defun make-http-gateway-route-headers
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            http-gateway-route-header))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (http-gateway-route-match (:copier common-lisp:nil)
      (:conc-name "struct-shape-http-gateway-route-match-"))
   (headers common-lisp:nil :type
    (common-lisp:or http-gateway-route-headers common-lisp:null))
   (hostname common-lisp:nil :type
    (common-lisp:or gateway-route-hostname-match common-lisp:null))
   (method common-lisp:nil :type (common-lisp:or http-method common-lisp:null))
   (path common-lisp:nil :type
    (common-lisp:or http-path-match common-lisp:null))
   (port common-lisp:nil :type (common-lisp:or listener-port common-lisp:null))
   (prefix common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (query-parameters common-lisp:nil :type
    (common-lisp:or http-query-parameters common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'http-gateway-route-match 'make-http-gateway-route-match))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          http-gateway-route-match))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          http-gateway-route-match))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'headers))
      (common-lisp:list
       (common-lisp:cons "headers"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'hostname))
      (common-lisp:list
       (common-lisp:cons "hostname"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'method))
      (common-lisp:list
       (common-lisp:cons "method"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'path))
      (common-lisp:list
       (common-lisp:cons "path"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'port))
      (common-lisp:list
       (common-lisp:cons "port"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'prefix))
      (common-lisp:list
       (common-lisp:cons "prefix"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'query-parameters))
      (common-lisp:list
       (common-lisp:cons "queryParameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          http-gateway-route-match))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (http-gateway-route-path-rewrite (:copier common-lisp:nil)
      (:conc-name "struct-shape-http-gateway-route-path-rewrite-"))
   (exact common-lisp:nil :type
    (common-lisp:or http-path-exact common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'http-gateway-route-path-rewrite
                    'make-http-gateway-route-path-rewrite))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          http-gateway-route-path-rewrite))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          http-gateway-route-path-rewrite))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'exact))
      (common-lisp:list
       (common-lisp:cons "exact"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          http-gateway-route-path-rewrite))
   common-lisp:nil))
(common-lisp:deftype http-gateway-route-prefix () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (http-gateway-route-prefix-rewrite (:copier common-lisp:nil)
      (:conc-name "struct-shape-http-gateway-route-prefix-rewrite-"))
   (default-prefix common-lisp:nil :type
    (common-lisp:or default-gateway-route-rewrite common-lisp:null))
   (value common-lisp:nil :type
    (common-lisp:or http-gateway-route-prefix common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'http-gateway-route-prefix-rewrite
                    'make-http-gateway-route-prefix-rewrite))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          http-gateway-route-prefix-rewrite))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          http-gateway-route-prefix-rewrite))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'default-prefix))
      (common-lisp:list
       (common-lisp:cons "defaultPrefix"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          http-gateway-route-prefix-rewrite))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (http-gateway-route-rewrite (:copier common-lisp:nil)
      (:conc-name "struct-shape-http-gateway-route-rewrite-"))
   (hostname common-lisp:nil :type
    (common-lisp:or gateway-route-hostname-rewrite common-lisp:null))
   (path common-lisp:nil :type
    (common-lisp:or http-gateway-route-path-rewrite common-lisp:null))
   (prefix common-lisp:nil :type
    (common-lisp:or http-gateway-route-prefix-rewrite common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'http-gateway-route-rewrite
                    'make-http-gateway-route-rewrite))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          http-gateway-route-rewrite))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          http-gateway-route-rewrite))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'hostname))
      (common-lisp:list
       (common-lisp:cons "hostname"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'path))
      (common-lisp:list
       (common-lisp:cons "path"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'prefix))
      (common-lisp:list
       (common-lisp:cons "prefix"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          http-gateway-route-rewrite))
   common-lisp:nil))
(common-lisp:deftype http-method () 'common-lisp:string)
(common-lisp:deftype http-path-exact () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (http-path-match (:copier common-lisp:nil)
      (:conc-name "struct-shape-http-path-match-"))
   (exact common-lisp:nil :type
    (common-lisp:or http-path-exact common-lisp:null))
   (regex common-lisp:nil :type
    (common-lisp:or http-path-regex common-lisp:null)))
 (common-lisp:export (common-lisp:list 'http-path-match 'make-http-path-match))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input http-path-match))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input http-path-match))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'exact))
      (common-lisp:list
       (common-lisp:cons "exact"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'regex))
      (common-lisp:list
       (common-lisp:cons "regex"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input http-path-match))
   common-lisp:nil))
(common-lisp:deftype http-path-regex () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (http-query-parameter (:copier common-lisp:nil)
      (:conc-name "struct-shape-http-query-parameter-"))
   (match common-lisp:nil :type
    (common-lisp:or query-parameter-match common-lisp:null))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or query-parameter-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'http-query-parameter 'make-http-query-parameter))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input http-query-parameter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input http-query-parameter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'match))
      (common-lisp:list
       (common-lisp:cons "match"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input http-query-parameter))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype http-query-parameters ()
   '(trivial-types:proper-list http-query-parameter))
 (common-lisp:defun make-http-query-parameters
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list http-query-parameter))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (http-retry-policy (:copier common-lisp:nil)
      (:conc-name "struct-shape-http-retry-policy-"))
   (http-retry-events common-lisp:nil :type
    (common-lisp:or http-retry-policy-events common-lisp:null))
   (max-retries (common-lisp:error ":maxretries is required") :type
    (common-lisp:or max-retries common-lisp:null))
   (per-retry-timeout (common-lisp:error ":perretrytimeout is required") :type
    (common-lisp:or duration common-lisp:null))
   (tcp-retry-events common-lisp:nil :type
    (common-lisp:or tcp-retry-policy-events common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'http-retry-policy 'make-http-retry-policy))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input http-retry-policy))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input http-retry-policy))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'http-retry-events))
      (common-lisp:list
       (common-lisp:cons "httpRetryEvents"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-retries))
      (common-lisp:list
       (common-lisp:cons "maxRetries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'per-retry-timeout))
      (common-lisp:list
       (common-lisp:cons "perRetryTimeout"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tcp-retry-events))
      (common-lisp:list
       (common-lisp:cons "tcpRetryEvents"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input http-retry-policy))
   common-lisp:nil))
(common-lisp:deftype http-retry-policy-event () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype http-retry-policy-events ()
   '(trivial-types:proper-list http-retry-policy-event))
 (common-lisp:defun make-http-retry-policy-events
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list http-retry-policy-event))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (http-route (:copier common-lisp:nil)
      (:conc-name "struct-shape-http-route-"))
   (action (common-lisp:error ":action is required") :type
    (common-lisp:or http-route-action common-lisp:null))
   (match (common-lisp:error ":match is required") :type
    (common-lisp:or http-route-match common-lisp:null))
   (retry-policy common-lisp:nil :type
    (common-lisp:or http-retry-policy common-lisp:null))
   (timeout common-lisp:nil :type
    (common-lisp:or http-timeout common-lisp:null)))
 (common-lisp:export (common-lisp:list 'http-route 'make-http-route))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input http-route))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input http-route))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'action))
      (common-lisp:list
       (common-lisp:cons "action"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'match))
      (common-lisp:list
       (common-lisp:cons "match"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'retry-policy))
      (common-lisp:list
       (common-lisp:cons "retryPolicy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'timeout))
      (common-lisp:list
       (common-lisp:cons "timeout"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input http-route))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (http-route-action (:copier common-lisp:nil)
      (:conc-name "struct-shape-http-route-action-"))
   (weighted-targets (common-lisp:error ":weightedtargets is required") :type
    (common-lisp:or weighted-targets common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'http-route-action 'make-http-route-action))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input http-route-action))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input http-route-action))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'weighted-targets))
      (common-lisp:list
       (common-lisp:cons "weightedTargets"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input http-route-action))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (http-route-header (:copier common-lisp:nil)
      (:conc-name "struct-shape-http-route-header-"))
   (invert common-lisp:nil :type (common-lisp:or boolean common-lisp:null))
   (match common-lisp:nil :type
    (common-lisp:or header-match-method common-lisp:null))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or header-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'http-route-header 'make-http-route-header))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input http-route-header))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input http-route-header))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'invert))
      (common-lisp:list
       (common-lisp:cons "invert"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'match))
      (common-lisp:list
       (common-lisp:cons "match"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input http-route-header))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype http-route-headers ()
   '(trivial-types:proper-list http-route-header))
 (common-lisp:defun make-http-route-headers
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list http-route-header))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (http-route-match (:copier common-lisp:nil)
      (:conc-name "struct-shape-http-route-match-"))
   (headers common-lisp:nil :type
    (common-lisp:or http-route-headers common-lisp:null))
   (method common-lisp:nil :type (common-lisp:or http-method common-lisp:null))
   (path common-lisp:nil :type
    (common-lisp:or http-path-match common-lisp:null))
   (port common-lisp:nil :type (common-lisp:or listener-port common-lisp:null))
   (prefix common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (query-parameters common-lisp:nil :type
    (common-lisp:or http-query-parameters common-lisp:null))
   (scheme common-lisp:nil :type
    (common-lisp:or http-scheme common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'http-route-match 'make-http-route-match))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input http-route-match))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input http-route-match))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'headers))
      (common-lisp:list
       (common-lisp:cons "headers"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'method))
      (common-lisp:list
       (common-lisp:cons "method"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'path))
      (common-lisp:list
       (common-lisp:cons "path"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'port))
      (common-lisp:list
       (common-lisp:cons "port"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'prefix))
      (common-lisp:list
       (common-lisp:cons "prefix"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'query-parameters))
      (common-lisp:list
       (common-lisp:cons "queryParameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'scheme))
      (common-lisp:list
       (common-lisp:cons "scheme"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input http-route-match))
   common-lisp:nil))
(common-lisp:deftype http-scheme () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (http-timeout (:copier common-lisp:nil)
      (:conc-name "struct-shape-http-timeout-"))
   (idle common-lisp:nil :type (common-lisp:or duration common-lisp:null))
   (per-request common-lisp:nil :type
    (common-lisp:or duration common-lisp:null)))
 (common-lisp:export (common-lisp:list 'http-timeout 'make-http-timeout))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input http-timeout))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input http-timeout))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'idle))
      (common-lisp:list
       (common-lisp:cons "idle"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'per-request))
      (common-lisp:list
       (common-lisp:cons "perRequest"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input http-timeout))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition internal-server-error-exception
     (appmesh-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       internal-server-error-exception-message)))
 (common-lisp:export
  (common-lisp:list 'internal-server-error-exception
                    'internal-server-error-exception-message)))
(common-lisp:deftype ip-preference () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype json-format ()
   '(trivial-types:proper-list json-format-ref))
 (common-lisp:defun make-json-format
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list json-format-ref))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (json-format-ref (:copier common-lisp:nil)
      (:conc-name "struct-shape-json-format-ref-"))
   (key (common-lisp:error ":key is required") :type
    (common-lisp:or json-key common-lisp:null))
   (value (common-lisp:error ":value is required") :type
    (common-lisp:or json-value common-lisp:null)))
 (common-lisp:export (common-lisp:list 'json-format-ref 'make-json-format-ref))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input json-format-ref))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input json-format-ref))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key))
      (common-lisp:list
       (common-lisp:cons "key"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input json-format-ref))
   common-lisp:nil))
(common-lisp:deftype json-key () 'common-lisp:string)
(common-lisp:deftype json-value () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition limit-exceeded-exception
     (appmesh-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       limit-exceeded-exception-message)))
 (common-lisp:export
  (common-lisp:list 'limit-exceeded-exception
                    'limit-exceeded-exception-message)))
(common-lisp:progn
 (common-lisp:defstruct
     (list-gateway-routes-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-gateway-routes-input-"))
   (limit common-lisp:nil :type
    (common-lisp:or list-gateway-routes-limit common-lisp:null))
   (mesh-name (common-lisp:error ":meshname is required") :type
    (common-lisp:or resource-name common-lisp:null))
   (mesh-owner common-lisp:nil :type
    (common-lisp:or account-id common-lisp:null))
   (next-token common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (virtual-gateway-name (common-lisp:error ":virtualgatewayname is required")
    :type (common-lisp:or resource-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-gateway-routes-input
                    'make-list-gateway-routes-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-gateway-routes-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-gateway-routes-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-gateway-routes-input))
   common-lisp:nil))
(common-lisp:deftype list-gateway-routes-limit () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defstruct
     (list-gateway-routes-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-gateway-routes-output-"))
   (gateway-routes (common-lisp:error ":gatewayroutes is required") :type
    (common-lisp:or gateway-route-list common-lisp:null))
   (next-token common-lisp:nil :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-gateway-routes-output
                    'make-list-gateway-routes-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-gateway-routes-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-gateway-routes-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'gateway-routes))
      (common-lisp:list
       (common-lisp:cons "gatewayRoutes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-gateway-routes-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-meshes-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-meshes-input-"))
   (limit common-lisp:nil :type
    (common-lisp:or list-meshes-limit common-lisp:null))
   (next-token common-lisp:nil :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-meshes-input 'make-list-meshes-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-meshes-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-meshes-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-meshes-input))
   common-lisp:nil))
(common-lisp:deftype list-meshes-limit () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defstruct
     (list-meshes-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-meshes-output-"))
   (meshes (common-lisp:error ":meshes is required") :type
    (common-lisp:or mesh-list common-lisp:null))
   (next-token common-lisp:nil :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-meshes-output 'make-list-meshes-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-meshes-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-meshes-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'meshes))
      (common-lisp:list
       (common-lisp:cons "meshes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-meshes-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-routes-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-routes-input-"))
   (limit common-lisp:nil :type
    (common-lisp:or list-routes-limit common-lisp:null))
   (mesh-name (common-lisp:error ":meshname is required") :type
    (common-lisp:or resource-name common-lisp:null))
   (mesh-owner common-lisp:nil :type
    (common-lisp:or account-id common-lisp:null))
   (next-token common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (virtual-router-name (common-lisp:error ":virtualroutername is required")
    :type (common-lisp:or resource-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-routes-input 'make-list-routes-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-routes-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-routes-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-routes-input))
   common-lisp:nil))
(common-lisp:deftype list-routes-limit () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defstruct
     (list-routes-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-routes-output-"))
   (next-token common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (routes (common-lisp:error ":routes is required") :type
    (common-lisp:or route-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-routes-output 'make-list-routes-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-routes-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-routes-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'routes))
      (common-lisp:list
       (common-lisp:cons "routes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-routes-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-tags-for-resource-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-tags-for-resource-input-"))
   (limit common-lisp:nil :type (common-lisp:or tags-limit common-lisp:null))
   (next-token common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (resource-arn (common-lisp:error ":resourcearn is required") :type
    (common-lisp:or arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-tags-for-resource-input
                    'make-list-tags-for-resource-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-tags-for-resource-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-tags-for-resource-output-"))
   (next-token common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (tags (common-lisp:error ":tags is required") :type
    (common-lisp:or tag-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-tags-for-resource-output
                    'make-list-tags-for-resource-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-virtual-gateways-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-virtual-gateways-input-"))
   (limit common-lisp:nil :type
    (common-lisp:or list-virtual-gateways-limit common-lisp:null))
   (mesh-name (common-lisp:error ":meshname is required") :type
    (common-lisp:or resource-name common-lisp:null))
   (mesh-owner common-lisp:nil :type
    (common-lisp:or account-id common-lisp:null))
   (next-token common-lisp:nil :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-virtual-gateways-input
                    'make-list-virtual-gateways-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-virtual-gateways-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-virtual-gateways-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-virtual-gateways-input))
   common-lisp:nil))
(common-lisp:deftype list-virtual-gateways-limit () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defstruct
     (list-virtual-gateways-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-virtual-gateways-output-"))
   (next-token common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (virtual-gateways (common-lisp:error ":virtualgateways is required") :type
    (common-lisp:or virtual-gateway-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-virtual-gateways-output
                    'make-list-virtual-gateways-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-virtual-gateways-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-virtual-gateways-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'virtual-gateways))
      (common-lisp:list
       (common-lisp:cons "virtualGateways"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-virtual-gateways-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-virtual-nodes-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-virtual-nodes-input-"))
   (limit common-lisp:nil :type
    (common-lisp:or list-virtual-nodes-limit common-lisp:null))
   (mesh-name (common-lisp:error ":meshname is required") :type
    (common-lisp:or resource-name common-lisp:null))
   (mesh-owner common-lisp:nil :type
    (common-lisp:or account-id common-lisp:null))
   (next-token common-lisp:nil :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-virtual-nodes-input 'make-list-virtual-nodes-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-virtual-nodes-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-virtual-nodes-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-virtual-nodes-input))
   common-lisp:nil))
(common-lisp:deftype list-virtual-nodes-limit () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defstruct
     (list-virtual-nodes-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-virtual-nodes-output-"))
   (next-token common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (virtual-nodes (common-lisp:error ":virtualnodes is required") :type
    (common-lisp:or virtual-node-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-virtual-nodes-output
                    'make-list-virtual-nodes-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-virtual-nodes-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-virtual-nodes-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'virtual-nodes))
      (common-lisp:list
       (common-lisp:cons "virtualNodes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-virtual-nodes-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-virtual-routers-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-virtual-routers-input-"))
   (limit common-lisp:nil :type
    (common-lisp:or list-virtual-routers-limit common-lisp:null))
   (mesh-name (common-lisp:error ":meshname is required") :type
    (common-lisp:or resource-name common-lisp:null))
   (mesh-owner common-lisp:nil :type
    (common-lisp:or account-id common-lisp:null))
   (next-token common-lisp:nil :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-virtual-routers-input
                    'make-list-virtual-routers-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-virtual-routers-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-virtual-routers-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-virtual-routers-input))
   common-lisp:nil))
(common-lisp:deftype list-virtual-routers-limit () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defstruct
     (list-virtual-routers-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-virtual-routers-output-"))
   (next-token common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (virtual-routers (common-lisp:error ":virtualrouters is required") :type
    (common-lisp:or virtual-router-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-virtual-routers-output
                    'make-list-virtual-routers-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-virtual-routers-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-virtual-routers-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'virtual-routers))
      (common-lisp:list
       (common-lisp:cons "virtualRouters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-virtual-routers-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-virtual-services-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-virtual-services-input-"))
   (limit common-lisp:nil :type
    (common-lisp:or list-virtual-services-limit common-lisp:null))
   (mesh-name (common-lisp:error ":meshname is required") :type
    (common-lisp:or resource-name common-lisp:null))
   (mesh-owner common-lisp:nil :type
    (common-lisp:or account-id common-lisp:null))
   (next-token common-lisp:nil :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-virtual-services-input
                    'make-list-virtual-services-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-virtual-services-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-virtual-services-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-virtual-services-input))
   common-lisp:nil))
(common-lisp:deftype list-virtual-services-limit () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defstruct
     (list-virtual-services-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-virtual-services-output-"))
   (next-token common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (virtual-services (common-lisp:error ":virtualservices is required") :type
    (common-lisp:or virtual-service-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-virtual-services-output
                    'make-list-virtual-services-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-virtual-services-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-virtual-services-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'virtual-services))
      (common-lisp:list
       (common-lisp:cons "virtualServices"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-virtual-services-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (listener (:copier common-lisp:nil) (:conc-name "struct-shape-listener-"))
   (connection-pool common-lisp:nil :type
    (common-lisp:or virtual-node-connection-pool common-lisp:null))
   (health-check common-lisp:nil :type
    (common-lisp:or health-check-policy common-lisp:null))
   (outlier-detection common-lisp:nil :type
    (common-lisp:or outlier-detection common-lisp:null))
   (port-mapping (common-lisp:error ":portmapping is required") :type
    (common-lisp:or port-mapping common-lisp:null))
   (timeout common-lisp:nil :type
    (common-lisp:or listener-timeout common-lisp:null))
   (tls common-lisp:nil :type (common-lisp:or listener-tls common-lisp:null)))
 (common-lisp:export (common-lisp:list 'listener 'make-listener))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input listener))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input listener))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'connection-pool))
      (common-lisp:list
       (common-lisp:cons "connectionPool"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'health-check))
      (common-lisp:list
       (common-lisp:cons "healthCheck"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'outlier-detection))
      (common-lisp:list
       (common-lisp:cons "outlierDetection"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'port-mapping))
      (common-lisp:list
       (common-lisp:cons "portMapping"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'timeout))
      (common-lisp:list
       (common-lisp:cons "timeout"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tls))
      (common-lisp:list
       (common-lisp:cons "tls"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input listener))
   common-lisp:nil))
(common-lisp:deftype listener-port () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defstruct
     (listener-timeout (:copier common-lisp:nil)
      (:conc-name "struct-shape-listener-timeout-"))
   (grpc common-lisp:nil :type (common-lisp:or grpc-timeout common-lisp:null))
   (http common-lisp:nil :type (common-lisp:or http-timeout common-lisp:null))
   (http2 common-lisp:nil :type (common-lisp:or http-timeout common-lisp:null))
   (tcp common-lisp:nil :type (common-lisp:or tcp-timeout common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'listener-timeout 'make-listener-timeout))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input listener-timeout))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input listener-timeout))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'grpc))
      (common-lisp:list
       (common-lisp:cons "grpc"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'http))
      (common-lisp:list
       (common-lisp:cons "http"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'http2))
      (common-lisp:list
       (common-lisp:cons "http2"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tcp))
      (common-lisp:list
       (common-lisp:cons "tcp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input listener-timeout))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (listener-tls (:copier common-lisp:nil)
      (:conc-name "struct-shape-listener-tls-"))
   (certificate (common-lisp:error ":certificate is required") :type
    (common-lisp:or listener-tls-certificate common-lisp:null))
   (mode (common-lisp:error ":mode is required") :type
    (common-lisp:or listener-tls-mode common-lisp:null))
   (validation common-lisp:nil :type
    (common-lisp:or listener-tls-validation-context common-lisp:null)))
 (common-lisp:export (common-lisp:list 'listener-tls 'make-listener-tls))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input listener-tls))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input listener-tls))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'certificate))
      (common-lisp:list
       (common-lisp:cons "certificate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'mode))
      (common-lisp:list
       (common-lisp:cons "mode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'validation))
      (common-lisp:list
       (common-lisp:cons "validation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input listener-tls))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (listener-tls-acm-certificate (:copier common-lisp:nil)
      (:conc-name "struct-shape-listener-tls-acm-certificate-"))
   (certificate-arn (common-lisp:error ":certificatearn is required") :type
    (common-lisp:or arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'listener-tls-acm-certificate
                    'make-listener-tls-acm-certificate))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          listener-tls-acm-certificate))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          listener-tls-acm-certificate))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'certificate-arn))
      (common-lisp:list
       (common-lisp:cons "certificateArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          listener-tls-acm-certificate))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (listener-tls-certificate (:copier common-lisp:nil)
      (:conc-name "struct-shape-listener-tls-certificate-"))
   (acm common-lisp:nil :type
    (common-lisp:or listener-tls-acm-certificate common-lisp:null))
   (file common-lisp:nil :type
    (common-lisp:or listener-tls-file-certificate common-lisp:null))
   (sds common-lisp:nil :type
    (common-lisp:or listener-tls-sds-certificate common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'listener-tls-certificate 'make-listener-tls-certificate))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          listener-tls-certificate))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          listener-tls-certificate))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'acm))
      (common-lisp:list
       (common-lisp:cons "acm"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'file))
      (common-lisp:list
       (common-lisp:cons "file"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sds))
      (common-lisp:list
       (common-lisp:cons "sds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          listener-tls-certificate))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (listener-tls-file-certificate (:copier common-lisp:nil)
      (:conc-name "struct-shape-listener-tls-file-certificate-"))
   (certificate-chain (common-lisp:error ":certificatechain is required") :type
    (common-lisp:or file-path common-lisp:null))
   (private-key (common-lisp:error ":privatekey is required") :type
    (common-lisp:or file-path common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'listener-tls-file-certificate
                    'make-listener-tls-file-certificate))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          listener-tls-file-certificate))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          listener-tls-file-certificate))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'certificate-chain))
      (common-lisp:list
       (common-lisp:cons "certificateChain"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'private-key))
      (common-lisp:list
       (common-lisp:cons "privateKey"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          listener-tls-file-certificate))
   common-lisp:nil))
(common-lisp:deftype listener-tls-mode () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (listener-tls-sds-certificate (:copier common-lisp:nil)
      (:conc-name "struct-shape-listener-tls-sds-certificate-"))
   (secret-name (common-lisp:error ":secretname is required") :type
    (common-lisp:or sds-secret-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'listener-tls-sds-certificate
                    'make-listener-tls-sds-certificate))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          listener-tls-sds-certificate))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          listener-tls-sds-certificate))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'secret-name))
      (common-lisp:list
       (common-lisp:cons "secretName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          listener-tls-sds-certificate))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (listener-tls-validation-context (:copier common-lisp:nil)
      (:conc-name "struct-shape-listener-tls-validation-context-"))
   (subject-alternative-names common-lisp:nil :type
    (common-lisp:or subject-alternative-names common-lisp:null))
   (trust (common-lisp:error ":trust is required") :type
    (common-lisp:or listener-tls-validation-context-trust common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'listener-tls-validation-context
                    'make-listener-tls-validation-context))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          listener-tls-validation-context))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          listener-tls-validation-context))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'subject-alternative-names))
      (common-lisp:list
       (common-lisp:cons "subjectAlternativeNames"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'trust))
      (common-lisp:list
       (common-lisp:cons "trust"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          listener-tls-validation-context))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (listener-tls-validation-context-trust (:copier common-lisp:nil)
      (:conc-name "struct-shape-listener-tls-validation-context-trust-"))
   (file common-lisp:nil :type
    (common-lisp:or tls-validation-context-file-trust common-lisp:null))
   (sds common-lisp:nil :type
    (common-lisp:or tls-validation-context-sds-trust common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'listener-tls-validation-context-trust
                    'make-listener-tls-validation-context-trust))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          listener-tls-validation-context-trust))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          listener-tls-validation-context-trust))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'file))
      (common-lisp:list
       (common-lisp:cons "file"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sds))
      (common-lisp:list
       (common-lisp:cons "sds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          listener-tls-validation-context-trust))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype listeners () '(trivial-types:proper-list listener))
 (common-lisp:defun make-listeners
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list listener))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (logging (:copier common-lisp:nil) (:conc-name "struct-shape-logging-"))
   (access-log common-lisp:nil :type
    (common-lisp:or access-log common-lisp:null)))
 (common-lisp:export (common-lisp:list 'logging 'make-logging))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input logging))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input logging))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'access-log))
      (common-lisp:list
       (common-lisp:cons "accessLog"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input logging))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (logging-format (:copier common-lisp:nil)
      (:conc-name "struct-shape-logging-format-"))
   (json common-lisp:nil :type (common-lisp:or json-format common-lisp:null))
   (text common-lisp:nil :type (common-lisp:or text-format common-lisp:null)))
 (common-lisp:export (common-lisp:list 'logging-format 'make-logging-format))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input logging-format))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input logging-format))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'json))
      (common-lisp:list
       (common-lisp:cons "json"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'text))
      (common-lisp:list
       (common-lisp:cons "text"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input logging-format))
   common-lisp:nil))
(common-lisp:deftype long () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defstruct
     (match-range (:copier common-lisp:nil)
      (:conc-name "struct-shape-match-range-"))
   (end (common-lisp:error ":end is required") :type
    (common-lisp:or long common-lisp:null))
   (start (common-lisp:error ":start is required") :type
    (common-lisp:or long common-lisp:null)))
 (common-lisp:export (common-lisp:list 'match-range 'make-match-range))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input match-range))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input match-range))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'end))
      (common-lisp:list
       (common-lisp:cons "end"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start))
      (common-lisp:list
       (common-lisp:cons "start"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input match-range))
   common-lisp:nil))
(common-lisp:deftype max-connections () 'common-lisp:integer)
(common-lisp:deftype max-pending-requests () 'common-lisp:integer)
(common-lisp:deftype max-requests () 'common-lisp:integer)
(common-lisp:deftype max-retries () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defstruct
     (mesh-data (:copier common-lisp:nil)
      (:conc-name "struct-shape-mesh-data-"))
   (mesh-name (common-lisp:error ":meshname is required") :type
    (common-lisp:or resource-name common-lisp:null))
   (metadata (common-lisp:error ":metadata is required") :type
    (common-lisp:or resource-metadata common-lisp:null))
   (spec (common-lisp:error ":spec is required") :type
    (common-lisp:or mesh-spec common-lisp:null))
   (status (common-lisp:error ":status is required") :type
    (common-lisp:or mesh-status common-lisp:null)))
 (common-lisp:export (common-lisp:list 'mesh-data 'make-mesh-data))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input mesh-data))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input mesh-data))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'mesh-name))
      (common-lisp:list
       (common-lisp:cons "meshName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metadata))
      (common-lisp:list
       (common-lisp:cons "metadata"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'spec))
      (common-lisp:list
       (common-lisp:cons "spec"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input mesh-data))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype mesh-list () '(trivial-types:proper-list mesh-ref))
 (common-lisp:defun make-mesh-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list mesh-ref))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (mesh-ref (:copier common-lisp:nil) (:conc-name "struct-shape-mesh-ref-"))
   (arn (common-lisp:error ":arn is required") :type
    (common-lisp:or arn common-lisp:null))
   (created-at (common-lisp:error ":createdat is required") :type
    (common-lisp:or timestamp common-lisp:null))
   (last-updated-at (common-lisp:error ":lastupdatedat is required") :type
    (common-lisp:or timestamp common-lisp:null))
   (mesh-name (common-lisp:error ":meshname is required") :type
    (common-lisp:or resource-name common-lisp:null))
   (mesh-owner (common-lisp:error ":meshowner is required") :type
    (common-lisp:or account-id common-lisp:null))
   (resource-owner (common-lisp:error ":resourceowner is required") :type
    (common-lisp:or account-id common-lisp:null))
   (version (common-lisp:error ":version is required") :type
    (common-lisp:or long common-lisp:null)))
 (common-lisp:export (common-lisp:list 'mesh-ref 'make-mesh-ref))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input mesh-ref))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input mesh-ref))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "createdAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-updated-at))
      (common-lisp:list
       (common-lisp:cons "lastUpdatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'mesh-name))
      (common-lisp:list
       (common-lisp:cons "meshName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'mesh-owner))
      (common-lisp:list
       (common-lisp:cons "meshOwner"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-owner))
      (common-lisp:list
       (common-lisp:cons "resourceOwner"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version))
      (common-lisp:list
       (common-lisp:cons "version"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input mesh-ref))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (mesh-service-discovery (:copier common-lisp:nil)
      (:conc-name "struct-shape-mesh-service-discovery-"))
   (ip-preference common-lisp:nil :type
    (common-lisp:or ip-preference common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'mesh-service-discovery 'make-mesh-service-discovery))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          mesh-service-discovery))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          mesh-service-discovery))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ip-preference))
      (common-lisp:list
       (common-lisp:cons "ipPreference"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          mesh-service-discovery))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (mesh-spec (:copier common-lisp:nil)
      (:conc-name "struct-shape-mesh-spec-"))
   (egress-filter common-lisp:nil :type
    (common-lisp:or egress-filter common-lisp:null))
   (service-discovery common-lisp:nil :type
    (common-lisp:or mesh-service-discovery common-lisp:null)))
 (common-lisp:export (common-lisp:list 'mesh-spec 'make-mesh-spec))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input mesh-spec))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input mesh-spec))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'egress-filter))
      (common-lisp:list
       (common-lisp:cons "egressFilter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service-discovery))
      (common-lisp:list
       (common-lisp:cons "serviceDiscovery"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input mesh-spec))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (mesh-status (:copier common-lisp:nil)
      (:conc-name "struct-shape-mesh-status-"))
   (status common-lisp:nil :type
    (common-lisp:or mesh-status-code common-lisp:null)))
 (common-lisp:export (common-lisp:list 'mesh-status 'make-mesh-status))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input mesh-status))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input mesh-status))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input mesh-status))
   common-lisp:nil))
(common-lisp:deftype mesh-status-code () 'common-lisp:string)
(common-lisp:deftype method-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition not-found-exception
     (appmesh-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       not-found-exception-message)))
 (common-lisp:export
  (common-lisp:list 'not-found-exception 'not-found-exception-message)))
(common-lisp:progn
 (common-lisp:defstruct
     (outlier-detection (:copier common-lisp:nil)
      (:conc-name "struct-shape-outlier-detection-"))
   (base-ejection-duration
    (common-lisp:error ":baseejectionduration is required") :type
    (common-lisp:or duration common-lisp:null))
   (interval (common-lisp:error ":interval is required") :type
    (common-lisp:or duration common-lisp:null))
   (max-ejection-percent (common-lisp:error ":maxejectionpercent is required")
    :type
    (common-lisp:or outlier-detection-max-ejection-percent common-lisp:null))
   (max-server-errors (common-lisp:error ":maxservererrors is required") :type
    (common-lisp:or outlier-detection-max-server-errors common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'outlier-detection 'make-outlier-detection))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input outlier-detection))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input outlier-detection))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'base-ejection-duration))
      (common-lisp:list
       (common-lisp:cons "baseEjectionDuration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'interval))
      (common-lisp:list
       (common-lisp:cons "interval"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'max-ejection-percent))
      (common-lisp:list
       (common-lisp:cons "maxEjectionPercent"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-server-errors))
      (common-lisp:list
       (common-lisp:cons "maxServerErrors"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input outlier-detection))
   common-lisp:nil))
(common-lisp:deftype outlier-detection-max-ejection-percent ()
  'common-lisp:integer)
(common-lisp:deftype outlier-detection-max-server-errors ()
  'common-lisp:integer)
(common-lisp:deftype percent-int () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defstruct
     (port-mapping (:copier common-lisp:nil)
      (:conc-name "struct-shape-port-mapping-"))
   (port (common-lisp:error ":port is required") :type
    (common-lisp:or port-number common-lisp:null))
   (protocol (common-lisp:error ":protocol is required") :type
    (common-lisp:or port-protocol common-lisp:null)))
 (common-lisp:export (common-lisp:list 'port-mapping 'make-port-mapping))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input port-mapping))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input port-mapping))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'port))
      (common-lisp:list
       (common-lisp:cons "port"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'protocol))
      (common-lisp:list
       (common-lisp:cons "protocol"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input port-mapping))
   common-lisp:nil))
(common-lisp:deftype port-number () 'common-lisp:integer)
(common-lisp:deftype port-protocol () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype port-set () '(trivial-types:proper-list port-number))
 (common-lisp:defun make-port-set
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list port-number))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (query-parameter-match (:copier common-lisp:nil)
      (:conc-name "struct-shape-query-parameter-match-"))
   (exact common-lisp:nil :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'query-parameter-match 'make-query-parameter-match))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          query-parameter-match))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          query-parameter-match))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'exact))
      (common-lisp:list
       (common-lisp:cons "exact"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          query-parameter-match))
   common-lisp:nil))
(common-lisp:deftype query-parameter-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition resource-in-use-exception
     (appmesh-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       resource-in-use-exception-message)))
 (common-lisp:export
  (common-lisp:list 'resource-in-use-exception
                    'resource-in-use-exception-message)))
(common-lisp:progn
 (common-lisp:defstruct
     (resource-metadata (:copier common-lisp:nil)
      (:conc-name "struct-shape-resource-metadata-"))
   (arn (common-lisp:error ":arn is required") :type
    (common-lisp:or arn common-lisp:null))
   (created-at (common-lisp:error ":createdat is required") :type
    (common-lisp:or timestamp common-lisp:null))
   (last-updated-at (common-lisp:error ":lastupdatedat is required") :type
    (common-lisp:or timestamp common-lisp:null))
   (mesh-owner (common-lisp:error ":meshowner is required") :type
    (common-lisp:or account-id common-lisp:null))
   (resource-owner (common-lisp:error ":resourceowner is required") :type
    (common-lisp:or account-id common-lisp:null))
   (uid (common-lisp:error ":uid is required") :type
    (common-lisp:or string common-lisp:null))
   (version (common-lisp:error ":version is required") :type
    (common-lisp:or long common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'resource-metadata 'make-resource-metadata))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input resource-metadata))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input resource-metadata))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "createdAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-updated-at))
      (common-lisp:list
       (common-lisp:cons "lastUpdatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'mesh-owner))
      (common-lisp:list
       (common-lisp:cons "meshOwner"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-owner))
      (common-lisp:list
       (common-lisp:cons "resourceOwner"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'uid))
      (common-lisp:list
       (common-lisp:cons "uid"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version))
      (common-lisp:list
       (common-lisp:cons "version"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input resource-metadata))
   common-lisp:nil))
(common-lisp:deftype resource-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (route-data (:copier common-lisp:nil)
      (:conc-name "struct-shape-route-data-"))
   (mesh-name (common-lisp:error ":meshname is required") :type
    (common-lisp:or resource-name common-lisp:null))
   (metadata (common-lisp:error ":metadata is required") :type
    (common-lisp:or resource-metadata common-lisp:null))
   (route-name (common-lisp:error ":routename is required") :type
    (common-lisp:or resource-name common-lisp:null))
   (spec (common-lisp:error ":spec is required") :type
    (common-lisp:or route-spec common-lisp:null))
   (status (common-lisp:error ":status is required") :type
    (common-lisp:or route-status common-lisp:null))
   (virtual-router-name (common-lisp:error ":virtualroutername is required")
    :type (common-lisp:or resource-name common-lisp:null)))
 (common-lisp:export (common-lisp:list 'route-data 'make-route-data))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input route-data))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input route-data))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'mesh-name))
      (common-lisp:list
       (common-lisp:cons "meshName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metadata))
      (common-lisp:list
       (common-lisp:cons "metadata"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'route-name))
      (common-lisp:list
       (common-lisp:cons "routeName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'spec))
      (common-lisp:list
       (common-lisp:cons "spec"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'virtual-router-name))
      (common-lisp:list
       (common-lisp:cons "virtualRouterName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input route-data))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype route-list () '(trivial-types:proper-list route-ref))
 (common-lisp:defun make-route-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list route-ref))
   aws-sdk/generator/shape::members))
(common-lisp:deftype route-priority () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defstruct
     (route-ref (:copier common-lisp:nil)
      (:conc-name "struct-shape-route-ref-"))
   (arn (common-lisp:error ":arn is required") :type
    (common-lisp:or arn common-lisp:null))
   (created-at (common-lisp:error ":createdat is required") :type
    (common-lisp:or timestamp common-lisp:null))
   (last-updated-at (common-lisp:error ":lastupdatedat is required") :type
    (common-lisp:or timestamp common-lisp:null))
   (mesh-name (common-lisp:error ":meshname is required") :type
    (common-lisp:or resource-name common-lisp:null))
   (mesh-owner (common-lisp:error ":meshowner is required") :type
    (common-lisp:or account-id common-lisp:null))
   (resource-owner (common-lisp:error ":resourceowner is required") :type
    (common-lisp:or account-id common-lisp:null))
   (route-name (common-lisp:error ":routename is required") :type
    (common-lisp:or resource-name common-lisp:null))
   (version (common-lisp:error ":version is required") :type
    (common-lisp:or long common-lisp:null))
   (virtual-router-name (common-lisp:error ":virtualroutername is required")
    :type (common-lisp:or resource-name common-lisp:null)))
 (common-lisp:export (common-lisp:list 'route-ref 'make-route-ref))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input route-ref))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input route-ref))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "createdAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-updated-at))
      (common-lisp:list
       (common-lisp:cons "lastUpdatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'mesh-name))
      (common-lisp:list
       (common-lisp:cons "meshName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'mesh-owner))
      (common-lisp:list
       (common-lisp:cons "meshOwner"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-owner))
      (common-lisp:list
       (common-lisp:cons "resourceOwner"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'route-name))
      (common-lisp:list
       (common-lisp:cons "routeName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version))
      (common-lisp:list
       (common-lisp:cons "version"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'virtual-router-name))
      (common-lisp:list
       (common-lisp:cons "virtualRouterName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input route-ref))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (route-spec (:copier common-lisp:nil)
      (:conc-name "struct-shape-route-spec-"))
   (grpc-route common-lisp:nil :type
    (common-lisp:or grpc-route common-lisp:null))
   (http2route common-lisp:nil :type
    (common-lisp:or http-route common-lisp:null))
   (http-route common-lisp:nil :type
    (common-lisp:or http-route common-lisp:null))
   (priority common-lisp:nil :type
    (common-lisp:or route-priority common-lisp:null))
   (tcp-route common-lisp:nil :type
    (common-lisp:or tcp-route common-lisp:null)))
 (common-lisp:export (common-lisp:list 'route-spec 'make-route-spec))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input route-spec))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input route-spec))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'grpc-route))
      (common-lisp:list
       (common-lisp:cons "grpcRoute"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'http2route))
      (common-lisp:list
       (common-lisp:cons "http2Route"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'http-route))
      (common-lisp:list
       (common-lisp:cons "httpRoute"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'priority))
      (common-lisp:list
       (common-lisp:cons "priority"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tcp-route))
      (common-lisp:list
       (common-lisp:cons "tcpRoute"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input route-spec))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (route-status (:copier common-lisp:nil)
      (:conc-name "struct-shape-route-status-"))
   (status (common-lisp:error ":status is required") :type
    (common-lisp:or route-status-code common-lisp:null)))
 (common-lisp:export (common-lisp:list 'route-status 'make-route-status))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input route-status))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input route-status))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input route-status))
   common-lisp:nil))
(common-lisp:deftype route-status-code () 'common-lisp:string)
(common-lisp:deftype sds-secret-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (service-discovery (:copier common-lisp:nil)
      (:conc-name "struct-shape-service-discovery-"))
   (aws-cloud-map common-lisp:nil :type
    (common-lisp:or aws-cloud-map-service-discovery common-lisp:null))
   (dns common-lisp:nil :type
    (common-lisp:or dns-service-discovery common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'service-discovery 'make-service-discovery))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input service-discovery))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input service-discovery))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'aws-cloud-map))
      (common-lisp:list
       (common-lisp:cons "awsCloudMap"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dns))
      (common-lisp:list
       (common-lisp:cons "dns"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input service-discovery))
   common-lisp:nil))
(common-lisp:deftype service-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition service-unavailable-exception
     (appmesh-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       service-unavailable-exception-message)))
 (common-lisp:export
  (common-lisp:list 'service-unavailable-exception
                    'service-unavailable-exception-message)))
(common-lisp:deftype string () 'common-lisp:string)
(common-lisp:deftype subject-alternative-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype subject-alternative-name-list ()
   '(trivial-types:proper-list subject-alternative-name))
 (common-lisp:defun make-subject-alternative-name-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            subject-alternative-name))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (subject-alternative-name-matchers (:copier common-lisp:nil)
      (:conc-name "struct-shape-subject-alternative-name-matchers-"))
   (exact (common-lisp:error ":exact is required") :type
    (common-lisp:or subject-alternative-name-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'subject-alternative-name-matchers
                    'make-subject-alternative-name-matchers))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          subject-alternative-name-matchers))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          subject-alternative-name-matchers))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'exact))
      (common-lisp:list
       (common-lisp:cons "exact"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          subject-alternative-name-matchers))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (subject-alternative-names (:copier common-lisp:nil)
      (:conc-name "struct-shape-subject-alternative-names-"))
   (match (common-lisp:error ":match is required") :type
    (common-lisp:or subject-alternative-name-matchers common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'subject-alternative-names
                    'make-subject-alternative-names))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          subject-alternative-names))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          subject-alternative-names))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'match))
      (common-lisp:list
       (common-lisp:cons "match"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          subject-alternative-names))
   common-lisp:nil))
(common-lisp:deftype suffix-hostname () 'common-lisp:string)
(common-lisp:deftype tag-key () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype tag-key-list () '(trivial-types:proper-list tag-key))
 (common-lisp:defun make-tag-key-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list tag-key))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype tag-list () '(trivial-types:proper-list tag-ref))
 (common-lisp:defun make-tag-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list tag-ref))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (tag-ref (:copier common-lisp:nil) (:conc-name "struct-shape-tag-ref-"))
   (key (common-lisp:error ":key is required") :type
    (common-lisp:or tag-key common-lisp:null))
   (value (common-lisp:error ":value is required") :type
    (common-lisp:or tag-value common-lisp:null)))
 (common-lisp:export (common-lisp:list 'tag-ref 'make-tag-ref))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input tag-ref))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input tag-ref))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key))
      (common-lisp:list
       (common-lisp:cons "key"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input tag-ref))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (tag-resource-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-tag-resource-input-"))
   (resource-arn (common-lisp:error ":resourcearn is required") :type
    (common-lisp:or arn common-lisp:null))
   (tags (common-lisp:error ":tags is required") :type
    (common-lisp:or tag-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'tag-resource-input 'make-tag-resource-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input tag-resource-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input tag-resource-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input tag-resource-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (tag-resource-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-tag-resource-output-")))
 (common-lisp:export
  (common-lisp:list 'tag-resource-output 'make-tag-resource-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input tag-resource-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input tag-resource-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input tag-resource-output))
   common-lisp:nil))
(common-lisp:deftype tag-value () 'common-lisp:string)
(common-lisp:deftype tags-limit () 'common-lisp:integer)
(common-lisp:deftype tcp-retry-policy-event () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype tcp-retry-policy-events ()
   '(trivial-types:proper-list tcp-retry-policy-event))
 (common-lisp:defun make-tcp-retry-policy-events
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list tcp-retry-policy-event))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (tcp-route (:copier common-lisp:nil)
      (:conc-name "struct-shape-tcp-route-"))
   (action (common-lisp:error ":action is required") :type
    (common-lisp:or tcp-route-action common-lisp:null))
   (match common-lisp:nil :type
    (common-lisp:or tcp-route-match common-lisp:null))
   (timeout common-lisp:nil :type
    (common-lisp:or tcp-timeout common-lisp:null)))
 (common-lisp:export (common-lisp:list 'tcp-route 'make-tcp-route))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input tcp-route))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input tcp-route))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'action))
      (common-lisp:list
       (common-lisp:cons "action"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'match))
      (common-lisp:list
       (common-lisp:cons "match"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'timeout))
      (common-lisp:list
       (common-lisp:cons "timeout"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input tcp-route))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (tcp-route-action (:copier common-lisp:nil)
      (:conc-name "struct-shape-tcp-route-action-"))
   (weighted-targets (common-lisp:error ":weightedtargets is required") :type
    (common-lisp:or weighted-targets common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'tcp-route-action 'make-tcp-route-action))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input tcp-route-action))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input tcp-route-action))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'weighted-targets))
      (common-lisp:list
       (common-lisp:cons "weightedTargets"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input tcp-route-action))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (tcp-route-match (:copier common-lisp:nil)
      (:conc-name "struct-shape-tcp-route-match-"))
   (port common-lisp:nil :type
    (common-lisp:or listener-port common-lisp:null)))
 (common-lisp:export (common-lisp:list 'tcp-route-match 'make-tcp-route-match))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input tcp-route-match))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input tcp-route-match))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'port))
      (common-lisp:list
       (common-lisp:cons "port"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input tcp-route-match))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (tcp-timeout (:copier common-lisp:nil)
      (:conc-name "struct-shape-tcp-timeout-"))
   (idle common-lisp:nil :type (common-lisp:or duration common-lisp:null)))
 (common-lisp:export (common-lisp:list 'tcp-timeout 'make-tcp-timeout))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input tcp-timeout))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input tcp-timeout))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'idle))
      (common-lisp:list
       (common-lisp:cons "idle"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input tcp-timeout))
   common-lisp:nil))
(common-lisp:deftype text-format () 'common-lisp:string)
(common-lisp:deftype timestamp () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (tls-validation-context (:copier common-lisp:nil)
      (:conc-name "struct-shape-tls-validation-context-"))
   (subject-alternative-names common-lisp:nil :type
    (common-lisp:or subject-alternative-names common-lisp:null))
   (trust (common-lisp:error ":trust is required") :type
    (common-lisp:or tls-validation-context-trust common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'tls-validation-context 'make-tls-validation-context))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          tls-validation-context))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          tls-validation-context))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'subject-alternative-names))
      (common-lisp:list
       (common-lisp:cons "subjectAlternativeNames"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'trust))
      (common-lisp:list
       (common-lisp:cons "trust"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          tls-validation-context))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (tls-validation-context-acm-trust (:copier common-lisp:nil)
      (:conc-name "struct-shape-tls-validation-context-acm-trust-"))
   (certificate-authority-arns
    (common-lisp:error ":certificateauthorityarns is required") :type
    (common-lisp:or certificate-authority-arns common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'tls-validation-context-acm-trust
                    'make-tls-validation-context-acm-trust))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          tls-validation-context-acm-trust))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          tls-validation-context-acm-trust))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'certificate-authority-arns))
      (common-lisp:list
       (common-lisp:cons "certificateAuthorityArns"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          tls-validation-context-acm-trust))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (tls-validation-context-file-trust (:copier common-lisp:nil)
      (:conc-name "struct-shape-tls-validation-context-file-trust-"))
   (certificate-chain (common-lisp:error ":certificatechain is required") :type
    (common-lisp:or file-path common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'tls-validation-context-file-trust
                    'make-tls-validation-context-file-trust))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          tls-validation-context-file-trust))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          tls-validation-context-file-trust))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'certificate-chain))
      (common-lisp:list
       (common-lisp:cons "certificateChain"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          tls-validation-context-file-trust))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (tls-validation-context-sds-trust (:copier common-lisp:nil)
      (:conc-name "struct-shape-tls-validation-context-sds-trust-"))
   (secret-name (common-lisp:error ":secretname is required") :type
    (common-lisp:or sds-secret-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'tls-validation-context-sds-trust
                    'make-tls-validation-context-sds-trust))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          tls-validation-context-sds-trust))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          tls-validation-context-sds-trust))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'secret-name))
      (common-lisp:list
       (common-lisp:cons "secretName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          tls-validation-context-sds-trust))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (tls-validation-context-trust (:copier common-lisp:nil)
      (:conc-name "struct-shape-tls-validation-context-trust-"))
   (acm common-lisp:nil :type
    (common-lisp:or tls-validation-context-acm-trust common-lisp:null))
   (file common-lisp:nil :type
    (common-lisp:or tls-validation-context-file-trust common-lisp:null))
   (sds common-lisp:nil :type
    (common-lisp:or tls-validation-context-sds-trust common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'tls-validation-context-trust
                    'make-tls-validation-context-trust))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          tls-validation-context-trust))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          tls-validation-context-trust))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'acm))
      (common-lisp:list
       (common-lisp:cons "acm"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'file))
      (common-lisp:list
       (common-lisp:cons "file"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sds))
      (common-lisp:list
       (common-lisp:cons "sds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          tls-validation-context-trust))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition too-many-requests-exception
     (appmesh-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       too-many-requests-exception-message)))
 (common-lisp:export
  (common-lisp:list 'too-many-requests-exception
                    'too-many-requests-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition too-many-tags-exception
     (appmesh-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       too-many-tags-exception-message)))
 (common-lisp:export
  (common-lisp:list 'too-many-tags-exception 'too-many-tags-exception-message)))
(common-lisp:progn
 (common-lisp:defstruct
     (untag-resource-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-untag-resource-input-"))
   (resource-arn (common-lisp:error ":resourcearn is required") :type
    (common-lisp:or arn common-lisp:null))
   (tag-keys (common-lisp:error ":tagkeys is required") :type
    (common-lisp:or tag-key-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'untag-resource-input 'make-untag-resource-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input untag-resource-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input untag-resource-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tag-keys))
      (common-lisp:list
       (common-lisp:cons "tagKeys"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input untag-resource-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (untag-resource-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-untag-resource-output-")))
 (common-lisp:export
  (common-lisp:list 'untag-resource-output 'make-untag-resource-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-gateway-route-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-gateway-route-input-"))
   (client-token common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (gateway-route-name (common-lisp:error ":gatewayroutename is required")
    :type (common-lisp:or resource-name common-lisp:null))
   (mesh-name (common-lisp:error ":meshname is required") :type
    (common-lisp:or resource-name common-lisp:null))
   (mesh-owner common-lisp:nil :type
    (common-lisp:or account-id common-lisp:null))
   (spec (common-lisp:error ":spec is required") :type
    (common-lisp:or gateway-route-spec common-lisp:null))
   (virtual-gateway-name (common-lisp:error ":virtualgatewayname is required")
    :type (common-lisp:or resource-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-gateway-route-input
                    'make-update-gateway-route-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-gateway-route-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-gateway-route-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "clientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'spec))
      (common-lisp:list
       (common-lisp:cons "spec"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-gateway-route-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-gateway-route-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-gateway-route-output-"))
   (gateway-route (common-lisp:error ":gatewayroute is required") :type
    (common-lisp:or gateway-route-data common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-gateway-route-output
                    'make-update-gateway-route-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-gateway-route-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-gateway-route-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'gateway-route))
      (common-lisp:list
       (common-lisp:cons "gatewayRoute"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-gateway-route-output))
   (common-lisp:slot-value aws-sdk/generator/shape::input 'gateway-route)))
(common-lisp:progn
 (common-lisp:defstruct
     (update-mesh-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-mesh-input-"))
   (client-token common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (mesh-name (common-lisp:error ":meshname is required") :type
    (common-lisp:or resource-name common-lisp:null))
   (spec common-lisp:nil :type (common-lisp:or mesh-spec common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-mesh-input 'make-update-mesh-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input update-mesh-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input update-mesh-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "clientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'spec))
      (common-lisp:list
       (common-lisp:cons "spec"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input update-mesh-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-mesh-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-mesh-output-"))
   (mesh (common-lisp:error ":mesh is required") :type
    (common-lisp:or mesh-data common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-mesh-output 'make-update-mesh-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input update-mesh-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input update-mesh-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'mesh))
      (common-lisp:list
       (common-lisp:cons "mesh"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input update-mesh-output))
   (common-lisp:slot-value aws-sdk/generator/shape::input 'mesh)))
(common-lisp:progn
 (common-lisp:defstruct
     (update-route-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-route-input-"))
   (client-token common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (mesh-name (common-lisp:error ":meshname is required") :type
    (common-lisp:or resource-name common-lisp:null))
   (mesh-owner common-lisp:nil :type
    (common-lisp:or account-id common-lisp:null))
   (route-name (common-lisp:error ":routename is required") :type
    (common-lisp:or resource-name common-lisp:null))
   (spec (common-lisp:error ":spec is required") :type
    (common-lisp:or route-spec common-lisp:null))
   (virtual-router-name (common-lisp:error ":virtualroutername is required")
    :type (common-lisp:or resource-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-route-input 'make-update-route-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input update-route-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input update-route-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "clientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'spec))
      (common-lisp:list
       (common-lisp:cons "spec"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input update-route-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-route-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-route-output-"))
   (route (common-lisp:error ":route is required") :type
    (common-lisp:or route-data common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-route-output 'make-update-route-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input update-route-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input update-route-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'route))
      (common-lisp:list
       (common-lisp:cons "route"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input update-route-output))
   (common-lisp:slot-value aws-sdk/generator/shape::input 'route)))
(common-lisp:progn
 (common-lisp:defstruct
     (update-virtual-gateway-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-virtual-gateway-input-"))
   (client-token common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (mesh-name (common-lisp:error ":meshname is required") :type
    (common-lisp:or resource-name common-lisp:null))
   (mesh-owner common-lisp:nil :type
    (common-lisp:or account-id common-lisp:null))
   (spec (common-lisp:error ":spec is required") :type
    (common-lisp:or virtual-gateway-spec common-lisp:null))
   (virtual-gateway-name (common-lisp:error ":virtualgatewayname is required")
    :type (common-lisp:or resource-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-virtual-gateway-input
                    'make-update-virtual-gateway-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-virtual-gateway-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-virtual-gateway-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "clientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'spec))
      (common-lisp:list
       (common-lisp:cons "spec"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-virtual-gateway-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-virtual-gateway-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-virtual-gateway-output-"))
   (virtual-gateway (common-lisp:error ":virtualgateway is required") :type
    (common-lisp:or virtual-gateway-data common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-virtual-gateway-output
                    'make-update-virtual-gateway-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-virtual-gateway-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-virtual-gateway-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'virtual-gateway))
      (common-lisp:list
       (common-lisp:cons "virtualGateway"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-virtual-gateway-output))
   (common-lisp:slot-value aws-sdk/generator/shape::input 'virtual-gateway)))
(common-lisp:progn
 (common-lisp:defstruct
     (update-virtual-node-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-virtual-node-input-"))
   (client-token common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (mesh-name (common-lisp:error ":meshname is required") :type
    (common-lisp:or resource-name common-lisp:null))
   (mesh-owner common-lisp:nil :type
    (common-lisp:or account-id common-lisp:null))
   (spec (common-lisp:error ":spec is required") :type
    (common-lisp:or virtual-node-spec common-lisp:null))
   (virtual-node-name (common-lisp:error ":virtualnodename is required") :type
    (common-lisp:or resource-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-virtual-node-input
                    'make-update-virtual-node-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-virtual-node-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-virtual-node-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "clientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'spec))
      (common-lisp:list
       (common-lisp:cons "spec"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-virtual-node-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-virtual-node-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-virtual-node-output-"))
   (virtual-node (common-lisp:error ":virtualnode is required") :type
    (common-lisp:or virtual-node-data common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-virtual-node-output
                    'make-update-virtual-node-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-virtual-node-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-virtual-node-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'virtual-node))
      (common-lisp:list
       (common-lisp:cons "virtualNode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-virtual-node-output))
   (common-lisp:slot-value aws-sdk/generator/shape::input 'virtual-node)))
(common-lisp:progn
 (common-lisp:defstruct
     (update-virtual-router-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-virtual-router-input-"))
   (client-token common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (mesh-name (common-lisp:error ":meshname is required") :type
    (common-lisp:or resource-name common-lisp:null))
   (mesh-owner common-lisp:nil :type
    (common-lisp:or account-id common-lisp:null))
   (spec (common-lisp:error ":spec is required") :type
    (common-lisp:or virtual-router-spec common-lisp:null))
   (virtual-router-name (common-lisp:error ":virtualroutername is required")
    :type (common-lisp:or resource-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-virtual-router-input
                    'make-update-virtual-router-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-virtual-router-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-virtual-router-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "clientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'spec))
      (common-lisp:list
       (common-lisp:cons "spec"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-virtual-router-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-virtual-router-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-virtual-router-output-"))
   (virtual-router (common-lisp:error ":virtualrouter is required") :type
    (common-lisp:or virtual-router-data common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-virtual-router-output
                    'make-update-virtual-router-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-virtual-router-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-virtual-router-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'virtual-router))
      (common-lisp:list
       (common-lisp:cons "virtualRouter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-virtual-router-output))
   (common-lisp:slot-value aws-sdk/generator/shape::input 'virtual-router)))
(common-lisp:progn
 (common-lisp:defstruct
     (update-virtual-service-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-virtual-service-input-"))
   (client-token common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (mesh-name (common-lisp:error ":meshname is required") :type
    (common-lisp:or resource-name common-lisp:null))
   (mesh-owner common-lisp:nil :type
    (common-lisp:or account-id common-lisp:null))
   (spec (common-lisp:error ":spec is required") :type
    (common-lisp:or virtual-service-spec common-lisp:null))
   (virtual-service-name (common-lisp:error ":virtualservicename is required")
    :type (common-lisp:or service-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-virtual-service-input
                    'make-update-virtual-service-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-virtual-service-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-virtual-service-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "clientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'spec))
      (common-lisp:list
       (common-lisp:cons "spec"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-virtual-service-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-virtual-service-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-virtual-service-output-"))
   (virtual-service (common-lisp:error ":virtualservice is required") :type
    (common-lisp:or virtual-service-data common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-virtual-service-output
                    'make-update-virtual-service-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-virtual-service-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-virtual-service-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'virtual-service))
      (common-lisp:list
       (common-lisp:cons "virtualService"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-virtual-service-output))
   (common-lisp:slot-value aws-sdk/generator/shape::input 'virtual-service)))
(common-lisp:progn
 (common-lisp:defstruct
     (virtual-gateway-access-log (:copier common-lisp:nil)
      (:conc-name "struct-shape-virtual-gateway-access-log-"))
   (file common-lisp:nil :type
    (common-lisp:or virtual-gateway-file-access-log common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'virtual-gateway-access-log
                    'make-virtual-gateway-access-log))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          virtual-gateway-access-log))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          virtual-gateway-access-log))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'file))
      (common-lisp:list
       (common-lisp:cons "file"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          virtual-gateway-access-log))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (virtual-gateway-backend-defaults (:copier common-lisp:nil)
      (:conc-name "struct-shape-virtual-gateway-backend-defaults-"))
   (client-policy common-lisp:nil :type
    (common-lisp:or virtual-gateway-client-policy common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'virtual-gateway-backend-defaults
                    'make-virtual-gateway-backend-defaults))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          virtual-gateway-backend-defaults))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          virtual-gateway-backend-defaults))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-policy))
      (common-lisp:list
       (common-lisp:cons "clientPolicy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          virtual-gateway-backend-defaults))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype virtual-gateway-certificate-authority-arns ()
   '(trivial-types:proper-list arn))
 (common-lisp:defun make-virtual-gateway-certificate-authority-arns
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list arn))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (virtual-gateway-client-policy (:copier common-lisp:nil)
      (:conc-name "struct-shape-virtual-gateway-client-policy-"))
   (tls common-lisp:nil :type
    (common-lisp:or virtual-gateway-client-policy-tls common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'virtual-gateway-client-policy
                    'make-virtual-gateway-client-policy))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          virtual-gateway-client-policy))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          virtual-gateway-client-policy))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tls))
      (common-lisp:list
       (common-lisp:cons "tls"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          virtual-gateway-client-policy))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (virtual-gateway-client-policy-tls (:copier common-lisp:nil)
      (:conc-name "struct-shape-virtual-gateway-client-policy-tls-"))
   (certificate common-lisp:nil :type
    (common-lisp:or virtual-gateway-client-tls-certificate common-lisp:null))
   (enforce common-lisp:nil :type (common-lisp:or boolean common-lisp:null))
   (ports common-lisp:nil :type (common-lisp:or port-set common-lisp:null))
   (validation (common-lisp:error ":validation is required") :type
    (common-lisp:or virtual-gateway-tls-validation-context common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'virtual-gateway-client-policy-tls
                    'make-virtual-gateway-client-policy-tls))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          virtual-gateway-client-policy-tls))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          virtual-gateway-client-policy-tls))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'certificate))
      (common-lisp:list
       (common-lisp:cons "certificate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'enforce))
      (common-lisp:list
       (common-lisp:cons "enforce"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ports))
      (common-lisp:list
       (common-lisp:cons "ports"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'validation))
      (common-lisp:list
       (common-lisp:cons "validation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          virtual-gateway-client-policy-tls))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (virtual-gateway-client-tls-certificate (:copier common-lisp:nil)
      (:conc-name "struct-shape-virtual-gateway-client-tls-certificate-"))
   (file common-lisp:nil :type
    (common-lisp:or virtual-gateway-listener-tls-file-certificate
                    common-lisp:null))
   (sds common-lisp:nil :type
    (common-lisp:or virtual-gateway-listener-tls-sds-certificate
                    common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'virtual-gateway-client-tls-certificate
                    'make-virtual-gateway-client-tls-certificate))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          virtual-gateway-client-tls-certificate))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          virtual-gateway-client-tls-certificate))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'file))
      (common-lisp:list
       (common-lisp:cons "file"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sds))
      (common-lisp:list
       (common-lisp:cons "sds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          virtual-gateway-client-tls-certificate))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (virtual-gateway-connection-pool (:copier common-lisp:nil)
      (:conc-name "struct-shape-virtual-gateway-connection-pool-"))
   (grpc common-lisp:nil :type
    (common-lisp:or virtual-gateway-grpc-connection-pool common-lisp:null))
   (http common-lisp:nil :type
    (common-lisp:or virtual-gateway-http-connection-pool common-lisp:null))
   (http2 common-lisp:nil :type
    (common-lisp:or virtual-gateway-http2connection-pool common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'virtual-gateway-connection-pool
                    'make-virtual-gateway-connection-pool))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          virtual-gateway-connection-pool))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          virtual-gateway-connection-pool))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'grpc))
      (common-lisp:list
       (common-lisp:cons "grpc"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'http))
      (common-lisp:list
       (common-lisp:cons "http"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'http2))
      (common-lisp:list
       (common-lisp:cons "http2"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          virtual-gateway-connection-pool))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (virtual-gateway-data (:copier common-lisp:nil)
      (:conc-name "struct-shape-virtual-gateway-data-"))
   (mesh-name (common-lisp:error ":meshname is required") :type
    (common-lisp:or resource-name common-lisp:null))
   (metadata (common-lisp:error ":metadata is required") :type
    (common-lisp:or resource-metadata common-lisp:null))
   (spec (common-lisp:error ":spec is required") :type
    (common-lisp:or virtual-gateway-spec common-lisp:null))
   (status (common-lisp:error ":status is required") :type
    (common-lisp:or virtual-gateway-status common-lisp:null))
   (virtual-gateway-name (common-lisp:error ":virtualgatewayname is required")
    :type (common-lisp:or resource-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'virtual-gateway-data 'make-virtual-gateway-data))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input virtual-gateway-data))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input virtual-gateway-data))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'mesh-name))
      (common-lisp:list
       (common-lisp:cons "meshName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metadata))
      (common-lisp:list
       (common-lisp:cons "metadata"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'spec))
      (common-lisp:list
       (common-lisp:cons "spec"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'virtual-gateway-name))
      (common-lisp:list
       (common-lisp:cons "virtualGatewayName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input virtual-gateway-data))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (virtual-gateway-file-access-log (:copier common-lisp:nil)
      (:conc-name "struct-shape-virtual-gateway-file-access-log-"))
   (format common-lisp:nil :type
    (common-lisp:or logging-format common-lisp:null))
   (path (common-lisp:error ":path is required") :type
    (common-lisp:or file-path common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'virtual-gateway-file-access-log
                    'make-virtual-gateway-file-access-log))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          virtual-gateway-file-access-log))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          virtual-gateway-file-access-log))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'format))
      (common-lisp:list
       (common-lisp:cons "format"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'path))
      (common-lisp:list
       (common-lisp:cons "path"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          virtual-gateway-file-access-log))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (virtual-gateway-grpc-connection-pool (:copier common-lisp:nil)
      (:conc-name "struct-shape-virtual-gateway-grpc-connection-pool-"))
   (max-requests (common-lisp:error ":maxrequests is required") :type
    (common-lisp:or max-requests common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'virtual-gateway-grpc-connection-pool
                    'make-virtual-gateway-grpc-connection-pool))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          virtual-gateway-grpc-connection-pool))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          virtual-gateway-grpc-connection-pool))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-requests))
      (common-lisp:list
       (common-lisp:cons "maxRequests"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          virtual-gateway-grpc-connection-pool))
   common-lisp:nil))
(common-lisp:deftype virtual-gateway-health-check-interval-millis ()
  'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defstruct
     (virtual-gateway-health-check-policy (:copier common-lisp:nil)
      (:conc-name "struct-shape-virtual-gateway-health-check-policy-"))
   (healthy-threshold (common-lisp:error ":healthythreshold is required") :type
    (common-lisp:or virtual-gateway-health-check-threshold common-lisp:null))
   (interval-millis (common-lisp:error ":intervalmillis is required") :type
    (common-lisp:or virtual-gateway-health-check-interval-millis
                    common-lisp:null))
   (path common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (port common-lisp:nil :type (common-lisp:or port-number common-lisp:null))
   (protocol (common-lisp:error ":protocol is required") :type
    (common-lisp:or virtual-gateway-port-protocol common-lisp:null))
   (timeout-millis (common-lisp:error ":timeoutmillis is required") :type
    (common-lisp:or virtual-gateway-health-check-timeout-millis
                    common-lisp:null))
   (unhealthy-threshold (common-lisp:error ":unhealthythreshold is required")
    :type
    (common-lisp:or virtual-gateway-health-check-threshold common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'virtual-gateway-health-check-policy
                    'make-virtual-gateway-health-check-policy))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          virtual-gateway-health-check-policy))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          virtual-gateway-health-check-policy))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'healthy-threshold))
      (common-lisp:list
       (common-lisp:cons "healthyThreshold"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'interval-millis))
      (common-lisp:list
       (common-lisp:cons "intervalMillis"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'path))
      (common-lisp:list
       (common-lisp:cons "path"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'port))
      (common-lisp:list
       (common-lisp:cons "port"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'protocol))
      (common-lisp:list
       (common-lisp:cons "protocol"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'timeout-millis))
      (common-lisp:list
       (common-lisp:cons "timeoutMillis"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'unhealthy-threshold))
      (common-lisp:list
       (common-lisp:cons "unhealthyThreshold"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          virtual-gateway-health-check-policy))
   common-lisp:nil))
(common-lisp:deftype virtual-gateway-health-check-threshold ()
  'common-lisp:integer)
(common-lisp:deftype virtual-gateway-health-check-timeout-millis ()
  'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defstruct
     (virtual-gateway-http2connection-pool (:copier common-lisp:nil)
      (:conc-name "struct-shape-virtual-gateway-http2connection-pool-"))
   (max-requests (common-lisp:error ":maxrequests is required") :type
    (common-lisp:or max-requests common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'virtual-gateway-http2connection-pool
                    'make-virtual-gateway-http2connection-pool))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          virtual-gateway-http2connection-pool))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          virtual-gateway-http2connection-pool))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-requests))
      (common-lisp:list
       (common-lisp:cons "maxRequests"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          virtual-gateway-http2connection-pool))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (virtual-gateway-http-connection-pool (:copier common-lisp:nil)
      (:conc-name "struct-shape-virtual-gateway-http-connection-pool-"))
   (max-connections (common-lisp:error ":maxconnections is required") :type
    (common-lisp:or max-connections common-lisp:null))
   (max-pending-requests common-lisp:nil :type
    (common-lisp:or max-pending-requests common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'virtual-gateway-http-connection-pool
                    'make-virtual-gateway-http-connection-pool))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          virtual-gateway-http-connection-pool))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          virtual-gateway-http-connection-pool))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-connections))
      (common-lisp:list
       (common-lisp:cons "maxConnections"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'max-pending-requests))
      (common-lisp:list
       (common-lisp:cons "maxPendingRequests"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          virtual-gateway-http-connection-pool))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype virtual-gateway-list ()
   '(trivial-types:proper-list virtual-gateway-ref))
 (common-lisp:defun make-virtual-gateway-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list virtual-gateway-ref))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (virtual-gateway-listener (:copier common-lisp:nil)
      (:conc-name "struct-shape-virtual-gateway-listener-"))
   (connection-pool common-lisp:nil :type
    (common-lisp:or virtual-gateway-connection-pool common-lisp:null))
   (health-check common-lisp:nil :type
    (common-lisp:or virtual-gateway-health-check-policy common-lisp:null))
   (port-mapping (common-lisp:error ":portmapping is required") :type
    (common-lisp:or virtual-gateway-port-mapping common-lisp:null))
   (tls common-lisp:nil :type
    (common-lisp:or virtual-gateway-listener-tls common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'virtual-gateway-listener 'make-virtual-gateway-listener))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          virtual-gateway-listener))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          virtual-gateway-listener))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'connection-pool))
      (common-lisp:list
       (common-lisp:cons "connectionPool"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'health-check))
      (common-lisp:list
       (common-lisp:cons "healthCheck"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'port-mapping))
      (common-lisp:list
       (common-lisp:cons "portMapping"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tls))
      (common-lisp:list
       (common-lisp:cons "tls"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          virtual-gateway-listener))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (virtual-gateway-listener-tls (:copier common-lisp:nil)
      (:conc-name "struct-shape-virtual-gateway-listener-tls-"))
   (certificate (common-lisp:error ":certificate is required") :type
    (common-lisp:or virtual-gateway-listener-tls-certificate common-lisp:null))
   (mode (common-lisp:error ":mode is required") :type
    (common-lisp:or virtual-gateway-listener-tls-mode common-lisp:null))
   (validation common-lisp:nil :type
    (common-lisp:or virtual-gateway-listener-tls-validation-context
                    common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'virtual-gateway-listener-tls
                    'make-virtual-gateway-listener-tls))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          virtual-gateway-listener-tls))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          virtual-gateway-listener-tls))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'certificate))
      (common-lisp:list
       (common-lisp:cons "certificate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'mode))
      (common-lisp:list
       (common-lisp:cons "mode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'validation))
      (common-lisp:list
       (common-lisp:cons "validation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          virtual-gateway-listener-tls))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (virtual-gateway-listener-tls-acm-certificate (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-virtual-gateway-listener-tls-acm-certificate-"))
   (certificate-arn (common-lisp:error ":certificatearn is required") :type
    (common-lisp:or arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'virtual-gateway-listener-tls-acm-certificate
                    'make-virtual-gateway-listener-tls-acm-certificate))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          virtual-gateway-listener-tls-acm-certificate))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          virtual-gateway-listener-tls-acm-certificate))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'certificate-arn))
      (common-lisp:list
       (common-lisp:cons "certificateArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          virtual-gateway-listener-tls-acm-certificate))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (virtual-gateway-listener-tls-certificate (:copier common-lisp:nil)
      (:conc-name "struct-shape-virtual-gateway-listener-tls-certificate-"))
   (acm common-lisp:nil :type
    (common-lisp:or virtual-gateway-listener-tls-acm-certificate
                    common-lisp:null))
   (file common-lisp:nil :type
    (common-lisp:or virtual-gateway-listener-tls-file-certificate
                    common-lisp:null))
   (sds common-lisp:nil :type
    (common-lisp:or virtual-gateway-listener-tls-sds-certificate
                    common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'virtual-gateway-listener-tls-certificate
                    'make-virtual-gateway-listener-tls-certificate))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          virtual-gateway-listener-tls-certificate))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          virtual-gateway-listener-tls-certificate))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'acm))
      (common-lisp:list
       (common-lisp:cons "acm"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'file))
      (common-lisp:list
       (common-lisp:cons "file"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sds))
      (common-lisp:list
       (common-lisp:cons "sds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          virtual-gateway-listener-tls-certificate))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (virtual-gateway-listener-tls-file-certificate (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-virtual-gateway-listener-tls-file-certificate-"))
   (certificate-chain (common-lisp:error ":certificatechain is required") :type
    (common-lisp:or file-path common-lisp:null))
   (private-key (common-lisp:error ":privatekey is required") :type
    (common-lisp:or file-path common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'virtual-gateway-listener-tls-file-certificate
                    'make-virtual-gateway-listener-tls-file-certificate))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          virtual-gateway-listener-tls-file-certificate))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          virtual-gateway-listener-tls-file-certificate))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'certificate-chain))
      (common-lisp:list
       (common-lisp:cons "certificateChain"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'private-key))
      (common-lisp:list
       (common-lisp:cons "privateKey"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          virtual-gateway-listener-tls-file-certificate))
   common-lisp:nil))
(common-lisp:deftype virtual-gateway-listener-tls-mode () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (virtual-gateway-listener-tls-sds-certificate (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-virtual-gateway-listener-tls-sds-certificate-"))
   (secret-name (common-lisp:error ":secretname is required") :type
    (common-lisp:or virtual-gateway-sds-secret-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'virtual-gateway-listener-tls-sds-certificate
                    'make-virtual-gateway-listener-tls-sds-certificate))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          virtual-gateway-listener-tls-sds-certificate))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          virtual-gateway-listener-tls-sds-certificate))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'secret-name))
      (common-lisp:list
       (common-lisp:cons "secretName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          virtual-gateway-listener-tls-sds-certificate))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (virtual-gateway-listener-tls-validation-context (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-virtual-gateway-listener-tls-validation-context-"))
   (subject-alternative-names common-lisp:nil :type
    (common-lisp:or subject-alternative-names common-lisp:null))
   (trust (common-lisp:error ":trust is required") :type
    (common-lisp:or virtual-gateway-listener-tls-validation-context-trust
                    common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'virtual-gateway-listener-tls-validation-context
                    'make-virtual-gateway-listener-tls-validation-context))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          virtual-gateway-listener-tls-validation-context))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          virtual-gateway-listener-tls-validation-context))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'subject-alternative-names))
      (common-lisp:list
       (common-lisp:cons "subjectAlternativeNames"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'trust))
      (common-lisp:list
       (common-lisp:cons "trust"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          virtual-gateway-listener-tls-validation-context))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (virtual-gateway-listener-tls-validation-context-trust
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-virtual-gateway-listener-tls-validation-context-trust-"))
   (file common-lisp:nil :type
    (common-lisp:or virtual-gateway-tls-validation-context-file-trust
                    common-lisp:null))
   (sds common-lisp:nil :type
    (common-lisp:or virtual-gateway-tls-validation-context-sds-trust
                    common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'virtual-gateway-listener-tls-validation-context-trust
                    'make-virtual-gateway-listener-tls-validation-context-trust))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          virtual-gateway-listener-tls-validation-context-trust))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          virtual-gateway-listener-tls-validation-context-trust))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'file))
      (common-lisp:list
       (common-lisp:cons "file"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sds))
      (common-lisp:list
       (common-lisp:cons "sds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          virtual-gateway-listener-tls-validation-context-trust))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype virtual-gateway-listeners ()
   '(trivial-types:proper-list virtual-gateway-listener))
 (common-lisp:defun make-virtual-gateway-listeners
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            virtual-gateway-listener))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (virtual-gateway-logging (:copier common-lisp:nil)
      (:conc-name "struct-shape-virtual-gateway-logging-"))
   (access-log common-lisp:nil :type
    (common-lisp:or virtual-gateway-access-log common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'virtual-gateway-logging 'make-virtual-gateway-logging))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          virtual-gateway-logging))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          virtual-gateway-logging))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'access-log))
      (common-lisp:list
       (common-lisp:cons "accessLog"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          virtual-gateway-logging))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (virtual-gateway-port-mapping (:copier common-lisp:nil)
      (:conc-name "struct-shape-virtual-gateway-port-mapping-"))
   (port (common-lisp:error ":port is required") :type
    (common-lisp:or port-number common-lisp:null))
   (protocol (common-lisp:error ":protocol is required") :type
    (common-lisp:or virtual-gateway-port-protocol common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'virtual-gateway-port-mapping
                    'make-virtual-gateway-port-mapping))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          virtual-gateway-port-mapping))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          virtual-gateway-port-mapping))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'port))
      (common-lisp:list
       (common-lisp:cons "port"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'protocol))
      (common-lisp:list
       (common-lisp:cons "protocol"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          virtual-gateway-port-mapping))
   common-lisp:nil))
(common-lisp:deftype virtual-gateway-port-protocol () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (virtual-gateway-ref (:copier common-lisp:nil)
      (:conc-name "struct-shape-virtual-gateway-ref-"))
   (arn (common-lisp:error ":arn is required") :type
    (common-lisp:or arn common-lisp:null))
   (created-at (common-lisp:error ":createdat is required") :type
    (common-lisp:or timestamp common-lisp:null))
   (last-updated-at (common-lisp:error ":lastupdatedat is required") :type
    (common-lisp:or timestamp common-lisp:null))
   (mesh-name (common-lisp:error ":meshname is required") :type
    (common-lisp:or resource-name common-lisp:null))
   (mesh-owner (common-lisp:error ":meshowner is required") :type
    (common-lisp:or account-id common-lisp:null))
   (resource-owner (common-lisp:error ":resourceowner is required") :type
    (common-lisp:or account-id common-lisp:null))
   (version (common-lisp:error ":version is required") :type
    (common-lisp:or long common-lisp:null))
   (virtual-gateway-name (common-lisp:error ":virtualgatewayname is required")
    :type (common-lisp:or resource-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'virtual-gateway-ref 'make-virtual-gateway-ref))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input virtual-gateway-ref))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input virtual-gateway-ref))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "createdAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-updated-at))
      (common-lisp:list
       (common-lisp:cons "lastUpdatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'mesh-name))
      (common-lisp:list
       (common-lisp:cons "meshName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'mesh-owner))
      (common-lisp:list
       (common-lisp:cons "meshOwner"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-owner))
      (common-lisp:list
       (common-lisp:cons "resourceOwner"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version))
      (common-lisp:list
       (common-lisp:cons "version"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'virtual-gateway-name))
      (common-lisp:list
       (common-lisp:cons "virtualGatewayName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input virtual-gateway-ref))
   common-lisp:nil))
(common-lisp:deftype virtual-gateway-sds-secret-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (virtual-gateway-spec (:copier common-lisp:nil)
      (:conc-name "struct-shape-virtual-gateway-spec-"))
   (backend-defaults common-lisp:nil :type
    (common-lisp:or virtual-gateway-backend-defaults common-lisp:null))
   (listeners (common-lisp:error ":listeners is required") :type
    (common-lisp:or virtual-gateway-listeners common-lisp:null))
   (logging common-lisp:nil :type
    (common-lisp:or virtual-gateway-logging common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'virtual-gateway-spec 'make-virtual-gateway-spec))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input virtual-gateway-spec))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input virtual-gateway-spec))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'backend-defaults))
      (common-lisp:list
       (common-lisp:cons "backendDefaults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'listeners))
      (common-lisp:list
       (common-lisp:cons "listeners"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'logging))
      (common-lisp:list
       (common-lisp:cons "logging"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input virtual-gateway-spec))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (virtual-gateway-status (:copier common-lisp:nil)
      (:conc-name "struct-shape-virtual-gateway-status-"))
   (status (common-lisp:error ":status is required") :type
    (common-lisp:or virtual-gateway-status-code common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'virtual-gateway-status 'make-virtual-gateway-status))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          virtual-gateway-status))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          virtual-gateway-status))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          virtual-gateway-status))
   common-lisp:nil))
(common-lisp:deftype virtual-gateway-status-code () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (virtual-gateway-tls-validation-context (:copier common-lisp:nil)
      (:conc-name "struct-shape-virtual-gateway-tls-validation-context-"))
   (subject-alternative-names common-lisp:nil :type
    (common-lisp:or subject-alternative-names common-lisp:null))
   (trust (common-lisp:error ":trust is required") :type
    (common-lisp:or virtual-gateway-tls-validation-context-trust
                    common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'virtual-gateway-tls-validation-context
                    'make-virtual-gateway-tls-validation-context))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          virtual-gateway-tls-validation-context))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          virtual-gateway-tls-validation-context))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'subject-alternative-names))
      (common-lisp:list
       (common-lisp:cons "subjectAlternativeNames"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'trust))
      (common-lisp:list
       (common-lisp:cons "trust"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          virtual-gateway-tls-validation-context))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (virtual-gateway-tls-validation-context-acm-trust
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-virtual-gateway-tls-validation-context-acm-trust-"))
   (certificate-authority-arns
    (common-lisp:error ":certificateauthorityarns is required") :type
    (common-lisp:or virtual-gateway-certificate-authority-arns
                    common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'virtual-gateway-tls-validation-context-acm-trust
                    'make-virtual-gateway-tls-validation-context-acm-trust))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          virtual-gateway-tls-validation-context-acm-trust))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          virtual-gateway-tls-validation-context-acm-trust))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'certificate-authority-arns))
      (common-lisp:list
       (common-lisp:cons "certificateAuthorityArns"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          virtual-gateway-tls-validation-context-acm-trust))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (virtual-gateway-tls-validation-context-file-trust
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-virtual-gateway-tls-validation-context-file-trust-"))
   (certificate-chain (common-lisp:error ":certificatechain is required") :type
    (common-lisp:or file-path common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'virtual-gateway-tls-validation-context-file-trust
                    'make-virtual-gateway-tls-validation-context-file-trust))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          virtual-gateway-tls-validation-context-file-trust))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          virtual-gateway-tls-validation-context-file-trust))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'certificate-chain))
      (common-lisp:list
       (common-lisp:cons "certificateChain"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          virtual-gateway-tls-validation-context-file-trust))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (virtual-gateway-tls-validation-context-sds-trust
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-virtual-gateway-tls-validation-context-sds-trust-"))
   (secret-name (common-lisp:error ":secretname is required") :type
    (common-lisp:or virtual-gateway-sds-secret-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'virtual-gateway-tls-validation-context-sds-trust
                    'make-virtual-gateway-tls-validation-context-sds-trust))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          virtual-gateway-tls-validation-context-sds-trust))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          virtual-gateway-tls-validation-context-sds-trust))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'secret-name))
      (common-lisp:list
       (common-lisp:cons "secretName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          virtual-gateway-tls-validation-context-sds-trust))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (virtual-gateway-tls-validation-context-trust (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-virtual-gateway-tls-validation-context-trust-"))
   (acm common-lisp:nil :type
    (common-lisp:or virtual-gateway-tls-validation-context-acm-trust
                    common-lisp:null))
   (file common-lisp:nil :type
    (common-lisp:or virtual-gateway-tls-validation-context-file-trust
                    common-lisp:null))
   (sds common-lisp:nil :type
    (common-lisp:or virtual-gateway-tls-validation-context-sds-trust
                    common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'virtual-gateway-tls-validation-context-trust
                    'make-virtual-gateway-tls-validation-context-trust))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          virtual-gateway-tls-validation-context-trust))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          virtual-gateway-tls-validation-context-trust))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'acm))
      (common-lisp:list
       (common-lisp:cons "acm"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'file))
      (common-lisp:list
       (common-lisp:cons "file"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sds))
      (common-lisp:list
       (common-lisp:cons "sds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          virtual-gateway-tls-validation-context-trust))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (virtual-node-connection-pool (:copier common-lisp:nil)
      (:conc-name "struct-shape-virtual-node-connection-pool-"))
   (grpc common-lisp:nil :type
    (common-lisp:or virtual-node-grpc-connection-pool common-lisp:null))
   (http common-lisp:nil :type
    (common-lisp:or virtual-node-http-connection-pool common-lisp:null))
   (http2 common-lisp:nil :type
    (common-lisp:or virtual-node-http2connection-pool common-lisp:null))
   (tcp common-lisp:nil :type
    (common-lisp:or virtual-node-tcp-connection-pool common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'virtual-node-connection-pool
                    'make-virtual-node-connection-pool))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          virtual-node-connection-pool))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          virtual-node-connection-pool))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'grpc))
      (common-lisp:list
       (common-lisp:cons "grpc"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'http))
      (common-lisp:list
       (common-lisp:cons "http"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'http2))
      (common-lisp:list
       (common-lisp:cons "http2"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tcp))
      (common-lisp:list
       (common-lisp:cons "tcp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          virtual-node-connection-pool))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (virtual-node-data (:copier common-lisp:nil)
      (:conc-name "struct-shape-virtual-node-data-"))
   (mesh-name (common-lisp:error ":meshname is required") :type
    (common-lisp:or resource-name common-lisp:null))
   (metadata (common-lisp:error ":metadata is required") :type
    (common-lisp:or resource-metadata common-lisp:null))
   (spec (common-lisp:error ":spec is required") :type
    (common-lisp:or virtual-node-spec common-lisp:null))
   (status (common-lisp:error ":status is required") :type
    (common-lisp:or virtual-node-status common-lisp:null))
   (virtual-node-name (common-lisp:error ":virtualnodename is required") :type
    (common-lisp:or resource-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'virtual-node-data 'make-virtual-node-data))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input virtual-node-data))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input virtual-node-data))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'mesh-name))
      (common-lisp:list
       (common-lisp:cons "meshName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metadata))
      (common-lisp:list
       (common-lisp:cons "metadata"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'spec))
      (common-lisp:list
       (common-lisp:cons "spec"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'virtual-node-name))
      (common-lisp:list
       (common-lisp:cons "virtualNodeName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input virtual-node-data))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (virtual-node-grpc-connection-pool (:copier common-lisp:nil)
      (:conc-name "struct-shape-virtual-node-grpc-connection-pool-"))
   (max-requests (common-lisp:error ":maxrequests is required") :type
    (common-lisp:or max-requests common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'virtual-node-grpc-connection-pool
                    'make-virtual-node-grpc-connection-pool))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          virtual-node-grpc-connection-pool))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          virtual-node-grpc-connection-pool))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-requests))
      (common-lisp:list
       (common-lisp:cons "maxRequests"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          virtual-node-grpc-connection-pool))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (virtual-node-http2connection-pool (:copier common-lisp:nil)
      (:conc-name "struct-shape-virtual-node-http2connection-pool-"))
   (max-requests (common-lisp:error ":maxrequests is required") :type
    (common-lisp:or max-requests common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'virtual-node-http2connection-pool
                    'make-virtual-node-http2connection-pool))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          virtual-node-http2connection-pool))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          virtual-node-http2connection-pool))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-requests))
      (common-lisp:list
       (common-lisp:cons "maxRequests"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          virtual-node-http2connection-pool))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (virtual-node-http-connection-pool (:copier common-lisp:nil)
      (:conc-name "struct-shape-virtual-node-http-connection-pool-"))
   (max-connections (common-lisp:error ":maxconnections is required") :type
    (common-lisp:or max-connections common-lisp:null))
   (max-pending-requests common-lisp:nil :type
    (common-lisp:or max-pending-requests common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'virtual-node-http-connection-pool
                    'make-virtual-node-http-connection-pool))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          virtual-node-http-connection-pool))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          virtual-node-http-connection-pool))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-connections))
      (common-lisp:list
       (common-lisp:cons "maxConnections"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'max-pending-requests))
      (common-lisp:list
       (common-lisp:cons "maxPendingRequests"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          virtual-node-http-connection-pool))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype virtual-node-list ()
   '(trivial-types:proper-list virtual-node-ref))
 (common-lisp:defun make-virtual-node-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list virtual-node-ref))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (virtual-node-ref (:copier common-lisp:nil)
      (:conc-name "struct-shape-virtual-node-ref-"))
   (arn (common-lisp:error ":arn is required") :type
    (common-lisp:or arn common-lisp:null))
   (created-at (common-lisp:error ":createdat is required") :type
    (common-lisp:or timestamp common-lisp:null))
   (last-updated-at (common-lisp:error ":lastupdatedat is required") :type
    (common-lisp:or timestamp common-lisp:null))
   (mesh-name (common-lisp:error ":meshname is required") :type
    (common-lisp:or resource-name common-lisp:null))
   (mesh-owner (common-lisp:error ":meshowner is required") :type
    (common-lisp:or account-id common-lisp:null))
   (resource-owner (common-lisp:error ":resourceowner is required") :type
    (common-lisp:or account-id common-lisp:null))
   (version (common-lisp:error ":version is required") :type
    (common-lisp:or long common-lisp:null))
   (virtual-node-name (common-lisp:error ":virtualnodename is required") :type
    (common-lisp:or resource-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'virtual-node-ref 'make-virtual-node-ref))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input virtual-node-ref))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input virtual-node-ref))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "createdAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-updated-at))
      (common-lisp:list
       (common-lisp:cons "lastUpdatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'mesh-name))
      (common-lisp:list
       (common-lisp:cons "meshName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'mesh-owner))
      (common-lisp:list
       (common-lisp:cons "meshOwner"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-owner))
      (common-lisp:list
       (common-lisp:cons "resourceOwner"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version))
      (common-lisp:list
       (common-lisp:cons "version"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'virtual-node-name))
      (common-lisp:list
       (common-lisp:cons "virtualNodeName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input virtual-node-ref))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (virtual-node-service-provider (:copier common-lisp:nil)
      (:conc-name "struct-shape-virtual-node-service-provider-"))
   (virtual-node-name (common-lisp:error ":virtualnodename is required") :type
    (common-lisp:or resource-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'virtual-node-service-provider
                    'make-virtual-node-service-provider))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          virtual-node-service-provider))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          virtual-node-service-provider))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'virtual-node-name))
      (common-lisp:list
       (common-lisp:cons "virtualNodeName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          virtual-node-service-provider))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (virtual-node-spec (:copier common-lisp:nil)
      (:conc-name "struct-shape-virtual-node-spec-"))
   (backend-defaults common-lisp:nil :type
    (common-lisp:or backend-defaults common-lisp:null))
   (backends common-lisp:nil :type (common-lisp:or backends common-lisp:null))
   (listeners common-lisp:nil :type
    (common-lisp:or listeners common-lisp:null))
   (logging common-lisp:nil :type (common-lisp:or logging common-lisp:null))
   (service-discovery common-lisp:nil :type
    (common-lisp:or service-discovery common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'virtual-node-spec 'make-virtual-node-spec))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input virtual-node-spec))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input virtual-node-spec))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'backend-defaults))
      (common-lisp:list
       (common-lisp:cons "backendDefaults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'backends))
      (common-lisp:list
       (common-lisp:cons "backends"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'listeners))
      (common-lisp:list
       (common-lisp:cons "listeners"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'logging))
      (common-lisp:list
       (common-lisp:cons "logging"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service-discovery))
      (common-lisp:list
       (common-lisp:cons "serviceDiscovery"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input virtual-node-spec))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (virtual-node-status (:copier common-lisp:nil)
      (:conc-name "struct-shape-virtual-node-status-"))
   (status (common-lisp:error ":status is required") :type
    (common-lisp:or virtual-node-status-code common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'virtual-node-status 'make-virtual-node-status))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input virtual-node-status))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input virtual-node-status))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input virtual-node-status))
   common-lisp:nil))
(common-lisp:deftype virtual-node-status-code () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (virtual-node-tcp-connection-pool (:copier common-lisp:nil)
      (:conc-name "struct-shape-virtual-node-tcp-connection-pool-"))
   (max-connections (common-lisp:error ":maxconnections is required") :type
    (common-lisp:or max-connections common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'virtual-node-tcp-connection-pool
                    'make-virtual-node-tcp-connection-pool))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          virtual-node-tcp-connection-pool))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          virtual-node-tcp-connection-pool))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-connections))
      (common-lisp:list
       (common-lisp:cons "maxConnections"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          virtual-node-tcp-connection-pool))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (virtual-router-data (:copier common-lisp:nil)
      (:conc-name "struct-shape-virtual-router-data-"))
   (mesh-name (common-lisp:error ":meshname is required") :type
    (common-lisp:or resource-name common-lisp:null))
   (metadata (common-lisp:error ":metadata is required") :type
    (common-lisp:or resource-metadata common-lisp:null))
   (spec (common-lisp:error ":spec is required") :type
    (common-lisp:or virtual-router-spec common-lisp:null))
   (status (common-lisp:error ":status is required") :type
    (common-lisp:or virtual-router-status common-lisp:null))
   (virtual-router-name (common-lisp:error ":virtualroutername is required")
    :type (common-lisp:or resource-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'virtual-router-data 'make-virtual-router-data))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input virtual-router-data))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input virtual-router-data))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'mesh-name))
      (common-lisp:list
       (common-lisp:cons "meshName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metadata))
      (common-lisp:list
       (common-lisp:cons "metadata"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'spec))
      (common-lisp:list
       (common-lisp:cons "spec"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'virtual-router-name))
      (common-lisp:list
       (common-lisp:cons "virtualRouterName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input virtual-router-data))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype virtual-router-list ()
   '(trivial-types:proper-list virtual-router-ref))
 (common-lisp:defun make-virtual-router-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list virtual-router-ref))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (virtual-router-listener (:copier common-lisp:nil)
      (:conc-name "struct-shape-virtual-router-listener-"))
   (port-mapping (common-lisp:error ":portmapping is required") :type
    (common-lisp:or port-mapping common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'virtual-router-listener 'make-virtual-router-listener))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          virtual-router-listener))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          virtual-router-listener))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'port-mapping))
      (common-lisp:list
       (common-lisp:cons "portMapping"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          virtual-router-listener))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype virtual-router-listeners ()
   '(trivial-types:proper-list virtual-router-listener))
 (common-lisp:defun make-virtual-router-listeners
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list virtual-router-listener))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (virtual-router-ref (:copier common-lisp:nil)
      (:conc-name "struct-shape-virtual-router-ref-"))
   (arn (common-lisp:error ":arn is required") :type
    (common-lisp:or arn common-lisp:null))
   (created-at (common-lisp:error ":createdat is required") :type
    (common-lisp:or timestamp common-lisp:null))
   (last-updated-at (common-lisp:error ":lastupdatedat is required") :type
    (common-lisp:or timestamp common-lisp:null))
   (mesh-name (common-lisp:error ":meshname is required") :type
    (common-lisp:or resource-name common-lisp:null))
   (mesh-owner (common-lisp:error ":meshowner is required") :type
    (common-lisp:or account-id common-lisp:null))
   (resource-owner (common-lisp:error ":resourceowner is required") :type
    (common-lisp:or account-id common-lisp:null))
   (version (common-lisp:error ":version is required") :type
    (common-lisp:or long common-lisp:null))
   (virtual-router-name (common-lisp:error ":virtualroutername is required")
    :type (common-lisp:or resource-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'virtual-router-ref 'make-virtual-router-ref))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input virtual-router-ref))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input virtual-router-ref))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "createdAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-updated-at))
      (common-lisp:list
       (common-lisp:cons "lastUpdatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'mesh-name))
      (common-lisp:list
       (common-lisp:cons "meshName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'mesh-owner))
      (common-lisp:list
       (common-lisp:cons "meshOwner"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-owner))
      (common-lisp:list
       (common-lisp:cons "resourceOwner"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version))
      (common-lisp:list
       (common-lisp:cons "version"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'virtual-router-name))
      (common-lisp:list
       (common-lisp:cons "virtualRouterName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input virtual-router-ref))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (virtual-router-service-provider (:copier common-lisp:nil)
      (:conc-name "struct-shape-virtual-router-service-provider-"))
   (virtual-router-name (common-lisp:error ":virtualroutername is required")
    :type (common-lisp:or resource-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'virtual-router-service-provider
                    'make-virtual-router-service-provider))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          virtual-router-service-provider))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          virtual-router-service-provider))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'virtual-router-name))
      (common-lisp:list
       (common-lisp:cons "virtualRouterName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          virtual-router-service-provider))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (virtual-router-spec (:copier common-lisp:nil)
      (:conc-name "struct-shape-virtual-router-spec-"))
   (listeners common-lisp:nil :type
    (common-lisp:or virtual-router-listeners common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'virtual-router-spec 'make-virtual-router-spec))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input virtual-router-spec))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input virtual-router-spec))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'listeners))
      (common-lisp:list
       (common-lisp:cons "listeners"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input virtual-router-spec))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (virtual-router-status (:copier common-lisp:nil)
      (:conc-name "struct-shape-virtual-router-status-"))
   (status (common-lisp:error ":status is required") :type
    (common-lisp:or virtual-router-status-code common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'virtual-router-status 'make-virtual-router-status))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          virtual-router-status))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          virtual-router-status))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          virtual-router-status))
   common-lisp:nil))
(common-lisp:deftype virtual-router-status-code () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (virtual-service-backend (:copier common-lisp:nil)
      (:conc-name "struct-shape-virtual-service-backend-"))
   (client-policy common-lisp:nil :type
    (common-lisp:or client-policy common-lisp:null))
   (virtual-service-name (common-lisp:error ":virtualservicename is required")
    :type (common-lisp:or service-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'virtual-service-backend 'make-virtual-service-backend))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          virtual-service-backend))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          virtual-service-backend))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-policy))
      (common-lisp:list
       (common-lisp:cons "clientPolicy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'virtual-service-name))
      (common-lisp:list
       (common-lisp:cons "virtualServiceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          virtual-service-backend))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (virtual-service-data (:copier common-lisp:nil)
      (:conc-name "struct-shape-virtual-service-data-"))
   (mesh-name (common-lisp:error ":meshname is required") :type
    (common-lisp:or resource-name common-lisp:null))
   (metadata (common-lisp:error ":metadata is required") :type
    (common-lisp:or resource-metadata common-lisp:null))
   (spec (common-lisp:error ":spec is required") :type
    (common-lisp:or virtual-service-spec common-lisp:null))
   (status (common-lisp:error ":status is required") :type
    (common-lisp:or virtual-service-status common-lisp:null))
   (virtual-service-name (common-lisp:error ":virtualservicename is required")
    :type (common-lisp:or service-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'virtual-service-data 'make-virtual-service-data))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input virtual-service-data))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input virtual-service-data))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'mesh-name))
      (common-lisp:list
       (common-lisp:cons "meshName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metadata))
      (common-lisp:list
       (common-lisp:cons "metadata"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'spec))
      (common-lisp:list
       (common-lisp:cons "spec"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'virtual-service-name))
      (common-lisp:list
       (common-lisp:cons "virtualServiceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input virtual-service-data))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype virtual-service-list ()
   '(trivial-types:proper-list virtual-service-ref))
 (common-lisp:defun make-virtual-service-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list virtual-service-ref))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (virtual-service-provider (:copier common-lisp:nil)
      (:conc-name "struct-shape-virtual-service-provider-"))
   (virtual-node common-lisp:nil :type
    (common-lisp:or virtual-node-service-provider common-lisp:null))
   (virtual-router common-lisp:nil :type
    (common-lisp:or virtual-router-service-provider common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'virtual-service-provider 'make-virtual-service-provider))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          virtual-service-provider))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          virtual-service-provider))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'virtual-node))
      (common-lisp:list
       (common-lisp:cons "virtualNode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'virtual-router))
      (common-lisp:list
       (common-lisp:cons "virtualRouter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          virtual-service-provider))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (virtual-service-ref (:copier common-lisp:nil)
      (:conc-name "struct-shape-virtual-service-ref-"))
   (arn (common-lisp:error ":arn is required") :type
    (common-lisp:or arn common-lisp:null))
   (created-at (common-lisp:error ":createdat is required") :type
    (common-lisp:or timestamp common-lisp:null))
   (last-updated-at (common-lisp:error ":lastupdatedat is required") :type
    (common-lisp:or timestamp common-lisp:null))
   (mesh-name (common-lisp:error ":meshname is required") :type
    (common-lisp:or resource-name common-lisp:null))
   (mesh-owner (common-lisp:error ":meshowner is required") :type
    (common-lisp:or account-id common-lisp:null))
   (resource-owner (common-lisp:error ":resourceowner is required") :type
    (common-lisp:or account-id common-lisp:null))
   (version (common-lisp:error ":version is required") :type
    (common-lisp:or long common-lisp:null))
   (virtual-service-name (common-lisp:error ":virtualservicename is required")
    :type (common-lisp:or service-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'virtual-service-ref 'make-virtual-service-ref))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input virtual-service-ref))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input virtual-service-ref))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "createdAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-updated-at))
      (common-lisp:list
       (common-lisp:cons "lastUpdatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'mesh-name))
      (common-lisp:list
       (common-lisp:cons "meshName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'mesh-owner))
      (common-lisp:list
       (common-lisp:cons "meshOwner"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-owner))
      (common-lisp:list
       (common-lisp:cons "resourceOwner"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version))
      (common-lisp:list
       (common-lisp:cons "version"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'virtual-service-name))
      (common-lisp:list
       (common-lisp:cons "virtualServiceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input virtual-service-ref))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (virtual-service-spec (:copier common-lisp:nil)
      (:conc-name "struct-shape-virtual-service-spec-"))
   (provider common-lisp:nil :type
    (common-lisp:or virtual-service-provider common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'virtual-service-spec 'make-virtual-service-spec))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input virtual-service-spec))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input virtual-service-spec))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'provider))
      (common-lisp:list
       (common-lisp:cons "provider"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input virtual-service-spec))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (virtual-service-status (:copier common-lisp:nil)
      (:conc-name "struct-shape-virtual-service-status-"))
   (status (common-lisp:error ":status is required") :type
    (common-lisp:or virtual-service-status-code common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'virtual-service-status 'make-virtual-service-status))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          virtual-service-status))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          virtual-service-status))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          virtual-service-status))
   common-lisp:nil))
(common-lisp:deftype virtual-service-status-code () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (weighted-target (:copier common-lisp:nil)
      (:conc-name "struct-shape-weighted-target-"))
   (port common-lisp:nil :type (common-lisp:or listener-port common-lisp:null))
   (virtual-node (common-lisp:error ":virtualnode is required") :type
    (common-lisp:or resource-name common-lisp:null))
   (weight (common-lisp:error ":weight is required") :type
    (common-lisp:or percent-int common-lisp:null)))
 (common-lisp:export (common-lisp:list 'weighted-target 'make-weighted-target))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input weighted-target))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input weighted-target))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'port))
      (common-lisp:list
       (common-lisp:cons "port"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'virtual-node))
      (common-lisp:list
       (common-lisp:cons "virtualNode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'weight))
      (common-lisp:list
       (common-lisp:cons "weight"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input weighted-target))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype weighted-targets ()
   '(trivial-types:proper-list weighted-target))
 (common-lisp:defun make-weighted-targets
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list weighted-target))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defun create-gateway-route
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key client-token gateway-route-name mesh-name
                     mesh-owner spec tags virtual-gateway-name)
   (common-lisp:declare
    (common-lisp:ignorable client-token gateway-route-name mesh-name mesh-owner
     spec tags virtual-gateway-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-gateway-route-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'appmesh-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v20190125/meshes/~A/virtualGateway/~A/gatewayRoutes"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'mesh-name))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'virtual-gateway-name))))
                                                        "CreateGatewayRoute"))
      "structure" common-lisp:nil *error-map*)))
 (common-lisp:export 'create-gateway-route))
(common-lisp:progn
 (common-lisp:defun create-mesh
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key client-token mesh-name spec tags)
   (common-lisp:declare
    (common-lisp:ignorable client-token mesh-name spec tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-mesh-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'appmesh-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT"
                                                        "/v20190125/meshes"
                                                        "CreateMesh"))
      "structure" common-lisp:nil *error-map*)))
 (common-lisp:export 'create-mesh))
(common-lisp:progn
 (common-lisp:defun create-route
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key client-token mesh-name mesh-owner
                     route-name spec tags virtual-router-name)
   (common-lisp:declare
    (common-lisp:ignorable client-token mesh-name mesh-owner route-name spec
     tags virtual-router-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-route-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'appmesh-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v20190125/meshes/~A/virtualRouter/~A/routes"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'mesh-name))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'virtual-router-name))))
                                                        "CreateRoute"))
      "structure" common-lisp:nil *error-map*)))
 (common-lisp:export 'create-route))
(common-lisp:progn
 (common-lisp:defun create-virtual-gateway
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key client-token mesh-name mesh-owner spec
                     tags virtual-gateway-name)
   (common-lisp:declare
    (common-lisp:ignorable client-token mesh-name mesh-owner spec tags
     virtual-gateway-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-virtual-gateway-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'appmesh-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v20190125/meshes/~A/virtualGateways"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'mesh-name))))
                                                        "CreateVirtualGateway"))
      "structure" common-lisp:nil *error-map*)))
 (common-lisp:export 'create-virtual-gateway))
(common-lisp:progn
 (common-lisp:defun create-virtual-node
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key client-token mesh-name mesh-owner spec
                     tags virtual-node-name)
   (common-lisp:declare
    (common-lisp:ignorable client-token mesh-name mesh-owner spec tags
     virtual-node-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-virtual-node-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'appmesh-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v20190125/meshes/~A/virtualNodes"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'mesh-name))))
                                                        "CreateVirtualNode"))
      "structure" common-lisp:nil *error-map*)))
 (common-lisp:export 'create-virtual-node))
(common-lisp:progn
 (common-lisp:defun create-virtual-router
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key client-token mesh-name mesh-owner spec
                     tags virtual-router-name)
   (common-lisp:declare
    (common-lisp:ignorable client-token mesh-name mesh-owner spec tags
     virtual-router-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-virtual-router-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'appmesh-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v20190125/meshes/~A/virtualRouters"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'mesh-name))))
                                                        "CreateVirtualRouter"))
      "structure" common-lisp:nil *error-map*)))
 (common-lisp:export 'create-virtual-router))
(common-lisp:progn
 (common-lisp:defun create-virtual-service
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key client-token mesh-name mesh-owner spec
                     tags virtual-service-name)
   (common-lisp:declare
    (common-lisp:ignorable client-token mesh-name mesh-owner spec tags
     virtual-service-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-virtual-service-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'appmesh-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v20190125/meshes/~A/virtualServices"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'mesh-name))))
                                                        "CreateVirtualService"))
      "structure" common-lisp:nil *error-map*)))
 (common-lisp:export 'create-virtual-service))
(common-lisp:progn
 (common-lisp:defun delete-gateway-route
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key gateway-route-name mesh-name mesh-owner
                     virtual-gateway-name)
   (common-lisp:declare
    (common-lisp:ignorable gateway-route-name mesh-name mesh-owner
     virtual-gateway-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-gateway-route-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'appmesh-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v20190125/meshes/~A/virtualGateway/~A/gatewayRoutes/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'mesh-name))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'virtual-gateway-name))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'gateway-route-name))))
                                                        "DeleteGatewayRoute"))
      "structure" common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-gateway-route))
(common-lisp:progn
 (common-lisp:defun delete-mesh
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key mesh-name)
   (common-lisp:declare (common-lisp:ignorable mesh-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-mesh-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'appmesh-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v20190125/meshes/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'mesh-name))))
                                                        "DeleteMesh"))
      "structure" common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-mesh))
(common-lisp:progn
 (common-lisp:defun delete-route
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key mesh-name mesh-owner route-name
                     virtual-router-name)
   (common-lisp:declare
    (common-lisp:ignorable mesh-name mesh-owner route-name
     virtual-router-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-route-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'appmesh-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v20190125/meshes/~A/virtualRouter/~A/routes/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'mesh-name))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'virtual-router-name))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'route-name))))
                                                        "DeleteRoute"))
      "structure" common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-route))
(common-lisp:progn
 (common-lisp:defun delete-virtual-gateway
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key mesh-name mesh-owner
                     virtual-gateway-name)
   (common-lisp:declare
    (common-lisp:ignorable mesh-name mesh-owner virtual-gateway-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-virtual-gateway-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'appmesh-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v20190125/meshes/~A/virtualGateways/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'mesh-name))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'virtual-gateway-name))))
                                                        "DeleteVirtualGateway"))
      "structure" common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-virtual-gateway))
(common-lisp:progn
 (common-lisp:defun delete-virtual-node
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key mesh-name mesh-owner virtual-node-name)
   (common-lisp:declare
    (common-lisp:ignorable mesh-name mesh-owner virtual-node-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-virtual-node-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'appmesh-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v20190125/meshes/~A/virtualNodes/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'mesh-name))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'virtual-node-name))))
                                                        "DeleteVirtualNode"))
      "structure" common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-virtual-node))
(common-lisp:progn
 (common-lisp:defun delete-virtual-router
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key mesh-name mesh-owner virtual-router-name)
   (common-lisp:declare
    (common-lisp:ignorable mesh-name mesh-owner virtual-router-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-virtual-router-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'appmesh-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v20190125/meshes/~A/virtualRouters/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'mesh-name))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'virtual-router-name))))
                                                        "DeleteVirtualRouter"))
      "structure" common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-virtual-router))
(common-lisp:progn
 (common-lisp:defun delete-virtual-service
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key mesh-name mesh-owner
                     virtual-service-name)
   (common-lisp:declare
    (common-lisp:ignorable mesh-name mesh-owner virtual-service-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-virtual-service-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'appmesh-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v20190125/meshes/~A/virtualServices/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'mesh-name))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'virtual-service-name))))
                                                        "DeleteVirtualService"))
      "structure" common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-virtual-service))
(common-lisp:progn
 (common-lisp:defun describe-gateway-route
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key gateway-route-name mesh-name mesh-owner
                     virtual-gateway-name)
   (common-lisp:declare
    (common-lisp:ignorable gateway-route-name mesh-name mesh-owner
     virtual-gateway-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-gateway-route-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'appmesh-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v20190125/meshes/~A/virtualGateway/~A/gatewayRoutes/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'mesh-name))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'virtual-gateway-name))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'gateway-route-name))))
                                                        "DescribeGatewayRoute"))
      "structure" common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-gateway-route))
(common-lisp:progn
 (common-lisp:defun describe-mesh
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key mesh-name mesh-owner)
   (common-lisp:declare (common-lisp:ignorable mesh-name mesh-owner))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-mesh-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'appmesh-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v20190125/meshes/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'mesh-name))))
                                                        "DescribeMesh"))
      "structure" common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-mesh))
(common-lisp:progn
 (common-lisp:defun describe-route
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key mesh-name mesh-owner route-name
                     virtual-router-name)
   (common-lisp:declare
    (common-lisp:ignorable mesh-name mesh-owner route-name
     virtual-router-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-route-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'appmesh-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v20190125/meshes/~A/virtualRouter/~A/routes/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'mesh-name))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'virtual-router-name))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'route-name))))
                                                        "DescribeRoute"))
      "structure" common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-route))
(common-lisp:progn
 (common-lisp:defun describe-virtual-gateway
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key mesh-name mesh-owner
                     virtual-gateway-name)
   (common-lisp:declare
    (common-lisp:ignorable mesh-name mesh-owner virtual-gateway-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-virtual-gateway-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'appmesh-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v20190125/meshes/~A/virtualGateways/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'mesh-name))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'virtual-gateway-name))))
                                                        "DescribeVirtualGateway"))
      "structure" common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-virtual-gateway))
(common-lisp:progn
 (common-lisp:defun describe-virtual-node
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key mesh-name mesh-owner virtual-node-name)
   (common-lisp:declare
    (common-lisp:ignorable mesh-name mesh-owner virtual-node-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-virtual-node-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'appmesh-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v20190125/meshes/~A/virtualNodes/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'mesh-name))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'virtual-node-name))))
                                                        "DescribeVirtualNode"))
      "structure" common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-virtual-node))
(common-lisp:progn
 (common-lisp:defun describe-virtual-router
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key mesh-name mesh-owner virtual-router-name)
   (common-lisp:declare
    (common-lisp:ignorable mesh-name mesh-owner virtual-router-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-virtual-router-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'appmesh-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v20190125/meshes/~A/virtualRouters/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'mesh-name))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'virtual-router-name))))
                                                        "DescribeVirtualRouter"))
      "structure" common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-virtual-router))
(common-lisp:progn
 (common-lisp:defun describe-virtual-service
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key mesh-name mesh-owner
                     virtual-service-name)
   (common-lisp:declare
    (common-lisp:ignorable mesh-name mesh-owner virtual-service-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-virtual-service-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'appmesh-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v20190125/meshes/~A/virtualServices/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'mesh-name))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'virtual-service-name))))
                                                        "DescribeVirtualService"))
      "structure" common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-virtual-service))
(common-lisp:progn
 (common-lisp:defun list-gateway-routes
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key limit mesh-name mesh-owner next-token
                     virtual-gateway-name)
   (common-lisp:declare
    (common-lisp:ignorable limit mesh-name mesh-owner next-token
     virtual-gateway-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-gateway-routes-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'appmesh-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v20190125/meshes/~A/virtualGateway/~A/gatewayRoutes"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'mesh-name))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'virtual-gateway-name))))
                                                        "ListGatewayRoutes"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-gateway-routes))
(common-lisp:progn
 (common-lisp:defun list-meshes
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key limit next-token)
   (common-lisp:declare (common-lisp:ignorable limit next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-meshes-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'appmesh-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        "/v20190125/meshes"
                                                        "ListMeshes"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-meshes))
(common-lisp:progn
 (common-lisp:defun list-routes
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key limit mesh-name mesh-owner next-token
                     virtual-router-name)
   (common-lisp:declare
    (common-lisp:ignorable limit mesh-name mesh-owner next-token
     virtual-router-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-routes-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'appmesh-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v20190125/meshes/~A/virtualRouter/~A/routes"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'mesh-name))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'virtual-router-name))))
                                                        "ListRoutes"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-routes))
(common-lisp:progn
 (common-lisp:defun list-tags-for-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key limit next-token resource-arn)
   (common-lisp:declare (common-lisp:ignorable limit next-token resource-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-tags-for-resource-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'appmesh-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" "/v20190125/tags"
                                                        "ListTagsForResource"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-tags-for-resource))
(common-lisp:progn
 (common-lisp:defun list-virtual-gateways
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key limit mesh-name mesh-owner next-token)
   (common-lisp:declare
    (common-lisp:ignorable limit mesh-name mesh-owner next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-virtual-gateways-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'appmesh-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v20190125/meshes/~A/virtualGateways"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'mesh-name))))
                                                        "ListVirtualGateways"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-virtual-gateways))
(common-lisp:progn
 (common-lisp:defun list-virtual-nodes
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key limit mesh-name mesh-owner next-token)
   (common-lisp:declare
    (common-lisp:ignorable limit mesh-name mesh-owner next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-virtual-nodes-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'appmesh-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v20190125/meshes/~A/virtualNodes"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'mesh-name))))
                                                        "ListVirtualNodes"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-virtual-nodes))
(common-lisp:progn
 (common-lisp:defun list-virtual-routers
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key limit mesh-name mesh-owner next-token)
   (common-lisp:declare
    (common-lisp:ignorable limit mesh-name mesh-owner next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-virtual-routers-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'appmesh-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v20190125/meshes/~A/virtualRouters"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'mesh-name))))
                                                        "ListVirtualRouters"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-virtual-routers))
(common-lisp:progn
 (common-lisp:defun list-virtual-services
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key limit mesh-name mesh-owner next-token)
   (common-lisp:declare
    (common-lisp:ignorable limit mesh-name mesh-owner next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-virtual-services-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'appmesh-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v20190125/meshes/~A/virtualServices"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'mesh-name))))
                                                        "ListVirtualServices"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-virtual-services))
(common-lisp:progn
 (common-lisp:defun tag-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn tags)
   (common-lisp:declare (common-lisp:ignorable resource-arn tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-tag-resource-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'appmesh-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT" "/v20190125/tag"
                                                        "TagResource"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'tag-resource))
(common-lisp:progn
 (common-lisp:defun untag-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn tag-keys)
   (common-lisp:declare (common-lisp:ignorable resource-arn tag-keys))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-untag-resource-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'appmesh-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT"
                                                        "/v20190125/untag"
                                                        "UntagResource"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'untag-resource))
(common-lisp:progn
 (common-lisp:defun update-gateway-route
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key client-token gateway-route-name mesh-name
                     mesh-owner spec virtual-gateway-name)
   (common-lisp:declare
    (common-lisp:ignorable client-token gateway-route-name mesh-name mesh-owner
     spec virtual-gateway-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-gateway-route-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'appmesh-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v20190125/meshes/~A/virtualGateway/~A/gatewayRoutes/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'mesh-name))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'virtual-gateway-name))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'gateway-route-name))))
                                                        "UpdateGatewayRoute"))
      "structure" common-lisp:nil *error-map*)))
 (common-lisp:export 'update-gateway-route))
(common-lisp:progn
 (common-lisp:defun update-mesh
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key client-token mesh-name spec)
   (common-lisp:declare (common-lisp:ignorable client-token mesh-name spec))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-mesh-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'appmesh-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v20190125/meshes/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'mesh-name))))
                                                        "UpdateMesh"))
      "structure" common-lisp:nil *error-map*)))
 (common-lisp:export 'update-mesh))
(common-lisp:progn
 (common-lisp:defun update-route
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key client-token mesh-name mesh-owner
                     route-name spec virtual-router-name)
   (common-lisp:declare
    (common-lisp:ignorable client-token mesh-name mesh-owner route-name spec
     virtual-router-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-route-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'appmesh-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v20190125/meshes/~A/virtualRouter/~A/routes/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'mesh-name))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'virtual-router-name))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'route-name))))
                                                        "UpdateRoute"))
      "structure" common-lisp:nil *error-map*)))
 (common-lisp:export 'update-route))
(common-lisp:progn
 (common-lisp:defun update-virtual-gateway
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key client-token mesh-name mesh-owner spec
                     virtual-gateway-name)
   (common-lisp:declare
    (common-lisp:ignorable client-token mesh-name mesh-owner spec
     virtual-gateway-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-virtual-gateway-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'appmesh-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v20190125/meshes/~A/virtualGateways/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'mesh-name))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'virtual-gateway-name))))
                                                        "UpdateVirtualGateway"))
      "structure" common-lisp:nil *error-map*)))
 (common-lisp:export 'update-virtual-gateway))
(common-lisp:progn
 (common-lisp:defun update-virtual-node
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key client-token mesh-name mesh-owner spec
                     virtual-node-name)
   (common-lisp:declare
    (common-lisp:ignorable client-token mesh-name mesh-owner spec
     virtual-node-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-virtual-node-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'appmesh-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v20190125/meshes/~A/virtualNodes/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'mesh-name))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'virtual-node-name))))
                                                        "UpdateVirtualNode"))
      "structure" common-lisp:nil *error-map*)))
 (common-lisp:export 'update-virtual-node))
(common-lisp:progn
 (common-lisp:defun update-virtual-router
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key client-token mesh-name mesh-owner spec
                     virtual-router-name)
   (common-lisp:declare
    (common-lisp:ignorable client-token mesh-name mesh-owner spec
     virtual-router-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-virtual-router-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'appmesh-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v20190125/meshes/~A/virtualRouters/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'mesh-name))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'virtual-router-name))))
                                                        "UpdateVirtualRouter"))
      "structure" common-lisp:nil *error-map*)))
 (common-lisp:export 'update-virtual-router))
(common-lisp:progn
 (common-lisp:defun update-virtual-service
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key client-token mesh-name mesh-owner spec
                     virtual-service-name)
   (common-lisp:declare
    (common-lisp:ignorable client-token mesh-name mesh-owner spec
     virtual-service-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-virtual-service-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'appmesh-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v20190125/meshes/~A/virtualServices/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'mesh-name))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'virtual-service-name))))
                                                        "UpdateVirtualService"))
      "structure" common-lisp:nil *error-map*)))
 (common-lisp:export 'update-virtual-service))
