;; DO NOT EDIT: File is generated by AWS-SDK/GENERATOR.

(common-lisp:defpackage #:aws-sdk/services/docdb/api
  (:use)
  (:nicknames #:aws/docdb)
  (:import-from #:aws-sdk/generator/shape)
  (:import-from #:aws-sdk/generator/operation)
  (:import-from #:aws-sdk/api)
  (:import-from #:aws-sdk/request)
  (:import-from #:aws-sdk/error))
(common-lisp:in-package #:aws-sdk/services/docdb/api)
(common-lisp:progn
 (common-lisp:defclass docdb-request (aws-sdk/request:request) common-lisp:nil
                       (:default-initargs :service "docdb" :protocol :query))
 (common-lisp:export 'docdb-request))
(common-lisp:progn
 (common-lisp:define-condition docdb-error
     (aws-sdk/error:aws-error)
     common-lisp:nil)
 (common-lisp:export 'docdb-error))
(common-lisp:defvar *error-map*
  '(("AuthorizationNotFoundFault" . authorization-not-found-fault)
    ("CertificateNotFoundFault" . certificate-not-found-fault)
    ("DBClusterAlreadyExistsFault" . dbcluster-already-exists-fault)
    ("DBClusterNotFoundFault" . dbcluster-not-found-fault)
    ("DBClusterParameterGroupNotFoundFault"
     . dbcluster-parameter-group-not-found-fault)
    ("DBClusterQuotaExceededFault" . dbcluster-quota-exceeded-fault)
    ("DBClusterSnapshotAlreadyExistsFault"
     . dbcluster-snapshot-already-exists-fault)
    ("DBClusterSnapshotNotFoundFault" . dbcluster-snapshot-not-found-fault)
    ("DBInstanceAlreadyExistsFault" . dbinstance-already-exists-fault)
    ("DBInstanceNotFoundFault" . dbinstance-not-found-fault)
    ("DBParameterGroupAlreadyExistsFault"
     . dbparameter-group-already-exists-fault)
    ("DBParameterGroupNotFoundFault" . dbparameter-group-not-found-fault)
    ("DBParameterGroupQuotaExceededFault"
     . dbparameter-group-quota-exceeded-fault)
    ("DBSecurityGroupNotFoundFault" . dbsecurity-group-not-found-fault)
    ("DBSnapshotAlreadyExistsFault" . dbsnapshot-already-exists-fault)
    ("DBSnapshotNotFoundFault" . dbsnapshot-not-found-fault)
    ("DBSubnetGroupAlreadyExistsFault" . dbsubnet-group-already-exists-fault)
    ("DBSubnetGroupDoesNotCoverEnoughAZs"
     . dbsubnet-group-does-not-cover-enough-azs)
    ("DBSubnetGroupNotFoundFault" . dbsubnet-group-not-found-fault)
    ("DBSubnetGroupQuotaExceededFault" . dbsubnet-group-quota-exceeded-fault)
    ("DBSubnetQuotaExceededFault" . dbsubnet-quota-exceeded-fault)
    ("DBUpgradeDependencyFailureFault" . dbupgrade-dependency-failure-fault)
    ("EventSubscriptionQuotaExceededFault"
     . event-subscription-quota-exceeded-fault)
    ("GlobalClusterAlreadyExistsFault" . global-cluster-already-exists-fault)
    ("GlobalClusterNotFoundFault" . global-cluster-not-found-fault)
    ("GlobalClusterQuotaExceededFault" . global-cluster-quota-exceeded-fault)
    ("InstanceQuotaExceededFault" . instance-quota-exceeded-fault)
    ("InsufficientDBClusterCapacityFault"
     . insufficient-dbcluster-capacity-fault)
    ("InsufficientDBInstanceCapacityFault"
     . insufficient-dbinstance-capacity-fault)
    ("InsufficientStorageClusterCapacityFault"
     . insufficient-storage-cluster-capacity-fault)
    ("InvalidDBClusterSnapshotStateFault"
     . invalid-dbcluster-snapshot-state-fault)
    ("InvalidDBClusterStateFault" . invalid-dbcluster-state-fault)
    ("InvalidDBInstanceStateFault" . invalid-dbinstance-state-fault)
    ("InvalidDBParameterGroupStateFault"
     . invalid-dbparameter-group-state-fault)
    ("InvalidDBSecurityGroupStateFault" . invalid-dbsecurity-group-state-fault)
    ("InvalidDBSnapshotStateFault" . invalid-dbsnapshot-state-fault)
    ("InvalidDBSubnetGroupStateFault" . invalid-dbsubnet-group-state-fault)
    ("InvalidDBSubnetStateFault" . invalid-dbsubnet-state-fault)
    ("InvalidEventSubscriptionStateFault"
     . invalid-event-subscription-state-fault)
    ("InvalidGlobalClusterStateFault" . invalid-global-cluster-state-fault)
    ("InvalidRestoreFault" . invalid-restore-fault)
    ("InvalidSubnet" . invalid-subnet)
    ("InvalidVPCNetworkStateFault" . invalid-vpcnetwork-state-fault)
    ("KMSKeyNotAccessibleFault" . kmskey-not-accessible-fault)
    ("ResourceNotFoundFault" . resource-not-found-fault)
    ("SNSInvalidTopicFault" . snsinvalid-topic-fault)
    ("SNSNoAuthorizationFault" . snsno-authorization-fault)
    ("SNSTopicArnNotFoundFault" . snstopic-arn-not-found-fault)
    ("SharedSnapshotQuotaExceededFault" . shared-snapshot-quota-exceeded-fault)
    ("SnapshotQuotaExceededFault" . snapshot-quota-exceeded-fault)
    ("SourceNotFoundFault" . source-not-found-fault)
    ("StorageQuotaExceededFault" . storage-quota-exceeded-fault)
    ("StorageTypeNotSupportedFault" . storage-type-not-supported-fault)
    ("SubnetAlreadyInUse" . subnet-already-in-use)
    ("SubscriptionAlreadyExistFault" . subscription-already-exist-fault)
    ("SubscriptionCategoryNotFoundFault"
     . subscription-category-not-found-fault)
    ("SubscriptionNotFoundFault" . subscription-not-found-fault)))
(common-lisp:progn
 (common-lisp:defclass add-source-identifier-to-subscription-message
                       common-lisp:nil
                       ((source-identifier :initarg :source-identifier :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %add-source-identifier-to-subscription-message-source-identifier
                         :initform
                         (common-lisp:error ":source-identifier is required"))
                        (subscription-name :initarg :subscription-name :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %add-source-identifier-to-subscription-message-subscription-name
                         :initform
                         (common-lisp:error
                          ":subscription-name is required"))))
 (common-lisp:export
  (common-lisp:list 'add-source-identifier-to-subscription-message
                    'make-add-source-identifier-to-subscription-message))
 (common-lisp:defun make-add-source-identifier-to-subscription-message
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key source-identifier subscription-name)
   (common-lisp:apply #'common-lisp:make-instance
                      'add-source-identifier-to-subscription-message
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          add-source-identifier-to-subscription-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          add-source-identifier-to-subscription-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subscription-name))
      (common-lisp:list
       (common-lisp:cons "SubscriptionName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-identifier))
      (common-lisp:list
       (common-lisp:cons "SourceIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          add-source-identifier-to-subscription-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass add-source-identifier-to-subscription-result
                       common-lisp:nil
                       ((event-subscription :initarg :event-subscription :type
                         (common-lisp:or event-subscription common-lisp:null)
                         :accessor
                         %add-source-identifier-to-subscription-result-event-subscription
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'add-source-identifier-to-subscription-result
                    'make-add-source-identifier-to-subscription-result))
 (common-lisp:defun make-add-source-identifier-to-subscription-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key event-subscription)
   (common-lisp:apply #'common-lisp:make-instance
                      'add-source-identifier-to-subscription-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          add-source-identifier-to-subscription-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          add-source-identifier-to-subscription-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'event-subscription))
      (common-lisp:list
       (common-lisp:cons "EventSubscription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          add-source-identifier-to-subscription-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass add-tags-to-resource-message common-lisp:nil
                       ((tags :initarg :tags :type
                         (common-lisp:or tag-list common-lisp:null) :accessor
                         %add-tags-to-resource-message-tags :initform
                         (common-lisp:error ":tags is required"))
                        (resource-name :initarg :resource-name :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %add-tags-to-resource-message-resource-name :initform
                         (common-lisp:error ":resource-name is required"))))
 (common-lisp:export
  (common-lisp:list 'add-tags-to-resource-message
                    'make-add-tags-to-resource-message))
 (common-lisp:defun make-add-tags-to-resource-message
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tags resource-name)
   (common-lisp:apply #'common-lisp:make-instance 'add-tags-to-resource-message
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          add-tags-to-resource-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          add-tags-to-resource-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-name))
      (common-lisp:list
       (common-lisp:cons "ResourceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          add-tags-to-resource-message))
   common-lisp:nil))
(common-lisp:deftype apply-method () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass apply-pending-maintenance-action-message common-lisp:nil
                       ((opt-in-type :initarg :opt-in-type :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %apply-pending-maintenance-action-message-opt-in-type
                         :initform
                         (common-lisp:error ":opt-in-type is required"))
                        (apply-action :initarg :apply-action :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %apply-pending-maintenance-action-message-apply-action
                         :initform
                         (common-lisp:error ":apply-action is required"))
                        (resource-identifier :initarg :resource-identifier
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         %apply-pending-maintenance-action-message-resource-identifier
                         :initform
                         (common-lisp:error
                          ":resource-identifier is required"))))
 (common-lisp:export
  (common-lisp:list 'apply-pending-maintenance-action-message
                    'make-apply-pending-maintenance-action-message))
 (common-lisp:defun make-apply-pending-maintenance-action-message
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key opt-in-type apply-action
                     resource-identifier)
   (common-lisp:apply #'common-lisp:make-instance
                      'apply-pending-maintenance-action-message
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          apply-pending-maintenance-action-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          apply-pending-maintenance-action-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-identifier))
      (common-lisp:list
       (common-lisp:cons "ResourceIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'apply-action))
      (common-lisp:list
       (common-lisp:cons "ApplyAction"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'opt-in-type))
      (common-lisp:list
       (common-lisp:cons "OptInType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          apply-pending-maintenance-action-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass apply-pending-maintenance-action-result common-lisp:nil
                       ((resource-pending-maintenance-actions :initarg
                         :resource-pending-maintenance-actions :type
                         (common-lisp:or resource-pending-maintenance-actions
                                         common-lisp:null)
                         :accessor
                         %apply-pending-maintenance-action-result-resource-pending-maintenance-actions
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'apply-pending-maintenance-action-result
                    'make-apply-pending-maintenance-action-result))
 (common-lisp:defun make-apply-pending-maintenance-action-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key resource-pending-maintenance-actions)
   (common-lisp:apply #'common-lisp:make-instance
                      'apply-pending-maintenance-action-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          apply-pending-maintenance-action-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          apply-pending-maintenance-action-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'resource-pending-maintenance-actions))
      (common-lisp:list
       (common-lisp:cons "ResourcePendingMaintenanceActions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          apply-pending-maintenance-action-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype attribute-value-list ()
   '(trivial-types:proper-list string))
 (common-lisp:defun |make-attribute-value-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list string))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition authorization-not-found-fault
     (docdb-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'authorization-not-found-fault)))
(common-lisp:progn
 (common-lisp:defclass availability-zone common-lisp:nil
                       ((name :initarg :name :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %availability-zone-name :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'availability-zone 'make-availability-zone))
 (common-lisp:defun make-availability-zone
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key name)
   (common-lisp:apply #'common-lisp:make-instance 'availability-zone
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input availability-zone))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input availability-zone))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input availability-zone))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype availability-zone-list ()
   '(trivial-types:proper-list availability-zone))
 (common-lisp:defun |make-availability-zone-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list availability-zone))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype availability-zones ()
   '(trivial-types:proper-list string))
 (common-lisp:defun |make-availability-zones|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list string))
   aws-sdk/generator/shape::members))
(common-lisp:deftype boolean () 'common-lisp:boolean)
(common-lisp:deftype boolean-optional () 'common-lisp:boolean)
(common-lisp:progn
 (common-lisp:defclass certificate common-lisp:nil
                       ((certificate-arn :initarg :certificate-arn :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %certificate-certificate-arn :initform
                         common-lisp:nil)
                        (valid-till :initarg :valid-till :type
                         (common-lisp:or tstamp common-lisp:null) :accessor
                         %certificate-valid-till :initform common-lisp:nil)
                        (valid-from :initarg :valid-from :type
                         (common-lisp:or tstamp common-lisp:null) :accessor
                         %certificate-valid-from :initform common-lisp:nil)
                        (thumbprint :initarg :thumbprint :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %certificate-thumbprint :initform common-lisp:nil)
                        (certificate-type :initarg :certificate-type :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %certificate-certificate-type :initform
                         common-lisp:nil)
                        (certificate-identifier :initarg
                         :certificate-identifier :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %certificate-certificate-identifier :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'certificate 'make-certificate))
 (common-lisp:defun make-certificate
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key certificate-arn valid-till valid-from
                     thumbprint certificate-type certificate-identifier)
   (common-lisp:apply #'common-lisp:make-instance 'certificate
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input certificate))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input certificate))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'certificate-identifier))
      (common-lisp:list
       (common-lisp:cons "CertificateIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'certificate-type))
      (common-lisp:list
       (common-lisp:cons "CertificateType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'thumbprint))
      (common-lisp:list
       (common-lisp:cons "Thumbprint"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'valid-from))
      (common-lisp:list
       (common-lisp:cons "ValidFrom"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'valid-till))
      (common-lisp:list
       (common-lisp:cons "ValidTill"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'certificate-arn))
      (common-lisp:list
       (common-lisp:cons "CertificateArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input certificate))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype certificate-list ()
   '(trivial-types:proper-list certificate))
 (common-lisp:defun |make-certificate-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list certificate))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass certificate-message common-lisp:nil
                       ((marker :initarg :marker :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %certificate-message-marker :initform common-lisp:nil)
                        (certificates :initarg :certificates :type
                         (common-lisp:or certificate-list common-lisp:null)
                         :accessor %certificate-message-certificates :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'certificate-message 'make-certificate-message))
 (common-lisp:defun make-certificate-message
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key marker certificates)
   (common-lisp:apply #'common-lisp:make-instance 'certificate-message
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input certificate-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input certificate-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'certificates))
      (common-lisp:list
       (common-lisp:cons "Certificates"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input certificate-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition certificate-not-found-fault
     (docdb-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'certificate-not-found-fault)))
(common-lisp:progn
 (common-lisp:defclass cloudwatch-logs-export-configuration common-lisp:nil
                       ((disable-log-types :initarg :disable-log-types :type
                         (common-lisp:or log-type-list common-lisp:null)
                         :accessor
                         %cloudwatch-logs-export-configuration-disable-log-types
                         :initform common-lisp:nil)
                        (enable-log-types :initarg :enable-log-types :type
                         (common-lisp:or log-type-list common-lisp:null)
                         :accessor
                         %cloudwatch-logs-export-configuration-enable-log-types
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'cloudwatch-logs-export-configuration
                    'make-cloudwatch-logs-export-configuration))
 (common-lisp:defun make-cloudwatch-logs-export-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key disable-log-types enable-log-types)
   (common-lisp:apply #'common-lisp:make-instance
                      'cloudwatch-logs-export-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          cloudwatch-logs-export-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          cloudwatch-logs-export-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'enable-log-types))
      (common-lisp:list
       (common-lisp:cons "EnableLogTypes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'disable-log-types))
      (common-lisp:list
       (common-lisp:cons "DisableLogTypes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          cloudwatch-logs-export-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass copy-dbcluster-parameter-group-message common-lisp:nil
                       ((tags :initarg :tags :type
                         (common-lisp:or tag-list common-lisp:null) :accessor
                         %copy-dbcluster-parameter-group-message-tags :initform
                         common-lisp:nil)
                        (target-dbcluster-parameter-group-description :initarg
                         :target-dbcluster-parameter-group-description :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %copy-dbcluster-parameter-group-message-target-dbcluster-parameter-group-description
                         :initform
                         (common-lisp:error
                          ":target-dbcluster-parameter-group-description is required"))
                        (target-dbcluster-parameter-group-identifier :initarg
                         :target-dbcluster-parameter-group-identifier :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %copy-dbcluster-parameter-group-message-target-dbcluster-parameter-group-identifier
                         :initform
                         (common-lisp:error
                          ":target-dbcluster-parameter-group-identifier is required"))
                        (source-dbcluster-parameter-group-identifier :initarg
                         :source-dbcluster-parameter-group-identifier :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %copy-dbcluster-parameter-group-message-source-dbcluster-parameter-group-identifier
                         :initform
                         (common-lisp:error
                          ":source-dbcluster-parameter-group-identifier is required"))))
 (common-lisp:export
  (common-lisp:list 'copy-dbcluster-parameter-group-message
                    'make-copy-dbcluster-parameter-group-message))
 (common-lisp:defun make-copy-dbcluster-parameter-group-message
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tags
                     target-dbcluster-parameter-group-description
                     target-dbcluster-parameter-group-identifier
                     source-dbcluster-parameter-group-identifier)
   (common-lisp:apply #'common-lisp:make-instance
                      'copy-dbcluster-parameter-group-message
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          copy-dbcluster-parameter-group-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          copy-dbcluster-parameter-group-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'source-dbcluster-parameter-group-identifier))
      (common-lisp:list
       (common-lisp:cons "SourceDBClusterParameterGroupIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'target-dbcluster-parameter-group-identifier))
      (common-lisp:list
       (common-lisp:cons "TargetDBClusterParameterGroupIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'target-dbcluster-parameter-group-description))
      (common-lisp:list
       (common-lisp:cons "TargetDBClusterParameterGroupDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          copy-dbcluster-parameter-group-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass copy-dbcluster-parameter-group-result common-lisp:nil
                       ((dbcluster-parameter-group :initarg
                         :dbcluster-parameter-group :type
                         (common-lisp:or dbcluster-parameter-group
                                         common-lisp:null)
                         :accessor
                         %copy-dbcluster-parameter-group-result-dbcluster-parameter-group
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'copy-dbcluster-parameter-group-result
                    'make-copy-dbcluster-parameter-group-result))
 (common-lisp:defun make-copy-dbcluster-parameter-group-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key dbcluster-parameter-group)
   (common-lisp:apply #'common-lisp:make-instance
                      'copy-dbcluster-parameter-group-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          copy-dbcluster-parameter-group-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          copy-dbcluster-parameter-group-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dbcluster-parameter-group))
      (common-lisp:list
       (common-lisp:cons "DBClusterParameterGroup"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          copy-dbcluster-parameter-group-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass copy-dbcluster-snapshot-message common-lisp:nil
                       ((tags :initarg :tags :type
                         (common-lisp:or tag-list common-lisp:null) :accessor
                         %copy-dbcluster-snapshot-message-tags :initform
                         common-lisp:nil)
                        (copy-tags :initarg :copy-tags :type
                         (common-lisp:or boolean-optional common-lisp:null)
                         :accessor %copy-dbcluster-snapshot-message-copy-tags
                         :initform common-lisp:nil)
                        (pre-signed-url :initarg :pre-signed-url :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %copy-dbcluster-snapshot-message-pre-signed-url
                         :initform common-lisp:nil)
                        (kms-key-id :initarg :kms-key-id :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %copy-dbcluster-snapshot-message-kms-key-id :initform
                         common-lisp:nil)
                        (target-dbcluster-snapshot-identifier :initarg
                         :target-dbcluster-snapshot-identifier :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %copy-dbcluster-snapshot-message-target-dbcluster-snapshot-identifier
                         :initform
                         (common-lisp:error
                          ":target-dbcluster-snapshot-identifier is required"))
                        (source-dbcluster-snapshot-identifier :initarg
                         :source-dbcluster-snapshot-identifier :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %copy-dbcluster-snapshot-message-source-dbcluster-snapshot-identifier
                         :initform
                         (common-lisp:error
                          ":source-dbcluster-snapshot-identifier is required"))))
 (common-lisp:export
  (common-lisp:list 'copy-dbcluster-snapshot-message
                    'make-copy-dbcluster-snapshot-message))
 (common-lisp:defun make-copy-dbcluster-snapshot-message
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tags copy-tags pre-signed-url kms-key-id
                     target-dbcluster-snapshot-identifier
                     source-dbcluster-snapshot-identifier)
   (common-lisp:apply #'common-lisp:make-instance
                      'copy-dbcluster-snapshot-message
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          copy-dbcluster-snapshot-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          copy-dbcluster-snapshot-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'source-dbcluster-snapshot-identifier))
      (common-lisp:list
       (common-lisp:cons "SourceDBClusterSnapshotIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'target-dbcluster-snapshot-identifier))
      (common-lisp:list
       (common-lisp:cons "TargetDBClusterSnapshotIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kms-key-id))
      (common-lisp:list
       (common-lisp:cons "KmsKeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pre-signed-url))
      (common-lisp:list
       (common-lisp:cons "PreSignedUrl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'copy-tags))
      (common-lisp:list
       (common-lisp:cons "CopyTags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          copy-dbcluster-snapshot-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass copy-dbcluster-snapshot-result common-lisp:nil
                       ((dbcluster-snapshot :initarg :dbcluster-snapshot :type
                         (common-lisp:or dbcluster-snapshot common-lisp:null)
                         :accessor
                         %copy-dbcluster-snapshot-result-dbcluster-snapshot
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'copy-dbcluster-snapshot-result
                    'make-copy-dbcluster-snapshot-result))
 (common-lisp:defun make-copy-dbcluster-snapshot-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key dbcluster-snapshot)
   (common-lisp:apply #'common-lisp:make-instance
                      'copy-dbcluster-snapshot-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          copy-dbcluster-snapshot-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          copy-dbcluster-snapshot-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dbcluster-snapshot))
      (common-lisp:list
       (common-lisp:cons "DBClusterSnapshot"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          copy-dbcluster-snapshot-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-dbcluster-message common-lisp:nil
                       ((global-cluster-identifier :initarg
                         :global-cluster-identifier :type
                         (common-lisp:or global-cluster-identifier
                                         common-lisp:null)
                         :accessor
                         %create-dbcluster-message-global-cluster-identifier
                         :initform common-lisp:nil)
                        (deletion-protection :initarg :deletion-protection
                         :type
                         (common-lisp:or boolean-optional common-lisp:null)
                         :accessor
                         %create-dbcluster-message-deletion-protection
                         :initform common-lisp:nil)
                        (enable-cloudwatch-logs-exports :initarg
                         :enable-cloudwatch-logs-exports :type
                         (common-lisp:or log-type-list common-lisp:null)
                         :accessor
                         %create-dbcluster-message-enable-cloudwatch-logs-exports
                         :initform common-lisp:nil)
                        (pre-signed-url :initarg :pre-signed-url :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %create-dbcluster-message-pre-signed-url :initform
                         common-lisp:nil)
                        (kms-key-id :initarg :kms-key-id :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %create-dbcluster-message-kms-key-id :initform
                         common-lisp:nil)
                        (storage-encrypted :initarg :storage-encrypted :type
                         (common-lisp:or boolean-optional common-lisp:null)
                         :accessor %create-dbcluster-message-storage-encrypted
                         :initform common-lisp:nil)
                        (tags :initarg :tags :type
                         (common-lisp:or tag-list common-lisp:null) :accessor
                         %create-dbcluster-message-tags :initform
                         common-lisp:nil)
                        (preferred-maintenance-window :initarg
                         :preferred-maintenance-window :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %create-dbcluster-message-preferred-maintenance-window
                         :initform common-lisp:nil)
                        (preferred-backup-window :initarg
                         :preferred-backup-window :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %create-dbcluster-message-preferred-backup-window
                         :initform common-lisp:nil)
                        (master-user-password :initarg :master-user-password
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         %create-dbcluster-message-master-user-password
                         :initform common-lisp:nil)
                        (master-username :initarg :master-username :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %create-dbcluster-message-master-username :initform
                         common-lisp:nil)
                        (port :initarg :port :type
                         (common-lisp:or integer-optional common-lisp:null)
                         :accessor %create-dbcluster-message-port :initform
                         common-lisp:nil)
                        (engine-version :initarg :engine-version :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %create-dbcluster-message-engine-version :initform
                         common-lisp:nil)
                        (engine :initarg :engine :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %create-dbcluster-message-engine :initform
                         (common-lisp:error ":engine is required"))
                        (dbsubnet-group-name :initarg :dbsubnet-group-name
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         %create-dbcluster-message-dbsubnet-group-name
                         :initform common-lisp:nil)
                        (vpc-security-group-ids :initarg
                         :vpc-security-group-ids :type
                         (common-lisp:or vpc-security-group-id-list
                                         common-lisp:null)
                         :accessor
                         %create-dbcluster-message-vpc-security-group-ids
                         :initform common-lisp:nil)
                        (dbcluster-parameter-group-name :initarg
                         :dbcluster-parameter-group-name :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %create-dbcluster-message-dbcluster-parameter-group-name
                         :initform common-lisp:nil)
                        (dbcluster-identifier :initarg :dbcluster-identifier
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         %create-dbcluster-message-dbcluster-identifier
                         :initform
                         (common-lisp:error
                          ":dbcluster-identifier is required"))
                        (backup-retention-period :initarg
                         :backup-retention-period :type
                         (common-lisp:or integer-optional common-lisp:null)
                         :accessor
                         %create-dbcluster-message-backup-retention-period
                         :initform common-lisp:nil)
                        (availability-zones :initarg :availability-zones :type
                         (common-lisp:or availability-zones common-lisp:null)
                         :accessor %create-dbcluster-message-availability-zones
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'create-dbcluster-message 'make-create-dbcluster-message))
 (common-lisp:defun make-create-dbcluster-message
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key global-cluster-identifier
                     deletion-protection enable-cloudwatch-logs-exports
                     pre-signed-url kms-key-id storage-encrypted tags
                     preferred-maintenance-window preferred-backup-window
                     master-user-password master-username port engine-version
                     engine dbsubnet-group-name vpc-security-group-ids
                     dbcluster-parameter-group-name dbcluster-identifier
                     backup-retention-period availability-zones)
   (common-lisp:apply #'common-lisp:make-instance 'create-dbcluster-message
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-dbcluster-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-dbcluster-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'availability-zones))
      (common-lisp:list
       (common-lisp:cons "AvailabilityZones"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'backup-retention-period))
      (common-lisp:list
       (common-lisp:cons "BackupRetentionPeriod"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dbcluster-identifier))
      (common-lisp:list
       (common-lisp:cons "DBClusterIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dbcluster-parameter-group-name))
      (common-lisp:list
       (common-lisp:cons "DBClusterParameterGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'vpc-security-group-ids))
      (common-lisp:list
       (common-lisp:cons "VpcSecurityGroupIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dbsubnet-group-name))
      (common-lisp:list
       (common-lisp:cons "DBSubnetGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'engine))
      (common-lisp:list
       (common-lisp:cons "Engine"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'engine-version))
      (common-lisp:list
       (common-lisp:cons "EngineVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'port))
      (common-lisp:list
       (common-lisp:cons "Port"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'master-username))
      (common-lisp:list
       (common-lisp:cons "MasterUsername"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'master-user-password))
      (common-lisp:list
       (common-lisp:cons "MasterUserPassword"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'preferred-backup-window))
      (common-lisp:list
       (common-lisp:cons "PreferredBackupWindow"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'preferred-maintenance-window))
      (common-lisp:list
       (common-lisp:cons "PreferredMaintenanceWindow"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'storage-encrypted))
      (common-lisp:list
       (common-lisp:cons "StorageEncrypted"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kms-key-id))
      (common-lisp:list
       (common-lisp:cons "KmsKeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pre-signed-url))
      (common-lisp:list
       (common-lisp:cons "PreSignedUrl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'enable-cloudwatch-logs-exports))
      (common-lisp:list
       (common-lisp:cons "EnableCloudwatchLogsExports"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'deletion-protection))
      (common-lisp:list
       (common-lisp:cons "DeletionProtection"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'global-cluster-identifier))
      (common-lisp:list
       (common-lisp:cons "GlobalClusterIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-dbcluster-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-dbcluster-parameter-group-message common-lisp:nil
                       ((tags :initarg :tags :type
                         (common-lisp:or tag-list common-lisp:null) :accessor
                         %create-dbcluster-parameter-group-message-tags
                         :initform common-lisp:nil)
                        (description :initarg :description :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %create-dbcluster-parameter-group-message-description
                         :initform
                         (common-lisp:error ":description is required"))
                        (dbparameter-group-family :initarg
                         :dbparameter-group-family :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %create-dbcluster-parameter-group-message-dbparameter-group-family
                         :initform
                         (common-lisp:error
                          ":dbparameter-group-family is required"))
                        (dbcluster-parameter-group-name :initarg
                         :dbcluster-parameter-group-name :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %create-dbcluster-parameter-group-message-dbcluster-parameter-group-name
                         :initform
                         (common-lisp:error
                          ":dbcluster-parameter-group-name is required"))))
 (common-lisp:export
  (common-lisp:list 'create-dbcluster-parameter-group-message
                    'make-create-dbcluster-parameter-group-message))
 (common-lisp:defun make-create-dbcluster-parameter-group-message
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tags description dbparameter-group-family
                     dbcluster-parameter-group-name)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-dbcluster-parameter-group-message
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-dbcluster-parameter-group-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-dbcluster-parameter-group-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dbcluster-parameter-group-name))
      (common-lisp:list
       (common-lisp:cons "DBClusterParameterGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dbparameter-group-family))
      (common-lisp:list
       (common-lisp:cons "DBParameterGroupFamily"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-dbcluster-parameter-group-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-dbcluster-parameter-group-result common-lisp:nil
                       ((dbcluster-parameter-group :initarg
                         :dbcluster-parameter-group :type
                         (common-lisp:or dbcluster-parameter-group
                                         common-lisp:null)
                         :accessor
                         %create-dbcluster-parameter-group-result-dbcluster-parameter-group
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'create-dbcluster-parameter-group-result
                    'make-create-dbcluster-parameter-group-result))
 (common-lisp:defun make-create-dbcluster-parameter-group-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key dbcluster-parameter-group)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-dbcluster-parameter-group-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-dbcluster-parameter-group-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-dbcluster-parameter-group-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dbcluster-parameter-group))
      (common-lisp:list
       (common-lisp:cons "DBClusterParameterGroup"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-dbcluster-parameter-group-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-dbcluster-result common-lisp:nil
                       ((dbcluster :initarg :dbcluster :type
                         (common-lisp:or dbcluster common-lisp:null) :accessor
                         %create-dbcluster-result-dbcluster :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'create-dbcluster-result 'make-create-dbcluster-result))
 (common-lisp:defun make-create-dbcluster-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key dbcluster)
   (common-lisp:apply #'common-lisp:make-instance 'create-dbcluster-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-dbcluster-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-dbcluster-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dbcluster))
      (common-lisp:list
       (common-lisp:cons "DBCluster"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-dbcluster-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-dbcluster-snapshot-message common-lisp:nil
                       ((tags :initarg :tags :type
                         (common-lisp:or tag-list common-lisp:null) :accessor
                         %create-dbcluster-snapshot-message-tags :initform
                         common-lisp:nil)
                        (dbcluster-identifier :initarg :dbcluster-identifier
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         %create-dbcluster-snapshot-message-dbcluster-identifier
                         :initform
                         (common-lisp:error
                          ":dbcluster-identifier is required"))
                        (dbcluster-snapshot-identifier :initarg
                         :dbcluster-snapshot-identifier :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %create-dbcluster-snapshot-message-dbcluster-snapshot-identifier
                         :initform
                         (common-lisp:error
                          ":dbcluster-snapshot-identifier is required"))))
 (common-lisp:export
  (common-lisp:list 'create-dbcluster-snapshot-message
                    'make-create-dbcluster-snapshot-message))
 (common-lisp:defun make-create-dbcluster-snapshot-message
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tags dbcluster-identifier
                     dbcluster-snapshot-identifier)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-dbcluster-snapshot-message
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-dbcluster-snapshot-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-dbcluster-snapshot-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dbcluster-snapshot-identifier))
      (common-lisp:list
       (common-lisp:cons "DBClusterSnapshotIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dbcluster-identifier))
      (common-lisp:list
       (common-lisp:cons "DBClusterIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-dbcluster-snapshot-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-dbcluster-snapshot-result common-lisp:nil
                       ((dbcluster-snapshot :initarg :dbcluster-snapshot :type
                         (common-lisp:or dbcluster-snapshot common-lisp:null)
                         :accessor
                         %create-dbcluster-snapshot-result-dbcluster-snapshot
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'create-dbcluster-snapshot-result
                    'make-create-dbcluster-snapshot-result))
 (common-lisp:defun make-create-dbcluster-snapshot-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key dbcluster-snapshot)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-dbcluster-snapshot-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-dbcluster-snapshot-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-dbcluster-snapshot-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dbcluster-snapshot))
      (common-lisp:list
       (common-lisp:cons "DBClusterSnapshot"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-dbcluster-snapshot-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-dbinstance-message common-lisp:nil
                       ((performance-insights-kmskey-id :initarg
                         :performance-insights-kmskey-id :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %create-dbinstance-message-performance-insights-kmskey-id
                         :initform common-lisp:nil)
                        (enable-performance-insights :initarg
                         :enable-performance-insights :type
                         (common-lisp:or boolean-optional common-lisp:null)
                         :accessor
                         %create-dbinstance-message-enable-performance-insights
                         :initform common-lisp:nil)
                        (promotion-tier :initarg :promotion-tier :type
                         (common-lisp:or integer-optional common-lisp:null)
                         :accessor %create-dbinstance-message-promotion-tier
                         :initform common-lisp:nil)
                        (copy-tags-to-snapshot :initarg :copy-tags-to-snapshot
                         :type
                         (common-lisp:or boolean-optional common-lisp:null)
                         :accessor
                         %create-dbinstance-message-copy-tags-to-snapshot
                         :initform common-lisp:nil)
                        (dbcluster-identifier :initarg :dbcluster-identifier
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         %create-dbinstance-message-dbcluster-identifier
                         :initform
                         (common-lisp:error
                          ":dbcluster-identifier is required"))
                        (tags :initarg :tags :type
                         (common-lisp:or tag-list common-lisp:null) :accessor
                         %create-dbinstance-message-tags :initform
                         common-lisp:nil)
                        (auto-minor-version-upgrade :initarg
                         :auto-minor-version-upgrade :type
                         (common-lisp:or boolean-optional common-lisp:null)
                         :accessor
                         %create-dbinstance-message-auto-minor-version-upgrade
                         :initform common-lisp:nil)
                        (preferred-maintenance-window :initarg
                         :preferred-maintenance-window :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %create-dbinstance-message-preferred-maintenance-window
                         :initform common-lisp:nil)
                        (availability-zone :initarg :availability-zone :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %create-dbinstance-message-availability-zone :initform
                         common-lisp:nil)
                        (engine :initarg :engine :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %create-dbinstance-message-engine :initform
                         (common-lisp:error ":engine is required"))
                        (dbinstance-class :initarg :dbinstance-class :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %create-dbinstance-message-dbinstance-class :initform
                         (common-lisp:error ":dbinstance-class is required"))
                        (dbinstance-identifier :initarg :dbinstance-identifier
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         %create-dbinstance-message-dbinstance-identifier
                         :initform
                         (common-lisp:error
                          ":dbinstance-identifier is required"))))
 (common-lisp:export
  (common-lisp:list 'create-dbinstance-message
                    'make-create-dbinstance-message))
 (common-lisp:defun make-create-dbinstance-message
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key performance-insights-kmskey-id
                     enable-performance-insights promotion-tier
                     copy-tags-to-snapshot dbcluster-identifier tags
                     auto-minor-version-upgrade preferred-maintenance-window
                     availability-zone engine dbinstance-class
                     dbinstance-identifier)
   (common-lisp:apply #'common-lisp:make-instance 'create-dbinstance-message
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-dbinstance-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-dbinstance-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dbinstance-identifier))
      (common-lisp:list
       (common-lisp:cons "DBInstanceIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dbinstance-class))
      (common-lisp:list
       (common-lisp:cons "DBInstanceClass"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'engine))
      (common-lisp:list
       (common-lisp:cons "Engine"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'availability-zone))
      (common-lisp:list
       (common-lisp:cons "AvailabilityZone"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'preferred-maintenance-window))
      (common-lisp:list
       (common-lisp:cons "PreferredMaintenanceWindow"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'auto-minor-version-upgrade))
      (common-lisp:list
       (common-lisp:cons "AutoMinorVersionUpgrade"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dbcluster-identifier))
      (common-lisp:list
       (common-lisp:cons "DBClusterIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'copy-tags-to-snapshot))
      (common-lisp:list
       (common-lisp:cons "CopyTagsToSnapshot"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'promotion-tier))
      (common-lisp:list
       (common-lisp:cons "PromotionTier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'enable-performance-insights))
      (common-lisp:list
       (common-lisp:cons "EnablePerformanceInsights"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'performance-insights-kmskey-id))
      (common-lisp:list
       (common-lisp:cons "PerformanceInsightsKMSKeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-dbinstance-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-dbinstance-result common-lisp:nil
                       ((dbinstance :initarg :dbinstance :type
                         (common-lisp:or dbinstance common-lisp:null) :accessor
                         %create-dbinstance-result-dbinstance :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'create-dbinstance-result 'make-create-dbinstance-result))
 (common-lisp:defun make-create-dbinstance-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key dbinstance)
   (common-lisp:apply #'common-lisp:make-instance 'create-dbinstance-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-dbinstance-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-dbinstance-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dbinstance))
      (common-lisp:list
       (common-lisp:cons "DBInstance"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-dbinstance-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-dbsubnet-group-message common-lisp:nil
                       ((tags :initarg :tags :type
                         (common-lisp:or tag-list common-lisp:null) :accessor
                         %create-dbsubnet-group-message-tags :initform
                         common-lisp:nil)
                        (subnet-ids :initarg :subnet-ids :type
                         (common-lisp:or subnet-identifier-list
                                         common-lisp:null)
                         :accessor %create-dbsubnet-group-message-subnet-ids
                         :initform
                         (common-lisp:error ":subnet-ids is required"))
                        (dbsubnet-group-description :initarg
                         :dbsubnet-group-description :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %create-dbsubnet-group-message-dbsubnet-group-description
                         :initform
                         (common-lisp:error
                          ":dbsubnet-group-description is required"))
                        (dbsubnet-group-name :initarg :dbsubnet-group-name
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         %create-dbsubnet-group-message-dbsubnet-group-name
                         :initform
                         (common-lisp:error
                          ":dbsubnet-group-name is required"))))
 (common-lisp:export
  (common-lisp:list 'create-dbsubnet-group-message
                    'make-create-dbsubnet-group-message))
 (common-lisp:defun make-create-dbsubnet-group-message
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tags subnet-ids
                     dbsubnet-group-description dbsubnet-group-name)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-dbsubnet-group-message
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-dbsubnet-group-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-dbsubnet-group-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dbsubnet-group-name))
      (common-lisp:list
       (common-lisp:cons "DBSubnetGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dbsubnet-group-description))
      (common-lisp:list
       (common-lisp:cons "DBSubnetGroupDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subnet-ids))
      (common-lisp:list
       (common-lisp:cons "SubnetIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-dbsubnet-group-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-dbsubnet-group-result common-lisp:nil
                       ((dbsubnet-group :initarg :dbsubnet-group :type
                         (common-lisp:or dbsubnet-group common-lisp:null)
                         :accessor %create-dbsubnet-group-result-dbsubnet-group
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'create-dbsubnet-group-result
                    'make-create-dbsubnet-group-result))
 (common-lisp:defun make-create-dbsubnet-group-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key dbsubnet-group)
   (common-lisp:apply #'common-lisp:make-instance 'create-dbsubnet-group-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-dbsubnet-group-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-dbsubnet-group-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dbsubnet-group))
      (common-lisp:list
       (common-lisp:cons "DBSubnetGroup"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-dbsubnet-group-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-event-subscription-message common-lisp:nil
                       ((tags :initarg :tags :type
                         (common-lisp:or tag-list common-lisp:null) :accessor
                         %create-event-subscription-message-tags :initform
                         common-lisp:nil)
                        (enabled :initarg :enabled :type
                         (common-lisp:or boolean-optional common-lisp:null)
                         :accessor %create-event-subscription-message-enabled
                         :initform common-lisp:nil)
                        (source-ids :initarg :source-ids :type
                         (common-lisp:or source-ids-list common-lisp:null)
                         :accessor
                         %create-event-subscription-message-source-ids
                         :initform common-lisp:nil)
                        (event-categories :initarg :event-categories :type
                         (common-lisp:or event-categories-list
                                         common-lisp:null)
                         :accessor
                         %create-event-subscription-message-event-categories
                         :initform common-lisp:nil)
                        (source-type :initarg :source-type :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %create-event-subscription-message-source-type
                         :initform common-lisp:nil)
                        (sns-topic-arn :initarg :sns-topic-arn :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %create-event-subscription-message-sns-topic-arn
                         :initform
                         (common-lisp:error ":sns-topic-arn is required"))
                        (subscription-name :initarg :subscription-name :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %create-event-subscription-message-subscription-name
                         :initform
                         (common-lisp:error
                          ":subscription-name is required"))))
 (common-lisp:export
  (common-lisp:list 'create-event-subscription-message
                    'make-create-event-subscription-message))
 (common-lisp:defun make-create-event-subscription-message
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tags enabled source-ids event-categories
                     source-type sns-topic-arn subscription-name)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-event-subscription-message
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-event-subscription-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-event-subscription-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subscription-name))
      (common-lisp:list
       (common-lisp:cons "SubscriptionName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sns-topic-arn))
      (common-lisp:list
       (common-lisp:cons "SnsTopicArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-type))
      (common-lisp:list
       (common-lisp:cons "SourceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'event-categories))
      (common-lisp:list
       (common-lisp:cons "EventCategories"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-ids))
      (common-lisp:list
       (common-lisp:cons "SourceIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'enabled))
      (common-lisp:list
       (common-lisp:cons "Enabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-event-subscription-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-event-subscription-result common-lisp:nil
                       ((event-subscription :initarg :event-subscription :type
                         (common-lisp:or event-subscription common-lisp:null)
                         :accessor
                         %create-event-subscription-result-event-subscription
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'create-event-subscription-result
                    'make-create-event-subscription-result))
 (common-lisp:defun make-create-event-subscription-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key event-subscription)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-event-subscription-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-event-subscription-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-event-subscription-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'event-subscription))
      (common-lisp:list
       (common-lisp:cons "EventSubscription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-event-subscription-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-global-cluster-message common-lisp:nil
                       ((storage-encrypted :initarg :storage-encrypted :type
                         (common-lisp:or boolean-optional common-lisp:null)
                         :accessor
                         %create-global-cluster-message-storage-encrypted
                         :initform common-lisp:nil)
                        (database-name :initarg :database-name :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %create-global-cluster-message-database-name :initform
                         common-lisp:nil)
                        (deletion-protection :initarg :deletion-protection
                         :type
                         (common-lisp:or boolean-optional common-lisp:null)
                         :accessor
                         %create-global-cluster-message-deletion-protection
                         :initform common-lisp:nil)
                        (engine-version :initarg :engine-version :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %create-global-cluster-message-engine-version
                         :initform common-lisp:nil)
                        (engine :initarg :engine :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %create-global-cluster-message-engine :initform
                         common-lisp:nil)
                        (source-dbcluster-identifier :initarg
                         :source-dbcluster-identifier :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %create-global-cluster-message-source-dbcluster-identifier
                         :initform common-lisp:nil)
                        (global-cluster-identifier :initarg
                         :global-cluster-identifier :type
                         (common-lisp:or global-cluster-identifier
                                         common-lisp:null)
                         :accessor
                         %create-global-cluster-message-global-cluster-identifier
                         :initform
                         (common-lisp:error
                          ":global-cluster-identifier is required"))))
 (common-lisp:export
  (common-lisp:list 'create-global-cluster-message
                    'make-create-global-cluster-message))
 (common-lisp:defun make-create-global-cluster-message
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key storage-encrypted database-name
                     deletion-protection engine-version engine
                     source-dbcluster-identifier global-cluster-identifier)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-global-cluster-message
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-global-cluster-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-global-cluster-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'global-cluster-identifier))
      (common-lisp:list
       (common-lisp:cons "GlobalClusterIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'source-dbcluster-identifier))
      (common-lisp:list
       (common-lisp:cons "SourceDBClusterIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'engine))
      (common-lisp:list
       (common-lisp:cons "Engine"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'engine-version))
      (common-lisp:list
       (common-lisp:cons "EngineVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'deletion-protection))
      (common-lisp:list
       (common-lisp:cons "DeletionProtection"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'database-name))
      (common-lisp:list
       (common-lisp:cons "DatabaseName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'storage-encrypted))
      (common-lisp:list
       (common-lisp:cons "StorageEncrypted"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-global-cluster-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-global-cluster-result common-lisp:nil
                       ((global-cluster :initarg :global-cluster :type
                         (common-lisp:or global-cluster common-lisp:null)
                         :accessor %create-global-cluster-result-global-cluster
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'create-global-cluster-result
                    'make-create-global-cluster-result))
 (common-lisp:defun make-create-global-cluster-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key global-cluster)
   (common-lisp:apply #'common-lisp:make-instance 'create-global-cluster-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-global-cluster-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-global-cluster-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'global-cluster))
      (common-lisp:list
       (common-lisp:cons "GlobalCluster"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-global-cluster-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass dbcluster common-lisp:nil
                       ((deletion-protection :initarg :deletion-protection
                         :type (common-lisp:or boolean common-lisp:null)
                         :accessor %dbcluster-deletion-protection :initform
                         common-lisp:nil)
                        (enabled-cloudwatch-logs-exports :initarg
                         :enabled-cloudwatch-logs-exports :type
                         (common-lisp:or log-type-list common-lisp:null)
                         :accessor %dbcluster-enabled-cloudwatch-logs-exports
                         :initform common-lisp:nil)
                        (cluster-create-time :initarg :cluster-create-time
                         :type (common-lisp:or tstamp common-lisp:null)
                         :accessor %dbcluster-cluster-create-time :initform
                         common-lisp:nil)
                        (clone-group-id :initarg :clone-group-id :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %dbcluster-clone-group-id :initform common-lisp:nil)
                        (associated-roles :initarg :associated-roles :type
                         (common-lisp:or dbcluster-roles common-lisp:null)
                         :accessor %dbcluster-associated-roles :initform
                         common-lisp:nil)
                        (dbcluster-arn :initarg :dbcluster-arn :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %dbcluster-dbcluster-arn :initform common-lisp:nil)
                        (db-cluster-resource-id :initarg
                         :db-cluster-resource-id :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %dbcluster-db-cluster-resource-id :initform
                         common-lisp:nil)
                        (kms-key-id :initarg :kms-key-id :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %dbcluster-kms-key-id :initform common-lisp:nil)
                        (storage-encrypted :initarg :storage-encrypted :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         %dbcluster-storage-encrypted :initform
                         common-lisp:nil)
                        (hosted-zone-id :initarg :hosted-zone-id :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %dbcluster-hosted-zone-id :initform common-lisp:nil)
                        (vpc-security-groups :initarg :vpc-security-groups
                         :type
                         (common-lisp:or vpc-security-group-membership-list
                                         common-lisp:null)
                         :accessor %dbcluster-vpc-security-groups :initform
                         common-lisp:nil)
                        (dbcluster-members :initarg :dbcluster-members :type
                         (common-lisp:or dbcluster-member-list
                                         common-lisp:null)
                         :accessor %dbcluster-dbcluster-members :initform
                         common-lisp:nil)
                        (read-replica-identifiers :initarg
                         :read-replica-identifiers :type
                         (common-lisp:or read-replica-identifier-list
                                         common-lisp:null)
                         :accessor %dbcluster-read-replica-identifiers
                         :initform common-lisp:nil)
                        (replication-source-identifier :initarg
                         :replication-source-identifier :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %dbcluster-replication-source-identifier :initform
                         common-lisp:nil)
                        (preferred-maintenance-window :initarg
                         :preferred-maintenance-window :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %dbcluster-preferred-maintenance-window :initform
                         common-lisp:nil)
                        (preferred-backup-window :initarg
                         :preferred-backup-window :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %dbcluster-preferred-backup-window :initform
                         common-lisp:nil)
                        (master-username :initarg :master-username :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %dbcluster-master-username :initform common-lisp:nil)
                        (port :initarg :port :type
                         (common-lisp:or integer-optional common-lisp:null)
                         :accessor %dbcluster-port :initform common-lisp:nil)
                        (latest-restorable-time :initarg
                         :latest-restorable-time :type
                         (common-lisp:or tstamp common-lisp:null) :accessor
                         %dbcluster-latest-restorable-time :initform
                         common-lisp:nil)
                        (engine-version :initarg :engine-version :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %dbcluster-engine-version :initform common-lisp:nil)
                        (engine :initarg :engine :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %dbcluster-engine :initform common-lisp:nil)
                        (multi-az :initarg :multi-az :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         %dbcluster-multi-az :initform common-lisp:nil)
                        (reader-endpoint :initarg :reader-endpoint :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %dbcluster-reader-endpoint :initform common-lisp:nil)
                        (endpoint :initarg :endpoint :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %dbcluster-endpoint :initform common-lisp:nil)
                        (earliest-restorable-time :initarg
                         :earliest-restorable-time :type
                         (common-lisp:or tstamp common-lisp:null) :accessor
                         %dbcluster-earliest-restorable-time :initform
                         common-lisp:nil)
                        (percent-progress :initarg :percent-progress :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %dbcluster-percent-progress :initform common-lisp:nil)
                        (status :initarg :status :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %dbcluster-status :initform common-lisp:nil)
                        (dbsubnet-group :initarg :dbsubnet-group :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %dbcluster-dbsubnet-group :initform common-lisp:nil)
                        (dbcluster-parameter-group :initarg
                         :dbcluster-parameter-group :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %dbcluster-dbcluster-parameter-group :initform
                         common-lisp:nil)
                        (dbcluster-identifier :initarg :dbcluster-identifier
                         :type (common-lisp:or string common-lisp:null)
                         :accessor %dbcluster-dbcluster-identifier :initform
                         common-lisp:nil)
                        (backup-retention-period :initarg
                         :backup-retention-period :type
                         (common-lisp:or integer-optional common-lisp:null)
                         :accessor %dbcluster-backup-retention-period :initform
                         common-lisp:nil)
                        (availability-zones :initarg :availability-zones :type
                         (common-lisp:or availability-zones common-lisp:null)
                         :accessor %dbcluster-availability-zones :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'dbcluster 'make-dbcluster))
 (common-lisp:defun make-dbcluster
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key deletion-protection
                     enabled-cloudwatch-logs-exports cluster-create-time
                     clone-group-id associated-roles dbcluster-arn
                     db-cluster-resource-id kms-key-id storage-encrypted
                     hosted-zone-id vpc-security-groups dbcluster-members
                     read-replica-identifiers replication-source-identifier
                     preferred-maintenance-window preferred-backup-window
                     master-username port latest-restorable-time engine-version
                     engine multi-az reader-endpoint endpoint
                     earliest-restorable-time percent-progress status
                     dbsubnet-group dbcluster-parameter-group
                     dbcluster-identifier backup-retention-period
                     availability-zones)
   (common-lisp:apply #'common-lisp:make-instance 'dbcluster
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input dbcluster))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input dbcluster))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'availability-zones))
      (common-lisp:list
       (common-lisp:cons "AvailabilityZones"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'backup-retention-period))
      (common-lisp:list
       (common-lisp:cons "BackupRetentionPeriod"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dbcluster-identifier))
      (common-lisp:list
       (common-lisp:cons "DBClusterIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dbcluster-parameter-group))
      (common-lisp:list
       (common-lisp:cons "DBClusterParameterGroup"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dbsubnet-group))
      (common-lisp:list
       (common-lisp:cons "DBSubnetGroup"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'percent-progress))
      (common-lisp:list
       (common-lisp:cons "PercentProgress"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'earliest-restorable-time))
      (common-lisp:list
       (common-lisp:cons "EarliestRestorableTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'endpoint))
      (common-lisp:list
       (common-lisp:cons "Endpoint"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'reader-endpoint))
      (common-lisp:list
       (common-lisp:cons "ReaderEndpoint"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'multi-az))
      (common-lisp:list
       (common-lisp:cons "MultiAZ"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'engine))
      (common-lisp:list
       (common-lisp:cons "Engine"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'engine-version))
      (common-lisp:list
       (common-lisp:cons "EngineVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'latest-restorable-time))
      (common-lisp:list
       (common-lisp:cons "LatestRestorableTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'port))
      (common-lisp:list
       (common-lisp:cons "Port"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'master-username))
      (common-lisp:list
       (common-lisp:cons "MasterUsername"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'preferred-backup-window))
      (common-lisp:list
       (common-lisp:cons "PreferredBackupWindow"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'preferred-maintenance-window))
      (common-lisp:list
       (common-lisp:cons "PreferredMaintenanceWindow"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'replication-source-identifier))
      (common-lisp:list
       (common-lisp:cons "ReplicationSourceIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'read-replica-identifiers))
      (common-lisp:list
       (common-lisp:cons "ReadReplicaIdentifiers"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dbcluster-members))
      (common-lisp:list
       (common-lisp:cons "DBClusterMembers"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpc-security-groups))
      (common-lisp:list
       (common-lisp:cons "VpcSecurityGroups"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'hosted-zone-id))
      (common-lisp:list
       (common-lisp:cons "HostedZoneId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'storage-encrypted))
      (common-lisp:list
       (common-lisp:cons "StorageEncrypted"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kms-key-id))
      (common-lisp:list
       (common-lisp:cons "KmsKeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'db-cluster-resource-id))
      (common-lisp:list
       (common-lisp:cons "DbClusterResourceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dbcluster-arn))
      (common-lisp:list
       (common-lisp:cons "DBClusterArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'associated-roles))
      (common-lisp:list
       (common-lisp:cons "AssociatedRoles"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'clone-group-id))
      (common-lisp:list
       (common-lisp:cons "CloneGroupId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster-create-time))
      (common-lisp:list
       (common-lisp:cons "ClusterCreateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'enabled-cloudwatch-logs-exports))
      (common-lisp:list
       (common-lisp:cons "EnabledCloudwatchLogsExports"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'deletion-protection))
      (common-lisp:list
       (common-lisp:cons "DeletionProtection"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input dbcluster))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition dbcluster-already-exists-fault
     (docdb-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'dbcluster-already-exists-fault)))
(common-lisp:progn
 (common-lisp:deftype dbcluster-list () '(trivial-types:proper-list dbcluster))
 (common-lisp:defun |make-dbcluster-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list dbcluster))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass dbcluster-member common-lisp:nil
                       ((promotion-tier :initarg :promotion-tier :type
                         (common-lisp:or integer-optional common-lisp:null)
                         :accessor %dbcluster-member-promotion-tier :initform
                         common-lisp:nil)
                        (dbcluster-parameter-group-status :initarg
                         :dbcluster-parameter-group-status :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %dbcluster-member-dbcluster-parameter-group-status
                         :initform common-lisp:nil)
                        (is-cluster-writer :initarg :is-cluster-writer :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         %dbcluster-member-is-cluster-writer :initform
                         common-lisp:nil)
                        (dbinstance-identifier :initarg :dbinstance-identifier
                         :type (common-lisp:or string common-lisp:null)
                         :accessor %dbcluster-member-dbinstance-identifier
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'dbcluster-member 'make-dbcluster-member))
 (common-lisp:defun make-dbcluster-member
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key promotion-tier
                     dbcluster-parameter-group-status is-cluster-writer
                     dbinstance-identifier)
   (common-lisp:apply #'common-lisp:make-instance 'dbcluster-member
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input dbcluster-member))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input dbcluster-member))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dbinstance-identifier))
      (common-lisp:list
       (common-lisp:cons "DBInstanceIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'is-cluster-writer))
      (common-lisp:list
       (common-lisp:cons "IsClusterWriter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dbcluster-parameter-group-status))
      (common-lisp:list
       (common-lisp:cons "DBClusterParameterGroupStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'promotion-tier))
      (common-lisp:list
       (common-lisp:cons "PromotionTier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input dbcluster-member))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype dbcluster-member-list ()
   '(trivial-types:proper-list dbcluster-member))
 (common-lisp:defun |make-dbcluster-member-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list dbcluster-member))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass dbcluster-message common-lisp:nil
                       ((dbclusters :initarg :dbclusters :type
                         (common-lisp:or dbcluster-list common-lisp:null)
                         :accessor %dbcluster-message-dbclusters :initform
                         common-lisp:nil)
                        (marker :initarg :marker :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %dbcluster-message-marker :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'dbcluster-message 'make-dbcluster-message))
 (common-lisp:defun make-dbcluster-message
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key dbclusters marker)
   (common-lisp:apply #'common-lisp:make-instance 'dbcluster-message
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input dbcluster-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input dbcluster-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dbclusters))
      (common-lisp:list
       (common-lisp:cons "DBClusters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input dbcluster-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition dbcluster-not-found-fault
     (docdb-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'dbcluster-not-found-fault)))
(common-lisp:progn
 (common-lisp:defclass dbcluster-parameter-group common-lisp:nil
                       ((dbcluster-parameter-group-arn :initarg
                         :dbcluster-parameter-group-arn :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %dbcluster-parameter-group-dbcluster-parameter-group-arn
                         :initform common-lisp:nil)
                        (description :initarg :description :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %dbcluster-parameter-group-description :initform
                         common-lisp:nil)
                        (dbparameter-group-family :initarg
                         :dbparameter-group-family :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %dbcluster-parameter-group-dbparameter-group-family
                         :initform common-lisp:nil)
                        (dbcluster-parameter-group-name :initarg
                         :dbcluster-parameter-group-name :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %dbcluster-parameter-group-dbcluster-parameter-group-name
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'dbcluster-parameter-group
                    'make-dbcluster-parameter-group))
 (common-lisp:defun make-dbcluster-parameter-group
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key dbcluster-parameter-group-arn description
                     dbparameter-group-family dbcluster-parameter-group-name)
   (common-lisp:apply #'common-lisp:make-instance 'dbcluster-parameter-group
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          dbcluster-parameter-group))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          dbcluster-parameter-group))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dbcluster-parameter-group-name))
      (common-lisp:list
       (common-lisp:cons "DBClusterParameterGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dbparameter-group-family))
      (common-lisp:list
       (common-lisp:cons "DBParameterGroupFamily"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dbcluster-parameter-group-arn))
      (common-lisp:list
       (common-lisp:cons "DBClusterParameterGroupArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          dbcluster-parameter-group))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass dbcluster-parameter-group-details common-lisp:nil
                       ((marker :initarg :marker :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %dbcluster-parameter-group-details-marker :initform
                         common-lisp:nil)
                        (parameters :initarg :parameters :type
                         (common-lisp:or parameters-list common-lisp:null)
                         :accessor
                         %dbcluster-parameter-group-details-parameters
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'dbcluster-parameter-group-details
                    'make-dbcluster-parameter-group-details))
 (common-lisp:defun make-dbcluster-parameter-group-details
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key marker parameters)
   (common-lisp:apply #'common-lisp:make-instance
                      'dbcluster-parameter-group-details
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          dbcluster-parameter-group-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          dbcluster-parameter-group-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'parameters))
      (common-lisp:list
       (common-lisp:cons "Parameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          dbcluster-parameter-group-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype dbcluster-parameter-group-list ()
   '(trivial-types:proper-list dbcluster-parameter-group))
 (common-lisp:defun |make-dbcluster-parameter-group-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            dbcluster-parameter-group))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass dbcluster-parameter-group-name-message common-lisp:nil
                       ((dbcluster-parameter-group-name :initarg
                         :dbcluster-parameter-group-name :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %dbcluster-parameter-group-name-message-dbcluster-parameter-group-name
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'dbcluster-parameter-group-name-message
                    'make-dbcluster-parameter-group-name-message))
 (common-lisp:defun make-dbcluster-parameter-group-name-message
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key dbcluster-parameter-group-name)
   (common-lisp:apply #'common-lisp:make-instance
                      'dbcluster-parameter-group-name-message
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          dbcluster-parameter-group-name-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          dbcluster-parameter-group-name-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dbcluster-parameter-group-name))
      (common-lisp:list
       (common-lisp:cons "DBClusterParameterGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          dbcluster-parameter-group-name-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition dbcluster-parameter-group-not-found-fault
     (docdb-error)
     common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'dbcluster-parameter-group-not-found-fault)))
(common-lisp:progn
 (common-lisp:defclass dbcluster-parameter-groups-message common-lisp:nil
                       ((dbcluster-parameter-groups :initarg
                         :dbcluster-parameter-groups :type
                         (common-lisp:or dbcluster-parameter-group-list
                                         common-lisp:null)
                         :accessor
                         %dbcluster-parameter-groups-message-dbcluster-parameter-groups
                         :initform common-lisp:nil)
                        (marker :initarg :marker :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %dbcluster-parameter-groups-message-marker :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'dbcluster-parameter-groups-message
                    'make-dbcluster-parameter-groups-message))
 (common-lisp:defun make-dbcluster-parameter-groups-message
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key dbcluster-parameter-groups marker)
   (common-lisp:apply #'common-lisp:make-instance
                      'dbcluster-parameter-groups-message
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          dbcluster-parameter-groups-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          dbcluster-parameter-groups-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dbcluster-parameter-groups))
      (common-lisp:list
       (common-lisp:cons "DBClusterParameterGroups"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          dbcluster-parameter-groups-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition dbcluster-quota-exceeded-fault
     (docdb-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'dbcluster-quota-exceeded-fault)))
(common-lisp:progn
 (common-lisp:defclass dbcluster-role common-lisp:nil
                       ((status :initarg :status :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %dbcluster-role-status :initform common-lisp:nil)
                        (role-arn :initarg :role-arn :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %dbcluster-role-role-arn :initform common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'dbcluster-role 'make-dbcluster-role))
 (common-lisp:defun make-dbcluster-role
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key status role-arn)
   (common-lisp:apply #'common-lisp:make-instance 'dbcluster-role
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input dbcluster-role))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input dbcluster-role))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "RoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input dbcluster-role))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype dbcluster-roles ()
   '(trivial-types:proper-list dbcluster-role))
 (common-lisp:defun |make-dbcluster-roles|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list dbcluster-role))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass dbcluster-snapshot common-lisp:nil
                       ((source-dbcluster-snapshot-arn :initarg
                         :source-dbcluster-snapshot-arn :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %dbcluster-snapshot-source-dbcluster-snapshot-arn
                         :initform common-lisp:nil)
                        (dbcluster-snapshot-arn :initarg
                         :dbcluster-snapshot-arn :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %dbcluster-snapshot-dbcluster-snapshot-arn :initform
                         common-lisp:nil)
                        (kms-key-id :initarg :kms-key-id :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %dbcluster-snapshot-kms-key-id :initform
                         common-lisp:nil)
                        (storage-encrypted :initarg :storage-encrypted :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         %dbcluster-snapshot-storage-encrypted :initform
                         common-lisp:nil)
                        (percent-progress :initarg :percent-progress :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         %dbcluster-snapshot-percent-progress :initform
                         common-lisp:nil)
                        (snapshot-type :initarg :snapshot-type :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %dbcluster-snapshot-snapshot-type :initform
                         common-lisp:nil)
                        (engine-version :initarg :engine-version :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %dbcluster-snapshot-engine-version :initform
                         common-lisp:nil)
                        (master-username :initarg :master-username :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %dbcluster-snapshot-master-username :initform
                         common-lisp:nil)
                        (cluster-create-time :initarg :cluster-create-time
                         :type (common-lisp:or tstamp common-lisp:null)
                         :accessor %dbcluster-snapshot-cluster-create-time
                         :initform common-lisp:nil)
                        (vpc-id :initarg :vpc-id :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %dbcluster-snapshot-vpc-id :initform common-lisp:nil)
                        (port :initarg :port :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         %dbcluster-snapshot-port :initform common-lisp:nil)
                        (status :initarg :status :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %dbcluster-snapshot-status :initform common-lisp:nil)
                        (engine :initarg :engine :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %dbcluster-snapshot-engine :initform common-lisp:nil)
                        (snapshot-create-time :initarg :snapshot-create-time
                         :type (common-lisp:or tstamp common-lisp:null)
                         :accessor %dbcluster-snapshot-snapshot-create-time
                         :initform common-lisp:nil)
                        (dbcluster-identifier :initarg :dbcluster-identifier
                         :type (common-lisp:or string common-lisp:null)
                         :accessor %dbcluster-snapshot-dbcluster-identifier
                         :initform common-lisp:nil)
                        (dbcluster-snapshot-identifier :initarg
                         :dbcluster-snapshot-identifier :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %dbcluster-snapshot-dbcluster-snapshot-identifier
                         :initform common-lisp:nil)
                        (availability-zones :initarg :availability-zones :type
                         (common-lisp:or availability-zones common-lisp:null)
                         :accessor %dbcluster-snapshot-availability-zones
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'dbcluster-snapshot 'make-dbcluster-snapshot))
 (common-lisp:defun make-dbcluster-snapshot
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key source-dbcluster-snapshot-arn
                     dbcluster-snapshot-arn kms-key-id storage-encrypted
                     percent-progress snapshot-type engine-version
                     master-username cluster-create-time vpc-id port status
                     engine snapshot-create-time dbcluster-identifier
                     dbcluster-snapshot-identifier availability-zones)
   (common-lisp:apply #'common-lisp:make-instance 'dbcluster-snapshot
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input dbcluster-snapshot))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input dbcluster-snapshot))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'availability-zones))
      (common-lisp:list
       (common-lisp:cons "AvailabilityZones"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dbcluster-snapshot-identifier))
      (common-lisp:list
       (common-lisp:cons "DBClusterSnapshotIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dbcluster-identifier))
      (common-lisp:list
       (common-lisp:cons "DBClusterIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'snapshot-create-time))
      (common-lisp:list
       (common-lisp:cons "SnapshotCreateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'engine))
      (common-lisp:list
       (common-lisp:cons "Engine"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'port))
      (common-lisp:list
       (common-lisp:cons "Port"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpc-id))
      (common-lisp:list
       (common-lisp:cons "VpcId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster-create-time))
      (common-lisp:list
       (common-lisp:cons "ClusterCreateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'master-username))
      (common-lisp:list
       (common-lisp:cons "MasterUsername"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'engine-version))
      (common-lisp:list
       (common-lisp:cons "EngineVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'snapshot-type))
      (common-lisp:list
       (common-lisp:cons "SnapshotType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'percent-progress))
      (common-lisp:list
       (common-lisp:cons "PercentProgress"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'storage-encrypted))
      (common-lisp:list
       (common-lisp:cons "StorageEncrypted"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kms-key-id))
      (common-lisp:list
       (common-lisp:cons "KmsKeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dbcluster-snapshot-arn))
      (common-lisp:list
       (common-lisp:cons "DBClusterSnapshotArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'source-dbcluster-snapshot-arn))
      (common-lisp:list
       (common-lisp:cons "SourceDBClusterSnapshotArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input dbcluster-snapshot))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition dbcluster-snapshot-already-exists-fault
     (docdb-error)
     common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'dbcluster-snapshot-already-exists-fault)))
(common-lisp:progn
 (common-lisp:defclass dbcluster-snapshot-attribute common-lisp:nil
                       ((attribute-values :initarg :attribute-values :type
                         (common-lisp:or attribute-value-list common-lisp:null)
                         :accessor
                         %dbcluster-snapshot-attribute-attribute-values
                         :initform common-lisp:nil)
                        (attribute-name :initarg :attribute-name :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %dbcluster-snapshot-attribute-attribute-name :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'dbcluster-snapshot-attribute
                    'make-dbcluster-snapshot-attribute))
 (common-lisp:defun make-dbcluster-snapshot-attribute
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key attribute-values attribute-name)
   (common-lisp:apply #'common-lisp:make-instance 'dbcluster-snapshot-attribute
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          dbcluster-snapshot-attribute))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          dbcluster-snapshot-attribute))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'attribute-name))
      (common-lisp:list
       (common-lisp:cons "AttributeName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'attribute-values))
      (common-lisp:list
       (common-lisp:cons "AttributeValues"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          dbcluster-snapshot-attribute))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype dbcluster-snapshot-attribute-list ()
   '(trivial-types:proper-list dbcluster-snapshot-attribute))
 (common-lisp:defun |make-dbcluster-snapshot-attribute-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            dbcluster-snapshot-attribute))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass dbcluster-snapshot-attributes-result common-lisp:nil
                       ((dbcluster-snapshot-attributes :initarg
                         :dbcluster-snapshot-attributes :type
                         (common-lisp:or dbcluster-snapshot-attribute-list
                                         common-lisp:null)
                         :accessor
                         %dbcluster-snapshot-attributes-result-dbcluster-snapshot-attributes
                         :initform common-lisp:nil)
                        (dbcluster-snapshot-identifier :initarg
                         :dbcluster-snapshot-identifier :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %dbcluster-snapshot-attributes-result-dbcluster-snapshot-identifier
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'dbcluster-snapshot-attributes-result
                    'make-dbcluster-snapshot-attributes-result))
 (common-lisp:defun make-dbcluster-snapshot-attributes-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key dbcluster-snapshot-attributes
                     dbcluster-snapshot-identifier)
   (common-lisp:apply #'common-lisp:make-instance
                      'dbcluster-snapshot-attributes-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          dbcluster-snapshot-attributes-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          dbcluster-snapshot-attributes-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dbcluster-snapshot-identifier))
      (common-lisp:list
       (common-lisp:cons "DBClusterSnapshotIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dbcluster-snapshot-attributes))
      (common-lisp:list
       (common-lisp:cons "DBClusterSnapshotAttributes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          dbcluster-snapshot-attributes-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype dbcluster-snapshot-list ()
   '(trivial-types:proper-list dbcluster-snapshot))
 (common-lisp:defun |make-dbcluster-snapshot-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list dbcluster-snapshot))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass dbcluster-snapshot-message common-lisp:nil
                       ((dbcluster-snapshots :initarg :dbcluster-snapshots
                         :type
                         (common-lisp:or dbcluster-snapshot-list
                                         common-lisp:null)
                         :accessor
                         %dbcluster-snapshot-message-dbcluster-snapshots
                         :initform common-lisp:nil)
                        (marker :initarg :marker :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %dbcluster-snapshot-message-marker :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'dbcluster-snapshot-message
                    'make-dbcluster-snapshot-message))
 (common-lisp:defun make-dbcluster-snapshot-message
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key dbcluster-snapshots marker)
   (common-lisp:apply #'common-lisp:make-instance 'dbcluster-snapshot-message
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          dbcluster-snapshot-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          dbcluster-snapshot-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dbcluster-snapshots))
      (common-lisp:list
       (common-lisp:cons "DBClusterSnapshots"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          dbcluster-snapshot-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition dbcluster-snapshot-not-found-fault
     (docdb-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'dbcluster-snapshot-not-found-fault)))
(common-lisp:progn
 (common-lisp:defclass dbengine-version common-lisp:nil
                       ((supports-log-exports-to-cloudwatch-logs :initarg
                         :supports-log-exports-to-cloudwatch-logs :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         %dbengine-version-supports-log-exports-to-cloudwatch-logs
                         :initform common-lisp:nil)
                        (exportable-log-types :initarg :exportable-log-types
                         :type (common-lisp:or log-type-list common-lisp:null)
                         :accessor %dbengine-version-exportable-log-types
                         :initform common-lisp:nil)
                        (valid-upgrade-target :initarg :valid-upgrade-target
                         :type
                         (common-lisp:or valid-upgrade-target-list
                                         common-lisp:null)
                         :accessor %dbengine-version-valid-upgrade-target
                         :initform common-lisp:nil)
                        (dbengine-version-description :initarg
                         :dbengine-version-description :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %dbengine-version-dbengine-version-description
                         :initform common-lisp:nil)
                        (dbengine-description :initarg :dbengine-description
                         :type (common-lisp:or string common-lisp:null)
                         :accessor %dbengine-version-dbengine-description
                         :initform common-lisp:nil)
                        (dbparameter-group-family :initarg
                         :dbparameter-group-family :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %dbengine-version-dbparameter-group-family :initform
                         common-lisp:nil)
                        (engine-version :initarg :engine-version :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %dbengine-version-engine-version :initform
                         common-lisp:nil)
                        (engine :initarg :engine :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %dbengine-version-engine :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'dbengine-version 'make-dbengine-version))
 (common-lisp:defun make-dbengine-version
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key supports-log-exports-to-cloudwatch-logs
                     exportable-log-types valid-upgrade-target
                     dbengine-version-description dbengine-description
                     dbparameter-group-family engine-version engine)
   (common-lisp:apply #'common-lisp:make-instance 'dbengine-version
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input dbengine-version))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input dbengine-version))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'engine))
      (common-lisp:list
       (common-lisp:cons "Engine"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'engine-version))
      (common-lisp:list
       (common-lisp:cons "EngineVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dbparameter-group-family))
      (common-lisp:list
       (common-lisp:cons "DBParameterGroupFamily"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dbengine-description))
      (common-lisp:list
       (common-lisp:cons "DBEngineDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dbengine-version-description))
      (common-lisp:list
       (common-lisp:cons "DBEngineVersionDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'valid-upgrade-target))
      (common-lisp:list
       (common-lisp:cons "ValidUpgradeTarget"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'exportable-log-types))
      (common-lisp:list
       (common-lisp:cons "ExportableLogTypes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'supports-log-exports-to-cloudwatch-logs))
      (common-lisp:list
       (common-lisp:cons "SupportsLogExportsToCloudwatchLogs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input dbengine-version))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype dbengine-version-list ()
   '(trivial-types:proper-list dbengine-version))
 (common-lisp:defun |make-dbengine-version-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list dbengine-version))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass dbengine-version-message common-lisp:nil
                       ((dbengine-versions :initarg :dbengine-versions :type
                         (common-lisp:or dbengine-version-list
                                         common-lisp:null)
                         :accessor %dbengine-version-message-dbengine-versions
                         :initform common-lisp:nil)
                        (marker :initarg :marker :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %dbengine-version-message-marker :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'dbengine-version-message 'make-dbengine-version-message))
 (common-lisp:defun make-dbengine-version-message
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key dbengine-versions marker)
   (common-lisp:apply #'common-lisp:make-instance 'dbengine-version-message
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          dbengine-version-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          dbengine-version-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dbengine-versions))
      (common-lisp:list
       (common-lisp:cons "DBEngineVersions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          dbengine-version-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass dbinstance common-lisp:nil
                       ((enabled-cloudwatch-logs-exports :initarg
                         :enabled-cloudwatch-logs-exports :type
                         (common-lisp:or log-type-list common-lisp:null)
                         :accessor %dbinstance-enabled-cloudwatch-logs-exports
                         :initform common-lisp:nil)
                        (dbinstance-arn :initarg :dbinstance-arn :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %dbinstance-dbinstance-arn :initform common-lisp:nil)
                        (promotion-tier :initarg :promotion-tier :type
                         (common-lisp:or integer-optional common-lisp:null)
                         :accessor %dbinstance-promotion-tier :initform
                         common-lisp:nil)
                        (copy-tags-to-snapshot :initarg :copy-tags-to-snapshot
                         :type
                         (common-lisp:or boolean-optional common-lisp:null)
                         :accessor %dbinstance-copy-tags-to-snapshot :initform
                         common-lisp:nil)
                        (cacertificate-identifier :initarg
                         :cacertificate-identifier :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %dbinstance-cacertificate-identifier :initform
                         common-lisp:nil)
                        (dbi-resource-id :initarg :dbi-resource-id :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %dbinstance-dbi-resource-id :initform common-lisp:nil)
                        (kms-key-id :initarg :kms-key-id :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %dbinstance-kms-key-id :initform common-lisp:nil)
                        (storage-encrypted :initarg :storage-encrypted :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         %dbinstance-storage-encrypted :initform
                         common-lisp:nil)
                        (dbcluster-identifier :initarg :dbcluster-identifier
                         :type (common-lisp:or string common-lisp:null)
                         :accessor %dbinstance-dbcluster-identifier :initform
                         common-lisp:nil)
                        (status-infos :initarg :status-infos :type
                         (common-lisp:or dbinstance-status-info-list
                                         common-lisp:null)
                         :accessor %dbinstance-status-infos :initform
                         common-lisp:nil)
                        (publicly-accessible :initarg :publicly-accessible
                         :type (common-lisp:or boolean common-lisp:null)
                         :accessor %dbinstance-publicly-accessible :initform
                         common-lisp:nil)
                        (auto-minor-version-upgrade :initarg
                         :auto-minor-version-upgrade :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         %dbinstance-auto-minor-version-upgrade :initform
                         common-lisp:nil)
                        (engine-version :initarg :engine-version :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %dbinstance-engine-version :initform common-lisp:nil)
                        (latest-restorable-time :initarg
                         :latest-restorable-time :type
                         (common-lisp:or tstamp common-lisp:null) :accessor
                         %dbinstance-latest-restorable-time :initform
                         common-lisp:nil)
                        (pending-modified-values :initarg
                         :pending-modified-values :type
                         (common-lisp:or pending-modified-values
                                         common-lisp:null)
                         :accessor %dbinstance-pending-modified-values
                         :initform common-lisp:nil)
                        (preferred-maintenance-window :initarg
                         :preferred-maintenance-window :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %dbinstance-preferred-maintenance-window :initform
                         common-lisp:nil)
                        (dbsubnet-group :initarg :dbsubnet-group :type
                         (common-lisp:or dbsubnet-group common-lisp:null)
                         :accessor %dbinstance-dbsubnet-group :initform
                         common-lisp:nil)
                        (availability-zone :initarg :availability-zone :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %dbinstance-availability-zone :initform
                         common-lisp:nil)
                        (vpc-security-groups :initarg :vpc-security-groups
                         :type
                         (common-lisp:or vpc-security-group-membership-list
                                         common-lisp:null)
                         :accessor %dbinstance-vpc-security-groups :initform
                         common-lisp:nil)
                        (backup-retention-period :initarg
                         :backup-retention-period :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         %dbinstance-backup-retention-period :initform
                         common-lisp:nil)
                        (preferred-backup-window :initarg
                         :preferred-backup-window :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %dbinstance-preferred-backup-window :initform
                         common-lisp:nil)
                        (instance-create-time :initarg :instance-create-time
                         :type (common-lisp:or tstamp common-lisp:null)
                         :accessor %dbinstance-instance-create-time :initform
                         common-lisp:nil)
                        (endpoint :initarg :endpoint :type
                         (common-lisp:or endpoint common-lisp:null) :accessor
                         %dbinstance-endpoint :initform common-lisp:nil)
                        (dbinstance-status :initarg :dbinstance-status :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %dbinstance-dbinstance-status :initform
                         common-lisp:nil)
                        (engine :initarg :engine :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %dbinstance-engine :initform common-lisp:nil)
                        (dbinstance-class :initarg :dbinstance-class :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %dbinstance-dbinstance-class :initform
                         common-lisp:nil)
                        (dbinstance-identifier :initarg :dbinstance-identifier
                         :type (common-lisp:or string common-lisp:null)
                         :accessor %dbinstance-dbinstance-identifier :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'dbinstance 'make-dbinstance))
 (common-lisp:defun make-dbinstance
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key enabled-cloudwatch-logs-exports
                     dbinstance-arn promotion-tier copy-tags-to-snapshot
                     cacertificate-identifier dbi-resource-id kms-key-id
                     storage-encrypted dbcluster-identifier status-infos
                     publicly-accessible auto-minor-version-upgrade
                     engine-version latest-restorable-time
                     pending-modified-values preferred-maintenance-window
                     dbsubnet-group availability-zone vpc-security-groups
                     backup-retention-period preferred-backup-window
                     instance-create-time endpoint dbinstance-status engine
                     dbinstance-class dbinstance-identifier)
   (common-lisp:apply #'common-lisp:make-instance 'dbinstance
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input dbinstance))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input dbinstance))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dbinstance-identifier))
      (common-lisp:list
       (common-lisp:cons "DBInstanceIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dbinstance-class))
      (common-lisp:list
       (common-lisp:cons "DBInstanceClass"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'engine))
      (common-lisp:list
       (common-lisp:cons "Engine"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dbinstance-status))
      (common-lisp:list
       (common-lisp:cons "DBInstanceStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'endpoint))
      (common-lisp:list
       (common-lisp:cons "Endpoint"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'instance-create-time))
      (common-lisp:list
       (common-lisp:cons "InstanceCreateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'preferred-backup-window))
      (common-lisp:list
       (common-lisp:cons "PreferredBackupWindow"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'backup-retention-period))
      (common-lisp:list
       (common-lisp:cons "BackupRetentionPeriod"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpc-security-groups))
      (common-lisp:list
       (common-lisp:cons "VpcSecurityGroups"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'availability-zone))
      (common-lisp:list
       (common-lisp:cons "AvailabilityZone"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dbsubnet-group))
      (common-lisp:list
       (common-lisp:cons "DBSubnetGroup"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'preferred-maintenance-window))
      (common-lisp:list
       (common-lisp:cons "PreferredMaintenanceWindow"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'pending-modified-values))
      (common-lisp:list
       (common-lisp:cons "PendingModifiedValues"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'latest-restorable-time))
      (common-lisp:list
       (common-lisp:cons "LatestRestorableTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'engine-version))
      (common-lisp:list
       (common-lisp:cons "EngineVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'auto-minor-version-upgrade))
      (common-lisp:list
       (common-lisp:cons "AutoMinorVersionUpgrade"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'publicly-accessible))
      (common-lisp:list
       (common-lisp:cons "PubliclyAccessible"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status-infos))
      (common-lisp:list
       (common-lisp:cons "StatusInfos"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dbcluster-identifier))
      (common-lisp:list
       (common-lisp:cons "DBClusterIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'storage-encrypted))
      (common-lisp:list
       (common-lisp:cons "StorageEncrypted"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kms-key-id))
      (common-lisp:list
       (common-lisp:cons "KmsKeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dbi-resource-id))
      (common-lisp:list
       (common-lisp:cons "DbiResourceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cacertificate-identifier))
      (common-lisp:list
       (common-lisp:cons "CACertificateIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'copy-tags-to-snapshot))
      (common-lisp:list
       (common-lisp:cons "CopyTagsToSnapshot"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'promotion-tier))
      (common-lisp:list
       (common-lisp:cons "PromotionTier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dbinstance-arn))
      (common-lisp:list
       (common-lisp:cons "DBInstanceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'enabled-cloudwatch-logs-exports))
      (common-lisp:list
       (common-lisp:cons "EnabledCloudwatchLogsExports"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input dbinstance))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition dbinstance-already-exists-fault
     (docdb-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'dbinstance-already-exists-fault)))
(common-lisp:progn
 (common-lisp:deftype dbinstance-list ()
   '(trivial-types:proper-list dbinstance))
 (common-lisp:defun |make-dbinstance-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list dbinstance))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass dbinstance-message common-lisp:nil
                       ((dbinstances :initarg :dbinstances :type
                         (common-lisp:or dbinstance-list common-lisp:null)
                         :accessor %dbinstance-message-dbinstances :initform
                         common-lisp:nil)
                        (marker :initarg :marker :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %dbinstance-message-marker :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'dbinstance-message 'make-dbinstance-message))
 (common-lisp:defun make-dbinstance-message
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key dbinstances marker)
   (common-lisp:apply #'common-lisp:make-instance 'dbinstance-message
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input dbinstance-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input dbinstance-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dbinstances))
      (common-lisp:list
       (common-lisp:cons "DBInstances"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input dbinstance-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition dbinstance-not-found-fault
     (docdb-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'dbinstance-not-found-fault)))
(common-lisp:progn
 (common-lisp:defclass dbinstance-status-info common-lisp:nil
                       ((message :initarg :message :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %dbinstance-status-info-message :initform
                         common-lisp:nil)
                        (status :initarg :status :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %dbinstance-status-info-status :initform
                         common-lisp:nil)
                        (normal :initarg :normal :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         %dbinstance-status-info-normal :initform
                         common-lisp:nil)
                        (status-type :initarg :status-type :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %dbinstance-status-info-status-type :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'dbinstance-status-info 'make-dbinstance-status-info))
 (common-lisp:defun make-dbinstance-status-info
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key message status normal status-type)
   (common-lisp:apply #'common-lisp:make-instance 'dbinstance-status-info
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          dbinstance-status-info))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          dbinstance-status-info))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status-type))
      (common-lisp:list
       (common-lisp:cons "StatusType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'normal))
      (common-lisp:list
       (common-lisp:cons "Normal"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message))
      (common-lisp:list
       (common-lisp:cons "Message"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          dbinstance-status-info))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype dbinstance-status-info-list ()
   '(trivial-types:proper-list dbinstance-status-info))
 (common-lisp:defun |make-dbinstance-status-info-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list dbinstance-status-info))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition dbparameter-group-already-exists-fault
     (docdb-error)
     common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'dbparameter-group-already-exists-fault)))
(common-lisp:progn
 (common-lisp:define-condition dbparameter-group-not-found-fault
     (docdb-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'dbparameter-group-not-found-fault)))
(common-lisp:progn
 (common-lisp:define-condition dbparameter-group-quota-exceeded-fault
     (docdb-error)
     common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'dbparameter-group-quota-exceeded-fault)))
(common-lisp:progn
 (common-lisp:define-condition dbsecurity-group-not-found-fault
     (docdb-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'dbsecurity-group-not-found-fault)))
(common-lisp:progn
 (common-lisp:define-condition dbsnapshot-already-exists-fault
     (docdb-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'dbsnapshot-already-exists-fault)))
(common-lisp:progn
 (common-lisp:define-condition dbsnapshot-not-found-fault
     (docdb-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'dbsnapshot-not-found-fault)))
(common-lisp:progn
 (common-lisp:defclass dbsubnet-group common-lisp:nil
                       ((dbsubnet-group-arn :initarg :dbsubnet-group-arn :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %dbsubnet-group-dbsubnet-group-arn :initform
                         common-lisp:nil)
                        (subnets :initarg :subnets :type
                         (common-lisp:or subnet-list common-lisp:null)
                         :accessor %dbsubnet-group-subnets :initform
                         common-lisp:nil)
                        (subnet-group-status :initarg :subnet-group-status
                         :type (common-lisp:or string common-lisp:null)
                         :accessor %dbsubnet-group-subnet-group-status
                         :initform common-lisp:nil)
                        (vpc-id :initarg :vpc-id :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %dbsubnet-group-vpc-id :initform common-lisp:nil)
                        (dbsubnet-group-description :initarg
                         :dbsubnet-group-description :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %dbsubnet-group-dbsubnet-group-description :initform
                         common-lisp:nil)
                        (dbsubnet-group-name :initarg :dbsubnet-group-name
                         :type (common-lisp:or string common-lisp:null)
                         :accessor %dbsubnet-group-dbsubnet-group-name
                         :initform common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'dbsubnet-group 'make-dbsubnet-group))
 (common-lisp:defun make-dbsubnet-group
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key dbsubnet-group-arn subnets
                     subnet-group-status vpc-id dbsubnet-group-description
                     dbsubnet-group-name)
   (common-lisp:apply #'common-lisp:make-instance 'dbsubnet-group
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input dbsubnet-group))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input dbsubnet-group))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dbsubnet-group-name))
      (common-lisp:list
       (common-lisp:cons "DBSubnetGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dbsubnet-group-description))
      (common-lisp:list
       (common-lisp:cons "DBSubnetGroupDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpc-id))
      (common-lisp:list
       (common-lisp:cons "VpcId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subnet-group-status))
      (common-lisp:list
       (common-lisp:cons "SubnetGroupStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subnets))
      (common-lisp:list
       (common-lisp:cons "Subnets"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dbsubnet-group-arn))
      (common-lisp:list
       (common-lisp:cons "DBSubnetGroupArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input dbsubnet-group))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition dbsubnet-group-already-exists-fault
     (docdb-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'dbsubnet-group-already-exists-fault)))
(common-lisp:progn
 (common-lisp:define-condition dbsubnet-group-does-not-cover-enough-azs
     (docdb-error)
     common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'dbsubnet-group-does-not-cover-enough-azs)))
(common-lisp:progn
 (common-lisp:defclass dbsubnet-group-message common-lisp:nil
                       ((dbsubnet-groups :initarg :dbsubnet-groups :type
                         (common-lisp:or dbsubnet-groups common-lisp:null)
                         :accessor %dbsubnet-group-message-dbsubnet-groups
                         :initform common-lisp:nil)
                        (marker :initarg :marker :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %dbsubnet-group-message-marker :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'dbsubnet-group-message 'make-dbsubnet-group-message))
 (common-lisp:defun make-dbsubnet-group-message
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key dbsubnet-groups marker)
   (common-lisp:apply #'common-lisp:make-instance 'dbsubnet-group-message
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          dbsubnet-group-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          dbsubnet-group-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dbsubnet-groups))
      (common-lisp:list
       (common-lisp:cons "DBSubnetGroups"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          dbsubnet-group-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition dbsubnet-group-not-found-fault
     (docdb-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'dbsubnet-group-not-found-fault)))
(common-lisp:progn
 (common-lisp:define-condition dbsubnet-group-quota-exceeded-fault
     (docdb-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'dbsubnet-group-quota-exceeded-fault)))
(common-lisp:progn
 (common-lisp:deftype dbsubnet-groups ()
   '(trivial-types:proper-list dbsubnet-group))
 (common-lisp:defun |make-dbsubnet-groups|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list dbsubnet-group))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition dbsubnet-quota-exceeded-fault
     (docdb-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'dbsubnet-quota-exceeded-fault)))
(common-lisp:progn
 (common-lisp:define-condition dbupgrade-dependency-failure-fault
     (docdb-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'dbupgrade-dependency-failure-fault)))
(common-lisp:progn
 (common-lisp:defclass delete-dbcluster-message common-lisp:nil
                       ((final-dbsnapshot-identifier :initarg
                         :final-dbsnapshot-identifier :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %delete-dbcluster-message-final-dbsnapshot-identifier
                         :initform common-lisp:nil)
                        (skip-final-snapshot :initarg :skip-final-snapshot
                         :type (common-lisp:or boolean common-lisp:null)
                         :accessor
                         %delete-dbcluster-message-skip-final-snapshot
                         :initform common-lisp:nil)
                        (dbcluster-identifier :initarg :dbcluster-identifier
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         %delete-dbcluster-message-dbcluster-identifier
                         :initform
                         (common-lisp:error
                          ":dbcluster-identifier is required"))))
 (common-lisp:export
  (common-lisp:list 'delete-dbcluster-message 'make-delete-dbcluster-message))
 (common-lisp:defun make-delete-dbcluster-message
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key final-dbsnapshot-identifier
                     skip-final-snapshot dbcluster-identifier)
   (common-lisp:apply #'common-lisp:make-instance 'delete-dbcluster-message
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-dbcluster-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-dbcluster-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dbcluster-identifier))
      (common-lisp:list
       (common-lisp:cons "DBClusterIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'skip-final-snapshot))
      (common-lisp:list
       (common-lisp:cons "SkipFinalSnapshot"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'final-dbsnapshot-identifier))
      (common-lisp:list
       (common-lisp:cons "FinalDBSnapshotIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-dbcluster-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-dbcluster-parameter-group-message common-lisp:nil
                       ((dbcluster-parameter-group-name :initarg
                         :dbcluster-parameter-group-name :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %delete-dbcluster-parameter-group-message-dbcluster-parameter-group-name
                         :initform
                         (common-lisp:error
                          ":dbcluster-parameter-group-name is required"))))
 (common-lisp:export
  (common-lisp:list 'delete-dbcluster-parameter-group-message
                    'make-delete-dbcluster-parameter-group-message))
 (common-lisp:defun make-delete-dbcluster-parameter-group-message
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key dbcluster-parameter-group-name)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-dbcluster-parameter-group-message
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-dbcluster-parameter-group-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-dbcluster-parameter-group-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dbcluster-parameter-group-name))
      (common-lisp:list
       (common-lisp:cons "DBClusterParameterGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-dbcluster-parameter-group-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-dbcluster-result common-lisp:nil
                       ((dbcluster :initarg :dbcluster :type
                         (common-lisp:or dbcluster common-lisp:null) :accessor
                         %delete-dbcluster-result-dbcluster :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'delete-dbcluster-result 'make-delete-dbcluster-result))
 (common-lisp:defun make-delete-dbcluster-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key dbcluster)
   (common-lisp:apply #'common-lisp:make-instance 'delete-dbcluster-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-dbcluster-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-dbcluster-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dbcluster))
      (common-lisp:list
       (common-lisp:cons "DBCluster"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-dbcluster-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-dbcluster-snapshot-message common-lisp:nil
                       ((dbcluster-snapshot-identifier :initarg
                         :dbcluster-snapshot-identifier :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %delete-dbcluster-snapshot-message-dbcluster-snapshot-identifier
                         :initform
                         (common-lisp:error
                          ":dbcluster-snapshot-identifier is required"))))
 (common-lisp:export
  (common-lisp:list 'delete-dbcluster-snapshot-message
                    'make-delete-dbcluster-snapshot-message))
 (common-lisp:defun make-delete-dbcluster-snapshot-message
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key dbcluster-snapshot-identifier)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-dbcluster-snapshot-message
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-dbcluster-snapshot-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-dbcluster-snapshot-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dbcluster-snapshot-identifier))
      (common-lisp:list
       (common-lisp:cons "DBClusterSnapshotIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-dbcluster-snapshot-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-dbcluster-snapshot-result common-lisp:nil
                       ((dbcluster-snapshot :initarg :dbcluster-snapshot :type
                         (common-lisp:or dbcluster-snapshot common-lisp:null)
                         :accessor
                         %delete-dbcluster-snapshot-result-dbcluster-snapshot
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'delete-dbcluster-snapshot-result
                    'make-delete-dbcluster-snapshot-result))
 (common-lisp:defun make-delete-dbcluster-snapshot-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key dbcluster-snapshot)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-dbcluster-snapshot-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-dbcluster-snapshot-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-dbcluster-snapshot-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dbcluster-snapshot))
      (common-lisp:list
       (common-lisp:cons "DBClusterSnapshot"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-dbcluster-snapshot-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-dbinstance-message common-lisp:nil
                       ((dbinstance-identifier :initarg :dbinstance-identifier
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         %delete-dbinstance-message-dbinstance-identifier
                         :initform
                         (common-lisp:error
                          ":dbinstance-identifier is required"))))
 (common-lisp:export
  (common-lisp:list 'delete-dbinstance-message
                    'make-delete-dbinstance-message))
 (common-lisp:defun make-delete-dbinstance-message
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key dbinstance-identifier)
   (common-lisp:apply #'common-lisp:make-instance 'delete-dbinstance-message
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-dbinstance-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-dbinstance-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dbinstance-identifier))
      (common-lisp:list
       (common-lisp:cons "DBInstanceIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-dbinstance-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-dbinstance-result common-lisp:nil
                       ((dbinstance :initarg :dbinstance :type
                         (common-lisp:or dbinstance common-lisp:null) :accessor
                         %delete-dbinstance-result-dbinstance :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'delete-dbinstance-result 'make-delete-dbinstance-result))
 (common-lisp:defun make-delete-dbinstance-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key dbinstance)
   (common-lisp:apply #'common-lisp:make-instance 'delete-dbinstance-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-dbinstance-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-dbinstance-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dbinstance))
      (common-lisp:list
       (common-lisp:cons "DBInstance"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-dbinstance-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-dbsubnet-group-message common-lisp:nil
                       ((dbsubnet-group-name :initarg :dbsubnet-group-name
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         %delete-dbsubnet-group-message-dbsubnet-group-name
                         :initform
                         (common-lisp:error
                          ":dbsubnet-group-name is required"))))
 (common-lisp:export
  (common-lisp:list 'delete-dbsubnet-group-message
                    'make-delete-dbsubnet-group-message))
 (common-lisp:defun make-delete-dbsubnet-group-message
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key dbsubnet-group-name)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-dbsubnet-group-message
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-dbsubnet-group-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-dbsubnet-group-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dbsubnet-group-name))
      (common-lisp:list
       (common-lisp:cons "DBSubnetGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-dbsubnet-group-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-event-subscription-message common-lisp:nil
                       ((subscription-name :initarg :subscription-name :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %delete-event-subscription-message-subscription-name
                         :initform
                         (common-lisp:error
                          ":subscription-name is required"))))
 (common-lisp:export
  (common-lisp:list 'delete-event-subscription-message
                    'make-delete-event-subscription-message))
 (common-lisp:defun make-delete-event-subscription-message
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key subscription-name)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-event-subscription-message
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-event-subscription-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-event-subscription-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subscription-name))
      (common-lisp:list
       (common-lisp:cons "SubscriptionName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-event-subscription-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-event-subscription-result common-lisp:nil
                       ((event-subscription :initarg :event-subscription :type
                         (common-lisp:or event-subscription common-lisp:null)
                         :accessor
                         %delete-event-subscription-result-event-subscription
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'delete-event-subscription-result
                    'make-delete-event-subscription-result))
 (common-lisp:defun make-delete-event-subscription-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key event-subscription)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-event-subscription-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-event-subscription-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-event-subscription-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'event-subscription))
      (common-lisp:list
       (common-lisp:cons "EventSubscription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-event-subscription-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-global-cluster-message common-lisp:nil
                       ((global-cluster-identifier :initarg
                         :global-cluster-identifier :type
                         (common-lisp:or global-cluster-identifier
                                         common-lisp:null)
                         :accessor
                         %delete-global-cluster-message-global-cluster-identifier
                         :initform
                         (common-lisp:error
                          ":global-cluster-identifier is required"))))
 (common-lisp:export
  (common-lisp:list 'delete-global-cluster-message
                    'make-delete-global-cluster-message))
 (common-lisp:defun make-delete-global-cluster-message
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key global-cluster-identifier)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-global-cluster-message
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-global-cluster-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-global-cluster-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'global-cluster-identifier))
      (common-lisp:list
       (common-lisp:cons "GlobalClusterIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-global-cluster-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-global-cluster-result common-lisp:nil
                       ((global-cluster :initarg :global-cluster :type
                         (common-lisp:or global-cluster common-lisp:null)
                         :accessor %delete-global-cluster-result-global-cluster
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'delete-global-cluster-result
                    'make-delete-global-cluster-result))
 (common-lisp:defun make-delete-global-cluster-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key global-cluster)
   (common-lisp:apply #'common-lisp:make-instance 'delete-global-cluster-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-global-cluster-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-global-cluster-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'global-cluster))
      (common-lisp:list
       (common-lisp:cons "GlobalCluster"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-global-cluster-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-certificates-message common-lisp:nil
                       ((marker :initarg :marker :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %describe-certificates-message-marker :initform
                         common-lisp:nil)
                        (max-records :initarg :max-records :type
                         (common-lisp:or integer-optional common-lisp:null)
                         :accessor %describe-certificates-message-max-records
                         :initform common-lisp:nil)
                        (filters :initarg :filters :type
                         (common-lisp:or filter-list common-lisp:null)
                         :accessor %describe-certificates-message-filters
                         :initform common-lisp:nil)
                        (certificate-identifier :initarg
                         :certificate-identifier :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %describe-certificates-message-certificate-identifier
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-certificates-message
                    'make-describe-certificates-message))
 (common-lisp:defun make-describe-certificates-message
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key marker max-records filters
                     certificate-identifier)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-certificates-message
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-certificates-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-certificates-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'certificate-identifier))
      (common-lisp:list
       (common-lisp:cons "CertificateIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filters))
      (common-lisp:list
       (common-lisp:cons "Filters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-records))
      (common-lisp:list
       (common-lisp:cons "MaxRecords"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-certificates-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-dbcluster-parameter-groups-message
                       common-lisp:nil
                       ((marker :initarg :marker :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %describe-dbcluster-parameter-groups-message-marker
                         :initform common-lisp:nil)
                        (max-records :initarg :max-records :type
                         (common-lisp:or integer-optional common-lisp:null)
                         :accessor
                         %describe-dbcluster-parameter-groups-message-max-records
                         :initform common-lisp:nil)
                        (filters :initarg :filters :type
                         (common-lisp:or filter-list common-lisp:null)
                         :accessor
                         %describe-dbcluster-parameter-groups-message-filters
                         :initform common-lisp:nil)
                        (dbcluster-parameter-group-name :initarg
                         :dbcluster-parameter-group-name :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %describe-dbcluster-parameter-groups-message-dbcluster-parameter-group-name
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-dbcluster-parameter-groups-message
                    'make-describe-dbcluster-parameter-groups-message))
 (common-lisp:defun make-describe-dbcluster-parameter-groups-message
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key marker max-records filters
                     dbcluster-parameter-group-name)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-dbcluster-parameter-groups-message
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-dbcluster-parameter-groups-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-dbcluster-parameter-groups-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dbcluster-parameter-group-name))
      (common-lisp:list
       (common-lisp:cons "DBClusterParameterGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filters))
      (common-lisp:list
       (common-lisp:cons "Filters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-records))
      (common-lisp:list
       (common-lisp:cons "MaxRecords"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-dbcluster-parameter-groups-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-dbcluster-parameters-message common-lisp:nil
                       ((marker :initarg :marker :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %describe-dbcluster-parameters-message-marker
                         :initform common-lisp:nil)
                        (max-records :initarg :max-records :type
                         (common-lisp:or integer-optional common-lisp:null)
                         :accessor
                         %describe-dbcluster-parameters-message-max-records
                         :initform common-lisp:nil)
                        (filters :initarg :filters :type
                         (common-lisp:or filter-list common-lisp:null)
                         :accessor
                         %describe-dbcluster-parameters-message-filters
                         :initform common-lisp:nil)
                        (source :initarg :source :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %describe-dbcluster-parameters-message-source
                         :initform common-lisp:nil)
                        (dbcluster-parameter-group-name :initarg
                         :dbcluster-parameter-group-name :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %describe-dbcluster-parameters-message-dbcluster-parameter-group-name
                         :initform
                         (common-lisp:error
                          ":dbcluster-parameter-group-name is required"))))
 (common-lisp:export
  (common-lisp:list 'describe-dbcluster-parameters-message
                    'make-describe-dbcluster-parameters-message))
 (common-lisp:defun make-describe-dbcluster-parameters-message
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key marker max-records filters source
                     dbcluster-parameter-group-name)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-dbcluster-parameters-message
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-dbcluster-parameters-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-dbcluster-parameters-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dbcluster-parameter-group-name))
      (common-lisp:list
       (common-lisp:cons "DBClusterParameterGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source))
      (common-lisp:list
       (common-lisp:cons "Source"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filters))
      (common-lisp:list
       (common-lisp:cons "Filters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-records))
      (common-lisp:list
       (common-lisp:cons "MaxRecords"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-dbcluster-parameters-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-dbcluster-snapshot-attributes-message
                       common-lisp:nil
                       ((dbcluster-snapshot-identifier :initarg
                         :dbcluster-snapshot-identifier :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %describe-dbcluster-snapshot-attributes-message-dbcluster-snapshot-identifier
                         :initform
                         (common-lisp:error
                          ":dbcluster-snapshot-identifier is required"))))
 (common-lisp:export
  (common-lisp:list 'describe-dbcluster-snapshot-attributes-message
                    'make-describe-dbcluster-snapshot-attributes-message))
 (common-lisp:defun make-describe-dbcluster-snapshot-attributes-message
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key dbcluster-snapshot-identifier)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-dbcluster-snapshot-attributes-message
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-dbcluster-snapshot-attributes-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-dbcluster-snapshot-attributes-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dbcluster-snapshot-identifier))
      (common-lisp:list
       (common-lisp:cons "DBClusterSnapshotIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-dbcluster-snapshot-attributes-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-dbcluster-snapshot-attributes-result
                       common-lisp:nil
                       ((dbcluster-snapshot-attributes-result :initarg
                         :dbcluster-snapshot-attributes-result :type
                         (common-lisp:or dbcluster-snapshot-attributes-result
                                         common-lisp:null)
                         :accessor
                         %describe-dbcluster-snapshot-attributes-result-dbcluster-snapshot-attributes-result
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-dbcluster-snapshot-attributes-result
                    'make-describe-dbcluster-snapshot-attributes-result))
 (common-lisp:defun make-describe-dbcluster-snapshot-attributes-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key dbcluster-snapshot-attributes-result)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-dbcluster-snapshot-attributes-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-dbcluster-snapshot-attributes-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-dbcluster-snapshot-attributes-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dbcluster-snapshot-attributes-result))
      (common-lisp:list
       (common-lisp:cons "DBClusterSnapshotAttributesResult"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-dbcluster-snapshot-attributes-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-dbcluster-snapshots-message common-lisp:nil
                       ((include-public :initarg :include-public :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         %describe-dbcluster-snapshots-message-include-public
                         :initform common-lisp:nil)
                        (include-shared :initarg :include-shared :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         %describe-dbcluster-snapshots-message-include-shared
                         :initform common-lisp:nil)
                        (marker :initarg :marker :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %describe-dbcluster-snapshots-message-marker :initform
                         common-lisp:nil)
                        (max-records :initarg :max-records :type
                         (common-lisp:or integer-optional common-lisp:null)
                         :accessor
                         %describe-dbcluster-snapshots-message-max-records
                         :initform common-lisp:nil)
                        (filters :initarg :filters :type
                         (common-lisp:or filter-list common-lisp:null)
                         :accessor
                         %describe-dbcluster-snapshots-message-filters
                         :initform common-lisp:nil)
                        (snapshot-type :initarg :snapshot-type :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %describe-dbcluster-snapshots-message-snapshot-type
                         :initform common-lisp:nil)
                        (dbcluster-snapshot-identifier :initarg
                         :dbcluster-snapshot-identifier :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %describe-dbcluster-snapshots-message-dbcluster-snapshot-identifier
                         :initform common-lisp:nil)
                        (dbcluster-identifier :initarg :dbcluster-identifier
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         %describe-dbcluster-snapshots-message-dbcluster-identifier
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-dbcluster-snapshots-message
                    'make-describe-dbcluster-snapshots-message))
 (common-lisp:defun make-describe-dbcluster-snapshots-message
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key include-public include-shared marker
                     max-records filters snapshot-type
                     dbcluster-snapshot-identifier dbcluster-identifier)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-dbcluster-snapshots-message
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-dbcluster-snapshots-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-dbcluster-snapshots-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dbcluster-identifier))
      (common-lisp:list
       (common-lisp:cons "DBClusterIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dbcluster-snapshot-identifier))
      (common-lisp:list
       (common-lisp:cons "DBClusterSnapshotIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'snapshot-type))
      (common-lisp:list
       (common-lisp:cons "SnapshotType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filters))
      (common-lisp:list
       (common-lisp:cons "Filters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-records))
      (common-lisp:list
       (common-lisp:cons "MaxRecords"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'include-shared))
      (common-lisp:list
       (common-lisp:cons "IncludeShared"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'include-public))
      (common-lisp:list
       (common-lisp:cons "IncludePublic"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-dbcluster-snapshots-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-dbclusters-message common-lisp:nil
                       ((marker :initarg :marker :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %describe-dbclusters-message-marker :initform
                         common-lisp:nil)
                        (max-records :initarg :max-records :type
                         (common-lisp:or integer-optional common-lisp:null)
                         :accessor %describe-dbclusters-message-max-records
                         :initform common-lisp:nil)
                        (filters :initarg :filters :type
                         (common-lisp:or filter-list common-lisp:null)
                         :accessor %describe-dbclusters-message-filters
                         :initform common-lisp:nil)
                        (dbcluster-identifier :initarg :dbcluster-identifier
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         %describe-dbclusters-message-dbcluster-identifier
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-dbclusters-message
                    'make-describe-dbclusters-message))
 (common-lisp:defun make-describe-dbclusters-message
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key marker max-records filters
                     dbcluster-identifier)
   (common-lisp:apply #'common-lisp:make-instance 'describe-dbclusters-message
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-dbclusters-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-dbclusters-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dbcluster-identifier))
      (common-lisp:list
       (common-lisp:cons "DBClusterIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filters))
      (common-lisp:list
       (common-lisp:cons "Filters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-records))
      (common-lisp:list
       (common-lisp:cons "MaxRecords"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-dbclusters-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-dbengine-versions-message common-lisp:nil
                       ((list-supported-timezones :initarg
                         :list-supported-timezones :type
                         (common-lisp:or boolean-optional common-lisp:null)
                         :accessor
                         %describe-dbengine-versions-message-list-supported-timezones
                         :initform common-lisp:nil)
                        (list-supported-character-sets :initarg
                         :list-supported-character-sets :type
                         (common-lisp:or boolean-optional common-lisp:null)
                         :accessor
                         %describe-dbengine-versions-message-list-supported-character-sets
                         :initform common-lisp:nil)
                        (default-only :initarg :default-only :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         %describe-dbengine-versions-message-default-only
                         :initform common-lisp:nil)
                        (marker :initarg :marker :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %describe-dbengine-versions-message-marker :initform
                         common-lisp:nil)
                        (max-records :initarg :max-records :type
                         (common-lisp:or integer-optional common-lisp:null)
                         :accessor
                         %describe-dbengine-versions-message-max-records
                         :initform common-lisp:nil)
                        (filters :initarg :filters :type
                         (common-lisp:or filter-list common-lisp:null)
                         :accessor %describe-dbengine-versions-message-filters
                         :initform common-lisp:nil)
                        (dbparameter-group-family :initarg
                         :dbparameter-group-family :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %describe-dbengine-versions-message-dbparameter-group-family
                         :initform common-lisp:nil)
                        (engine-version :initarg :engine-version :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %describe-dbengine-versions-message-engine-version
                         :initform common-lisp:nil)
                        (engine :initarg :engine :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %describe-dbengine-versions-message-engine :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-dbengine-versions-message
                    'make-describe-dbengine-versions-message))
 (common-lisp:defun make-describe-dbengine-versions-message
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key list-supported-timezones
                     list-supported-character-sets default-only marker
                     max-records filters dbparameter-group-family
                     engine-version engine)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-dbengine-versions-message
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-dbengine-versions-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-dbengine-versions-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'engine))
      (common-lisp:list
       (common-lisp:cons "Engine"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'engine-version))
      (common-lisp:list
       (common-lisp:cons "EngineVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dbparameter-group-family))
      (common-lisp:list
       (common-lisp:cons "DBParameterGroupFamily"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filters))
      (common-lisp:list
       (common-lisp:cons "Filters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-records))
      (common-lisp:list
       (common-lisp:cons "MaxRecords"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'default-only))
      (common-lisp:list
       (common-lisp:cons "DefaultOnly"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'list-supported-character-sets))
      (common-lisp:list
       (common-lisp:cons "ListSupportedCharacterSets"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'list-supported-timezones))
      (common-lisp:list
       (common-lisp:cons "ListSupportedTimezones"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-dbengine-versions-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-dbinstances-message common-lisp:nil
                       ((marker :initarg :marker :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %describe-dbinstances-message-marker :initform
                         common-lisp:nil)
                        (max-records :initarg :max-records :type
                         (common-lisp:or integer-optional common-lisp:null)
                         :accessor %describe-dbinstances-message-max-records
                         :initform common-lisp:nil)
                        (filters :initarg :filters :type
                         (common-lisp:or filter-list common-lisp:null)
                         :accessor %describe-dbinstances-message-filters
                         :initform common-lisp:nil)
                        (dbinstance-identifier :initarg :dbinstance-identifier
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         %describe-dbinstances-message-dbinstance-identifier
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-dbinstances-message
                    'make-describe-dbinstances-message))
 (common-lisp:defun make-describe-dbinstances-message
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key marker max-records filters
                     dbinstance-identifier)
   (common-lisp:apply #'common-lisp:make-instance 'describe-dbinstances-message
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-dbinstances-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-dbinstances-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dbinstance-identifier))
      (common-lisp:list
       (common-lisp:cons "DBInstanceIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filters))
      (common-lisp:list
       (common-lisp:cons "Filters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-records))
      (common-lisp:list
       (common-lisp:cons "MaxRecords"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-dbinstances-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-dbsubnet-groups-message common-lisp:nil
                       ((marker :initarg :marker :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %describe-dbsubnet-groups-message-marker :initform
                         common-lisp:nil)
                        (max-records :initarg :max-records :type
                         (common-lisp:or integer-optional common-lisp:null)
                         :accessor
                         %describe-dbsubnet-groups-message-max-records
                         :initform common-lisp:nil)
                        (filters :initarg :filters :type
                         (common-lisp:or filter-list common-lisp:null)
                         :accessor %describe-dbsubnet-groups-message-filters
                         :initform common-lisp:nil)
                        (dbsubnet-group-name :initarg :dbsubnet-group-name
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         %describe-dbsubnet-groups-message-dbsubnet-group-name
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-dbsubnet-groups-message
                    'make-describe-dbsubnet-groups-message))
 (common-lisp:defun make-describe-dbsubnet-groups-message
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key marker max-records filters
                     dbsubnet-group-name)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-dbsubnet-groups-message
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-dbsubnet-groups-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-dbsubnet-groups-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dbsubnet-group-name))
      (common-lisp:list
       (common-lisp:cons "DBSubnetGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filters))
      (common-lisp:list
       (common-lisp:cons "Filters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-records))
      (common-lisp:list
       (common-lisp:cons "MaxRecords"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-dbsubnet-groups-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-engine-default-cluster-parameters-message
                       common-lisp:nil
                       ((marker :initarg :marker :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %describe-engine-default-cluster-parameters-message-marker
                         :initform common-lisp:nil)
                        (max-records :initarg :max-records :type
                         (common-lisp:or integer-optional common-lisp:null)
                         :accessor
                         %describe-engine-default-cluster-parameters-message-max-records
                         :initform common-lisp:nil)
                        (filters :initarg :filters :type
                         (common-lisp:or filter-list common-lisp:null)
                         :accessor
                         %describe-engine-default-cluster-parameters-message-filters
                         :initform common-lisp:nil)
                        (dbparameter-group-family :initarg
                         :dbparameter-group-family :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %describe-engine-default-cluster-parameters-message-dbparameter-group-family
                         :initform
                         (common-lisp:error
                          ":dbparameter-group-family is required"))))
 (common-lisp:export
  (common-lisp:list 'describe-engine-default-cluster-parameters-message
                    'make-describe-engine-default-cluster-parameters-message))
 (common-lisp:defun make-describe-engine-default-cluster-parameters-message
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key marker max-records filters
                     dbparameter-group-family)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-engine-default-cluster-parameters-message
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-engine-default-cluster-parameters-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-engine-default-cluster-parameters-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dbparameter-group-family))
      (common-lisp:list
       (common-lisp:cons "DBParameterGroupFamily"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filters))
      (common-lisp:list
       (common-lisp:cons "Filters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-records))
      (common-lisp:list
       (common-lisp:cons "MaxRecords"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-engine-default-cluster-parameters-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-engine-default-cluster-parameters-result
                       common-lisp:nil
                       ((engine-defaults :initarg :engine-defaults :type
                         (common-lisp:or engine-defaults common-lisp:null)
                         :accessor
                         %describe-engine-default-cluster-parameters-result-engine-defaults
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-engine-default-cluster-parameters-result
                    'make-describe-engine-default-cluster-parameters-result))
 (common-lisp:defun make-describe-engine-default-cluster-parameters-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key engine-defaults)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-engine-default-cluster-parameters-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-engine-default-cluster-parameters-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-engine-default-cluster-parameters-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'engine-defaults))
      (common-lisp:list
       (common-lisp:cons "EngineDefaults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-engine-default-cluster-parameters-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-event-categories-message common-lisp:nil
                       ((filters :initarg :filters :type
                         (common-lisp:or filter-list common-lisp:null)
                         :accessor %describe-event-categories-message-filters
                         :initform common-lisp:nil)
                        (source-type :initarg :source-type :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %describe-event-categories-message-source-type
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-event-categories-message
                    'make-describe-event-categories-message))
 (common-lisp:defun make-describe-event-categories-message
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key filters source-type)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-event-categories-message
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-event-categories-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-event-categories-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-type))
      (common-lisp:list
       (common-lisp:cons "SourceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filters))
      (common-lisp:list
       (common-lisp:cons "Filters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-event-categories-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-event-subscriptions-message common-lisp:nil
                       ((marker :initarg :marker :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %describe-event-subscriptions-message-marker :initform
                         common-lisp:nil)
                        (max-records :initarg :max-records :type
                         (common-lisp:or integer-optional common-lisp:null)
                         :accessor
                         %describe-event-subscriptions-message-max-records
                         :initform common-lisp:nil)
                        (filters :initarg :filters :type
                         (common-lisp:or filter-list common-lisp:null)
                         :accessor
                         %describe-event-subscriptions-message-filters
                         :initform common-lisp:nil)
                        (subscription-name :initarg :subscription-name :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %describe-event-subscriptions-message-subscription-name
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-event-subscriptions-message
                    'make-describe-event-subscriptions-message))
 (common-lisp:defun make-describe-event-subscriptions-message
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key marker max-records filters
                     subscription-name)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-event-subscriptions-message
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-event-subscriptions-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-event-subscriptions-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subscription-name))
      (common-lisp:list
       (common-lisp:cons "SubscriptionName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filters))
      (common-lisp:list
       (common-lisp:cons "Filters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-records))
      (common-lisp:list
       (common-lisp:cons "MaxRecords"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-event-subscriptions-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-events-message common-lisp:nil
                       ((marker :initarg :marker :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %describe-events-message-marker :initform
                         common-lisp:nil)
                        (max-records :initarg :max-records :type
                         (common-lisp:or integer-optional common-lisp:null)
                         :accessor %describe-events-message-max-records
                         :initform common-lisp:nil)
                        (filters :initarg :filters :type
                         (common-lisp:or filter-list common-lisp:null)
                         :accessor %describe-events-message-filters :initform
                         common-lisp:nil)
                        (event-categories :initarg :event-categories :type
                         (common-lisp:or event-categories-list
                                         common-lisp:null)
                         :accessor %describe-events-message-event-categories
                         :initform common-lisp:nil)
                        (duration :initarg :duration :type
                         (common-lisp:or integer-optional common-lisp:null)
                         :accessor %describe-events-message-duration :initform
                         common-lisp:nil)
                        (end-time :initarg :end-time :type
                         (common-lisp:or tstamp common-lisp:null) :accessor
                         %describe-events-message-end-time :initform
                         common-lisp:nil)
                        (start-time :initarg :start-time :type
                         (common-lisp:or tstamp common-lisp:null) :accessor
                         %describe-events-message-start-time :initform
                         common-lisp:nil)
                        (source-type :initarg :source-type :type
                         (common-lisp:or source-type common-lisp:null)
                         :accessor %describe-events-message-source-type
                         :initform common-lisp:nil)
                        (source-identifier :initarg :source-identifier :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %describe-events-message-source-identifier :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-events-message 'make-describe-events-message))
 (common-lisp:defun make-describe-events-message
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key marker max-records filters
                     event-categories duration end-time start-time source-type
                     source-identifier)
   (common-lisp:apply #'common-lisp:make-instance 'describe-events-message
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-events-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-events-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-identifier))
      (common-lisp:list
       (common-lisp:cons "SourceIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-type))
      (common-lisp:list
       (common-lisp:cons "SourceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start-time))
      (common-lisp:list
       (common-lisp:cons "StartTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'end-time))
      (common-lisp:list
       (common-lisp:cons "EndTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'duration))
      (common-lisp:list
       (common-lisp:cons "Duration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'event-categories))
      (common-lisp:list
       (common-lisp:cons "EventCategories"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filters))
      (common-lisp:list
       (common-lisp:cons "Filters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-records))
      (common-lisp:list
       (common-lisp:cons "MaxRecords"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-events-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-global-clusters-message common-lisp:nil
                       ((marker :initarg :marker :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %describe-global-clusters-message-marker :initform
                         common-lisp:nil)
                        (max-records :initarg :max-records :type
                         (common-lisp:or integer-optional common-lisp:null)
                         :accessor
                         %describe-global-clusters-message-max-records
                         :initform common-lisp:nil)
                        (filters :initarg :filters :type
                         (common-lisp:or filter-list common-lisp:null)
                         :accessor %describe-global-clusters-message-filters
                         :initform common-lisp:nil)
                        (global-cluster-identifier :initarg
                         :global-cluster-identifier :type
                         (common-lisp:or global-cluster-identifier
                                         common-lisp:null)
                         :accessor
                         %describe-global-clusters-message-global-cluster-identifier
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-global-clusters-message
                    'make-describe-global-clusters-message))
 (common-lisp:defun make-describe-global-clusters-message
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key marker max-records filters
                     global-cluster-identifier)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-global-clusters-message
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-global-clusters-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-global-clusters-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'global-cluster-identifier))
      (common-lisp:list
       (common-lisp:cons "GlobalClusterIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filters))
      (common-lisp:list
       (common-lisp:cons "Filters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-records))
      (common-lisp:list
       (common-lisp:cons "MaxRecords"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-global-clusters-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-orderable-dbinstance-options-message
                       common-lisp:nil
                       ((marker :initarg :marker :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %describe-orderable-dbinstance-options-message-marker
                         :initform common-lisp:nil)
                        (max-records :initarg :max-records :type
                         (common-lisp:or integer-optional common-lisp:null)
                         :accessor
                         %describe-orderable-dbinstance-options-message-max-records
                         :initform common-lisp:nil)
                        (filters :initarg :filters :type
                         (common-lisp:or filter-list common-lisp:null)
                         :accessor
                         %describe-orderable-dbinstance-options-message-filters
                         :initform common-lisp:nil)
                        (vpc :initarg :vpc :type
                         (common-lisp:or boolean-optional common-lisp:null)
                         :accessor
                         %describe-orderable-dbinstance-options-message-vpc
                         :initform common-lisp:nil)
                        (license-model :initarg :license-model :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %describe-orderable-dbinstance-options-message-license-model
                         :initform common-lisp:nil)
                        (dbinstance-class :initarg :dbinstance-class :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %describe-orderable-dbinstance-options-message-dbinstance-class
                         :initform common-lisp:nil)
                        (engine-version :initarg :engine-version :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %describe-orderable-dbinstance-options-message-engine-version
                         :initform common-lisp:nil)
                        (engine :initarg :engine :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %describe-orderable-dbinstance-options-message-engine
                         :initform (common-lisp:error ":engine is required"))))
 (common-lisp:export
  (common-lisp:list 'describe-orderable-dbinstance-options-message
                    'make-describe-orderable-dbinstance-options-message))
 (common-lisp:defun make-describe-orderable-dbinstance-options-message
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key marker max-records filters vpc
                     license-model dbinstance-class engine-version engine)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-orderable-dbinstance-options-message
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-orderable-dbinstance-options-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-orderable-dbinstance-options-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'engine))
      (common-lisp:list
       (common-lisp:cons "Engine"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'engine-version))
      (common-lisp:list
       (common-lisp:cons "EngineVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dbinstance-class))
      (common-lisp:list
       (common-lisp:cons "DBInstanceClass"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'license-model))
      (common-lisp:list
       (common-lisp:cons "LicenseModel"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpc))
      (common-lisp:list
       (common-lisp:cons "Vpc"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filters))
      (common-lisp:list
       (common-lisp:cons "Filters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-records))
      (common-lisp:list
       (common-lisp:cons "MaxRecords"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-orderable-dbinstance-options-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-pending-maintenance-actions-message
                       common-lisp:nil
                       ((max-records :initarg :max-records :type
                         (common-lisp:or integer-optional common-lisp:null)
                         :accessor
                         %describe-pending-maintenance-actions-message-max-records
                         :initform common-lisp:nil)
                        (marker :initarg :marker :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %describe-pending-maintenance-actions-message-marker
                         :initform common-lisp:nil)
                        (filters :initarg :filters :type
                         (common-lisp:or filter-list common-lisp:null)
                         :accessor
                         %describe-pending-maintenance-actions-message-filters
                         :initform common-lisp:nil)
                        (resource-identifier :initarg :resource-identifier
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         %describe-pending-maintenance-actions-message-resource-identifier
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-pending-maintenance-actions-message
                    'make-describe-pending-maintenance-actions-message))
 (common-lisp:defun make-describe-pending-maintenance-actions-message
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key max-records marker filters
                     resource-identifier)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-pending-maintenance-actions-message
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-pending-maintenance-actions-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-pending-maintenance-actions-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-identifier))
      (common-lisp:list
       (common-lisp:cons "ResourceIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filters))
      (common-lisp:list
       (common-lisp:cons "Filters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-records))
      (common-lisp:list
       (common-lisp:cons "MaxRecords"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-pending-maintenance-actions-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass endpoint common-lisp:nil
                       ((hosted-zone-id :initarg :hosted-zone-id :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %endpoint-hosted-zone-id :initform common-lisp:nil)
                        (port :initarg :port :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         %endpoint-port :initform common-lisp:nil)
                        (address :initarg :address :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %endpoint-address :initform common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'endpoint 'make-endpoint))
 (common-lisp:defun make-endpoint
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key hosted-zone-id port address)
   (common-lisp:apply #'common-lisp:make-instance 'endpoint
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input endpoint))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input endpoint))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'address))
      (common-lisp:list
       (common-lisp:cons "Address"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'port))
      (common-lisp:list
       (common-lisp:cons "Port"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'hosted-zone-id))
      (common-lisp:list
       (common-lisp:cons "HostedZoneId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input endpoint))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass engine-defaults common-lisp:nil
                       ((parameters :initarg :parameters :type
                         (common-lisp:or parameters-list common-lisp:null)
                         :accessor %engine-defaults-parameters :initform
                         common-lisp:nil)
                        (marker :initarg :marker :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %engine-defaults-marker :initform common-lisp:nil)
                        (dbparameter-group-family :initarg
                         :dbparameter-group-family :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %engine-defaults-dbparameter-group-family :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'engine-defaults 'make-engine-defaults))
 (common-lisp:defun make-engine-defaults
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key parameters marker
                     dbparameter-group-family)
   (common-lisp:apply #'common-lisp:make-instance 'engine-defaults
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input engine-defaults))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input engine-defaults))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dbparameter-group-family))
      (common-lisp:list
       (common-lisp:cons "DBParameterGroupFamily"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'parameters))
      (common-lisp:list
       (common-lisp:cons "Parameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input engine-defaults))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass event common-lisp:nil
                       ((source-arn :initarg :source-arn :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %event-source-arn :initform common-lisp:nil)
                        (date :initarg :date :type
                         (common-lisp:or tstamp common-lisp:null) :accessor
                         %event-date :initform common-lisp:nil)
                        (event-categories :initarg :event-categories :type
                         (common-lisp:or event-categories-list
                                         common-lisp:null)
                         :accessor %event-event-categories :initform
                         common-lisp:nil)
                        (message :initarg :message :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %event-message :initform common-lisp:nil)
                        (source-type :initarg :source-type :type
                         (common-lisp:or source-type common-lisp:null)
                         :accessor %event-source-type :initform
                         common-lisp:nil)
                        (source-identifier :initarg :source-identifier :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %event-source-identifier :initform common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'event 'make-event))
 (common-lisp:defun make-event
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key source-arn date event-categories message
                     source-type source-identifier)
   (common-lisp:apply #'common-lisp:make-instance 'event
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input event))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input event))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-identifier))
      (common-lisp:list
       (common-lisp:cons "SourceIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-type))
      (common-lisp:list
       (common-lisp:cons "SourceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message))
      (common-lisp:list
       (common-lisp:cons "Message"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'event-categories))
      (common-lisp:list
       (common-lisp:cons "EventCategories"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'date))
      (common-lisp:list
       (common-lisp:cons "Date"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-arn))
      (common-lisp:list
       (common-lisp:cons "SourceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input event))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype event-categories-list ()
   '(trivial-types:proper-list string))
 (common-lisp:defun |make-event-categories-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list string))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass event-categories-map common-lisp:nil
                       ((event-categories :initarg :event-categories :type
                         (common-lisp:or event-categories-list
                                         common-lisp:null)
                         :accessor %event-categories-map-event-categories
                         :initform common-lisp:nil)
                        (source-type :initarg :source-type :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %event-categories-map-source-type :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'event-categories-map 'make-event-categories-map))
 (common-lisp:defun make-event-categories-map
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key event-categories source-type)
   (common-lisp:apply #'common-lisp:make-instance 'event-categories-map
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input event-categories-map))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input event-categories-map))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-type))
      (common-lisp:list
       (common-lisp:cons "SourceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'event-categories))
      (common-lisp:list
       (common-lisp:cons "EventCategories"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input event-categories-map))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype event-categories-map-list ()
   '(trivial-types:proper-list event-categories-map))
 (common-lisp:defun |make-event-categories-map-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list event-categories-map))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass event-categories-message common-lisp:nil
                       ((event-categories-map-list :initarg
                         :event-categories-map-list :type
                         (common-lisp:or event-categories-map-list
                                         common-lisp:null)
                         :accessor
                         %event-categories-message-event-categories-map-list
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'event-categories-message 'make-event-categories-message))
 (common-lisp:defun make-event-categories-message
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key event-categories-map-list)
   (common-lisp:apply #'common-lisp:make-instance 'event-categories-message
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          event-categories-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          event-categories-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'event-categories-map-list))
      (common-lisp:list
       (common-lisp:cons "EventCategoriesMapList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          event-categories-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype event-list () '(trivial-types:proper-list event))
 (common-lisp:defun |make-event-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list event))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass event-subscription common-lisp:nil
                       ((event-subscription-arn :initarg
                         :event-subscription-arn :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %event-subscription-event-subscription-arn :initform
                         common-lisp:nil)
                        (enabled :initarg :enabled :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         %event-subscription-enabled :initform common-lisp:nil)
                        (event-categories-list :initarg :event-categories-list
                         :type
                         (common-lisp:or event-categories-list
                                         common-lisp:null)
                         :accessor %event-subscription-event-categories-list
                         :initform common-lisp:nil)
                        (source-ids-list :initarg :source-ids-list :type
                         (common-lisp:or source-ids-list common-lisp:null)
                         :accessor %event-subscription-source-ids-list
                         :initform common-lisp:nil)
                        (source-type :initarg :source-type :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %event-subscription-source-type :initform
                         common-lisp:nil)
                        (subscription-creation-time :initarg
                         :subscription-creation-time :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %event-subscription-subscription-creation-time
                         :initform common-lisp:nil)
                        (status :initarg :status :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %event-subscription-status :initform common-lisp:nil)
                        (sns-topic-arn :initarg :sns-topic-arn :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %event-subscription-sns-topic-arn :initform
                         common-lisp:nil)
                        (cust-subscription-id :initarg :cust-subscription-id
                         :type (common-lisp:or string common-lisp:null)
                         :accessor %event-subscription-cust-subscription-id
                         :initform common-lisp:nil)
                        (customer-aws-id :initarg :customer-aws-id :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %event-subscription-customer-aws-id :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'event-subscription 'make-event-subscription))
 (common-lisp:defun make-event-subscription
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key event-subscription-arn enabled
                     event-categories-list source-ids-list source-type
                     subscription-creation-time status sns-topic-arn
                     cust-subscription-id customer-aws-id)
   (common-lisp:apply #'common-lisp:make-instance 'event-subscription
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input event-subscription))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input event-subscription))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'customer-aws-id))
      (common-lisp:list
       (common-lisp:cons "CustomerAwsId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cust-subscription-id))
      (common-lisp:list
       (common-lisp:cons "CustSubscriptionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sns-topic-arn))
      (common-lisp:list
       (common-lisp:cons "SnsTopicArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'subscription-creation-time))
      (common-lisp:list
       (common-lisp:cons "SubscriptionCreationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-type))
      (common-lisp:list
       (common-lisp:cons "SourceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-ids-list))
      (common-lisp:list
       (common-lisp:cons "SourceIdsList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'event-categories-list))
      (common-lisp:list
       (common-lisp:cons "EventCategoriesList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'enabled))
      (common-lisp:list
       (common-lisp:cons "Enabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'event-subscription-arn))
      (common-lisp:list
       (common-lisp:cons "EventSubscriptionArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input event-subscription))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition event-subscription-quota-exceeded-fault
     (docdb-error)
     common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'event-subscription-quota-exceeded-fault)))
(common-lisp:progn
 (common-lisp:deftype event-subscriptions-list ()
   '(trivial-types:proper-list event-subscription))
 (common-lisp:defun |make-event-subscriptions-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list event-subscription))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass event-subscriptions-message common-lisp:nil
                       ((event-subscriptions-list :initarg
                         :event-subscriptions-list :type
                         (common-lisp:or event-subscriptions-list
                                         common-lisp:null)
                         :accessor
                         %event-subscriptions-message-event-subscriptions-list
                         :initform common-lisp:nil)
                        (marker :initarg :marker :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %event-subscriptions-message-marker :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'event-subscriptions-message
                    'make-event-subscriptions-message))
 (common-lisp:defun make-event-subscriptions-message
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key event-subscriptions-list marker)
   (common-lisp:apply #'common-lisp:make-instance 'event-subscriptions-message
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          event-subscriptions-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          event-subscriptions-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'event-subscriptions-list))
      (common-lisp:list
       (common-lisp:cons "EventSubscriptionsList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          event-subscriptions-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass events-message common-lisp:nil
                       ((events :initarg :events :type
                         (common-lisp:or event-list common-lisp:null) :accessor
                         %events-message-events :initform common-lisp:nil)
                        (marker :initarg :marker :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %events-message-marker :initform common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'events-message 'make-events-message))
 (common-lisp:defun make-events-message
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key events marker)
   (common-lisp:apply #'common-lisp:make-instance 'events-message
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input events-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input events-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'events))
      (common-lisp:list
       (common-lisp:cons "Events"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input events-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass failover-dbcluster-message common-lisp:nil
                       ((target-dbinstance-identifier :initarg
                         :target-dbinstance-identifier :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %failover-dbcluster-message-target-dbinstance-identifier
                         :initform common-lisp:nil)
                        (dbcluster-identifier :initarg :dbcluster-identifier
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         %failover-dbcluster-message-dbcluster-identifier
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'failover-dbcluster-message
                    'make-failover-dbcluster-message))
 (common-lisp:defun make-failover-dbcluster-message
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key target-dbinstance-identifier
                     dbcluster-identifier)
   (common-lisp:apply #'common-lisp:make-instance 'failover-dbcluster-message
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          failover-dbcluster-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          failover-dbcluster-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dbcluster-identifier))
      (common-lisp:list
       (common-lisp:cons "DBClusterIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'target-dbinstance-identifier))
      (common-lisp:list
       (common-lisp:cons "TargetDBInstanceIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          failover-dbcluster-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass failover-dbcluster-result common-lisp:nil
                       ((dbcluster :initarg :dbcluster :type
                         (common-lisp:or dbcluster common-lisp:null) :accessor
                         %failover-dbcluster-result-dbcluster :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'failover-dbcluster-result
                    'make-failover-dbcluster-result))
 (common-lisp:defun make-failover-dbcluster-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key dbcluster)
   (common-lisp:apply #'common-lisp:make-instance 'failover-dbcluster-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          failover-dbcluster-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          failover-dbcluster-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dbcluster))
      (common-lisp:list
       (common-lisp:cons "DBCluster"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          failover-dbcluster-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass filter common-lisp:nil
                       ((values :initarg :values :type
                         (common-lisp:or filter-value-list common-lisp:null)
                         :accessor %filter-values :initform
                         (common-lisp:error ":values is required"))
                        (name :initarg :name :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %filter-name :initform
                         (common-lisp:error ":name is required"))))
 (common-lisp:export (common-lisp:list 'filter 'make-filter))
 (common-lisp:defun make-filter
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key values name)
   (common-lisp:apply #'common-lisp:make-instance 'filter
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input filter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input filter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'values))
      (common-lisp:list
       (common-lisp:cons "Values"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input filter))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype filter-list () '(trivial-types:proper-list filter))
 (common-lisp:defun |make-filter-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list filter))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype filter-value-list () '(trivial-types:proper-list string))
 (common-lisp:defun |make-filter-value-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list string))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass global-cluster common-lisp:nil
                       ((global-cluster-members :initarg
                         :global-cluster-members :type
                         (common-lisp:or global-cluster-member-list
                                         common-lisp:null)
                         :accessor %global-cluster-global-cluster-members
                         :initform common-lisp:nil)
                        (deletion-protection :initarg :deletion-protection
                         :type
                         (common-lisp:or boolean-optional common-lisp:null)
                         :accessor %global-cluster-deletion-protection
                         :initform common-lisp:nil)
                        (storage-encrypted :initarg :storage-encrypted :type
                         (common-lisp:or boolean-optional common-lisp:null)
                         :accessor %global-cluster-storage-encrypted :initform
                         common-lisp:nil)
                        (database-name :initarg :database-name :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %global-cluster-database-name :initform
                         common-lisp:nil)
                        (engine-version :initarg :engine-version :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %global-cluster-engine-version :initform
                         common-lisp:nil)
                        (engine :initarg :engine :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %global-cluster-engine :initform common-lisp:nil)
                        (status :initarg :status :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %global-cluster-status :initform common-lisp:nil)
                        (global-cluster-arn :initarg :global-cluster-arn :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %global-cluster-global-cluster-arn :initform
                         common-lisp:nil)
                        (global-cluster-resource-id :initarg
                         :global-cluster-resource-id :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %global-cluster-global-cluster-resource-id :initform
                         common-lisp:nil)
                        (global-cluster-identifier :initarg
                         :global-cluster-identifier :type
                         (common-lisp:or global-cluster-identifier
                                         common-lisp:null)
                         :accessor %global-cluster-global-cluster-identifier
                         :initform common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'global-cluster 'make-global-cluster))
 (common-lisp:defun make-global-cluster
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key global-cluster-members
                     deletion-protection storage-encrypted database-name
                     engine-version engine status global-cluster-arn
                     global-cluster-resource-id global-cluster-identifier)
   (common-lisp:apply #'common-lisp:make-instance 'global-cluster
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input global-cluster))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input global-cluster))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'global-cluster-identifier))
      (common-lisp:list
       (common-lisp:cons "GlobalClusterIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'global-cluster-resource-id))
      (common-lisp:list
       (common-lisp:cons "GlobalClusterResourceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'global-cluster-arn))
      (common-lisp:list
       (common-lisp:cons "GlobalClusterArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'engine))
      (common-lisp:list
       (common-lisp:cons "Engine"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'engine-version))
      (common-lisp:list
       (common-lisp:cons "EngineVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'database-name))
      (common-lisp:list
       (common-lisp:cons "DatabaseName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'storage-encrypted))
      (common-lisp:list
       (common-lisp:cons "StorageEncrypted"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'deletion-protection))
      (common-lisp:list
       (common-lisp:cons "DeletionProtection"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'global-cluster-members))
      (common-lisp:list
       (common-lisp:cons "GlobalClusterMembers"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input global-cluster))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition global-cluster-already-exists-fault
     (docdb-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'global-cluster-already-exists-fault)))
(common-lisp:deftype global-cluster-identifier () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype global-cluster-list ()
   '(trivial-types:proper-list global-cluster))
 (common-lisp:defun |make-global-cluster-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list global-cluster))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass global-cluster-member common-lisp:nil
                       ((is-writer :initarg :is-writer :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         %global-cluster-member-is-writer :initform
                         common-lisp:nil)
                        (readers :initarg :readers :type
                         (common-lisp:or readers-arn-list common-lisp:null)
                         :accessor %global-cluster-member-readers :initform
                         common-lisp:nil)
                        (dbcluster-arn :initarg :dbcluster-arn :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %global-cluster-member-dbcluster-arn :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'global-cluster-member 'make-global-cluster-member))
 (common-lisp:defun make-global-cluster-member
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key is-writer readers dbcluster-arn)
   (common-lisp:apply #'common-lisp:make-instance 'global-cluster-member
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          global-cluster-member))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          global-cluster-member))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dbcluster-arn))
      (common-lisp:list
       (common-lisp:cons "DBClusterArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'readers))
      (common-lisp:list
       (common-lisp:cons "Readers"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'is-writer))
      (common-lisp:list
       (common-lisp:cons "IsWriter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          global-cluster-member))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype global-cluster-member-list ()
   '(trivial-types:proper-list global-cluster-member))
 (common-lisp:defun |make-global-cluster-member-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list global-cluster-member))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition global-cluster-not-found-fault
     (docdb-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'global-cluster-not-found-fault)))
(common-lisp:progn
 (common-lisp:define-condition global-cluster-quota-exceeded-fault
     (docdb-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'global-cluster-quota-exceeded-fault)))
(common-lisp:progn
 (common-lisp:defclass global-clusters-message common-lisp:nil
                       ((global-clusters :initarg :global-clusters :type
                         (common-lisp:or global-cluster-list common-lisp:null)
                         :accessor %global-clusters-message-global-clusters
                         :initform common-lisp:nil)
                        (marker :initarg :marker :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %global-clusters-message-marker :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'global-clusters-message 'make-global-clusters-message))
 (common-lisp:defun make-global-clusters-message
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key global-clusters marker)
   (common-lisp:apply #'common-lisp:make-instance 'global-clusters-message
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          global-clusters-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          global-clusters-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'global-clusters))
      (common-lisp:list
       (common-lisp:cons "GlobalClusters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          global-clusters-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition instance-quota-exceeded-fault
     (docdb-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'instance-quota-exceeded-fault)))
(common-lisp:progn
 (common-lisp:define-condition insufficient-dbcluster-capacity-fault
     (docdb-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'insufficient-dbcluster-capacity-fault)))
(common-lisp:progn
 (common-lisp:define-condition insufficient-dbinstance-capacity-fault
     (docdb-error)
     common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'insufficient-dbinstance-capacity-fault)))
(common-lisp:progn
 (common-lisp:define-condition insufficient-storage-cluster-capacity-fault
     (docdb-error)
     common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'insufficient-storage-cluster-capacity-fault)))
(common-lisp:deftype integer () 'common-lisp:integer)
(common-lisp:deftype integer-optional () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:define-condition invalid-dbcluster-snapshot-state-fault
     (docdb-error)
     common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'invalid-dbcluster-snapshot-state-fault)))
(common-lisp:progn
 (common-lisp:define-condition invalid-dbcluster-state-fault
     (docdb-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'invalid-dbcluster-state-fault)))
(common-lisp:progn
 (common-lisp:define-condition invalid-dbinstance-state-fault
     (docdb-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'invalid-dbinstance-state-fault)))
(common-lisp:progn
 (common-lisp:define-condition invalid-dbparameter-group-state-fault
     (docdb-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'invalid-dbparameter-group-state-fault)))
(common-lisp:progn
 (common-lisp:define-condition invalid-dbsecurity-group-state-fault
     (docdb-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'invalid-dbsecurity-group-state-fault)))
(common-lisp:progn
 (common-lisp:define-condition invalid-dbsnapshot-state-fault
     (docdb-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'invalid-dbsnapshot-state-fault)))
(common-lisp:progn
 (common-lisp:define-condition invalid-dbsubnet-group-state-fault
     (docdb-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'invalid-dbsubnet-group-state-fault)))
(common-lisp:progn
 (common-lisp:define-condition invalid-dbsubnet-state-fault
     (docdb-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'invalid-dbsubnet-state-fault)))
(common-lisp:progn
 (common-lisp:define-condition invalid-event-subscription-state-fault
     (docdb-error)
     common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'invalid-event-subscription-state-fault)))
(common-lisp:progn
 (common-lisp:define-condition invalid-global-cluster-state-fault
     (docdb-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'invalid-global-cluster-state-fault)))
(common-lisp:progn
 (common-lisp:define-condition invalid-restore-fault
     (docdb-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'invalid-restore-fault)))
(common-lisp:progn
 (common-lisp:define-condition invalid-subnet
     (docdb-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'invalid-subnet)))
(common-lisp:progn
 (common-lisp:define-condition invalid-vpcnetwork-state-fault
     (docdb-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'invalid-vpcnetwork-state-fault)))
(common-lisp:progn
 (common-lisp:define-condition kmskey-not-accessible-fault
     (docdb-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'kmskey-not-accessible-fault)))
(common-lisp:progn
 (common-lisp:deftype key-list () '(trivial-types:proper-list string))
 (common-lisp:defun |make-key-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list string))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass list-tags-for-resource-message common-lisp:nil
                       ((filters :initarg :filters :type
                         (common-lisp:or filter-list common-lisp:null)
                         :accessor %list-tags-for-resource-message-filters
                         :initform common-lisp:nil)
                        (resource-name :initarg :resource-name :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %list-tags-for-resource-message-resource-name
                         :initform
                         (common-lisp:error ":resource-name is required"))))
 (common-lisp:export
  (common-lisp:list 'list-tags-for-resource-message
                    'make-list-tags-for-resource-message))
 (common-lisp:defun make-list-tags-for-resource-message
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key filters resource-name)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-tags-for-resource-message
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-name))
      (common-lisp:list
       (common-lisp:cons "ResourceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filters))
      (common-lisp:list
       (common-lisp:cons "Filters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype log-type-list () '(trivial-types:proper-list string))
 (common-lisp:defun |make-log-type-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list string))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass modify-dbcluster-message common-lisp:nil
                       ((deletion-protection :initarg :deletion-protection
                         :type
                         (common-lisp:or boolean-optional common-lisp:null)
                         :accessor
                         %modify-dbcluster-message-deletion-protection
                         :initform common-lisp:nil)
                        (engine-version :initarg :engine-version :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %modify-dbcluster-message-engine-version :initform
                         common-lisp:nil)
                        (cloudwatch-logs-export-configuration :initarg
                         :cloudwatch-logs-export-configuration :type
                         (common-lisp:or cloudwatch-logs-export-configuration
                                         common-lisp:null)
                         :accessor
                         %modify-dbcluster-message-cloudwatch-logs-export-configuration
                         :initform common-lisp:nil)
                        (preferred-maintenance-window :initarg
                         :preferred-maintenance-window :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %modify-dbcluster-message-preferred-maintenance-window
                         :initform common-lisp:nil)
                        (preferred-backup-window :initarg
                         :preferred-backup-window :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %modify-dbcluster-message-preferred-backup-window
                         :initform common-lisp:nil)
                        (master-user-password :initarg :master-user-password
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         %modify-dbcluster-message-master-user-password
                         :initform common-lisp:nil)
                        (port :initarg :port :type
                         (common-lisp:or integer-optional common-lisp:null)
                         :accessor %modify-dbcluster-message-port :initform
                         common-lisp:nil)
                        (vpc-security-group-ids :initarg
                         :vpc-security-group-ids :type
                         (common-lisp:or vpc-security-group-id-list
                                         common-lisp:null)
                         :accessor
                         %modify-dbcluster-message-vpc-security-group-ids
                         :initform common-lisp:nil)
                        (dbcluster-parameter-group-name :initarg
                         :dbcluster-parameter-group-name :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %modify-dbcluster-message-dbcluster-parameter-group-name
                         :initform common-lisp:nil)
                        (backup-retention-period :initarg
                         :backup-retention-period :type
                         (common-lisp:or integer-optional common-lisp:null)
                         :accessor
                         %modify-dbcluster-message-backup-retention-period
                         :initform common-lisp:nil)
                        (apply-immediately :initarg :apply-immediately :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         %modify-dbcluster-message-apply-immediately :initform
                         common-lisp:nil)
                        (new-dbcluster-identifier :initarg
                         :new-dbcluster-identifier :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %modify-dbcluster-message-new-dbcluster-identifier
                         :initform common-lisp:nil)
                        (dbcluster-identifier :initarg :dbcluster-identifier
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         %modify-dbcluster-message-dbcluster-identifier
                         :initform
                         (common-lisp:error
                          ":dbcluster-identifier is required"))))
 (common-lisp:export
  (common-lisp:list 'modify-dbcluster-message 'make-modify-dbcluster-message))
 (common-lisp:defun make-modify-dbcluster-message
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key deletion-protection engine-version
                     cloudwatch-logs-export-configuration
                     preferred-maintenance-window preferred-backup-window
                     master-user-password port vpc-security-group-ids
                     dbcluster-parameter-group-name backup-retention-period
                     apply-immediately new-dbcluster-identifier
                     dbcluster-identifier)
   (common-lisp:apply #'common-lisp:make-instance 'modify-dbcluster-message
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          modify-dbcluster-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          modify-dbcluster-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dbcluster-identifier))
      (common-lisp:list
       (common-lisp:cons "DBClusterIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'new-dbcluster-identifier))
      (common-lisp:list
       (common-lisp:cons "NewDBClusterIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'apply-immediately))
      (common-lisp:list
       (common-lisp:cons "ApplyImmediately"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'backup-retention-period))
      (common-lisp:list
       (common-lisp:cons "BackupRetentionPeriod"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dbcluster-parameter-group-name))
      (common-lisp:list
       (common-lisp:cons "DBClusterParameterGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'vpc-security-group-ids))
      (common-lisp:list
       (common-lisp:cons "VpcSecurityGroupIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'port))
      (common-lisp:list
       (common-lisp:cons "Port"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'master-user-password))
      (common-lisp:list
       (common-lisp:cons "MasterUserPassword"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'preferred-backup-window))
      (common-lisp:list
       (common-lisp:cons "PreferredBackupWindow"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'preferred-maintenance-window))
      (common-lisp:list
       (common-lisp:cons "PreferredMaintenanceWindow"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cloudwatch-logs-export-configuration))
      (common-lisp:list
       (common-lisp:cons "CloudwatchLogsExportConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'engine-version))
      (common-lisp:list
       (common-lisp:cons "EngineVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'deletion-protection))
      (common-lisp:list
       (common-lisp:cons "DeletionProtection"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          modify-dbcluster-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass modify-dbcluster-parameter-group-message common-lisp:nil
                       ((parameters :initarg :parameters :type
                         (common-lisp:or parameters-list common-lisp:null)
                         :accessor
                         %modify-dbcluster-parameter-group-message-parameters
                         :initform
                         (common-lisp:error ":parameters is required"))
                        (dbcluster-parameter-group-name :initarg
                         :dbcluster-parameter-group-name :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %modify-dbcluster-parameter-group-message-dbcluster-parameter-group-name
                         :initform
                         (common-lisp:error
                          ":dbcluster-parameter-group-name is required"))))
 (common-lisp:export
  (common-lisp:list 'modify-dbcluster-parameter-group-message
                    'make-modify-dbcluster-parameter-group-message))
 (common-lisp:defun make-modify-dbcluster-parameter-group-message
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key parameters
                     dbcluster-parameter-group-name)
   (common-lisp:apply #'common-lisp:make-instance
                      'modify-dbcluster-parameter-group-message
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          modify-dbcluster-parameter-group-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          modify-dbcluster-parameter-group-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dbcluster-parameter-group-name))
      (common-lisp:list
       (common-lisp:cons "DBClusterParameterGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'parameters))
      (common-lisp:list
       (common-lisp:cons "Parameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          modify-dbcluster-parameter-group-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass modify-dbcluster-result common-lisp:nil
                       ((dbcluster :initarg :dbcluster :type
                         (common-lisp:or dbcluster common-lisp:null) :accessor
                         %modify-dbcluster-result-dbcluster :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'modify-dbcluster-result 'make-modify-dbcluster-result))
 (common-lisp:defun make-modify-dbcluster-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key dbcluster)
   (common-lisp:apply #'common-lisp:make-instance 'modify-dbcluster-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          modify-dbcluster-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          modify-dbcluster-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dbcluster))
      (common-lisp:list
       (common-lisp:cons "DBCluster"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          modify-dbcluster-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass modify-dbcluster-snapshot-attribute-message
                       common-lisp:nil
                       ((values-to-remove :initarg :values-to-remove :type
                         (common-lisp:or attribute-value-list common-lisp:null)
                         :accessor
                         %modify-dbcluster-snapshot-attribute-message-values-to-remove
                         :initform common-lisp:nil)
                        (values-to-add :initarg :values-to-add :type
                         (common-lisp:or attribute-value-list common-lisp:null)
                         :accessor
                         %modify-dbcluster-snapshot-attribute-message-values-to-add
                         :initform common-lisp:nil)
                        (attribute-name :initarg :attribute-name :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %modify-dbcluster-snapshot-attribute-message-attribute-name
                         :initform
                         (common-lisp:error ":attribute-name is required"))
                        (dbcluster-snapshot-identifier :initarg
                         :dbcluster-snapshot-identifier :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %modify-dbcluster-snapshot-attribute-message-dbcluster-snapshot-identifier
                         :initform
                         (common-lisp:error
                          ":dbcluster-snapshot-identifier is required"))))
 (common-lisp:export
  (common-lisp:list 'modify-dbcluster-snapshot-attribute-message
                    'make-modify-dbcluster-snapshot-attribute-message))
 (common-lisp:defun make-modify-dbcluster-snapshot-attribute-message
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key values-to-remove values-to-add
                     attribute-name dbcluster-snapshot-identifier)
   (common-lisp:apply #'common-lisp:make-instance
                      'modify-dbcluster-snapshot-attribute-message
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          modify-dbcluster-snapshot-attribute-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          modify-dbcluster-snapshot-attribute-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dbcluster-snapshot-identifier))
      (common-lisp:list
       (common-lisp:cons "DBClusterSnapshotIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'attribute-name))
      (common-lisp:list
       (common-lisp:cons "AttributeName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'values-to-add))
      (common-lisp:list
       (common-lisp:cons "ValuesToAdd"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'values-to-remove))
      (common-lisp:list
       (common-lisp:cons "ValuesToRemove"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          modify-dbcluster-snapshot-attribute-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass modify-dbcluster-snapshot-attribute-result
                       common-lisp:nil
                       ((dbcluster-snapshot-attributes-result :initarg
                         :dbcluster-snapshot-attributes-result :type
                         (common-lisp:or dbcluster-snapshot-attributes-result
                                         common-lisp:null)
                         :accessor
                         %modify-dbcluster-snapshot-attribute-result-dbcluster-snapshot-attributes-result
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'modify-dbcluster-snapshot-attribute-result
                    'make-modify-dbcluster-snapshot-attribute-result))
 (common-lisp:defun make-modify-dbcluster-snapshot-attribute-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key dbcluster-snapshot-attributes-result)
   (common-lisp:apply #'common-lisp:make-instance
                      'modify-dbcluster-snapshot-attribute-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          modify-dbcluster-snapshot-attribute-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          modify-dbcluster-snapshot-attribute-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dbcluster-snapshot-attributes-result))
      (common-lisp:list
       (common-lisp:cons "DBClusterSnapshotAttributesResult"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          modify-dbcluster-snapshot-attribute-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass modify-dbinstance-message common-lisp:nil
                       ((performance-insights-kmskey-id :initarg
                         :performance-insights-kmskey-id :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %modify-dbinstance-message-performance-insights-kmskey-id
                         :initform common-lisp:nil)
                        (enable-performance-insights :initarg
                         :enable-performance-insights :type
                         (common-lisp:or boolean-optional common-lisp:null)
                         :accessor
                         %modify-dbinstance-message-enable-performance-insights
                         :initform common-lisp:nil)
                        (promotion-tier :initarg :promotion-tier :type
                         (common-lisp:or integer-optional common-lisp:null)
                         :accessor %modify-dbinstance-message-promotion-tier
                         :initform common-lisp:nil)
                        (copy-tags-to-snapshot :initarg :copy-tags-to-snapshot
                         :type
                         (common-lisp:or boolean-optional common-lisp:null)
                         :accessor
                         %modify-dbinstance-message-copy-tags-to-snapshot
                         :initform common-lisp:nil)
                        (cacertificate-identifier :initarg
                         :cacertificate-identifier :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %modify-dbinstance-message-cacertificate-identifier
                         :initform common-lisp:nil)
                        (new-dbinstance-identifier :initarg
                         :new-dbinstance-identifier :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %modify-dbinstance-message-new-dbinstance-identifier
                         :initform common-lisp:nil)
                        (auto-minor-version-upgrade :initarg
                         :auto-minor-version-upgrade :type
                         (common-lisp:or boolean-optional common-lisp:null)
                         :accessor
                         %modify-dbinstance-message-auto-minor-version-upgrade
                         :initform common-lisp:nil)
                        (preferred-maintenance-window :initarg
                         :preferred-maintenance-window :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %modify-dbinstance-message-preferred-maintenance-window
                         :initform common-lisp:nil)
                        (apply-immediately :initarg :apply-immediately :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         %modify-dbinstance-message-apply-immediately :initform
                         common-lisp:nil)
                        (dbinstance-class :initarg :dbinstance-class :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %modify-dbinstance-message-dbinstance-class :initform
                         common-lisp:nil)
                        (dbinstance-identifier :initarg :dbinstance-identifier
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         %modify-dbinstance-message-dbinstance-identifier
                         :initform
                         (common-lisp:error
                          ":dbinstance-identifier is required"))))
 (common-lisp:export
  (common-lisp:list 'modify-dbinstance-message
                    'make-modify-dbinstance-message))
 (common-lisp:defun make-modify-dbinstance-message
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key performance-insights-kmskey-id
                     enable-performance-insights promotion-tier
                     copy-tags-to-snapshot cacertificate-identifier
                     new-dbinstance-identifier auto-minor-version-upgrade
                     preferred-maintenance-window apply-immediately
                     dbinstance-class dbinstance-identifier)
   (common-lisp:apply #'common-lisp:make-instance 'modify-dbinstance-message
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          modify-dbinstance-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          modify-dbinstance-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dbinstance-identifier))
      (common-lisp:list
       (common-lisp:cons "DBInstanceIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dbinstance-class))
      (common-lisp:list
       (common-lisp:cons "DBInstanceClass"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'apply-immediately))
      (common-lisp:list
       (common-lisp:cons "ApplyImmediately"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'preferred-maintenance-window))
      (common-lisp:list
       (common-lisp:cons "PreferredMaintenanceWindow"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'auto-minor-version-upgrade))
      (common-lisp:list
       (common-lisp:cons "AutoMinorVersionUpgrade"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'new-dbinstance-identifier))
      (common-lisp:list
       (common-lisp:cons "NewDBInstanceIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cacertificate-identifier))
      (common-lisp:list
       (common-lisp:cons "CACertificateIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'copy-tags-to-snapshot))
      (common-lisp:list
       (common-lisp:cons "CopyTagsToSnapshot"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'promotion-tier))
      (common-lisp:list
       (common-lisp:cons "PromotionTier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'enable-performance-insights))
      (common-lisp:list
       (common-lisp:cons "EnablePerformanceInsights"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'performance-insights-kmskey-id))
      (common-lisp:list
       (common-lisp:cons "PerformanceInsightsKMSKeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          modify-dbinstance-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass modify-dbinstance-result common-lisp:nil
                       ((dbinstance :initarg :dbinstance :type
                         (common-lisp:or dbinstance common-lisp:null) :accessor
                         %modify-dbinstance-result-dbinstance :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'modify-dbinstance-result 'make-modify-dbinstance-result))
 (common-lisp:defun make-modify-dbinstance-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key dbinstance)
   (common-lisp:apply #'common-lisp:make-instance 'modify-dbinstance-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          modify-dbinstance-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          modify-dbinstance-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dbinstance))
      (common-lisp:list
       (common-lisp:cons "DBInstance"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          modify-dbinstance-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass modify-dbsubnet-group-message common-lisp:nil
                       ((subnet-ids :initarg :subnet-ids :type
                         (common-lisp:or subnet-identifier-list
                                         common-lisp:null)
                         :accessor %modify-dbsubnet-group-message-subnet-ids
                         :initform
                         (common-lisp:error ":subnet-ids is required"))
                        (dbsubnet-group-description :initarg
                         :dbsubnet-group-description :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %modify-dbsubnet-group-message-dbsubnet-group-description
                         :initform common-lisp:nil)
                        (dbsubnet-group-name :initarg :dbsubnet-group-name
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         %modify-dbsubnet-group-message-dbsubnet-group-name
                         :initform
                         (common-lisp:error
                          ":dbsubnet-group-name is required"))))
 (common-lisp:export
  (common-lisp:list 'modify-dbsubnet-group-message
                    'make-modify-dbsubnet-group-message))
 (common-lisp:defun make-modify-dbsubnet-group-message
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key subnet-ids dbsubnet-group-description
                     dbsubnet-group-name)
   (common-lisp:apply #'common-lisp:make-instance
                      'modify-dbsubnet-group-message
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          modify-dbsubnet-group-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          modify-dbsubnet-group-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dbsubnet-group-name))
      (common-lisp:list
       (common-lisp:cons "DBSubnetGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dbsubnet-group-description))
      (common-lisp:list
       (common-lisp:cons "DBSubnetGroupDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subnet-ids))
      (common-lisp:list
       (common-lisp:cons "SubnetIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          modify-dbsubnet-group-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass modify-dbsubnet-group-result common-lisp:nil
                       ((dbsubnet-group :initarg :dbsubnet-group :type
                         (common-lisp:or dbsubnet-group common-lisp:null)
                         :accessor %modify-dbsubnet-group-result-dbsubnet-group
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'modify-dbsubnet-group-result
                    'make-modify-dbsubnet-group-result))
 (common-lisp:defun make-modify-dbsubnet-group-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key dbsubnet-group)
   (common-lisp:apply #'common-lisp:make-instance 'modify-dbsubnet-group-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          modify-dbsubnet-group-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          modify-dbsubnet-group-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dbsubnet-group))
      (common-lisp:list
       (common-lisp:cons "DBSubnetGroup"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          modify-dbsubnet-group-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass modify-event-subscription-message common-lisp:nil
                       ((enabled :initarg :enabled :type
                         (common-lisp:or boolean-optional common-lisp:null)
                         :accessor %modify-event-subscription-message-enabled
                         :initform common-lisp:nil)
                        (event-categories :initarg :event-categories :type
                         (common-lisp:or event-categories-list
                                         common-lisp:null)
                         :accessor
                         %modify-event-subscription-message-event-categories
                         :initform common-lisp:nil)
                        (source-type :initarg :source-type :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %modify-event-subscription-message-source-type
                         :initform common-lisp:nil)
                        (sns-topic-arn :initarg :sns-topic-arn :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %modify-event-subscription-message-sns-topic-arn
                         :initform common-lisp:nil)
                        (subscription-name :initarg :subscription-name :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %modify-event-subscription-message-subscription-name
                         :initform
                         (common-lisp:error
                          ":subscription-name is required"))))
 (common-lisp:export
  (common-lisp:list 'modify-event-subscription-message
                    'make-modify-event-subscription-message))
 (common-lisp:defun make-modify-event-subscription-message
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key enabled event-categories source-type
                     sns-topic-arn subscription-name)
   (common-lisp:apply #'common-lisp:make-instance
                      'modify-event-subscription-message
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          modify-event-subscription-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          modify-event-subscription-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subscription-name))
      (common-lisp:list
       (common-lisp:cons "SubscriptionName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sns-topic-arn))
      (common-lisp:list
       (common-lisp:cons "SnsTopicArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-type))
      (common-lisp:list
       (common-lisp:cons "SourceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'event-categories))
      (common-lisp:list
       (common-lisp:cons "EventCategories"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'enabled))
      (common-lisp:list
       (common-lisp:cons "Enabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          modify-event-subscription-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass modify-event-subscription-result common-lisp:nil
                       ((event-subscription :initarg :event-subscription :type
                         (common-lisp:or event-subscription common-lisp:null)
                         :accessor
                         %modify-event-subscription-result-event-subscription
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'modify-event-subscription-result
                    'make-modify-event-subscription-result))
 (common-lisp:defun make-modify-event-subscription-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key event-subscription)
   (common-lisp:apply #'common-lisp:make-instance
                      'modify-event-subscription-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          modify-event-subscription-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          modify-event-subscription-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'event-subscription))
      (common-lisp:list
       (common-lisp:cons "EventSubscription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          modify-event-subscription-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass modify-global-cluster-message common-lisp:nil
                       ((deletion-protection :initarg :deletion-protection
                         :type
                         (common-lisp:or boolean-optional common-lisp:null)
                         :accessor
                         %modify-global-cluster-message-deletion-protection
                         :initform common-lisp:nil)
                        (new-global-cluster-identifier :initarg
                         :new-global-cluster-identifier :type
                         (common-lisp:or global-cluster-identifier
                                         common-lisp:null)
                         :accessor
                         %modify-global-cluster-message-new-global-cluster-identifier
                         :initform common-lisp:nil)
                        (global-cluster-identifier :initarg
                         :global-cluster-identifier :type
                         (common-lisp:or global-cluster-identifier
                                         common-lisp:null)
                         :accessor
                         %modify-global-cluster-message-global-cluster-identifier
                         :initform
                         (common-lisp:error
                          ":global-cluster-identifier is required"))))
 (common-lisp:export
  (common-lisp:list 'modify-global-cluster-message
                    'make-modify-global-cluster-message))
 (common-lisp:defun make-modify-global-cluster-message
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key deletion-protection
                     new-global-cluster-identifier global-cluster-identifier)
   (common-lisp:apply #'common-lisp:make-instance
                      'modify-global-cluster-message
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          modify-global-cluster-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          modify-global-cluster-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'global-cluster-identifier))
      (common-lisp:list
       (common-lisp:cons "GlobalClusterIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'new-global-cluster-identifier))
      (common-lisp:list
       (common-lisp:cons "NewGlobalClusterIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'deletion-protection))
      (common-lisp:list
       (common-lisp:cons "DeletionProtection"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          modify-global-cluster-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass modify-global-cluster-result common-lisp:nil
                       ((global-cluster :initarg :global-cluster :type
                         (common-lisp:or global-cluster common-lisp:null)
                         :accessor %modify-global-cluster-result-global-cluster
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'modify-global-cluster-result
                    'make-modify-global-cluster-result))
 (common-lisp:defun make-modify-global-cluster-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key global-cluster)
   (common-lisp:apply #'common-lisp:make-instance 'modify-global-cluster-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          modify-global-cluster-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          modify-global-cluster-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'global-cluster))
      (common-lisp:list
       (common-lisp:cons "GlobalCluster"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          modify-global-cluster-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass orderable-dbinstance-option common-lisp:nil
                       ((vpc :initarg :vpc :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         %orderable-dbinstance-option-vpc :initform
                         common-lisp:nil)
                        (availability-zones :initarg :availability-zones :type
                         (common-lisp:or availability-zone-list
                                         common-lisp:null)
                         :accessor
                         %orderable-dbinstance-option-availability-zones
                         :initform common-lisp:nil)
                        (license-model :initarg :license-model :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %orderable-dbinstance-option-license-model :initform
                         common-lisp:nil)
                        (dbinstance-class :initarg :dbinstance-class :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %orderable-dbinstance-option-dbinstance-class
                         :initform common-lisp:nil)
                        (engine-version :initarg :engine-version :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %orderable-dbinstance-option-engine-version :initform
                         common-lisp:nil)
                        (engine :initarg :engine :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %orderable-dbinstance-option-engine :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'orderable-dbinstance-option
                    'make-orderable-dbinstance-option))
 (common-lisp:defun make-orderable-dbinstance-option
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key vpc availability-zones license-model
                     dbinstance-class engine-version engine)
   (common-lisp:apply #'common-lisp:make-instance 'orderable-dbinstance-option
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          orderable-dbinstance-option))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          orderable-dbinstance-option))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'engine))
      (common-lisp:list
       (common-lisp:cons "Engine"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'engine-version))
      (common-lisp:list
       (common-lisp:cons "EngineVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dbinstance-class))
      (common-lisp:list
       (common-lisp:cons "DBInstanceClass"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'license-model))
      (common-lisp:list
       (common-lisp:cons "LicenseModel"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'availability-zones))
      (common-lisp:list
       (common-lisp:cons "AvailabilityZones"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpc))
      (common-lisp:list
       (common-lisp:cons "Vpc"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          orderable-dbinstance-option))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype orderable-dbinstance-options-list ()
   '(trivial-types:proper-list orderable-dbinstance-option))
 (common-lisp:defun |make-orderable-dbinstance-options-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            orderable-dbinstance-option))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass orderable-dbinstance-options-message common-lisp:nil
                       ((marker :initarg :marker :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %orderable-dbinstance-options-message-marker :initform
                         common-lisp:nil)
                        (orderable-dbinstance-options :initarg
                         :orderable-dbinstance-options :type
                         (common-lisp:or orderable-dbinstance-options-list
                                         common-lisp:null)
                         :accessor
                         %orderable-dbinstance-options-message-orderable-dbinstance-options
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'orderable-dbinstance-options-message
                    'make-orderable-dbinstance-options-message))
 (common-lisp:defun make-orderable-dbinstance-options-message
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key marker orderable-dbinstance-options)
   (common-lisp:apply #'common-lisp:make-instance
                      'orderable-dbinstance-options-message
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          orderable-dbinstance-options-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          orderable-dbinstance-options-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'orderable-dbinstance-options))
      (common-lisp:list
       (common-lisp:cons "OrderableDBInstanceOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          orderable-dbinstance-options-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass parameter common-lisp:nil
                       ((apply-method :initarg :apply-method :type
                         (common-lisp:or apply-method common-lisp:null)
                         :accessor %parameter-apply-method :initform
                         common-lisp:nil)
                        (minimum-engine-version :initarg
                         :minimum-engine-version :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %parameter-minimum-engine-version :initform
                         common-lisp:nil)
                        (is-modifiable :initarg :is-modifiable :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         %parameter-is-modifiable :initform common-lisp:nil)
                        (allowed-values :initarg :allowed-values :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %parameter-allowed-values :initform common-lisp:nil)
                        (data-type :initarg :data-type :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %parameter-data-type :initform common-lisp:nil)
                        (apply-type :initarg :apply-type :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %parameter-apply-type :initform common-lisp:nil)
                        (source :initarg :source :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %parameter-source :initform common-lisp:nil)
                        (description :initarg :description :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %parameter-description :initform common-lisp:nil)
                        (parameter-value :initarg :parameter-value :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %parameter-parameter-value :initform common-lisp:nil)
                        (parameter-name :initarg :parameter-name :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %parameter-parameter-name :initform common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'parameter 'make-parameter))
 (common-lisp:defun make-parameter
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key apply-method minimum-engine-version
                     is-modifiable allowed-values data-type apply-type source
                     description parameter-value parameter-name)
   (common-lisp:apply #'common-lisp:make-instance 'parameter
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input parameter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input parameter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'parameter-name))
      (common-lisp:list
       (common-lisp:cons "ParameterName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'parameter-value))
      (common-lisp:list
       (common-lisp:cons "ParameterValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source))
      (common-lisp:list
       (common-lisp:cons "Source"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'apply-type))
      (common-lisp:list
       (common-lisp:cons "ApplyType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-type))
      (common-lisp:list
       (common-lisp:cons "DataType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'allowed-values))
      (common-lisp:list
       (common-lisp:cons "AllowedValues"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'is-modifiable))
      (common-lisp:list
       (common-lisp:cons "IsModifiable"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'minimum-engine-version))
      (common-lisp:list
       (common-lisp:cons "MinimumEngineVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'apply-method))
      (common-lisp:list
       (common-lisp:cons "ApplyMethod"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input parameter))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype parameters-list ()
   '(trivial-types:proper-list parameter))
 (common-lisp:defun |make-parameters-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list parameter))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass pending-cloudwatch-logs-exports common-lisp:nil
                       ((log-types-to-disable :initarg :log-types-to-disable
                         :type (common-lisp:or log-type-list common-lisp:null)
                         :accessor
                         %pending-cloudwatch-logs-exports-log-types-to-disable
                         :initform common-lisp:nil)
                        (log-types-to-enable :initarg :log-types-to-enable
                         :type (common-lisp:or log-type-list common-lisp:null)
                         :accessor
                         %pending-cloudwatch-logs-exports-log-types-to-enable
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'pending-cloudwatch-logs-exports
                    'make-pending-cloudwatch-logs-exports))
 (common-lisp:defun make-pending-cloudwatch-logs-exports
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key log-types-to-disable log-types-to-enable)
   (common-lisp:apply #'common-lisp:make-instance
                      'pending-cloudwatch-logs-exports
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          pending-cloudwatch-logs-exports))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          pending-cloudwatch-logs-exports))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'log-types-to-enable))
      (common-lisp:list
       (common-lisp:cons "LogTypesToEnable"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'log-types-to-disable))
      (common-lisp:list
       (common-lisp:cons "LogTypesToDisable"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          pending-cloudwatch-logs-exports))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass pending-maintenance-action common-lisp:nil
                       ((description :initarg :description :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %pending-maintenance-action-description :initform
                         common-lisp:nil)
                        (current-apply-date :initarg :current-apply-date :type
                         (common-lisp:or tstamp common-lisp:null) :accessor
                         %pending-maintenance-action-current-apply-date
                         :initform common-lisp:nil)
                        (opt-in-status :initarg :opt-in-status :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %pending-maintenance-action-opt-in-status :initform
                         common-lisp:nil)
                        (forced-apply-date :initarg :forced-apply-date :type
                         (common-lisp:or tstamp common-lisp:null) :accessor
                         %pending-maintenance-action-forced-apply-date
                         :initform common-lisp:nil)
                        (auto-applied-after-date :initarg
                         :auto-applied-after-date :type
                         (common-lisp:or tstamp common-lisp:null) :accessor
                         %pending-maintenance-action-auto-applied-after-date
                         :initform common-lisp:nil)
                        (action :initarg :action :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %pending-maintenance-action-action :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'pending-maintenance-action
                    'make-pending-maintenance-action))
 (common-lisp:defun make-pending-maintenance-action
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key description current-apply-date
                     opt-in-status forced-apply-date auto-applied-after-date
                     action)
   (common-lisp:apply #'common-lisp:make-instance 'pending-maintenance-action
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          pending-maintenance-action))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          pending-maintenance-action))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'action))
      (common-lisp:list
       (common-lisp:cons "Action"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'auto-applied-after-date))
      (common-lisp:list
       (common-lisp:cons "AutoAppliedAfterDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'forced-apply-date))
      (common-lisp:list
       (common-lisp:cons "ForcedApplyDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'opt-in-status))
      (common-lisp:list
       (common-lisp:cons "OptInStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'current-apply-date))
      (common-lisp:list
       (common-lisp:cons "CurrentApplyDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          pending-maintenance-action))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype pending-maintenance-action-details ()
   '(trivial-types:proper-list pending-maintenance-action))
 (common-lisp:defun |make-pending-maintenance-action-details|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            pending-maintenance-action))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype pending-maintenance-actions ()
   '(trivial-types:proper-list resource-pending-maintenance-actions))
 (common-lisp:defun |make-pending-maintenance-actions|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            resource-pending-maintenance-actions))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass pending-maintenance-actions-message common-lisp:nil
                       ((marker :initarg :marker :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %pending-maintenance-actions-message-marker :initform
                         common-lisp:nil)
                        (pending-maintenance-actions :initarg
                         :pending-maintenance-actions :type
                         (common-lisp:or pending-maintenance-actions
                                         common-lisp:null)
                         :accessor
                         %pending-maintenance-actions-message-pending-maintenance-actions
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'pending-maintenance-actions-message
                    'make-pending-maintenance-actions-message))
 (common-lisp:defun make-pending-maintenance-actions-message
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key marker pending-maintenance-actions)
   (common-lisp:apply #'common-lisp:make-instance
                      'pending-maintenance-actions-message
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          pending-maintenance-actions-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          pending-maintenance-actions-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'pending-maintenance-actions))
      (common-lisp:list
       (common-lisp:cons "PendingMaintenanceActions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          pending-maintenance-actions-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass pending-modified-values common-lisp:nil
                       ((pending-cloudwatch-logs-exports :initarg
                         :pending-cloudwatch-logs-exports :type
                         (common-lisp:or pending-cloudwatch-logs-exports
                                         common-lisp:null)
                         :accessor
                         %pending-modified-values-pending-cloudwatch-logs-exports
                         :initform common-lisp:nil)
                        (dbsubnet-group-name :initarg :dbsubnet-group-name
                         :type (common-lisp:or string common-lisp:null)
                         :accessor %pending-modified-values-dbsubnet-group-name
                         :initform common-lisp:nil)
                        (cacertificate-identifier :initarg
                         :cacertificate-identifier :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %pending-modified-values-cacertificate-identifier
                         :initform common-lisp:nil)
                        (storage-type :initarg :storage-type :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %pending-modified-values-storage-type :initform
                         common-lisp:nil)
                        (dbinstance-identifier :initarg :dbinstance-identifier
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         %pending-modified-values-dbinstance-identifier
                         :initform common-lisp:nil)
                        (iops :initarg :iops :type
                         (common-lisp:or integer-optional common-lisp:null)
                         :accessor %pending-modified-values-iops :initform
                         common-lisp:nil)
                        (license-model :initarg :license-model :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %pending-modified-values-license-model :initform
                         common-lisp:nil)
                        (engine-version :initarg :engine-version :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %pending-modified-values-engine-version :initform
                         common-lisp:nil)
                        (multi-az :initarg :multi-az :type
                         (common-lisp:or boolean-optional common-lisp:null)
                         :accessor %pending-modified-values-multi-az :initform
                         common-lisp:nil)
                        (backup-retention-period :initarg
                         :backup-retention-period :type
                         (common-lisp:or integer-optional common-lisp:null)
                         :accessor
                         %pending-modified-values-backup-retention-period
                         :initform common-lisp:nil)
                        (port :initarg :port :type
                         (common-lisp:or integer-optional common-lisp:null)
                         :accessor %pending-modified-values-port :initform
                         common-lisp:nil)
                        (master-user-password :initarg :master-user-password
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         %pending-modified-values-master-user-password
                         :initform common-lisp:nil)
                        (allocated-storage :initarg :allocated-storage :type
                         (common-lisp:or integer-optional common-lisp:null)
                         :accessor %pending-modified-values-allocated-storage
                         :initform common-lisp:nil)
                        (dbinstance-class :initarg :dbinstance-class :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %pending-modified-values-dbinstance-class :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'pending-modified-values 'make-pending-modified-values))
 (common-lisp:defun make-pending-modified-values
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key pending-cloudwatch-logs-exports
                     dbsubnet-group-name cacertificate-identifier storage-type
                     dbinstance-identifier iops license-model engine-version
                     multi-az backup-retention-period port master-user-password
                     allocated-storage dbinstance-class)
   (common-lisp:apply #'common-lisp:make-instance 'pending-modified-values
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          pending-modified-values))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          pending-modified-values))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dbinstance-class))
      (common-lisp:list
       (common-lisp:cons "DBInstanceClass"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'allocated-storage))
      (common-lisp:list
       (common-lisp:cons "AllocatedStorage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'master-user-password))
      (common-lisp:list
       (common-lisp:cons "MasterUserPassword"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'port))
      (common-lisp:list
       (common-lisp:cons "Port"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'backup-retention-period))
      (common-lisp:list
       (common-lisp:cons "BackupRetentionPeriod"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'multi-az))
      (common-lisp:list
       (common-lisp:cons "MultiAZ"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'engine-version))
      (common-lisp:list
       (common-lisp:cons "EngineVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'license-model))
      (common-lisp:list
       (common-lisp:cons "LicenseModel"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'iops))
      (common-lisp:list
       (common-lisp:cons "Iops"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dbinstance-identifier))
      (common-lisp:list
       (common-lisp:cons "DBInstanceIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'storage-type))
      (common-lisp:list
       (common-lisp:cons "StorageType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cacertificate-identifier))
      (common-lisp:list
       (common-lisp:cons "CACertificateIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dbsubnet-group-name))
      (common-lisp:list
       (common-lisp:cons "DBSubnetGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'pending-cloudwatch-logs-exports))
      (common-lisp:list
       (common-lisp:cons "PendingCloudwatchLogsExports"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          pending-modified-values))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype read-replica-identifier-list ()
   '(trivial-types:proper-list string))
 (common-lisp:defun |make-read-replica-identifier-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list string))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype readers-arn-list () '(trivial-types:proper-list string))
 (common-lisp:defun |make-readers-arn-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list string))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass reboot-dbinstance-message common-lisp:nil
                       ((force-failover :initarg :force-failover :type
                         (common-lisp:or boolean-optional common-lisp:null)
                         :accessor %reboot-dbinstance-message-force-failover
                         :initform common-lisp:nil)
                        (dbinstance-identifier :initarg :dbinstance-identifier
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         %reboot-dbinstance-message-dbinstance-identifier
                         :initform
                         (common-lisp:error
                          ":dbinstance-identifier is required"))))
 (common-lisp:export
  (common-lisp:list 'reboot-dbinstance-message
                    'make-reboot-dbinstance-message))
 (common-lisp:defun make-reboot-dbinstance-message
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key force-failover dbinstance-identifier)
   (common-lisp:apply #'common-lisp:make-instance 'reboot-dbinstance-message
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          reboot-dbinstance-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          reboot-dbinstance-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dbinstance-identifier))
      (common-lisp:list
       (common-lisp:cons "DBInstanceIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'force-failover))
      (common-lisp:list
       (common-lisp:cons "ForceFailover"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          reboot-dbinstance-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass reboot-dbinstance-result common-lisp:nil
                       ((dbinstance :initarg :dbinstance :type
                         (common-lisp:or dbinstance common-lisp:null) :accessor
                         %reboot-dbinstance-result-dbinstance :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'reboot-dbinstance-result 'make-reboot-dbinstance-result))
 (common-lisp:defun make-reboot-dbinstance-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key dbinstance)
   (common-lisp:apply #'common-lisp:make-instance 'reboot-dbinstance-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          reboot-dbinstance-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          reboot-dbinstance-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dbinstance))
      (common-lisp:list
       (common-lisp:cons "DBInstance"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          reboot-dbinstance-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass remove-from-global-cluster-message common-lisp:nil
                       ((db-cluster-identifier :initarg :db-cluster-identifier
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         %remove-from-global-cluster-message-db-cluster-identifier
                         :initform
                         (common-lisp:error
                          ":db-cluster-identifier is required"))
                        (global-cluster-identifier :initarg
                         :global-cluster-identifier :type
                         (common-lisp:or global-cluster-identifier
                                         common-lisp:null)
                         :accessor
                         %remove-from-global-cluster-message-global-cluster-identifier
                         :initform
                         (common-lisp:error
                          ":global-cluster-identifier is required"))))
 (common-lisp:export
  (common-lisp:list 'remove-from-global-cluster-message
                    'make-remove-from-global-cluster-message))
 (common-lisp:defun make-remove-from-global-cluster-message
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key db-cluster-identifier
                     global-cluster-identifier)
   (common-lisp:apply #'common-lisp:make-instance
                      'remove-from-global-cluster-message
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          remove-from-global-cluster-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          remove-from-global-cluster-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'global-cluster-identifier))
      (common-lisp:list
       (common-lisp:cons "GlobalClusterIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'db-cluster-identifier))
      (common-lisp:list
       (common-lisp:cons "DbClusterIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          remove-from-global-cluster-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass remove-from-global-cluster-result common-lisp:nil
                       ((global-cluster :initarg :global-cluster :type
                         (common-lisp:or global-cluster common-lisp:null)
                         :accessor
                         %remove-from-global-cluster-result-global-cluster
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'remove-from-global-cluster-result
                    'make-remove-from-global-cluster-result))
 (common-lisp:defun make-remove-from-global-cluster-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key global-cluster)
   (common-lisp:apply #'common-lisp:make-instance
                      'remove-from-global-cluster-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          remove-from-global-cluster-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          remove-from-global-cluster-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'global-cluster))
      (common-lisp:list
       (common-lisp:cons "GlobalCluster"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          remove-from-global-cluster-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass remove-source-identifier-from-subscription-message
                       common-lisp:nil
                       ((source-identifier :initarg :source-identifier :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %remove-source-identifier-from-subscription-message-source-identifier
                         :initform
                         (common-lisp:error ":source-identifier is required"))
                        (subscription-name :initarg :subscription-name :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %remove-source-identifier-from-subscription-message-subscription-name
                         :initform
                         (common-lisp:error
                          ":subscription-name is required"))))
 (common-lisp:export
  (common-lisp:list 'remove-source-identifier-from-subscription-message
                    'make-remove-source-identifier-from-subscription-message))
 (common-lisp:defun make-remove-source-identifier-from-subscription-message
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key source-identifier subscription-name)
   (common-lisp:apply #'common-lisp:make-instance
                      'remove-source-identifier-from-subscription-message
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          remove-source-identifier-from-subscription-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          remove-source-identifier-from-subscription-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subscription-name))
      (common-lisp:list
       (common-lisp:cons "SubscriptionName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-identifier))
      (common-lisp:list
       (common-lisp:cons "SourceIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          remove-source-identifier-from-subscription-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass remove-source-identifier-from-subscription-result
                       common-lisp:nil
                       ((event-subscription :initarg :event-subscription :type
                         (common-lisp:or event-subscription common-lisp:null)
                         :accessor
                         %remove-source-identifier-from-subscription-result-event-subscription
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'remove-source-identifier-from-subscription-result
                    'make-remove-source-identifier-from-subscription-result))
 (common-lisp:defun make-remove-source-identifier-from-subscription-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key event-subscription)
   (common-lisp:apply #'common-lisp:make-instance
                      'remove-source-identifier-from-subscription-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          remove-source-identifier-from-subscription-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          remove-source-identifier-from-subscription-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'event-subscription))
      (common-lisp:list
       (common-lisp:cons "EventSubscription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          remove-source-identifier-from-subscription-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass remove-tags-from-resource-message common-lisp:nil
                       ((tag-keys :initarg :tag-keys :type
                         (common-lisp:or key-list common-lisp:null) :accessor
                         %remove-tags-from-resource-message-tag-keys :initform
                         (common-lisp:error ":tag-keys is required"))
                        (resource-name :initarg :resource-name :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %remove-tags-from-resource-message-resource-name
                         :initform
                         (common-lisp:error ":resource-name is required"))))
 (common-lisp:export
  (common-lisp:list 'remove-tags-from-resource-message
                    'make-remove-tags-from-resource-message))
 (common-lisp:defun make-remove-tags-from-resource-message
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tag-keys resource-name)
   (common-lisp:apply #'common-lisp:make-instance
                      'remove-tags-from-resource-message
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          remove-tags-from-resource-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          remove-tags-from-resource-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-name))
      (common-lisp:list
       (common-lisp:cons "ResourceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tag-keys))
      (common-lisp:list
       (common-lisp:cons "TagKeys"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          remove-tags-from-resource-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass reset-dbcluster-parameter-group-message common-lisp:nil
                       ((parameters :initarg :parameters :type
                         (common-lisp:or parameters-list common-lisp:null)
                         :accessor
                         %reset-dbcluster-parameter-group-message-parameters
                         :initform common-lisp:nil)
                        (reset-all-parameters :initarg :reset-all-parameters
                         :type (common-lisp:or boolean common-lisp:null)
                         :accessor
                         %reset-dbcluster-parameter-group-message-reset-all-parameters
                         :initform common-lisp:nil)
                        (dbcluster-parameter-group-name :initarg
                         :dbcluster-parameter-group-name :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %reset-dbcluster-parameter-group-message-dbcluster-parameter-group-name
                         :initform
                         (common-lisp:error
                          ":dbcluster-parameter-group-name is required"))))
 (common-lisp:export
  (common-lisp:list 'reset-dbcluster-parameter-group-message
                    'make-reset-dbcluster-parameter-group-message))
 (common-lisp:defun make-reset-dbcluster-parameter-group-message
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key parameters reset-all-parameters
                     dbcluster-parameter-group-name)
   (common-lisp:apply #'common-lisp:make-instance
                      'reset-dbcluster-parameter-group-message
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          reset-dbcluster-parameter-group-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          reset-dbcluster-parameter-group-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dbcluster-parameter-group-name))
      (common-lisp:list
       (common-lisp:cons "DBClusterParameterGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'reset-all-parameters))
      (common-lisp:list
       (common-lisp:cons "ResetAllParameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'parameters))
      (common-lisp:list
       (common-lisp:cons "Parameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          reset-dbcluster-parameter-group-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition resource-not-found-fault
     (docdb-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'resource-not-found-fault)))
(common-lisp:progn
 (common-lisp:defclass resource-pending-maintenance-actions common-lisp:nil
                       ((pending-maintenance-action-details :initarg
                         :pending-maintenance-action-details :type
                         (common-lisp:or pending-maintenance-action-details
                                         common-lisp:null)
                         :accessor
                         %resource-pending-maintenance-actions-pending-maintenance-action-details
                         :initform common-lisp:nil)
                        (resource-identifier :initarg :resource-identifier
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         %resource-pending-maintenance-actions-resource-identifier
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'resource-pending-maintenance-actions
                    'make-resource-pending-maintenance-actions))
 (common-lisp:defun make-resource-pending-maintenance-actions
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key pending-maintenance-action-details
                     resource-identifier)
   (common-lisp:apply #'common-lisp:make-instance
                      'resource-pending-maintenance-actions
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          resource-pending-maintenance-actions))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          resource-pending-maintenance-actions))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-identifier))
      (common-lisp:list
       (common-lisp:cons "ResourceIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'pending-maintenance-action-details))
      (common-lisp:list
       (common-lisp:cons "PendingMaintenanceActionDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          resource-pending-maintenance-actions))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass restore-dbcluster-from-snapshot-message common-lisp:nil
                       ((dbcluster-parameter-group-name :initarg
                         :dbcluster-parameter-group-name :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %restore-dbcluster-from-snapshot-message-dbcluster-parameter-group-name
                         :initform common-lisp:nil)
                        (deletion-protection :initarg :deletion-protection
                         :type
                         (common-lisp:or boolean-optional common-lisp:null)
                         :accessor
                         %restore-dbcluster-from-snapshot-message-deletion-protection
                         :initform common-lisp:nil)
                        (enable-cloudwatch-logs-exports :initarg
                         :enable-cloudwatch-logs-exports :type
                         (common-lisp:or log-type-list common-lisp:null)
                         :accessor
                         %restore-dbcluster-from-snapshot-message-enable-cloudwatch-logs-exports
                         :initform common-lisp:nil)
                        (kms-key-id :initarg :kms-key-id :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %restore-dbcluster-from-snapshot-message-kms-key-id
                         :initform common-lisp:nil)
                        (tags :initarg :tags :type
                         (common-lisp:or tag-list common-lisp:null) :accessor
                         %restore-dbcluster-from-snapshot-message-tags
                         :initform common-lisp:nil)
                        (vpc-security-group-ids :initarg
                         :vpc-security-group-ids :type
                         (common-lisp:or vpc-security-group-id-list
                                         common-lisp:null)
                         :accessor
                         %restore-dbcluster-from-snapshot-message-vpc-security-group-ids
                         :initform common-lisp:nil)
                        (dbsubnet-group-name :initarg :dbsubnet-group-name
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         %restore-dbcluster-from-snapshot-message-dbsubnet-group-name
                         :initform common-lisp:nil)
                        (port :initarg :port :type
                         (common-lisp:or integer-optional common-lisp:null)
                         :accessor
                         %restore-dbcluster-from-snapshot-message-port
                         :initform common-lisp:nil)
                        (engine-version :initarg :engine-version :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %restore-dbcluster-from-snapshot-message-engine-version
                         :initform common-lisp:nil)
                        (engine :initarg :engine :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %restore-dbcluster-from-snapshot-message-engine
                         :initform (common-lisp:error ":engine is required"))
                        (snapshot-identifier :initarg :snapshot-identifier
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         %restore-dbcluster-from-snapshot-message-snapshot-identifier
                         :initform
                         (common-lisp:error
                          ":snapshot-identifier is required"))
                        (dbcluster-identifier :initarg :dbcluster-identifier
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         %restore-dbcluster-from-snapshot-message-dbcluster-identifier
                         :initform
                         (common-lisp:error
                          ":dbcluster-identifier is required"))
                        (availability-zones :initarg :availability-zones :type
                         (common-lisp:or availability-zones common-lisp:null)
                         :accessor
                         %restore-dbcluster-from-snapshot-message-availability-zones
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'restore-dbcluster-from-snapshot-message
                    'make-restore-dbcluster-from-snapshot-message))
 (common-lisp:defun make-restore-dbcluster-from-snapshot-message
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key dbcluster-parameter-group-name
                     deletion-protection enable-cloudwatch-logs-exports
                     kms-key-id tags vpc-security-group-ids dbsubnet-group-name
                     port engine-version engine snapshot-identifier
                     dbcluster-identifier availability-zones)
   (common-lisp:apply #'common-lisp:make-instance
                      'restore-dbcluster-from-snapshot-message
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          restore-dbcluster-from-snapshot-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          restore-dbcluster-from-snapshot-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'availability-zones))
      (common-lisp:list
       (common-lisp:cons "AvailabilityZones"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dbcluster-identifier))
      (common-lisp:list
       (common-lisp:cons "DBClusterIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'snapshot-identifier))
      (common-lisp:list
       (common-lisp:cons "SnapshotIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'engine))
      (common-lisp:list
       (common-lisp:cons "Engine"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'engine-version))
      (common-lisp:list
       (common-lisp:cons "EngineVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'port))
      (common-lisp:list
       (common-lisp:cons "Port"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dbsubnet-group-name))
      (common-lisp:list
       (common-lisp:cons "DBSubnetGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'vpc-security-group-ids))
      (common-lisp:list
       (common-lisp:cons "VpcSecurityGroupIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kms-key-id))
      (common-lisp:list
       (common-lisp:cons "KmsKeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'enable-cloudwatch-logs-exports))
      (common-lisp:list
       (common-lisp:cons "EnableCloudwatchLogsExports"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'deletion-protection))
      (common-lisp:list
       (common-lisp:cons "DeletionProtection"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dbcluster-parameter-group-name))
      (common-lisp:list
       (common-lisp:cons "DBClusterParameterGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          restore-dbcluster-from-snapshot-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass restore-dbcluster-from-snapshot-result common-lisp:nil
                       ((dbcluster :initarg :dbcluster :type
                         (common-lisp:or dbcluster common-lisp:null) :accessor
                         %restore-dbcluster-from-snapshot-result-dbcluster
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'restore-dbcluster-from-snapshot-result
                    'make-restore-dbcluster-from-snapshot-result))
 (common-lisp:defun make-restore-dbcluster-from-snapshot-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key dbcluster)
   (common-lisp:apply #'common-lisp:make-instance
                      'restore-dbcluster-from-snapshot-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          restore-dbcluster-from-snapshot-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          restore-dbcluster-from-snapshot-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dbcluster))
      (common-lisp:list
       (common-lisp:cons "DBCluster"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          restore-dbcluster-from-snapshot-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass restore-dbcluster-to-point-in-time-message
                       common-lisp:nil
                       ((deletion-protection :initarg :deletion-protection
                         :type
                         (common-lisp:or boolean-optional common-lisp:null)
                         :accessor
                         %restore-dbcluster-to-point-in-time-message-deletion-protection
                         :initform common-lisp:nil)
                        (enable-cloudwatch-logs-exports :initarg
                         :enable-cloudwatch-logs-exports :type
                         (common-lisp:or log-type-list common-lisp:null)
                         :accessor
                         %restore-dbcluster-to-point-in-time-message-enable-cloudwatch-logs-exports
                         :initform common-lisp:nil)
                        (kms-key-id :initarg :kms-key-id :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %restore-dbcluster-to-point-in-time-message-kms-key-id
                         :initform common-lisp:nil)
                        (tags :initarg :tags :type
                         (common-lisp:or tag-list common-lisp:null) :accessor
                         %restore-dbcluster-to-point-in-time-message-tags
                         :initform common-lisp:nil)
                        (vpc-security-group-ids :initarg
                         :vpc-security-group-ids :type
                         (common-lisp:or vpc-security-group-id-list
                                         common-lisp:null)
                         :accessor
                         %restore-dbcluster-to-point-in-time-message-vpc-security-group-ids
                         :initform common-lisp:nil)
                        (dbsubnet-group-name :initarg :dbsubnet-group-name
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         %restore-dbcluster-to-point-in-time-message-dbsubnet-group-name
                         :initform common-lisp:nil)
                        (port :initarg :port :type
                         (common-lisp:or integer-optional common-lisp:null)
                         :accessor
                         %restore-dbcluster-to-point-in-time-message-port
                         :initform common-lisp:nil)
                        (use-latest-restorable-time :initarg
                         :use-latest-restorable-time :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         %restore-dbcluster-to-point-in-time-message-use-latest-restorable-time
                         :initform common-lisp:nil)
                        (restore-to-time :initarg :restore-to-time :type
                         (common-lisp:or tstamp common-lisp:null) :accessor
                         %restore-dbcluster-to-point-in-time-message-restore-to-time
                         :initform common-lisp:nil)
                        (source-dbcluster-identifier :initarg
                         :source-dbcluster-identifier :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %restore-dbcluster-to-point-in-time-message-source-dbcluster-identifier
                         :initform
                         (common-lisp:error
                          ":source-dbcluster-identifier is required"))
                        (restore-type :initarg :restore-type :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %restore-dbcluster-to-point-in-time-message-restore-type
                         :initform common-lisp:nil)
                        (dbcluster-identifier :initarg :dbcluster-identifier
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         %restore-dbcluster-to-point-in-time-message-dbcluster-identifier
                         :initform
                         (common-lisp:error
                          ":dbcluster-identifier is required"))))
 (common-lisp:export
  (common-lisp:list 'restore-dbcluster-to-point-in-time-message
                    'make-restore-dbcluster-to-point-in-time-message))
 (common-lisp:defun make-restore-dbcluster-to-point-in-time-message
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key deletion-protection
                     enable-cloudwatch-logs-exports kms-key-id tags
                     vpc-security-group-ids dbsubnet-group-name port
                     use-latest-restorable-time restore-to-time
                     source-dbcluster-identifier restore-type
                     dbcluster-identifier)
   (common-lisp:apply #'common-lisp:make-instance
                      'restore-dbcluster-to-point-in-time-message
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          restore-dbcluster-to-point-in-time-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          restore-dbcluster-to-point-in-time-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dbcluster-identifier))
      (common-lisp:list
       (common-lisp:cons "DBClusterIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'restore-type))
      (common-lisp:list
       (common-lisp:cons "RestoreType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'source-dbcluster-identifier))
      (common-lisp:list
       (common-lisp:cons "SourceDBClusterIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'restore-to-time))
      (common-lisp:list
       (common-lisp:cons "RestoreToTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'use-latest-restorable-time))
      (common-lisp:list
       (common-lisp:cons "UseLatestRestorableTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'port))
      (common-lisp:list
       (common-lisp:cons "Port"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dbsubnet-group-name))
      (common-lisp:list
       (common-lisp:cons "DBSubnetGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'vpc-security-group-ids))
      (common-lisp:list
       (common-lisp:cons "VpcSecurityGroupIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kms-key-id))
      (common-lisp:list
       (common-lisp:cons "KmsKeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'enable-cloudwatch-logs-exports))
      (common-lisp:list
       (common-lisp:cons "EnableCloudwatchLogsExports"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'deletion-protection))
      (common-lisp:list
       (common-lisp:cons "DeletionProtection"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          restore-dbcluster-to-point-in-time-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass restore-dbcluster-to-point-in-time-result
                       common-lisp:nil
                       ((dbcluster :initarg :dbcluster :type
                         (common-lisp:or dbcluster common-lisp:null) :accessor
                         %restore-dbcluster-to-point-in-time-result-dbcluster
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'restore-dbcluster-to-point-in-time-result
                    'make-restore-dbcluster-to-point-in-time-result))
 (common-lisp:defun make-restore-dbcluster-to-point-in-time-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key dbcluster)
   (common-lisp:apply #'common-lisp:make-instance
                      'restore-dbcluster-to-point-in-time-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          restore-dbcluster-to-point-in-time-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          restore-dbcluster-to-point-in-time-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dbcluster))
      (common-lisp:list
       (common-lisp:cons "DBCluster"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          restore-dbcluster-to-point-in-time-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition snsinvalid-topic-fault
     (docdb-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'snsinvalid-topic-fault)))
(common-lisp:progn
 (common-lisp:define-condition snsno-authorization-fault
     (docdb-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'snsno-authorization-fault)))
(common-lisp:progn
 (common-lisp:define-condition snstopic-arn-not-found-fault
     (docdb-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'snstopic-arn-not-found-fault)))
(common-lisp:progn
 (common-lisp:define-condition shared-snapshot-quota-exceeded-fault
     (docdb-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'shared-snapshot-quota-exceeded-fault)))
(common-lisp:progn
 (common-lisp:define-condition snapshot-quota-exceeded-fault
     (docdb-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'snapshot-quota-exceeded-fault)))
(common-lisp:progn
 (common-lisp:deftype source-ids-list () '(trivial-types:proper-list string))
 (common-lisp:defun |make-source-ids-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list string))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition source-not-found-fault
     (docdb-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'source-not-found-fault)))
(common-lisp:deftype source-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass start-dbcluster-message common-lisp:nil
                       ((dbcluster-identifier :initarg :dbcluster-identifier
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         %start-dbcluster-message-dbcluster-identifier
                         :initform
                         (common-lisp:error
                          ":dbcluster-identifier is required"))))
 (common-lisp:export
  (common-lisp:list 'start-dbcluster-message 'make-start-dbcluster-message))
 (common-lisp:defun make-start-dbcluster-message
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key dbcluster-identifier)
   (common-lisp:apply #'common-lisp:make-instance 'start-dbcluster-message
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-dbcluster-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-dbcluster-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dbcluster-identifier))
      (common-lisp:list
       (common-lisp:cons "DBClusterIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-dbcluster-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass start-dbcluster-result common-lisp:nil
                       ((dbcluster :initarg :dbcluster :type
                         (common-lisp:or dbcluster common-lisp:null) :accessor
                         %start-dbcluster-result-dbcluster :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'start-dbcluster-result 'make-start-dbcluster-result))
 (common-lisp:defun make-start-dbcluster-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key dbcluster)
   (common-lisp:apply #'common-lisp:make-instance 'start-dbcluster-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-dbcluster-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-dbcluster-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dbcluster))
      (common-lisp:list
       (common-lisp:cons "DBCluster"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-dbcluster-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass stop-dbcluster-message common-lisp:nil
                       ((dbcluster-identifier :initarg :dbcluster-identifier
                         :type (common-lisp:or string common-lisp:null)
                         :accessor %stop-dbcluster-message-dbcluster-identifier
                         :initform
                         (common-lisp:error
                          ":dbcluster-identifier is required"))))
 (common-lisp:export
  (common-lisp:list 'stop-dbcluster-message 'make-stop-dbcluster-message))
 (common-lisp:defun make-stop-dbcluster-message
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key dbcluster-identifier)
   (common-lisp:apply #'common-lisp:make-instance 'stop-dbcluster-message
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          stop-dbcluster-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          stop-dbcluster-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dbcluster-identifier))
      (common-lisp:list
       (common-lisp:cons "DBClusterIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          stop-dbcluster-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass stop-dbcluster-result common-lisp:nil
                       ((dbcluster :initarg :dbcluster :type
                         (common-lisp:or dbcluster common-lisp:null) :accessor
                         %stop-dbcluster-result-dbcluster :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'stop-dbcluster-result 'make-stop-dbcluster-result))
 (common-lisp:defun make-stop-dbcluster-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key dbcluster)
   (common-lisp:apply #'common-lisp:make-instance 'stop-dbcluster-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          stop-dbcluster-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          stop-dbcluster-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dbcluster))
      (common-lisp:list
       (common-lisp:cons "DBCluster"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          stop-dbcluster-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition storage-quota-exceeded-fault
     (docdb-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'storage-quota-exceeded-fault)))
(common-lisp:progn
 (common-lisp:define-condition storage-type-not-supported-fault
     (docdb-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'storage-type-not-supported-fault)))
(common-lisp:deftype string () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass subnet common-lisp:nil
                       ((subnet-status :initarg :subnet-status :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %subnet-subnet-status :initform common-lisp:nil)
                        (subnet-availability-zone :initarg
                         :subnet-availability-zone :type
                         (common-lisp:or availability-zone common-lisp:null)
                         :accessor %subnet-subnet-availability-zone :initform
                         common-lisp:nil)
                        (subnet-identifier :initarg :subnet-identifier :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %subnet-subnet-identifier :initform common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'subnet 'make-subnet))
 (common-lisp:defun make-subnet
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key subnet-status subnet-availability-zone
                     subnet-identifier)
   (common-lisp:apply #'common-lisp:make-instance 'subnet
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input subnet))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input subnet))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subnet-identifier))
      (common-lisp:list
       (common-lisp:cons "SubnetIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'subnet-availability-zone))
      (common-lisp:list
       (common-lisp:cons "SubnetAvailabilityZone"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subnet-status))
      (common-lisp:list
       (common-lisp:cons "SubnetStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input subnet))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition subnet-already-in-use
     (docdb-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'subnet-already-in-use)))
(common-lisp:progn
 (common-lisp:deftype subnet-identifier-list ()
   '(trivial-types:proper-list string))
 (common-lisp:defun |make-subnet-identifier-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list string))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype subnet-list () '(trivial-types:proper-list subnet))
 (common-lisp:defun |make-subnet-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list subnet))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition subscription-already-exist-fault
     (docdb-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'subscription-already-exist-fault)))
(common-lisp:progn
 (common-lisp:define-condition subscription-category-not-found-fault
     (docdb-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'subscription-category-not-found-fault)))
(common-lisp:progn
 (common-lisp:define-condition subscription-not-found-fault
     (docdb-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'subscription-not-found-fault)))
(common-lisp:deftype tstamp () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass tag common-lisp:nil
                       ((value :initarg :value :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %tag-value :initform common-lisp:nil)
                        (key :initarg :key :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %tag-key :initform common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'tag 'make-tag))
 (common-lisp:defun make-tag
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key value key)
   (common-lisp:apply #'common-lisp:make-instance 'tag
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input tag))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input tag))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key))
      (common-lisp:list
       (common-lisp:cons "Key"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "Value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input tag))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype tag-list () '(trivial-types:proper-list tag))
 (common-lisp:defun |make-tag-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list tag))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass tag-list-message common-lisp:nil
                       ((tag-list :initarg :tag-list :type
                         (common-lisp:or tag-list common-lisp:null) :accessor
                         %tag-list-message-tag-list :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'tag-list-message 'make-tag-list-message))
 (common-lisp:defun make-tag-list-message
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tag-list)
   (common-lisp:apply #'common-lisp:make-instance 'tag-list-message
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input tag-list-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input tag-list-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tag-list))
      (common-lisp:list
       (common-lisp:cons "TagList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input tag-list-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass upgrade-target common-lisp:nil
                       ((is-major-version-upgrade :initarg
                         :is-major-version-upgrade :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         %upgrade-target-is-major-version-upgrade :initform
                         common-lisp:nil)
                        (auto-upgrade :initarg :auto-upgrade :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         %upgrade-target-auto-upgrade :initform
                         common-lisp:nil)
                        (description :initarg :description :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %upgrade-target-description :initform common-lisp:nil)
                        (engine-version :initarg :engine-version :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %upgrade-target-engine-version :initform
                         common-lisp:nil)
                        (engine :initarg :engine :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %upgrade-target-engine :initform common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'upgrade-target 'make-upgrade-target))
 (common-lisp:defun make-upgrade-target
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key is-major-version-upgrade auto-upgrade
                     description engine-version engine)
   (common-lisp:apply #'common-lisp:make-instance 'upgrade-target
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input upgrade-target))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input upgrade-target))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'engine))
      (common-lisp:list
       (common-lisp:cons "Engine"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'engine-version))
      (common-lisp:list
       (common-lisp:cons "EngineVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'auto-upgrade))
      (common-lisp:list
       (common-lisp:cons "AutoUpgrade"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'is-major-version-upgrade))
      (common-lisp:list
       (common-lisp:cons "IsMajorVersionUpgrade"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input upgrade-target))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype valid-upgrade-target-list ()
   '(trivial-types:proper-list upgrade-target))
 (common-lisp:defun |make-valid-upgrade-target-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list upgrade-target))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype vpc-security-group-id-list ()
   '(trivial-types:proper-list string))
 (common-lisp:defun |make-vpc-security-group-id-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list string))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass vpc-security-group-membership common-lisp:nil
                       ((status :initarg :status :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %vpc-security-group-membership-status :initform
                         common-lisp:nil)
                        (vpc-security-group-id :initarg :vpc-security-group-id
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         %vpc-security-group-membership-vpc-security-group-id
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'vpc-security-group-membership
                    'make-vpc-security-group-membership))
 (common-lisp:defun make-vpc-security-group-membership
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key status vpc-security-group-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'vpc-security-group-membership
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          vpc-security-group-membership))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          vpc-security-group-membership))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'vpc-security-group-id))
      (common-lisp:list
       (common-lisp:cons "VpcSecurityGroupId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          vpc-security-group-membership))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype vpc-security-group-membership-list ()
   '(trivial-types:proper-list vpc-security-group-membership))
 (common-lisp:defun |make-vpc-security-group-membership-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            vpc-security-group-membership))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defun add-source-identifier-to-subscription
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key subscription-name source-identifier)
   (common-lisp:declare
    (common-lisp:ignorable subscription-name source-identifier))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-add-source-identifier-to-subscription-message
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'docdb-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :query "/"
                                                        "AddSourceIdentifierToSubscription"
                                                        "2014-10-31"))
      common-lisp:nil "AddSourceIdentifierToSubscriptionResult" *error-map*)))
 (common-lisp:export 'add-source-identifier-to-subscription))
(common-lisp:progn
 (common-lisp:defun add-tags-to-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-name tags)
   (common-lisp:declare (common-lisp:ignorable resource-name tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-add-tags-to-resource-message
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'docdb-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :query "/"
                                                        "AddTagsToResource"
                                                        "2014-10-31"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'add-tags-to-resource))
(common-lisp:progn
 (common-lisp:defun apply-pending-maintenance-action
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-identifier apply-action
                     opt-in-type)
   (common-lisp:declare
    (common-lisp:ignorable resource-identifier apply-action opt-in-type))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-apply-pending-maintenance-action-message
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'docdb-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :query "/"
                                                        "ApplyPendingMaintenanceAction"
                                                        "2014-10-31"))
      common-lisp:nil "ApplyPendingMaintenanceActionResult" *error-map*)))
 (common-lisp:export 'apply-pending-maintenance-action))
(common-lisp:progn
 (common-lisp:defun copy-dbcluster-parameter-group
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key
                     source-dbcluster-parameter-group-identifier
                     target-dbcluster-parameter-group-identifier
                     target-dbcluster-parameter-group-description tags)
   (common-lisp:declare
    (common-lisp:ignorable source-dbcluster-parameter-group-identifier
     target-dbcluster-parameter-group-identifier
     target-dbcluster-parameter-group-description tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-copy-dbcluster-parameter-group-message
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'docdb-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :query "/"
                                                        "CopyDBClusterParameterGroup"
                                                        "2014-10-31"))
      common-lisp:nil "CopyDBClusterParameterGroupResult" *error-map*)))
 (common-lisp:export 'copy-dbcluster-parameter-group))
(common-lisp:progn
 (common-lisp:defun copy-dbcluster-snapshot
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key source-dbcluster-snapshot-identifier
                     target-dbcluster-snapshot-identifier kms-key-id
                     pre-signed-url copy-tags tags)
   (common-lisp:declare
    (common-lisp:ignorable source-dbcluster-snapshot-identifier
     target-dbcluster-snapshot-identifier kms-key-id pre-signed-url copy-tags
     tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-copy-dbcluster-snapshot-message
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'docdb-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :query "/"
                                                        "CopyDBClusterSnapshot"
                                                        "2014-10-31"))
      common-lisp:nil "CopyDBClusterSnapshotResult" *error-map*)))
 (common-lisp:export 'copy-dbcluster-snapshot))
(common-lisp:progn
 (common-lisp:defun create-dbcluster
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key availability-zones
                     backup-retention-period dbcluster-identifier
                     dbcluster-parameter-group-name vpc-security-group-ids
                     dbsubnet-group-name engine engine-version port
                     master-username master-user-password
                     preferred-backup-window preferred-maintenance-window tags
                     storage-encrypted kms-key-id pre-signed-url
                     enable-cloudwatch-logs-exports deletion-protection
                     global-cluster-identifier)
   (common-lisp:declare
    (common-lisp:ignorable availability-zones backup-retention-period
     dbcluster-identifier dbcluster-parameter-group-name vpc-security-group-ids
     dbsubnet-group-name engine engine-version port master-username
     master-user-password preferred-backup-window preferred-maintenance-window
     tags storage-encrypted kms-key-id pre-signed-url
     enable-cloudwatch-logs-exports deletion-protection
     global-cluster-identifier))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-dbcluster-message
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'docdb-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :query "/"
                                                        "CreateDBCluster"
                                                        "2014-10-31"))
      common-lisp:nil "CreateDBClusterResult" *error-map*)))
 (common-lisp:export 'create-dbcluster))
(common-lisp:progn
 (common-lisp:defun create-dbcluster-parameter-group
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key dbcluster-parameter-group-name
                     dbparameter-group-family description tags)
   (common-lisp:declare
    (common-lisp:ignorable dbcluster-parameter-group-name
     dbparameter-group-family description tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-create-dbcluster-parameter-group-message
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'docdb-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :query "/"
                                                        "CreateDBClusterParameterGroup"
                                                        "2014-10-31"))
      common-lisp:nil "CreateDBClusterParameterGroupResult" *error-map*)))
 (common-lisp:export 'create-dbcluster-parameter-group))
(common-lisp:progn
 (common-lisp:defun create-dbcluster-snapshot
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key dbcluster-snapshot-identifier
                     dbcluster-identifier tags)
   (common-lisp:declare
    (common-lisp:ignorable dbcluster-snapshot-identifier dbcluster-identifier
     tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-create-dbcluster-snapshot-message
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'docdb-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :query "/"
                                                        "CreateDBClusterSnapshot"
                                                        "2014-10-31"))
      common-lisp:nil "CreateDBClusterSnapshotResult" *error-map*)))
 (common-lisp:export 'create-dbcluster-snapshot))
(common-lisp:progn
 (common-lisp:defun create-dbinstance
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key dbinstance-identifier dbinstance-class
                     engine availability-zone preferred-maintenance-window
                     auto-minor-version-upgrade tags dbcluster-identifier
                     copy-tags-to-snapshot promotion-tier
                     enable-performance-insights
                     performance-insights-kmskey-id)
   (common-lisp:declare
    (common-lisp:ignorable dbinstance-identifier dbinstance-class engine
     availability-zone preferred-maintenance-window auto-minor-version-upgrade
     tags dbcluster-identifier copy-tags-to-snapshot promotion-tier
     enable-performance-insights performance-insights-kmskey-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-dbinstance-message
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'docdb-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :query "/"
                                                        "CreateDBInstance"
                                                        "2014-10-31"))
      common-lisp:nil "CreateDBInstanceResult" *error-map*)))
 (common-lisp:export 'create-dbinstance))
(common-lisp:progn
 (common-lisp:defun create-dbsubnet-group
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key dbsubnet-group-name
                     dbsubnet-group-description subnet-ids tags)
   (common-lisp:declare
    (common-lisp:ignorable dbsubnet-group-name dbsubnet-group-description
     subnet-ids tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-dbsubnet-group-message
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'docdb-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :query "/"
                                                        "CreateDBSubnetGroup"
                                                        "2014-10-31"))
      common-lisp:nil "CreateDBSubnetGroupResult" *error-map*)))
 (common-lisp:export 'create-dbsubnet-group))
(common-lisp:progn
 (common-lisp:defun create-event-subscription
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key subscription-name sns-topic-arn
                     source-type event-categories source-ids enabled tags)
   (common-lisp:declare
    (common-lisp:ignorable subscription-name sns-topic-arn source-type
     event-categories source-ids enabled tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-create-event-subscription-message
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'docdb-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :query "/"
                                                        "CreateEventSubscription"
                                                        "2014-10-31"))
      common-lisp:nil "CreateEventSubscriptionResult" *error-map*)))
 (common-lisp:export 'create-event-subscription))
(common-lisp:progn
 (common-lisp:defun create-global-cluster
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key global-cluster-identifier
                     source-dbcluster-identifier engine engine-version
                     deletion-protection database-name storage-encrypted)
   (common-lisp:declare
    (common-lisp:ignorable global-cluster-identifier
     source-dbcluster-identifier engine engine-version deletion-protection
     database-name storage-encrypted))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-global-cluster-message
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'docdb-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :query "/"
                                                        "CreateGlobalCluster"
                                                        "2014-10-31"))
      common-lisp:nil "CreateGlobalClusterResult" *error-map*)))
 (common-lisp:export 'create-global-cluster))
(common-lisp:progn
 (common-lisp:defun delete-dbcluster
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key dbcluster-identifier skip-final-snapshot
                     final-dbsnapshot-identifier)
   (common-lisp:declare
    (common-lisp:ignorable dbcluster-identifier skip-final-snapshot
     final-dbsnapshot-identifier))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-dbcluster-message
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'docdb-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :query "/"
                                                        "DeleteDBCluster"
                                                        "2014-10-31"))
      common-lisp:nil "DeleteDBClusterResult" *error-map*)))
 (common-lisp:export 'delete-dbcluster))
(common-lisp:progn
 (common-lisp:defun delete-dbcluster-parameter-group
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key dbcluster-parameter-group-name)
   (common-lisp:declare (common-lisp:ignorable dbcluster-parameter-group-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-delete-dbcluster-parameter-group-message
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'docdb-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :query "/"
                                                        "DeleteDBClusterParameterGroup"
                                                        "2014-10-31"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-dbcluster-parameter-group))
(common-lisp:progn
 (common-lisp:defun delete-dbcluster-snapshot
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key dbcluster-snapshot-identifier)
   (common-lisp:declare (common-lisp:ignorable dbcluster-snapshot-identifier))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-delete-dbcluster-snapshot-message
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'docdb-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :query "/"
                                                        "DeleteDBClusterSnapshot"
                                                        "2014-10-31"))
      common-lisp:nil "DeleteDBClusterSnapshotResult" *error-map*)))
 (common-lisp:export 'delete-dbcluster-snapshot))
(common-lisp:progn
 (common-lisp:defun delete-dbinstance
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key dbinstance-identifier)
   (common-lisp:declare (common-lisp:ignorable dbinstance-identifier))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-dbinstance-message
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'docdb-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :query "/"
                                                        "DeleteDBInstance"
                                                        "2014-10-31"))
      common-lisp:nil "DeleteDBInstanceResult" *error-map*)))
 (common-lisp:export 'delete-dbinstance))
(common-lisp:progn
 (common-lisp:defun delete-dbsubnet-group
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key dbsubnet-group-name)
   (common-lisp:declare (common-lisp:ignorable dbsubnet-group-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-dbsubnet-group-message
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'docdb-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :query "/"
                                                        "DeleteDBSubnetGroup"
                                                        "2014-10-31"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-dbsubnet-group))
(common-lisp:progn
 (common-lisp:defun delete-event-subscription
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key subscription-name)
   (common-lisp:declare (common-lisp:ignorable subscription-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-delete-event-subscription-message
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'docdb-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :query "/"
                                                        "DeleteEventSubscription"
                                                        "2014-10-31"))
      common-lisp:nil "DeleteEventSubscriptionResult" *error-map*)))
 (common-lisp:export 'delete-event-subscription))
(common-lisp:progn
 (common-lisp:defun delete-global-cluster
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key global-cluster-identifier)
   (common-lisp:declare (common-lisp:ignorable global-cluster-identifier))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-global-cluster-message
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'docdb-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :query "/"
                                                        "DeleteGlobalCluster"
                                                        "2014-10-31"))
      common-lisp:nil "DeleteGlobalClusterResult" *error-map*)))
 (common-lisp:export 'delete-global-cluster))
(common-lisp:progn
 (common-lisp:defun describe-certificates
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key certificate-identifier filters
                     max-records marker)
   (common-lisp:declare
    (common-lisp:ignorable certificate-identifier filters max-records marker))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-certificates-message
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'docdb-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :query "/"
                                                        "DescribeCertificates"
                                                        "2014-10-31"))
      common-lisp:nil "DescribeCertificatesResult" *error-map*)))
 (common-lisp:export 'describe-certificates))
(common-lisp:progn
 (common-lisp:defun describe-dbcluster-parameter-groups
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key dbcluster-parameter-group-name filters
                     max-records marker)
   (common-lisp:declare
    (common-lisp:ignorable dbcluster-parameter-group-name filters max-records
     marker))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-dbcluster-parameter-groups-message
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'docdb-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :query "/"
                                                        "DescribeDBClusterParameterGroups"
                                                        "2014-10-31"))
      common-lisp:nil "DescribeDBClusterParameterGroupsResult" *error-map*)))
 (common-lisp:export 'describe-dbcluster-parameter-groups))
(common-lisp:progn
 (common-lisp:defun describe-dbcluster-parameters
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key dbcluster-parameter-group-name source
                     filters max-records marker)
   (common-lisp:declare
    (common-lisp:ignorable dbcluster-parameter-group-name source filters
     max-records marker))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-dbcluster-parameters-message
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'docdb-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :query "/"
                                                        "DescribeDBClusterParameters"
                                                        "2014-10-31"))
      common-lisp:nil "DescribeDBClusterParametersResult" *error-map*)))
 (common-lisp:export 'describe-dbcluster-parameters))
(common-lisp:progn
 (common-lisp:defun describe-dbcluster-snapshot-attributes
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key dbcluster-snapshot-identifier)
   (common-lisp:declare (common-lisp:ignorable dbcluster-snapshot-identifier))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-dbcluster-snapshot-attributes-message
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'docdb-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :query "/"
                                                        "DescribeDBClusterSnapshotAttributes"
                                                        "2014-10-31"))
      common-lisp:nil "DescribeDBClusterSnapshotAttributesResult"
      *error-map*)))
 (common-lisp:export 'describe-dbcluster-snapshot-attributes))
(common-lisp:progn
 (common-lisp:defun describe-dbcluster-snapshots
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key dbcluster-identifier
                     dbcluster-snapshot-identifier snapshot-type filters
                     max-records marker include-shared include-public)
   (common-lisp:declare
    (common-lisp:ignorable dbcluster-identifier dbcluster-snapshot-identifier
     snapshot-type filters max-records marker include-shared include-public))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-dbcluster-snapshots-message
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'docdb-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :query "/"
                                                        "DescribeDBClusterSnapshots"
                                                        "2014-10-31"))
      common-lisp:nil "DescribeDBClusterSnapshotsResult" *error-map*)))
 (common-lisp:export 'describe-dbcluster-snapshots))
(common-lisp:progn
 (common-lisp:defun describe-dbclusters
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key dbcluster-identifier filters max-records
                     marker)
   (common-lisp:declare
    (common-lisp:ignorable dbcluster-identifier filters max-records marker))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-dbclusters-message
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'docdb-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :query "/"
                                                        "DescribeDBClusters"
                                                        "2014-10-31"))
      common-lisp:nil "DescribeDBClustersResult" *error-map*)))
 (common-lisp:export 'describe-dbclusters))
(common-lisp:progn
 (common-lisp:defun describe-dbengine-versions
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key engine engine-version
                     dbparameter-group-family filters max-records marker
                     default-only list-supported-character-sets
                     list-supported-timezones)
   (common-lisp:declare
    (common-lisp:ignorable engine engine-version dbparameter-group-family
     filters max-records marker default-only list-supported-character-sets
     list-supported-timezones))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-dbengine-versions-message
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'docdb-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :query "/"
                                                        "DescribeDBEngineVersions"
                                                        "2014-10-31"))
      common-lisp:nil "DescribeDBEngineVersionsResult" *error-map*)))
 (common-lisp:export 'describe-dbengine-versions))
(common-lisp:progn
 (common-lisp:defun describe-dbinstances
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key dbinstance-identifier filters max-records
                     marker)
   (common-lisp:declare
    (common-lisp:ignorable dbinstance-identifier filters max-records marker))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-dbinstances-message
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'docdb-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :query "/"
                                                        "DescribeDBInstances"
                                                        "2014-10-31"))
      common-lisp:nil "DescribeDBInstancesResult" *error-map*)))
 (common-lisp:export 'describe-dbinstances))
(common-lisp:progn
 (common-lisp:defun describe-dbsubnet-groups
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key dbsubnet-group-name filters max-records
                     marker)
   (common-lisp:declare
    (common-lisp:ignorable dbsubnet-group-name filters max-records marker))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-dbsubnet-groups-message
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'docdb-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :query "/"
                                                        "DescribeDBSubnetGroups"
                                                        "2014-10-31"))
      common-lisp:nil "DescribeDBSubnetGroupsResult" *error-map*)))
 (common-lisp:export 'describe-dbsubnet-groups))
(common-lisp:progn
 (common-lisp:defun describe-engine-default-cluster-parameters
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key dbparameter-group-family filters
                     max-records marker)
   (common-lisp:declare
    (common-lisp:ignorable dbparameter-group-family filters max-records
     marker))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-engine-default-cluster-parameters-message
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'docdb-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :query "/"
                                                        "DescribeEngineDefaultClusterParameters"
                                                        "2014-10-31"))
      common-lisp:nil "DescribeEngineDefaultClusterParametersResult"
      *error-map*)))
 (common-lisp:export 'describe-engine-default-cluster-parameters))
(common-lisp:progn
 (common-lisp:defun describe-event-categories
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key source-type filters)
   (common-lisp:declare (common-lisp:ignorable source-type filters))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-event-categories-message
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'docdb-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :query "/"
                                                        "DescribeEventCategories"
                                                        "2014-10-31"))
      common-lisp:nil "DescribeEventCategoriesResult" *error-map*)))
 (common-lisp:export 'describe-event-categories))
(common-lisp:progn
 (common-lisp:defun describe-event-subscriptions
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key subscription-name filters max-records
                     marker)
   (common-lisp:declare
    (common-lisp:ignorable subscription-name filters max-records marker))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-event-subscriptions-message
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'docdb-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :query "/"
                                                        "DescribeEventSubscriptions"
                                                        "2014-10-31"))
      common-lisp:nil "DescribeEventSubscriptionsResult" *error-map*)))
 (common-lisp:export 'describe-event-subscriptions))
(common-lisp:progn
 (common-lisp:defun describe-events
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key source-identifier source-type start-time
                     end-time duration event-categories filters max-records
                     marker)
   (common-lisp:declare
    (common-lisp:ignorable source-identifier source-type start-time end-time
     duration event-categories filters max-records marker))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-events-message
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'docdb-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :query "/"
                                                        "DescribeEvents"
                                                        "2014-10-31"))
      common-lisp:nil "DescribeEventsResult" *error-map*)))
 (common-lisp:export 'describe-events))
(common-lisp:progn
 (common-lisp:defun describe-global-clusters
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key global-cluster-identifier filters
                     max-records marker)
   (common-lisp:declare
    (common-lisp:ignorable global-cluster-identifier filters max-records
     marker))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-global-clusters-message
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'docdb-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :query "/"
                                                        "DescribeGlobalClusters"
                                                        "2014-10-31"))
      common-lisp:nil "DescribeGlobalClustersResult" *error-map*)))
 (common-lisp:export 'describe-global-clusters))
(common-lisp:progn
 (common-lisp:defun describe-orderable-dbinstance-options
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key engine engine-version dbinstance-class
                     license-model vpc filters max-records marker)
   (common-lisp:declare
    (common-lisp:ignorable engine engine-version dbinstance-class license-model
     vpc filters max-records marker))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-orderable-dbinstance-options-message
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'docdb-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :query "/"
                                                        "DescribeOrderableDBInstanceOptions"
                                                        "2014-10-31"))
      common-lisp:nil "DescribeOrderableDBInstanceOptionsResult" *error-map*)))
 (common-lisp:export 'describe-orderable-dbinstance-options))
(common-lisp:progn
 (common-lisp:defun describe-pending-maintenance-actions
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-identifier filters marker
                     max-records)
   (common-lisp:declare
    (common-lisp:ignorable resource-identifier filters marker max-records))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-pending-maintenance-actions-message
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'docdb-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :query "/"
                                                        "DescribePendingMaintenanceActions"
                                                        "2014-10-31"))
      common-lisp:nil "DescribePendingMaintenanceActionsResult" *error-map*)))
 (common-lisp:export 'describe-pending-maintenance-actions))
(common-lisp:progn
 (common-lisp:defun failover-dbcluster
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key dbcluster-identifier
                     target-dbinstance-identifier)
   (common-lisp:declare
    (common-lisp:ignorable dbcluster-identifier target-dbinstance-identifier))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-failover-dbcluster-message
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'docdb-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :query "/"
                                                        "FailoverDBCluster"
                                                        "2014-10-31"))
      common-lisp:nil "FailoverDBClusterResult" *error-map*)))
 (common-lisp:export 'failover-dbcluster))
(common-lisp:progn
 (common-lisp:defun list-tags-for-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-name filters)
   (common-lisp:declare (common-lisp:ignorable resource-name filters))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-tags-for-resource-message
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'docdb-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :query "/"
                                                        "ListTagsForResource"
                                                        "2014-10-31"))
      common-lisp:nil "ListTagsForResourceResult" *error-map*)))
 (common-lisp:export 'list-tags-for-resource))
(common-lisp:progn
 (common-lisp:defun modify-dbcluster
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key dbcluster-identifier
                     new-dbcluster-identifier apply-immediately
                     backup-retention-period dbcluster-parameter-group-name
                     vpc-security-group-ids port master-user-password
                     preferred-backup-window preferred-maintenance-window
                     cloudwatch-logs-export-configuration engine-version
                     deletion-protection)
   (common-lisp:declare
    (common-lisp:ignorable dbcluster-identifier new-dbcluster-identifier
     apply-immediately backup-retention-period dbcluster-parameter-group-name
     vpc-security-group-ids port master-user-password preferred-backup-window
     preferred-maintenance-window cloudwatch-logs-export-configuration
     engine-version deletion-protection))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-modify-dbcluster-message
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'docdb-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :query "/"
                                                        "ModifyDBCluster"
                                                        "2014-10-31"))
      common-lisp:nil "ModifyDBClusterResult" *error-map*)))
 (common-lisp:export 'modify-dbcluster))
(common-lisp:progn
 (common-lisp:defun modify-dbcluster-parameter-group
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key dbcluster-parameter-group-name
                     parameters)
   (common-lisp:declare
    (common-lisp:ignorable dbcluster-parameter-group-name parameters))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-modify-dbcluster-parameter-group-message
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'docdb-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :query "/"
                                                        "ModifyDBClusterParameterGroup"
                                                        "2014-10-31"))
      common-lisp:nil "ModifyDBClusterParameterGroupResult" *error-map*)))
 (common-lisp:export 'modify-dbcluster-parameter-group))
(common-lisp:progn
 (common-lisp:defun modify-dbcluster-snapshot-attribute
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key dbcluster-snapshot-identifier
                     attribute-name values-to-add values-to-remove)
   (common-lisp:declare
    (common-lisp:ignorable dbcluster-snapshot-identifier attribute-name
     values-to-add values-to-remove))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-modify-dbcluster-snapshot-attribute-message
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'docdb-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :query "/"
                                                        "ModifyDBClusterSnapshotAttribute"
                                                        "2014-10-31"))
      common-lisp:nil "ModifyDBClusterSnapshotAttributeResult" *error-map*)))
 (common-lisp:export 'modify-dbcluster-snapshot-attribute))
(common-lisp:progn
 (common-lisp:defun modify-dbinstance
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key dbinstance-identifier dbinstance-class
                     apply-immediately preferred-maintenance-window
                     auto-minor-version-upgrade new-dbinstance-identifier
                     cacertificate-identifier copy-tags-to-snapshot
                     promotion-tier enable-performance-insights
                     performance-insights-kmskey-id)
   (common-lisp:declare
    (common-lisp:ignorable dbinstance-identifier dbinstance-class
     apply-immediately preferred-maintenance-window auto-minor-version-upgrade
     new-dbinstance-identifier cacertificate-identifier copy-tags-to-snapshot
     promotion-tier enable-performance-insights
     performance-insights-kmskey-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-modify-dbinstance-message
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'docdb-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :query "/"
                                                        "ModifyDBInstance"
                                                        "2014-10-31"))
      common-lisp:nil "ModifyDBInstanceResult" *error-map*)))
 (common-lisp:export 'modify-dbinstance))
(common-lisp:progn
 (common-lisp:defun modify-dbsubnet-group
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key dbsubnet-group-name
                     dbsubnet-group-description subnet-ids)
   (common-lisp:declare
    (common-lisp:ignorable dbsubnet-group-name dbsubnet-group-description
     subnet-ids))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-modify-dbsubnet-group-message
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'docdb-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :query "/"
                                                        "ModifyDBSubnetGroup"
                                                        "2014-10-31"))
      common-lisp:nil "ModifyDBSubnetGroupResult" *error-map*)))
 (common-lisp:export 'modify-dbsubnet-group))
(common-lisp:progn
 (common-lisp:defun modify-event-subscription
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key subscription-name sns-topic-arn
                     source-type event-categories enabled)
   (common-lisp:declare
    (common-lisp:ignorable subscription-name sns-topic-arn source-type
     event-categories enabled))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-modify-event-subscription-message
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'docdb-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :query "/"
                                                        "ModifyEventSubscription"
                                                        "2014-10-31"))
      common-lisp:nil "ModifyEventSubscriptionResult" *error-map*)))
 (common-lisp:export 'modify-event-subscription))
(common-lisp:progn
 (common-lisp:defun modify-global-cluster
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key global-cluster-identifier
                     new-global-cluster-identifier deletion-protection)
   (common-lisp:declare
    (common-lisp:ignorable global-cluster-identifier
     new-global-cluster-identifier deletion-protection))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-modify-global-cluster-message
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'docdb-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :query "/"
                                                        "ModifyGlobalCluster"
                                                        "2014-10-31"))
      common-lisp:nil "ModifyGlobalClusterResult" *error-map*)))
 (common-lisp:export 'modify-global-cluster))
(common-lisp:progn
 (common-lisp:defun reboot-dbinstance
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key dbinstance-identifier force-failover)
   (common-lisp:declare
    (common-lisp:ignorable dbinstance-identifier force-failover))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-reboot-dbinstance-message
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'docdb-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :query "/"
                                                        "RebootDBInstance"
                                                        "2014-10-31"))
      common-lisp:nil "RebootDBInstanceResult" *error-map*)))
 (common-lisp:export 'reboot-dbinstance))
(common-lisp:progn
 (common-lisp:defun remove-from-global-cluster
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key global-cluster-identifier
                     db-cluster-identifier)
   (common-lisp:declare
    (common-lisp:ignorable global-cluster-identifier db-cluster-identifier))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-remove-from-global-cluster-message
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'docdb-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :query "/"
                                                        "RemoveFromGlobalCluster"
                                                        "2014-10-31"))
      common-lisp:nil "RemoveFromGlobalClusterResult" *error-map*)))
 (common-lisp:export 'remove-from-global-cluster))
(common-lisp:progn
 (common-lisp:defun remove-source-identifier-from-subscription
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key subscription-name source-identifier)
   (common-lisp:declare
    (common-lisp:ignorable subscription-name source-identifier))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-remove-source-identifier-from-subscription-message
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'docdb-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :query "/"
                                                        "RemoveSourceIdentifierFromSubscription"
                                                        "2014-10-31"))
      common-lisp:nil "RemoveSourceIdentifierFromSubscriptionResult"
      *error-map*)))
 (common-lisp:export 'remove-source-identifier-from-subscription))
(common-lisp:progn
 (common-lisp:defun remove-tags-from-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-name tag-keys)
   (common-lisp:declare (common-lisp:ignorable resource-name tag-keys))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-remove-tags-from-resource-message
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'docdb-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :query "/"
                                                        "RemoveTagsFromResource"
                                                        "2014-10-31"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'remove-tags-from-resource))
(common-lisp:progn
 (common-lisp:defun reset-dbcluster-parameter-group
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key dbcluster-parameter-group-name
                     reset-all-parameters parameters)
   (common-lisp:declare
    (common-lisp:ignorable dbcluster-parameter-group-name reset-all-parameters
     parameters))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-reset-dbcluster-parameter-group-message
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'docdb-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :query "/"
                                                        "ResetDBClusterParameterGroup"
                                                        "2014-10-31"))
      common-lisp:nil "ResetDBClusterParameterGroupResult" *error-map*)))
 (common-lisp:export 'reset-dbcluster-parameter-group))
(common-lisp:progn
 (common-lisp:defun restore-dbcluster-from-snapshot
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key availability-zones dbcluster-identifier
                     snapshot-identifier engine engine-version port
                     dbsubnet-group-name vpc-security-group-ids tags kms-key-id
                     enable-cloudwatch-logs-exports deletion-protection
                     dbcluster-parameter-group-name)
   (common-lisp:declare
    (common-lisp:ignorable availability-zones dbcluster-identifier
     snapshot-identifier engine engine-version port dbsubnet-group-name
     vpc-security-group-ids tags kms-key-id enable-cloudwatch-logs-exports
     deletion-protection dbcluster-parameter-group-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-restore-dbcluster-from-snapshot-message
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'docdb-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :query "/"
                                                        "RestoreDBClusterFromSnapshot"
                                                        "2014-10-31"))
      common-lisp:nil "RestoreDBClusterFromSnapshotResult" *error-map*)))
 (common-lisp:export 'restore-dbcluster-from-snapshot))
(common-lisp:progn
 (common-lisp:defun restore-dbcluster-to-point-in-time
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key dbcluster-identifier restore-type
                     source-dbcluster-identifier restore-to-time
                     use-latest-restorable-time port dbsubnet-group-name
                     vpc-security-group-ids tags kms-key-id
                     enable-cloudwatch-logs-exports deletion-protection)
   (common-lisp:declare
    (common-lisp:ignorable dbcluster-identifier restore-type
     source-dbcluster-identifier restore-to-time use-latest-restorable-time
     port dbsubnet-group-name vpc-security-group-ids tags kms-key-id
     enable-cloudwatch-logs-exports deletion-protection))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-restore-dbcluster-to-point-in-time-message
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'docdb-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :query "/"
                                                        "RestoreDBClusterToPointInTime"
                                                        "2014-10-31"))
      common-lisp:nil "RestoreDBClusterToPointInTimeResult" *error-map*)))
 (common-lisp:export 'restore-dbcluster-to-point-in-time))
(common-lisp:progn
 (common-lisp:defun start-dbcluster
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key dbcluster-identifier)
   (common-lisp:declare (common-lisp:ignorable dbcluster-identifier))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-start-dbcluster-message
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'docdb-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :query "/"
                                                        "StartDBCluster"
                                                        "2014-10-31"))
      common-lisp:nil "StartDBClusterResult" *error-map*)))
 (common-lisp:export 'start-dbcluster))
(common-lisp:progn
 (common-lisp:defun stop-dbcluster
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key dbcluster-identifier)
   (common-lisp:declare (common-lisp:ignorable dbcluster-identifier))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-stop-dbcluster-message
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'docdb-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :query "/"
                                                        "StopDBCluster"
                                                        "2014-10-31"))
      common-lisp:nil "StopDBClusterResult" *error-map*)))
 (common-lisp:export 'stop-dbcluster))
