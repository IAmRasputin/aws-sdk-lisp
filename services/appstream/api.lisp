;; DO NOT EDIT: File is generated by AWS-SDK/GENERATOR.

(common-lisp:defpackage #:aws-sdk/services/appstream/api
  (:use)
  (:nicknames #:aws/appstream)
  (:import-from #:aws-sdk/generator/shape)
  (:import-from #:aws-sdk/generator/operation)
  (:import-from #:aws-sdk/api)
  (:import-from #:aws-sdk/request)
  (:import-from #:aws-sdk/error))
(common-lisp:in-package #:aws-sdk/services/appstream/api)
(common-lisp:progn
 (common-lisp:defclass appstream-request (aws-sdk/request:request)
                       common-lisp:nil
                       (:default-initargs :service "appstream" :protocol
                        :json))
 (common-lisp:export 'appstream-request))
(common-lisp:progn
 (common-lisp:define-condition appstream-error
     (aws-sdk/error:aws-error)
     common-lisp:nil)
 (common-lisp:export 'appstream-error))
(common-lisp:defvar *error-map*
  '(("ConcurrentModificationException" . concurrent-modification-exception)
    ("EntitlementAlreadyExistsException"
     . entitlement-already-exists-exception)
    ("EntitlementNotFoundException" . entitlement-not-found-exception)
    ("IncompatibleImageException" . incompatible-image-exception)
    ("InvalidAccountStatusException" . invalid-account-status-exception)
    ("InvalidParameterCombinationException"
     . invalid-parameter-combination-exception)
    ("InvalidRoleException" . invalid-role-exception)
    ("LimitExceededException" . limit-exceeded-exception)
    ("OperationNotPermittedException" . operation-not-permitted-exception)
    ("RequestLimitExceededException" . request-limit-exceeded-exception)
    ("ResourceAlreadyExistsException" . resource-already-exists-exception)
    ("ResourceInUseException" . resource-in-use-exception)
    ("ResourceNotAvailableException" . resource-not-available-exception)
    ("ResourceNotFoundException" . resource-not-found-exception)))
(common-lisp:progn
 (common-lisp:defclass access-endpoint common-lisp:nil
                       ((vpce-id :initarg :vpce-id :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %access-endpoint-vpce-id :initform common-lisp:nil)
                        (endpoint-type :initarg :endpoint-type :type
                         (common-lisp:or access-endpoint-type common-lisp:null)
                         :accessor %access-endpoint-endpoint-type :initform
                         (common-lisp:error ":endpoint-type is required"))))
 (common-lisp:export (common-lisp:list 'access-endpoint 'make-access-endpoint))
 (common-lisp:defun make-access-endpoint
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key vpce-id endpoint-type)
   (common-lisp:apply #'common-lisp:make-instance 'access-endpoint
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input access-endpoint))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input access-endpoint))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'endpoint-type))
      (common-lisp:list
       (common-lisp:cons "EndpointType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpce-id))
      (common-lisp:list
       (common-lisp:cons "VpceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input access-endpoint))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype access-endpoint-list ()
   '(trivial-types:proper-list access-endpoint))
 (common-lisp:defun |make-access-endpoint-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list access-endpoint))
   aws-sdk/generator/shape::members))
(common-lisp:deftype access-endpoint-type () 'common-lisp:string)
(common-lisp:deftype account-name () 'common-lisp:string)
(common-lisp:deftype account-password () 'common-lisp:string)
(common-lisp:deftype action () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass app-block common-lisp:nil
                       ((created-time :initarg :created-time :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %app-block-created-time :initform common-lisp:nil)
                        (setup-script-details :initarg :setup-script-details
                         :type (common-lisp:or script-details common-lisp:null)
                         :accessor %app-block-setup-script-details :initform
                         (common-lisp:error
                          ":setup-script-details is required"))
                        (source-s3location :initarg :source-s3location :type
                         (common-lisp:or s3location common-lisp:null) :accessor
                         %app-block-source-s3location :initform
                         common-lisp:nil)
                        (display-name :initarg :display-name :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %app-block-display-name :initform common-lisp:nil)
                        (description :initarg :description :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %app-block-description :initform common-lisp:nil)
                        (arn :initarg :arn :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %app-block-arn :initform
                         (common-lisp:error ":arn is required"))
                        (name :initarg :name :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %app-block-name :initform
                         (common-lisp:error ":name is required"))))
 (common-lisp:export (common-lisp:list 'app-block 'make-app-block))
 (common-lisp:defun make-app-block
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key created-time setup-script-details
                     source-s3location display-name description arn name)
   (common-lisp:apply #'common-lisp:make-instance 'app-block
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input app-block))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input app-block))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'display-name))
      (common-lisp:list
       (common-lisp:cons "DisplayName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-s3location))
      (common-lisp:list
       (common-lisp:cons "SourceS3Location"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'setup-script-details))
      (common-lisp:list
       (common-lisp:cons "SetupScriptDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-time))
      (common-lisp:list
       (common-lisp:cons "CreatedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input app-block))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype app-blocks () '(trivial-types:proper-list app-block))
 (common-lisp:defun |make-app-blocks|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list app-block))
   aws-sdk/generator/shape::members))
(common-lisp:deftype app-visibility () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass application common-lisp:nil
                       ((created-time :initarg :created-time :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %application-created-time :initform common-lisp:nil)
                        (instance-families :initarg :instance-families :type
                         (common-lisp:or string-list common-lisp:null)
                         :accessor %application-instance-families :initform
                         common-lisp:nil)
                        (platforms :initarg :platforms :type
                         (common-lisp:or platforms common-lisp:null) :accessor
                         %application-platforms :initform common-lisp:nil)
                        (icon-s3location :initarg :icon-s3location :type
                         (common-lisp:or s3location common-lisp:null) :accessor
                         %application-icon-s3location :initform
                         common-lisp:nil)
                        (app-block-arn :initarg :app-block-arn :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %application-app-block-arn :initform common-lisp:nil)
                        (arn :initarg :arn :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %application-arn :initform common-lisp:nil)
                        (description :initarg :description :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %application-description :initform common-lisp:nil)
                        (working-directory :initarg :working-directory :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %application-working-directory :initform
                         common-lisp:nil)
                        (metadata :initarg :metadata :type
                         (common-lisp:or metadata common-lisp:null) :accessor
                         %application-metadata :initform common-lisp:nil)
                        (enabled :initarg :enabled :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         %application-enabled :initform common-lisp:nil)
                        (launch-parameters :initarg :launch-parameters :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %application-launch-parameters :initform
                         common-lisp:nil)
                        (launch-path :initarg :launch-path :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %application-launch-path :initform common-lisp:nil)
                        (icon-url :initarg :icon-url :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %application-icon-url :initform common-lisp:nil)
                        (display-name :initarg :display-name :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %application-display-name :initform common-lisp:nil)
                        (name :initarg :name :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %application-name :initform common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'application 'make-application))
 (common-lisp:defun make-application
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key created-time instance-families platforms
                     icon-s3location app-block-arn arn description
                     working-directory metadata enabled launch-parameters
                     launch-path icon-url display-name name)
   (common-lisp:apply #'common-lisp:make-instance 'application
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input application))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input application))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'display-name))
      (common-lisp:list
       (common-lisp:cons "DisplayName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'icon-url))
      (common-lisp:list
       (common-lisp:cons "IconURL"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'launch-path))
      (common-lisp:list
       (common-lisp:cons "LaunchPath"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'launch-parameters))
      (common-lisp:list
       (common-lisp:cons "LaunchParameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'enabled))
      (common-lisp:list
       (common-lisp:cons "Enabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metadata))
      (common-lisp:list
       (common-lisp:cons "Metadata"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'working-directory))
      (common-lisp:list
       (common-lisp:cons "WorkingDirectory"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'app-block-arn))
      (common-lisp:list
       (common-lisp:cons "AppBlockArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'icon-s3location))
      (common-lisp:list
       (common-lisp:cons "IconS3Location"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'platforms))
      (common-lisp:list
       (common-lisp:cons "Platforms"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-families))
      (common-lisp:list
       (common-lisp:cons "InstanceFamilies"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-time))
      (common-lisp:list
       (common-lisp:cons "CreatedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input application))
   common-lisp:nil))
(common-lisp:deftype application-attribute () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype application-attributes ()
   '(trivial-types:proper-list application-attribute))
 (common-lisp:defun |make-application-attributes|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list application-attribute))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass application-fleet-association common-lisp:nil
                       ((application-arn :initarg :application-arn :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %application-fleet-association-application-arn
                         :initform
                         (common-lisp:error ":application-arn is required"))
                        (fleet-name :initarg :fleet-name :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %application-fleet-association-fleet-name :initform
                         (common-lisp:error ":fleet-name is required"))))
 (common-lisp:export
  (common-lisp:list 'application-fleet-association
                    'make-application-fleet-association))
 (common-lisp:defun make-application-fleet-association
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key application-arn fleet-name)
   (common-lisp:apply #'common-lisp:make-instance
                      'application-fleet-association
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          application-fleet-association))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          application-fleet-association))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'fleet-name))
      (common-lisp:list
       (common-lisp:cons "FleetName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'application-arn))
      (common-lisp:list
       (common-lisp:cons "ApplicationArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          application-fleet-association))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype application-fleet-association-list ()
   '(trivial-types:proper-list application-fleet-association))
 (common-lisp:defun |make-application-fleet-association-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            application-fleet-association))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass application-settings common-lisp:nil
                       ((settings-group :initarg :settings-group :type
                         (common-lisp:or settings-group common-lisp:null)
                         :accessor %application-settings-settings-group
                         :initform common-lisp:nil)
                        (enabled :initarg :enabled :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         %application-settings-enabled :initform
                         (common-lisp:error ":enabled is required"))))
 (common-lisp:export
  (common-lisp:list 'application-settings 'make-application-settings))
 (common-lisp:defun make-application-settings
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key settings-group enabled)
   (common-lisp:apply #'common-lisp:make-instance 'application-settings
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input application-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input application-settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'enabled))
      (common-lisp:list
       (common-lisp:cons "Enabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'settings-group))
      (common-lisp:list
       (common-lisp:cons "SettingsGroup"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input application-settings))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass application-settings-response common-lisp:nil
                       ((s3bucket-name :initarg :s3bucket-name :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %application-settings-response-s3bucket-name :initform
                         common-lisp:nil)
                        (settings-group :initarg :settings-group :type
                         (common-lisp:or settings-group common-lisp:null)
                         :accessor
                         %application-settings-response-settings-group
                         :initform common-lisp:nil)
                        (enabled :initarg :enabled :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         %application-settings-response-enabled :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'application-settings-response
                    'make-application-settings-response))
 (common-lisp:defun make-application-settings-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key s3bucket-name settings-group enabled)
   (common-lisp:apply #'common-lisp:make-instance
                      'application-settings-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          application-settings-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          application-settings-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'enabled))
      (common-lisp:list
       (common-lisp:cons "Enabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'settings-group))
      (common-lisp:list
       (common-lisp:cons "SettingsGroup"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3bucket-name))
      (common-lisp:list
       (common-lisp:cons "S3BucketName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          application-settings-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype applications () '(trivial-types:proper-list application))
 (common-lisp:defun |make-applications|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list application))
   aws-sdk/generator/shape::members))
(common-lisp:deftype appstream-agent-version () 'common-lisp:string)
(common-lisp:deftype arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype arn-list () '(trivial-types:proper-list arn))
 (common-lisp:defun |make-arn-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list arn))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass associate-application-fleet-request common-lisp:nil
                       ((application-arn :initarg :application-arn :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %associate-application-fleet-request-application-arn
                         :initform
                         (common-lisp:error ":application-arn is required"))
                        (fleet-name :initarg :fleet-name :type
                         (common-lisp:or name common-lisp:null) :accessor
                         %associate-application-fleet-request-fleet-name
                         :initform
                         (common-lisp:error ":fleet-name is required"))))
 (common-lisp:export
  (common-lisp:list 'associate-application-fleet-request
                    'make-associate-application-fleet-request))
 (common-lisp:defun make-associate-application-fleet-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key application-arn fleet-name)
   (common-lisp:apply #'common-lisp:make-instance
                      'associate-application-fleet-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          associate-application-fleet-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          associate-application-fleet-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'fleet-name))
      (common-lisp:list
       (common-lisp:cons "FleetName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'application-arn))
      (common-lisp:list
       (common-lisp:cons "ApplicationArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          associate-application-fleet-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass associate-application-fleet-result common-lisp:nil
                       ((application-fleet-association :initarg
                         :application-fleet-association :type
                         (common-lisp:or application-fleet-association
                                         common-lisp:null)
                         :accessor
                         %associate-application-fleet-result-application-fleet-association
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'associate-application-fleet-result
                    'make-associate-application-fleet-result))
 (common-lisp:defun make-associate-application-fleet-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key application-fleet-association)
   (common-lisp:apply #'common-lisp:make-instance
                      'associate-application-fleet-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          associate-application-fleet-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          associate-application-fleet-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'application-fleet-association))
      (common-lisp:list
       (common-lisp:cons "ApplicationFleetAssociation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          associate-application-fleet-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass associate-application-to-entitlement-request
                       common-lisp:nil
                       ((application-identifier :initarg
                         :application-identifier :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %associate-application-to-entitlement-request-application-identifier
                         :initform
                         (common-lisp:error
                          ":application-identifier is required"))
                        (entitlement-name :initarg :entitlement-name :type
                         (common-lisp:or name common-lisp:null) :accessor
                         %associate-application-to-entitlement-request-entitlement-name
                         :initform
                         (common-lisp:error ":entitlement-name is required"))
                        (stack-name :initarg :stack-name :type
                         (common-lisp:or name common-lisp:null) :accessor
                         %associate-application-to-entitlement-request-stack-name
                         :initform
                         (common-lisp:error ":stack-name is required"))))
 (common-lisp:export
  (common-lisp:list 'associate-application-to-entitlement-request
                    'make-associate-application-to-entitlement-request))
 (common-lisp:defun make-associate-application-to-entitlement-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key application-identifier entitlement-name
                     stack-name)
   (common-lisp:apply #'common-lisp:make-instance
                      'associate-application-to-entitlement-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          associate-application-to-entitlement-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          associate-application-to-entitlement-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stack-name))
      (common-lisp:list
       (common-lisp:cons "StackName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'entitlement-name))
      (common-lisp:list
       (common-lisp:cons "EntitlementName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'application-identifier))
      (common-lisp:list
       (common-lisp:cons "ApplicationIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          associate-application-to-entitlement-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass associate-application-to-entitlement-result
                       common-lisp:nil common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'associate-application-to-entitlement-result
                    'make-associate-application-to-entitlement-result))
 (common-lisp:defun make-associate-application-to-entitlement-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance
                      'associate-application-to-entitlement-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          associate-application-to-entitlement-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          associate-application-to-entitlement-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          associate-application-to-entitlement-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass associate-fleet-request common-lisp:nil
                       ((stack-name :initarg :stack-name :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %associate-fleet-request-stack-name :initform
                         (common-lisp:error ":stack-name is required"))
                        (fleet-name :initarg :fleet-name :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %associate-fleet-request-fleet-name :initform
                         (common-lisp:error ":fleet-name is required"))))
 (common-lisp:export
  (common-lisp:list 'associate-fleet-request 'make-associate-fleet-request))
 (common-lisp:defun make-associate-fleet-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key stack-name fleet-name)
   (common-lisp:apply #'common-lisp:make-instance 'associate-fleet-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          associate-fleet-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          associate-fleet-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'fleet-name))
      (common-lisp:list
       (common-lisp:cons "FleetName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stack-name))
      (common-lisp:list
       (common-lisp:cons "StackName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          associate-fleet-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass associate-fleet-result common-lisp:nil common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'associate-fleet-result 'make-associate-fleet-result))
 (common-lisp:defun make-associate-fleet-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance 'associate-fleet-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          associate-fleet-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          associate-fleet-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          associate-fleet-result))
   common-lisp:nil))
(common-lisp:deftype authentication-type () 'common-lisp:string)
(common-lisp:deftype aws-account-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype aws-account-id-list ()
   '(trivial-types:proper-list aws-account-id))
 (common-lisp:defun |make-aws-account-id-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list aws-account-id))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass batch-associate-user-stack-request common-lisp:nil
                       ((user-stack-associations :initarg
                         :user-stack-associations :type
                         (common-lisp:or user-stack-association-list
                                         common-lisp:null)
                         :accessor
                         %batch-associate-user-stack-request-user-stack-associations
                         :initform
                         (common-lisp:error
                          ":user-stack-associations is required"))))
 (common-lisp:export
  (common-lisp:list 'batch-associate-user-stack-request
                    'make-batch-associate-user-stack-request))
 (common-lisp:defun make-batch-associate-user-stack-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key user-stack-associations)
   (common-lisp:apply #'common-lisp:make-instance
                      'batch-associate-user-stack-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-associate-user-stack-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-associate-user-stack-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'user-stack-associations))
      (common-lisp:list
       (common-lisp:cons "UserStackAssociations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-associate-user-stack-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass batch-associate-user-stack-result common-lisp:nil
                       ((errors :initarg :|errors| :type
                         (common-lisp:or user-stack-association-error-list
                                         common-lisp:null)
                         :accessor %batch-associate-user-stack-result-errors
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'batch-associate-user-stack-result
                    'make-batch-associate-user-stack-result))
 (common-lisp:defun make-batch-associate-user-stack-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key errors)
   (common-lisp:apply #'common-lisp:make-instance
                      'batch-associate-user-stack-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-associate-user-stack-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-associate-user-stack-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'errors))
      (common-lisp:list
       (common-lisp:cons "errors"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-associate-user-stack-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass batch-disassociate-user-stack-request common-lisp:nil
                       ((user-stack-associations :initarg
                         :user-stack-associations :type
                         (common-lisp:or user-stack-association-list
                                         common-lisp:null)
                         :accessor
                         %batch-disassociate-user-stack-request-user-stack-associations
                         :initform
                         (common-lisp:error
                          ":user-stack-associations is required"))))
 (common-lisp:export
  (common-lisp:list 'batch-disassociate-user-stack-request
                    'make-batch-disassociate-user-stack-request))
 (common-lisp:defun make-batch-disassociate-user-stack-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key user-stack-associations)
   (common-lisp:apply #'common-lisp:make-instance
                      'batch-disassociate-user-stack-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-disassociate-user-stack-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-disassociate-user-stack-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'user-stack-associations))
      (common-lisp:list
       (common-lisp:cons "UserStackAssociations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-disassociate-user-stack-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass batch-disassociate-user-stack-result common-lisp:nil
                       ((errors :initarg :|errors| :type
                         (common-lisp:or user-stack-association-error-list
                                         common-lisp:null)
                         :accessor %batch-disassociate-user-stack-result-errors
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'batch-disassociate-user-stack-result
                    'make-batch-disassociate-user-stack-result))
 (common-lisp:defun make-batch-disassociate-user-stack-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key errors)
   (common-lisp:apply #'common-lisp:make-instance
                      'batch-disassociate-user-stack-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-disassociate-user-stack-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-disassociate-user-stack-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'errors))
      (common-lisp:list
       (common-lisp:cons "errors"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-disassociate-user-stack-result))
   common-lisp:nil))
(common-lisp:deftype boolean () 'common-lisp:boolean)
(common-lisp:deftype boolean-object () 'common-lisp:boolean)
(common-lisp:progn
 (common-lisp:defclass certificate-based-auth-properties common-lisp:nil
                       ((certificate-authority-arn :initarg
                         :certificate-authority-arn :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %certificate-based-auth-properties-certificate-authority-arn
                         :initform common-lisp:nil)
                        (status :initarg :status :type
                         (common-lisp:or certificate-based-auth-status
                                         common-lisp:null)
                         :accessor %certificate-based-auth-properties-status
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'certificate-based-auth-properties
                    'make-certificate-based-auth-properties))
 (common-lisp:defun make-certificate-based-auth-properties
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key certificate-authority-arn status)
   (common-lisp:apply #'common-lisp:make-instance
                      'certificate-based-auth-properties
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          certificate-based-auth-properties))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          certificate-based-auth-properties))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'certificate-authority-arn))
      (common-lisp:list
       (common-lisp:cons "CertificateAuthorityArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          certificate-based-auth-properties))
   common-lisp:nil))
(common-lisp:deftype certificate-based-auth-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass compute-capacity common-lisp:nil
                       ((desired-instances :initarg :desired-instances :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         %compute-capacity-desired-instances :initform
                         (common-lisp:error
                          ":desired-instances is required"))))
 (common-lisp:export
  (common-lisp:list 'compute-capacity 'make-compute-capacity))
 (common-lisp:defun make-compute-capacity
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key desired-instances)
   (common-lisp:apply #'common-lisp:make-instance 'compute-capacity
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input compute-capacity))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input compute-capacity))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'desired-instances))
      (common-lisp:list
       (common-lisp:cons "DesiredInstances"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input compute-capacity))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass compute-capacity-status common-lisp:nil
                       ((available :initarg :available :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         %compute-capacity-status-available :initform
                         common-lisp:nil)
                        (in-use :initarg :in-use :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         %compute-capacity-status-in-use :initform
                         common-lisp:nil)
                        (running :initarg :running :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         %compute-capacity-status-running :initform
                         common-lisp:nil)
                        (desired :initarg :desired :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         %compute-capacity-status-desired :initform
                         (common-lisp:error ":desired is required"))))
 (common-lisp:export
  (common-lisp:list 'compute-capacity-status 'make-compute-capacity-status))
 (common-lisp:defun make-compute-capacity-status
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key available in-use running desired)
   (common-lisp:apply #'common-lisp:make-instance 'compute-capacity-status
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          compute-capacity-status))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          compute-capacity-status))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'desired))
      (common-lisp:list
       (common-lisp:cons "Desired"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'running))
      (common-lisp:list
       (common-lisp:cons "Running"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'in-use))
      (common-lisp:list
       (common-lisp:cons "InUse"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'available))
      (common-lisp:list
       (common-lisp:cons "Available"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          compute-capacity-status))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition concurrent-modification-exception
     (appstream-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       concurrent-modification-exception-message)))
 (common-lisp:export
  (common-lisp:list 'concurrent-modification-exception
                    'concurrent-modification-exception-message)))
(common-lisp:progn
 (common-lisp:defclass copy-image-request common-lisp:nil
                       ((destination-image-description :initarg
                         :destination-image-description :type
                         (common-lisp:or description common-lisp:null)
                         :accessor
                         %copy-image-request-destination-image-description
                         :initform common-lisp:nil)
                        (destination-region :initarg :destination-region :type
                         (common-lisp:or region-name common-lisp:null)
                         :accessor %copy-image-request-destination-region
                         :initform
                         (common-lisp:error ":destination-region is required"))
                        (destination-image-name :initarg
                         :destination-image-name :type
                         (common-lisp:or name common-lisp:null) :accessor
                         %copy-image-request-destination-image-name :initform
                         (common-lisp:error
                          ":destination-image-name is required"))
                        (source-image-name :initarg :source-image-name :type
                         (common-lisp:or name common-lisp:null) :accessor
                         %copy-image-request-source-image-name :initform
                         (common-lisp:error
                          ":source-image-name is required"))))
 (common-lisp:export
  (common-lisp:list 'copy-image-request 'make-copy-image-request))
 (common-lisp:defun make-copy-image-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key destination-image-description
                     destination-region destination-image-name
                     source-image-name)
   (common-lisp:apply #'common-lisp:make-instance 'copy-image-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input copy-image-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input copy-image-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-image-name))
      (common-lisp:list
       (common-lisp:cons "SourceImageName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'destination-image-name))
      (common-lisp:list
       (common-lisp:cons "DestinationImageName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'destination-region))
      (common-lisp:list
       (common-lisp:cons "DestinationRegion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'destination-image-description))
      (common-lisp:list
       (common-lisp:cons "DestinationImageDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input copy-image-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass copy-image-response common-lisp:nil
                       ((destination-image-name :initarg
                         :destination-image-name :type
                         (common-lisp:or name common-lisp:null) :accessor
                         %copy-image-response-destination-image-name :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'copy-image-response 'make-copy-image-response))
 (common-lisp:defun make-copy-image-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key destination-image-name)
   (common-lisp:apply #'common-lisp:make-instance 'copy-image-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input copy-image-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input copy-image-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'destination-image-name))
      (common-lisp:list
       (common-lisp:cons "DestinationImageName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input copy-image-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-app-block-request common-lisp:nil
                       ((tags :initarg :tags :type
                         (common-lisp:or tags common-lisp:null) :accessor
                         %create-app-block-request-tags :initform
                         common-lisp:nil)
                        (setup-script-details :initarg :setup-script-details
                         :type (common-lisp:or script-details common-lisp:null)
                         :accessor
                         %create-app-block-request-setup-script-details
                         :initform
                         (common-lisp:error
                          ":setup-script-details is required"))
                        (source-s3location :initarg :source-s3location :type
                         (common-lisp:or s3location common-lisp:null) :accessor
                         %create-app-block-request-source-s3location :initform
                         (common-lisp:error ":source-s3location is required"))
                        (display-name :initarg :display-name :type
                         (common-lisp:or display-name common-lisp:null)
                         :accessor %create-app-block-request-display-name
                         :initform common-lisp:nil)
                        (description :initarg :description :type
                         (common-lisp:or description common-lisp:null)
                         :accessor %create-app-block-request-description
                         :initform common-lisp:nil)
                        (name :initarg :name :type
                         (common-lisp:or name common-lisp:null) :accessor
                         %create-app-block-request-name :initform
                         (common-lisp:error ":name is required"))))
 (common-lisp:export
  (common-lisp:list 'create-app-block-request 'make-create-app-block-request))
 (common-lisp:defun make-create-app-block-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tags setup-script-details
                     source-s3location display-name description name)
   (common-lisp:apply #'common-lisp:make-instance 'create-app-block-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-app-block-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-app-block-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'display-name))
      (common-lisp:list
       (common-lisp:cons "DisplayName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-s3location))
      (common-lisp:list
       (common-lisp:cons "SourceS3Location"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'setup-script-details))
      (common-lisp:list
       (common-lisp:cons "SetupScriptDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-app-block-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-app-block-result common-lisp:nil
                       ((app-block :initarg :app-block :type
                         (common-lisp:or app-block common-lisp:null) :accessor
                         %create-app-block-result-app-block :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'create-app-block-result 'make-create-app-block-result))
 (common-lisp:defun make-create-app-block-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key app-block)
   (common-lisp:apply #'common-lisp:make-instance 'create-app-block-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-app-block-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-app-block-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'app-block))
      (common-lisp:list
       (common-lisp:cons "AppBlock"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-app-block-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-application-request common-lisp:nil
                       ((tags :initarg :tags :type
                         (common-lisp:or tags common-lisp:null) :accessor
                         %create-application-request-tags :initform
                         common-lisp:nil)
                        (app-block-arn :initarg :app-block-arn :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %create-application-request-app-block-arn :initform
                         (common-lisp:error ":app-block-arn is required"))
                        (instance-families :initarg :instance-families :type
                         (common-lisp:or string-list common-lisp:null)
                         :accessor
                         %create-application-request-instance-families
                         :initform
                         (common-lisp:error ":instance-families is required"))
                        (platforms :initarg :platforms :type
                         (common-lisp:or platforms common-lisp:null) :accessor
                         %create-application-request-platforms :initform
                         (common-lisp:error ":platforms is required"))
                        (launch-parameters :initarg :launch-parameters :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %create-application-request-launch-parameters
                         :initform common-lisp:nil)
                        (working-directory :initarg :working-directory :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %create-application-request-working-directory
                         :initform common-lisp:nil)
                        (launch-path :initarg :launch-path :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %create-application-request-launch-path :initform
                         (common-lisp:error ":launch-path is required"))
                        (icon-s3location :initarg :icon-s3location :type
                         (common-lisp:or s3location common-lisp:null) :accessor
                         %create-application-request-icon-s3location :initform
                         (common-lisp:error ":icon-s3location is required"))
                        (description :initarg :description :type
                         (common-lisp:or description common-lisp:null)
                         :accessor %create-application-request-description
                         :initform common-lisp:nil)
                        (display-name :initarg :display-name :type
                         (common-lisp:or display-name common-lisp:null)
                         :accessor %create-application-request-display-name
                         :initform common-lisp:nil)
                        (name :initarg :name :type
                         (common-lisp:or name common-lisp:null) :accessor
                         %create-application-request-name :initform
                         (common-lisp:error ":name is required"))))
 (common-lisp:export
  (common-lisp:list 'create-application-request
                    'make-create-application-request))
 (common-lisp:defun make-create-application-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tags app-block-arn instance-families
                     platforms launch-parameters working-directory launch-path
                     icon-s3location description display-name name)
   (common-lisp:apply #'common-lisp:make-instance 'create-application-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-application-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-application-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'display-name))
      (common-lisp:list
       (common-lisp:cons "DisplayName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'icon-s3location))
      (common-lisp:list
       (common-lisp:cons "IconS3Location"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'launch-path))
      (common-lisp:list
       (common-lisp:cons "LaunchPath"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'working-directory))
      (common-lisp:list
       (common-lisp:cons "WorkingDirectory"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'launch-parameters))
      (common-lisp:list
       (common-lisp:cons "LaunchParameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'platforms))
      (common-lisp:list
       (common-lisp:cons "Platforms"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-families))
      (common-lisp:list
       (common-lisp:cons "InstanceFamilies"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'app-block-arn))
      (common-lisp:list
       (common-lisp:cons "AppBlockArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-application-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-application-result common-lisp:nil
                       ((application :initarg :application :type
                         (common-lisp:or application common-lisp:null)
                         :accessor %create-application-result-application
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'create-application-result
                    'make-create-application-result))
 (common-lisp:defun make-create-application-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key application)
   (common-lisp:apply #'common-lisp:make-instance 'create-application-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-application-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-application-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'application))
      (common-lisp:list
       (common-lisp:cons "Application"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-application-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-directory-config-request common-lisp:nil
                       ((certificate-based-auth-properties :initarg
                         :certificate-based-auth-properties :type
                         (common-lisp:or certificate-based-auth-properties
                                         common-lisp:null)
                         :accessor
                         %create-directory-config-request-certificate-based-auth-properties
                         :initform common-lisp:nil)
                        (service-account-credentials :initarg
                         :service-account-credentials :type
                         (common-lisp:or service-account-credentials
                                         common-lisp:null)
                         :accessor
                         %create-directory-config-request-service-account-credentials
                         :initform common-lisp:nil)
                        (organizational-unit-distinguished-names :initarg
                         :organizational-unit-distinguished-names :type
                         (common-lisp:or
                          organizational-unit-distinguished-names-list
                          common-lisp:null)
                         :accessor
                         %create-directory-config-request-organizational-unit-distinguished-names
                         :initform
                         (common-lisp:error
                          ":organizational-unit-distinguished-names is required"))
                        (directory-name :initarg :directory-name :type
                         (common-lisp:or directory-name common-lisp:null)
                         :accessor
                         %create-directory-config-request-directory-name
                         :initform
                         (common-lisp:error ":directory-name is required"))))
 (common-lisp:export
  (common-lisp:list 'create-directory-config-request
                    'make-create-directory-config-request))
 (common-lisp:defun make-create-directory-config-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key certificate-based-auth-properties
                     service-account-credentials
                     organizational-unit-distinguished-names directory-name)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-directory-config-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-directory-config-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-directory-config-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'directory-name))
      (common-lisp:list
       (common-lisp:cons "DirectoryName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'organizational-unit-distinguished-names))
      (common-lisp:list
       (common-lisp:cons "OrganizationalUnitDistinguishedNames"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'service-account-credentials))
      (common-lisp:list
       (common-lisp:cons "ServiceAccountCredentials"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'certificate-based-auth-properties))
      (common-lisp:list
       (common-lisp:cons "CertificateBasedAuthProperties"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-directory-config-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-directory-config-result common-lisp:nil
                       ((directory-config :initarg :directory-config :type
                         (common-lisp:or directory-config common-lisp:null)
                         :accessor
                         %create-directory-config-result-directory-config
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'create-directory-config-result
                    'make-create-directory-config-result))
 (common-lisp:defun make-create-directory-config-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key directory-config)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-directory-config-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-directory-config-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-directory-config-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'directory-config))
      (common-lisp:list
       (common-lisp:cons "DirectoryConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-directory-config-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-entitlement-request common-lisp:nil
                       ((attributes :initarg :attributes :type
                         (common-lisp:or entitlement-attribute-list
                                         common-lisp:null)
                         :accessor %create-entitlement-request-attributes
                         :initform
                         (common-lisp:error ":attributes is required"))
                        (app-visibility :initarg :app-visibility :type
                         (common-lisp:or app-visibility common-lisp:null)
                         :accessor %create-entitlement-request-app-visibility
                         :initform
                         (common-lisp:error ":app-visibility is required"))
                        (description :initarg :description :type
                         (common-lisp:or description common-lisp:null)
                         :accessor %create-entitlement-request-description
                         :initform common-lisp:nil)
                        (stack-name :initarg :stack-name :type
                         (common-lisp:or name common-lisp:null) :accessor
                         %create-entitlement-request-stack-name :initform
                         (common-lisp:error ":stack-name is required"))
                        (name :initarg :name :type
                         (common-lisp:or name common-lisp:null) :accessor
                         %create-entitlement-request-name :initform
                         (common-lisp:error ":name is required"))))
 (common-lisp:export
  (common-lisp:list 'create-entitlement-request
                    'make-create-entitlement-request))
 (common-lisp:defun make-create-entitlement-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key attributes app-visibility description
                     stack-name name)
   (common-lisp:apply #'common-lisp:make-instance 'create-entitlement-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-entitlement-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-entitlement-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stack-name))
      (common-lisp:list
       (common-lisp:cons "StackName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'app-visibility))
      (common-lisp:list
       (common-lisp:cons "AppVisibility"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'attributes))
      (common-lisp:list
       (common-lisp:cons "Attributes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-entitlement-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-entitlement-result common-lisp:nil
                       ((entitlement :initarg :entitlement :type
                         (common-lisp:or entitlement common-lisp:null)
                         :accessor %create-entitlement-result-entitlement
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'create-entitlement-result
                    'make-create-entitlement-result))
 (common-lisp:defun make-create-entitlement-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key entitlement)
   (common-lisp:apply #'common-lisp:make-instance 'create-entitlement-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-entitlement-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-entitlement-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'entitlement))
      (common-lisp:list
       (common-lisp:cons "Entitlement"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-entitlement-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-fleet-request common-lisp:nil
                       ((session-script-s3location :initarg
                         :session-script-s3location :type
                         (common-lisp:or s3location common-lisp:null) :accessor
                         %create-fleet-request-session-script-s3location
                         :initform common-lisp:nil)
                        (usb-device-filter-strings :initarg
                         :usb-device-filter-strings :type
                         (common-lisp:or usb-device-filter-strings
                                         common-lisp:null)
                         :accessor
                         %create-fleet-request-usb-device-filter-strings
                         :initform common-lisp:nil)
                        (max-concurrent-sessions :initarg
                         :max-concurrent-sessions :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         %create-fleet-request-max-concurrent-sessions
                         :initform common-lisp:nil)
                        (platform :initarg :platform :type
                         (common-lisp:or platform-type common-lisp:null)
                         :accessor %create-fleet-request-platform :initform
                         common-lisp:nil)
                        (stream-view :initarg :stream-view :type
                         (common-lisp:or stream-view common-lisp:null)
                         :accessor %create-fleet-request-stream-view :initform
                         common-lisp:nil)
                        (iam-role-arn :initarg :iam-role-arn :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %create-fleet-request-iam-role-arn :initform
                         common-lisp:nil)
                        (idle-disconnect-timeout-in-seconds :initarg
                         :idle-disconnect-timeout-in-seconds :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         %create-fleet-request-idle-disconnect-timeout-in-seconds
                         :initform common-lisp:nil)
                        (tags :initarg :tags :type
                         (common-lisp:or tags common-lisp:null) :accessor
                         %create-fleet-request-tags :initform common-lisp:nil)
                        (domain-join-info :initarg :domain-join-info :type
                         (common-lisp:or domain-join-info common-lisp:null)
                         :accessor %create-fleet-request-domain-join-info
                         :initform common-lisp:nil)
                        (enable-default-internet-access :initarg
                         :enable-default-internet-access :type
                         (common-lisp:or boolean-object common-lisp:null)
                         :accessor
                         %create-fleet-request-enable-default-internet-access
                         :initform common-lisp:nil)
                        (display-name :initarg :display-name :type
                         (common-lisp:or display-name common-lisp:null)
                         :accessor %create-fleet-request-display-name :initform
                         common-lisp:nil)
                        (description :initarg :description :type
                         (common-lisp:or description common-lisp:null)
                         :accessor %create-fleet-request-description :initform
                         common-lisp:nil)
                        (disconnect-timeout-in-seconds :initarg
                         :disconnect-timeout-in-seconds :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         %create-fleet-request-disconnect-timeout-in-seconds
                         :initform common-lisp:nil)
                        (max-user-duration-in-seconds :initarg
                         :max-user-duration-in-seconds :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         %create-fleet-request-max-user-duration-in-seconds
                         :initform common-lisp:nil)
                        (vpc-config :initarg :vpc-config :type
                         (common-lisp:or vpc-config common-lisp:null) :accessor
                         %create-fleet-request-vpc-config :initform
                         common-lisp:nil)
                        (compute-capacity :initarg :compute-capacity :type
                         (common-lisp:or compute-capacity common-lisp:null)
                         :accessor %create-fleet-request-compute-capacity
                         :initform common-lisp:nil)
                        (fleet-type :initarg :fleet-type :type
                         (common-lisp:or fleet-type common-lisp:null) :accessor
                         %create-fleet-request-fleet-type :initform
                         common-lisp:nil)
                        (instance-type :initarg :instance-type :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %create-fleet-request-instance-type :initform
                         (common-lisp:error ":instance-type is required"))
                        (image-arn :initarg :image-arn :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %create-fleet-request-image-arn :initform
                         common-lisp:nil)
                        (image-name :initarg :image-name :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %create-fleet-request-image-name :initform
                         common-lisp:nil)
                        (name :initarg :name :type
                         (common-lisp:or name common-lisp:null) :accessor
                         %create-fleet-request-name :initform
                         (common-lisp:error ":name is required"))))
 (common-lisp:export
  (common-lisp:list 'create-fleet-request 'make-create-fleet-request))
 (common-lisp:defun make-create-fleet-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key session-script-s3location
                     usb-device-filter-strings max-concurrent-sessions platform
                     stream-view iam-role-arn
                     idle-disconnect-timeout-in-seconds tags domain-join-info
                     enable-default-internet-access display-name description
                     disconnect-timeout-in-seconds max-user-duration-in-seconds
                     vpc-config compute-capacity fleet-type instance-type
                     image-arn image-name name)
   (common-lisp:apply #'common-lisp:make-instance 'create-fleet-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input create-fleet-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input create-fleet-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'image-name))
      (common-lisp:list
       (common-lisp:cons "ImageName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'image-arn))
      (common-lisp:list
       (common-lisp:cons "ImageArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-type))
      (common-lisp:list
       (common-lisp:cons "InstanceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'fleet-type))
      (common-lisp:list
       (common-lisp:cons "FleetType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'compute-capacity))
      (common-lisp:list
       (common-lisp:cons "ComputeCapacity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpc-config))
      (common-lisp:list
       (common-lisp:cons "VpcConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'max-user-duration-in-seconds))
      (common-lisp:list
       (common-lisp:cons "MaxUserDurationInSeconds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'disconnect-timeout-in-seconds))
      (common-lisp:list
       (common-lisp:cons "DisconnectTimeoutInSeconds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'display-name))
      (common-lisp:list
       (common-lisp:cons "DisplayName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'enable-default-internet-access))
      (common-lisp:list
       (common-lisp:cons "EnableDefaultInternetAccess"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-join-info))
      (common-lisp:list
       (common-lisp:cons "DomainJoinInfo"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'idle-disconnect-timeout-in-seconds))
      (common-lisp:list
       (common-lisp:cons "IdleDisconnectTimeoutInSeconds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'iam-role-arn))
      (common-lisp:list
       (common-lisp:cons "IamRoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stream-view))
      (common-lisp:list
       (common-lisp:cons "StreamView"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'platform))
      (common-lisp:list
       (common-lisp:cons "Platform"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'max-concurrent-sessions))
      (common-lisp:list
       (common-lisp:cons "MaxConcurrentSessions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'usb-device-filter-strings))
      (common-lisp:list
       (common-lisp:cons "UsbDeviceFilterStrings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'session-script-s3location))
      (common-lisp:list
       (common-lisp:cons "SessionScriptS3Location"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input create-fleet-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-fleet-result common-lisp:nil
                       ((fleet :initarg :fleet :type
                         (common-lisp:or fleet common-lisp:null) :accessor
                         %create-fleet-result-fleet :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'create-fleet-result 'make-create-fleet-result))
 (common-lisp:defun make-create-fleet-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key fleet)
   (common-lisp:apply #'common-lisp:make-instance 'create-fleet-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input create-fleet-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input create-fleet-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'fleet))
      (common-lisp:list
       (common-lisp:cons "Fleet"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input create-fleet-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-image-builder-request common-lisp:nil
                       ((access-endpoints :initarg :access-endpoints :type
                         (common-lisp:or access-endpoint-list common-lisp:null)
                         :accessor
                         %create-image-builder-request-access-endpoints
                         :initform common-lisp:nil)
                        (tags :initarg :tags :type
                         (common-lisp:or tags common-lisp:null) :accessor
                         %create-image-builder-request-tags :initform
                         common-lisp:nil)
                        (appstream-agent-version :initarg
                         :appstream-agent-version :type
                         (common-lisp:or appstream-agent-version
                                         common-lisp:null)
                         :accessor
                         %create-image-builder-request-appstream-agent-version
                         :initform common-lisp:nil)
                        (domain-join-info :initarg :domain-join-info :type
                         (common-lisp:or domain-join-info common-lisp:null)
                         :accessor
                         %create-image-builder-request-domain-join-info
                         :initform common-lisp:nil)
                        (enable-default-internet-access :initarg
                         :enable-default-internet-access :type
                         (common-lisp:or boolean-object common-lisp:null)
                         :accessor
                         %create-image-builder-request-enable-default-internet-access
                         :initform common-lisp:nil)
                        (iam-role-arn :initarg :iam-role-arn :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %create-image-builder-request-iam-role-arn :initform
                         common-lisp:nil)
                        (vpc-config :initarg :vpc-config :type
                         (common-lisp:or vpc-config common-lisp:null) :accessor
                         %create-image-builder-request-vpc-config :initform
                         common-lisp:nil)
                        (display-name :initarg :display-name :type
                         (common-lisp:or display-name common-lisp:null)
                         :accessor %create-image-builder-request-display-name
                         :initform common-lisp:nil)
                        (description :initarg :description :type
                         (common-lisp:or description common-lisp:null)
                         :accessor %create-image-builder-request-description
                         :initform common-lisp:nil)
                        (instance-type :initarg :instance-type :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %create-image-builder-request-instance-type :initform
                         (common-lisp:error ":instance-type is required"))
                        (image-arn :initarg :image-arn :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %create-image-builder-request-image-arn :initform
                         common-lisp:nil)
                        (image-name :initarg :image-name :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %create-image-builder-request-image-name :initform
                         common-lisp:nil)
                        (name :initarg :name :type
                         (common-lisp:or name common-lisp:null) :accessor
                         %create-image-builder-request-name :initform
                         (common-lisp:error ":name is required"))))
 (common-lisp:export
  (common-lisp:list 'create-image-builder-request
                    'make-create-image-builder-request))
 (common-lisp:defun make-create-image-builder-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key access-endpoints tags
                     appstream-agent-version domain-join-info
                     enable-default-internet-access iam-role-arn vpc-config
                     display-name description instance-type image-arn
                     image-name name)
   (common-lisp:apply #'common-lisp:make-instance 'create-image-builder-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-image-builder-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-image-builder-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'image-name))
      (common-lisp:list
       (common-lisp:cons "ImageName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'image-arn))
      (common-lisp:list
       (common-lisp:cons "ImageArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-type))
      (common-lisp:list
       (common-lisp:cons "InstanceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'display-name))
      (common-lisp:list
       (common-lisp:cons "DisplayName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpc-config))
      (common-lisp:list
       (common-lisp:cons "VpcConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'iam-role-arn))
      (common-lisp:list
       (common-lisp:cons "IamRoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'enable-default-internet-access))
      (common-lisp:list
       (common-lisp:cons "EnableDefaultInternetAccess"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-join-info))
      (common-lisp:list
       (common-lisp:cons "DomainJoinInfo"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'appstream-agent-version))
      (common-lisp:list
       (common-lisp:cons "AppstreamAgentVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'access-endpoints))
      (common-lisp:list
       (common-lisp:cons "AccessEndpoints"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-image-builder-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-image-builder-result common-lisp:nil
                       ((image-builder :initarg :image-builder :type
                         (common-lisp:or image-builder common-lisp:null)
                         :accessor %create-image-builder-result-image-builder
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'create-image-builder-result
                    'make-create-image-builder-result))
 (common-lisp:defun make-create-image-builder-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key image-builder)
   (common-lisp:apply #'common-lisp:make-instance 'create-image-builder-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-image-builder-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-image-builder-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'image-builder))
      (common-lisp:list
       (common-lisp:cons "ImageBuilder"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-image-builder-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-image-builder-streaming-urlrequest
                       common-lisp:nil
                       ((validity :initarg :validity :type
                         (common-lisp:or long common-lisp:null) :accessor
                         %create-image-builder-streaming-urlrequest-validity
                         :initform common-lisp:nil)
                        (name :initarg :name :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %create-image-builder-streaming-urlrequest-name
                         :initform (common-lisp:error ":name is required"))))
 (common-lisp:export
  (common-lisp:list 'create-image-builder-streaming-urlrequest
                    'make-create-image-builder-streaming-urlrequest))
 (common-lisp:defun make-create-image-builder-streaming-urlrequest
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key validity name)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-image-builder-streaming-urlrequest
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-image-builder-streaming-urlrequest))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-image-builder-streaming-urlrequest))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'validity))
      (common-lisp:list
       (common-lisp:cons "Validity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-image-builder-streaming-urlrequest))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-image-builder-streaming-urlresult common-lisp:nil
                       ((expires :initarg :expires :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %create-image-builder-streaming-urlresult-expires
                         :initform common-lisp:nil)
                        (streaming-url :initarg :streaming-url :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %create-image-builder-streaming-urlresult-streaming-url
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'create-image-builder-streaming-urlresult
                    'make-create-image-builder-streaming-urlresult))
 (common-lisp:defun make-create-image-builder-streaming-urlresult
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key expires streaming-url)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-image-builder-streaming-urlresult
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-image-builder-streaming-urlresult))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-image-builder-streaming-urlresult))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'streaming-url))
      (common-lisp:list
       (common-lisp:cons "StreamingURL"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'expires))
      (common-lisp:list
       (common-lisp:cons "Expires"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-image-builder-streaming-urlresult))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-stack-request common-lisp:nil
                       ((streaming-experience-settings :initarg
                         :streaming-experience-settings :type
                         (common-lisp:or streaming-experience-settings
                                         common-lisp:null)
                         :accessor
                         %create-stack-request-streaming-experience-settings
                         :initform common-lisp:nil)
                        (embed-host-domains :initarg :embed-host-domains :type
                         (common-lisp:or embed-host-domains common-lisp:null)
                         :accessor %create-stack-request-embed-host-domains
                         :initform common-lisp:nil)
                        (access-endpoints :initarg :access-endpoints :type
                         (common-lisp:or access-endpoint-list common-lisp:null)
                         :accessor %create-stack-request-access-endpoints
                         :initform common-lisp:nil)
                        (tags :initarg :tags :type
                         (common-lisp:or tags common-lisp:null) :accessor
                         %create-stack-request-tags :initform common-lisp:nil)
                        (application-settings :initarg :application-settings
                         :type
                         (common-lisp:or application-settings common-lisp:null)
                         :accessor %create-stack-request-application-settings
                         :initform common-lisp:nil)
                        (user-settings :initarg :user-settings :type
                         (common-lisp:or user-setting-list common-lisp:null)
                         :accessor %create-stack-request-user-settings
                         :initform common-lisp:nil)
                        (feedback-url :initarg :feedback-url :type
                         (common-lisp:or feedback-url common-lisp:null)
                         :accessor %create-stack-request-feedback-url :initform
                         common-lisp:nil)
                        (redirect-url :initarg :redirect-url :type
                         (common-lisp:or redirect-url common-lisp:null)
                         :accessor %create-stack-request-redirect-url :initform
                         common-lisp:nil)
                        (storage-connectors :initarg :storage-connectors :type
                         (common-lisp:or storage-connector-list
                                         common-lisp:null)
                         :accessor %create-stack-request-storage-connectors
                         :initform common-lisp:nil)
                        (display-name :initarg :display-name :type
                         (common-lisp:or display-name common-lisp:null)
                         :accessor %create-stack-request-display-name :initform
                         common-lisp:nil)
                        (description :initarg :description :type
                         (common-lisp:or description common-lisp:null)
                         :accessor %create-stack-request-description :initform
                         common-lisp:nil)
                        (name :initarg :name :type
                         (common-lisp:or name common-lisp:null) :accessor
                         %create-stack-request-name :initform
                         (common-lisp:error ":name is required"))))
 (common-lisp:export
  (common-lisp:list 'create-stack-request 'make-create-stack-request))
 (common-lisp:defun make-create-stack-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key streaming-experience-settings
                     embed-host-domains access-endpoints tags
                     application-settings user-settings feedback-url
                     redirect-url storage-connectors display-name description
                     name)
   (common-lisp:apply #'common-lisp:make-instance 'create-stack-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input create-stack-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input create-stack-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'display-name))
      (common-lisp:list
       (common-lisp:cons "DisplayName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'storage-connectors))
      (common-lisp:list
       (common-lisp:cons "StorageConnectors"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'redirect-url))
      (common-lisp:list
       (common-lisp:cons "RedirectURL"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'feedback-url))
      (common-lisp:list
       (common-lisp:cons "FeedbackURL"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-settings))
      (common-lisp:list
       (common-lisp:cons "UserSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'application-settings))
      (common-lisp:list
       (common-lisp:cons "ApplicationSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'access-endpoints))
      (common-lisp:list
       (common-lisp:cons "AccessEndpoints"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'embed-host-domains))
      (common-lisp:list
       (common-lisp:cons "EmbedHostDomains"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'streaming-experience-settings))
      (common-lisp:list
       (common-lisp:cons "StreamingExperienceSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input create-stack-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-stack-result common-lisp:nil
                       ((stack :initarg :stack :type
                         (common-lisp:or stack common-lisp:null) :accessor
                         %create-stack-result-stack :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'create-stack-result 'make-create-stack-result))
 (common-lisp:defun make-create-stack-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key stack)
   (common-lisp:apply #'common-lisp:make-instance 'create-stack-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input create-stack-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input create-stack-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stack))
      (common-lisp:list
       (common-lisp:cons "Stack"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input create-stack-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-streaming-urlrequest common-lisp:nil
                       ((session-context :initarg :session-context :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %create-streaming-urlrequest-session-context :initform
                         common-lisp:nil)
                        (validity :initarg :validity :type
                         (common-lisp:or long common-lisp:null) :accessor
                         %create-streaming-urlrequest-validity :initform
                         common-lisp:nil)
                        (application-id :initarg :application-id :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %create-streaming-urlrequest-application-id :initform
                         common-lisp:nil)
                        (user-id :initarg :user-id :type
                         (common-lisp:or streaming-url-user-id
                                         common-lisp:null)
                         :accessor %create-streaming-urlrequest-user-id
                         :initform (common-lisp:error ":user-id is required"))
                        (fleet-name :initarg :fleet-name :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %create-streaming-urlrequest-fleet-name :initform
                         (common-lisp:error ":fleet-name is required"))
                        (stack-name :initarg :stack-name :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %create-streaming-urlrequest-stack-name :initform
                         (common-lisp:error ":stack-name is required"))))
 (common-lisp:export
  (common-lisp:list 'create-streaming-urlrequest
                    'make-create-streaming-urlrequest))
 (common-lisp:defun make-create-streaming-urlrequest
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key session-context validity application-id
                     user-id fleet-name stack-name)
   (common-lisp:apply #'common-lisp:make-instance 'create-streaming-urlrequest
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-streaming-urlrequest))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-streaming-urlrequest))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stack-name))
      (common-lisp:list
       (common-lisp:cons "StackName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'fleet-name))
      (common-lisp:list
       (common-lisp:cons "FleetName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-id))
      (common-lisp:list
       (common-lisp:cons "UserId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'application-id))
      (common-lisp:list
       (common-lisp:cons "ApplicationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'validity))
      (common-lisp:list
       (common-lisp:cons "Validity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'session-context))
      (common-lisp:list
       (common-lisp:cons "SessionContext"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-streaming-urlrequest))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-streaming-urlresult common-lisp:nil
                       ((expires :initarg :expires :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %create-streaming-urlresult-expires :initform
                         common-lisp:nil)
                        (streaming-url :initarg :streaming-url :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %create-streaming-urlresult-streaming-url :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'create-streaming-urlresult
                    'make-create-streaming-urlresult))
 (common-lisp:defun make-create-streaming-urlresult
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key expires streaming-url)
   (common-lisp:apply #'common-lisp:make-instance 'create-streaming-urlresult
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-streaming-urlresult))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-streaming-urlresult))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'streaming-url))
      (common-lisp:list
       (common-lisp:cons "StreamingURL"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'expires))
      (common-lisp:list
       (common-lisp:cons "Expires"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-streaming-urlresult))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-updated-image-request common-lisp:nil
                       ((dry-run :initarg :|dryRun| :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         %create-updated-image-request-dry-run :initform
                         common-lisp:nil)
                        (new-image-tags :initarg :|newImageTags| :type
                         (common-lisp:or tags common-lisp:null) :accessor
                         %create-updated-image-request-new-image-tags :initform
                         common-lisp:nil)
                        (new-image-display-name :initarg :|newImageDisplayName|
                         :type (common-lisp:or display-name common-lisp:null)
                         :accessor
                         %create-updated-image-request-new-image-display-name
                         :initform common-lisp:nil)
                        (new-image-description :initarg :|newImageDescription|
                         :type (common-lisp:or description common-lisp:null)
                         :accessor
                         %create-updated-image-request-new-image-description
                         :initform common-lisp:nil)
                        (new-image-name :initarg :|newImageName| :type
                         (common-lisp:or name common-lisp:null) :accessor
                         %create-updated-image-request-new-image-name :initform
                         (common-lisp:error ":newimagename is required"))
                        (existing-image-name :initarg :|existingImageName|
                         :type (common-lisp:or name common-lisp:null) :accessor
                         %create-updated-image-request-existing-image-name
                         :initform
                         (common-lisp:error
                          ":existingimagename is required"))))
 (common-lisp:export
  (common-lisp:list 'create-updated-image-request
                    'make-create-updated-image-request))
 (common-lisp:defun make-create-updated-image-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key dry-run new-image-tags
                     new-image-display-name new-image-description
                     new-image-name existing-image-name)
   (common-lisp:apply #'common-lisp:make-instance 'create-updated-image-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-updated-image-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-updated-image-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'existing-image-name))
      (common-lisp:list
       (common-lisp:cons "existingImageName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'new-image-name))
      (common-lisp:list
       (common-lisp:cons "newImageName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'new-image-description))
      (common-lisp:list
       (common-lisp:cons "newImageDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'new-image-display-name))
      (common-lisp:list
       (common-lisp:cons "newImageDisplayName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'new-image-tags))
      (common-lisp:list
       (common-lisp:cons "newImageTags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dry-run))
      (common-lisp:list
       (common-lisp:cons "dryRun"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-updated-image-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-updated-image-result common-lisp:nil
                       ((can-update-image :initarg :|canUpdateImage| :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         %create-updated-image-result-can-update-image
                         :initform common-lisp:nil)
                        (image :initarg :|image| :type
                         (common-lisp:or image common-lisp:null) :accessor
                         %create-updated-image-result-image :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'create-updated-image-result
                    'make-create-updated-image-result))
 (common-lisp:defun make-create-updated-image-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key can-update-image image)
   (common-lisp:apply #'common-lisp:make-instance 'create-updated-image-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-updated-image-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-updated-image-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'image))
      (common-lisp:list
       (common-lisp:cons "image"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'can-update-image))
      (common-lisp:list
       (common-lisp:cons "canUpdateImage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-updated-image-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-usage-report-subscription-request common-lisp:nil
                       common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'create-usage-report-subscription-request
                    'make-create-usage-report-subscription-request))
 (common-lisp:defun make-create-usage-report-subscription-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-usage-report-subscription-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-usage-report-subscription-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-usage-report-subscription-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-usage-report-subscription-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-usage-report-subscription-result common-lisp:nil
                       ((schedule :initarg :schedule :type
                         (common-lisp:or usage-report-schedule
                                         common-lisp:null)
                         :accessor
                         %create-usage-report-subscription-result-schedule
                         :initform common-lisp:nil)
                        (s3bucket-name :initarg :s3bucket-name :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %create-usage-report-subscription-result-s3bucket-name
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'create-usage-report-subscription-result
                    'make-create-usage-report-subscription-result))
 (common-lisp:defun make-create-usage-report-subscription-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key schedule s3bucket-name)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-usage-report-subscription-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-usage-report-subscription-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-usage-report-subscription-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3bucket-name))
      (common-lisp:list
       (common-lisp:cons "S3BucketName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'schedule))
      (common-lisp:list
       (common-lisp:cons "Schedule"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-usage-report-subscription-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-user-request common-lisp:nil
                       ((authentication-type :initarg :authentication-type
                         :type
                         (common-lisp:or authentication-type common-lisp:null)
                         :accessor %create-user-request-authentication-type
                         :initform
                         (common-lisp:error
                          ":authentication-type is required"))
                        (last-name :initarg :last-name :type
                         (common-lisp:or user-attribute-value common-lisp:null)
                         :accessor %create-user-request-last-name :initform
                         common-lisp:nil)
                        (first-name :initarg :first-name :type
                         (common-lisp:or user-attribute-value common-lisp:null)
                         :accessor %create-user-request-first-name :initform
                         common-lisp:nil)
                        (message-action :initarg :message-action :type
                         (common-lisp:or message-action common-lisp:null)
                         :accessor %create-user-request-message-action
                         :initform common-lisp:nil)
                        (user-name :initarg :user-name :type
                         (common-lisp:or username common-lisp:null) :accessor
                         %create-user-request-user-name :initform
                         (common-lisp:error ":user-name is required"))))
 (common-lisp:export
  (common-lisp:list 'create-user-request 'make-create-user-request))
 (common-lisp:defun make-create-user-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key authentication-type last-name first-name
                     message-action user-name)
   (common-lisp:apply #'common-lisp:make-instance 'create-user-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input create-user-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input create-user-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-name))
      (common-lisp:list
       (common-lisp:cons "UserName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message-action))
      (common-lisp:list
       (common-lisp:cons "MessageAction"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'first-name))
      (common-lisp:list
       (common-lisp:cons "FirstName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-name))
      (common-lisp:list
       (common-lisp:cons "LastName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'authentication-type))
      (common-lisp:list
       (common-lisp:cons "AuthenticationType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input create-user-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-user-result common-lisp:nil common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'create-user-result 'make-create-user-result))
 (common-lisp:defun make-create-user-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance 'create-user-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input create-user-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input create-user-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input create-user-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-app-block-request common-lisp:nil
                       ((name :initarg :name :type
                         (common-lisp:or name common-lisp:null) :accessor
                         %delete-app-block-request-name :initform
                         (common-lisp:error ":name is required"))))
 (common-lisp:export
  (common-lisp:list 'delete-app-block-request 'make-delete-app-block-request))
 (common-lisp:defun make-delete-app-block-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key name)
   (common-lisp:apply #'common-lisp:make-instance 'delete-app-block-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-app-block-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-app-block-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-app-block-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-app-block-result common-lisp:nil common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'delete-app-block-result 'make-delete-app-block-result))
 (common-lisp:defun make-delete-app-block-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance 'delete-app-block-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-app-block-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-app-block-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-app-block-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-application-request common-lisp:nil
                       ((name :initarg :name :type
                         (common-lisp:or name common-lisp:null) :accessor
                         %delete-application-request-name :initform
                         (common-lisp:error ":name is required"))))
 (common-lisp:export
  (common-lisp:list 'delete-application-request
                    'make-delete-application-request))
 (common-lisp:defun make-delete-application-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key name)
   (common-lisp:apply #'common-lisp:make-instance 'delete-application-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-application-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-application-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-application-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-application-result common-lisp:nil
                       common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'delete-application-result
                    'make-delete-application-result))
 (common-lisp:defun make-delete-application-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance 'delete-application-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-application-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-application-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-application-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-directory-config-request common-lisp:nil
                       ((directory-name :initarg :directory-name :type
                         (common-lisp:or directory-name common-lisp:null)
                         :accessor
                         %delete-directory-config-request-directory-name
                         :initform
                         (common-lisp:error ":directory-name is required"))))
 (common-lisp:export
  (common-lisp:list 'delete-directory-config-request
                    'make-delete-directory-config-request))
 (common-lisp:defun make-delete-directory-config-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key directory-name)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-directory-config-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-directory-config-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-directory-config-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'directory-name))
      (common-lisp:list
       (common-lisp:cons "DirectoryName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-directory-config-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-directory-config-result common-lisp:nil
                       common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'delete-directory-config-result
                    'make-delete-directory-config-result))
 (common-lisp:defun make-delete-directory-config-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-directory-config-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-directory-config-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-directory-config-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-directory-config-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-entitlement-request common-lisp:nil
                       ((stack-name :initarg :stack-name :type
                         (common-lisp:or name common-lisp:null) :accessor
                         %delete-entitlement-request-stack-name :initform
                         (common-lisp:error ":stack-name is required"))
                        (name :initarg :name :type
                         (common-lisp:or name common-lisp:null) :accessor
                         %delete-entitlement-request-name :initform
                         (common-lisp:error ":name is required"))))
 (common-lisp:export
  (common-lisp:list 'delete-entitlement-request
                    'make-delete-entitlement-request))
 (common-lisp:defun make-delete-entitlement-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key stack-name name)
   (common-lisp:apply #'common-lisp:make-instance 'delete-entitlement-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-entitlement-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-entitlement-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stack-name))
      (common-lisp:list
       (common-lisp:cons "StackName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-entitlement-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-entitlement-result common-lisp:nil
                       common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'delete-entitlement-result
                    'make-delete-entitlement-result))
 (common-lisp:defun make-delete-entitlement-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance 'delete-entitlement-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-entitlement-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-entitlement-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-entitlement-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-fleet-request common-lisp:nil
                       ((name :initarg :name :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %delete-fleet-request-name :initform
                         (common-lisp:error ":name is required"))))
 (common-lisp:export
  (common-lisp:list 'delete-fleet-request 'make-delete-fleet-request))
 (common-lisp:defun make-delete-fleet-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key name)
   (common-lisp:apply #'common-lisp:make-instance 'delete-fleet-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input delete-fleet-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input delete-fleet-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input delete-fleet-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-fleet-result common-lisp:nil common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'delete-fleet-result 'make-delete-fleet-result))
 (common-lisp:defun make-delete-fleet-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance 'delete-fleet-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input delete-fleet-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input delete-fleet-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input delete-fleet-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-image-builder-request common-lisp:nil
                       ((name :initarg :name :type
                         (common-lisp:or name common-lisp:null) :accessor
                         %delete-image-builder-request-name :initform
                         (common-lisp:error ":name is required"))))
 (common-lisp:export
  (common-lisp:list 'delete-image-builder-request
                    'make-delete-image-builder-request))
 (common-lisp:defun make-delete-image-builder-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key name)
   (common-lisp:apply #'common-lisp:make-instance 'delete-image-builder-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-image-builder-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-image-builder-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-image-builder-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-image-builder-result common-lisp:nil
                       ((image-builder :initarg :image-builder :type
                         (common-lisp:or image-builder common-lisp:null)
                         :accessor %delete-image-builder-result-image-builder
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'delete-image-builder-result
                    'make-delete-image-builder-result))
 (common-lisp:defun make-delete-image-builder-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key image-builder)
   (common-lisp:apply #'common-lisp:make-instance 'delete-image-builder-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-image-builder-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-image-builder-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'image-builder))
      (common-lisp:list
       (common-lisp:cons "ImageBuilder"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-image-builder-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-image-permissions-request common-lisp:nil
                       ((shared-account-id :initarg :shared-account-id :type
                         (common-lisp:or aws-account-id common-lisp:null)
                         :accessor
                         %delete-image-permissions-request-shared-account-id
                         :initform
                         (common-lisp:error ":shared-account-id is required"))
                        (name :initarg :name :type
                         (common-lisp:or name common-lisp:null) :accessor
                         %delete-image-permissions-request-name :initform
                         (common-lisp:error ":name is required"))))
 (common-lisp:export
  (common-lisp:list 'delete-image-permissions-request
                    'make-delete-image-permissions-request))
 (common-lisp:defun make-delete-image-permissions-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key shared-account-id name)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-image-permissions-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-image-permissions-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-image-permissions-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'shared-account-id))
      (common-lisp:list
       (common-lisp:cons "SharedAccountId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-image-permissions-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-image-permissions-result common-lisp:nil
                       common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'delete-image-permissions-result
                    'make-delete-image-permissions-result))
 (common-lisp:defun make-delete-image-permissions-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-image-permissions-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-image-permissions-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-image-permissions-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-image-permissions-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-image-request common-lisp:nil
                       ((name :initarg :name :type
                         (common-lisp:or name common-lisp:null) :accessor
                         %delete-image-request-name :initform
                         (common-lisp:error ":name is required"))))
 (common-lisp:export
  (common-lisp:list 'delete-image-request 'make-delete-image-request))
 (common-lisp:defun make-delete-image-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key name)
   (common-lisp:apply #'common-lisp:make-instance 'delete-image-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input delete-image-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input delete-image-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input delete-image-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-image-result common-lisp:nil
                       ((image :initarg :image :type
                         (common-lisp:or image common-lisp:null) :accessor
                         %delete-image-result-image :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'delete-image-result 'make-delete-image-result))
 (common-lisp:defun make-delete-image-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key image)
   (common-lisp:apply #'common-lisp:make-instance 'delete-image-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input delete-image-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input delete-image-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'image))
      (common-lisp:list
       (common-lisp:cons "Image"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input delete-image-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-stack-request common-lisp:nil
                       ((name :initarg :name :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %delete-stack-request-name :initform
                         (common-lisp:error ":name is required"))))
 (common-lisp:export
  (common-lisp:list 'delete-stack-request 'make-delete-stack-request))
 (common-lisp:defun make-delete-stack-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key name)
   (common-lisp:apply #'common-lisp:make-instance 'delete-stack-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input delete-stack-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input delete-stack-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input delete-stack-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-stack-result common-lisp:nil common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'delete-stack-result 'make-delete-stack-result))
 (common-lisp:defun make-delete-stack-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance 'delete-stack-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input delete-stack-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input delete-stack-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input delete-stack-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-usage-report-subscription-request common-lisp:nil
                       common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'delete-usage-report-subscription-request
                    'make-delete-usage-report-subscription-request))
 (common-lisp:defun make-delete-usage-report-subscription-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-usage-report-subscription-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-usage-report-subscription-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-usage-report-subscription-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-usage-report-subscription-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-usage-report-subscription-result common-lisp:nil
                       common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'delete-usage-report-subscription-result
                    'make-delete-usage-report-subscription-result))
 (common-lisp:defun make-delete-usage-report-subscription-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-usage-report-subscription-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-usage-report-subscription-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-usage-report-subscription-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-usage-report-subscription-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-user-request common-lisp:nil
                       ((authentication-type :initarg :authentication-type
                         :type
                         (common-lisp:or authentication-type common-lisp:null)
                         :accessor %delete-user-request-authentication-type
                         :initform
                         (common-lisp:error
                          ":authentication-type is required"))
                        (user-name :initarg :user-name :type
                         (common-lisp:or username common-lisp:null) :accessor
                         %delete-user-request-user-name :initform
                         (common-lisp:error ":user-name is required"))))
 (common-lisp:export
  (common-lisp:list 'delete-user-request 'make-delete-user-request))
 (common-lisp:defun make-delete-user-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key authentication-type user-name)
   (common-lisp:apply #'common-lisp:make-instance 'delete-user-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input delete-user-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input delete-user-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-name))
      (common-lisp:list
       (common-lisp:cons "UserName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'authentication-type))
      (common-lisp:list
       (common-lisp:cons "AuthenticationType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input delete-user-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-user-result common-lisp:nil common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'delete-user-result 'make-delete-user-result))
 (common-lisp:defun make-delete-user-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance 'delete-user-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input delete-user-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input delete-user-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input delete-user-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-app-blocks-request common-lisp:nil
                       ((max-results :initarg :max-results :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         %describe-app-blocks-request-max-results :initform
                         common-lisp:nil)
                        (next-token :initarg :next-token :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %describe-app-blocks-request-next-token :initform
                         common-lisp:nil)
                        (arns :initarg :arns :type
                         (common-lisp:or arn-list common-lisp:null) :accessor
                         %describe-app-blocks-request-arns :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-app-blocks-request
                    'make-describe-app-blocks-request))
 (common-lisp:defun make-describe-app-blocks-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key max-results next-token arns)
   (common-lisp:apply #'common-lisp:make-instance 'describe-app-blocks-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-app-blocks-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-app-blocks-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arns))
      (common-lisp:list
       (common-lisp:cons "Arns"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-app-blocks-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-app-blocks-result common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %describe-app-blocks-result-next-token :initform
                         common-lisp:nil)
                        (app-blocks :initarg :app-blocks :type
                         (common-lisp:or app-blocks common-lisp:null) :accessor
                         %describe-app-blocks-result-app-blocks :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-app-blocks-result
                    'make-describe-app-blocks-result))
 (common-lisp:defun make-describe-app-blocks-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token app-blocks)
   (common-lisp:apply #'common-lisp:make-instance 'describe-app-blocks-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-app-blocks-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-app-blocks-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'app-blocks))
      (common-lisp:list
       (common-lisp:cons "AppBlocks"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-app-blocks-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-application-fleet-associations-request
                       common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %describe-application-fleet-associations-request-next-token
                         :initform common-lisp:nil)
                        (max-results :initarg :max-results :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         %describe-application-fleet-associations-request-max-results
                         :initform common-lisp:nil)
                        (application-arn :initarg :application-arn :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %describe-application-fleet-associations-request-application-arn
                         :initform common-lisp:nil)
                        (fleet-name :initarg :fleet-name :type
                         (common-lisp:or name common-lisp:null) :accessor
                         %describe-application-fleet-associations-request-fleet-name
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-application-fleet-associations-request
                    'make-describe-application-fleet-associations-request))
 (common-lisp:defun make-describe-application-fleet-associations-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token max-results application-arn
                     fleet-name)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-application-fleet-associations-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-application-fleet-associations-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-application-fleet-associations-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'fleet-name))
      (common-lisp:list
       (common-lisp:cons "FleetName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'application-arn))
      (common-lisp:list
       (common-lisp:cons "ApplicationArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-application-fleet-associations-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-application-fleet-associations-result
                       common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %describe-application-fleet-associations-result-next-token
                         :initform common-lisp:nil)
                        (application-fleet-associations :initarg
                         :application-fleet-associations :type
                         (common-lisp:or application-fleet-association-list
                                         common-lisp:null)
                         :accessor
                         %describe-application-fleet-associations-result-application-fleet-associations
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-application-fleet-associations-result
                    'make-describe-application-fleet-associations-result))
 (common-lisp:defun make-describe-application-fleet-associations-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token
                     application-fleet-associations)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-application-fleet-associations-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-application-fleet-associations-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-application-fleet-associations-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'application-fleet-associations))
      (common-lisp:list
       (common-lisp:cons "ApplicationFleetAssociations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-application-fleet-associations-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-applications-request common-lisp:nil
                       ((max-results :initarg :max-results :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         %describe-applications-request-max-results :initform
                         common-lisp:nil)
                        (next-token :initarg :next-token :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %describe-applications-request-next-token :initform
                         common-lisp:nil)
                        (arns :initarg :arns :type
                         (common-lisp:or arn-list common-lisp:null) :accessor
                         %describe-applications-request-arns :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-applications-request
                    'make-describe-applications-request))
 (common-lisp:defun make-describe-applications-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key max-results next-token arns)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-applications-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-applications-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-applications-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arns))
      (common-lisp:list
       (common-lisp:cons "Arns"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-applications-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-applications-result common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %describe-applications-result-next-token :initform
                         common-lisp:nil)
                        (applications :initarg :applications :type
                         (common-lisp:or applications common-lisp:null)
                         :accessor %describe-applications-result-applications
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-applications-result
                    'make-describe-applications-result))
 (common-lisp:defun make-describe-applications-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token applications)
   (common-lisp:apply #'common-lisp:make-instance 'describe-applications-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-applications-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-applications-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'applications))
      (common-lisp:list
       (common-lisp:cons "Applications"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-applications-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-directory-configs-request common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %describe-directory-configs-request-next-token
                         :initform common-lisp:nil)
                        (max-results :initarg :max-results :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         %describe-directory-configs-request-max-results
                         :initform common-lisp:nil)
                        (directory-names :initarg :directory-names :type
                         (common-lisp:or directory-name-list common-lisp:null)
                         :accessor
                         %describe-directory-configs-request-directory-names
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-directory-configs-request
                    'make-describe-directory-configs-request))
 (common-lisp:defun make-describe-directory-configs-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token max-results directory-names)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-directory-configs-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-directory-configs-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-directory-configs-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'directory-names))
      (common-lisp:list
       (common-lisp:cons "DirectoryNames"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-directory-configs-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-directory-configs-result common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %describe-directory-configs-result-next-token
                         :initform common-lisp:nil)
                        (directory-configs :initarg :directory-configs :type
                         (common-lisp:or directory-config-list
                                         common-lisp:null)
                         :accessor
                         %describe-directory-configs-result-directory-configs
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-directory-configs-result
                    'make-describe-directory-configs-result))
 (common-lisp:defun make-describe-directory-configs-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token directory-configs)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-directory-configs-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-directory-configs-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-directory-configs-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'directory-configs))
      (common-lisp:list
       (common-lisp:cons "DirectoryConfigs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-directory-configs-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-entitlements-request common-lisp:nil
                       ((max-results :initarg :max-results :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         %describe-entitlements-request-max-results :initform
                         common-lisp:nil)
                        (next-token :initarg :next-token :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %describe-entitlements-request-next-token :initform
                         common-lisp:nil)
                        (stack-name :initarg :stack-name :type
                         (common-lisp:or name common-lisp:null) :accessor
                         %describe-entitlements-request-stack-name :initform
                         (common-lisp:error ":stack-name is required"))
                        (name :initarg :name :type
                         (common-lisp:or name common-lisp:null) :accessor
                         %describe-entitlements-request-name :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-entitlements-request
                    'make-describe-entitlements-request))
 (common-lisp:defun make-describe-entitlements-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key max-results next-token stack-name name)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-entitlements-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-entitlements-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-entitlements-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stack-name))
      (common-lisp:list
       (common-lisp:cons "StackName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-entitlements-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-entitlements-result common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %describe-entitlements-result-next-token :initform
                         common-lisp:nil)
                        (entitlements :initarg :entitlements :type
                         (common-lisp:or entitlement-list common-lisp:null)
                         :accessor %describe-entitlements-result-entitlements
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-entitlements-result
                    'make-describe-entitlements-result))
 (common-lisp:defun make-describe-entitlements-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token entitlements)
   (common-lisp:apply #'common-lisp:make-instance 'describe-entitlements-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-entitlements-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-entitlements-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'entitlements))
      (common-lisp:list
       (common-lisp:cons "Entitlements"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-entitlements-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-fleets-request common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %describe-fleets-request-next-token :initform
                         common-lisp:nil)
                        (names :initarg :names :type
                         (common-lisp:or string-list common-lisp:null)
                         :accessor %describe-fleets-request-names :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-fleets-request 'make-describe-fleets-request))
 (common-lisp:defun make-describe-fleets-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token names)
   (common-lisp:apply #'common-lisp:make-instance 'describe-fleets-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-fleets-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-fleets-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'names))
      (common-lisp:list
       (common-lisp:cons "Names"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-fleets-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-fleets-result common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %describe-fleets-result-next-token :initform
                         common-lisp:nil)
                        (fleets :initarg :fleets :type
                         (common-lisp:or fleet-list common-lisp:null) :accessor
                         %describe-fleets-result-fleets :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-fleets-result 'make-describe-fleets-result))
 (common-lisp:defun make-describe-fleets-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token fleets)
   (common-lisp:apply #'common-lisp:make-instance 'describe-fleets-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-fleets-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-fleets-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'fleets))
      (common-lisp:list
       (common-lisp:cons "Fleets"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-fleets-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-image-builders-request common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %describe-image-builders-request-next-token :initform
                         common-lisp:nil)
                        (max-results :initarg :max-results :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         %describe-image-builders-request-max-results :initform
                         common-lisp:nil)
                        (names :initarg :names :type
                         (common-lisp:or string-list common-lisp:null)
                         :accessor %describe-image-builders-request-names
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-image-builders-request
                    'make-describe-image-builders-request))
 (common-lisp:defun make-describe-image-builders-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token max-results names)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-image-builders-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-image-builders-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-image-builders-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'names))
      (common-lisp:list
       (common-lisp:cons "Names"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-image-builders-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-image-builders-result common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %describe-image-builders-result-next-token :initform
                         common-lisp:nil)
                        (image-builders :initarg :image-builders :type
                         (common-lisp:or image-builder-list common-lisp:null)
                         :accessor
                         %describe-image-builders-result-image-builders
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-image-builders-result
                    'make-describe-image-builders-result))
 (common-lisp:defun make-describe-image-builders-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token image-builders)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-image-builders-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-image-builders-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-image-builders-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'image-builders))
      (common-lisp:list
       (common-lisp:cons "ImageBuilders"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-image-builders-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-image-permissions-request common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %describe-image-permissions-request-next-token
                         :initform common-lisp:nil)
                        (shared-aws-account-ids :initarg
                         :shared-aws-account-ids :type
                         (common-lisp:or aws-account-id-list common-lisp:null)
                         :accessor
                         %describe-image-permissions-request-shared-aws-account-ids
                         :initform common-lisp:nil)
                        (max-results :initarg :max-results :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor
                         %describe-image-permissions-request-max-results
                         :initform common-lisp:nil)
                        (name :initarg :name :type
                         (common-lisp:or name common-lisp:null) :accessor
                         %describe-image-permissions-request-name :initform
                         (common-lisp:error ":name is required"))))
 (common-lisp:export
  (common-lisp:list 'describe-image-permissions-request
                    'make-describe-image-permissions-request))
 (common-lisp:defun make-describe-image-permissions-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token shared-aws-account-ids
                     max-results name)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-image-permissions-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-image-permissions-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-image-permissions-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'shared-aws-account-ids))
      (common-lisp:list
       (common-lisp:cons "SharedAwsAccountIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-image-permissions-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-image-permissions-result common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %describe-image-permissions-result-next-token
                         :initform common-lisp:nil)
                        (shared-image-permissions-list :initarg
                         :shared-image-permissions-list :type
                         (common-lisp:or shared-image-permissions-list
                                         common-lisp:null)
                         :accessor
                         %describe-image-permissions-result-shared-image-permissions-list
                         :initform common-lisp:nil)
                        (name :initarg :name :type
                         (common-lisp:or name common-lisp:null) :accessor
                         %describe-image-permissions-result-name :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-image-permissions-result
                    'make-describe-image-permissions-result))
 (common-lisp:defun make-describe-image-permissions-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token shared-image-permissions-list
                     name)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-image-permissions-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-image-permissions-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-image-permissions-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'shared-image-permissions-list))
      (common-lisp:list
       (common-lisp:cons "SharedImagePermissionsList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-image-permissions-result))
   common-lisp:nil))
(common-lisp:deftype describe-images-max-results () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass describe-images-request common-lisp:nil
                       ((max-results :initarg :max-results :type
                         (common-lisp:or describe-images-max-results
                                         common-lisp:null)
                         :accessor %describe-images-request-max-results
                         :initform common-lisp:nil)
                        (next-token :initarg :next-token :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %describe-images-request-next-token :initform
                         common-lisp:nil)
                        (type :initarg :type :type
                         (common-lisp:or visibility-type common-lisp:null)
                         :accessor %describe-images-request-type :initform
                         common-lisp:nil)
                        (arns :initarg :arns :type
                         (common-lisp:or arn-list common-lisp:null) :accessor
                         %describe-images-request-arns :initform
                         common-lisp:nil)
                        (names :initarg :names :type
                         (common-lisp:or string-list common-lisp:null)
                         :accessor %describe-images-request-names :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-images-request 'make-describe-images-request))
 (common-lisp:defun make-describe-images-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key max-results next-token type arns names)
   (common-lisp:apply #'common-lisp:make-instance 'describe-images-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-images-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-images-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'names))
      (common-lisp:list
       (common-lisp:cons "Names"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arns))
      (common-lisp:list
       (common-lisp:cons "Arns"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-images-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-images-result common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %describe-images-result-next-token :initform
                         common-lisp:nil)
                        (images :initarg :images :type
                         (common-lisp:or image-list common-lisp:null) :accessor
                         %describe-images-result-images :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-images-result 'make-describe-images-result))
 (common-lisp:defun make-describe-images-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token images)
   (common-lisp:apply #'common-lisp:make-instance 'describe-images-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-images-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-images-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'images))
      (common-lisp:list
       (common-lisp:cons "Images"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-images-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-sessions-request common-lisp:nil
                       ((authentication-type :initarg :authentication-type
                         :type
                         (common-lisp:or authentication-type common-lisp:null)
                         :accessor
                         %describe-sessions-request-authentication-type
                         :initform common-lisp:nil)
                        (limit :initarg :limit :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         %describe-sessions-request-limit :initform
                         common-lisp:nil)
                        (next-token :initarg :next-token :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %describe-sessions-request-next-token :initform
                         common-lisp:nil)
                        (user-id :initarg :user-id :type
                         (common-lisp:or user-id common-lisp:null) :accessor
                         %describe-sessions-request-user-id :initform
                         common-lisp:nil)
                        (fleet-name :initarg :fleet-name :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %describe-sessions-request-fleet-name :initform
                         (common-lisp:error ":fleet-name is required"))
                        (stack-name :initarg :stack-name :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %describe-sessions-request-stack-name :initform
                         (common-lisp:error ":stack-name is required"))))
 (common-lisp:export
  (common-lisp:list 'describe-sessions-request
                    'make-describe-sessions-request))
 (common-lisp:defun make-describe-sessions-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key authentication-type limit next-token
                     user-id fleet-name stack-name)
   (common-lisp:apply #'common-lisp:make-instance 'describe-sessions-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-sessions-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-sessions-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stack-name))
      (common-lisp:list
       (common-lisp:cons "StackName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'fleet-name))
      (common-lisp:list
       (common-lisp:cons "FleetName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-id))
      (common-lisp:list
       (common-lisp:cons "UserId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'limit))
      (common-lisp:list
       (common-lisp:cons "Limit"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'authentication-type))
      (common-lisp:list
       (common-lisp:cons "AuthenticationType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-sessions-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-sessions-result common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %describe-sessions-result-next-token :initform
                         common-lisp:nil)
                        (sessions :initarg :sessions :type
                         (common-lisp:or session-list common-lisp:null)
                         :accessor %describe-sessions-result-sessions :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-sessions-result 'make-describe-sessions-result))
 (common-lisp:defun make-describe-sessions-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token sessions)
   (common-lisp:apply #'common-lisp:make-instance 'describe-sessions-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-sessions-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-sessions-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sessions))
      (common-lisp:list
       (common-lisp:cons "Sessions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-sessions-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-stacks-request common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %describe-stacks-request-next-token :initform
                         common-lisp:nil)
                        (names :initarg :names :type
                         (common-lisp:or string-list common-lisp:null)
                         :accessor %describe-stacks-request-names :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-stacks-request 'make-describe-stacks-request))
 (common-lisp:defun make-describe-stacks-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token names)
   (common-lisp:apply #'common-lisp:make-instance 'describe-stacks-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-stacks-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-stacks-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'names))
      (common-lisp:list
       (common-lisp:cons "Names"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-stacks-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-stacks-result common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %describe-stacks-result-next-token :initform
                         common-lisp:nil)
                        (stacks :initarg :stacks :type
                         (common-lisp:or stack-list common-lisp:null) :accessor
                         %describe-stacks-result-stacks :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-stacks-result 'make-describe-stacks-result))
 (common-lisp:defun make-describe-stacks-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token stacks)
   (common-lisp:apply #'common-lisp:make-instance 'describe-stacks-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-stacks-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-stacks-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stacks))
      (common-lisp:list
       (common-lisp:cons "Stacks"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-stacks-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-usage-report-subscriptions-request
                       common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %describe-usage-report-subscriptions-request-next-token
                         :initform common-lisp:nil)
                        (max-results :initarg :max-results :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         %describe-usage-report-subscriptions-request-max-results
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-usage-report-subscriptions-request
                    'make-describe-usage-report-subscriptions-request))
 (common-lisp:defun make-describe-usage-report-subscriptions-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token max-results)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-usage-report-subscriptions-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-usage-report-subscriptions-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-usage-report-subscriptions-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-usage-report-subscriptions-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-usage-report-subscriptions-result
                       common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %describe-usage-report-subscriptions-result-next-token
                         :initform common-lisp:nil)
                        (usage-report-subscriptions :initarg
                         :usage-report-subscriptions :type
                         (common-lisp:or usage-report-subscription-list
                                         common-lisp:null)
                         :accessor
                         %describe-usage-report-subscriptions-result-usage-report-subscriptions
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-usage-report-subscriptions-result
                    'make-describe-usage-report-subscriptions-result))
 (common-lisp:defun make-describe-usage-report-subscriptions-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token usage-report-subscriptions)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-usage-report-subscriptions-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-usage-report-subscriptions-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-usage-report-subscriptions-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'usage-report-subscriptions))
      (common-lisp:list
       (common-lisp:cons "UsageReportSubscriptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-usage-report-subscriptions-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-user-stack-associations-request common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %describe-user-stack-associations-request-next-token
                         :initform common-lisp:nil)
                        (max-results :initarg :max-results :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor
                         %describe-user-stack-associations-request-max-results
                         :initform common-lisp:nil)
                        (authentication-type :initarg :authentication-type
                         :type
                         (common-lisp:or authentication-type common-lisp:null)
                         :accessor
                         %describe-user-stack-associations-request-authentication-type
                         :initform common-lisp:nil)
                        (user-name :initarg :user-name :type
                         (common-lisp:or username common-lisp:null) :accessor
                         %describe-user-stack-associations-request-user-name
                         :initform common-lisp:nil)
                        (stack-name :initarg :stack-name :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %describe-user-stack-associations-request-stack-name
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-user-stack-associations-request
                    'make-describe-user-stack-associations-request))
 (common-lisp:defun make-describe-user-stack-associations-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token max-results
                     authentication-type user-name stack-name)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-user-stack-associations-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-user-stack-associations-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-user-stack-associations-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stack-name))
      (common-lisp:list
       (common-lisp:cons "StackName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-name))
      (common-lisp:list
       (common-lisp:cons "UserName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'authentication-type))
      (common-lisp:list
       (common-lisp:cons "AuthenticationType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-user-stack-associations-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-user-stack-associations-result common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %describe-user-stack-associations-result-next-token
                         :initform common-lisp:nil)
                        (user-stack-associations :initarg
                         :user-stack-associations :type
                         (common-lisp:or user-stack-association-list
                                         common-lisp:null)
                         :accessor
                         %describe-user-stack-associations-result-user-stack-associations
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-user-stack-associations-result
                    'make-describe-user-stack-associations-result))
 (common-lisp:defun make-describe-user-stack-associations-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token user-stack-associations)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-user-stack-associations-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-user-stack-associations-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-user-stack-associations-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'user-stack-associations))
      (common-lisp:list
       (common-lisp:cons "UserStackAssociations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-user-stack-associations-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-users-request common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %describe-users-request-next-token :initform
                         common-lisp:nil)
                        (max-results :initarg :max-results :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         %describe-users-request-max-results :initform
                         common-lisp:nil)
                        (authentication-type :initarg :authentication-type
                         :type
                         (common-lisp:or authentication-type common-lisp:null)
                         :accessor %describe-users-request-authentication-type
                         :initform
                         (common-lisp:error
                          ":authentication-type is required"))))
 (common-lisp:export
  (common-lisp:list 'describe-users-request 'make-describe-users-request))
 (common-lisp:defun make-describe-users-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token max-results
                     authentication-type)
   (common-lisp:apply #'common-lisp:make-instance 'describe-users-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-users-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-users-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'authentication-type))
      (common-lisp:list
       (common-lisp:cons "AuthenticationType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-users-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-users-result common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %describe-users-result-next-token :initform
                         common-lisp:nil)
                        (users :initarg :users :type
                         (common-lisp:or user-list common-lisp:null) :accessor
                         %describe-users-result-users :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-users-result 'make-describe-users-result))
 (common-lisp:defun make-describe-users-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token users)
   (common-lisp:apply #'common-lisp:make-instance 'describe-users-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-users-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-users-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'users))
      (common-lisp:list
       (common-lisp:cons "Users"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-users-result))
   common-lisp:nil))
(common-lisp:deftype description () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass directory-config common-lisp:nil
                       ((certificate-based-auth-properties :initarg
                         :certificate-based-auth-properties :type
                         (common-lisp:or certificate-based-auth-properties
                                         common-lisp:null)
                         :accessor
                         %directory-config-certificate-based-auth-properties
                         :initform common-lisp:nil)
                        (created-time :initarg :created-time :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %directory-config-created-time :initform
                         common-lisp:nil)
                        (service-account-credentials :initarg
                         :service-account-credentials :type
                         (common-lisp:or service-account-credentials
                                         common-lisp:null)
                         :accessor
                         %directory-config-service-account-credentials
                         :initform common-lisp:nil)
                        (organizational-unit-distinguished-names :initarg
                         :organizational-unit-distinguished-names :type
                         (common-lisp:or
                          organizational-unit-distinguished-names-list
                          common-lisp:null)
                         :accessor
                         %directory-config-organizational-unit-distinguished-names
                         :initform common-lisp:nil)
                        (directory-name :initarg :directory-name :type
                         (common-lisp:or directory-name common-lisp:null)
                         :accessor %directory-config-directory-name :initform
                         (common-lisp:error ":directory-name is required"))))
 (common-lisp:export
  (common-lisp:list 'directory-config 'make-directory-config))
 (common-lisp:defun make-directory-config
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key certificate-based-auth-properties
                     created-time service-account-credentials
                     organizational-unit-distinguished-names directory-name)
   (common-lisp:apply #'common-lisp:make-instance 'directory-config
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input directory-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input directory-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'directory-name))
      (common-lisp:list
       (common-lisp:cons "DirectoryName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'organizational-unit-distinguished-names))
      (common-lisp:list
       (common-lisp:cons "OrganizationalUnitDistinguishedNames"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'service-account-credentials))
      (common-lisp:list
       (common-lisp:cons "ServiceAccountCredentials"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-time))
      (common-lisp:list
       (common-lisp:cons "CreatedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'certificate-based-auth-properties))
      (common-lisp:list
       (common-lisp:cons "CertificateBasedAuthProperties"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input directory-config))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype directory-config-list ()
   '(trivial-types:proper-list directory-config))
 (common-lisp:defun |make-directory-config-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list directory-config))
   aws-sdk/generator/shape::members))
(common-lisp:deftype directory-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype directory-name-list ()
   '(trivial-types:proper-list directory-name))
 (common-lisp:defun |make-directory-name-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list directory-name))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass disable-user-request common-lisp:nil
                       ((authentication-type :initarg :authentication-type
                         :type
                         (common-lisp:or authentication-type common-lisp:null)
                         :accessor %disable-user-request-authentication-type
                         :initform
                         (common-lisp:error
                          ":authentication-type is required"))
                        (user-name :initarg :user-name :type
                         (common-lisp:or username common-lisp:null) :accessor
                         %disable-user-request-user-name :initform
                         (common-lisp:error ":user-name is required"))))
 (common-lisp:export
  (common-lisp:list 'disable-user-request 'make-disable-user-request))
 (common-lisp:defun make-disable-user-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key authentication-type user-name)
   (common-lisp:apply #'common-lisp:make-instance 'disable-user-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input disable-user-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input disable-user-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-name))
      (common-lisp:list
       (common-lisp:cons "UserName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'authentication-type))
      (common-lisp:list
       (common-lisp:cons "AuthenticationType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input disable-user-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass disable-user-result common-lisp:nil common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'disable-user-result 'make-disable-user-result))
 (common-lisp:defun make-disable-user-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance 'disable-user-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input disable-user-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input disable-user-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input disable-user-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass disassociate-application-fleet-request common-lisp:nil
                       ((application-arn :initarg :application-arn :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %disassociate-application-fleet-request-application-arn
                         :initform
                         (common-lisp:error ":application-arn is required"))
                        (fleet-name :initarg :fleet-name :type
                         (common-lisp:or name common-lisp:null) :accessor
                         %disassociate-application-fleet-request-fleet-name
                         :initform
                         (common-lisp:error ":fleet-name is required"))))
 (common-lisp:export
  (common-lisp:list 'disassociate-application-fleet-request
                    'make-disassociate-application-fleet-request))
 (common-lisp:defun make-disassociate-application-fleet-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key application-arn fleet-name)
   (common-lisp:apply #'common-lisp:make-instance
                      'disassociate-application-fleet-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-application-fleet-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-application-fleet-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'fleet-name))
      (common-lisp:list
       (common-lisp:cons "FleetName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'application-arn))
      (common-lisp:list
       (common-lisp:cons "ApplicationArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-application-fleet-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass disassociate-application-fleet-result common-lisp:nil
                       common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'disassociate-application-fleet-result
                    'make-disassociate-application-fleet-result))
 (common-lisp:defun make-disassociate-application-fleet-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance
                      'disassociate-application-fleet-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-application-fleet-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-application-fleet-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-application-fleet-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass disassociate-application-from-entitlement-request
                       common-lisp:nil
                       ((application-identifier :initarg
                         :application-identifier :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %disassociate-application-from-entitlement-request-application-identifier
                         :initform
                         (common-lisp:error
                          ":application-identifier is required"))
                        (entitlement-name :initarg :entitlement-name :type
                         (common-lisp:or name common-lisp:null) :accessor
                         %disassociate-application-from-entitlement-request-entitlement-name
                         :initform
                         (common-lisp:error ":entitlement-name is required"))
                        (stack-name :initarg :stack-name :type
                         (common-lisp:or name common-lisp:null) :accessor
                         %disassociate-application-from-entitlement-request-stack-name
                         :initform
                         (common-lisp:error ":stack-name is required"))))
 (common-lisp:export
  (common-lisp:list 'disassociate-application-from-entitlement-request
                    'make-disassociate-application-from-entitlement-request))
 (common-lisp:defun make-disassociate-application-from-entitlement-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key application-identifier entitlement-name
                     stack-name)
   (common-lisp:apply #'common-lisp:make-instance
                      'disassociate-application-from-entitlement-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-application-from-entitlement-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-application-from-entitlement-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stack-name))
      (common-lisp:list
       (common-lisp:cons "StackName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'entitlement-name))
      (common-lisp:list
       (common-lisp:cons "EntitlementName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'application-identifier))
      (common-lisp:list
       (common-lisp:cons "ApplicationIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-application-from-entitlement-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass disassociate-application-from-entitlement-result
                       common-lisp:nil common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'disassociate-application-from-entitlement-result
                    'make-disassociate-application-from-entitlement-result))
 (common-lisp:defun make-disassociate-application-from-entitlement-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance
                      'disassociate-application-from-entitlement-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-application-from-entitlement-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-application-from-entitlement-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-application-from-entitlement-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass disassociate-fleet-request common-lisp:nil
                       ((stack-name :initarg :stack-name :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %disassociate-fleet-request-stack-name :initform
                         (common-lisp:error ":stack-name is required"))
                        (fleet-name :initarg :fleet-name :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %disassociate-fleet-request-fleet-name :initform
                         (common-lisp:error ":fleet-name is required"))))
 (common-lisp:export
  (common-lisp:list 'disassociate-fleet-request
                    'make-disassociate-fleet-request))
 (common-lisp:defun make-disassociate-fleet-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key stack-name fleet-name)
   (common-lisp:apply #'common-lisp:make-instance 'disassociate-fleet-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-fleet-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-fleet-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'fleet-name))
      (common-lisp:list
       (common-lisp:cons "FleetName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stack-name))
      (common-lisp:list
       (common-lisp:cons "StackName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-fleet-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass disassociate-fleet-result common-lisp:nil
                       common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'disassociate-fleet-result
                    'make-disassociate-fleet-result))
 (common-lisp:defun make-disassociate-fleet-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance 'disassociate-fleet-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-fleet-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-fleet-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-fleet-result))
   common-lisp:nil))
(common-lisp:deftype display-name () 'common-lisp:string)
(common-lisp:deftype domain () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass domain-join-info common-lisp:nil
                       ((organizational-unit-distinguished-name :initarg
                         :organizational-unit-distinguished-name :type
                         (common-lisp:or organizational-unit-distinguished-name
                                         common-lisp:null)
                         :accessor
                         %domain-join-info-organizational-unit-distinguished-name
                         :initform common-lisp:nil)
                        (directory-name :initarg :directory-name :type
                         (common-lisp:or directory-name common-lisp:null)
                         :accessor %domain-join-info-directory-name :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'domain-join-info 'make-domain-join-info))
 (common-lisp:defun make-domain-join-info
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key organizational-unit-distinguished-name
                     directory-name)
   (common-lisp:apply #'common-lisp:make-instance 'domain-join-info
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input domain-join-info))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input domain-join-info))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'directory-name))
      (common-lisp:list
       (common-lisp:cons "DirectoryName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'organizational-unit-distinguished-name))
      (common-lisp:list
       (common-lisp:cons "OrganizationalUnitDistinguishedName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input domain-join-info))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype domain-list () '(trivial-types:proper-list domain))
 (common-lisp:defun |make-domain-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list domain))
   aws-sdk/generator/shape::members))
(common-lisp:deftype embed-host-domain () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype embed-host-domains ()
   '(trivial-types:proper-list embed-host-domain))
 (common-lisp:defun |make-embed-host-domains|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list embed-host-domain))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass enable-user-request common-lisp:nil
                       ((authentication-type :initarg :authentication-type
                         :type
                         (common-lisp:or authentication-type common-lisp:null)
                         :accessor %enable-user-request-authentication-type
                         :initform
                         (common-lisp:error
                          ":authentication-type is required"))
                        (user-name :initarg :user-name :type
                         (common-lisp:or username common-lisp:null) :accessor
                         %enable-user-request-user-name :initform
                         (common-lisp:error ":user-name is required"))))
 (common-lisp:export
  (common-lisp:list 'enable-user-request 'make-enable-user-request))
 (common-lisp:defun make-enable-user-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key authentication-type user-name)
   (common-lisp:apply #'common-lisp:make-instance 'enable-user-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input enable-user-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input enable-user-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-name))
      (common-lisp:list
       (common-lisp:cons "UserName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'authentication-type))
      (common-lisp:list
       (common-lisp:cons "AuthenticationType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input enable-user-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass enable-user-result common-lisp:nil common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'enable-user-result 'make-enable-user-result))
 (common-lisp:defun make-enable-user-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance 'enable-user-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input enable-user-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input enable-user-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input enable-user-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass entitled-application common-lisp:nil
                       ((application-identifier :initarg
                         :application-identifier :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %entitled-application-application-identifier :initform
                         (common-lisp:error
                          ":application-identifier is required"))))
 (common-lisp:export
  (common-lisp:list 'entitled-application 'make-entitled-application))
 (common-lisp:defun make-entitled-application
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key application-identifier)
   (common-lisp:apply #'common-lisp:make-instance 'entitled-application
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input entitled-application))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input entitled-application))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'application-identifier))
      (common-lisp:list
       (common-lisp:cons "ApplicationIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input entitled-application))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype entitled-application-list ()
   '(trivial-types:proper-list entitled-application))
 (common-lisp:defun |make-entitled-application-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list entitled-application))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass entitlement common-lisp:nil
                       ((last-modified-time :initarg :last-modified-time :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %entitlement-last-modified-time :initform
                         common-lisp:nil)
                        (created-time :initarg :created-time :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %entitlement-created-time :initform common-lisp:nil)
                        (attributes :initarg :attributes :type
                         (common-lisp:or entitlement-attribute-list
                                         common-lisp:null)
                         :accessor %entitlement-attributes :initform
                         (common-lisp:error ":attributes is required"))
                        (app-visibility :initarg :app-visibility :type
                         (common-lisp:or app-visibility common-lisp:null)
                         :accessor %entitlement-app-visibility :initform
                         (common-lisp:error ":app-visibility is required"))
                        (description :initarg :description :type
                         (common-lisp:or description common-lisp:null)
                         :accessor %entitlement-description :initform
                         common-lisp:nil)
                        (stack-name :initarg :stack-name :type
                         (common-lisp:or name common-lisp:null) :accessor
                         %entitlement-stack-name :initform
                         (common-lisp:error ":stack-name is required"))
                        (name :initarg :name :type
                         (common-lisp:or name common-lisp:null) :accessor
                         %entitlement-name :initform
                         (common-lisp:error ":name is required"))))
 (common-lisp:export (common-lisp:list 'entitlement 'make-entitlement))
 (common-lisp:defun make-entitlement
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key last-modified-time created-time
                     attributes app-visibility description stack-name name)
   (common-lisp:apply #'common-lisp:make-instance 'entitlement
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input entitlement))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input entitlement))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stack-name))
      (common-lisp:list
       (common-lisp:cons "StackName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'app-visibility))
      (common-lisp:list
       (common-lisp:cons "AppVisibility"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'attributes))
      (common-lisp:list
       (common-lisp:cons "Attributes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-time))
      (common-lisp:list
       (common-lisp:cons "CreatedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-modified-time))
      (common-lisp:list
       (common-lisp:cons "LastModifiedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input entitlement))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition entitlement-already-exists-exception
     (appstream-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       entitlement-already-exists-exception-message)))
 (common-lisp:export
  (common-lisp:list 'entitlement-already-exists-exception
                    'entitlement-already-exists-exception-message)))
(common-lisp:progn
 (common-lisp:defclass entitlement-attribute common-lisp:nil
                       ((value :initarg :value :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %entitlement-attribute-value :initform
                         (common-lisp:error ":value is required"))
                        (name :initarg :name :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %entitlement-attribute-name :initform
                         (common-lisp:error ":name is required"))))
 (common-lisp:export
  (common-lisp:list 'entitlement-attribute 'make-entitlement-attribute))
 (common-lisp:defun make-entitlement-attribute
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key value name)
   (common-lisp:apply #'common-lisp:make-instance 'entitlement-attribute
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          entitlement-attribute))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          entitlement-attribute))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "Value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          entitlement-attribute))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype entitlement-attribute-list ()
   '(trivial-types:proper-list entitlement-attribute))
 (common-lisp:defun |make-entitlement-attribute-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list entitlement-attribute))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype entitlement-list ()
   '(trivial-types:proper-list entitlement))
 (common-lisp:defun |make-entitlement-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list entitlement))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition entitlement-not-found-exception
     (appstream-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       entitlement-not-found-exception-message)))
 (common-lisp:export
  (common-lisp:list 'entitlement-not-found-exception
                    'entitlement-not-found-exception-message)))
(common-lisp:deftype error-message () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass expire-session-request common-lisp:nil
                       ((session-id :initarg :session-id :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %expire-session-request-session-id :initform
                         (common-lisp:error ":session-id is required"))))
 (common-lisp:export
  (common-lisp:list 'expire-session-request 'make-expire-session-request))
 (common-lisp:defun make-expire-session-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key session-id)
   (common-lisp:apply #'common-lisp:make-instance 'expire-session-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          expire-session-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          expire-session-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'session-id))
      (common-lisp:list
       (common-lisp:cons "SessionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          expire-session-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass expire-session-result common-lisp:nil common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'expire-session-result 'make-expire-session-result))
 (common-lisp:defun make-expire-session-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance 'expire-session-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          expire-session-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          expire-session-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          expire-session-result))
   common-lisp:nil))
(common-lisp:deftype feedback-url () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass fleet common-lisp:nil
                       ((session-script-s3location :initarg
                         :session-script-s3location :type
                         (common-lisp:or s3location common-lisp:null) :accessor
                         %fleet-session-script-s3location :initform
                         common-lisp:nil)
                        (usb-device-filter-strings :initarg
                         :usb-device-filter-strings :type
                         (common-lisp:or usb-device-filter-strings
                                         common-lisp:null)
                         :accessor %fleet-usb-device-filter-strings :initform
                         common-lisp:nil)
                        (max-concurrent-sessions :initarg
                         :max-concurrent-sessions :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         %fleet-max-concurrent-sessions :initform
                         common-lisp:nil)
                        (platform :initarg :platform :type
                         (common-lisp:or platform-type common-lisp:null)
                         :accessor %fleet-platform :initform common-lisp:nil)
                        (stream-view :initarg :stream-view :type
                         (common-lisp:or stream-view common-lisp:null)
                         :accessor %fleet-stream-view :initform
                         common-lisp:nil)
                        (iam-role-arn :initarg :iam-role-arn :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %fleet-iam-role-arn :initform common-lisp:nil)
                        (idle-disconnect-timeout-in-seconds :initarg
                         :idle-disconnect-timeout-in-seconds :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         %fleet-idle-disconnect-timeout-in-seconds :initform
                         common-lisp:nil)
                        (domain-join-info :initarg :domain-join-info :type
                         (common-lisp:or domain-join-info common-lisp:null)
                         :accessor %fleet-domain-join-info :initform
                         common-lisp:nil)
                        (enable-default-internet-access :initarg
                         :enable-default-internet-access :type
                         (common-lisp:or boolean-object common-lisp:null)
                         :accessor %fleet-enable-default-internet-access
                         :initform common-lisp:nil)
                        (fleet-errors :initarg :fleet-errors :type
                         (common-lisp:or fleet-errors common-lisp:null)
                         :accessor %fleet-fleet-errors :initform
                         common-lisp:nil)
                        (created-time :initarg :created-time :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %fleet-created-time :initform common-lisp:nil)
                        (vpc-config :initarg :vpc-config :type
                         (common-lisp:or vpc-config common-lisp:null) :accessor
                         %fleet-vpc-config :initform common-lisp:nil)
                        (state :initarg :state :type
                         (common-lisp:or fleet-state common-lisp:null)
                         :accessor %fleet-state :initform
                         (common-lisp:error ":state is required"))
                        (disconnect-timeout-in-seconds :initarg
                         :disconnect-timeout-in-seconds :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         %fleet-disconnect-timeout-in-seconds :initform
                         common-lisp:nil)
                        (max-user-duration-in-seconds :initarg
                         :max-user-duration-in-seconds :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         %fleet-max-user-duration-in-seconds :initform
                         common-lisp:nil)
                        (compute-capacity-status :initarg
                         :compute-capacity-status :type
                         (common-lisp:or compute-capacity-status
                                         common-lisp:null)
                         :accessor %fleet-compute-capacity-status :initform
                         (common-lisp:error
                          ":compute-capacity-status is required"))
                        (fleet-type :initarg :fleet-type :type
                         (common-lisp:or fleet-type common-lisp:null) :accessor
                         %fleet-fleet-type :initform common-lisp:nil)
                        (instance-type :initarg :instance-type :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %fleet-instance-type :initform
                         (common-lisp:error ":instance-type is required"))
                        (image-arn :initarg :image-arn :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %fleet-image-arn :initform common-lisp:nil)
                        (image-name :initarg :image-name :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %fleet-image-name :initform common-lisp:nil)
                        (description :initarg :description :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %fleet-description :initform common-lisp:nil)
                        (display-name :initarg :display-name :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %fleet-display-name :initform common-lisp:nil)
                        (name :initarg :name :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %fleet-name :initform
                         (common-lisp:error ":name is required"))
                        (arn :initarg :arn :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %fleet-arn :initform
                         (common-lisp:error ":arn is required"))))
 (common-lisp:export (common-lisp:list 'fleet 'make-fleet))
 (common-lisp:defun make-fleet
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key session-script-s3location
                     usb-device-filter-strings max-concurrent-sessions platform
                     stream-view iam-role-arn
                     idle-disconnect-timeout-in-seconds domain-join-info
                     enable-default-internet-access fleet-errors created-time
                     vpc-config state disconnect-timeout-in-seconds
                     max-user-duration-in-seconds compute-capacity-status
                     fleet-type instance-type image-arn image-name description
                     display-name name arn)
   (common-lisp:apply #'common-lisp:make-instance 'fleet
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input fleet))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input fleet))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'display-name))
      (common-lisp:list
       (common-lisp:cons "DisplayName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'image-name))
      (common-lisp:list
       (common-lisp:cons "ImageName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'image-arn))
      (common-lisp:list
       (common-lisp:cons "ImageArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-type))
      (common-lisp:list
       (common-lisp:cons "InstanceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'fleet-type))
      (common-lisp:list
       (common-lisp:cons "FleetType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'compute-capacity-status))
      (common-lisp:list
       (common-lisp:cons "ComputeCapacityStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'max-user-duration-in-seconds))
      (common-lisp:list
       (common-lisp:cons "MaxUserDurationInSeconds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'disconnect-timeout-in-seconds))
      (common-lisp:list
       (common-lisp:cons "DisconnectTimeoutInSeconds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "State"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpc-config))
      (common-lisp:list
       (common-lisp:cons "VpcConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-time))
      (common-lisp:list
       (common-lisp:cons "CreatedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'fleet-errors))
      (common-lisp:list
       (common-lisp:cons "FleetErrors"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'enable-default-internet-access))
      (common-lisp:list
       (common-lisp:cons "EnableDefaultInternetAccess"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-join-info))
      (common-lisp:list
       (common-lisp:cons "DomainJoinInfo"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'idle-disconnect-timeout-in-seconds))
      (common-lisp:list
       (common-lisp:cons "IdleDisconnectTimeoutInSeconds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'iam-role-arn))
      (common-lisp:list
       (common-lisp:cons "IamRoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stream-view))
      (common-lisp:list
       (common-lisp:cons "StreamView"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'platform))
      (common-lisp:list
       (common-lisp:cons "Platform"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'max-concurrent-sessions))
      (common-lisp:list
       (common-lisp:cons "MaxConcurrentSessions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'usb-device-filter-strings))
      (common-lisp:list
       (common-lisp:cons "UsbDeviceFilterStrings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'session-script-s3location))
      (common-lisp:list
       (common-lisp:cons "SessionScriptS3Location"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input fleet))
   common-lisp:nil))
(common-lisp:deftype fleet-attribute () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype fleet-attributes ()
   '(trivial-types:proper-list fleet-attribute))
 (common-lisp:defun |make-fleet-attributes|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list fleet-attribute))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass fleet-error common-lisp:nil
                       ((error-message :initarg :error-message :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %fleet-error-error-message :initform common-lisp:nil)
                        (error-code :initarg :error-code :type
                         (common-lisp:or fleet-error-code common-lisp:null)
                         :accessor %fleet-error-error-code :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'fleet-error 'make-fleet-error))
 (common-lisp:defun make-fleet-error
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key error-message error-code)
   (common-lisp:apply #'common-lisp:make-instance 'fleet-error
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input fleet-error))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input fleet-error))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error-code))
      (common-lisp:list
       (common-lisp:cons "ErrorCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error-message))
      (common-lisp:list
       (common-lisp:cons "ErrorMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input fleet-error))
   common-lisp:nil))
(common-lisp:deftype fleet-error-code () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype fleet-errors () '(trivial-types:proper-list fleet-error))
 (common-lisp:defun |make-fleet-errors|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list fleet-error))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype fleet-list () '(trivial-types:proper-list fleet))
 (common-lisp:defun |make-fleet-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list fleet))
   aws-sdk/generator/shape::members))
(common-lisp:deftype fleet-state () 'common-lisp:string)
(common-lisp:deftype fleet-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass image common-lisp:nil
                       ((image-errors :initarg :image-errors :type
                         (common-lisp:or resource-errors common-lisp:null)
                         :accessor %image-image-errors :initform
                         common-lisp:nil)
                        (image-permissions :initarg :image-permissions :type
                         (common-lisp:or image-permissions common-lisp:null)
                         :accessor %image-image-permissions :initform
                         common-lisp:nil)
                        (appstream-agent-version :initarg
                         :appstream-agent-version :type
                         (common-lisp:or appstream-agent-version
                                         common-lisp:null)
                         :accessor %image-appstream-agent-version :initform
                         common-lisp:nil)
                        (public-base-image-released-date :initarg
                         :public-base-image-released-date :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %image-public-base-image-released-date :initform
                         common-lisp:nil)
                        (created-time :initarg :created-time :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %image-created-time :initform common-lisp:nil)
                        (applications :initarg :applications :type
                         (common-lisp:or applications common-lisp:null)
                         :accessor %image-applications :initform
                         common-lisp:nil)
                        (state-change-reason :initarg :state-change-reason
                         :type
                         (common-lisp:or image-state-change-reason
                                         common-lisp:null)
                         :accessor %image-state-change-reason :initform
                         common-lisp:nil)
                        (description :initarg :description :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %image-description :initform common-lisp:nil)
                        (platform :initarg :platform :type
                         (common-lisp:or platform-type common-lisp:null)
                         :accessor %image-platform :initform common-lisp:nil)
                        (image-builder-name :initarg :image-builder-name :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %image-image-builder-name :initform common-lisp:nil)
                        (image-builder-supported :initarg
                         :image-builder-supported :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         %image-image-builder-supported :initform
                         common-lisp:nil)
                        (visibility :initarg :visibility :type
                         (common-lisp:or visibility-type common-lisp:null)
                         :accessor %image-visibility :initform common-lisp:nil)
                        (state :initarg :state :type
                         (common-lisp:or image-state common-lisp:null)
                         :accessor %image-state :initform common-lisp:nil)
                        (display-name :initarg :display-name :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %image-display-name :initform common-lisp:nil)
                        (base-image-arn :initarg :base-image-arn :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %image-base-image-arn :initform common-lisp:nil)
                        (arn :initarg :arn :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %image-arn :initform common-lisp:nil)
                        (name :initarg :name :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %image-name :initform
                         (common-lisp:error ":name is required"))))
 (common-lisp:export (common-lisp:list 'image 'make-image))
 (common-lisp:defun make-image
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key image-errors image-permissions
                     appstream-agent-version public-base-image-released-date
                     created-time applications state-change-reason description
                     platform image-builder-name image-builder-supported
                     visibility state display-name base-image-arn arn name)
   (common-lisp:apply #'common-lisp:make-instance 'image
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input image))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input image))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'base-image-arn))
      (common-lisp:list
       (common-lisp:cons "BaseImageArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'display-name))
      (common-lisp:list
       (common-lisp:cons "DisplayName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "State"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'visibility))
      (common-lisp:list
       (common-lisp:cons "Visibility"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'image-builder-supported))
      (common-lisp:list
       (common-lisp:cons "ImageBuilderSupported"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'image-builder-name))
      (common-lisp:list
       (common-lisp:cons "ImageBuilderName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'platform))
      (common-lisp:list
       (common-lisp:cons "Platform"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state-change-reason))
      (common-lisp:list
       (common-lisp:cons "StateChangeReason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'applications))
      (common-lisp:list
       (common-lisp:cons "Applications"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-time))
      (common-lisp:list
       (common-lisp:cons "CreatedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'public-base-image-released-date))
      (common-lisp:list
       (common-lisp:cons "PublicBaseImageReleasedDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'appstream-agent-version))
      (common-lisp:list
       (common-lisp:cons "AppstreamAgentVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'image-permissions))
      (common-lisp:list
       (common-lisp:cons "ImagePermissions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'image-errors))
      (common-lisp:list
       (common-lisp:cons "ImageErrors"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input image))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass image-builder common-lisp:nil
                       ((access-endpoints :initarg :access-endpoints :type
                         (common-lisp:or access-endpoint-list common-lisp:null)
                         :accessor %image-builder-access-endpoints :initform
                         common-lisp:nil)
                        (appstream-agent-version :initarg
                         :appstream-agent-version :type
                         (common-lisp:or appstream-agent-version
                                         common-lisp:null)
                         :accessor %image-builder-appstream-agent-version
                         :initform common-lisp:nil)
                        (image-builder-errors :initarg :image-builder-errors
                         :type
                         (common-lisp:or resource-errors common-lisp:null)
                         :accessor %image-builder-image-builder-errors
                         :initform common-lisp:nil)
                        (network-access-configuration :initarg
                         :network-access-configuration :type
                         (common-lisp:or network-access-configuration
                                         common-lisp:null)
                         :accessor %image-builder-network-access-configuration
                         :initform common-lisp:nil)
                        (domain-join-info :initarg :domain-join-info :type
                         (common-lisp:or domain-join-info common-lisp:null)
                         :accessor %image-builder-domain-join-info :initform
                         common-lisp:nil)
                        (enable-default-internet-access :initarg
                         :enable-default-internet-access :type
                         (common-lisp:or boolean-object common-lisp:null)
                         :accessor
                         %image-builder-enable-default-internet-access
                         :initform common-lisp:nil)
                        (created-time :initarg :created-time :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %image-builder-created-time :initform common-lisp:nil)
                        (state-change-reason :initarg :state-change-reason
                         :type
                         (common-lisp:or image-builder-state-change-reason
                                         common-lisp:null)
                         :accessor %image-builder-state-change-reason :initform
                         common-lisp:nil)
                        (state :initarg :state :type
                         (common-lisp:or image-builder-state common-lisp:null)
                         :accessor %image-builder-state :initform
                         common-lisp:nil)
                        (iam-role-arn :initarg :iam-role-arn :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %image-builder-iam-role-arn :initform common-lisp:nil)
                        (platform :initarg :platform :type
                         (common-lisp:or platform-type common-lisp:null)
                         :accessor %image-builder-platform :initform
                         common-lisp:nil)
                        (instance-type :initarg :instance-type :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %image-builder-instance-type :initform
                         common-lisp:nil)
                        (vpc-config :initarg :vpc-config :type
                         (common-lisp:or vpc-config common-lisp:null) :accessor
                         %image-builder-vpc-config :initform common-lisp:nil)
                        (display-name :initarg :display-name :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %image-builder-display-name :initform common-lisp:nil)
                        (description :initarg :description :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %image-builder-description :initform common-lisp:nil)
                        (image-arn :initarg :image-arn :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %image-builder-image-arn :initform common-lisp:nil)
                        (arn :initarg :arn :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %image-builder-arn :initform common-lisp:nil)
                        (name :initarg :name :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %image-builder-name :initform
                         (common-lisp:error ":name is required"))))
 (common-lisp:export (common-lisp:list 'image-builder 'make-image-builder))
 (common-lisp:defun make-image-builder
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key access-endpoints appstream-agent-version
                     image-builder-errors network-access-configuration
                     domain-join-info enable-default-internet-access
                     created-time state-change-reason state iam-role-arn
                     platform instance-type vpc-config display-name description
                     image-arn arn name)
   (common-lisp:apply #'common-lisp:make-instance 'image-builder
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input image-builder))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input image-builder))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'image-arn))
      (common-lisp:list
       (common-lisp:cons "ImageArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'display-name))
      (common-lisp:list
       (common-lisp:cons "DisplayName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpc-config))
      (common-lisp:list
       (common-lisp:cons "VpcConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-type))
      (common-lisp:list
       (common-lisp:cons "InstanceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'platform))
      (common-lisp:list
       (common-lisp:cons "Platform"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'iam-role-arn))
      (common-lisp:list
       (common-lisp:cons "IamRoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "State"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state-change-reason))
      (common-lisp:list
       (common-lisp:cons "StateChangeReason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-time))
      (common-lisp:list
       (common-lisp:cons "CreatedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'enable-default-internet-access))
      (common-lisp:list
       (common-lisp:cons "EnableDefaultInternetAccess"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-join-info))
      (common-lisp:list
       (common-lisp:cons "DomainJoinInfo"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'network-access-configuration))
      (common-lisp:list
       (common-lisp:cons "NetworkAccessConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'image-builder-errors))
      (common-lisp:list
       (common-lisp:cons "ImageBuilderErrors"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'appstream-agent-version))
      (common-lisp:list
       (common-lisp:cons "AppstreamAgentVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'access-endpoints))
      (common-lisp:list
       (common-lisp:cons "AccessEndpoints"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input image-builder))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype image-builder-list ()
   '(trivial-types:proper-list image-builder))
 (common-lisp:defun |make-image-builder-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list image-builder))
   aws-sdk/generator/shape::members))
(common-lisp:deftype image-builder-state () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass image-builder-state-change-reason common-lisp:nil
                       ((message :initarg :message :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %image-builder-state-change-reason-message :initform
                         common-lisp:nil)
                        (code :initarg :code :type
                         (common-lisp:or image-builder-state-change-reason-code
                                         common-lisp:null)
                         :accessor %image-builder-state-change-reason-code
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'image-builder-state-change-reason
                    'make-image-builder-state-change-reason))
 (common-lisp:defun make-image-builder-state-change-reason
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key message code)
   (common-lisp:apply #'common-lisp:make-instance
                      'image-builder-state-change-reason
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          image-builder-state-change-reason))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          image-builder-state-change-reason))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'code))
      (common-lisp:list
       (common-lisp:cons "Code"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message))
      (common-lisp:list
       (common-lisp:cons "Message"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          image-builder-state-change-reason))
   common-lisp:nil))
(common-lisp:deftype image-builder-state-change-reason-code ()
  'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype image-list () '(trivial-types:proper-list image))
 (common-lisp:defun |make-image-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list image))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass image-permissions common-lisp:nil
                       ((allow-image-builder :initarg :|allowImageBuilder|
                         :type (common-lisp:or boolean-object common-lisp:null)
                         :accessor %image-permissions-allow-image-builder
                         :initform common-lisp:nil)
                        (allow-fleet :initarg :|allowFleet| :type
                         (common-lisp:or boolean-object common-lisp:null)
                         :accessor %image-permissions-allow-fleet :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'image-permissions 'make-image-permissions))
 (common-lisp:defun make-image-permissions
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key allow-image-builder allow-fleet)
   (common-lisp:apply #'common-lisp:make-instance 'image-permissions
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input image-permissions))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input image-permissions))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'allow-fleet))
      (common-lisp:list
       (common-lisp:cons "allowFleet"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'allow-image-builder))
      (common-lisp:list
       (common-lisp:cons "allowImageBuilder"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input image-permissions))
   common-lisp:nil))
(common-lisp:deftype image-state () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass image-state-change-reason common-lisp:nil
                       ((message :initarg :message :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %image-state-change-reason-message :initform
                         common-lisp:nil)
                        (code :initarg :code :type
                         (common-lisp:or image-state-change-reason-code
                                         common-lisp:null)
                         :accessor %image-state-change-reason-code :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'image-state-change-reason
                    'make-image-state-change-reason))
 (common-lisp:defun make-image-state-change-reason
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key message code)
   (common-lisp:apply #'common-lisp:make-instance 'image-state-change-reason
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          image-state-change-reason))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          image-state-change-reason))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'code))
      (common-lisp:list
       (common-lisp:cons "Code"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message))
      (common-lisp:list
       (common-lisp:cons "Message"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          image-state-change-reason))
   common-lisp:nil))
(common-lisp:deftype image-state-change-reason-code () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition incompatible-image-exception
     (appstream-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       incompatible-image-exception-message)))
 (common-lisp:export
  (common-lisp:list 'incompatible-image-exception
                    'incompatible-image-exception-message)))
(common-lisp:deftype integer () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:define-condition invalid-account-status-exception
     (appstream-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       invalid-account-status-exception-message)))
 (common-lisp:export
  (common-lisp:list 'invalid-account-status-exception
                    'invalid-account-status-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition invalid-parameter-combination-exception
     (appstream-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       invalid-parameter-combination-exception-message)))
 (common-lisp:export
  (common-lisp:list 'invalid-parameter-combination-exception
                    'invalid-parameter-combination-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition invalid-role-exception
     (appstream-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       invalid-role-exception-message)))
 (common-lisp:export
  (common-lisp:list 'invalid-role-exception 'invalid-role-exception-message)))
(common-lisp:progn
 (common-lisp:defclass last-report-generation-execution-error common-lisp:nil
                       ((error-message :initarg :error-message :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %last-report-generation-execution-error-error-message
                         :initform common-lisp:nil)
                        (error-code :initarg :error-code :type
                         (common-lisp:or usage-report-execution-error-code
                                         common-lisp:null)
                         :accessor
                         %last-report-generation-execution-error-error-code
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'last-report-generation-execution-error
                    'make-last-report-generation-execution-error))
 (common-lisp:defun make-last-report-generation-execution-error
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key error-message error-code)
   (common-lisp:apply #'common-lisp:make-instance
                      'last-report-generation-execution-error
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          last-report-generation-execution-error))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          last-report-generation-execution-error))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error-code))
      (common-lisp:list
       (common-lisp:cons "ErrorCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error-message))
      (common-lisp:list
       (common-lisp:cons "ErrorMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          last-report-generation-execution-error))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype last-report-generation-execution-errors ()
   '(trivial-types:proper-list last-report-generation-execution-error))
 (common-lisp:defun |make-last-report-generation-execution-errors|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            last-report-generation-execution-error))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition limit-exceeded-exception
     (appstream-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       limit-exceeded-exception-message)))
 (common-lisp:export
  (common-lisp:list 'limit-exceeded-exception
                    'limit-exceeded-exception-message)))
(common-lisp:progn
 (common-lisp:defclass list-associated-fleets-request common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %list-associated-fleets-request-next-token :initform
                         common-lisp:nil)
                        (stack-name :initarg :stack-name :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %list-associated-fleets-request-stack-name :initform
                         (common-lisp:error ":stack-name is required"))))
 (common-lisp:export
  (common-lisp:list 'list-associated-fleets-request
                    'make-list-associated-fleets-request))
 (common-lisp:defun make-list-associated-fleets-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token stack-name)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-associated-fleets-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-associated-fleets-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-associated-fleets-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stack-name))
      (common-lisp:list
       (common-lisp:cons "StackName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-associated-fleets-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-associated-fleets-result common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %list-associated-fleets-result-next-token :initform
                         common-lisp:nil)
                        (names :initarg :names :type
                         (common-lisp:or string-list common-lisp:null)
                         :accessor %list-associated-fleets-result-names
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-associated-fleets-result
                    'make-list-associated-fleets-result))
 (common-lisp:defun make-list-associated-fleets-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token names)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-associated-fleets-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-associated-fleets-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-associated-fleets-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'names))
      (common-lisp:list
       (common-lisp:cons "Names"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-associated-fleets-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-associated-stacks-request common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %list-associated-stacks-request-next-token :initform
                         common-lisp:nil)
                        (fleet-name :initarg :fleet-name :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %list-associated-stacks-request-fleet-name :initform
                         (common-lisp:error ":fleet-name is required"))))
 (common-lisp:export
  (common-lisp:list 'list-associated-stacks-request
                    'make-list-associated-stacks-request))
 (common-lisp:defun make-list-associated-stacks-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token fleet-name)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-associated-stacks-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-associated-stacks-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-associated-stacks-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'fleet-name))
      (common-lisp:list
       (common-lisp:cons "FleetName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-associated-stacks-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-associated-stacks-result common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %list-associated-stacks-result-next-token :initform
                         common-lisp:nil)
                        (names :initarg :names :type
                         (common-lisp:or string-list common-lisp:null)
                         :accessor %list-associated-stacks-result-names
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-associated-stacks-result
                    'make-list-associated-stacks-result))
 (common-lisp:defun make-list-associated-stacks-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token names)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-associated-stacks-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-associated-stacks-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-associated-stacks-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'names))
      (common-lisp:list
       (common-lisp:cons "Names"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-associated-stacks-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-entitled-applications-request common-lisp:nil
                       ((max-results :initarg :max-results :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         %list-entitled-applications-request-max-results
                         :initform common-lisp:nil)
                        (next-token :initarg :next-token :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %list-entitled-applications-request-next-token
                         :initform common-lisp:nil)
                        (entitlement-name :initarg :entitlement-name :type
                         (common-lisp:or name common-lisp:null) :accessor
                         %list-entitled-applications-request-entitlement-name
                         :initform
                         (common-lisp:error ":entitlement-name is required"))
                        (stack-name :initarg :stack-name :type
                         (common-lisp:or name common-lisp:null) :accessor
                         %list-entitled-applications-request-stack-name
                         :initform
                         (common-lisp:error ":stack-name is required"))))
 (common-lisp:export
  (common-lisp:list 'list-entitled-applications-request
                    'make-list-entitled-applications-request))
 (common-lisp:defun make-list-entitled-applications-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key max-results next-token entitlement-name
                     stack-name)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-entitled-applications-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-entitled-applications-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-entitled-applications-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stack-name))
      (common-lisp:list
       (common-lisp:cons "StackName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'entitlement-name))
      (common-lisp:list
       (common-lisp:cons "EntitlementName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-entitled-applications-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-entitled-applications-result common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %list-entitled-applications-result-next-token
                         :initform common-lisp:nil)
                        (entitled-applications :initarg :entitled-applications
                         :type
                         (common-lisp:or entitled-application-list
                                         common-lisp:null)
                         :accessor
                         %list-entitled-applications-result-entitled-applications
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-entitled-applications-result
                    'make-list-entitled-applications-result))
 (common-lisp:defun make-list-entitled-applications-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token entitled-applications)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-entitled-applications-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-entitled-applications-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-entitled-applications-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'entitled-applications))
      (common-lisp:list
       (common-lisp:cons "EntitledApplications"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-entitled-applications-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-tags-for-resource-request common-lisp:nil
                       ((resource-arn :initarg :resource-arn :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %list-tags-for-resource-request-resource-arn :initform
                         (common-lisp:error ":resource-arn is required"))))
 (common-lisp:export
  (common-lisp:list 'list-tags-for-resource-request
                    'make-list-tags-for-resource-request))
 (common-lisp:defun make-list-tags-for-resource-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key resource-arn)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-tags-for-resource-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-arn))
      (common-lisp:list
       (common-lisp:cons "ResourceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-tags-for-resource-response common-lisp:nil
                       ((tags :initarg :tags :type
                         (common-lisp:or tags common-lisp:null) :accessor
                         %list-tags-for-resource-response-tags :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-tags-for-resource-response
                    'make-list-tags-for-resource-response))
 (common-lisp:defun make-list-tags-for-resource-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tags)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-tags-for-resource-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-response))
   common-lisp:nil))
(common-lisp:deftype long () 'common-lisp:integer)
(common-lisp:deftype max-results () 'common-lisp:integer)
(common-lisp:deftype message-action () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype metadata () 'common-lisp:hash-table)
 (common-lisp:defun |make-metadata| (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:deftype name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass network-access-configuration common-lisp:nil
                       ((eni-id :initarg :eni-id :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %network-access-configuration-eni-id :initform
                         common-lisp:nil)
                        (eni-private-ip-address :initarg
                         :eni-private-ip-address :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %network-access-configuration-eni-private-ip-address
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'network-access-configuration
                    'make-network-access-configuration))
 (common-lisp:defun make-network-access-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key eni-id eni-private-ip-address)
   (common-lisp:apply #'common-lisp:make-instance 'network-access-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          network-access-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          network-access-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'eni-private-ip-address))
      (common-lisp:list
       (common-lisp:cons "EniPrivateIpAddress"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'eni-id))
      (common-lisp:list
       (common-lisp:cons "EniId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          network-access-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition operation-not-permitted-exception
     (appstream-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       operation-not-permitted-exception-message)))
 (common-lisp:export
  (common-lisp:list 'operation-not-permitted-exception
                    'operation-not-permitted-exception-message)))
(common-lisp:deftype organizational-unit-distinguished-name ()
  'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype organizational-unit-distinguished-names-list ()
   '(trivial-types:proper-list organizational-unit-distinguished-name))
 (common-lisp:defun |make-organizational-unit-distinguished-names-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            organizational-unit-distinguished-name))
   aws-sdk/generator/shape::members))
(common-lisp:deftype permission () 'common-lisp:string)
(common-lisp:deftype platform-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype platforms () '(trivial-types:proper-list platform-type))
 (common-lisp:defun |make-platforms|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list platform-type))
   aws-sdk/generator/shape::members))
(common-lisp:deftype preferred-protocol () 'common-lisp:string)
(common-lisp:deftype redirect-url () 'common-lisp:string)
(common-lisp:deftype region-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition request-limit-exceeded-exception
     (appstream-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       request-limit-exceeded-exception-message)))
 (common-lisp:export
  (common-lisp:list 'request-limit-exceeded-exception
                    'request-limit-exceeded-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition resource-already-exists-exception
     (appstream-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       resource-already-exists-exception-message)))
 (common-lisp:export
  (common-lisp:list 'resource-already-exists-exception
                    'resource-already-exists-exception-message)))
(common-lisp:progn
 (common-lisp:defclass resource-error common-lisp:nil
                       ((error-timestamp :initarg :error-timestamp :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %resource-error-error-timestamp :initform
                         common-lisp:nil)
                        (error-message :initarg :error-message :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %resource-error-error-message :initform
                         common-lisp:nil)
                        (error-code :initarg :error-code :type
                         (common-lisp:or fleet-error-code common-lisp:null)
                         :accessor %resource-error-error-code :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'resource-error 'make-resource-error))
 (common-lisp:defun make-resource-error
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key error-timestamp error-message error-code)
   (common-lisp:apply #'common-lisp:make-instance 'resource-error
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input resource-error))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input resource-error))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error-code))
      (common-lisp:list
       (common-lisp:cons "ErrorCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error-message))
      (common-lisp:list
       (common-lisp:cons "ErrorMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error-timestamp))
      (common-lisp:list
       (common-lisp:cons "ErrorTimestamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input resource-error))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype resource-errors ()
   '(trivial-types:proper-list resource-error))
 (common-lisp:defun |make-resource-errors|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list resource-error))
   aws-sdk/generator/shape::members))
(common-lisp:deftype resource-identifier () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition resource-in-use-exception
     (appstream-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       resource-in-use-exception-message)))
 (common-lisp:export
  (common-lisp:list 'resource-in-use-exception
                    'resource-in-use-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition resource-not-available-exception
     (appstream-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       resource-not-available-exception-message)))
 (common-lisp:export
  (common-lisp:list 'resource-not-available-exception
                    'resource-not-available-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition resource-not-found-exception
     (appstream-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       resource-not-found-exception-message)))
 (common-lisp:export
  (common-lisp:list 'resource-not-found-exception
                    'resource-not-found-exception-message)))
(common-lisp:deftype s3bucket () 'common-lisp:string)
(common-lisp:deftype s3key () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass s3location common-lisp:nil
                       ((s3key :initarg :s3key :type
                         (common-lisp:or s3key common-lisp:null) :accessor
                         %s3location-s3key :initform
                         (common-lisp:error ":s3key is required"))
                        (s3bucket :initarg :s3bucket :type
                         (common-lisp:or s3bucket common-lisp:null) :accessor
                         %s3location-s3bucket :initform
                         (common-lisp:error ":s3bucket is required"))))
 (common-lisp:export (common-lisp:list 's3location 'make-s3location))
 (common-lisp:defun make-s3location
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key s3key s3bucket)
   (common-lisp:apply #'common-lisp:make-instance 's3location
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input s3location))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input s3location))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3bucket))
      (common-lisp:list
       (common-lisp:cons "S3Bucket"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3key))
      (common-lisp:list
       (common-lisp:cons "S3Key"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input s3location))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass script-details common-lisp:nil
                       ((timeout-in-seconds :initarg :timeout-in-seconds :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         %script-details-timeout-in-seconds :initform
                         (common-lisp:error ":timeout-in-seconds is required"))
                        (executable-parameters :initarg :executable-parameters
                         :type (common-lisp:or string common-lisp:null)
                         :accessor %script-details-executable-parameters
                         :initform common-lisp:nil)
                        (executable-path :initarg :executable-path :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %script-details-executable-path :initform
                         (common-lisp:error ":executable-path is required"))
                        (script-s3location :initarg :script-s3location :type
                         (common-lisp:or s3location common-lisp:null) :accessor
                         %script-details-script-s3location :initform
                         (common-lisp:error
                          ":script-s3location is required"))))
 (common-lisp:export (common-lisp:list 'script-details 'make-script-details))
 (common-lisp:defun make-script-details
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key timeout-in-seconds executable-parameters
                     executable-path script-s3location)
   (common-lisp:apply #'common-lisp:make-instance 'script-details
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input script-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input script-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'script-s3location))
      (common-lisp:list
       (common-lisp:cons "ScriptS3Location"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'executable-path))
      (common-lisp:list
       (common-lisp:cons "ExecutablePath"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'executable-parameters))
      (common-lisp:list
       (common-lisp:cons "ExecutableParameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'timeout-in-seconds))
      (common-lisp:list
       (common-lisp:cons "TimeoutInSeconds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input script-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype security-group-id-list ()
   '(trivial-types:proper-list string))
 (common-lisp:defun |make-security-group-id-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list string))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass service-account-credentials common-lisp:nil
                       ((account-password :initarg :account-password :type
                         (common-lisp:or account-password common-lisp:null)
                         :accessor
                         %service-account-credentials-account-password
                         :initform
                         (common-lisp:error ":account-password is required"))
                        (account-name :initarg :account-name :type
                         (common-lisp:or account-name common-lisp:null)
                         :accessor %service-account-credentials-account-name
                         :initform
                         (common-lisp:error ":account-name is required"))))
 (common-lisp:export
  (common-lisp:list 'service-account-credentials
                    'make-service-account-credentials))
 (common-lisp:defun make-service-account-credentials
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key account-password account-name)
   (common-lisp:apply #'common-lisp:make-instance 'service-account-credentials
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          service-account-credentials))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          service-account-credentials))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-name))
      (common-lisp:list
       (common-lisp:cons "AccountName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-password))
      (common-lisp:list
       (common-lisp:cons "AccountPassword"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          service-account-credentials))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass session common-lisp:nil
                       ((network-access-configuration :initarg
                         :network-access-configuration :type
                         (common-lisp:or network-access-configuration
                                         common-lisp:null)
                         :accessor %session-network-access-configuration
                         :initform common-lisp:nil)
                        (authentication-type :initarg :authentication-type
                         :type
                         (common-lisp:or authentication-type common-lisp:null)
                         :accessor %session-authentication-type :initform
                         common-lisp:nil)
                        (max-expiration-time :initarg :max-expiration-time
                         :type (common-lisp:or timestamp common-lisp:null)
                         :accessor %session-max-expiration-time :initform
                         common-lisp:nil)
                        (start-time :initarg :start-time :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %session-start-time :initform common-lisp:nil)
                        (connection-state :initarg :connection-state :type
                         (common-lisp:or session-connection-state
                                         common-lisp:null)
                         :accessor %session-connection-state :initform
                         common-lisp:nil)
                        (state :initarg :state :type
                         (common-lisp:or session-state common-lisp:null)
                         :accessor %session-state :initform
                         (common-lisp:error ":state is required"))
                        (fleet-name :initarg :fleet-name :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %session-fleet-name :initform
                         (common-lisp:error ":fleet-name is required"))
                        (stack-name :initarg :stack-name :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %session-stack-name :initform
                         (common-lisp:error ":stack-name is required"))
                        (user-id :initarg :user-id :type
                         (common-lisp:or user-id common-lisp:null) :accessor
                         %session-user-id :initform
                         (common-lisp:error ":user-id is required"))
                        (id :initarg :id :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %session-id :initform
                         (common-lisp:error ":id is required"))))
 (common-lisp:export (common-lisp:list 'session 'make-session))
 (common-lisp:defun make-session
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key network-access-configuration
                     authentication-type max-expiration-time start-time
                     connection-state state fleet-name stack-name user-id id)
   (common-lisp:apply #'common-lisp:make-instance 'session
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input session))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input session))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-id))
      (common-lisp:list
       (common-lisp:cons "UserId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stack-name))
      (common-lisp:list
       (common-lisp:cons "StackName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'fleet-name))
      (common-lisp:list
       (common-lisp:cons "FleetName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "State"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'connection-state))
      (common-lisp:list
       (common-lisp:cons "ConnectionState"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start-time))
      (common-lisp:list
       (common-lisp:cons "StartTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-expiration-time))
      (common-lisp:list
       (common-lisp:cons "MaxExpirationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'authentication-type))
      (common-lisp:list
       (common-lisp:cons "AuthenticationType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'network-access-configuration))
      (common-lisp:list
       (common-lisp:cons "NetworkAccessConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input session))
   common-lisp:nil))
(common-lisp:deftype session-connection-state () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype session-list () '(trivial-types:proper-list session))
 (common-lisp:defun |make-session-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list session))
   aws-sdk/generator/shape::members))
(common-lisp:deftype session-state () 'common-lisp:string)
(common-lisp:deftype settings-group () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass shared-image-permissions common-lisp:nil
                       ((image-permissions :initarg :|imagePermissions| :type
                         (common-lisp:or image-permissions common-lisp:null)
                         :accessor %shared-image-permissions-image-permissions
                         :initform
                         (common-lisp:error ":imagepermissions is required"))
                        (shared-account-id :initarg :|sharedAccountId| :type
                         (common-lisp:or aws-account-id common-lisp:null)
                         :accessor %shared-image-permissions-shared-account-id
                         :initform
                         (common-lisp:error ":sharedaccountid is required"))))
 (common-lisp:export
  (common-lisp:list 'shared-image-permissions 'make-shared-image-permissions))
 (common-lisp:defun make-shared-image-permissions
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key image-permissions shared-account-id)
   (common-lisp:apply #'common-lisp:make-instance 'shared-image-permissions
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          shared-image-permissions))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          shared-image-permissions))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'shared-account-id))
      (common-lisp:list
       (common-lisp:cons "sharedAccountId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'image-permissions))
      (common-lisp:list
       (common-lisp:cons "imagePermissions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          shared-image-permissions))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype shared-image-permissions-list ()
   '(trivial-types:proper-list shared-image-permissions))
 (common-lisp:defun |make-shared-image-permissions-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            shared-image-permissions))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass stack common-lisp:nil
                       ((streaming-experience-settings :initarg
                         :streaming-experience-settings :type
                         (common-lisp:or streaming-experience-settings
                                         common-lisp:null)
                         :accessor %stack-streaming-experience-settings
                         :initform common-lisp:nil)
                        (embed-host-domains :initarg :embed-host-domains :type
                         (common-lisp:or embed-host-domains common-lisp:null)
                         :accessor %stack-embed-host-domains :initform
                         common-lisp:nil)
                        (access-endpoints :initarg :access-endpoints :type
                         (common-lisp:or access-endpoint-list common-lisp:null)
                         :accessor %stack-access-endpoints :initform
                         common-lisp:nil)
                        (application-settings :initarg :application-settings
                         :type
                         (common-lisp:or application-settings-response
                                         common-lisp:null)
                         :accessor %stack-application-settings :initform
                         common-lisp:nil)
                        (user-settings :initarg :user-settings :type
                         (common-lisp:or user-setting-list common-lisp:null)
                         :accessor %stack-user-settings :initform
                         common-lisp:nil)
                        (stack-errors :initarg :stack-errors :type
                         (common-lisp:or stack-errors common-lisp:null)
                         :accessor %stack-stack-errors :initform
                         common-lisp:nil)
                        (feedback-url :initarg :feedback-url :type
                         (common-lisp:or feedback-url common-lisp:null)
                         :accessor %stack-feedback-url :initform
                         common-lisp:nil)
                        (redirect-url :initarg :redirect-url :type
                         (common-lisp:or redirect-url common-lisp:null)
                         :accessor %stack-redirect-url :initform
                         common-lisp:nil)
                        (storage-connectors :initarg :storage-connectors :type
                         (common-lisp:or storage-connector-list
                                         common-lisp:null)
                         :accessor %stack-storage-connectors :initform
                         common-lisp:nil)
                        (created-time :initarg :created-time :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %stack-created-time :initform common-lisp:nil)
                        (display-name :initarg :display-name :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %stack-display-name :initform common-lisp:nil)
                        (description :initarg :description :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %stack-description :initform common-lisp:nil)
                        (name :initarg :name :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %stack-name :initform
                         (common-lisp:error ":name is required"))
                        (arn :initarg :arn :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %stack-arn :initform common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'stack 'make-stack))
 (common-lisp:defun make-stack
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key streaming-experience-settings
                     embed-host-domains access-endpoints application-settings
                     user-settings stack-errors feedback-url redirect-url
                     storage-connectors created-time display-name description
                     name arn)
   (common-lisp:apply #'common-lisp:make-instance 'stack
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input stack))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input stack))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'display-name))
      (common-lisp:list
       (common-lisp:cons "DisplayName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-time))
      (common-lisp:list
       (common-lisp:cons "CreatedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'storage-connectors))
      (common-lisp:list
       (common-lisp:cons "StorageConnectors"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'redirect-url))
      (common-lisp:list
       (common-lisp:cons "RedirectURL"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'feedback-url))
      (common-lisp:list
       (common-lisp:cons "FeedbackURL"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stack-errors))
      (common-lisp:list
       (common-lisp:cons "StackErrors"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-settings))
      (common-lisp:list
       (common-lisp:cons "UserSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'application-settings))
      (common-lisp:list
       (common-lisp:cons "ApplicationSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'access-endpoints))
      (common-lisp:list
       (common-lisp:cons "AccessEndpoints"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'embed-host-domains))
      (common-lisp:list
       (common-lisp:cons "EmbedHostDomains"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'streaming-experience-settings))
      (common-lisp:list
       (common-lisp:cons "StreamingExperienceSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input stack))
   common-lisp:nil))
(common-lisp:deftype stack-attribute () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype stack-attributes ()
   '(trivial-types:proper-list stack-attribute))
 (common-lisp:defun |make-stack-attributes|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list stack-attribute))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass stack-error common-lisp:nil
                       ((error-message :initarg :error-message :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %stack-error-error-message :initform common-lisp:nil)
                        (error-code :initarg :error-code :type
                         (common-lisp:or stack-error-code common-lisp:null)
                         :accessor %stack-error-error-code :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'stack-error 'make-stack-error))
 (common-lisp:defun make-stack-error
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key error-message error-code)
   (common-lisp:apply #'common-lisp:make-instance 'stack-error
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input stack-error))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input stack-error))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error-code))
      (common-lisp:list
       (common-lisp:cons "ErrorCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error-message))
      (common-lisp:list
       (common-lisp:cons "ErrorMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input stack-error))
   common-lisp:nil))
(common-lisp:deftype stack-error-code () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype stack-errors () '(trivial-types:proper-list stack-error))
 (common-lisp:defun |make-stack-errors|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list stack-error))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype stack-list () '(trivial-types:proper-list stack))
 (common-lisp:defun |make-stack-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list stack))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass start-fleet-request common-lisp:nil
                       ((name :initarg :name :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %start-fleet-request-name :initform
                         (common-lisp:error ":name is required"))))
 (common-lisp:export
  (common-lisp:list 'start-fleet-request 'make-start-fleet-request))
 (common-lisp:defun make-start-fleet-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key name)
   (common-lisp:apply #'common-lisp:make-instance 'start-fleet-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input start-fleet-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input start-fleet-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input start-fleet-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass start-fleet-result common-lisp:nil common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'start-fleet-result 'make-start-fleet-result))
 (common-lisp:defun make-start-fleet-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance 'start-fleet-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input start-fleet-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input start-fleet-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input start-fleet-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass start-image-builder-request common-lisp:nil
                       ((appstream-agent-version :initarg
                         :appstream-agent-version :type
                         (common-lisp:or appstream-agent-version
                                         common-lisp:null)
                         :accessor
                         %start-image-builder-request-appstream-agent-version
                         :initform common-lisp:nil)
                        (name :initarg :name :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %start-image-builder-request-name :initform
                         (common-lisp:error ":name is required"))))
 (common-lisp:export
  (common-lisp:list 'start-image-builder-request
                    'make-start-image-builder-request))
 (common-lisp:defun make-start-image-builder-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key appstream-agent-version name)
   (common-lisp:apply #'common-lisp:make-instance 'start-image-builder-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-image-builder-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-image-builder-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'appstream-agent-version))
      (common-lisp:list
       (common-lisp:cons "AppstreamAgentVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-image-builder-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass start-image-builder-result common-lisp:nil
                       ((image-builder :initarg :image-builder :type
                         (common-lisp:or image-builder common-lisp:null)
                         :accessor %start-image-builder-result-image-builder
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'start-image-builder-result
                    'make-start-image-builder-result))
 (common-lisp:defun make-start-image-builder-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key image-builder)
   (common-lisp:apply #'common-lisp:make-instance 'start-image-builder-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-image-builder-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-image-builder-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'image-builder))
      (common-lisp:list
       (common-lisp:cons "ImageBuilder"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-image-builder-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass stop-fleet-request common-lisp:nil
                       ((name :initarg :name :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %stop-fleet-request-name :initform
                         (common-lisp:error ":name is required"))))
 (common-lisp:export
  (common-lisp:list 'stop-fleet-request 'make-stop-fleet-request))
 (common-lisp:defun make-stop-fleet-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key name)
   (common-lisp:apply #'common-lisp:make-instance 'stop-fleet-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input stop-fleet-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input stop-fleet-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input stop-fleet-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass stop-fleet-result common-lisp:nil common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'stop-fleet-result 'make-stop-fleet-result))
 (common-lisp:defun make-stop-fleet-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance 'stop-fleet-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input stop-fleet-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input stop-fleet-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input stop-fleet-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass stop-image-builder-request common-lisp:nil
                       ((name :initarg :name :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %stop-image-builder-request-name :initform
                         (common-lisp:error ":name is required"))))
 (common-lisp:export
  (common-lisp:list 'stop-image-builder-request
                    'make-stop-image-builder-request))
 (common-lisp:defun make-stop-image-builder-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key name)
   (common-lisp:apply #'common-lisp:make-instance 'stop-image-builder-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          stop-image-builder-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          stop-image-builder-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          stop-image-builder-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass stop-image-builder-result common-lisp:nil
                       ((image-builder :initarg :image-builder :type
                         (common-lisp:or image-builder common-lisp:null)
                         :accessor %stop-image-builder-result-image-builder
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'stop-image-builder-result
                    'make-stop-image-builder-result))
 (common-lisp:defun make-stop-image-builder-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key image-builder)
   (common-lisp:apply #'common-lisp:make-instance 'stop-image-builder-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          stop-image-builder-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          stop-image-builder-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'image-builder))
      (common-lisp:list
       (common-lisp:cons "ImageBuilder"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          stop-image-builder-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass storage-connector common-lisp:nil
                       ((domains :initarg :domains :type
                         (common-lisp:or domain-list common-lisp:null)
                         :accessor %storage-connector-domains :initform
                         common-lisp:nil)
                        (resource-identifier :initarg :resource-identifier
                         :type
                         (common-lisp:or resource-identifier common-lisp:null)
                         :accessor %storage-connector-resource-identifier
                         :initform common-lisp:nil)
                        (connector-type :initarg :connector-type :type
                         (common-lisp:or storage-connector-type
                                         common-lisp:null)
                         :accessor %storage-connector-connector-type :initform
                         (common-lisp:error ":connector-type is required"))))
 (common-lisp:export
  (common-lisp:list 'storage-connector 'make-storage-connector))
 (common-lisp:defun make-storage-connector
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key domains resource-identifier
                     connector-type)
   (common-lisp:apply #'common-lisp:make-instance 'storage-connector
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input storage-connector))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input storage-connector))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'connector-type))
      (common-lisp:list
       (common-lisp:cons "ConnectorType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-identifier))
      (common-lisp:list
       (common-lisp:cons "ResourceIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domains))
      (common-lisp:list
       (common-lisp:cons "Domains"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input storage-connector))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype storage-connector-list ()
   '(trivial-types:proper-list storage-connector))
 (common-lisp:defun |make-storage-connector-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list storage-connector))
   aws-sdk/generator/shape::members))
(common-lisp:deftype storage-connector-type () 'common-lisp:string)
(common-lisp:deftype stream-view () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass streaming-experience-settings common-lisp:nil
                       ((preferred-protocol :initarg :preferred-protocol :type
                         (common-lisp:or preferred-protocol common-lisp:null)
                         :accessor
                         %streaming-experience-settings-preferred-protocol
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'streaming-experience-settings
                    'make-streaming-experience-settings))
 (common-lisp:defun make-streaming-experience-settings
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key preferred-protocol)
   (common-lisp:apply #'common-lisp:make-instance
                      'streaming-experience-settings
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          streaming-experience-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          streaming-experience-settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'preferred-protocol))
      (common-lisp:list
       (common-lisp:cons "PreferredProtocol"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          streaming-experience-settings))
   common-lisp:nil))
(common-lisp:deftype streaming-url-user-id () 'common-lisp:string)
(common-lisp:deftype string () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype string-list () '(trivial-types:proper-list string))
 (common-lisp:defun |make-string-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list string))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype subnet-id-list () '(trivial-types:proper-list string))
 (common-lisp:defun |make-subnet-id-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list string))
   aws-sdk/generator/shape::members))
(common-lisp:deftype tag-key () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype tag-key-list () '(trivial-types:proper-list tag-key))
 (common-lisp:defun |make-tag-key-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list tag-key))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass tag-resource-request common-lisp:nil
                       ((tags :initarg :tags :type
                         (common-lisp:or tags common-lisp:null) :accessor
                         %tag-resource-request-tags :initform
                         (common-lisp:error ":tags is required"))
                        (resource-arn :initarg :resource-arn :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %tag-resource-request-resource-arn :initform
                         (common-lisp:error ":resource-arn is required"))))
 (common-lisp:export
  (common-lisp:list 'tag-resource-request 'make-tag-resource-request))
 (common-lisp:defun make-tag-resource-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tags resource-arn)
   (common-lisp:apply #'common-lisp:make-instance 'tag-resource-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input tag-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input tag-resource-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-arn))
      (common-lisp:list
       (common-lisp:cons "ResourceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input tag-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass tag-resource-response common-lisp:nil common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'tag-resource-response 'make-tag-resource-response))
 (common-lisp:defun make-tag-resource-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance 'tag-resource-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          tag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          tag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          tag-resource-response))
   common-lisp:nil))
(common-lisp:deftype tag-value () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype tags () 'common-lisp:hash-table)
 (common-lisp:defun |make-tags| (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:deftype timestamp () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass untag-resource-request common-lisp:nil
                       ((tag-keys :initarg :tag-keys :type
                         (common-lisp:or tag-key-list common-lisp:null)
                         :accessor %untag-resource-request-tag-keys :initform
                         (common-lisp:error ":tag-keys is required"))
                        (resource-arn :initarg :resource-arn :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %untag-resource-request-resource-arn :initform
                         (common-lisp:error ":resource-arn is required"))))
 (common-lisp:export
  (common-lisp:list 'untag-resource-request 'make-untag-resource-request))
 (common-lisp:defun make-untag-resource-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tag-keys resource-arn)
   (common-lisp:apply #'common-lisp:make-instance 'untag-resource-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-arn))
      (common-lisp:list
       (common-lisp:cons "ResourceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tag-keys))
      (common-lisp:list
       (common-lisp:cons "TagKeys"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass untag-resource-response common-lisp:nil common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'untag-resource-response 'make-untag-resource-response))
 (common-lisp:defun make-untag-resource-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance 'untag-resource-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-application-request common-lisp:nil
                       ((attributes-to-delete :initarg :attributes-to-delete
                         :type
                         (common-lisp:or application-attributes
                                         common-lisp:null)
                         :accessor
                         %update-application-request-attributes-to-delete
                         :initform common-lisp:nil)
                        (app-block-arn :initarg :app-block-arn :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %update-application-request-app-block-arn :initform
                         common-lisp:nil)
                        (launch-parameters :initarg :launch-parameters :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %update-application-request-launch-parameters
                         :initform common-lisp:nil)
                        (working-directory :initarg :working-directory :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %update-application-request-working-directory
                         :initform common-lisp:nil)
                        (launch-path :initarg :launch-path :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %update-application-request-launch-path :initform
                         common-lisp:nil)
                        (icon-s3location :initarg :icon-s3location :type
                         (common-lisp:or s3location common-lisp:null) :accessor
                         %update-application-request-icon-s3location :initform
                         common-lisp:nil)
                        (description :initarg :description :type
                         (common-lisp:or description common-lisp:null)
                         :accessor %update-application-request-description
                         :initform common-lisp:nil)
                        (display-name :initarg :display-name :type
                         (common-lisp:or display-name common-lisp:null)
                         :accessor %update-application-request-display-name
                         :initform common-lisp:nil)
                        (name :initarg :name :type
                         (common-lisp:or name common-lisp:null) :accessor
                         %update-application-request-name :initform
                         (common-lisp:error ":name is required"))))
 (common-lisp:export
  (common-lisp:list 'update-application-request
                    'make-update-application-request))
 (common-lisp:defun make-update-application-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key attributes-to-delete app-block-arn
                     launch-parameters working-directory launch-path
                     icon-s3location description display-name name)
   (common-lisp:apply #'common-lisp:make-instance 'update-application-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-application-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-application-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'display-name))
      (common-lisp:list
       (common-lisp:cons "DisplayName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'icon-s3location))
      (common-lisp:list
       (common-lisp:cons "IconS3Location"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'launch-path))
      (common-lisp:list
       (common-lisp:cons "LaunchPath"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'working-directory))
      (common-lisp:list
       (common-lisp:cons "WorkingDirectory"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'launch-parameters))
      (common-lisp:list
       (common-lisp:cons "LaunchParameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'app-block-arn))
      (common-lisp:list
       (common-lisp:cons "AppBlockArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'attributes-to-delete))
      (common-lisp:list
       (common-lisp:cons "AttributesToDelete"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-application-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-application-result common-lisp:nil
                       ((application :initarg :application :type
                         (common-lisp:or application common-lisp:null)
                         :accessor %update-application-result-application
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'update-application-result
                    'make-update-application-result))
 (common-lisp:defun make-update-application-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key application)
   (common-lisp:apply #'common-lisp:make-instance 'update-application-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-application-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-application-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'application))
      (common-lisp:list
       (common-lisp:cons "Application"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-application-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-directory-config-request common-lisp:nil
                       ((certificate-based-auth-properties :initarg
                         :certificate-based-auth-properties :type
                         (common-lisp:or certificate-based-auth-properties
                                         common-lisp:null)
                         :accessor
                         %update-directory-config-request-certificate-based-auth-properties
                         :initform common-lisp:nil)
                        (service-account-credentials :initarg
                         :service-account-credentials :type
                         (common-lisp:or service-account-credentials
                                         common-lisp:null)
                         :accessor
                         %update-directory-config-request-service-account-credentials
                         :initform common-lisp:nil)
                        (organizational-unit-distinguished-names :initarg
                         :organizational-unit-distinguished-names :type
                         (common-lisp:or
                          organizational-unit-distinguished-names-list
                          common-lisp:null)
                         :accessor
                         %update-directory-config-request-organizational-unit-distinguished-names
                         :initform common-lisp:nil)
                        (directory-name :initarg :directory-name :type
                         (common-lisp:or directory-name common-lisp:null)
                         :accessor
                         %update-directory-config-request-directory-name
                         :initform
                         (common-lisp:error ":directory-name is required"))))
 (common-lisp:export
  (common-lisp:list 'update-directory-config-request
                    'make-update-directory-config-request))
 (common-lisp:defun make-update-directory-config-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key certificate-based-auth-properties
                     service-account-credentials
                     organizational-unit-distinguished-names directory-name)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-directory-config-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-directory-config-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-directory-config-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'directory-name))
      (common-lisp:list
       (common-lisp:cons "DirectoryName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'organizational-unit-distinguished-names))
      (common-lisp:list
       (common-lisp:cons "OrganizationalUnitDistinguishedNames"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'service-account-credentials))
      (common-lisp:list
       (common-lisp:cons "ServiceAccountCredentials"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'certificate-based-auth-properties))
      (common-lisp:list
       (common-lisp:cons "CertificateBasedAuthProperties"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-directory-config-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-directory-config-result common-lisp:nil
                       ((directory-config :initarg :directory-config :type
                         (common-lisp:or directory-config common-lisp:null)
                         :accessor
                         %update-directory-config-result-directory-config
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'update-directory-config-result
                    'make-update-directory-config-result))
 (common-lisp:defun make-update-directory-config-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key directory-config)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-directory-config-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-directory-config-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-directory-config-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'directory-config))
      (common-lisp:list
       (common-lisp:cons "DirectoryConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-directory-config-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-entitlement-request common-lisp:nil
                       ((attributes :initarg :attributes :type
                         (common-lisp:or entitlement-attribute-list
                                         common-lisp:null)
                         :accessor %update-entitlement-request-attributes
                         :initform common-lisp:nil)
                        (app-visibility :initarg :app-visibility :type
                         (common-lisp:or app-visibility common-lisp:null)
                         :accessor %update-entitlement-request-app-visibility
                         :initform common-lisp:nil)
                        (description :initarg :description :type
                         (common-lisp:or description common-lisp:null)
                         :accessor %update-entitlement-request-description
                         :initform common-lisp:nil)
                        (stack-name :initarg :stack-name :type
                         (common-lisp:or name common-lisp:null) :accessor
                         %update-entitlement-request-stack-name :initform
                         (common-lisp:error ":stack-name is required"))
                        (name :initarg :name :type
                         (common-lisp:or name common-lisp:null) :accessor
                         %update-entitlement-request-name :initform
                         (common-lisp:error ":name is required"))))
 (common-lisp:export
  (common-lisp:list 'update-entitlement-request
                    'make-update-entitlement-request))
 (common-lisp:defun make-update-entitlement-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key attributes app-visibility description
                     stack-name name)
   (common-lisp:apply #'common-lisp:make-instance 'update-entitlement-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-entitlement-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-entitlement-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stack-name))
      (common-lisp:list
       (common-lisp:cons "StackName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'app-visibility))
      (common-lisp:list
       (common-lisp:cons "AppVisibility"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'attributes))
      (common-lisp:list
       (common-lisp:cons "Attributes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-entitlement-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-entitlement-result common-lisp:nil
                       ((entitlement :initarg :entitlement :type
                         (common-lisp:or entitlement common-lisp:null)
                         :accessor %update-entitlement-result-entitlement
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'update-entitlement-result
                    'make-update-entitlement-result))
 (common-lisp:defun make-update-entitlement-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key entitlement)
   (common-lisp:apply #'common-lisp:make-instance 'update-entitlement-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-entitlement-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-entitlement-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'entitlement))
      (common-lisp:list
       (common-lisp:cons "Entitlement"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-entitlement-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-fleet-request common-lisp:nil
                       ((session-script-s3location :initarg
                         :session-script-s3location :type
                         (common-lisp:or s3location common-lisp:null) :accessor
                         %update-fleet-request-session-script-s3location
                         :initform common-lisp:nil)
                        (usb-device-filter-strings :initarg
                         :usb-device-filter-strings :type
                         (common-lisp:or usb-device-filter-strings
                                         common-lisp:null)
                         :accessor
                         %update-fleet-request-usb-device-filter-strings
                         :initform common-lisp:nil)
                        (max-concurrent-sessions :initarg
                         :max-concurrent-sessions :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         %update-fleet-request-max-concurrent-sessions
                         :initform common-lisp:nil)
                        (platform :initarg :platform :type
                         (common-lisp:or platform-type common-lisp:null)
                         :accessor %update-fleet-request-platform :initform
                         common-lisp:nil)
                        (stream-view :initarg :stream-view :type
                         (common-lisp:or stream-view common-lisp:null)
                         :accessor %update-fleet-request-stream-view :initform
                         common-lisp:nil)
                        (iam-role-arn :initarg :iam-role-arn :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %update-fleet-request-iam-role-arn :initform
                         common-lisp:nil)
                        (attributes-to-delete :initarg :attributes-to-delete
                         :type
                         (common-lisp:or fleet-attributes common-lisp:null)
                         :accessor %update-fleet-request-attributes-to-delete
                         :initform common-lisp:nil)
                        (idle-disconnect-timeout-in-seconds :initarg
                         :idle-disconnect-timeout-in-seconds :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         %update-fleet-request-idle-disconnect-timeout-in-seconds
                         :initform common-lisp:nil)
                        (domain-join-info :initarg :domain-join-info :type
                         (common-lisp:or domain-join-info common-lisp:null)
                         :accessor %update-fleet-request-domain-join-info
                         :initform common-lisp:nil)
                        (enable-default-internet-access :initarg
                         :enable-default-internet-access :type
                         (common-lisp:or boolean-object common-lisp:null)
                         :accessor
                         %update-fleet-request-enable-default-internet-access
                         :initform common-lisp:nil)
                        (display-name :initarg :display-name :type
                         (common-lisp:or display-name common-lisp:null)
                         :accessor %update-fleet-request-display-name :initform
                         common-lisp:nil)
                        (description :initarg :description :type
                         (common-lisp:or description common-lisp:null)
                         :accessor %update-fleet-request-description :initform
                         common-lisp:nil)
                        (delete-vpc-config :initarg :delete-vpc-config :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         %update-fleet-request-delete-vpc-config :initform
                         common-lisp:nil)
                        (disconnect-timeout-in-seconds :initarg
                         :disconnect-timeout-in-seconds :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         %update-fleet-request-disconnect-timeout-in-seconds
                         :initform common-lisp:nil)
                        (max-user-duration-in-seconds :initarg
                         :max-user-duration-in-seconds :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         %update-fleet-request-max-user-duration-in-seconds
                         :initform common-lisp:nil)
                        (vpc-config :initarg :vpc-config :type
                         (common-lisp:or vpc-config common-lisp:null) :accessor
                         %update-fleet-request-vpc-config :initform
                         common-lisp:nil)
                        (compute-capacity :initarg :compute-capacity :type
                         (common-lisp:or compute-capacity common-lisp:null)
                         :accessor %update-fleet-request-compute-capacity
                         :initform common-lisp:nil)
                        (instance-type :initarg :instance-type :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %update-fleet-request-instance-type :initform
                         common-lisp:nil)
                        (name :initarg :name :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %update-fleet-request-name :initform common-lisp:nil)
                        (image-arn :initarg :image-arn :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %update-fleet-request-image-arn :initform
                         common-lisp:nil)
                        (image-name :initarg :image-name :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %update-fleet-request-image-name :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'update-fleet-request 'make-update-fleet-request))
 (common-lisp:defun make-update-fleet-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key session-script-s3location
                     usb-device-filter-strings max-concurrent-sessions platform
                     stream-view iam-role-arn attributes-to-delete
                     idle-disconnect-timeout-in-seconds domain-join-info
                     enable-default-internet-access display-name description
                     delete-vpc-config disconnect-timeout-in-seconds
                     max-user-duration-in-seconds vpc-config compute-capacity
                     instance-type name image-arn image-name)
   (common-lisp:apply #'common-lisp:make-instance 'update-fleet-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input update-fleet-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input update-fleet-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'image-name))
      (common-lisp:list
       (common-lisp:cons "ImageName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'image-arn))
      (common-lisp:list
       (common-lisp:cons "ImageArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-type))
      (common-lisp:list
       (common-lisp:cons "InstanceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'compute-capacity))
      (common-lisp:list
       (common-lisp:cons "ComputeCapacity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpc-config))
      (common-lisp:list
       (common-lisp:cons "VpcConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'max-user-duration-in-seconds))
      (common-lisp:list
       (common-lisp:cons "MaxUserDurationInSeconds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'disconnect-timeout-in-seconds))
      (common-lisp:list
       (common-lisp:cons "DisconnectTimeoutInSeconds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'delete-vpc-config))
      (common-lisp:list
       (common-lisp:cons "DeleteVpcConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'display-name))
      (common-lisp:list
       (common-lisp:cons "DisplayName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'enable-default-internet-access))
      (common-lisp:list
       (common-lisp:cons "EnableDefaultInternetAccess"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-join-info))
      (common-lisp:list
       (common-lisp:cons "DomainJoinInfo"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'idle-disconnect-timeout-in-seconds))
      (common-lisp:list
       (common-lisp:cons "IdleDisconnectTimeoutInSeconds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'attributes-to-delete))
      (common-lisp:list
       (common-lisp:cons "AttributesToDelete"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'iam-role-arn))
      (common-lisp:list
       (common-lisp:cons "IamRoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stream-view))
      (common-lisp:list
       (common-lisp:cons "StreamView"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'platform))
      (common-lisp:list
       (common-lisp:cons "Platform"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'max-concurrent-sessions))
      (common-lisp:list
       (common-lisp:cons "MaxConcurrentSessions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'usb-device-filter-strings))
      (common-lisp:list
       (common-lisp:cons "UsbDeviceFilterStrings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'session-script-s3location))
      (common-lisp:list
       (common-lisp:cons "SessionScriptS3Location"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input update-fleet-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-fleet-result common-lisp:nil
                       ((fleet :initarg :fleet :type
                         (common-lisp:or fleet common-lisp:null) :accessor
                         %update-fleet-result-fleet :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'update-fleet-result 'make-update-fleet-result))
 (common-lisp:defun make-update-fleet-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key fleet)
   (common-lisp:apply #'common-lisp:make-instance 'update-fleet-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input update-fleet-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input update-fleet-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'fleet))
      (common-lisp:list
       (common-lisp:cons "Fleet"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input update-fleet-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-image-permissions-request common-lisp:nil
                       ((image-permissions :initarg :image-permissions :type
                         (common-lisp:or image-permissions common-lisp:null)
                         :accessor
                         %update-image-permissions-request-image-permissions
                         :initform
                         (common-lisp:error ":image-permissions is required"))
                        (shared-account-id :initarg :shared-account-id :type
                         (common-lisp:or aws-account-id common-lisp:null)
                         :accessor
                         %update-image-permissions-request-shared-account-id
                         :initform
                         (common-lisp:error ":shared-account-id is required"))
                        (name :initarg :name :type
                         (common-lisp:or name common-lisp:null) :accessor
                         %update-image-permissions-request-name :initform
                         (common-lisp:error ":name is required"))))
 (common-lisp:export
  (common-lisp:list 'update-image-permissions-request
                    'make-update-image-permissions-request))
 (common-lisp:defun make-update-image-permissions-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key image-permissions shared-account-id name)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-image-permissions-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-image-permissions-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-image-permissions-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'shared-account-id))
      (common-lisp:list
       (common-lisp:cons "SharedAccountId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'image-permissions))
      (common-lisp:list
       (common-lisp:cons "ImagePermissions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-image-permissions-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-image-permissions-result common-lisp:nil
                       common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'update-image-permissions-result
                    'make-update-image-permissions-result))
 (common-lisp:defun make-update-image-permissions-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-image-permissions-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-image-permissions-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-image-permissions-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-image-permissions-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-stack-request common-lisp:nil
                       ((streaming-experience-settings :initarg
                         :streaming-experience-settings :type
                         (common-lisp:or streaming-experience-settings
                                         common-lisp:null)
                         :accessor
                         %update-stack-request-streaming-experience-settings
                         :initform common-lisp:nil)
                        (embed-host-domains :initarg :embed-host-domains :type
                         (common-lisp:or embed-host-domains common-lisp:null)
                         :accessor %update-stack-request-embed-host-domains
                         :initform common-lisp:nil)
                        (access-endpoints :initarg :access-endpoints :type
                         (common-lisp:or access-endpoint-list common-lisp:null)
                         :accessor %update-stack-request-access-endpoints
                         :initform common-lisp:nil)
                        (application-settings :initarg :application-settings
                         :type
                         (common-lisp:or application-settings common-lisp:null)
                         :accessor %update-stack-request-application-settings
                         :initform common-lisp:nil)
                        (user-settings :initarg :user-settings :type
                         (common-lisp:or user-setting-list common-lisp:null)
                         :accessor %update-stack-request-user-settings
                         :initform common-lisp:nil)
                        (attributes-to-delete :initarg :attributes-to-delete
                         :type
                         (common-lisp:or stack-attributes common-lisp:null)
                         :accessor %update-stack-request-attributes-to-delete
                         :initform common-lisp:nil)
                        (feedback-url :initarg :feedback-url :type
                         (common-lisp:or feedback-url common-lisp:null)
                         :accessor %update-stack-request-feedback-url :initform
                         common-lisp:nil)
                        (redirect-url :initarg :redirect-url :type
                         (common-lisp:or redirect-url common-lisp:null)
                         :accessor %update-stack-request-redirect-url :initform
                         common-lisp:nil)
                        (delete-storage-connectors :initarg
                         :delete-storage-connectors :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         %update-stack-request-delete-storage-connectors
                         :initform common-lisp:nil)
                        (storage-connectors :initarg :storage-connectors :type
                         (common-lisp:or storage-connector-list
                                         common-lisp:null)
                         :accessor %update-stack-request-storage-connectors
                         :initform common-lisp:nil)
                        (name :initarg :name :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %update-stack-request-name :initform
                         (common-lisp:error ":name is required"))
                        (description :initarg :description :type
                         (common-lisp:or description common-lisp:null)
                         :accessor %update-stack-request-description :initform
                         common-lisp:nil)
                        (display-name :initarg :display-name :type
                         (common-lisp:or display-name common-lisp:null)
                         :accessor %update-stack-request-display-name :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'update-stack-request 'make-update-stack-request))
 (common-lisp:defun make-update-stack-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key streaming-experience-settings
                     embed-host-domains access-endpoints application-settings
                     user-settings attributes-to-delete feedback-url
                     redirect-url delete-storage-connectors storage-connectors
                     name description display-name)
   (common-lisp:apply #'common-lisp:make-instance 'update-stack-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input update-stack-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input update-stack-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'display-name))
      (common-lisp:list
       (common-lisp:cons "DisplayName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'storage-connectors))
      (common-lisp:list
       (common-lisp:cons "StorageConnectors"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'delete-storage-connectors))
      (common-lisp:list
       (common-lisp:cons "DeleteStorageConnectors"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'redirect-url))
      (common-lisp:list
       (common-lisp:cons "RedirectURL"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'feedback-url))
      (common-lisp:list
       (common-lisp:cons "FeedbackURL"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'attributes-to-delete))
      (common-lisp:list
       (common-lisp:cons "AttributesToDelete"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-settings))
      (common-lisp:list
       (common-lisp:cons "UserSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'application-settings))
      (common-lisp:list
       (common-lisp:cons "ApplicationSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'access-endpoints))
      (common-lisp:list
       (common-lisp:cons "AccessEndpoints"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'embed-host-domains))
      (common-lisp:list
       (common-lisp:cons "EmbedHostDomains"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'streaming-experience-settings))
      (common-lisp:list
       (common-lisp:cons "StreamingExperienceSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input update-stack-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-stack-result common-lisp:nil
                       ((stack :initarg :stack :type
                         (common-lisp:or stack common-lisp:null) :accessor
                         %update-stack-result-stack :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'update-stack-result 'make-update-stack-result))
 (common-lisp:defun make-update-stack-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key stack)
   (common-lisp:apply #'common-lisp:make-instance 'update-stack-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input update-stack-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input update-stack-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stack))
      (common-lisp:list
       (common-lisp:cons "Stack"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input update-stack-result))
   common-lisp:nil))
(common-lisp:deftype usage-report-execution-error-code () 'common-lisp:string)
(common-lisp:deftype usage-report-schedule () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass usage-report-subscription common-lisp:nil
                       ((subscription-errors :initarg :subscription-errors
                         :type
                         (common-lisp:or
                          last-report-generation-execution-errors
                          common-lisp:null)
                         :accessor
                         %usage-report-subscription-subscription-errors
                         :initform common-lisp:nil)
                        (last-generated-report-date :initarg
                         :last-generated-report-date :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %usage-report-subscription-last-generated-report-date
                         :initform common-lisp:nil)
                        (schedule :initarg :schedule :type
                         (common-lisp:or usage-report-schedule
                                         common-lisp:null)
                         :accessor %usage-report-subscription-schedule
                         :initform common-lisp:nil)
                        (s3bucket-name :initarg :s3bucket-name :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %usage-report-subscription-s3bucket-name :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'usage-report-subscription
                    'make-usage-report-subscription))
 (common-lisp:defun make-usage-report-subscription
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key subscription-errors
                     last-generated-report-date schedule s3bucket-name)
   (common-lisp:apply #'common-lisp:make-instance 'usage-report-subscription
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          usage-report-subscription))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          usage-report-subscription))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3bucket-name))
      (common-lisp:list
       (common-lisp:cons "S3BucketName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'schedule))
      (common-lisp:list
       (common-lisp:cons "Schedule"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'last-generated-report-date))
      (common-lisp:list
       (common-lisp:cons "LastGeneratedReportDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subscription-errors))
      (common-lisp:list
       (common-lisp:cons "SubscriptionErrors"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          usage-report-subscription))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype usage-report-subscription-list ()
   '(trivial-types:proper-list usage-report-subscription))
 (common-lisp:defun |make-usage-report-subscription-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            usage-report-subscription))
   aws-sdk/generator/shape::members))
(common-lisp:deftype usb-device-filter-string () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype usb-device-filter-strings ()
   '(trivial-types:proper-list usb-device-filter-string))
 (common-lisp:defun |make-usb-device-filter-strings|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            usb-device-filter-string))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass user common-lisp:nil
                       ((authentication-type :initarg :authentication-type
                         :type
                         (common-lisp:or authentication-type common-lisp:null)
                         :accessor %user-authentication-type :initform
                         (common-lisp:error
                          ":authentication-type is required"))
                        (created-time :initarg :created-time :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %user-created-time :initform common-lisp:nil)
                        (last-name :initarg :last-name :type
                         (common-lisp:or user-attribute-value common-lisp:null)
                         :accessor %user-last-name :initform common-lisp:nil)
                        (first-name :initarg :first-name :type
                         (common-lisp:or user-attribute-value common-lisp:null)
                         :accessor %user-first-name :initform common-lisp:nil)
                        (status :initarg :status :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %user-status :initform common-lisp:nil)
                        (enabled :initarg :enabled :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         %user-enabled :initform common-lisp:nil)
                        (user-name :initarg :user-name :type
                         (common-lisp:or username common-lisp:null) :accessor
                         %user-user-name :initform common-lisp:nil)
                        (arn :initarg :arn :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %user-arn :initform common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'user 'make-user))
 (common-lisp:defun make-user
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key authentication-type created-time
                     last-name first-name status enabled user-name arn)
   (common-lisp:apply #'common-lisp:make-instance 'user
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input user))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input user))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-name))
      (common-lisp:list
       (common-lisp:cons "UserName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'enabled))
      (common-lisp:list
       (common-lisp:cons "Enabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'first-name))
      (common-lisp:list
       (common-lisp:cons "FirstName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-name))
      (common-lisp:list
       (common-lisp:cons "LastName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-time))
      (common-lisp:list
       (common-lisp:cons "CreatedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'authentication-type))
      (common-lisp:list
       (common-lisp:cons "AuthenticationType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input user))
   common-lisp:nil))
(common-lisp:deftype user-attribute-value () 'common-lisp:string)
(common-lisp:deftype user-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype user-list () '(trivial-types:proper-list user))
 (common-lisp:defun |make-user-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list user))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass user-setting common-lisp:nil
                       ((permission :initarg :permission :type
                         (common-lisp:or permission common-lisp:null) :accessor
                         %user-setting-permission :initform
                         (common-lisp:error ":permission is required"))
                        (action :initarg :action :type
                         (common-lisp:or action common-lisp:null) :accessor
                         %user-setting-action :initform
                         (common-lisp:error ":action is required"))))
 (common-lisp:export (common-lisp:list 'user-setting 'make-user-setting))
 (common-lisp:defun make-user-setting
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key permission action)
   (common-lisp:apply #'common-lisp:make-instance 'user-setting
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input user-setting))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input user-setting))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'action))
      (common-lisp:list
       (common-lisp:cons "Action"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'permission))
      (common-lisp:list
       (common-lisp:cons "Permission"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input user-setting))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype user-setting-list ()
   '(trivial-types:proper-list user-setting))
 (common-lisp:defun |make-user-setting-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list user-setting))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass user-stack-association common-lisp:nil
                       ((send-email-notification :initarg
                         :send-email-notification :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         %user-stack-association-send-email-notification
                         :initform common-lisp:nil)
                        (authentication-type :initarg :authentication-type
                         :type
                         (common-lisp:or authentication-type common-lisp:null)
                         :accessor %user-stack-association-authentication-type
                         :initform
                         (common-lisp:error
                          ":authentication-type is required"))
                        (user-name :initarg :user-name :type
                         (common-lisp:or username common-lisp:null) :accessor
                         %user-stack-association-user-name :initform
                         (common-lisp:error ":user-name is required"))
                        (stack-name :initarg :stack-name :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %user-stack-association-stack-name :initform
                         (common-lisp:error ":stack-name is required"))))
 (common-lisp:export
  (common-lisp:list 'user-stack-association 'make-user-stack-association))
 (common-lisp:defun make-user-stack-association
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key send-email-notification
                     authentication-type user-name stack-name)
   (common-lisp:apply #'common-lisp:make-instance 'user-stack-association
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          user-stack-association))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          user-stack-association))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stack-name))
      (common-lisp:list
       (common-lisp:cons "StackName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-name))
      (common-lisp:list
       (common-lisp:cons "UserName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'authentication-type))
      (common-lisp:list
       (common-lisp:cons "AuthenticationType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'send-email-notification))
      (common-lisp:list
       (common-lisp:cons "SendEmailNotification"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          user-stack-association))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass user-stack-association-error common-lisp:nil
                       ((error-message :initarg :error-message :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %user-stack-association-error-error-message :initform
                         common-lisp:nil)
                        (error-code :initarg :error-code :type
                         (common-lisp:or user-stack-association-error-code
                                         common-lisp:null)
                         :accessor %user-stack-association-error-error-code
                         :initform common-lisp:nil)
                        (user-stack-association :initarg
                         :user-stack-association :type
                         (common-lisp:or user-stack-association
                                         common-lisp:null)
                         :accessor
                         %user-stack-association-error-user-stack-association
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'user-stack-association-error
                    'make-user-stack-association-error))
 (common-lisp:defun make-user-stack-association-error
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key error-message error-code
                     user-stack-association)
   (common-lisp:apply #'common-lisp:make-instance 'user-stack-association-error
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          user-stack-association-error))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          user-stack-association-error))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'user-stack-association))
      (common-lisp:list
       (common-lisp:cons "UserStackAssociation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error-code))
      (common-lisp:list
       (common-lisp:cons "ErrorCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error-message))
      (common-lisp:list
       (common-lisp:cons "ErrorMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          user-stack-association-error))
   common-lisp:nil))
(common-lisp:deftype user-stack-association-error-code () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype user-stack-association-error-list ()
   '(trivial-types:proper-list user-stack-association-error))
 (common-lisp:defun |make-user-stack-association-error-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            user-stack-association-error))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype user-stack-association-list ()
   '(trivial-types:proper-list user-stack-association))
 (common-lisp:defun |make-user-stack-association-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list user-stack-association))
   aws-sdk/generator/shape::members))
(common-lisp:deftype username () 'common-lisp:string)
(common-lisp:deftype visibility-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass vpc-config common-lisp:nil
                       ((security-group-ids :initarg :security-group-ids :type
                         (common-lisp:or security-group-id-list
                                         common-lisp:null)
                         :accessor %vpc-config-security-group-ids :initform
                         common-lisp:nil)
                        (subnet-ids :initarg :subnet-ids :type
                         (common-lisp:or subnet-id-list common-lisp:null)
                         :accessor %vpc-config-subnet-ids :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'vpc-config 'make-vpc-config))
 (common-lisp:defun make-vpc-config
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key security-group-ids subnet-ids)
   (common-lisp:apply #'common-lisp:make-instance 'vpc-config
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input vpc-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input vpc-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subnet-ids))
      (common-lisp:list
       (common-lisp:cons "SubnetIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'security-group-ids))
      (common-lisp:list
       (common-lisp:cons "SecurityGroupIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input vpc-config))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defun associate-application-fleet
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key fleet-name application-arn)
   (common-lisp:declare (common-lisp:ignorable fleet-name application-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-associate-application-fleet-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'appstream-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "AssociateApplicationFleet"
                                                        "2016-12-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'associate-application-fleet))
(common-lisp:progn
 (common-lisp:defun associate-application-to-entitlement
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key stack-name entitlement-name
                     application-identifier)
   (common-lisp:declare
    (common-lisp:ignorable stack-name entitlement-name application-identifier))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-associate-application-to-entitlement-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'appstream-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "AssociateApplicationToEntitlement"
                                                        "2016-12-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'associate-application-to-entitlement))
(common-lisp:progn
 (common-lisp:defun associate-fleet
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key fleet-name stack-name)
   (common-lisp:declare (common-lisp:ignorable fleet-name stack-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-associate-fleet-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'appstream-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "AssociateFleet"
                                                        "2016-12-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'associate-fleet))
(common-lisp:progn
 (common-lisp:defun batch-associate-user-stack
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key user-stack-associations)
   (common-lisp:declare (common-lisp:ignorable user-stack-associations))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-batch-associate-user-stack-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'appstream-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "BatchAssociateUserStack"
                                                        "2016-12-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'batch-associate-user-stack))
(common-lisp:progn
 (common-lisp:defun batch-disassociate-user-stack
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key user-stack-associations)
   (common-lisp:declare (common-lisp:ignorable user-stack-associations))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-batch-disassociate-user-stack-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'appstream-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "BatchDisassociateUserStack"
                                                        "2016-12-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'batch-disassociate-user-stack))
(common-lisp:progn
 (common-lisp:defun copy-image
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key source-image-name destination-image-name
                     destination-region destination-image-description)
   (common-lisp:declare
    (common-lisp:ignorable source-image-name destination-image-name
     destination-region destination-image-description))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-copy-image-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'appstream-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "CopyImage"
                                                        "2016-12-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'copy-image))
(common-lisp:progn
 (common-lisp:defun create-app-block
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name description display-name
                     source-s3location setup-script-details tags)
   (common-lisp:declare
    (common-lisp:ignorable name description display-name source-s3location
     setup-script-details tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-app-block-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'appstream-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "CreateAppBlock"
                                                        "2016-12-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-app-block))
(common-lisp:progn
 (common-lisp:defun create-application
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name display-name description
                     icon-s3location launch-path working-directory
                     launch-parameters platforms instance-families
                     app-block-arn tags)
   (common-lisp:declare
    (common-lisp:ignorable name display-name description icon-s3location
     launch-path working-directory launch-parameters platforms
     instance-families app-block-arn tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-application-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'appstream-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "CreateApplication"
                                                        "2016-12-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-application))
(common-lisp:progn
 (common-lisp:defun create-directory-config
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key directory-name
                     organizational-unit-distinguished-names
                     service-account-credentials
                     certificate-based-auth-properties)
   (common-lisp:declare
    (common-lisp:ignorable directory-name
     organizational-unit-distinguished-names service-account-credentials
     certificate-based-auth-properties))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-directory-config-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'appstream-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "CreateDirectoryConfig"
                                                        "2016-12-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-directory-config))
(common-lisp:progn
 (common-lisp:defun create-entitlement
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name stack-name description
                     app-visibility attributes)
   (common-lisp:declare
    (common-lisp:ignorable name stack-name description app-visibility
     attributes))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-entitlement-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'appstream-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "CreateEntitlement"
                                                        "2016-12-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-entitlement))
(common-lisp:progn
 (common-lisp:defun create-fleet
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name image-name image-arn instance-type
                     fleet-type compute-capacity vpc-config
                     max-user-duration-in-seconds disconnect-timeout-in-seconds
                     description display-name enable-default-internet-access
                     domain-join-info tags idle-disconnect-timeout-in-seconds
                     iam-role-arn stream-view platform max-concurrent-sessions
                     usb-device-filter-strings session-script-s3location)
   (common-lisp:declare
    (common-lisp:ignorable name image-name image-arn instance-type fleet-type
     compute-capacity vpc-config max-user-duration-in-seconds
     disconnect-timeout-in-seconds description display-name
     enable-default-internet-access domain-join-info tags
     idle-disconnect-timeout-in-seconds iam-role-arn stream-view platform
     max-concurrent-sessions usb-device-filter-strings
     session-script-s3location))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-fleet-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'appstream-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "CreateFleet"
                                                        "2016-12-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-fleet))
(common-lisp:progn
 (common-lisp:defun create-image-builder
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name image-name image-arn instance-type
                     description display-name vpc-config iam-role-arn
                     enable-default-internet-access domain-join-info
                     appstream-agent-version tags access-endpoints)
   (common-lisp:declare
    (common-lisp:ignorable name image-name image-arn instance-type description
     display-name vpc-config iam-role-arn enable-default-internet-access
     domain-join-info appstream-agent-version tags access-endpoints))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-image-builder-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'appstream-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "CreateImageBuilder"
                                                        "2016-12-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-image-builder))
(common-lisp:progn
 (common-lisp:defun create-image-builder-streaming-url
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name validity)
   (common-lisp:declare (common-lisp:ignorable name validity))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-create-image-builder-streaming-urlrequest
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'appstream-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "CreateImageBuilderStreamingURL"
                                                        "2016-12-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-image-builder-streaming-url))
(common-lisp:progn
 (common-lisp:defun create-stack
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name description display-name
                     storage-connectors redirect-url feedback-url user-settings
                     application-settings tags access-endpoints
                     embed-host-domains streaming-experience-settings)
   (common-lisp:declare
    (common-lisp:ignorable name description display-name storage-connectors
     redirect-url feedback-url user-settings application-settings tags
     access-endpoints embed-host-domains streaming-experience-settings))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-stack-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'appstream-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "CreateStack"
                                                        "2016-12-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-stack))
(common-lisp:progn
 (common-lisp:defun create-streaming-url
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key stack-name fleet-name user-id
                     application-id validity session-context)
   (common-lisp:declare
    (common-lisp:ignorable stack-name fleet-name user-id application-id
     validity session-context))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-streaming-urlrequest
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'appstream-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "CreateStreamingURL"
                                                        "2016-12-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-streaming-url))
(common-lisp:progn
 (common-lisp:defun create-updated-image
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key existing-image-name new-image-name
                     new-image-description new-image-display-name
                     new-image-tags dry-run)
   (common-lisp:declare
    (common-lisp:ignorable existing-image-name new-image-name
     new-image-description new-image-display-name new-image-tags dry-run))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-updated-image-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'appstream-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "CreateUpdatedImage"
                                                        "2016-12-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-updated-image))
(common-lisp:progn
 (common-lisp:defun create-usage-report-subscription ()
   (aws-sdk/generator/operation::parse-response
    (aws-sdk/api:aws-request
     (common-lisp:make-instance 'appstream-request :method "POST" :path "/"
                                :protocol :json :operation
                                "CreateUsageReportSubscription" :params
                                `(("Action" ,@"CreateUsageReportSubscription")
                                  ("Version" ,@"2016-12-01"))))
    common-lisp:nil common-lisp:nil *error-map*))
 (common-lisp:export 'create-usage-report-subscription))
(common-lisp:progn
 (common-lisp:defun create-user
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key user-name message-action first-name
                     last-name authentication-type)
   (common-lisp:declare
    (common-lisp:ignorable user-name message-action first-name last-name
     authentication-type))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-user-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'appstream-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "CreateUser"
                                                        "2016-12-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-user))
(common-lisp:progn
 (common-lisp:defun delete-app-block
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name)
   (common-lisp:declare (common-lisp:ignorable name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-app-block-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'appstream-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "DeleteAppBlock"
                                                        "2016-12-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-app-block))
(common-lisp:progn
 (common-lisp:defun delete-application
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name)
   (common-lisp:declare (common-lisp:ignorable name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-application-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'appstream-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "DeleteApplication"
                                                        "2016-12-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-application))
(common-lisp:progn
 (common-lisp:defun delete-directory-config
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key directory-name)
   (common-lisp:declare (common-lisp:ignorable directory-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-directory-config-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'appstream-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "DeleteDirectoryConfig"
                                                        "2016-12-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-directory-config))
(common-lisp:progn
 (common-lisp:defun delete-entitlement
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name stack-name)
   (common-lisp:declare (common-lisp:ignorable name stack-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-entitlement-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'appstream-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "DeleteEntitlement"
                                                        "2016-12-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-entitlement))
(common-lisp:progn
 (common-lisp:defun delete-fleet
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name)
   (common-lisp:declare (common-lisp:ignorable name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-fleet-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'appstream-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "DeleteFleet"
                                                        "2016-12-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-fleet))
(common-lisp:progn
 (common-lisp:defun delete-image
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name)
   (common-lisp:declare (common-lisp:ignorable name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-image-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'appstream-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "DeleteImage"
                                                        "2016-12-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-image))
(common-lisp:progn
 (common-lisp:defun delete-image-builder
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name)
   (common-lisp:declare (common-lisp:ignorable name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-image-builder-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'appstream-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "DeleteImageBuilder"
                                                        "2016-12-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-image-builder))
(common-lisp:progn
 (common-lisp:defun delete-image-permissions
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name shared-account-id)
   (common-lisp:declare (common-lisp:ignorable name shared-account-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-image-permissions-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'appstream-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "DeleteImagePermissions"
                                                        "2016-12-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-image-permissions))
(common-lisp:progn
 (common-lisp:defun delete-stack
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name)
   (common-lisp:declare (common-lisp:ignorable name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-stack-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'appstream-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "DeleteStack"
                                                        "2016-12-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-stack))
(common-lisp:progn
 (common-lisp:defun delete-usage-report-subscription ()
   (aws-sdk/generator/operation::parse-response
    (aws-sdk/api:aws-request
     (common-lisp:make-instance 'appstream-request :method "POST" :path "/"
                                :protocol :json :operation
                                "DeleteUsageReportSubscription" :params
                                `(("Action" ,@"DeleteUsageReportSubscription")
                                  ("Version" ,@"2016-12-01"))))
    common-lisp:nil common-lisp:nil *error-map*))
 (common-lisp:export 'delete-usage-report-subscription))
(common-lisp:progn
 (common-lisp:defun delete-user
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key user-name authentication-type)
   (common-lisp:declare (common-lisp:ignorable user-name authentication-type))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-user-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'appstream-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "DeleteUser"
                                                        "2016-12-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-user))
(common-lisp:progn
 (common-lisp:defun describe-app-blocks
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key arns next-token max-results)
   (common-lisp:declare (common-lisp:ignorable arns next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-app-blocks-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'appstream-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "DescribeAppBlocks"
                                                        "2016-12-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-app-blocks))
(common-lisp:progn
 (common-lisp:defun describe-application-fleet-associations
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key fleet-name application-arn max-results
                     next-token)
   (common-lisp:declare
    (common-lisp:ignorable fleet-name application-arn max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-application-fleet-associations-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'appstream-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "DescribeApplicationFleetAssociations"
                                                        "2016-12-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-application-fleet-associations))
(common-lisp:progn
 (common-lisp:defun describe-applications
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key arns next-token max-results)
   (common-lisp:declare (common-lisp:ignorable arns next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-applications-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'appstream-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "DescribeApplications"
                                                        "2016-12-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-applications))
(common-lisp:progn
 (common-lisp:defun describe-directory-configs
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key directory-names max-results next-token)
   (common-lisp:declare
    (common-lisp:ignorable directory-names max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-directory-configs-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'appstream-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "DescribeDirectoryConfigs"
                                                        "2016-12-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-directory-configs))
(common-lisp:progn
 (common-lisp:defun describe-entitlements
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name stack-name next-token max-results)
   (common-lisp:declare
    (common-lisp:ignorable name stack-name next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-entitlements-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'appstream-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "DescribeEntitlements"
                                                        "2016-12-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-entitlements))
(common-lisp:progn
 (common-lisp:defun describe-fleets
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key names next-token)
   (common-lisp:declare (common-lisp:ignorable names next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-fleets-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'appstream-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "DescribeFleets"
                                                        "2016-12-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-fleets))
(common-lisp:progn
 (common-lisp:defun describe-image-builders
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key names max-results next-token)
   (common-lisp:declare (common-lisp:ignorable names max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-image-builders-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'appstream-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "DescribeImageBuilders"
                                                        "2016-12-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-image-builders))
(common-lisp:progn
 (common-lisp:defun describe-image-permissions
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name max-results shared-aws-account-ids
                     next-token)
   (common-lisp:declare
    (common-lisp:ignorable name max-results shared-aws-account-ids next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-image-permissions-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'appstream-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "DescribeImagePermissions"
                                                        "2016-12-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-image-permissions))
(common-lisp:progn
 (common-lisp:defun describe-images
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key names arns type next-token max-results)
   (common-lisp:declare
    (common-lisp:ignorable names arns type next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-images-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'appstream-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "DescribeImages"
                                                        "2016-12-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-images))
(common-lisp:progn
 (common-lisp:defun describe-sessions
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key stack-name fleet-name user-id next-token
                     limit authentication-type)
   (common-lisp:declare
    (common-lisp:ignorable stack-name fleet-name user-id next-token limit
     authentication-type))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-sessions-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'appstream-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "DescribeSessions"
                                                        "2016-12-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-sessions))
(common-lisp:progn
 (common-lisp:defun describe-stacks
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key names next-token)
   (common-lisp:declare (common-lisp:ignorable names next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-stacks-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'appstream-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "DescribeStacks"
                                                        "2016-12-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-stacks))
(common-lisp:progn
 (common-lisp:defun describe-usage-report-subscriptions
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key max-results next-token)
   (common-lisp:declare (common-lisp:ignorable max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-usage-report-subscriptions-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'appstream-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "DescribeUsageReportSubscriptions"
                                                        "2016-12-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-usage-report-subscriptions))
(common-lisp:progn
 (common-lisp:defun describe-user-stack-associations
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key stack-name user-name authentication-type
                     max-results next-token)
   (common-lisp:declare
    (common-lisp:ignorable stack-name user-name authentication-type max-results
     next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-user-stack-associations-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'appstream-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "DescribeUserStackAssociations"
                                                        "2016-12-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-user-stack-associations))
(common-lisp:progn
 (common-lisp:defun describe-users
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key authentication-type max-results
                     next-token)
   (common-lisp:declare
    (common-lisp:ignorable authentication-type max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-users-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'appstream-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "DescribeUsers"
                                                        "2016-12-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-users))
(common-lisp:progn
 (common-lisp:defun disable-user
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key user-name authentication-type)
   (common-lisp:declare (common-lisp:ignorable user-name authentication-type))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-disable-user-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'appstream-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "DisableUser"
                                                        "2016-12-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'disable-user))
(common-lisp:progn
 (common-lisp:defun disassociate-application-fleet
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key fleet-name application-arn)
   (common-lisp:declare (common-lisp:ignorable fleet-name application-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-disassociate-application-fleet-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'appstream-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "DisassociateApplicationFleet"
                                                        "2016-12-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'disassociate-application-fleet))
(common-lisp:progn
 (common-lisp:defun disassociate-application-from-entitlement
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key stack-name entitlement-name
                     application-identifier)
   (common-lisp:declare
    (common-lisp:ignorable stack-name entitlement-name application-identifier))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-disassociate-application-from-entitlement-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'appstream-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "DisassociateApplicationFromEntitlement"
                                                        "2016-12-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'disassociate-application-from-entitlement))
(common-lisp:progn
 (common-lisp:defun disassociate-fleet
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key fleet-name stack-name)
   (common-lisp:declare (common-lisp:ignorable fleet-name stack-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-disassociate-fleet-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'appstream-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "DisassociateFleet"
                                                        "2016-12-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'disassociate-fleet))
(common-lisp:progn
 (common-lisp:defun enable-user
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key user-name authentication-type)
   (common-lisp:declare (common-lisp:ignorable user-name authentication-type))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-enable-user-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'appstream-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "EnableUser"
                                                        "2016-12-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'enable-user))
(common-lisp:progn
 (common-lisp:defun expire-session
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key session-id)
   (common-lisp:declare (common-lisp:ignorable session-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-expire-session-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'appstream-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "ExpireSession"
                                                        "2016-12-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'expire-session))
(common-lisp:progn
 (common-lisp:defun list-associated-fleets
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key stack-name next-token)
   (common-lisp:declare (common-lisp:ignorable stack-name next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-associated-fleets-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'appstream-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "ListAssociatedFleets"
                                                        "2016-12-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-associated-fleets))
(common-lisp:progn
 (common-lisp:defun list-associated-stacks
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key fleet-name next-token)
   (common-lisp:declare (common-lisp:ignorable fleet-name next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-associated-stacks-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'appstream-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "ListAssociatedStacks"
                                                        "2016-12-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-associated-stacks))
(common-lisp:progn
 (common-lisp:defun list-entitled-applications
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key stack-name entitlement-name next-token
                     max-results)
   (common-lisp:declare
    (common-lisp:ignorable stack-name entitlement-name next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-entitled-applications-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'appstream-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "ListEntitledApplications"
                                                        "2016-12-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-entitled-applications))
(common-lisp:progn
 (common-lisp:defun list-tags-for-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn)
   (common-lisp:declare (common-lisp:ignorable resource-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-tags-for-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'appstream-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "ListTagsForResource"
                                                        "2016-12-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-tags-for-resource))
(common-lisp:progn
 (common-lisp:defun start-fleet
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name)
   (common-lisp:declare (common-lisp:ignorable name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-start-fleet-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'appstream-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "StartFleet"
                                                        "2016-12-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'start-fleet))
(common-lisp:progn
 (common-lisp:defun start-image-builder
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name appstream-agent-version)
   (common-lisp:declare (common-lisp:ignorable name appstream-agent-version))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-start-image-builder-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'appstream-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "StartImageBuilder"
                                                        "2016-12-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'start-image-builder))
(common-lisp:progn
 (common-lisp:defun stop-fleet
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name)
   (common-lisp:declare (common-lisp:ignorable name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-stop-fleet-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'appstream-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "StopFleet"
                                                        "2016-12-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'stop-fleet))
(common-lisp:progn
 (common-lisp:defun stop-image-builder
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name)
   (common-lisp:declare (common-lisp:ignorable name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-stop-image-builder-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'appstream-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "StopImageBuilder"
                                                        "2016-12-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'stop-image-builder))
(common-lisp:progn
 (common-lisp:defun tag-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn tags)
   (common-lisp:declare (common-lisp:ignorable resource-arn tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-tag-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'appstream-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "TagResource"
                                                        "2016-12-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'tag-resource))
(common-lisp:progn
 (common-lisp:defun untag-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn tag-keys)
   (common-lisp:declare (common-lisp:ignorable resource-arn tag-keys))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-untag-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'appstream-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "UntagResource"
                                                        "2016-12-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'untag-resource))
(common-lisp:progn
 (common-lisp:defun update-application
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name display-name description
                     icon-s3location launch-path working-directory
                     launch-parameters app-block-arn attributes-to-delete)
   (common-lisp:declare
    (common-lisp:ignorable name display-name description icon-s3location
     launch-path working-directory launch-parameters app-block-arn
     attributes-to-delete))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-application-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'appstream-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "UpdateApplication"
                                                        "2016-12-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-application))
(common-lisp:progn
 (common-lisp:defun update-directory-config
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key directory-name
                     organizational-unit-distinguished-names
                     service-account-credentials
                     certificate-based-auth-properties)
   (common-lisp:declare
    (common-lisp:ignorable directory-name
     organizational-unit-distinguished-names service-account-credentials
     certificate-based-auth-properties))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-directory-config-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'appstream-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "UpdateDirectoryConfig"
                                                        "2016-12-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-directory-config))
(common-lisp:progn
 (common-lisp:defun update-entitlement
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name stack-name description
                     app-visibility attributes)
   (common-lisp:declare
    (common-lisp:ignorable name stack-name description app-visibility
     attributes))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-entitlement-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'appstream-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "UpdateEntitlement"
                                                        "2016-12-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-entitlement))
(common-lisp:progn
 (common-lisp:defun update-fleet
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key image-name image-arn name instance-type
                     compute-capacity vpc-config max-user-duration-in-seconds
                     disconnect-timeout-in-seconds delete-vpc-config
                     description display-name enable-default-internet-access
                     domain-join-info idle-disconnect-timeout-in-seconds
                     attributes-to-delete iam-role-arn stream-view platform
                     max-concurrent-sessions usb-device-filter-strings
                     session-script-s3location)
   (common-lisp:declare
    (common-lisp:ignorable image-name image-arn name instance-type
     compute-capacity vpc-config max-user-duration-in-seconds
     disconnect-timeout-in-seconds delete-vpc-config description display-name
     enable-default-internet-access domain-join-info
     idle-disconnect-timeout-in-seconds attributes-to-delete iam-role-arn
     stream-view platform max-concurrent-sessions usb-device-filter-strings
     session-script-s3location))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-fleet-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'appstream-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "UpdateFleet"
                                                        "2016-12-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-fleet))
(common-lisp:progn
 (common-lisp:defun update-image-permissions
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name shared-account-id image-permissions)
   (common-lisp:declare
    (common-lisp:ignorable name shared-account-id image-permissions))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-image-permissions-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'appstream-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "UpdateImagePermissions"
                                                        "2016-12-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-image-permissions))
(common-lisp:progn
 (common-lisp:defun update-stack
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key display-name description name
                     storage-connectors delete-storage-connectors redirect-url
                     feedback-url attributes-to-delete user-settings
                     application-settings access-endpoints embed-host-domains
                     streaming-experience-settings)
   (common-lisp:declare
    (common-lisp:ignorable display-name description name storage-connectors
     delete-storage-connectors redirect-url feedback-url attributes-to-delete
     user-settings application-settings access-endpoints embed-host-domains
     streaming-experience-settings))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-stack-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'appstream-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "UpdateStack"
                                                        "2016-12-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-stack))
