;; DO NOT EDIT: File is generated by AWS-SDK/GENERATOR.

(common-lisp:defpackage #:aws-sdk/services/freetier/api
  (:use)
  (:nicknames #:aws/freetier)
  (:import-from #:aws-sdk/generator/shape)
  (:import-from #:aws-sdk/generator/operation)
  (:import-from #:aws-sdk/api)
  (:import-from #:aws-sdk/request)
  (:import-from #:aws-sdk/json-request)
  (:import-from #:aws-sdk/rest-json-request)
  (:import-from #:aws-sdk/rest-xml-request)
  (:import-from #:aws-sdk/query-request)
  (:import-from #:aws-sdk/error))
(common-lisp:in-package #:aws-sdk/services/freetier/api)
(common-lisp:progn
 (common-lisp:define-condition freetier-error
     (aws-sdk/error:aws-error)
     common-lisp:nil)
 (common-lisp:export 'freetier-error))
(common-lisp:progn
 (common-lisp:defclass freetier-request (aws-sdk/json-request:json-request)
                       common-lisp:nil
                       (:default-initargs :service "freetier" :api-version
                        "2023-09-07" :host-prefix "freetier" :signing-name
                        "freetier" :global-host common-lisp:nil :target-prefix
                        "AWSFreeTierService" :json-version "1.0"))
 (common-lisp:export 'freetier-request))
(common-lisp:defvar *error-map*
  '(("InternalServerException" . internal-server-exception)
    ("ThrottlingException" . throttling-exception)
    ("ValidationException" . validation-exception)))
(common-lisp:deftype dimension () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (dimension-values (:copier common-lisp:nil)
      (:conc-name "struct-shape-dimension-values-"))
   (key (common-lisp:error ":key is required") :type
    (common-lisp:or dimension common-lisp:null))
   (match-options (common-lisp:error ":match-options is required") :type
    (common-lisp:or match-options common-lisp:null))
   (values (common-lisp:error ":values is required") :type
    (common-lisp:or values common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'dimension-values 'make-dimension-values))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input dimension-values))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input dimension-values))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key))
      (common-lisp:list
       (common-lisp:cons "Key"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'match-options))
      (common-lisp:list
       (common-lisp:cons "MatchOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'values))
      (common-lisp:list
       (common-lisp:cons "Values"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input dimension-values))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (expression (:copier common-lisp:nil)
      (:conc-name "struct-shape-expression-"))
   (and common-lisp:nil :type (common-lisp:or expressions common-lisp:null))
   (dimensions common-lisp:nil :type
    (common-lisp:or dimension-values common-lisp:null))
   (not common-lisp:nil :type (common-lisp:or expression common-lisp:null))
   (or common-lisp:nil :type (common-lisp:or expressions common-lisp:null)))
 (common-lisp:export (common-lisp:list 'expression 'make-expression))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input expression))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input expression))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'and))
      (common-lisp:list
       (common-lisp:cons "And"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dimensions))
      (common-lisp:list
       (common-lisp:cons "Dimensions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'not))
      (common-lisp:list
       (common-lisp:cons "Not"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'or))
      (common-lisp:list
       (common-lisp:cons "Or"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input expression))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype expressions () '(trivial-types:proper-list expression))
 (common-lisp:defun make-expressions
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list expression))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (free-tier-usage (:copier common-lisp:nil)
      (:conc-name "struct-shape-free-tier-usage-"))
   (actual-usage-amount common-lisp:nil :type
    (common-lisp:or generic-double common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or generic-string common-lisp:null))
   (forecasted-usage-amount common-lisp:nil :type
    (common-lisp:or generic-double common-lisp:null))
   (free-tier-type common-lisp:nil :type
    (common-lisp:or generic-string common-lisp:null))
   (limit common-lisp:nil :type
    (common-lisp:or generic-double common-lisp:null))
   (operation common-lisp:nil :type
    (common-lisp:or generic-string common-lisp:null))
   (region common-lisp:nil :type
    (common-lisp:or generic-string common-lisp:null))
   (service common-lisp:nil :type
    (common-lisp:or generic-string common-lisp:null))
   (unit common-lisp:nil :type
    (common-lisp:or generic-string common-lisp:null))
   (usage-type common-lisp:nil :type
    (common-lisp:or generic-string common-lisp:null)))
 (common-lisp:export (common-lisp:list 'free-tier-usage 'make-free-tier-usage))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input free-tier-usage))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input free-tier-usage))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'actual-usage-amount))
      (common-lisp:list
       (common-lisp:cons "actualUsageAmount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'forecasted-usage-amount))
      (common-lisp:list
       (common-lisp:cons "forecastedUsageAmount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'free-tier-type))
      (common-lisp:list
       (common-lisp:cons "freeTierType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'limit))
      (common-lisp:list
       (common-lisp:cons "limit"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'operation))
      (common-lisp:list
       (common-lisp:cons "operation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'region))
      (common-lisp:list
       (common-lisp:cons "region"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service))
      (common-lisp:list
       (common-lisp:cons "service"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'unit))
      (common-lisp:list
       (common-lisp:cons "unit"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'usage-type))
      (common-lisp:list
       (common-lisp:cons "usageType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input free-tier-usage))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype free-tier-usages ()
   '(trivial-types:proper-list free-tier-usage))
 (common-lisp:defun make-free-tier-usages
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list free-tier-usage))
   aws-sdk/generator/shape::members))
(common-lisp:deftype generic-double () 'common-lisp:double-float)
(common-lisp:deftype generic-string () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (get-free-tier-usage-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-free-tier-usage-request-"))
   (filter common-lisp:nil :type (common-lisp:or expression common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or max-results common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-page-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-free-tier-usage-request
                    'make-get-free-tier-usage-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-free-tier-usage-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-free-tier-usage-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filter))
      (common-lisp:list
       (common-lisp:cons "filter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "maxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-free-tier-usage-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-free-tier-usage-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-free-tier-usage-response-"))
   (free-tier-usages (common-lisp:error ":freetierusages is required") :type
    (common-lisp:or free-tier-usages common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-page-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-free-tier-usage-response
                    'make-get-free-tier-usage-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-free-tier-usage-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-free-tier-usage-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'free-tier-usages))
      (common-lisp:list
       (common-lisp:cons "freeTierUsages"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-free-tier-usage-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition internal-server-exception
     (freetier-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       internal-server-exception-message)))
 (common-lisp:export
  (common-lisp:list 'internal-server-exception
                    'internal-server-exception-message)))
(common-lisp:deftype match-option () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype match-options ()
   '(trivial-types:proper-list match-option))
 (common-lisp:defun make-match-options
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list match-option))
   aws-sdk/generator/shape::members))
(common-lisp:deftype max-results () 'common-lisp:integer)
(common-lisp:deftype next-page-token () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition throttling-exception
     (freetier-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       throttling-exception-message)))
 (common-lisp:export
  (common-lisp:list 'throttling-exception 'throttling-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition validation-exception
     (freetier-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       validation-exception-message)))
 (common-lisp:export
  (common-lisp:list 'validation-exception 'validation-exception-message)))
(common-lisp:deftype value () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype values () '(trivial-types:proper-list value))
 (common-lisp:defun make-values
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list value))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defun get-free-tier-usage
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key filter max-results next-token)
   (common-lisp:declare (common-lisp:ignorable filter max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-free-tier-usage-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'freetier-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetFreeTierUsage"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-free-tier-usage))
