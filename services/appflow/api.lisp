;; DO NOT EDIT: File is generated by AWS-SDK/GENERATOR.

(common-lisp:defpackage #:aws-sdk/services/appflow/api
  (:use)
  (:nicknames #:aws/appflow)
  (:import-from #:aws-sdk/generator/shape)
  (:import-from #:aws-sdk/generator/operation)
  (:import-from #:aws-sdk/api)
  (:import-from #:aws-sdk/request)
  (:import-from #:aws-sdk/json-request)
  (:import-from #:aws-sdk/rest-json-request)
  (:import-from #:aws-sdk/rest-xml-request)
  (:import-from #:aws-sdk/query-request)
  (:import-from #:aws-sdk/error))
(common-lisp:in-package #:aws-sdk/services/appflow/api)
(common-lisp:progn
 (common-lisp:define-condition appflow-error
     (aws-sdk/error:aws-error)
     common-lisp:nil)
 (common-lisp:export 'appflow-error))
(common-lisp:progn
 (common-lisp:defclass appflow-request
                       (aws-sdk/generator/service::rest-json-request)
                       common-lisp:nil
                       (:default-initargs :service "appflow" :api-version
                        "2020-08-23" :host-prefix "appflow" :signing-name
                        "appflow" :global-host common-lisp:nil))
 (common-lisp:export 'appflow-request))
(common-lisp:defvar *error-map*
  '(("AccessDeniedException" . access-denied-exception)
    ("ConflictException" . conflict-exception)
    ("ConnectorAuthenticationException" . connector-authentication-exception)
    ("ConnectorServerException" . connector-server-exception)
    ("InternalServerException" . internal-server-exception)
    ("ResourceNotFoundException" . resource-not-found-exception)
    ("ServiceQuotaExceededException" . service-quota-exceeded-exception)
    ("ThrottlingException" . throttling-exception)
    ("UnsupportedOperationException" . unsupported-operation-exception)
    ("ValidationException" . validation-exception)))
(common-lisp:deftype arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition access-denied-exception
     (appflow-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       access-denied-exception-message)))
 (common-lisp:export
  (common-lisp:list 'access-denied-exception 'access-denied-exception-message)))
(common-lisp:deftype access-key-id () 'common-lisp:string)
(common-lisp:deftype access-token () 'common-lisp:string)
(common-lisp:deftype account-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (aggregation-config (:copier common-lisp:nil)
      (:conc-name "struct-shape-aggregation-config-"))
   (aggregation-type common-lisp:nil :type
    (common-lisp:or aggregation-type common-lisp:null))
   (target-file-size common-lisp:nil :type
    (common-lisp:or long common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'aggregation-config 'make-aggregation-config))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input aggregation-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input aggregation-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'aggregation-type))
      (common-lisp:list
       (common-lisp:cons "aggregationType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target-file-size))
      (common-lisp:list
       (common-lisp:cons "targetFileSize"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input aggregation-config))
   common-lisp:nil))
(common-lisp:deftype aggregation-type () 'common-lisp:string)
(common-lisp:deftype amplitude-connector-operator () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (amplitude-connector-profile-credentials (:copier common-lisp:nil)
      (:conc-name "struct-shape-amplitude-connector-profile-credentials-"))
   (api-key (common-lisp:error ":apikey is required") :type
    (common-lisp:or api-key common-lisp:null))
   (secret-key (common-lisp:error ":secretkey is required") :type
    (common-lisp:or secret-key common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'amplitude-connector-profile-credentials
                    'make-amplitude-connector-profile-credentials))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          amplitude-connector-profile-credentials))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          amplitude-connector-profile-credentials))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'api-key))
      (common-lisp:list
       (common-lisp:cons "apiKey"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'secret-key))
      (common-lisp:list
       (common-lisp:cons "secretKey"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          amplitude-connector-profile-credentials))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (amplitude-connector-profile-properties (:copier common-lisp:nil)
      (:conc-name "struct-shape-amplitude-connector-profile-properties-")))
 (common-lisp:export
  (common-lisp:list 'amplitude-connector-profile-properties
                    'make-amplitude-connector-profile-properties))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          amplitude-connector-profile-properties))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          amplitude-connector-profile-properties))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          amplitude-connector-profile-properties))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (amplitude-metadata (:copier common-lisp:nil)
      (:conc-name "struct-shape-amplitude-metadata-")))
 (common-lisp:export
  (common-lisp:list 'amplitude-metadata 'make-amplitude-metadata))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input amplitude-metadata))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input amplitude-metadata))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input amplitude-metadata))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (amplitude-source-properties (:copier common-lisp:nil)
      (:conc-name "struct-shape-amplitude-source-properties-"))
   (object (common-lisp:error ":object is required") :type
    (common-lisp:or object common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'amplitude-source-properties
                    'make-amplitude-source-properties))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          amplitude-source-properties))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          amplitude-source-properties))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'object))
      (common-lisp:list
       (common-lisp:cons "object"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          amplitude-source-properties))
   common-lisp:nil))
(common-lisp:deftype api-key () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (api-key-credentials (:copier common-lisp:nil)
      (:conc-name "struct-shape-api-key-credentials-"))
   (api-key (common-lisp:error ":apikey is required") :type
    (common-lisp:or api-key common-lisp:null))
   (api-secret-key common-lisp:nil :type
    (common-lisp:or api-secret-key common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'api-key-credentials 'make-api-key-credentials))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input api-key-credentials))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input api-key-credentials))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'api-key))
      (common-lisp:list
       (common-lisp:cons "apiKey"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'api-secret-key))
      (common-lisp:list
       (common-lisp:cons "apiSecretKey"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input api-key-credentials))
   common-lisp:nil))
(common-lisp:deftype api-secret-key () 'common-lisp:string)
(common-lisp:deftype api-token () 'common-lisp:string)
(common-lisp:deftype api-version () 'common-lisp:string)
(common-lisp:deftype application-host-url () 'common-lisp:string)
(common-lisp:deftype application-key () 'common-lisp:string)
(common-lisp:deftype application-service-path () 'common-lisp:string)
(common-lisp:deftype application-type () 'common-lisp:string)
(common-lisp:deftype auth-code () 'common-lisp:string)
(common-lisp:deftype auth-code-url () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype auth-code-url-list ()
   '(trivial-types:proper-list auth-code-url))
 (common-lisp:defun make-auth-code-url-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list auth-code-url))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (auth-parameter (:copier common-lisp:nil)
      (:conc-name "struct-shape-auth-parameter-"))
   (key common-lisp:nil :type (common-lisp:or key common-lisp:null))
   (is-required common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (label common-lisp:nil :type (common-lisp:or label common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or description common-lisp:null))
   (is-sensitive-field common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (connector-supplied-values common-lisp:nil :type
    (common-lisp:or connector-supplied-value-list common-lisp:null)))
 (common-lisp:export (common-lisp:list 'auth-parameter 'make-auth-parameter))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input auth-parameter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input auth-parameter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key))
      (common-lisp:list
       (common-lisp:cons "key"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'is-required))
      (common-lisp:list
       (common-lisp:cons "isRequired"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'label))
      (common-lisp:list
       (common-lisp:cons "label"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'is-sensitive-field))
      (common-lisp:list
       (common-lisp:cons "isSensitiveField"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'connector-supplied-values))
      (common-lisp:list
       (common-lisp:cons "connectorSuppliedValues"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input auth-parameter))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype auth-parameter-list ()
   '(trivial-types:proper-list auth-parameter))
 (common-lisp:defun make-auth-parameter-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list auth-parameter))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (authentication-config (:copier common-lisp:nil)
      (:conc-name "struct-shape-authentication-config-"))
   (is-basic-auth-supported common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (is-api-key-auth-supported common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (is-oauth2supported common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (is-custom-auth-supported common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (o-auth2defaults common-lisp:nil :type
    (common-lisp:or oauth2defaults common-lisp:null))
   (custom-auth-configs common-lisp:nil :type
    (common-lisp:or custom-auth-config-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'authentication-config 'make-authentication-config))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          authentication-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          authentication-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'is-basic-auth-supported))
      (common-lisp:list
       (common-lisp:cons "isBasicAuthSupported"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'is-api-key-auth-supported))
      (common-lisp:list
       (common-lisp:cons "isApiKeyAuthSupported"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'is-oauth2supported))
      (common-lisp:list
       (common-lisp:cons "isOAuth2Supported"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'is-custom-auth-supported))
      (common-lisp:list
       (common-lisp:cons "isCustomAuthSupported"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'o-auth2defaults))
      (common-lisp:list
       (common-lisp:cons "oAuth2Defaults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'custom-auth-configs))
      (common-lisp:list
       (common-lisp:cons "customAuthConfigs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          authentication-config))
   common-lisp:nil))
(common-lisp:deftype authentication-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (basic-auth-credentials (:copier common-lisp:nil)
      (:conc-name "struct-shape-basic-auth-credentials-"))
   (username (common-lisp:error ":username is required") :type
    (common-lisp:or username common-lisp:null))
   (password (common-lisp:error ":password is required") :type
    (common-lisp:or password common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'basic-auth-credentials 'make-basic-auth-credentials))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          basic-auth-credentials))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          basic-auth-credentials))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'username))
      (common-lisp:list
       (common-lisp:cons "username"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'password))
      (common-lisp:list
       (common-lisp:cons "password"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          basic-auth-credentials))
   common-lisp:nil))
(common-lisp:deftype boolean () 'common-lisp:boolean)
(common-lisp:deftype bucket-name () 'common-lisp:string)
(common-lisp:deftype bucket-prefix () 'common-lisp:string)
(common-lisp:deftype business-unit-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (cancel-flow-executions-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-cancel-flow-executions-request-"))
   (flow-name (common-lisp:error ":flowname is required") :type
    (common-lisp:or flow-name common-lisp:null))
   (execution-ids common-lisp:nil :type
    (common-lisp:or execution-ids common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'cancel-flow-executions-request
                    'make-cancel-flow-executions-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          cancel-flow-executions-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          cancel-flow-executions-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'flow-name))
      (common-lisp:list
       (common-lisp:cons "flowName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'execution-ids))
      (common-lisp:list
       (common-lisp:cons "executionIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          cancel-flow-executions-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (cancel-flow-executions-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-cancel-flow-executions-response-"))
   (invalid-executions common-lisp:nil :type
    (common-lisp:or execution-ids common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'cancel-flow-executions-response
                    'make-cancel-flow-executions-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          cancel-flow-executions-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          cancel-flow-executions-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'invalid-executions))
      (common-lisp:list
       (common-lisp:cons "invalidExecutions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          cancel-flow-executions-response))
   common-lisp:nil))
(common-lisp:deftype catalog-type () 'common-lisp:string)
(common-lisp:deftype client-credentials-arn () 'common-lisp:string)
(common-lisp:deftype client-id () 'common-lisp:string)
(common-lisp:deftype client-number () 'common-lisp:string)
(common-lisp:deftype client-secret () 'common-lisp:string)
(common-lisp:deftype client-token () 'common-lisp:string)
(common-lisp:deftype cluster-identifier () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition conflict-exception
     (appflow-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       conflict-exception-message)))
 (common-lisp:export
  (common-lisp:list 'conflict-exception 'conflict-exception-message)))
(common-lisp:deftype connection-mode () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition connector-authentication-exception
     (appflow-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       connector-authentication-exception-message)))
 (common-lisp:export
  (common-lisp:list 'connector-authentication-exception
                    'connector-authentication-exception-message)))
(common-lisp:progn
 (common-lisp:defstruct
     (connector-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-connector-configuration-"))
   (can-use-as-source common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (can-use-as-destination common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (supported-destination-connectors common-lisp:nil :type
    (common-lisp:or connector-type-list common-lisp:null))
   (supported-scheduling-frequencies common-lisp:nil :type
    (common-lisp:or scheduling-frequency-type-list common-lisp:null))
   (is-private-link-enabled common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (is-private-link-endpoint-url-required common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (supported-trigger-types common-lisp:nil :type
    (common-lisp:or trigger-type-list common-lisp:null))
   (connector-metadata common-lisp:nil :type
    (common-lisp:or connector-metadata common-lisp:null))
   (connector-type common-lisp:nil :type
    (common-lisp:or connector-type common-lisp:null))
   (connector-label common-lisp:nil :type
    (common-lisp:or connector-label common-lisp:null))
   (connector-description common-lisp:nil :type
    (common-lisp:or connector-description common-lisp:null))
   (connector-owner common-lisp:nil :type
    (common-lisp:or connector-owner common-lisp:null))
   (connector-name common-lisp:nil :type
    (common-lisp:or connector-name common-lisp:null))
   (connector-version common-lisp:nil :type
    (common-lisp:or connector-version common-lisp:null))
   (connector-arn common-lisp:nil :type (common-lisp:or arn common-lisp:null))
   (connector-modes common-lisp:nil :type
    (common-lisp:or connector-mode-list common-lisp:null))
   (authentication-config common-lisp:nil :type
    (common-lisp:or authentication-config common-lisp:null))
   (connector-runtime-settings common-lisp:nil :type
    (common-lisp:or connector-runtime-setting-list common-lisp:null))
   (supported-api-versions common-lisp:nil :type
    (common-lisp:or supported-api-version-list common-lisp:null))
   (supported-operators common-lisp:nil :type
    (common-lisp:or supported-operator-list common-lisp:null))
   (supported-write-operations common-lisp:nil :type
    (common-lisp:or supported-write-operation-list common-lisp:null))
   (connector-provisioning-type common-lisp:nil :type
    (common-lisp:or connector-provisioning-type common-lisp:null))
   (connector-provisioning-config common-lisp:nil :type
    (common-lisp:or connector-provisioning-config common-lisp:null))
   (logo-url common-lisp:nil :type (common-lisp:or logo-url common-lisp:null))
   (registered-at common-lisp:nil :type (common-lisp:or date common-lisp:null))
   (registered-by common-lisp:nil :type
    (common-lisp:or registered-by common-lisp:null))
   (supported-data-transfer-types common-lisp:nil :type
    (common-lisp:or supported-data-transfer-type-list common-lisp:null))
   (supported-data-transfer-apis common-lisp:nil :type
    (common-lisp:or supported-data-transfer-apis common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'connector-configuration 'make-connector-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          connector-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          connector-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'can-use-as-source))
      (common-lisp:list
       (common-lisp:cons "canUseAsSource"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'can-use-as-destination))
      (common-lisp:list
       (common-lisp:cons "canUseAsDestination"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'supported-destination-connectors))
      (common-lisp:list
       (common-lisp:cons "supportedDestinationConnectors"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'supported-scheduling-frequencies))
      (common-lisp:list
       (common-lisp:cons "supportedSchedulingFrequencies"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'is-private-link-enabled))
      (common-lisp:list
       (common-lisp:cons "isPrivateLinkEnabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'is-private-link-endpoint-url-required))
      (common-lisp:list
       (common-lisp:cons "isPrivateLinkEndpointUrlRequired"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'supported-trigger-types))
      (common-lisp:list
       (common-lisp:cons "supportedTriggerTypes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'connector-metadata))
      (common-lisp:list
       (common-lisp:cons "connectorMetadata"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'connector-type))
      (common-lisp:list
       (common-lisp:cons "connectorType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'connector-label))
      (common-lisp:list
       (common-lisp:cons "connectorLabel"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'connector-description))
      (common-lisp:list
       (common-lisp:cons "connectorDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'connector-owner))
      (common-lisp:list
       (common-lisp:cons "connectorOwner"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'connector-name))
      (common-lisp:list
       (common-lisp:cons "connectorName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'connector-version))
      (common-lisp:list
       (common-lisp:cons "connectorVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'connector-arn))
      (common-lisp:list
       (common-lisp:cons "connectorArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'connector-modes))
      (common-lisp:list
       (common-lisp:cons "connectorModes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'authentication-config))
      (common-lisp:list
       (common-lisp:cons "authenticationConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'connector-runtime-settings))
      (common-lisp:list
       (common-lisp:cons "connectorRuntimeSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'supported-api-versions))
      (common-lisp:list
       (common-lisp:cons "supportedApiVersions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'supported-operators))
      (common-lisp:list
       (common-lisp:cons "supportedOperators"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'supported-write-operations))
      (common-lisp:list
       (common-lisp:cons "supportedWriteOperations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'connector-provisioning-type))
      (common-lisp:list
       (common-lisp:cons "connectorProvisioningType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'connector-provisioning-config))
      (common-lisp:list
       (common-lisp:cons "connectorProvisioningConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'logo-url))
      (common-lisp:list
       (common-lisp:cons "logoURL"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'registered-at))
      (common-lisp:list
       (common-lisp:cons "registeredAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'registered-by))
      (common-lisp:list
       (common-lisp:cons "registeredBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'supported-data-transfer-types))
      (common-lisp:list
       (common-lisp:cons "supportedDataTransferTypes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'supported-data-transfer-apis))
      (common-lisp:list
       (common-lisp:cons "supportedDataTransferApis"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          connector-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype connector-configurations-map () 'common-lisp:hash-table)
 (common-lisp:defun make-connector-configurations-map
                    (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:deftype connector-description () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (connector-detail (:copier common-lisp:nil)
      (:conc-name "struct-shape-connector-detail-"))
   (connector-description common-lisp:nil :type
    (common-lisp:or connector-description common-lisp:null))
   (connector-name common-lisp:nil :type
    (common-lisp:or connector-name common-lisp:null))
   (connector-owner common-lisp:nil :type
    (common-lisp:or connector-owner common-lisp:null))
   (connector-version common-lisp:nil :type
    (common-lisp:or connector-version common-lisp:null))
   (application-type common-lisp:nil :type
    (common-lisp:or application-type common-lisp:null))
   (connector-type common-lisp:nil :type
    (common-lisp:or connector-type common-lisp:null))
   (connector-label common-lisp:nil :type
    (common-lisp:or connector-label common-lisp:null))
   (registered-at common-lisp:nil :type (common-lisp:or date common-lisp:null))
   (registered-by common-lisp:nil :type
    (common-lisp:or registered-by common-lisp:null))
   (connector-provisioning-type common-lisp:nil :type
    (common-lisp:or connector-provisioning-type common-lisp:null))
   (connector-modes common-lisp:nil :type
    (common-lisp:or connector-mode-list common-lisp:null))
   (supported-data-transfer-types common-lisp:nil :type
    (common-lisp:or supported-data-transfer-type-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'connector-detail 'make-connector-detail))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input connector-detail))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input connector-detail))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'connector-description))
      (common-lisp:list
       (common-lisp:cons "connectorDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'connector-name))
      (common-lisp:list
       (common-lisp:cons "connectorName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'connector-owner))
      (common-lisp:list
       (common-lisp:cons "connectorOwner"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'connector-version))
      (common-lisp:list
       (common-lisp:cons "connectorVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'application-type))
      (common-lisp:list
       (common-lisp:cons "applicationType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'connector-type))
      (common-lisp:list
       (common-lisp:cons "connectorType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'connector-label))
      (common-lisp:list
       (common-lisp:cons "connectorLabel"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'registered-at))
      (common-lisp:list
       (common-lisp:cons "registeredAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'registered-by))
      (common-lisp:list
       (common-lisp:cons "registeredBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'connector-provisioning-type))
      (common-lisp:list
       (common-lisp:cons "connectorProvisioningType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'connector-modes))
      (common-lisp:list
       (common-lisp:cons "connectorModes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'supported-data-transfer-types))
      (common-lisp:list
       (common-lisp:cons "supportedDataTransferTypes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input connector-detail))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (connector-entity (:copier common-lisp:nil)
      (:conc-name "struct-shape-connector-entity-"))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or name common-lisp:null))
   (label common-lisp:nil :type (common-lisp:or label common-lisp:null))
   (has-nested-entities common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'connector-entity 'make-connector-entity))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input connector-entity))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input connector-entity))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'label))
      (common-lisp:list
       (common-lisp:cons "label"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'has-nested-entities))
      (common-lisp:list
       (common-lisp:cons "hasNestedEntities"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input connector-entity))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (connector-entity-field (:copier common-lisp:nil)
      (:conc-name "struct-shape-connector-entity-field-"))
   (identifier (common-lisp:error ":identifier is required") :type
    (common-lisp:or identifier common-lisp:null))
   (parent-identifier common-lisp:nil :type
    (common-lisp:or identifier common-lisp:null))
   (label common-lisp:nil :type (common-lisp:or label common-lisp:null))
   (is-primary-key common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (default-value common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (is-deprecated common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (supported-field-type-details common-lisp:nil :type
    (common-lisp:or supported-field-type-details common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or description common-lisp:null))
   (source-properties common-lisp:nil :type
    (common-lisp:or source-field-properties common-lisp:null))
   (destination-properties common-lisp:nil :type
    (common-lisp:or destination-field-properties common-lisp:null))
   (custom-properties common-lisp:nil :type
    (common-lisp:or custom-properties common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'connector-entity-field 'make-connector-entity-field))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          connector-entity-field))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          connector-entity-field))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'identifier))
      (common-lisp:list
       (common-lisp:cons "identifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'parent-identifier))
      (common-lisp:list
       (common-lisp:cons "parentIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'label))
      (common-lisp:list
       (common-lisp:cons "label"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'is-primary-key))
      (common-lisp:list
       (common-lisp:cons "isPrimaryKey"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'default-value))
      (common-lisp:list
       (common-lisp:cons "defaultValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'is-deprecated))
      (common-lisp:list
       (common-lisp:cons "isDeprecated"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'supported-field-type-details))
      (common-lisp:list
       (common-lisp:cons "supportedFieldTypeDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-properties))
      (common-lisp:list
       (common-lisp:cons "sourceProperties"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'destination-properties))
      (common-lisp:list
       (common-lisp:cons "destinationProperties"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'custom-properties))
      (common-lisp:list
       (common-lisp:cons "customProperties"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          connector-entity-field))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype connector-entity-field-list ()
   '(trivial-types:proper-list connector-entity-field))
 (common-lisp:defun make-connector-entity-field-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list connector-entity-field))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype connector-entity-list ()
   '(trivial-types:proper-list connector-entity))
 (common-lisp:defun make-connector-entity-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list connector-entity))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype connector-entity-map () 'common-lisp:hash-table)
 (common-lisp:defun make-connector-entity-map
                    (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:deftype connector-label () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype connector-list ()
   '(trivial-types:proper-list connector-detail))
 (common-lisp:defun make-connector-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list connector-detail))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (connector-metadata (:copier common-lisp:nil)
      (:conc-name "struct-shape-connector-metadata-"))
   (amplitude common-lisp:nil :type
    (common-lisp:or amplitude-metadata common-lisp:null))
   (datadog common-lisp:nil :type
    (common-lisp:or datadog-metadata common-lisp:null))
   (dynatrace common-lisp:nil :type
    (common-lisp:or dynatrace-metadata common-lisp:null))
   (google-analytics common-lisp:nil :type
    (common-lisp:or google-analytics-metadata common-lisp:null))
   (infor-nexus common-lisp:nil :type
    (common-lisp:or infor-nexus-metadata common-lisp:null))
   (marketo common-lisp:nil :type
    (common-lisp:or marketo-metadata common-lisp:null))
   (redshift common-lisp:nil :type
    (common-lisp:or redshift-metadata common-lisp:null))
   (s3 common-lisp:nil :type (common-lisp:or s3metadata common-lisp:null))
   (salesforce common-lisp:nil :type
    (common-lisp:or salesforce-metadata common-lisp:null))
   (service-now common-lisp:nil :type
    (common-lisp:or service-now-metadata common-lisp:null))
   (singular common-lisp:nil :type
    (common-lisp:or singular-metadata common-lisp:null))
   (slack common-lisp:nil :type
    (common-lisp:or slack-metadata common-lisp:null))
   (snowflake common-lisp:nil :type
    (common-lisp:or snowflake-metadata common-lisp:null))
   (trendmicro common-lisp:nil :type
    (common-lisp:or trendmicro-metadata common-lisp:null))
   (veeva common-lisp:nil :type
    (common-lisp:or veeva-metadata common-lisp:null))
   (zendesk common-lisp:nil :type
    (common-lisp:or zendesk-metadata common-lisp:null))
   (event-bridge common-lisp:nil :type
    (common-lisp:or event-bridge-metadata common-lisp:null))
   (upsolver common-lisp:nil :type
    (common-lisp:or upsolver-metadata common-lisp:null))
   (customer-profiles common-lisp:nil :type
    (common-lisp:or customer-profiles-metadata common-lisp:null))
   (honeycode common-lisp:nil :type
    (common-lisp:or honeycode-metadata common-lisp:null))
   (sapodata common-lisp:nil :type
    (common-lisp:or sapodata-metadata common-lisp:null))
   (pardot common-lisp:nil :type
    (common-lisp:or pardot-metadata common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'connector-metadata 'make-connector-metadata))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input connector-metadata))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input connector-metadata))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'amplitude))
      (common-lisp:list
       (common-lisp:cons "Amplitude"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'datadog))
      (common-lisp:list
       (common-lisp:cons "Datadog"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dynatrace))
      (common-lisp:list
       (common-lisp:cons "Dynatrace"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'google-analytics))
      (common-lisp:list
       (common-lisp:cons "GoogleAnalytics"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'infor-nexus))
      (common-lisp:list
       (common-lisp:cons "InforNexus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marketo))
      (common-lisp:list
       (common-lisp:cons "Marketo"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'redshift))
      (common-lisp:list
       (common-lisp:cons "Redshift"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3))
      (common-lisp:list
       (common-lisp:cons "S3"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'salesforce))
      (common-lisp:list
       (common-lisp:cons "Salesforce"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service-now))
      (common-lisp:list
       (common-lisp:cons "ServiceNow"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'singular))
      (common-lisp:list
       (common-lisp:cons "Singular"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'slack))
      (common-lisp:list
       (common-lisp:cons "Slack"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'snowflake))
      (common-lisp:list
       (common-lisp:cons "Snowflake"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'trendmicro))
      (common-lisp:list
       (common-lisp:cons "Trendmicro"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'veeva))
      (common-lisp:list
       (common-lisp:cons "Veeva"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'zendesk))
      (common-lisp:list
       (common-lisp:cons "Zendesk"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'event-bridge))
      (common-lisp:list
       (common-lisp:cons "EventBridge"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'upsolver))
      (common-lisp:list
       (common-lisp:cons "Upsolver"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'customer-profiles))
      (common-lisp:list
       (common-lisp:cons "CustomerProfiles"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'honeycode))
      (common-lisp:list
       (common-lisp:cons "Honeycode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sapodata))
      (common-lisp:list
       (common-lisp:cons "SAPOData"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pardot))
      (common-lisp:list
       (common-lisp:cons "Pardot"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input connector-metadata))
   common-lisp:nil))
(common-lisp:deftype connector-mode () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype connector-mode-list ()
   '(trivial-types:proper-list connector-mode))
 (common-lisp:defun make-connector-mode-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list connector-mode))
   aws-sdk/generator/shape::members))
(common-lisp:deftype connector-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (connector-oauth-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-connector-oauth-request-"))
   (auth-code common-lisp:nil :type
    (common-lisp:or auth-code common-lisp:null))
   (redirect-uri common-lisp:nil :type
    (common-lisp:or redirect-uri common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'connector-oauth-request 'make-connector-oauth-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          connector-oauth-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          connector-oauth-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'auth-code))
      (common-lisp:list
       (common-lisp:cons "authCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'redirect-uri))
      (common-lisp:list
       (common-lisp:cons "redirectUri"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          connector-oauth-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (connector-operator (:copier common-lisp:nil)
      (:conc-name "struct-shape-connector-operator-"))
   (amplitude common-lisp:nil :type
    (common-lisp:or amplitude-connector-operator common-lisp:null))
   (datadog common-lisp:nil :type
    (common-lisp:or datadog-connector-operator common-lisp:null))
   (dynatrace common-lisp:nil :type
    (common-lisp:or dynatrace-connector-operator common-lisp:null))
   (google-analytics common-lisp:nil :type
    (common-lisp:or google-analytics-connector-operator common-lisp:null))
   (infor-nexus common-lisp:nil :type
    (common-lisp:or infor-nexus-connector-operator common-lisp:null))
   (marketo common-lisp:nil :type
    (common-lisp:or marketo-connector-operator common-lisp:null))
   (s3 common-lisp:nil :type
    (common-lisp:or s3connector-operator common-lisp:null))
   (salesforce common-lisp:nil :type
    (common-lisp:or salesforce-connector-operator common-lisp:null))
   (service-now common-lisp:nil :type
    (common-lisp:or service-now-connector-operator common-lisp:null))
   (singular common-lisp:nil :type
    (common-lisp:or singular-connector-operator common-lisp:null))
   (slack common-lisp:nil :type
    (common-lisp:or slack-connector-operator common-lisp:null))
   (trendmicro common-lisp:nil :type
    (common-lisp:or trendmicro-connector-operator common-lisp:null))
   (veeva common-lisp:nil :type
    (common-lisp:or veeva-connector-operator common-lisp:null))
   (zendesk common-lisp:nil :type
    (common-lisp:or zendesk-connector-operator common-lisp:null))
   (sapodata common-lisp:nil :type
    (common-lisp:or sapodata-connector-operator common-lisp:null))
   (custom-connector common-lisp:nil :type
    (common-lisp:or operator common-lisp:null))
   (pardot common-lisp:nil :type
    (common-lisp:or pardot-connector-operator common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'connector-operator 'make-connector-operator))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input connector-operator))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input connector-operator))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'amplitude))
      (common-lisp:list
       (common-lisp:cons "Amplitude"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'datadog))
      (common-lisp:list
       (common-lisp:cons "Datadog"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dynatrace))
      (common-lisp:list
       (common-lisp:cons "Dynatrace"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'google-analytics))
      (common-lisp:list
       (common-lisp:cons "GoogleAnalytics"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'infor-nexus))
      (common-lisp:list
       (common-lisp:cons "InforNexus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marketo))
      (common-lisp:list
       (common-lisp:cons "Marketo"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3))
      (common-lisp:list
       (common-lisp:cons "S3"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'salesforce))
      (common-lisp:list
       (common-lisp:cons "Salesforce"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service-now))
      (common-lisp:list
       (common-lisp:cons "ServiceNow"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'singular))
      (common-lisp:list
       (common-lisp:cons "Singular"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'slack))
      (common-lisp:list
       (common-lisp:cons "Slack"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'trendmicro))
      (common-lisp:list
       (common-lisp:cons "Trendmicro"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'veeva))
      (common-lisp:list
       (common-lisp:cons "Veeva"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'zendesk))
      (common-lisp:list
       (common-lisp:cons "Zendesk"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sapodata))
      (common-lisp:list
       (common-lisp:cons "SAPOData"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'custom-connector))
      (common-lisp:list
       (common-lisp:cons "CustomConnector"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pardot))
      (common-lisp:list
       (common-lisp:cons "Pardot"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input connector-operator))
   common-lisp:nil))
(common-lisp:deftype connector-owner () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (connector-profile (:copier common-lisp:nil)
      (:conc-name "struct-shape-connector-profile-"))
   (connector-profile-arn common-lisp:nil :type
    (common-lisp:or connector-profile-arn common-lisp:null))
   (connector-profile-name common-lisp:nil :type
    (common-lisp:or connector-profile-name common-lisp:null))
   (connector-type common-lisp:nil :type
    (common-lisp:or connector-type common-lisp:null))
   (connector-label common-lisp:nil :type
    (common-lisp:or connector-label common-lisp:null))
   (connection-mode common-lisp:nil :type
    (common-lisp:or connection-mode common-lisp:null))
   (credentials-arn common-lisp:nil :type
    (common-lisp:or arn common-lisp:null))
   (connector-profile-properties common-lisp:nil :type
    (common-lisp:or connector-profile-properties common-lisp:null))
   (created-at common-lisp:nil :type (common-lisp:or date common-lisp:null))
   (last-updated-at common-lisp:nil :type
    (common-lisp:or date common-lisp:null))
   (private-connection-provisioning-state common-lisp:nil :type
    (common-lisp:or private-connection-provisioning-state common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'connector-profile 'make-connector-profile))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input connector-profile))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input connector-profile))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'connector-profile-arn))
      (common-lisp:list
       (common-lisp:cons "connectorProfileArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'connector-profile-name))
      (common-lisp:list
       (common-lisp:cons "connectorProfileName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'connector-type))
      (common-lisp:list
       (common-lisp:cons "connectorType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'connector-label))
      (common-lisp:list
       (common-lisp:cons "connectorLabel"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'connection-mode))
      (common-lisp:list
       (common-lisp:cons "connectionMode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'credentials-arn))
      (common-lisp:list
       (common-lisp:cons "credentialsArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'connector-profile-properties))
      (common-lisp:list
       (common-lisp:cons "connectorProfileProperties"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "createdAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-updated-at))
      (common-lisp:list
       (common-lisp:cons "lastUpdatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'private-connection-provisioning-state))
      (common-lisp:list
       (common-lisp:cons "privateConnectionProvisioningState"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input connector-profile))
   common-lisp:nil))
(common-lisp:deftype connector-profile-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (connector-profile-config (:copier common-lisp:nil)
      (:conc-name "struct-shape-connector-profile-config-"))
   (connector-profile-properties
    (common-lisp:error ":connectorprofileproperties is required") :type
    (common-lisp:or connector-profile-properties common-lisp:null))
   (connector-profile-credentials common-lisp:nil :type
    (common-lisp:or connector-profile-credentials common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'connector-profile-config 'make-connector-profile-config))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          connector-profile-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          connector-profile-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'connector-profile-properties))
      (common-lisp:list
       (common-lisp:cons "connectorProfileProperties"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'connector-profile-credentials))
      (common-lisp:list
       (common-lisp:cons "connectorProfileCredentials"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          connector-profile-config))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (connector-profile-credentials (:copier common-lisp:nil)
      (:conc-name "struct-shape-connector-profile-credentials-"))
   (amplitude common-lisp:nil :type
    (common-lisp:or amplitude-connector-profile-credentials common-lisp:null))
   (datadog common-lisp:nil :type
    (common-lisp:or datadog-connector-profile-credentials common-lisp:null))
   (dynatrace common-lisp:nil :type
    (common-lisp:or dynatrace-connector-profile-credentials common-lisp:null))
   (google-analytics common-lisp:nil :type
    (common-lisp:or google-analytics-connector-profile-credentials
                    common-lisp:null))
   (honeycode common-lisp:nil :type
    (common-lisp:or honeycode-connector-profile-credentials common-lisp:null))
   (infor-nexus common-lisp:nil :type
    (common-lisp:or infor-nexus-connector-profile-credentials
                    common-lisp:null))
   (marketo common-lisp:nil :type
    (common-lisp:or marketo-connector-profile-credentials common-lisp:null))
   (redshift common-lisp:nil :type
    (common-lisp:or redshift-connector-profile-credentials common-lisp:null))
   (salesforce common-lisp:nil :type
    (common-lisp:or salesforce-connector-profile-credentials common-lisp:null))
   (service-now common-lisp:nil :type
    (common-lisp:or service-now-connector-profile-credentials
                    common-lisp:null))
   (singular common-lisp:nil :type
    (common-lisp:or singular-connector-profile-credentials common-lisp:null))
   (slack common-lisp:nil :type
    (common-lisp:or slack-connector-profile-credentials common-lisp:null))
   (snowflake common-lisp:nil :type
    (common-lisp:or snowflake-connector-profile-credentials common-lisp:null))
   (trendmicro common-lisp:nil :type
    (common-lisp:or trendmicro-connector-profile-credentials common-lisp:null))
   (veeva common-lisp:nil :type
    (common-lisp:or veeva-connector-profile-credentials common-lisp:null))
   (zendesk common-lisp:nil :type
    (common-lisp:or zendesk-connector-profile-credentials common-lisp:null))
   (sapodata common-lisp:nil :type
    (common-lisp:or sapodata-connector-profile-credentials common-lisp:null))
   (custom-connector common-lisp:nil :type
    (common-lisp:or custom-connector-profile-credentials common-lisp:null))
   (pardot common-lisp:nil :type
    (common-lisp:or pardot-connector-profile-credentials common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'connector-profile-credentials
                    'make-connector-profile-credentials))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          connector-profile-credentials))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          connector-profile-credentials))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'amplitude))
      (common-lisp:list
       (common-lisp:cons "Amplitude"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'datadog))
      (common-lisp:list
       (common-lisp:cons "Datadog"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dynatrace))
      (common-lisp:list
       (common-lisp:cons "Dynatrace"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'google-analytics))
      (common-lisp:list
       (common-lisp:cons "GoogleAnalytics"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'honeycode))
      (common-lisp:list
       (common-lisp:cons "Honeycode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'infor-nexus))
      (common-lisp:list
       (common-lisp:cons "InforNexus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marketo))
      (common-lisp:list
       (common-lisp:cons "Marketo"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'redshift))
      (common-lisp:list
       (common-lisp:cons "Redshift"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'salesforce))
      (common-lisp:list
       (common-lisp:cons "Salesforce"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service-now))
      (common-lisp:list
       (common-lisp:cons "ServiceNow"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'singular))
      (common-lisp:list
       (common-lisp:cons "Singular"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'slack))
      (common-lisp:list
       (common-lisp:cons "Slack"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'snowflake))
      (common-lisp:list
       (common-lisp:cons "Snowflake"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'trendmicro))
      (common-lisp:list
       (common-lisp:cons "Trendmicro"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'veeva))
      (common-lisp:list
       (common-lisp:cons "Veeva"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'zendesk))
      (common-lisp:list
       (common-lisp:cons "Zendesk"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sapodata))
      (common-lisp:list
       (common-lisp:cons "SAPOData"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'custom-connector))
      (common-lisp:list
       (common-lisp:cons "CustomConnector"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pardot))
      (common-lisp:list
       (common-lisp:cons "Pardot"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          connector-profile-credentials))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype connector-profile-detail-list ()
   '(trivial-types:proper-list connector-profile))
 (common-lisp:defun make-connector-profile-detail-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list connector-profile))
   aws-sdk/generator/shape::members))
(common-lisp:deftype connector-profile-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype connector-profile-name-list ()
   '(trivial-types:proper-list connector-profile-name))
 (common-lisp:defun make-connector-profile-name-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list connector-profile-name))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (connector-profile-properties (:copier common-lisp:nil)
      (:conc-name "struct-shape-connector-profile-properties-"))
   (amplitude common-lisp:nil :type
    (common-lisp:or amplitude-connector-profile-properties common-lisp:null))
   (datadog common-lisp:nil :type
    (common-lisp:or datadog-connector-profile-properties common-lisp:null))
   (dynatrace common-lisp:nil :type
    (common-lisp:or dynatrace-connector-profile-properties common-lisp:null))
   (google-analytics common-lisp:nil :type
    (common-lisp:or google-analytics-connector-profile-properties
                    common-lisp:null))
   (honeycode common-lisp:nil :type
    (common-lisp:or honeycode-connector-profile-properties common-lisp:null))
   (infor-nexus common-lisp:nil :type
    (common-lisp:or infor-nexus-connector-profile-properties common-lisp:null))
   (marketo common-lisp:nil :type
    (common-lisp:or marketo-connector-profile-properties common-lisp:null))
   (redshift common-lisp:nil :type
    (common-lisp:or redshift-connector-profile-properties common-lisp:null))
   (salesforce common-lisp:nil :type
    (common-lisp:or salesforce-connector-profile-properties common-lisp:null))
   (service-now common-lisp:nil :type
    (common-lisp:or service-now-connector-profile-properties common-lisp:null))
   (singular common-lisp:nil :type
    (common-lisp:or singular-connector-profile-properties common-lisp:null))
   (slack common-lisp:nil :type
    (common-lisp:or slack-connector-profile-properties common-lisp:null))
   (snowflake common-lisp:nil :type
    (common-lisp:or snowflake-connector-profile-properties common-lisp:null))
   (trendmicro common-lisp:nil :type
    (common-lisp:or trendmicro-connector-profile-properties common-lisp:null))
   (veeva common-lisp:nil :type
    (common-lisp:or veeva-connector-profile-properties common-lisp:null))
   (zendesk common-lisp:nil :type
    (common-lisp:or zendesk-connector-profile-properties common-lisp:null))
   (sapodata common-lisp:nil :type
    (common-lisp:or sapodata-connector-profile-properties common-lisp:null))
   (custom-connector common-lisp:nil :type
    (common-lisp:or custom-connector-profile-properties common-lisp:null))
   (pardot common-lisp:nil :type
    (common-lisp:or pardot-connector-profile-properties common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'connector-profile-properties
                    'make-connector-profile-properties))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          connector-profile-properties))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          connector-profile-properties))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'amplitude))
      (common-lisp:list
       (common-lisp:cons "Amplitude"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'datadog))
      (common-lisp:list
       (common-lisp:cons "Datadog"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dynatrace))
      (common-lisp:list
       (common-lisp:cons "Dynatrace"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'google-analytics))
      (common-lisp:list
       (common-lisp:cons "GoogleAnalytics"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'honeycode))
      (common-lisp:list
       (common-lisp:cons "Honeycode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'infor-nexus))
      (common-lisp:list
       (common-lisp:cons "InforNexus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marketo))
      (common-lisp:list
       (common-lisp:cons "Marketo"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'redshift))
      (common-lisp:list
       (common-lisp:cons "Redshift"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'salesforce))
      (common-lisp:list
       (common-lisp:cons "Salesforce"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service-now))
      (common-lisp:list
       (common-lisp:cons "ServiceNow"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'singular))
      (common-lisp:list
       (common-lisp:cons "Singular"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'slack))
      (common-lisp:list
       (common-lisp:cons "Slack"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'snowflake))
      (common-lisp:list
       (common-lisp:cons "Snowflake"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'trendmicro))
      (common-lisp:list
       (common-lisp:cons "Trendmicro"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'veeva))
      (common-lisp:list
       (common-lisp:cons "Veeva"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'zendesk))
      (common-lisp:list
       (common-lisp:cons "Zendesk"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sapodata))
      (common-lisp:list
       (common-lisp:cons "SAPOData"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'custom-connector))
      (common-lisp:list
       (common-lisp:cons "CustomConnector"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pardot))
      (common-lisp:list
       (common-lisp:cons "Pardot"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          connector-profile-properties))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (connector-provisioning-config (:copier common-lisp:nil)
      (:conc-name "struct-shape-connector-provisioning-config-"))
   (lambda common-lisp:nil :type
    (common-lisp:or lambda-connector-provisioning-config common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'connector-provisioning-config
                    'make-connector-provisioning-config))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          connector-provisioning-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          connector-provisioning-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'lambda))
      (common-lisp:list
       (common-lisp:cons "lambda"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          connector-provisioning-config))
   common-lisp:nil))
(common-lisp:deftype connector-provisioning-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (connector-runtime-setting (:copier common-lisp:nil)
      (:conc-name "struct-shape-connector-runtime-setting-"))
   (key common-lisp:nil :type (common-lisp:or key common-lisp:null))
   (data-type common-lisp:nil :type
    (common-lisp:or connector-runtime-setting-data-type common-lisp:null))
   (is-required common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (label common-lisp:nil :type (common-lisp:or label common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or description common-lisp:null))
   (scope common-lisp:nil :type
    (common-lisp:or connector-runtime-setting-scope common-lisp:null))
   (connector-supplied-value-options common-lisp:nil :type
    (common-lisp:or connector-supplied-value-option-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'connector-runtime-setting
                    'make-connector-runtime-setting))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          connector-runtime-setting))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          connector-runtime-setting))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key))
      (common-lisp:list
       (common-lisp:cons "key"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-type))
      (common-lisp:list
       (common-lisp:cons "dataType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'is-required))
      (common-lisp:list
       (common-lisp:cons "isRequired"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'label))
      (common-lisp:list
       (common-lisp:cons "label"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'scope))
      (common-lisp:list
       (common-lisp:cons "scope"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'connector-supplied-value-options))
      (common-lisp:list
       (common-lisp:cons "connectorSuppliedValueOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          connector-runtime-setting))
   common-lisp:nil))
(common-lisp:deftype connector-runtime-setting-data-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype connector-runtime-setting-list ()
   '(trivial-types:proper-list connector-runtime-setting))
 (common-lisp:defun make-connector-runtime-setting-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            connector-runtime-setting))
   aws-sdk/generator/shape::members))
(common-lisp:deftype connector-runtime-setting-scope () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition connector-server-exception
     (appflow-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       connector-server-exception-message)))
 (common-lisp:export
  (common-lisp:list 'connector-server-exception
                    'connector-server-exception-message)))
(common-lisp:deftype connector-supplied-value () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype connector-supplied-value-list ()
   '(trivial-types:proper-list connector-supplied-value))
 (common-lisp:defun make-connector-supplied-value-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            connector-supplied-value))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype connector-supplied-value-option-list ()
   '(trivial-types:proper-list connector-supplied-value))
 (common-lisp:defun make-connector-supplied-value-option-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            connector-supplied-value))
   aws-sdk/generator/shape::members))
(common-lisp:deftype connector-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype connector-type-list ()
   '(trivial-types:proper-list connector-type))
 (common-lisp:defun make-connector-type-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list connector-type))
   aws-sdk/generator/shape::members))
(common-lisp:deftype connector-version () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (create-connector-profile-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-connector-profile-request-"))
   (connector-profile-name
    (common-lisp:error ":connectorprofilename is required") :type
    (common-lisp:or connector-profile-name common-lisp:null))
   (kms-arn common-lisp:nil :type (common-lisp:or kmsarn common-lisp:null))
   (connector-type (common-lisp:error ":connectortype is required") :type
    (common-lisp:or connector-type common-lisp:null))
   (connector-label common-lisp:nil :type
    (common-lisp:or connector-label common-lisp:null))
   (connection-mode (common-lisp:error ":connectionmode is required") :type
    (common-lisp:or connection-mode common-lisp:null))
   (connector-profile-config
    (common-lisp:error ":connectorprofileconfig is required") :type
    (common-lisp:or connector-profile-config common-lisp:null))
   (client-token common-lisp:nil :type
    (common-lisp:or client-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-connector-profile-request
                    'make-create-connector-profile-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-connector-profile-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-connector-profile-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'connector-profile-name))
      (common-lisp:list
       (common-lisp:cons "connectorProfileName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kms-arn))
      (common-lisp:list
       (common-lisp:cons "kmsArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'connector-type))
      (common-lisp:list
       (common-lisp:cons "connectorType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'connector-label))
      (common-lisp:list
       (common-lisp:cons "connectorLabel"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'connection-mode))
      (common-lisp:list
       (common-lisp:cons "connectionMode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'connector-profile-config))
      (common-lisp:list
       (common-lisp:cons "connectorProfileConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "clientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-connector-profile-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-connector-profile-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-connector-profile-response-"))
   (connector-profile-arn common-lisp:nil :type
    (common-lisp:or connector-profile-arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-connector-profile-response
                    'make-create-connector-profile-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-connector-profile-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-connector-profile-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'connector-profile-arn))
      (common-lisp:list
       (common-lisp:cons "connectorProfileArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-connector-profile-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-flow-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-flow-request-"))
   (flow-name (common-lisp:error ":flowname is required") :type
    (common-lisp:or flow-name common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or flow-description common-lisp:null))
   (kms-arn common-lisp:nil :type (common-lisp:or kmsarn common-lisp:null))
   (trigger-config (common-lisp:error ":triggerconfig is required") :type
    (common-lisp:or trigger-config common-lisp:null))
   (source-flow-config (common-lisp:error ":sourceflowconfig is required")
    :type (common-lisp:or source-flow-config common-lisp:null))
   (destination-flow-config-list
    (common-lisp:error ":destinationflowconfiglist is required") :type
    (common-lisp:or destination-flow-config-list common-lisp:null))
   (tasks (common-lisp:error ":tasks is required") :type
    (common-lisp:or tasks common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-map common-lisp:null))
   (metadata-catalog-config common-lisp:nil :type
    (common-lisp:or metadata-catalog-config common-lisp:null))
   (client-token common-lisp:nil :type
    (common-lisp:or client-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-flow-request 'make-create-flow-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input create-flow-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input create-flow-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'flow-name))
      (common-lisp:list
       (common-lisp:cons "flowName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kms-arn))
      (common-lisp:list
       (common-lisp:cons "kmsArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'trigger-config))
      (common-lisp:list
       (common-lisp:cons "triggerConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-flow-config))
      (common-lisp:list
       (common-lisp:cons "sourceFlowConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'destination-flow-config-list))
      (common-lisp:list
       (common-lisp:cons "destinationFlowConfigList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tasks))
      (common-lisp:list
       (common-lisp:cons "tasks"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'metadata-catalog-config))
      (common-lisp:list
       (common-lisp:cons "metadataCatalogConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "clientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input create-flow-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-flow-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-flow-response-"))
   (flow-arn common-lisp:nil :type (common-lisp:or flow-arn common-lisp:null))
   (flow-status common-lisp:nil :type
    (common-lisp:or flow-status common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-flow-response 'make-create-flow-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input create-flow-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input create-flow-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'flow-arn))
      (common-lisp:list
       (common-lisp:cons "flowArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'flow-status))
      (common-lisp:list
       (common-lisp:cons "flowStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input create-flow-response))
   common-lisp:nil))
(common-lisp:deftype created-by () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype credentials-map () 'common-lisp:hash-table)
 (common-lisp:defun make-credentials-map (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:deftype credentials-map-key () 'common-lisp:string)
(common-lisp:deftype credentials-map-value () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (custom-auth-config (:copier common-lisp:nil)
      (:conc-name "struct-shape-custom-auth-config-"))
   (custom-authentication-type common-lisp:nil :type
    (common-lisp:or custom-authentication-type common-lisp:null))
   (auth-parameters common-lisp:nil :type
    (common-lisp:or auth-parameter-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'custom-auth-config 'make-custom-auth-config))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input custom-auth-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input custom-auth-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'custom-authentication-type))
      (common-lisp:list
       (common-lisp:cons "customAuthenticationType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'auth-parameters))
      (common-lisp:list
       (common-lisp:cons "authParameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input custom-auth-config))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype custom-auth-config-list ()
   '(trivial-types:proper-list custom-auth-config))
 (common-lisp:defun make-custom-auth-config-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list custom-auth-config))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (custom-auth-credentials (:copier common-lisp:nil)
      (:conc-name "struct-shape-custom-auth-credentials-"))
   (custom-authentication-type
    (common-lisp:error ":customauthenticationtype is required") :type
    (common-lisp:or custom-authentication-type common-lisp:null))
   (credentials-map common-lisp:nil :type
    (common-lisp:or credentials-map common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'custom-auth-credentials 'make-custom-auth-credentials))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          custom-auth-credentials))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          custom-auth-credentials))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'custom-authentication-type))
      (common-lisp:list
       (common-lisp:cons "customAuthenticationType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'credentials-map))
      (common-lisp:list
       (common-lisp:cons "credentialsMap"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          custom-auth-credentials))
   common-lisp:nil))
(common-lisp:deftype custom-authentication-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (custom-connector-destination-properties (:copier common-lisp:nil)
      (:conc-name "struct-shape-custom-connector-destination-properties-"))
   (entity-name (common-lisp:error ":entityname is required") :type
    (common-lisp:or entity-name common-lisp:null))
   (error-handling-config common-lisp:nil :type
    (common-lisp:or error-handling-config common-lisp:null))
   (write-operation-type common-lisp:nil :type
    (common-lisp:or write-operation-type common-lisp:null))
   (id-field-names common-lisp:nil :type
    (common-lisp:or id-field-name-list common-lisp:null))
   (custom-properties common-lisp:nil :type
    (common-lisp:or custom-properties common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'custom-connector-destination-properties
                    'make-custom-connector-destination-properties))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          custom-connector-destination-properties))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          custom-connector-destination-properties))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'entity-name))
      (common-lisp:list
       (common-lisp:cons "entityName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'error-handling-config))
      (common-lisp:list
       (common-lisp:cons "errorHandlingConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'write-operation-type))
      (common-lisp:list
       (common-lisp:cons "writeOperationType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id-field-names))
      (common-lisp:list
       (common-lisp:cons "idFieldNames"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'custom-properties))
      (common-lisp:list
       (common-lisp:cons "customProperties"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          custom-connector-destination-properties))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (custom-connector-profile-credentials (:copier common-lisp:nil)
      (:conc-name "struct-shape-custom-connector-profile-credentials-"))
   (authentication-type (common-lisp:error ":authenticationtype is required")
    :type (common-lisp:or authentication-type common-lisp:null))
   (basic common-lisp:nil :type
    (common-lisp:or basic-auth-credentials common-lisp:null))
   (oauth2 common-lisp:nil :type
    (common-lisp:or oauth2credentials common-lisp:null))
   (api-key common-lisp:nil :type
    (common-lisp:or api-key-credentials common-lisp:null))
   (custom common-lisp:nil :type
    (common-lisp:or custom-auth-credentials common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'custom-connector-profile-credentials
                    'make-custom-connector-profile-credentials))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          custom-connector-profile-credentials))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          custom-connector-profile-credentials))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'authentication-type))
      (common-lisp:list
       (common-lisp:cons "authenticationType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'basic))
      (common-lisp:list
       (common-lisp:cons "basic"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'oauth2))
      (common-lisp:list
       (common-lisp:cons "oauth2"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'api-key))
      (common-lisp:list
       (common-lisp:cons "apiKey"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'custom))
      (common-lisp:list
       (common-lisp:cons "custom"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          custom-connector-profile-credentials))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (custom-connector-profile-properties (:copier common-lisp:nil)
      (:conc-name "struct-shape-custom-connector-profile-properties-"))
   (profile-properties common-lisp:nil :type
    (common-lisp:or profile-properties-map common-lisp:null))
   (o-auth2properties common-lisp:nil :type
    (common-lisp:or oauth2properties common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'custom-connector-profile-properties
                    'make-custom-connector-profile-properties))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          custom-connector-profile-properties))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          custom-connector-profile-properties))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'profile-properties))
      (common-lisp:list
       (common-lisp:cons "profileProperties"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'o-auth2properties))
      (common-lisp:list
       (common-lisp:cons "oAuth2Properties"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          custom-connector-profile-properties))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (custom-connector-source-properties (:copier common-lisp:nil)
      (:conc-name "struct-shape-custom-connector-source-properties-"))
   (entity-name (common-lisp:error ":entityname is required") :type
    (common-lisp:or entity-name common-lisp:null))
   (custom-properties common-lisp:nil :type
    (common-lisp:or custom-properties common-lisp:null))
   (data-transfer-api common-lisp:nil :type
    (common-lisp:or data-transfer-api common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'custom-connector-source-properties
                    'make-custom-connector-source-properties))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          custom-connector-source-properties))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          custom-connector-source-properties))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'entity-name))
      (common-lisp:list
       (common-lisp:cons "entityName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'custom-properties))
      (common-lisp:list
       (common-lisp:cons "customProperties"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-transfer-api))
      (common-lisp:list
       (common-lisp:cons "dataTransferApi"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          custom-connector-source-properties))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype custom-properties () 'common-lisp:hash-table)
 (common-lisp:defun make-custom-properties
                    (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:deftype custom-property-key () 'common-lisp:string)
(common-lisp:deftype custom-property-value () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (customer-profiles-destination-properties (:copier common-lisp:nil)
      (:conc-name "struct-shape-customer-profiles-destination-properties-"))
   (domain-name (common-lisp:error ":domainname is required") :type
    (common-lisp:or domain-name common-lisp:null))
   (object-type-name common-lisp:nil :type
    (common-lisp:or object-type-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'customer-profiles-destination-properties
                    'make-customer-profiles-destination-properties))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          customer-profiles-destination-properties))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          customer-profiles-destination-properties))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-name))
      (common-lisp:list
       (common-lisp:cons "domainName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'object-type-name))
      (common-lisp:list
       (common-lisp:cons "objectTypeName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          customer-profiles-destination-properties))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (customer-profiles-metadata (:copier common-lisp:nil)
      (:conc-name "struct-shape-customer-profiles-metadata-")))
 (common-lisp:export
  (common-lisp:list 'customer-profiles-metadata
                    'make-customer-profiles-metadata))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          customer-profiles-metadata))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          customer-profiles-metadata))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          customer-profiles-metadata))
   common-lisp:nil))
(common-lisp:deftype data-api-role-arn () 'common-lisp:string)
(common-lisp:deftype data-pull-mode () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (data-transfer-api (:copier common-lisp:nil)
      (:conc-name "struct-shape-data-transfer-api-"))
   (name common-lisp:nil :type
    (common-lisp:or data-transfer-api-type-name common-lisp:null))
   (type common-lisp:nil :type
    (common-lisp:or data-transfer-api-type common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'data-transfer-api 'make-data-transfer-api))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input data-transfer-api))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input data-transfer-api))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input data-transfer-api))
   common-lisp:nil))
(common-lisp:deftype data-transfer-api-type () 'common-lisp:string)
(common-lisp:deftype data-transfer-api-type-name () 'common-lisp:string)
(common-lisp:deftype database-name () 'common-lisp:string)
(common-lisp:deftype database-url () 'common-lisp:string)
(common-lisp:deftype datadog-connector-operator () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (datadog-connector-profile-credentials (:copier common-lisp:nil)
      (:conc-name "struct-shape-datadog-connector-profile-credentials-"))
   (api-key (common-lisp:error ":apikey is required") :type
    (common-lisp:or api-key common-lisp:null))
   (application-key (common-lisp:error ":applicationkey is required") :type
    (common-lisp:or application-key common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'datadog-connector-profile-credentials
                    'make-datadog-connector-profile-credentials))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          datadog-connector-profile-credentials))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          datadog-connector-profile-credentials))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'api-key))
      (common-lisp:list
       (common-lisp:cons "apiKey"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'application-key))
      (common-lisp:list
       (common-lisp:cons "applicationKey"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          datadog-connector-profile-credentials))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (datadog-connector-profile-properties (:copier common-lisp:nil)
      (:conc-name "struct-shape-datadog-connector-profile-properties-"))
   (instance-url (common-lisp:error ":instanceurl is required") :type
    (common-lisp:or instance-url common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'datadog-connector-profile-properties
                    'make-datadog-connector-profile-properties))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          datadog-connector-profile-properties))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          datadog-connector-profile-properties))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-url))
      (common-lisp:list
       (common-lisp:cons "instanceUrl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          datadog-connector-profile-properties))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (datadog-metadata (:copier common-lisp:nil)
      (:conc-name "struct-shape-datadog-metadata-")))
 (common-lisp:export
  (common-lisp:list 'datadog-metadata 'make-datadog-metadata))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input datadog-metadata))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input datadog-metadata))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input datadog-metadata))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (datadog-source-properties (:copier common-lisp:nil)
      (:conc-name "struct-shape-datadog-source-properties-"))
   (object (common-lisp:error ":object is required") :type
    (common-lisp:or object common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'datadog-source-properties
                    'make-datadog-source-properties))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          datadog-source-properties))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          datadog-source-properties))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'object))
      (common-lisp:list
       (common-lisp:cons "object"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          datadog-source-properties))
   common-lisp:nil))
(common-lisp:deftype date () 'common-lisp:string)
(common-lisp:deftype datetime-type-field-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (delete-connector-profile-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-connector-profile-request-"))
   (connector-profile-name
    (common-lisp:error ":connectorprofilename is required") :type
    (common-lisp:or connector-profile-name common-lisp:null))
   (force-delete common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-connector-profile-request
                    'make-delete-connector-profile-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-connector-profile-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-connector-profile-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'connector-profile-name))
      (common-lisp:list
       (common-lisp:cons "connectorProfileName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'force-delete))
      (common-lisp:list
       (common-lisp:cons "forceDelete"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-connector-profile-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-connector-profile-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-connector-profile-response-")))
 (common-lisp:export
  (common-lisp:list 'delete-connector-profile-response
                    'make-delete-connector-profile-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-connector-profile-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-connector-profile-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-connector-profile-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-flow-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-flow-request-"))
   (flow-name (common-lisp:error ":flowname is required") :type
    (common-lisp:or flow-name common-lisp:null))
   (force-delete common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-flow-request 'make-delete-flow-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input delete-flow-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input delete-flow-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'flow-name))
      (common-lisp:list
       (common-lisp:cons "flowName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'force-delete))
      (common-lisp:list
       (common-lisp:cons "forceDelete"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input delete-flow-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-flow-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-flow-response-")))
 (common-lisp:export
  (common-lisp:list 'delete-flow-response 'make-delete-flow-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input delete-flow-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input delete-flow-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input delete-flow-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-connector-entity-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-connector-entity-request-"))
   (connector-entity-name
    (common-lisp:error ":connectorentityname is required") :type
    (common-lisp:or entity-name common-lisp:null))
   (connector-type common-lisp:nil :type
    (common-lisp:or connector-type common-lisp:null))
   (connector-profile-name common-lisp:nil :type
    (common-lisp:or connector-profile-name common-lisp:null))
   (api-version common-lisp:nil :type
    (common-lisp:or api-version common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-connector-entity-request
                    'make-describe-connector-entity-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-connector-entity-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-connector-entity-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'connector-entity-name))
      (common-lisp:list
       (common-lisp:cons "connectorEntityName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'connector-type))
      (common-lisp:list
       (common-lisp:cons "connectorType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'connector-profile-name))
      (common-lisp:list
       (common-lisp:cons "connectorProfileName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'api-version))
      (common-lisp:list
       (common-lisp:cons "apiVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-connector-entity-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-connector-entity-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-connector-entity-response-"))
   (connector-entity-fields
    (common-lisp:error ":connectorentityfields is required") :type
    (common-lisp:or connector-entity-field-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-connector-entity-response
                    'make-describe-connector-entity-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-connector-entity-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-connector-entity-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'connector-entity-fields))
      (common-lisp:list
       (common-lisp:cons "connectorEntityFields"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-connector-entity-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-connector-profiles-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-connector-profiles-request-"))
   (connector-profile-names common-lisp:nil :type
    (common-lisp:or connector-profile-name-list common-lisp:null))
   (connector-type common-lisp:nil :type
    (common-lisp:or connector-type common-lisp:null))
   (connector-label common-lisp:nil :type
    (common-lisp:or connector-label common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or max-results common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-connector-profiles-request
                    'make-describe-connector-profiles-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-connector-profiles-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-connector-profiles-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'connector-profile-names))
      (common-lisp:list
       (common-lisp:cons "connectorProfileNames"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'connector-type))
      (common-lisp:list
       (common-lisp:cons "connectorType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'connector-label))
      (common-lisp:list
       (common-lisp:cons "connectorLabel"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "maxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-connector-profiles-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-connector-profiles-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-connector-profiles-response-"))
   (connector-profile-details common-lisp:nil :type
    (common-lisp:or connector-profile-detail-list common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-connector-profiles-response
                    'make-describe-connector-profiles-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-connector-profiles-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-connector-profiles-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'connector-profile-details))
      (common-lisp:list
       (common-lisp:cons "connectorProfileDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-connector-profiles-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-connector-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-connector-request-"))
   (connector-type (common-lisp:error ":connectortype is required") :type
    (common-lisp:or connector-type common-lisp:null))
   (connector-label common-lisp:nil :type
    (common-lisp:or connector-label common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-connector-request
                    'make-describe-connector-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-connector-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-connector-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'connector-type))
      (common-lisp:list
       (common-lisp:cons "connectorType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'connector-label))
      (common-lisp:list
       (common-lisp:cons "connectorLabel"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-connector-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-connector-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-connector-response-"))
   (connector-configuration common-lisp:nil :type
    (common-lisp:or connector-configuration common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-connector-response
                    'make-describe-connector-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-connector-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-connector-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'connector-configuration))
      (common-lisp:list
       (common-lisp:cons "connectorConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-connector-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-connectors-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-connectors-request-"))
   (connector-types common-lisp:nil :type
    (common-lisp:or connector-type-list common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or max-results common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-connectors-request
                    'make-describe-connectors-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-connectors-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-connectors-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'connector-types))
      (common-lisp:list
       (common-lisp:cons "connectorTypes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "maxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-connectors-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-connectors-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-connectors-response-"))
   (connector-configurations common-lisp:nil :type
    (common-lisp:or connector-configurations-map common-lisp:null))
   (connectors common-lisp:nil :type
    (common-lisp:or connector-list common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-connectors-response
                    'make-describe-connectors-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-connectors-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-connectors-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'connector-configurations))
      (common-lisp:list
       (common-lisp:cons "connectorConfigurations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'connectors))
      (common-lisp:list
       (common-lisp:cons "connectors"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-connectors-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-flow-execution-records-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-flow-execution-records-request-"))
   (flow-name (common-lisp:error ":flowname is required") :type
    (common-lisp:or flow-name common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or max-results common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-flow-execution-records-request
                    'make-describe-flow-execution-records-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-flow-execution-records-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-flow-execution-records-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'flow-name))
      (common-lisp:list
       (common-lisp:cons "flowName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "maxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-flow-execution-records-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-flow-execution-records-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-flow-execution-records-response-"))
   (flow-executions common-lisp:nil :type
    (common-lisp:or flow-execution-list common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-flow-execution-records-response
                    'make-describe-flow-execution-records-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-flow-execution-records-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-flow-execution-records-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'flow-executions))
      (common-lisp:list
       (common-lisp:cons "flowExecutions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-flow-execution-records-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-flow-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-flow-request-"))
   (flow-name (common-lisp:error ":flowname is required") :type
    (common-lisp:or flow-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-flow-request 'make-describe-flow-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-flow-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-flow-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'flow-name))
      (common-lisp:list
       (common-lisp:cons "flowName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-flow-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-flow-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-flow-response-"))
   (flow-arn common-lisp:nil :type (common-lisp:or flow-arn common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or flow-description common-lisp:null))
   (flow-name common-lisp:nil :type
    (common-lisp:or flow-name common-lisp:null))
   (kms-arn common-lisp:nil :type (common-lisp:or kmsarn common-lisp:null))
   (flow-status common-lisp:nil :type
    (common-lisp:or flow-status common-lisp:null))
   (flow-status-message common-lisp:nil :type
    (common-lisp:or flow-status-message common-lisp:null))
   (source-flow-config common-lisp:nil :type
    (common-lisp:or source-flow-config common-lisp:null))
   (destination-flow-config-list common-lisp:nil :type
    (common-lisp:or destination-flow-config-list common-lisp:null))
   (last-run-execution-details common-lisp:nil :type
    (common-lisp:or execution-details common-lisp:null))
   (trigger-config common-lisp:nil :type
    (common-lisp:or trigger-config common-lisp:null))
   (tasks common-lisp:nil :type (common-lisp:or tasks common-lisp:null))
   (created-at common-lisp:nil :type (common-lisp:or date common-lisp:null))
   (last-updated-at common-lisp:nil :type
    (common-lisp:or date common-lisp:null))
   (created-by common-lisp:nil :type
    (common-lisp:or created-by common-lisp:null))
   (last-updated-by common-lisp:nil :type
    (common-lisp:or updated-by common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-map common-lisp:null))
   (metadata-catalog-config common-lisp:nil :type
    (common-lisp:or metadata-catalog-config common-lisp:null))
   (last-run-metadata-catalog-details common-lisp:nil :type
    (common-lisp:or metadata-catalog-details common-lisp:null))
   (schema-version common-lisp:nil :type
    (common-lisp:or long common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-flow-response 'make-describe-flow-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-flow-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-flow-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'flow-arn))
      (common-lisp:list
       (common-lisp:cons "flowArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'flow-name))
      (common-lisp:list
       (common-lisp:cons "flowName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kms-arn))
      (common-lisp:list
       (common-lisp:cons "kmsArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'flow-status))
      (common-lisp:list
       (common-lisp:cons "flowStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'flow-status-message))
      (common-lisp:list
       (common-lisp:cons "flowStatusMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-flow-config))
      (common-lisp:list
       (common-lisp:cons "sourceFlowConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'destination-flow-config-list))
      (common-lisp:list
       (common-lisp:cons "destinationFlowConfigList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'last-run-execution-details))
      (common-lisp:list
       (common-lisp:cons "lastRunExecutionDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'trigger-config))
      (common-lisp:list
       (common-lisp:cons "triggerConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tasks))
      (common-lisp:list
       (common-lisp:cons "tasks"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "createdAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-updated-at))
      (common-lisp:list
       (common-lisp:cons "lastUpdatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-by))
      (common-lisp:list
       (common-lisp:cons "createdBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-updated-by))
      (common-lisp:list
       (common-lisp:cons "lastUpdatedBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'metadata-catalog-config))
      (common-lisp:list
       (common-lisp:cons "metadataCatalogConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'last-run-metadata-catalog-details))
      (common-lisp:list
       (common-lisp:cons "lastRunMetadataCatalogDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'schema-version))
      (common-lisp:list
       (common-lisp:cons "schemaVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-flow-response))
   common-lisp:nil))
(common-lisp:deftype description () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (destination-connector-properties (:copier common-lisp:nil)
      (:conc-name "struct-shape-destination-connector-properties-"))
   (redshift common-lisp:nil :type
    (common-lisp:or redshift-destination-properties common-lisp:null))
   (s3 common-lisp:nil :type
    (common-lisp:or s3destination-properties common-lisp:null))
   (salesforce common-lisp:nil :type
    (common-lisp:or salesforce-destination-properties common-lisp:null))
   (snowflake common-lisp:nil :type
    (common-lisp:or snowflake-destination-properties common-lisp:null))
   (event-bridge common-lisp:nil :type
    (common-lisp:or event-bridge-destination-properties common-lisp:null))
   (lookout-metrics common-lisp:nil :type
    (common-lisp:or lookout-metrics-destination-properties common-lisp:null))
   (upsolver common-lisp:nil :type
    (common-lisp:or upsolver-destination-properties common-lisp:null))
   (honeycode common-lisp:nil :type
    (common-lisp:or honeycode-destination-properties common-lisp:null))
   (customer-profiles common-lisp:nil :type
    (common-lisp:or customer-profiles-destination-properties common-lisp:null))
   (zendesk common-lisp:nil :type
    (common-lisp:or zendesk-destination-properties common-lisp:null))
   (marketo common-lisp:nil :type
    (common-lisp:or marketo-destination-properties common-lisp:null))
   (custom-connector common-lisp:nil :type
    (common-lisp:or custom-connector-destination-properties common-lisp:null))
   (sapodata common-lisp:nil :type
    (common-lisp:or sapodata-destination-properties common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'destination-connector-properties
                    'make-destination-connector-properties))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          destination-connector-properties))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          destination-connector-properties))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'redshift))
      (common-lisp:list
       (common-lisp:cons "Redshift"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3))
      (common-lisp:list
       (common-lisp:cons "S3"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'salesforce))
      (common-lisp:list
       (common-lisp:cons "Salesforce"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'snowflake))
      (common-lisp:list
       (common-lisp:cons "Snowflake"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'event-bridge))
      (common-lisp:list
       (common-lisp:cons "EventBridge"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'lookout-metrics))
      (common-lisp:list
       (common-lisp:cons "LookoutMetrics"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'upsolver))
      (common-lisp:list
       (common-lisp:cons "Upsolver"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'honeycode))
      (common-lisp:list
       (common-lisp:cons "Honeycode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'customer-profiles))
      (common-lisp:list
       (common-lisp:cons "CustomerProfiles"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'zendesk))
      (common-lisp:list
       (common-lisp:cons "Zendesk"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marketo))
      (common-lisp:list
       (common-lisp:cons "Marketo"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'custom-connector))
      (common-lisp:list
       (common-lisp:cons "CustomConnector"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sapodata))
      (common-lisp:list
       (common-lisp:cons "SAPOData"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          destination-connector-properties))
   common-lisp:nil))
(common-lisp:deftype destination-field () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (destination-field-properties (:copier common-lisp:nil)
      (:conc-name "struct-shape-destination-field-properties-"))
   (is-creatable common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (is-nullable common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (is-upsertable common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (is-updatable common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (is-defaulted-on-create common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (supported-write-operations common-lisp:nil :type
    (common-lisp:or supported-write-operation-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'destination-field-properties
                    'make-destination-field-properties))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          destination-field-properties))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          destination-field-properties))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'is-creatable))
      (common-lisp:list
       (common-lisp:cons "isCreatable"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'is-nullable))
      (common-lisp:list
       (common-lisp:cons "isNullable"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'is-upsertable))
      (common-lisp:list
       (common-lisp:cons "isUpsertable"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'is-updatable))
      (common-lisp:list
       (common-lisp:cons "isUpdatable"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'is-defaulted-on-create))
      (common-lisp:list
       (common-lisp:cons "isDefaultedOnCreate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'supported-write-operations))
      (common-lisp:list
       (common-lisp:cons "supportedWriteOperations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          destination-field-properties))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (destination-flow-config (:copier common-lisp:nil)
      (:conc-name "struct-shape-destination-flow-config-"))
   (connector-type (common-lisp:error ":connectortype is required") :type
    (common-lisp:or connector-type common-lisp:null))
   (api-version common-lisp:nil :type
    (common-lisp:or api-version common-lisp:null))
   (connector-profile-name common-lisp:nil :type
    (common-lisp:or connector-profile-name common-lisp:null))
   (destination-connector-properties
    (common-lisp:error ":destinationconnectorproperties is required") :type
    (common-lisp:or destination-connector-properties common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'destination-flow-config 'make-destination-flow-config))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          destination-flow-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          destination-flow-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'connector-type))
      (common-lisp:list
       (common-lisp:cons "connectorType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'api-version))
      (common-lisp:list
       (common-lisp:cons "apiVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'connector-profile-name))
      (common-lisp:list
       (common-lisp:cons "connectorProfileName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'destination-connector-properties))
      (common-lisp:list
       (common-lisp:cons "destinationConnectorProperties"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          destination-flow-config))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype destination-flow-config-list ()
   '(trivial-types:proper-list destination-flow-config))
 (common-lisp:defun make-destination-flow-config-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list destination-flow-config))
   aws-sdk/generator/shape::members))
(common-lisp:deftype document-type () 'common-lisp:string)
(common-lisp:deftype domain-name () 'common-lisp:string)
(common-lisp:deftype double () 'common-lisp:double-float)
(common-lisp:deftype dynatrace-connector-operator () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (dynatrace-connector-profile-credentials (:copier common-lisp:nil)
      (:conc-name "struct-shape-dynatrace-connector-profile-credentials-"))
   (api-token (common-lisp:error ":apitoken is required") :type
    (common-lisp:or api-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'dynatrace-connector-profile-credentials
                    'make-dynatrace-connector-profile-credentials))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          dynatrace-connector-profile-credentials))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          dynatrace-connector-profile-credentials))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'api-token))
      (common-lisp:list
       (common-lisp:cons "apiToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          dynatrace-connector-profile-credentials))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (dynatrace-connector-profile-properties (:copier common-lisp:nil)
      (:conc-name "struct-shape-dynatrace-connector-profile-properties-"))
   (instance-url (common-lisp:error ":instanceurl is required") :type
    (common-lisp:or instance-url common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'dynatrace-connector-profile-properties
                    'make-dynatrace-connector-profile-properties))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          dynatrace-connector-profile-properties))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          dynatrace-connector-profile-properties))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-url))
      (common-lisp:list
       (common-lisp:cons "instanceUrl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          dynatrace-connector-profile-properties))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (dynatrace-metadata (:copier common-lisp:nil)
      (:conc-name "struct-shape-dynatrace-metadata-")))
 (common-lisp:export
  (common-lisp:list 'dynatrace-metadata 'make-dynatrace-metadata))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input dynatrace-metadata))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input dynatrace-metadata))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input dynatrace-metadata))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (dynatrace-source-properties (:copier common-lisp:nil)
      (:conc-name "struct-shape-dynatrace-source-properties-"))
   (object (common-lisp:error ":object is required") :type
    (common-lisp:or object common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'dynatrace-source-properties
                    'make-dynatrace-source-properties))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          dynatrace-source-properties))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          dynatrace-source-properties))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'object))
      (common-lisp:list
       (common-lisp:cons "object"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          dynatrace-source-properties))
   common-lisp:nil))
(common-lisp:deftype entities-path () 'common-lisp:string)
(common-lisp:deftype entity-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (error-handling-config (:copier common-lisp:nil)
      (:conc-name "struct-shape-error-handling-config-"))
   (fail-on-first-destination-error common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (bucket-prefix common-lisp:nil :type
    (common-lisp:or bucket-prefix common-lisp:null))
   (bucket-name common-lisp:nil :type
    (common-lisp:or bucket-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'error-handling-config 'make-error-handling-config))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          error-handling-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          error-handling-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'fail-on-first-destination-error))
      (common-lisp:list
       (common-lisp:cons "failOnFirstDestinationError"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bucket-prefix))
      (common-lisp:list
       (common-lisp:cons "bucketPrefix"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bucket-name))
      (common-lisp:list
       (common-lisp:cons "bucketName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          error-handling-config))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (error-info (:copier common-lisp:nil)
      (:conc-name "struct-shape-error-info-"))
   (put-failures-count common-lisp:nil :type
    (common-lisp:or long common-lisp:null))
   (execution-message common-lisp:nil :type
    (common-lisp:or execution-message common-lisp:null)))
 (common-lisp:export (common-lisp:list 'error-info 'make-error-info))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input error-info))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input error-info))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'put-failures-count))
      (common-lisp:list
       (common-lisp:cons "putFailuresCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'execution-message))
      (common-lisp:list
       (common-lisp:cons "executionMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input error-info))
   common-lisp:nil))
(common-lisp:deftype error-message () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (event-bridge-destination-properties (:copier common-lisp:nil)
      (:conc-name "struct-shape-event-bridge-destination-properties-"))
   (object (common-lisp:error ":object is required") :type
    (common-lisp:or object common-lisp:null))
   (error-handling-config common-lisp:nil :type
    (common-lisp:or error-handling-config common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'event-bridge-destination-properties
                    'make-event-bridge-destination-properties))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          event-bridge-destination-properties))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          event-bridge-destination-properties))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'object))
      (common-lisp:list
       (common-lisp:cons "object"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'error-handling-config))
      (common-lisp:list
       (common-lisp:cons "errorHandlingConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          event-bridge-destination-properties))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (event-bridge-metadata (:copier common-lisp:nil)
      (:conc-name "struct-shape-event-bridge-metadata-")))
 (common-lisp:export
  (common-lisp:list 'event-bridge-metadata 'make-event-bridge-metadata))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          event-bridge-metadata))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          event-bridge-metadata))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          event-bridge-metadata))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (execution-details (:copier common-lisp:nil)
      (:conc-name "struct-shape-execution-details-"))
   (most-recent-execution-message common-lisp:nil :type
    (common-lisp:or most-recent-execution-message common-lisp:null))
   (most-recent-execution-time common-lisp:nil :type
    (common-lisp:or date common-lisp:null))
   (most-recent-execution-status common-lisp:nil :type
    (common-lisp:or execution-status common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'execution-details 'make-execution-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input execution-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input execution-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'most-recent-execution-message))
      (common-lisp:list
       (common-lisp:cons "mostRecentExecutionMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'most-recent-execution-time))
      (common-lisp:list
       (common-lisp:cons "mostRecentExecutionTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'most-recent-execution-status))
      (common-lisp:list
       (common-lisp:cons "mostRecentExecutionStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input execution-details))
   common-lisp:nil))
(common-lisp:deftype execution-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype execution-ids ()
   '(trivial-types:proper-list execution-id))
 (common-lisp:defun make-execution-ids
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list execution-id))
   aws-sdk/generator/shape::members))
(common-lisp:deftype execution-message () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (execution-record (:copier common-lisp:nil)
      (:conc-name "struct-shape-execution-record-"))
   (execution-id common-lisp:nil :type
    (common-lisp:or execution-id common-lisp:null))
   (execution-status common-lisp:nil :type
    (common-lisp:or execution-status common-lisp:null))
   (execution-result common-lisp:nil :type
    (common-lisp:or execution-result common-lisp:null))
   (started-at common-lisp:nil :type (common-lisp:or date common-lisp:null))
   (last-updated-at common-lisp:nil :type
    (common-lisp:or date common-lisp:null))
   (data-pull-start-time common-lisp:nil :type
    (common-lisp:or date common-lisp:null))
   (data-pull-end-time common-lisp:nil :type
    (common-lisp:or date common-lisp:null))
   (metadata-catalog-details common-lisp:nil :type
    (common-lisp:or metadata-catalog-details common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'execution-record 'make-execution-record))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input execution-record))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input execution-record))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'execution-id))
      (common-lisp:list
       (common-lisp:cons "executionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'execution-status))
      (common-lisp:list
       (common-lisp:cons "executionStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'execution-result))
      (common-lisp:list
       (common-lisp:cons "executionResult"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'started-at))
      (common-lisp:list
       (common-lisp:cons "startedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-updated-at))
      (common-lisp:list
       (common-lisp:cons "lastUpdatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'data-pull-start-time))
      (common-lisp:list
       (common-lisp:cons "dataPullStartTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-pull-end-time))
      (common-lisp:list
       (common-lisp:cons "dataPullEndTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'metadata-catalog-details))
      (common-lisp:list
       (common-lisp:cons "metadataCatalogDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input execution-record))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (execution-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-execution-result-"))
   (error-info common-lisp:nil :type
    (common-lisp:or error-info common-lisp:null))
   (bytes-processed common-lisp:nil :type
    (common-lisp:or long common-lisp:null))
   (bytes-written common-lisp:nil :type (common-lisp:or long common-lisp:null))
   (records-processed common-lisp:nil :type
    (common-lisp:or long common-lisp:null))
   (num-parallel-processes common-lisp:nil :type
    (common-lisp:or long common-lisp:null))
   (max-page-size common-lisp:nil :type
    (common-lisp:or long common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'execution-result 'make-execution-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input execution-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input execution-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error-info))
      (common-lisp:list
       (common-lisp:cons "errorInfo"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bytes-processed))
      (common-lisp:list
       (common-lisp:cons "bytesProcessed"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bytes-written))
      (common-lisp:list
       (common-lisp:cons "bytesWritten"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'records-processed))
      (common-lisp:list
       (common-lisp:cons "recordsProcessed"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'num-parallel-processes))
      (common-lisp:list
       (common-lisp:cons "numParallelProcesses"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-page-size))
      (common-lisp:list
       (common-lisp:cons "maxPageSize"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input execution-result))
   common-lisp:nil))
(common-lisp:deftype execution-status () 'common-lisp:string)
(common-lisp:deftype field-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (field-type-details (:copier common-lisp:nil)
      (:conc-name "struct-shape-field-type-details-"))
   (field-type (common-lisp:error ":fieldtype is required") :type
    (common-lisp:or field-type common-lisp:null))
   (filter-operators (common-lisp:error ":filteroperators is required") :type
    (common-lisp:or filter-operator-list common-lisp:null))
   (supported-values common-lisp:nil :type
    (common-lisp:or supported-value-list common-lisp:null))
   (value-regex-pattern common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (supported-date-format common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (field-value-range common-lisp:nil :type
    (common-lisp:or range common-lisp:null))
   (field-length-range common-lisp:nil :type
    (common-lisp:or range common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'field-type-details 'make-field-type-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input field-type-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input field-type-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'field-type))
      (common-lisp:list
       (common-lisp:cons "fieldType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filter-operators))
      (common-lisp:list
       (common-lisp:cons "filterOperators"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'supported-values))
      (common-lisp:list
       (common-lisp:cons "supportedValues"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value-regex-pattern))
      (common-lisp:list
       (common-lisp:cons "valueRegexPattern"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'supported-date-format))
      (common-lisp:list
       (common-lisp:cons "supportedDateFormat"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'field-value-range))
      (common-lisp:list
       (common-lisp:cons "fieldValueRange"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'field-length-range))
      (common-lisp:list
       (common-lisp:cons "fieldLengthRange"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input field-type-details))
   common-lisp:nil))
(common-lisp:deftype file-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype filter-operator-list ()
   '(trivial-types:proper-list operator))
 (common-lisp:defun make-filter-operator-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list operator))
   aws-sdk/generator/shape::members))
(common-lisp:deftype flow-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (flow-definition (:copier common-lisp:nil)
      (:conc-name "struct-shape-flow-definition-"))
   (flow-arn common-lisp:nil :type (common-lisp:or flow-arn common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or flow-description common-lisp:null))
   (flow-name common-lisp:nil :type
    (common-lisp:or flow-name common-lisp:null))
   (flow-status common-lisp:nil :type
    (common-lisp:or flow-status common-lisp:null))
   (source-connector-type common-lisp:nil :type
    (common-lisp:or connector-type common-lisp:null))
   (source-connector-label common-lisp:nil :type
    (common-lisp:or connector-label common-lisp:null))
   (destination-connector-type common-lisp:nil :type
    (common-lisp:or connector-type common-lisp:null))
   (destination-connector-label common-lisp:nil :type
    (common-lisp:or connector-label common-lisp:null))
   (trigger-type common-lisp:nil :type
    (common-lisp:or trigger-type common-lisp:null))
   (created-at common-lisp:nil :type (common-lisp:or date common-lisp:null))
   (last-updated-at common-lisp:nil :type
    (common-lisp:or date common-lisp:null))
   (created-by common-lisp:nil :type
    (common-lisp:or created-by common-lisp:null))
   (last-updated-by common-lisp:nil :type
    (common-lisp:or updated-by common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-map common-lisp:null))
   (last-run-execution-details common-lisp:nil :type
    (common-lisp:or execution-details common-lisp:null)))
 (common-lisp:export (common-lisp:list 'flow-definition 'make-flow-definition))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input flow-definition))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input flow-definition))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'flow-arn))
      (common-lisp:list
       (common-lisp:cons "flowArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'flow-name))
      (common-lisp:list
       (common-lisp:cons "flowName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'flow-status))
      (common-lisp:list
       (common-lisp:cons "flowStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'source-connector-type))
      (common-lisp:list
       (common-lisp:cons "sourceConnectorType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'source-connector-label))
      (common-lisp:list
       (common-lisp:cons "sourceConnectorLabel"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'destination-connector-type))
      (common-lisp:list
       (common-lisp:cons "destinationConnectorType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'destination-connector-label))
      (common-lisp:list
       (common-lisp:cons "destinationConnectorLabel"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'trigger-type))
      (common-lisp:list
       (common-lisp:cons "triggerType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "createdAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-updated-at))
      (common-lisp:list
       (common-lisp:cons "lastUpdatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-by))
      (common-lisp:list
       (common-lisp:cons "createdBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-updated-by))
      (common-lisp:list
       (common-lisp:cons "lastUpdatedBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'last-run-execution-details))
      (common-lisp:list
       (common-lisp:cons "lastRunExecutionDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input flow-definition))
   common-lisp:nil))
(common-lisp:deftype flow-description () 'common-lisp:string)
(common-lisp:deftype flow-error-deactivation-threshold () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:deftype flow-execution-list ()
   '(trivial-types:proper-list execution-record))
 (common-lisp:defun make-flow-execution-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list execution-record))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype flow-list ()
   '(trivial-types:proper-list flow-definition))
 (common-lisp:defun make-flow-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list flow-definition))
   aws-sdk/generator/shape::members))
(common-lisp:deftype flow-name () 'common-lisp:string)
(common-lisp:deftype flow-status () 'common-lisp:string)
(common-lisp:deftype flow-status-message () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (glue-data-catalog-config (:copier common-lisp:nil)
      (:conc-name "struct-shape-glue-data-catalog-config-"))
   (role-arn (common-lisp:error ":rolearn is required") :type
    (common-lisp:or glue-data-catalog-iamrole common-lisp:null))
   (database-name (common-lisp:error ":databasename is required") :type
    (common-lisp:or glue-data-catalog-database-name common-lisp:null))
   (table-prefix (common-lisp:error ":tableprefix is required") :type
    (common-lisp:or glue-data-catalog-table-prefix common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'glue-data-catalog-config 'make-glue-data-catalog-config))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          glue-data-catalog-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          glue-data-catalog-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "roleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'database-name))
      (common-lisp:list
       (common-lisp:cons "databaseName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'table-prefix))
      (common-lisp:list
       (common-lisp:cons "tablePrefix"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          glue-data-catalog-config))
   common-lisp:nil))
(common-lisp:deftype glue-data-catalog-database-name () 'common-lisp:string)
(common-lisp:deftype glue-data-catalog-iamrole () 'common-lisp:string)
(common-lisp:deftype glue-data-catalog-table-prefix () 'common-lisp:string)
(common-lisp:deftype google-analytics-connector-operator () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (google-analytics-connector-profile-credentials (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-google-analytics-connector-profile-credentials-"))
   (client-id (common-lisp:error ":clientid is required") :type
    (common-lisp:or client-id common-lisp:null))
   (client-secret (common-lisp:error ":clientsecret is required") :type
    (common-lisp:or client-secret common-lisp:null))
   (access-token common-lisp:nil :type
    (common-lisp:or access-token common-lisp:null))
   (refresh-token common-lisp:nil :type
    (common-lisp:or refresh-token common-lisp:null))
   (o-auth-request common-lisp:nil :type
    (common-lisp:or connector-oauth-request common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'google-analytics-connector-profile-credentials
                    'make-google-analytics-connector-profile-credentials))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          google-analytics-connector-profile-credentials))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          google-analytics-connector-profile-credentials))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-id))
      (common-lisp:list
       (common-lisp:cons "clientId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-secret))
      (common-lisp:list
       (common-lisp:cons "clientSecret"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'access-token))
      (common-lisp:list
       (common-lisp:cons "accessToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'refresh-token))
      (common-lisp:list
       (common-lisp:cons "refreshToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'o-auth-request))
      (common-lisp:list
       (common-lisp:cons "oAuthRequest"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          google-analytics-connector-profile-credentials))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (google-analytics-connector-profile-properties (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-google-analytics-connector-profile-properties-")))
 (common-lisp:export
  (common-lisp:list 'google-analytics-connector-profile-properties
                    'make-google-analytics-connector-profile-properties))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          google-analytics-connector-profile-properties))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          google-analytics-connector-profile-properties))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          google-analytics-connector-profile-properties))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (google-analytics-metadata (:copier common-lisp:nil)
      (:conc-name "struct-shape-google-analytics-metadata-"))
   (o-auth-scopes common-lisp:nil :type
    (common-lisp:or oauth-scope-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'google-analytics-metadata
                    'make-google-analytics-metadata))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          google-analytics-metadata))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          google-analytics-metadata))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'o-auth-scopes))
      (common-lisp:list
       (common-lisp:cons "oAuthScopes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          google-analytics-metadata))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (google-analytics-source-properties (:copier common-lisp:nil)
      (:conc-name "struct-shape-google-analytics-source-properties-"))
   (object (common-lisp:error ":object is required") :type
    (common-lisp:or object common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'google-analytics-source-properties
                    'make-google-analytics-source-properties))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          google-analytics-source-properties))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          google-analytics-source-properties))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'object))
      (common-lisp:list
       (common-lisp:cons "object"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          google-analytics-source-properties))
   common-lisp:nil))
(common-lisp:deftype group () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (honeycode-connector-profile-credentials (:copier common-lisp:nil)
      (:conc-name "struct-shape-honeycode-connector-profile-credentials-"))
   (access-token common-lisp:nil :type
    (common-lisp:or access-token common-lisp:null))
   (refresh-token common-lisp:nil :type
    (common-lisp:or refresh-token common-lisp:null))
   (o-auth-request common-lisp:nil :type
    (common-lisp:or connector-oauth-request common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'honeycode-connector-profile-credentials
                    'make-honeycode-connector-profile-credentials))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          honeycode-connector-profile-credentials))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          honeycode-connector-profile-credentials))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'access-token))
      (common-lisp:list
       (common-lisp:cons "accessToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'refresh-token))
      (common-lisp:list
       (common-lisp:cons "refreshToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'o-auth-request))
      (common-lisp:list
       (common-lisp:cons "oAuthRequest"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          honeycode-connector-profile-credentials))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (honeycode-connector-profile-properties (:copier common-lisp:nil)
      (:conc-name "struct-shape-honeycode-connector-profile-properties-")))
 (common-lisp:export
  (common-lisp:list 'honeycode-connector-profile-properties
                    'make-honeycode-connector-profile-properties))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          honeycode-connector-profile-properties))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          honeycode-connector-profile-properties))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          honeycode-connector-profile-properties))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (honeycode-destination-properties (:copier common-lisp:nil)
      (:conc-name "struct-shape-honeycode-destination-properties-"))
   (object (common-lisp:error ":object is required") :type
    (common-lisp:or object common-lisp:null))
   (error-handling-config common-lisp:nil :type
    (common-lisp:or error-handling-config common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'honeycode-destination-properties
                    'make-honeycode-destination-properties))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          honeycode-destination-properties))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          honeycode-destination-properties))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'object))
      (common-lisp:list
       (common-lisp:cons "object"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'error-handling-config))
      (common-lisp:list
       (common-lisp:cons "errorHandlingConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          honeycode-destination-properties))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (honeycode-metadata (:copier common-lisp:nil)
      (:conc-name "struct-shape-honeycode-metadata-"))
   (o-auth-scopes common-lisp:nil :type
    (common-lisp:or oauth-scope-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'honeycode-metadata 'make-honeycode-metadata))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input honeycode-metadata))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input honeycode-metadata))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'o-auth-scopes))
      (common-lisp:list
       (common-lisp:cons "oAuthScopes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input honeycode-metadata))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype id-field-name-list () '(trivial-types:proper-list name))
 (common-lisp:defun make-id-field-name-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list name))
   aws-sdk/generator/shape::members))
(common-lisp:deftype identifier () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (incremental-pull-config (:copier common-lisp:nil)
      (:conc-name "struct-shape-incremental-pull-config-"))
   (datetime-type-field-name common-lisp:nil :type
    (common-lisp:or datetime-type-field-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'incremental-pull-config 'make-incremental-pull-config))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          incremental-pull-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          incremental-pull-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'datetime-type-field-name))
      (common-lisp:list
       (common-lisp:cons "datetimeTypeFieldName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          incremental-pull-config))
   common-lisp:nil))
(common-lisp:deftype infor-nexus-connector-operator () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (infor-nexus-connector-profile-credentials (:copier common-lisp:nil)
      (:conc-name "struct-shape-infor-nexus-connector-profile-credentials-"))
   (access-key-id (common-lisp:error ":accesskeyid is required") :type
    (common-lisp:or access-key-id common-lisp:null))
   (user-id (common-lisp:error ":userid is required") :type
    (common-lisp:or username common-lisp:null))
   (secret-access-key (common-lisp:error ":secretaccesskey is required") :type
    (common-lisp:or key common-lisp:null))
   (datakey (common-lisp:error ":datakey is required") :type
    (common-lisp:or key common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'infor-nexus-connector-profile-credentials
                    'make-infor-nexus-connector-profile-credentials))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          infor-nexus-connector-profile-credentials))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          infor-nexus-connector-profile-credentials))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'access-key-id))
      (common-lisp:list
       (common-lisp:cons "accessKeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-id))
      (common-lisp:list
       (common-lisp:cons "userId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'secret-access-key))
      (common-lisp:list
       (common-lisp:cons "secretAccessKey"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'datakey))
      (common-lisp:list
       (common-lisp:cons "datakey"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          infor-nexus-connector-profile-credentials))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (infor-nexus-connector-profile-properties (:copier common-lisp:nil)
      (:conc-name "struct-shape-infor-nexus-connector-profile-properties-"))
   (instance-url (common-lisp:error ":instanceurl is required") :type
    (common-lisp:or instance-url common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'infor-nexus-connector-profile-properties
                    'make-infor-nexus-connector-profile-properties))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          infor-nexus-connector-profile-properties))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          infor-nexus-connector-profile-properties))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-url))
      (common-lisp:list
       (common-lisp:cons "instanceUrl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          infor-nexus-connector-profile-properties))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (infor-nexus-metadata (:copier common-lisp:nil)
      (:conc-name "struct-shape-infor-nexus-metadata-")))
 (common-lisp:export
  (common-lisp:list 'infor-nexus-metadata 'make-infor-nexus-metadata))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input infor-nexus-metadata))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input infor-nexus-metadata))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input infor-nexus-metadata))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (infor-nexus-source-properties (:copier common-lisp:nil)
      (:conc-name "struct-shape-infor-nexus-source-properties-"))
   (object (common-lisp:error ":object is required") :type
    (common-lisp:or object common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'infor-nexus-source-properties
                    'make-infor-nexus-source-properties))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          infor-nexus-source-properties))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          infor-nexus-source-properties))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'object))
      (common-lisp:list
       (common-lisp:cons "object"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          infor-nexus-source-properties))
   common-lisp:nil))
(common-lisp:deftype instance-url () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition internal-server-exception
     (appflow-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       internal-server-exception-message)))
 (common-lisp:export
  (common-lisp:list 'internal-server-exception
                    'internal-server-exception-message)))
(common-lisp:deftype java-boolean () 'common-lisp:boolean)
(common-lisp:deftype jwt-token () 'common-lisp:string)
(common-lisp:deftype kmsarn () 'common-lisp:string)
(common-lisp:deftype key () 'common-lisp:string)
(common-lisp:deftype label () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (lambda-connector-provisioning-config (:copier common-lisp:nil)
      (:conc-name "struct-shape-lambda-connector-provisioning-config-"))
   (lambda-arn (common-lisp:error ":lambdaarn is required") :type
    (common-lisp:or arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'lambda-connector-provisioning-config
                    'make-lambda-connector-provisioning-config))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          lambda-connector-provisioning-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          lambda-connector-provisioning-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'lambda-arn))
      (common-lisp:list
       (common-lisp:cons "lambdaArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          lambda-connector-provisioning-config))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-connector-entities-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-connector-entities-request-"))
   (connector-profile-name common-lisp:nil :type
    (common-lisp:or connector-profile-name common-lisp:null))
   (connector-type common-lisp:nil :type
    (common-lisp:or connector-type common-lisp:null))
   (entities-path common-lisp:nil :type
    (common-lisp:or entities-path common-lisp:null))
   (api-version common-lisp:nil :type
    (common-lisp:or api-version common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or list-entities-max-results common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-connector-entities-request
                    'make-list-connector-entities-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-connector-entities-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-connector-entities-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'connector-profile-name))
      (common-lisp:list
       (common-lisp:cons "connectorProfileName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'connector-type))
      (common-lisp:list
       (common-lisp:cons "connectorType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'entities-path))
      (common-lisp:list
       (common-lisp:cons "entitiesPath"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'api-version))
      (common-lisp:list
       (common-lisp:cons "apiVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "maxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-connector-entities-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-connector-entities-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-connector-entities-response-"))
   (connector-entity-map (common-lisp:error ":connectorentitymap is required")
    :type (common-lisp:or connector-entity-map common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-connector-entities-response
                    'make-list-connector-entities-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-connector-entities-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-connector-entities-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'connector-entity-map))
      (common-lisp:list
       (common-lisp:cons "connectorEntityMap"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-connector-entities-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-connectors-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-connectors-request-"))
   (max-results common-lisp:nil :type
    (common-lisp:or max-results common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-connectors-request 'make-list-connectors-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-connectors-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-connectors-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "maxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-connectors-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-connectors-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-connectors-response-"))
   (connectors common-lisp:nil :type
    (common-lisp:or connector-list common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-connectors-response 'make-list-connectors-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-connectors-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-connectors-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'connectors))
      (common-lisp:list
       (common-lisp:cons "connectors"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-connectors-response))
   common-lisp:nil))
(common-lisp:deftype list-entities-max-results () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defstruct
     (list-flows-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-flows-request-"))
   (max-results common-lisp:nil :type
    (common-lisp:or max-results common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-flows-request 'make-list-flows-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-flows-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-flows-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "maxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-flows-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-flows-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-flows-response-"))
   (flows common-lisp:nil :type (common-lisp:or flow-list common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-flows-response 'make-list-flows-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-flows-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-flows-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'flows))
      (common-lisp:list
       (common-lisp:cons "flows"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-flows-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-tags-for-resource-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-tags-for-resource-request-"))
   (resource-arn (common-lisp:error ":resourcearn is required") :type
    (common-lisp:or arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-tags-for-resource-request
                    'make-list-tags-for-resource-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-tags-for-resource-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-tags-for-resource-response-"))
   (tags common-lisp:nil :type (common-lisp:or tag-map common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-tags-for-resource-response
                    'make-list-tags-for-resource-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-response))
   common-lisp:nil))
(common-lisp:deftype logo-url () 'common-lisp:string)
(common-lisp:deftype logon-language () 'common-lisp:string)
(common-lisp:deftype long () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defstruct
     (lookout-metrics-destination-properties (:copier common-lisp:nil)
      (:conc-name "struct-shape-lookout-metrics-destination-properties-")))
 (common-lisp:export
  (common-lisp:list 'lookout-metrics-destination-properties
                    'make-lookout-metrics-destination-properties))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          lookout-metrics-destination-properties))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          lookout-metrics-destination-properties))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          lookout-metrics-destination-properties))
   common-lisp:nil))
(common-lisp:deftype marketo-connector-operator () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (marketo-connector-profile-credentials (:copier common-lisp:nil)
      (:conc-name "struct-shape-marketo-connector-profile-credentials-"))
   (client-id (common-lisp:error ":clientid is required") :type
    (common-lisp:or client-id common-lisp:null))
   (client-secret (common-lisp:error ":clientsecret is required") :type
    (common-lisp:or client-secret common-lisp:null))
   (access-token common-lisp:nil :type
    (common-lisp:or access-token common-lisp:null))
   (o-auth-request common-lisp:nil :type
    (common-lisp:or connector-oauth-request common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'marketo-connector-profile-credentials
                    'make-marketo-connector-profile-credentials))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          marketo-connector-profile-credentials))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          marketo-connector-profile-credentials))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-id))
      (common-lisp:list
       (common-lisp:cons "clientId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-secret))
      (common-lisp:list
       (common-lisp:cons "clientSecret"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'access-token))
      (common-lisp:list
       (common-lisp:cons "accessToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'o-auth-request))
      (common-lisp:list
       (common-lisp:cons "oAuthRequest"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          marketo-connector-profile-credentials))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (marketo-connector-profile-properties (:copier common-lisp:nil)
      (:conc-name "struct-shape-marketo-connector-profile-properties-"))
   (instance-url (common-lisp:error ":instanceurl is required") :type
    (common-lisp:or instance-url common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'marketo-connector-profile-properties
                    'make-marketo-connector-profile-properties))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          marketo-connector-profile-properties))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          marketo-connector-profile-properties))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-url))
      (common-lisp:list
       (common-lisp:cons "instanceUrl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          marketo-connector-profile-properties))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (marketo-destination-properties (:copier common-lisp:nil)
      (:conc-name "struct-shape-marketo-destination-properties-"))
   (object (common-lisp:error ":object is required") :type
    (common-lisp:or object common-lisp:null))
   (error-handling-config common-lisp:nil :type
    (common-lisp:or error-handling-config common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'marketo-destination-properties
                    'make-marketo-destination-properties))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          marketo-destination-properties))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          marketo-destination-properties))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'object))
      (common-lisp:list
       (common-lisp:cons "object"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'error-handling-config))
      (common-lisp:list
       (common-lisp:cons "errorHandlingConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          marketo-destination-properties))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (marketo-metadata (:copier common-lisp:nil)
      (:conc-name "struct-shape-marketo-metadata-")))
 (common-lisp:export
  (common-lisp:list 'marketo-metadata 'make-marketo-metadata))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input marketo-metadata))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input marketo-metadata))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input marketo-metadata))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (marketo-source-properties (:copier common-lisp:nil)
      (:conc-name "struct-shape-marketo-source-properties-"))
   (object (common-lisp:error ":object is required") :type
    (common-lisp:or object common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'marketo-source-properties
                    'make-marketo-source-properties))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          marketo-source-properties))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          marketo-source-properties))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'object))
      (common-lisp:list
       (common-lisp:cons "object"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          marketo-source-properties))
   common-lisp:nil))
(common-lisp:deftype max-results () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defstruct
     (metadata-catalog-config (:copier common-lisp:nil)
      (:conc-name "struct-shape-metadata-catalog-config-"))
   (glue-data-catalog common-lisp:nil :type
    (common-lisp:or glue-data-catalog-config common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'metadata-catalog-config 'make-metadata-catalog-config))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          metadata-catalog-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          metadata-catalog-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'glue-data-catalog))
      (common-lisp:list
       (common-lisp:cons "glueDataCatalog"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          metadata-catalog-config))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (metadata-catalog-detail (:copier common-lisp:nil)
      (:conc-name "struct-shape-metadata-catalog-detail-"))
   (catalog-type common-lisp:nil :type
    (common-lisp:or catalog-type common-lisp:null))
   (table-name common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (table-registration-output common-lisp:nil :type
    (common-lisp:or registration-output common-lisp:null))
   (partition-registration-output common-lisp:nil :type
    (common-lisp:or registration-output common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'metadata-catalog-detail 'make-metadata-catalog-detail))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          metadata-catalog-detail))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          metadata-catalog-detail))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'catalog-type))
      (common-lisp:list
       (common-lisp:cons "catalogType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'table-name))
      (common-lisp:list
       (common-lisp:cons "tableName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'table-registration-output))
      (common-lisp:list
       (common-lisp:cons "tableRegistrationOutput"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'partition-registration-output))
      (common-lisp:list
       (common-lisp:cons "partitionRegistrationOutput"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          metadata-catalog-detail))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype metadata-catalog-details ()
   '(trivial-types:proper-list metadata-catalog-detail))
 (common-lisp:defun make-metadata-catalog-details
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list metadata-catalog-detail))
   aws-sdk/generator/shape::members))
(common-lisp:deftype most-recent-execution-message () 'common-lisp:string)
(common-lisp:deftype name () 'common-lisp:string)
(common-lisp:deftype next-token () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (oauth2credentials (:copier common-lisp:nil)
      (:conc-name "struct-shape-oauth2credentials-"))
   (client-id common-lisp:nil :type
    (common-lisp:or client-id common-lisp:null))
   (client-secret common-lisp:nil :type
    (common-lisp:or client-secret common-lisp:null))
   (access-token common-lisp:nil :type
    (common-lisp:or access-token common-lisp:null))
   (refresh-token common-lisp:nil :type
    (common-lisp:or refresh-token common-lisp:null))
   (o-auth-request common-lisp:nil :type
    (common-lisp:or connector-oauth-request common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'oauth2credentials 'make-oauth2credentials))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input oauth2credentials))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input oauth2credentials))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-id))
      (common-lisp:list
       (common-lisp:cons "clientId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-secret))
      (common-lisp:list
       (common-lisp:cons "clientSecret"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'access-token))
      (common-lisp:list
       (common-lisp:cons "accessToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'refresh-token))
      (common-lisp:list
       (common-lisp:cons "refreshToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'o-auth-request))
      (common-lisp:list
       (common-lisp:cons "oAuthRequest"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input oauth2credentials))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (oauth2custom-parameter (:copier common-lisp:nil)
      (:conc-name "struct-shape-oauth2custom-parameter-"))
   (key common-lisp:nil :type (common-lisp:or key common-lisp:null))
   (is-required common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (label common-lisp:nil :type (common-lisp:or label common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or description common-lisp:null))
   (is-sensitive-field common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (connector-supplied-values common-lisp:nil :type
    (common-lisp:or connector-supplied-value-list common-lisp:null))
   (type common-lisp:nil :type
    (common-lisp:or oauth2custom-prop-type common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'oauth2custom-parameter 'make-oauth2custom-parameter))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          oauth2custom-parameter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          oauth2custom-parameter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key))
      (common-lisp:list
       (common-lisp:cons "key"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'is-required))
      (common-lisp:list
       (common-lisp:cons "isRequired"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'label))
      (common-lisp:list
       (common-lisp:cons "label"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'is-sensitive-field))
      (common-lisp:list
       (common-lisp:cons "isSensitiveField"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'connector-supplied-values))
      (common-lisp:list
       (common-lisp:cons "connectorSuppliedValues"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          oauth2custom-parameter))
   common-lisp:nil))
(common-lisp:deftype oauth2custom-prop-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype oauth2custom-properties-list ()
   '(trivial-types:proper-list oauth2custom-parameter))
 (common-lisp:defun make-oauth2custom-properties-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list oauth2custom-parameter))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (oauth2defaults (:copier common-lisp:nil)
      (:conc-name "struct-shape-oauth2defaults-"))
   (oauth-scopes common-lisp:nil :type
    (common-lisp:or oauth-scope-list common-lisp:null))
   (token-urls common-lisp:nil :type
    (common-lisp:or token-url-list common-lisp:null))
   (auth-code-urls common-lisp:nil :type
    (common-lisp:or auth-code-url-list common-lisp:null))
   (oauth2grant-types-supported common-lisp:nil :type
    (common-lisp:or oauth2grant-type-supported-list common-lisp:null))
   (oauth2custom-properties common-lisp:nil :type
    (common-lisp:or oauth2custom-properties-list common-lisp:null)))
 (common-lisp:export (common-lisp:list 'oauth2defaults 'make-oauth2defaults))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input oauth2defaults))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input oauth2defaults))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'oauth-scopes))
      (common-lisp:list
       (common-lisp:cons "oauthScopes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'token-urls))
      (common-lisp:list
       (common-lisp:cons "tokenUrls"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'auth-code-urls))
      (common-lisp:list
       (common-lisp:cons "authCodeUrls"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'oauth2grant-types-supported))
      (common-lisp:list
       (common-lisp:cons "oauth2GrantTypesSupported"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'oauth2custom-properties))
      (common-lisp:list
       (common-lisp:cons "oauth2CustomProperties"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input oauth2defaults))
   common-lisp:nil))
(common-lisp:deftype oauth2grant-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype oauth2grant-type-supported-list ()
   '(trivial-types:proper-list oauth2grant-type))
 (common-lisp:defun make-oauth2grant-type-supported-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list oauth2grant-type))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (oauth2properties (:copier common-lisp:nil)
      (:conc-name "struct-shape-oauth2properties-"))
   (token-url (common-lisp:error ":tokenurl is required") :type
    (common-lisp:or token-url common-lisp:null))
   (o-auth2grant-type (common-lisp:error ":oauth2granttype is required") :type
    (common-lisp:or oauth2grant-type common-lisp:null))
   (token-url-custom-properties common-lisp:nil :type
    (common-lisp:or token-url-custom-properties common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'oauth2properties 'make-oauth2properties))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input oauth2properties))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input oauth2properties))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'token-url))
      (common-lisp:list
       (common-lisp:cons "tokenUrl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'o-auth2grant-type))
      (common-lisp:list
       (common-lisp:cons "oAuth2GrantType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'token-url-custom-properties))
      (common-lisp:list
       (common-lisp:cons "tokenUrlCustomProperties"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input oauth2properties))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (oauth-credentials (:copier common-lisp:nil)
      (:conc-name "struct-shape-oauth-credentials-"))
   (client-id (common-lisp:error ":clientid is required") :type
    (common-lisp:or client-id common-lisp:null))
   (client-secret (common-lisp:error ":clientsecret is required") :type
    (common-lisp:or client-secret common-lisp:null))
   (access-token common-lisp:nil :type
    (common-lisp:or access-token common-lisp:null))
   (refresh-token common-lisp:nil :type
    (common-lisp:or refresh-token common-lisp:null))
   (o-auth-request common-lisp:nil :type
    (common-lisp:or connector-oauth-request common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'oauth-credentials 'make-oauth-credentials))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input oauth-credentials))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input oauth-credentials))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-id))
      (common-lisp:list
       (common-lisp:cons "clientId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-secret))
      (common-lisp:list
       (common-lisp:cons "clientSecret"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'access-token))
      (common-lisp:list
       (common-lisp:cons "accessToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'refresh-token))
      (common-lisp:list
       (common-lisp:cons "refreshToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'o-auth-request))
      (common-lisp:list
       (common-lisp:cons "oAuthRequest"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input oauth-credentials))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (oauth-properties (:copier common-lisp:nil)
      (:conc-name "struct-shape-oauth-properties-"))
   (token-url (common-lisp:error ":tokenurl is required") :type
    (common-lisp:or token-url common-lisp:null))
   (auth-code-url (common-lisp:error ":authcodeurl is required") :type
    (common-lisp:or auth-code-url common-lisp:null))
   (o-auth-scopes (common-lisp:error ":oauthscopes is required") :type
    (common-lisp:or oauth-scope-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'oauth-properties 'make-oauth-properties))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input oauth-properties))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input oauth-properties))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'token-url))
      (common-lisp:list
       (common-lisp:cons "tokenUrl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'auth-code-url))
      (common-lisp:list
       (common-lisp:cons "authCodeUrl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'o-auth-scopes))
      (common-lisp:list
       (common-lisp:cons "oAuthScopes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input oauth-properties))
   common-lisp:nil))
(common-lisp:deftype oauth-scope () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype oauth-scope-list ()
   '(trivial-types:proper-list oauth-scope))
 (common-lisp:defun make-oauth-scope-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list oauth-scope))
   aws-sdk/generator/shape::members))
(common-lisp:deftype object () 'common-lisp:string)
(common-lisp:deftype object-type-name () 'common-lisp:string)
(common-lisp:deftype operator () 'common-lisp:string)
(common-lisp:deftype operator-properties-keys () 'common-lisp:string)
(common-lisp:deftype operators () 'common-lisp:string)
(common-lisp:deftype pardot-connector-operator () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (pardot-connector-profile-credentials (:copier common-lisp:nil)
      (:conc-name "struct-shape-pardot-connector-profile-credentials-"))
   (access-token common-lisp:nil :type
    (common-lisp:or access-token common-lisp:null))
   (refresh-token common-lisp:nil :type
    (common-lisp:or refresh-token common-lisp:null))
   (o-auth-request common-lisp:nil :type
    (common-lisp:or connector-oauth-request common-lisp:null))
   (client-credentials-arn common-lisp:nil :type
    (common-lisp:or client-credentials-arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'pardot-connector-profile-credentials
                    'make-pardot-connector-profile-credentials))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          pardot-connector-profile-credentials))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          pardot-connector-profile-credentials))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'access-token))
      (common-lisp:list
       (common-lisp:cons "accessToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'refresh-token))
      (common-lisp:list
       (common-lisp:cons "refreshToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'o-auth-request))
      (common-lisp:list
       (common-lisp:cons "oAuthRequest"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'client-credentials-arn))
      (common-lisp:list
       (common-lisp:cons "clientCredentialsArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          pardot-connector-profile-credentials))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (pardot-connector-profile-properties (:copier common-lisp:nil)
      (:conc-name "struct-shape-pardot-connector-profile-properties-"))
   (instance-url common-lisp:nil :type
    (common-lisp:or instance-url common-lisp:null))
   (is-sandbox-environment common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (business-unit-id common-lisp:nil :type
    (common-lisp:or business-unit-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'pardot-connector-profile-properties
                    'make-pardot-connector-profile-properties))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          pardot-connector-profile-properties))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          pardot-connector-profile-properties))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-url))
      (common-lisp:list
       (common-lisp:cons "instanceUrl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'is-sandbox-environment))
      (common-lisp:list
       (common-lisp:cons "isSandboxEnvironment"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'business-unit-id))
      (common-lisp:list
       (common-lisp:cons "businessUnitId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          pardot-connector-profile-properties))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (pardot-metadata (:copier common-lisp:nil)
      (:conc-name "struct-shape-pardot-metadata-")))
 (common-lisp:export (common-lisp:list 'pardot-metadata 'make-pardot-metadata))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input pardot-metadata))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input pardot-metadata))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input pardot-metadata))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (pardot-source-properties (:copier common-lisp:nil)
      (:conc-name "struct-shape-pardot-source-properties-"))
   (object (common-lisp:error ":object is required") :type
    (common-lisp:or object common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'pardot-source-properties 'make-pardot-source-properties))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          pardot-source-properties))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          pardot-source-properties))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'object))
      (common-lisp:list
       (common-lisp:cons "object"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          pardot-source-properties))
   common-lisp:nil))
(common-lisp:deftype password () 'common-lisp:string)
(common-lisp:deftype path-prefix () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype path-prefix-hierarchy ()
   '(trivial-types:proper-list path-prefix))
 (common-lisp:defun make-path-prefix-hierarchy
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list path-prefix))
   aws-sdk/generator/shape::members))
(common-lisp:deftype port-number () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defstruct
     (prefix-config (:copier common-lisp:nil)
      (:conc-name "struct-shape-prefix-config-"))
   (prefix-type common-lisp:nil :type
    (common-lisp:or prefix-type common-lisp:null))
   (prefix-format common-lisp:nil :type
    (common-lisp:or prefix-format common-lisp:null))
   (path-prefix-hierarchy common-lisp:nil :type
    (common-lisp:or path-prefix-hierarchy common-lisp:null)))
 (common-lisp:export (common-lisp:list 'prefix-config 'make-prefix-config))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input prefix-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input prefix-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'prefix-type))
      (common-lisp:list
       (common-lisp:cons "prefixType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'prefix-format))
      (common-lisp:list
       (common-lisp:cons "prefixFormat"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'path-prefix-hierarchy))
      (common-lisp:list
       (common-lisp:cons "pathPrefixHierarchy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input prefix-config))
   common-lisp:nil))
(common-lisp:deftype prefix-format () 'common-lisp:string)
(common-lisp:deftype prefix-type () 'common-lisp:string)
(common-lisp:deftype private-connection-provisioning-failure-cause ()
  'common-lisp:string)
(common-lisp:deftype private-connection-provisioning-failure-message ()
  'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (private-connection-provisioning-state (:copier common-lisp:nil)
      (:conc-name "struct-shape-private-connection-provisioning-state-"))
   (status common-lisp:nil :type
    (common-lisp:or private-connection-provisioning-status common-lisp:null))
   (failure-message common-lisp:nil :type
    (common-lisp:or private-connection-provisioning-failure-message
                    common-lisp:null))
   (failure-cause common-lisp:nil :type
    (common-lisp:or private-connection-provisioning-failure-cause
                    common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'private-connection-provisioning-state
                    'make-private-connection-provisioning-state))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          private-connection-provisioning-state))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          private-connection-provisioning-state))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'failure-message))
      (common-lisp:list
       (common-lisp:cons "failureMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'failure-cause))
      (common-lisp:list
       (common-lisp:cons "failureCause"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          private-connection-provisioning-state))
   common-lisp:nil))
(common-lisp:deftype private-connection-provisioning-status ()
  'common-lisp:string)
(common-lisp:deftype private-link-service-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype profile-properties-map () 'common-lisp:hash-table)
 (common-lisp:defun make-profile-properties-map
                    (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:deftype profile-property-key () 'common-lisp:string)
(common-lisp:deftype profile-property-value () 'common-lisp:string)
(common-lisp:deftype property () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (range (:copier common-lisp:nil) (:conc-name "struct-shape-range-"))
   (maximum common-lisp:nil :type (common-lisp:or double common-lisp:null))
   (minimum common-lisp:nil :type (common-lisp:or double common-lisp:null)))
 (common-lisp:export (common-lisp:list 'range 'make-range))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input range))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input range))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'maximum))
      (common-lisp:list
       (common-lisp:cons "maximum"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'minimum))
      (common-lisp:list
       (common-lisp:cons "minimum"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input range))
   common-lisp:nil))
(common-lisp:deftype redirect-uri () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (redshift-connector-profile-credentials (:copier common-lisp:nil)
      (:conc-name "struct-shape-redshift-connector-profile-credentials-"))
   (username common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (password common-lisp:nil :type (common-lisp:or password common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'redshift-connector-profile-credentials
                    'make-redshift-connector-profile-credentials))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          redshift-connector-profile-credentials))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          redshift-connector-profile-credentials))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'username))
      (common-lisp:list
       (common-lisp:cons "username"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'password))
      (common-lisp:list
       (common-lisp:cons "password"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          redshift-connector-profile-credentials))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (redshift-connector-profile-properties (:copier common-lisp:nil)
      (:conc-name "struct-shape-redshift-connector-profile-properties-"))
   (database-url common-lisp:nil :type
    (common-lisp:or database-url common-lisp:null))
   (bucket-name (common-lisp:error ":bucketname is required") :type
    (common-lisp:or bucket-name common-lisp:null))
   (bucket-prefix common-lisp:nil :type
    (common-lisp:or bucket-prefix common-lisp:null))
   (role-arn (common-lisp:error ":rolearn is required") :type
    (common-lisp:or role-arn common-lisp:null))
   (data-api-role-arn common-lisp:nil :type
    (common-lisp:or data-api-role-arn common-lisp:null))
   (is-redshift-serverless common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (cluster-identifier common-lisp:nil :type
    (common-lisp:or cluster-identifier common-lisp:null))
   (workgroup-name common-lisp:nil :type
    (common-lisp:or workgroup-name common-lisp:null))
   (database-name common-lisp:nil :type
    (common-lisp:or database-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'redshift-connector-profile-properties
                    'make-redshift-connector-profile-properties))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          redshift-connector-profile-properties))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          redshift-connector-profile-properties))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'database-url))
      (common-lisp:list
       (common-lisp:cons "databaseUrl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bucket-name))
      (common-lisp:list
       (common-lisp:cons "bucketName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bucket-prefix))
      (common-lisp:list
       (common-lisp:cons "bucketPrefix"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "roleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-api-role-arn))
      (common-lisp:list
       (common-lisp:cons "dataApiRoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'is-redshift-serverless))
      (common-lisp:list
       (common-lisp:cons "isRedshiftServerless"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster-identifier))
      (common-lisp:list
       (common-lisp:cons "clusterIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'workgroup-name))
      (common-lisp:list
       (common-lisp:cons "workgroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'database-name))
      (common-lisp:list
       (common-lisp:cons "databaseName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          redshift-connector-profile-properties))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (redshift-destination-properties (:copier common-lisp:nil)
      (:conc-name "struct-shape-redshift-destination-properties-"))
   (object (common-lisp:error ":object is required") :type
    (common-lisp:or object common-lisp:null))
   (intermediate-bucket-name
    (common-lisp:error ":intermediatebucketname is required") :type
    (common-lisp:or bucket-name common-lisp:null))
   (bucket-prefix common-lisp:nil :type
    (common-lisp:or bucket-prefix common-lisp:null))
   (error-handling-config common-lisp:nil :type
    (common-lisp:or error-handling-config common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'redshift-destination-properties
                    'make-redshift-destination-properties))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          redshift-destination-properties))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          redshift-destination-properties))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'object))
      (common-lisp:list
       (common-lisp:cons "object"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'intermediate-bucket-name))
      (common-lisp:list
       (common-lisp:cons "intermediateBucketName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bucket-prefix))
      (common-lisp:list
       (common-lisp:cons "bucketPrefix"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'error-handling-config))
      (common-lisp:list
       (common-lisp:cons "errorHandlingConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          redshift-destination-properties))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (redshift-metadata (:copier common-lisp:nil)
      (:conc-name "struct-shape-redshift-metadata-")))
 (common-lisp:export
  (common-lisp:list 'redshift-metadata 'make-redshift-metadata))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input redshift-metadata))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input redshift-metadata))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input redshift-metadata))
   common-lisp:nil))
(common-lisp:deftype refresh-token () 'common-lisp:string)
(common-lisp:deftype region () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype region-list () '(trivial-types:proper-list region))
 (common-lisp:defun make-region-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list region))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (register-connector-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-register-connector-request-"))
   (connector-label common-lisp:nil :type
    (common-lisp:or connector-label common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or description common-lisp:null))
   (connector-provisioning-type common-lisp:nil :type
    (common-lisp:or connector-provisioning-type common-lisp:null))
   (connector-provisioning-config common-lisp:nil :type
    (common-lisp:or connector-provisioning-config common-lisp:null))
   (client-token common-lisp:nil :type
    (common-lisp:or client-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'register-connector-request
                    'make-register-connector-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          register-connector-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          register-connector-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'connector-label))
      (common-lisp:list
       (common-lisp:cons "connectorLabel"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'connector-provisioning-type))
      (common-lisp:list
       (common-lisp:cons "connectorProvisioningType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'connector-provisioning-config))
      (common-lisp:list
       (common-lisp:cons "connectorProvisioningConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "clientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          register-connector-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (register-connector-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-register-connector-response-"))
   (connector-arn common-lisp:nil :type (common-lisp:or arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'register-connector-response
                    'make-register-connector-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          register-connector-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          register-connector-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'connector-arn))
      (common-lisp:list
       (common-lisp:cons "connectorArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          register-connector-response))
   common-lisp:nil))
(common-lisp:deftype registered-by () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (registration-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-registration-output-"))
   (message common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (result common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or execution-status common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'registration-output 'make-registration-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input registration-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input registration-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message))
      (common-lisp:list
       (common-lisp:cons "message"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'result))
      (common-lisp:list
       (common-lisp:cons "result"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input registration-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (reset-connector-metadata-cache-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-reset-connector-metadata-cache-request-"))
   (connector-profile-name common-lisp:nil :type
    (common-lisp:or connector-profile-name common-lisp:null))
   (connector-type common-lisp:nil :type
    (common-lisp:or connector-type common-lisp:null))
   (connector-entity-name common-lisp:nil :type
    (common-lisp:or entity-name common-lisp:null))
   (entities-path common-lisp:nil :type
    (common-lisp:or entities-path common-lisp:null))
   (api-version common-lisp:nil :type
    (common-lisp:or api-version common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'reset-connector-metadata-cache-request
                    'make-reset-connector-metadata-cache-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          reset-connector-metadata-cache-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          reset-connector-metadata-cache-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'connector-profile-name))
      (common-lisp:list
       (common-lisp:cons "connectorProfileName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'connector-type))
      (common-lisp:list
       (common-lisp:cons "connectorType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'connector-entity-name))
      (common-lisp:list
       (common-lisp:cons "connectorEntityName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'entities-path))
      (common-lisp:list
       (common-lisp:cons "entitiesPath"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'api-version))
      (common-lisp:list
       (common-lisp:cons "apiVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          reset-connector-metadata-cache-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (reset-connector-metadata-cache-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-reset-connector-metadata-cache-response-")))
 (common-lisp:export
  (common-lisp:list 'reset-connector-metadata-cache-response
                    'make-reset-connector-metadata-cache-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          reset-connector-metadata-cache-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          reset-connector-metadata-cache-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          reset-connector-metadata-cache-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition resource-not-found-exception
     (appflow-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       resource-not-found-exception-message)))
 (common-lisp:export
  (common-lisp:list 'resource-not-found-exception
                    'resource-not-found-exception-message)))
(common-lisp:deftype role-arn () 'common-lisp:string)
(common-lisp:deftype s3connector-operator () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (s3destination-properties (:copier common-lisp:nil)
      (:conc-name "struct-shape-s3destination-properties-"))
   (bucket-name (common-lisp:error ":bucketname is required") :type
    (common-lisp:or bucket-name common-lisp:null))
   (bucket-prefix common-lisp:nil :type
    (common-lisp:or bucket-prefix common-lisp:null))
   (s3output-format-config common-lisp:nil :type
    (common-lisp:or s3output-format-config common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 's3destination-properties 'make-s3destination-properties))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          s3destination-properties))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          s3destination-properties))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bucket-name))
      (common-lisp:list
       (common-lisp:cons "bucketName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bucket-prefix))
      (common-lisp:list
       (common-lisp:cons "bucketPrefix"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           's3output-format-config))
      (common-lisp:list
       (common-lisp:cons "s3OutputFormatConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          s3destination-properties))
   common-lisp:nil))
(common-lisp:deftype s3input-file-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (s3input-format-config (:copier common-lisp:nil)
      (:conc-name "struct-shape-s3input-format-config-"))
   (s3input-file-type common-lisp:nil :type
    (common-lisp:or s3input-file-type common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 's3input-format-config 'make-s3input-format-config))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          s3input-format-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          s3input-format-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3input-file-type))
      (common-lisp:list
       (common-lisp:cons "s3InputFileType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          s3input-format-config))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (s3metadata (:copier common-lisp:nil)
      (:conc-name "struct-shape-s3metadata-")))
 (common-lisp:export (common-lisp:list 's3metadata 'make-s3metadata))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input s3metadata))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input s3metadata))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input s3metadata))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (s3output-format-config (:copier common-lisp:nil)
      (:conc-name "struct-shape-s3output-format-config-"))
   (file-type common-lisp:nil :type
    (common-lisp:or file-type common-lisp:null))
   (prefix-config common-lisp:nil :type
    (common-lisp:or prefix-config common-lisp:null))
   (aggregation-config common-lisp:nil :type
    (common-lisp:or aggregation-config common-lisp:null))
   (preserve-source-data-typing common-lisp:nil :type
    (common-lisp:or java-boolean common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 's3output-format-config 'make-s3output-format-config))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          s3output-format-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          s3output-format-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'file-type))
      (common-lisp:list
       (common-lisp:cons "fileType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'prefix-config))
      (common-lisp:list
       (common-lisp:cons "prefixConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'aggregation-config))
      (common-lisp:list
       (common-lisp:cons "aggregationConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'preserve-source-data-typing))
      (common-lisp:list
       (common-lisp:cons "preserveSourceDataTyping"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          s3output-format-config))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (s3source-properties (:copier common-lisp:nil)
      (:conc-name "struct-shape-s3source-properties-"))
   (bucket-name (common-lisp:error ":bucketname is required") :type
    (common-lisp:or bucket-name common-lisp:null))
   (bucket-prefix common-lisp:nil :type
    (common-lisp:or bucket-prefix common-lisp:null))
   (s3input-format-config common-lisp:nil :type
    (common-lisp:or s3input-format-config common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 's3source-properties 'make-s3source-properties))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input s3source-properties))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input s3source-properties))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bucket-name))
      (common-lisp:list
       (common-lisp:cons "bucketName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bucket-prefix))
      (common-lisp:list
       (common-lisp:cons "bucketPrefix"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           's3input-format-config))
      (common-lisp:list
       (common-lisp:cons "s3InputFormatConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input s3source-properties))
   common-lisp:nil))
(common-lisp:deftype sapodata-connector-operator () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (sapodata-connector-profile-credentials (:copier common-lisp:nil)
      (:conc-name "struct-shape-sapodata-connector-profile-credentials-"))
   (basic-auth-credentials common-lisp:nil :type
    (common-lisp:or basic-auth-credentials common-lisp:null))
   (o-auth-credentials common-lisp:nil :type
    (common-lisp:or oauth-credentials common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'sapodata-connector-profile-credentials
                    'make-sapodata-connector-profile-credentials))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          sapodata-connector-profile-credentials))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          sapodata-connector-profile-credentials))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'basic-auth-credentials))
      (common-lisp:list
       (common-lisp:cons "basicAuthCredentials"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'o-auth-credentials))
      (common-lisp:list
       (common-lisp:cons "oAuthCredentials"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          sapodata-connector-profile-credentials))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (sapodata-connector-profile-properties (:copier common-lisp:nil)
      (:conc-name "struct-shape-sapodata-connector-profile-properties-"))
   (application-host-url (common-lisp:error ":applicationhosturl is required")
    :type (common-lisp:or application-host-url common-lisp:null))
   (application-service-path
    (common-lisp:error ":applicationservicepath is required") :type
    (common-lisp:or application-service-path common-lisp:null))
   (port-number (common-lisp:error ":portnumber is required") :type
    (common-lisp:or port-number common-lisp:null))
   (client-number (common-lisp:error ":clientnumber is required") :type
    (common-lisp:or client-number common-lisp:null))
   (logon-language common-lisp:nil :type
    (common-lisp:or logon-language common-lisp:null))
   (private-link-service-name common-lisp:nil :type
    (common-lisp:or private-link-service-name common-lisp:null))
   (o-auth-properties common-lisp:nil :type
    (common-lisp:or oauth-properties common-lisp:null))
   (disable-sso common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'sapodata-connector-profile-properties
                    'make-sapodata-connector-profile-properties))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          sapodata-connector-profile-properties))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          sapodata-connector-profile-properties))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'application-host-url))
      (common-lisp:list
       (common-lisp:cons "applicationHostUrl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'application-service-path))
      (common-lisp:list
       (common-lisp:cons "applicationServicePath"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'port-number))
      (common-lisp:list
       (common-lisp:cons "portNumber"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-number))
      (common-lisp:list
       (common-lisp:cons "clientNumber"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'logon-language))
      (common-lisp:list
       (common-lisp:cons "logonLanguage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'private-link-service-name))
      (common-lisp:list
       (common-lisp:cons "privateLinkServiceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'o-auth-properties))
      (common-lisp:list
       (common-lisp:cons "oAuthProperties"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'disable-sso))
      (common-lisp:list
       (common-lisp:cons "disableSSO"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          sapodata-connector-profile-properties))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (sapodata-destination-properties (:copier common-lisp:nil)
      (:conc-name "struct-shape-sapodata-destination-properties-"))
   (object-path (common-lisp:error ":objectpath is required") :type
    (common-lisp:or object common-lisp:null))
   (success-response-handling-config common-lisp:nil :type
    (common-lisp:or success-response-handling-config common-lisp:null))
   (id-field-names common-lisp:nil :type
    (common-lisp:or id-field-name-list common-lisp:null))
   (error-handling-config common-lisp:nil :type
    (common-lisp:or error-handling-config common-lisp:null))
   (write-operation-type common-lisp:nil :type
    (common-lisp:or write-operation-type common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'sapodata-destination-properties
                    'make-sapodata-destination-properties))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          sapodata-destination-properties))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          sapodata-destination-properties))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'object-path))
      (common-lisp:list
       (common-lisp:cons "objectPath"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'success-response-handling-config))
      (common-lisp:list
       (common-lisp:cons "successResponseHandlingConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id-field-names))
      (common-lisp:list
       (common-lisp:cons "idFieldNames"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'error-handling-config))
      (common-lisp:list
       (common-lisp:cons "errorHandlingConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'write-operation-type))
      (common-lisp:list
       (common-lisp:cons "writeOperationType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          sapodata-destination-properties))
   common-lisp:nil))
(common-lisp:deftype sapodata-max-page-size () 'common-lisp:integer)
(common-lisp:deftype sapodata-max-parallelism () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defstruct
     (sapodata-metadata (:copier common-lisp:nil)
      (:conc-name "struct-shape-sapodata-metadata-")))
 (common-lisp:export
  (common-lisp:list 'sapodata-metadata 'make-sapodata-metadata))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input sapodata-metadata))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input sapodata-metadata))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input sapodata-metadata))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (sapodata-pagination-config (:copier common-lisp:nil)
      (:conc-name "struct-shape-sapodata-pagination-config-"))
   (max-page-size (common-lisp:error ":maxpagesize is required") :type
    (common-lisp:or sapodata-max-page-size common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'sapodata-pagination-config
                    'make-sapodata-pagination-config))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          sapodata-pagination-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          sapodata-pagination-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-page-size))
      (common-lisp:list
       (common-lisp:cons "maxPageSize"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          sapodata-pagination-config))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (sapodata-parallelism-config (:copier common-lisp:nil)
      (:conc-name "struct-shape-sapodata-parallelism-config-"))
   (max-parallelism (common-lisp:error ":maxparallelism is required") :type
    (common-lisp:or sapodata-max-parallelism common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'sapodata-parallelism-config
                    'make-sapodata-parallelism-config))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          sapodata-parallelism-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          sapodata-parallelism-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-parallelism))
      (common-lisp:list
       (common-lisp:cons "maxParallelism"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          sapodata-parallelism-config))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (sapodata-source-properties (:copier common-lisp:nil)
      (:conc-name "struct-shape-sapodata-source-properties-"))
   (object-path common-lisp:nil :type (common-lisp:or object common-lisp:null))
   (parallelism-config common-lisp:nil :type
    (common-lisp:or sapodata-parallelism-config common-lisp:null))
   (pagination-config common-lisp:nil :type
    (common-lisp:or sapodata-pagination-config common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'sapodata-source-properties
                    'make-sapodata-source-properties))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          sapodata-source-properties))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          sapodata-source-properties))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'object-path))
      (common-lisp:list
       (common-lisp:cons "objectPath"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'parallelism-config))
      (common-lisp:list
       (common-lisp:cons "parallelismConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pagination-config))
      (common-lisp:list
       (common-lisp:cons "paginationConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          sapodata-source-properties))
   common-lisp:nil))
(common-lisp:deftype salesforce-connector-operator () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (salesforce-connector-profile-credentials (:copier common-lisp:nil)
      (:conc-name "struct-shape-salesforce-connector-profile-credentials-"))
   (access-token common-lisp:nil :type
    (common-lisp:or access-token common-lisp:null))
   (refresh-token common-lisp:nil :type
    (common-lisp:or refresh-token common-lisp:null))
   (o-auth-request common-lisp:nil :type
    (common-lisp:or connector-oauth-request common-lisp:null))
   (client-credentials-arn common-lisp:nil :type
    (common-lisp:or client-credentials-arn common-lisp:null))
   (o-auth2grant-type common-lisp:nil :type
    (common-lisp:or oauth2grant-type common-lisp:null))
   (jwt-token common-lisp:nil :type
    (common-lisp:or jwt-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'salesforce-connector-profile-credentials
                    'make-salesforce-connector-profile-credentials))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          salesforce-connector-profile-credentials))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          salesforce-connector-profile-credentials))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'access-token))
      (common-lisp:list
       (common-lisp:cons "accessToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'refresh-token))
      (common-lisp:list
       (common-lisp:cons "refreshToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'o-auth-request))
      (common-lisp:list
       (common-lisp:cons "oAuthRequest"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'client-credentials-arn))
      (common-lisp:list
       (common-lisp:cons "clientCredentialsArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'o-auth2grant-type))
      (common-lisp:list
       (common-lisp:cons "oAuth2GrantType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'jwt-token))
      (common-lisp:list
       (common-lisp:cons "jwtToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          salesforce-connector-profile-credentials))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (salesforce-connector-profile-properties (:copier common-lisp:nil)
      (:conc-name "struct-shape-salesforce-connector-profile-properties-"))
   (instance-url common-lisp:nil :type
    (common-lisp:or instance-url common-lisp:null))
   (is-sandbox-environment common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (use-private-link-for-metadata-and-authorization common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'salesforce-connector-profile-properties
                    'make-salesforce-connector-profile-properties))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          salesforce-connector-profile-properties))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          salesforce-connector-profile-properties))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-url))
      (common-lisp:list
       (common-lisp:cons "instanceUrl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'is-sandbox-environment))
      (common-lisp:list
       (common-lisp:cons "isSandboxEnvironment"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'use-private-link-for-metadata-and-authorization))
      (common-lisp:list
       (common-lisp:cons "usePrivateLinkForMetadataAndAuthorization"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          salesforce-connector-profile-properties))
   common-lisp:nil))
(common-lisp:deftype salesforce-data-transfer-api () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype salesforce-data-transfer-api-list ()
   '(trivial-types:proper-list salesforce-data-transfer-api))
 (common-lisp:defun make-salesforce-data-transfer-api-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            salesforce-data-transfer-api))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (salesforce-destination-properties (:copier common-lisp:nil)
      (:conc-name "struct-shape-salesforce-destination-properties-"))
   (object (common-lisp:error ":object is required") :type
    (common-lisp:or object common-lisp:null))
   (id-field-names common-lisp:nil :type
    (common-lisp:or id-field-name-list common-lisp:null))
   (error-handling-config common-lisp:nil :type
    (common-lisp:or error-handling-config common-lisp:null))
   (write-operation-type common-lisp:nil :type
    (common-lisp:or write-operation-type common-lisp:null))
   (data-transfer-api common-lisp:nil :type
    (common-lisp:or salesforce-data-transfer-api common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'salesforce-destination-properties
                    'make-salesforce-destination-properties))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          salesforce-destination-properties))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          salesforce-destination-properties))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'object))
      (common-lisp:list
       (common-lisp:cons "object"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id-field-names))
      (common-lisp:list
       (common-lisp:cons "idFieldNames"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'error-handling-config))
      (common-lisp:list
       (common-lisp:cons "errorHandlingConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'write-operation-type))
      (common-lisp:list
       (common-lisp:cons "writeOperationType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-transfer-api))
      (common-lisp:list
       (common-lisp:cons "dataTransferApi"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          salesforce-destination-properties))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (salesforce-metadata (:copier common-lisp:nil)
      (:conc-name "struct-shape-salesforce-metadata-"))
   (o-auth-scopes common-lisp:nil :type
    (common-lisp:or oauth-scope-list common-lisp:null))
   (data-transfer-apis common-lisp:nil :type
    (common-lisp:or salesforce-data-transfer-api-list common-lisp:null))
   (oauth2grant-types-supported common-lisp:nil :type
    (common-lisp:or oauth2grant-type-supported-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'salesforce-metadata 'make-salesforce-metadata))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input salesforce-metadata))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input salesforce-metadata))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'o-auth-scopes))
      (common-lisp:list
       (common-lisp:cons "oAuthScopes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-transfer-apis))
      (common-lisp:list
       (common-lisp:cons "dataTransferApis"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'oauth2grant-types-supported))
      (common-lisp:list
       (common-lisp:cons "oauth2GrantTypesSupported"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input salesforce-metadata))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (salesforce-source-properties (:copier common-lisp:nil)
      (:conc-name "struct-shape-salesforce-source-properties-"))
   (object (common-lisp:error ":object is required") :type
    (common-lisp:or object common-lisp:null))
   (enable-dynamic-field-update common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (include-deleted-records common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (data-transfer-api common-lisp:nil :type
    (common-lisp:or salesforce-data-transfer-api common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'salesforce-source-properties
                    'make-salesforce-source-properties))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          salesforce-source-properties))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          salesforce-source-properties))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'object))
      (common-lisp:list
       (common-lisp:cons "object"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'enable-dynamic-field-update))
      (common-lisp:list
       (common-lisp:cons "enableDynamicFieldUpdate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'include-deleted-records))
      (common-lisp:list
       (common-lisp:cons "includeDeletedRecords"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-transfer-api))
      (common-lisp:list
       (common-lisp:cons "dataTransferApi"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          salesforce-source-properties))
   common-lisp:nil))
(common-lisp:deftype schedule-expression () 'common-lisp:string)
(common-lisp:deftype schedule-frequency-type () 'common-lisp:string)
(common-lisp:deftype schedule-offset () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defstruct
     (scheduled-trigger-properties (:copier common-lisp:nil)
      (:conc-name "struct-shape-scheduled-trigger-properties-"))
   (schedule-expression (common-lisp:error ":scheduleexpression is required")
    :type (common-lisp:or schedule-expression common-lisp:null))
   (data-pull-mode common-lisp:nil :type
    (common-lisp:or data-pull-mode common-lisp:null))
   (schedule-start-time common-lisp:nil :type
    (common-lisp:or date common-lisp:null))
   (schedule-end-time common-lisp:nil :type
    (common-lisp:or date common-lisp:null))
   (timezone common-lisp:nil :type (common-lisp:or timezone common-lisp:null))
   (schedule-offset common-lisp:nil :type
    (common-lisp:or schedule-offset common-lisp:null))
   (first-execution-from common-lisp:nil :type
    (common-lisp:or date common-lisp:null))
   (flow-error-deactivation-threshold common-lisp:nil :type
    (common-lisp:or flow-error-deactivation-threshold common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'scheduled-trigger-properties
                    'make-scheduled-trigger-properties))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          scheduled-trigger-properties))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          scheduled-trigger-properties))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'schedule-expression))
      (common-lisp:list
       (common-lisp:cons "scheduleExpression"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-pull-mode))
      (common-lisp:list
       (common-lisp:cons "dataPullMode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'schedule-start-time))
      (common-lisp:list
       (common-lisp:cons "scheduleStartTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'schedule-end-time))
      (common-lisp:list
       (common-lisp:cons "scheduleEndTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'timezone))
      (common-lisp:list
       (common-lisp:cons "timezone"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'schedule-offset))
      (common-lisp:list
       (common-lisp:cons "scheduleOffset"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'first-execution-from))
      (common-lisp:list
       (common-lisp:cons "firstExecutionFrom"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'flow-error-deactivation-threshold))
      (common-lisp:list
       (common-lisp:cons "flowErrorDeactivationThreshold"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          scheduled-trigger-properties))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype scheduling-frequency-type-list ()
   '(trivial-types:proper-list schedule-frequency-type))
 (common-lisp:defun make-scheduling-frequency-type-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list schedule-frequency-type))
   aws-sdk/generator/shape::members))
(common-lisp:deftype secret-key () 'common-lisp:string)
(common-lisp:deftype service-now-connector-operator () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (service-now-connector-profile-credentials (:copier common-lisp:nil)
      (:conc-name "struct-shape-service-now-connector-profile-credentials-"))
   (username common-lisp:nil :type (common-lisp:or username common-lisp:null))
   (password common-lisp:nil :type (common-lisp:or password common-lisp:null))
   (o-auth2credentials common-lisp:nil :type
    (common-lisp:or oauth2credentials common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'service-now-connector-profile-credentials
                    'make-service-now-connector-profile-credentials))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          service-now-connector-profile-credentials))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          service-now-connector-profile-credentials))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'username))
      (common-lisp:list
       (common-lisp:cons "username"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'password))
      (common-lisp:list
       (common-lisp:cons "password"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'o-auth2credentials))
      (common-lisp:list
       (common-lisp:cons "oAuth2Credentials"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          service-now-connector-profile-credentials))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (service-now-connector-profile-properties (:copier common-lisp:nil)
      (:conc-name "struct-shape-service-now-connector-profile-properties-"))
   (instance-url (common-lisp:error ":instanceurl is required") :type
    (common-lisp:or instance-url common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'service-now-connector-profile-properties
                    'make-service-now-connector-profile-properties))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          service-now-connector-profile-properties))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          service-now-connector-profile-properties))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-url))
      (common-lisp:list
       (common-lisp:cons "instanceUrl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          service-now-connector-profile-properties))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (service-now-metadata (:copier common-lisp:nil)
      (:conc-name "struct-shape-service-now-metadata-")))
 (common-lisp:export
  (common-lisp:list 'service-now-metadata 'make-service-now-metadata))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input service-now-metadata))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input service-now-metadata))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input service-now-metadata))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (service-now-source-properties (:copier common-lisp:nil)
      (:conc-name "struct-shape-service-now-source-properties-"))
   (object (common-lisp:error ":object is required") :type
    (common-lisp:or object common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'service-now-source-properties
                    'make-service-now-source-properties))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          service-now-source-properties))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          service-now-source-properties))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'object))
      (common-lisp:list
       (common-lisp:cons "object"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          service-now-source-properties))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition service-quota-exceeded-exception
     (appflow-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       service-quota-exceeded-exception-message)))
 (common-lisp:export
  (common-lisp:list 'service-quota-exceeded-exception
                    'service-quota-exceeded-exception-message)))
(common-lisp:deftype singular-connector-operator () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (singular-connector-profile-credentials (:copier common-lisp:nil)
      (:conc-name "struct-shape-singular-connector-profile-credentials-"))
   (api-key (common-lisp:error ":apikey is required") :type
    (common-lisp:or api-key common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'singular-connector-profile-credentials
                    'make-singular-connector-profile-credentials))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          singular-connector-profile-credentials))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          singular-connector-profile-credentials))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'api-key))
      (common-lisp:list
       (common-lisp:cons "apiKey"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          singular-connector-profile-credentials))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (singular-connector-profile-properties (:copier common-lisp:nil)
      (:conc-name "struct-shape-singular-connector-profile-properties-")))
 (common-lisp:export
  (common-lisp:list 'singular-connector-profile-properties
                    'make-singular-connector-profile-properties))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          singular-connector-profile-properties))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          singular-connector-profile-properties))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          singular-connector-profile-properties))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (singular-metadata (:copier common-lisp:nil)
      (:conc-name "struct-shape-singular-metadata-")))
 (common-lisp:export
  (common-lisp:list 'singular-metadata 'make-singular-metadata))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input singular-metadata))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input singular-metadata))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input singular-metadata))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (singular-source-properties (:copier common-lisp:nil)
      (:conc-name "struct-shape-singular-source-properties-"))
   (object (common-lisp:error ":object is required") :type
    (common-lisp:or object common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'singular-source-properties
                    'make-singular-source-properties))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          singular-source-properties))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          singular-source-properties))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'object))
      (common-lisp:list
       (common-lisp:cons "object"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          singular-source-properties))
   common-lisp:nil))
(common-lisp:deftype slack-connector-operator () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (slack-connector-profile-credentials (:copier common-lisp:nil)
      (:conc-name "struct-shape-slack-connector-profile-credentials-"))
   (client-id (common-lisp:error ":clientid is required") :type
    (common-lisp:or client-id common-lisp:null))
   (client-secret (common-lisp:error ":clientsecret is required") :type
    (common-lisp:or client-secret common-lisp:null))
   (access-token common-lisp:nil :type
    (common-lisp:or access-token common-lisp:null))
   (o-auth-request common-lisp:nil :type
    (common-lisp:or connector-oauth-request common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'slack-connector-profile-credentials
                    'make-slack-connector-profile-credentials))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          slack-connector-profile-credentials))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          slack-connector-profile-credentials))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-id))
      (common-lisp:list
       (common-lisp:cons "clientId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-secret))
      (common-lisp:list
       (common-lisp:cons "clientSecret"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'access-token))
      (common-lisp:list
       (common-lisp:cons "accessToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'o-auth-request))
      (common-lisp:list
       (common-lisp:cons "oAuthRequest"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          slack-connector-profile-credentials))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (slack-connector-profile-properties (:copier common-lisp:nil)
      (:conc-name "struct-shape-slack-connector-profile-properties-"))
   (instance-url (common-lisp:error ":instanceurl is required") :type
    (common-lisp:or instance-url common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'slack-connector-profile-properties
                    'make-slack-connector-profile-properties))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          slack-connector-profile-properties))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          slack-connector-profile-properties))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-url))
      (common-lisp:list
       (common-lisp:cons "instanceUrl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          slack-connector-profile-properties))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (slack-metadata (:copier common-lisp:nil)
      (:conc-name "struct-shape-slack-metadata-"))
   (o-auth-scopes common-lisp:nil :type
    (common-lisp:or oauth-scope-list common-lisp:null)))
 (common-lisp:export (common-lisp:list 'slack-metadata 'make-slack-metadata))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input slack-metadata))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input slack-metadata))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'o-auth-scopes))
      (common-lisp:list
       (common-lisp:cons "oAuthScopes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input slack-metadata))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (slack-source-properties (:copier common-lisp:nil)
      (:conc-name "struct-shape-slack-source-properties-"))
   (object (common-lisp:error ":object is required") :type
    (common-lisp:or object common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'slack-source-properties 'make-slack-source-properties))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          slack-source-properties))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          slack-source-properties))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'object))
      (common-lisp:list
       (common-lisp:cons "object"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          slack-source-properties))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (snowflake-connector-profile-credentials (:copier common-lisp:nil)
      (:conc-name "struct-shape-snowflake-connector-profile-credentials-"))
   (username (common-lisp:error ":username is required") :type
    (common-lisp:or username common-lisp:null))
   (password (common-lisp:error ":password is required") :type
    (common-lisp:or password common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'snowflake-connector-profile-credentials
                    'make-snowflake-connector-profile-credentials))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          snowflake-connector-profile-credentials))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          snowflake-connector-profile-credentials))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'username))
      (common-lisp:list
       (common-lisp:cons "username"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'password))
      (common-lisp:list
       (common-lisp:cons "password"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          snowflake-connector-profile-credentials))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (snowflake-connector-profile-properties (:copier common-lisp:nil)
      (:conc-name "struct-shape-snowflake-connector-profile-properties-"))
   (warehouse (common-lisp:error ":warehouse is required") :type
    (common-lisp:or warehouse common-lisp:null))
   (stage (common-lisp:error ":stage is required") :type
    (common-lisp:or stage common-lisp:null))
   (bucket-name (common-lisp:error ":bucketname is required") :type
    (common-lisp:or bucket-name common-lisp:null))
   (bucket-prefix common-lisp:nil :type
    (common-lisp:or bucket-prefix common-lisp:null))
   (private-link-service-name common-lisp:nil :type
    (common-lisp:or private-link-service-name common-lisp:null))
   (account-name common-lisp:nil :type
    (common-lisp:or account-name common-lisp:null))
   (region common-lisp:nil :type (common-lisp:or region common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'snowflake-connector-profile-properties
                    'make-snowflake-connector-profile-properties))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          snowflake-connector-profile-properties))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          snowflake-connector-profile-properties))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'warehouse))
      (common-lisp:list
       (common-lisp:cons "warehouse"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stage))
      (common-lisp:list
       (common-lisp:cons "stage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bucket-name))
      (common-lisp:list
       (common-lisp:cons "bucketName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bucket-prefix))
      (common-lisp:list
       (common-lisp:cons "bucketPrefix"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'private-link-service-name))
      (common-lisp:list
       (common-lisp:cons "privateLinkServiceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-name))
      (common-lisp:list
       (common-lisp:cons "accountName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'region))
      (common-lisp:list
       (common-lisp:cons "region"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          snowflake-connector-profile-properties))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (snowflake-destination-properties (:copier common-lisp:nil)
      (:conc-name "struct-shape-snowflake-destination-properties-"))
   (object (common-lisp:error ":object is required") :type
    (common-lisp:or object common-lisp:null))
   (intermediate-bucket-name
    (common-lisp:error ":intermediatebucketname is required") :type
    (common-lisp:or bucket-name common-lisp:null))
   (bucket-prefix common-lisp:nil :type
    (common-lisp:or bucket-prefix common-lisp:null))
   (error-handling-config common-lisp:nil :type
    (common-lisp:or error-handling-config common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'snowflake-destination-properties
                    'make-snowflake-destination-properties))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          snowflake-destination-properties))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          snowflake-destination-properties))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'object))
      (common-lisp:list
       (common-lisp:cons "object"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'intermediate-bucket-name))
      (common-lisp:list
       (common-lisp:cons "intermediateBucketName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bucket-prefix))
      (common-lisp:list
       (common-lisp:cons "bucketPrefix"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'error-handling-config))
      (common-lisp:list
       (common-lisp:cons "errorHandlingConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          snowflake-destination-properties))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (snowflake-metadata (:copier common-lisp:nil)
      (:conc-name "struct-shape-snowflake-metadata-"))
   (supported-regions common-lisp:nil :type
    (common-lisp:or region-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'snowflake-metadata 'make-snowflake-metadata))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input snowflake-metadata))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input snowflake-metadata))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'supported-regions))
      (common-lisp:list
       (common-lisp:cons "supportedRegions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input snowflake-metadata))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (source-connector-properties (:copier common-lisp:nil)
      (:conc-name "struct-shape-source-connector-properties-"))
   (amplitude common-lisp:nil :type
    (common-lisp:or amplitude-source-properties common-lisp:null))
   (datadog common-lisp:nil :type
    (common-lisp:or datadog-source-properties common-lisp:null))
   (dynatrace common-lisp:nil :type
    (common-lisp:or dynatrace-source-properties common-lisp:null))
   (google-analytics common-lisp:nil :type
    (common-lisp:or google-analytics-source-properties common-lisp:null))
   (infor-nexus common-lisp:nil :type
    (common-lisp:or infor-nexus-source-properties common-lisp:null))
   (marketo common-lisp:nil :type
    (common-lisp:or marketo-source-properties common-lisp:null))
   (s3 common-lisp:nil :type
    (common-lisp:or s3source-properties common-lisp:null))
   (salesforce common-lisp:nil :type
    (common-lisp:or salesforce-source-properties common-lisp:null))
   (service-now common-lisp:nil :type
    (common-lisp:or service-now-source-properties common-lisp:null))
   (singular common-lisp:nil :type
    (common-lisp:or singular-source-properties common-lisp:null))
   (slack common-lisp:nil :type
    (common-lisp:or slack-source-properties common-lisp:null))
   (trendmicro common-lisp:nil :type
    (common-lisp:or trendmicro-source-properties common-lisp:null))
   (veeva common-lisp:nil :type
    (common-lisp:or veeva-source-properties common-lisp:null))
   (zendesk common-lisp:nil :type
    (common-lisp:or zendesk-source-properties common-lisp:null))
   (sapodata common-lisp:nil :type
    (common-lisp:or sapodata-source-properties common-lisp:null))
   (custom-connector common-lisp:nil :type
    (common-lisp:or custom-connector-source-properties common-lisp:null))
   (pardot common-lisp:nil :type
    (common-lisp:or pardot-source-properties common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'source-connector-properties
                    'make-source-connector-properties))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          source-connector-properties))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          source-connector-properties))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'amplitude))
      (common-lisp:list
       (common-lisp:cons "Amplitude"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'datadog))
      (common-lisp:list
       (common-lisp:cons "Datadog"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dynatrace))
      (common-lisp:list
       (common-lisp:cons "Dynatrace"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'google-analytics))
      (common-lisp:list
       (common-lisp:cons "GoogleAnalytics"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'infor-nexus))
      (common-lisp:list
       (common-lisp:cons "InforNexus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marketo))
      (common-lisp:list
       (common-lisp:cons "Marketo"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3))
      (common-lisp:list
       (common-lisp:cons "S3"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'salesforce))
      (common-lisp:list
       (common-lisp:cons "Salesforce"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service-now))
      (common-lisp:list
       (common-lisp:cons "ServiceNow"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'singular))
      (common-lisp:list
       (common-lisp:cons "Singular"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'slack))
      (common-lisp:list
       (common-lisp:cons "Slack"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'trendmicro))
      (common-lisp:list
       (common-lisp:cons "Trendmicro"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'veeva))
      (common-lisp:list
       (common-lisp:cons "Veeva"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'zendesk))
      (common-lisp:list
       (common-lisp:cons "Zendesk"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sapodata))
      (common-lisp:list
       (common-lisp:cons "SAPOData"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'custom-connector))
      (common-lisp:list
       (common-lisp:cons "CustomConnector"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pardot))
      (common-lisp:list
       (common-lisp:cons "Pardot"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          source-connector-properties))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (source-field-properties (:copier common-lisp:nil)
      (:conc-name "struct-shape-source-field-properties-"))
   (is-retrievable common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (is-queryable common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (is-timestamp-field-for-incremental-queries common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'source-field-properties 'make-source-field-properties))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          source-field-properties))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          source-field-properties))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'is-retrievable))
      (common-lisp:list
       (common-lisp:cons "isRetrievable"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'is-queryable))
      (common-lisp:list
       (common-lisp:cons "isQueryable"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'is-timestamp-field-for-incremental-queries))
      (common-lisp:list
       (common-lisp:cons "isTimestampFieldForIncrementalQueries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          source-field-properties))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype source-fields () '(trivial-types:proper-list string))
 (common-lisp:defun make-source-fields
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list string))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (source-flow-config (:copier common-lisp:nil)
      (:conc-name "struct-shape-source-flow-config-"))
   (connector-type (common-lisp:error ":connectortype is required") :type
    (common-lisp:or connector-type common-lisp:null))
   (api-version common-lisp:nil :type
    (common-lisp:or api-version common-lisp:null))
   (connector-profile-name common-lisp:nil :type
    (common-lisp:or connector-profile-name common-lisp:null))
   (source-connector-properties
    (common-lisp:error ":sourceconnectorproperties is required") :type
    (common-lisp:or source-connector-properties common-lisp:null))
   (incremental-pull-config common-lisp:nil :type
    (common-lisp:or incremental-pull-config common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'source-flow-config 'make-source-flow-config))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input source-flow-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input source-flow-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'connector-type))
      (common-lisp:list
       (common-lisp:cons "connectorType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'api-version))
      (common-lisp:list
       (common-lisp:cons "apiVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'connector-profile-name))
      (common-lisp:list
       (common-lisp:cons "connectorProfileName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'source-connector-properties))
      (common-lisp:list
       (common-lisp:cons "sourceConnectorProperties"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'incremental-pull-config))
      (common-lisp:list
       (common-lisp:cons "incrementalPullConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input source-flow-config))
   common-lisp:nil))
(common-lisp:deftype stage () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (start-flow-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-start-flow-request-"))
   (flow-name (common-lisp:error ":flowname is required") :type
    (common-lisp:or flow-name common-lisp:null))
   (client-token common-lisp:nil :type
    (common-lisp:or client-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'start-flow-request 'make-start-flow-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input start-flow-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input start-flow-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'flow-name))
      (common-lisp:list
       (common-lisp:cons "flowName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "clientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input start-flow-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (start-flow-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-start-flow-response-"))
   (flow-arn common-lisp:nil :type (common-lisp:or flow-arn common-lisp:null))
   (flow-status common-lisp:nil :type
    (common-lisp:or flow-status common-lisp:null))
   (execution-id common-lisp:nil :type
    (common-lisp:or execution-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'start-flow-response 'make-start-flow-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input start-flow-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input start-flow-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'flow-arn))
      (common-lisp:list
       (common-lisp:cons "flowArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'flow-status))
      (common-lisp:list
       (common-lisp:cons "flowStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'execution-id))
      (common-lisp:list
       (common-lisp:cons "executionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input start-flow-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (stop-flow-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-stop-flow-request-"))
   (flow-name (common-lisp:error ":flowname is required") :type
    (common-lisp:or flow-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'stop-flow-request 'make-stop-flow-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input stop-flow-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input stop-flow-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'flow-name))
      (common-lisp:list
       (common-lisp:cons "flowName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input stop-flow-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (stop-flow-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-stop-flow-response-"))
   (flow-arn common-lisp:nil :type (common-lisp:or flow-arn common-lisp:null))
   (flow-status common-lisp:nil :type
    (common-lisp:or flow-status common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'stop-flow-response 'make-stop-flow-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input stop-flow-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input stop-flow-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'flow-arn))
      (common-lisp:list
       (common-lisp:cons "flowArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'flow-status))
      (common-lisp:list
       (common-lisp:cons "flowStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input stop-flow-response))
   common-lisp:nil))
(common-lisp:deftype string () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (success-response-handling-config (:copier common-lisp:nil)
      (:conc-name "struct-shape-success-response-handling-config-"))
   (bucket-prefix common-lisp:nil :type
    (common-lisp:or bucket-prefix common-lisp:null))
   (bucket-name common-lisp:nil :type
    (common-lisp:or bucket-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'success-response-handling-config
                    'make-success-response-handling-config))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          success-response-handling-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          success-response-handling-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bucket-prefix))
      (common-lisp:list
       (common-lisp:cons "bucketPrefix"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bucket-name))
      (common-lisp:list
       (common-lisp:cons "bucketName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          success-response-handling-config))
   common-lisp:nil))
(common-lisp:deftype supported-api-version () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype supported-api-version-list ()
   '(trivial-types:proper-list supported-api-version))
 (common-lisp:defun make-supported-api-version-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list supported-api-version))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype supported-data-transfer-apis ()
   '(trivial-types:proper-list data-transfer-api))
 (common-lisp:defun make-supported-data-transfer-apis
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list data-transfer-api))
   aws-sdk/generator/shape::members))
(common-lisp:deftype supported-data-transfer-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype supported-data-transfer-type-list ()
   '(trivial-types:proper-list supported-data-transfer-type))
 (common-lisp:defun make-supported-data-transfer-type-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            supported-data-transfer-type))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (supported-field-type-details (:copier common-lisp:nil)
      (:conc-name "struct-shape-supported-field-type-details-"))
   (v1 (common-lisp:error ":v1 is required") :type
    (common-lisp:or field-type-details common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'supported-field-type-details
                    'make-supported-field-type-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          supported-field-type-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          supported-field-type-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'v1))
      (common-lisp:list
       (common-lisp:cons "v1"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          supported-field-type-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype supported-operator-list ()
   '(trivial-types:proper-list operators))
 (common-lisp:defun make-supported-operator-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list operators))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype supported-value-list ()
   '(trivial-types:proper-list value))
 (common-lisp:defun make-supported-value-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list value))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype supported-write-operation-list ()
   '(trivial-types:proper-list write-operation-type))
 (common-lisp:defun make-supported-write-operation-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list write-operation-type))
   aws-sdk/generator/shape::members))
(common-lisp:deftype tag-key () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype tag-key-list () '(trivial-types:proper-list tag-key))
 (common-lisp:defun make-tag-key-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list tag-key))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype tag-map () 'common-lisp:hash-table)
 (common-lisp:defun make-tag-map (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:progn
 (common-lisp:defstruct
     (tag-resource-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-tag-resource-request-"))
   (resource-arn (common-lisp:error ":resourcearn is required") :type
    (common-lisp:or arn common-lisp:null))
   (tags (common-lisp:error ":tags is required") :type
    (common-lisp:or tag-map common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'tag-resource-request 'make-tag-resource-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input tag-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input tag-resource-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input tag-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (tag-resource-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-tag-resource-response-")))
 (common-lisp:export
  (common-lisp:list 'tag-resource-response 'make-tag-resource-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          tag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          tag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          tag-resource-response))
   common-lisp:nil))
(common-lisp:deftype tag-value () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (task (:copier common-lisp:nil) (:conc-name "struct-shape-task-"))
   (source-fields (common-lisp:error ":sourcefields is required") :type
    (common-lisp:or source-fields common-lisp:null))
   (connector-operator common-lisp:nil :type
    (common-lisp:or connector-operator common-lisp:null))
   (destination-field common-lisp:nil :type
    (common-lisp:or destination-field common-lisp:null))
   (task-type (common-lisp:error ":tasktype is required") :type
    (common-lisp:or task-type common-lisp:null))
   (task-properties common-lisp:nil :type
    (common-lisp:or task-properties-map common-lisp:null)))
 (common-lisp:export (common-lisp:list 'task 'make-task))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input task))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input task))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-fields))
      (common-lisp:list
       (common-lisp:cons "sourceFields"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'connector-operator))
      (common-lisp:list
       (common-lisp:cons "connectorOperator"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'destination-field))
      (common-lisp:list
       (common-lisp:cons "destinationField"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'task-type))
      (common-lisp:list
       (common-lisp:cons "taskType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'task-properties))
      (common-lisp:list
       (common-lisp:cons "taskProperties"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input task))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype task-properties-map () 'common-lisp:hash-table)
 (common-lisp:defun make-task-properties-map
                    (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:deftype task-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype tasks () '(trivial-types:proper-list task))
 (common-lisp:defun make-tasks
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list task))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition throttling-exception
     (appflow-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       throttling-exception-message)))
 (common-lisp:export
  (common-lisp:list 'throttling-exception 'throttling-exception-message)))
(common-lisp:deftype timezone () 'common-lisp:string)
(common-lisp:deftype token-url () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype token-url-custom-properties () 'common-lisp:hash-table)
 (common-lisp:defun make-token-url-custom-properties
                    (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:progn
 (common-lisp:deftype token-url-list () '(trivial-types:proper-list token-url))
 (common-lisp:defun make-token-url-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list token-url))
   aws-sdk/generator/shape::members))
(common-lisp:deftype trendmicro-connector-operator () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (trendmicro-connector-profile-credentials (:copier common-lisp:nil)
      (:conc-name "struct-shape-trendmicro-connector-profile-credentials-"))
   (api-secret-key (common-lisp:error ":apisecretkey is required") :type
    (common-lisp:or api-secret-key common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'trendmicro-connector-profile-credentials
                    'make-trendmicro-connector-profile-credentials))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          trendmicro-connector-profile-credentials))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          trendmicro-connector-profile-credentials))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'api-secret-key))
      (common-lisp:list
       (common-lisp:cons "apiSecretKey"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          trendmicro-connector-profile-credentials))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (trendmicro-connector-profile-properties (:copier common-lisp:nil)
      (:conc-name "struct-shape-trendmicro-connector-profile-properties-")))
 (common-lisp:export
  (common-lisp:list 'trendmicro-connector-profile-properties
                    'make-trendmicro-connector-profile-properties))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          trendmicro-connector-profile-properties))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          trendmicro-connector-profile-properties))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          trendmicro-connector-profile-properties))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (trendmicro-metadata (:copier common-lisp:nil)
      (:conc-name "struct-shape-trendmicro-metadata-")))
 (common-lisp:export
  (common-lisp:list 'trendmicro-metadata 'make-trendmicro-metadata))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input trendmicro-metadata))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input trendmicro-metadata))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input trendmicro-metadata))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (trendmicro-source-properties (:copier common-lisp:nil)
      (:conc-name "struct-shape-trendmicro-source-properties-"))
   (object (common-lisp:error ":object is required") :type
    (common-lisp:or object common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'trendmicro-source-properties
                    'make-trendmicro-source-properties))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          trendmicro-source-properties))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          trendmicro-source-properties))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'object))
      (common-lisp:list
       (common-lisp:cons "object"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          trendmicro-source-properties))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (trigger-config (:copier common-lisp:nil)
      (:conc-name "struct-shape-trigger-config-"))
   (trigger-type (common-lisp:error ":triggertype is required") :type
    (common-lisp:or trigger-type common-lisp:null))
   (trigger-properties common-lisp:nil :type
    (common-lisp:or trigger-properties common-lisp:null)))
 (common-lisp:export (common-lisp:list 'trigger-config 'make-trigger-config))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input trigger-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input trigger-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'trigger-type))
      (common-lisp:list
       (common-lisp:cons "triggerType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'trigger-properties))
      (common-lisp:list
       (common-lisp:cons "triggerProperties"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input trigger-config))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (trigger-properties (:copier common-lisp:nil)
      (:conc-name "struct-shape-trigger-properties-"))
   (scheduled common-lisp:nil :type
    (common-lisp:or scheduled-trigger-properties common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'trigger-properties 'make-trigger-properties))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input trigger-properties))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input trigger-properties))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'scheduled))
      (common-lisp:list
       (common-lisp:cons "Scheduled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input trigger-properties))
   common-lisp:nil))
(common-lisp:deftype trigger-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype trigger-type-list ()
   '(trivial-types:proper-list trigger-type))
 (common-lisp:defun make-trigger-type-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list trigger-type))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (unregister-connector-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-unregister-connector-request-"))
   (connector-label (common-lisp:error ":connectorlabel is required") :type
    (common-lisp:or connector-label common-lisp:null))
   (force-delete common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'unregister-connector-request
                    'make-unregister-connector-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          unregister-connector-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          unregister-connector-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'connector-label))
      (common-lisp:list
       (common-lisp:cons "connectorLabel"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'force-delete))
      (common-lisp:list
       (common-lisp:cons "forceDelete"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          unregister-connector-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (unregister-connector-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-unregister-connector-response-")))
 (common-lisp:export
  (common-lisp:list 'unregister-connector-response
                    'make-unregister-connector-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          unregister-connector-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          unregister-connector-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          unregister-connector-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition unsupported-operation-exception
     (appflow-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       unsupported-operation-exception-message)))
 (common-lisp:export
  (common-lisp:list 'unsupported-operation-exception
                    'unsupported-operation-exception-message)))
(common-lisp:progn
 (common-lisp:defstruct
     (untag-resource-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-untag-resource-request-"))
   (resource-arn (common-lisp:error ":resourcearn is required") :type
    (common-lisp:or arn common-lisp:null))
   (tag-keys (common-lisp:error ":tagkeys is required") :type
    (common-lisp:or tag-key-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'untag-resource-request 'make-untag-resource-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (untag-resource-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-untag-resource-response-")))
 (common-lisp:export
  (common-lisp:list 'untag-resource-response 'make-untag-resource-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-connector-profile-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-connector-profile-request-"))
   (connector-profile-name
    (common-lisp:error ":connectorprofilename is required") :type
    (common-lisp:or connector-profile-name common-lisp:null))
   (connection-mode (common-lisp:error ":connectionmode is required") :type
    (common-lisp:or connection-mode common-lisp:null))
   (connector-profile-config
    (common-lisp:error ":connectorprofileconfig is required") :type
    (common-lisp:or connector-profile-config common-lisp:null))
   (client-token common-lisp:nil :type
    (common-lisp:or client-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-connector-profile-request
                    'make-update-connector-profile-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-connector-profile-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-connector-profile-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'connector-profile-name))
      (common-lisp:list
       (common-lisp:cons "connectorProfileName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'connection-mode))
      (common-lisp:list
       (common-lisp:cons "connectionMode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'connector-profile-config))
      (common-lisp:list
       (common-lisp:cons "connectorProfileConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "clientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-connector-profile-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-connector-profile-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-connector-profile-response-"))
   (connector-profile-arn common-lisp:nil :type
    (common-lisp:or connector-profile-arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-connector-profile-response
                    'make-update-connector-profile-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-connector-profile-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-connector-profile-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'connector-profile-arn))
      (common-lisp:list
       (common-lisp:cons "connectorProfileArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-connector-profile-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-connector-registration-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-connector-registration-request-"))
   (connector-label (common-lisp:error ":connectorlabel is required") :type
    (common-lisp:or connector-label common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or description common-lisp:null))
   (connector-provisioning-config common-lisp:nil :type
    (common-lisp:or connector-provisioning-config common-lisp:null))
   (client-token common-lisp:nil :type
    (common-lisp:or client-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-connector-registration-request
                    'make-update-connector-registration-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-connector-registration-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-connector-registration-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'connector-label))
      (common-lisp:list
       (common-lisp:cons "connectorLabel"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'connector-provisioning-config))
      (common-lisp:list
       (common-lisp:cons "connectorProvisioningConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "clientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-connector-registration-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-connector-registration-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-connector-registration-response-"))
   (connector-arn common-lisp:nil :type (common-lisp:or arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-connector-registration-response
                    'make-update-connector-registration-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-connector-registration-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-connector-registration-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'connector-arn))
      (common-lisp:list
       (common-lisp:cons "connectorArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-connector-registration-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-flow-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-flow-request-"))
   (flow-name (common-lisp:error ":flowname is required") :type
    (common-lisp:or flow-name common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or flow-description common-lisp:null))
   (trigger-config (common-lisp:error ":triggerconfig is required") :type
    (common-lisp:or trigger-config common-lisp:null))
   (source-flow-config (common-lisp:error ":sourceflowconfig is required")
    :type (common-lisp:or source-flow-config common-lisp:null))
   (destination-flow-config-list
    (common-lisp:error ":destinationflowconfiglist is required") :type
    (common-lisp:or destination-flow-config-list common-lisp:null))
   (tasks (common-lisp:error ":tasks is required") :type
    (common-lisp:or tasks common-lisp:null))
   (metadata-catalog-config common-lisp:nil :type
    (common-lisp:or metadata-catalog-config common-lisp:null))
   (client-token common-lisp:nil :type
    (common-lisp:or client-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-flow-request 'make-update-flow-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input update-flow-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input update-flow-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'flow-name))
      (common-lisp:list
       (common-lisp:cons "flowName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'trigger-config))
      (common-lisp:list
       (common-lisp:cons "triggerConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-flow-config))
      (common-lisp:list
       (common-lisp:cons "sourceFlowConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'destination-flow-config-list))
      (common-lisp:list
       (common-lisp:cons "destinationFlowConfigList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tasks))
      (common-lisp:list
       (common-lisp:cons "tasks"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'metadata-catalog-config))
      (common-lisp:list
       (common-lisp:cons "metadataCatalogConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "clientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input update-flow-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-flow-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-flow-response-"))
   (flow-status common-lisp:nil :type
    (common-lisp:or flow-status common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-flow-response 'make-update-flow-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input update-flow-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input update-flow-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'flow-status))
      (common-lisp:list
       (common-lisp:cons "flowStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input update-flow-response))
   common-lisp:nil))
(common-lisp:deftype updated-by () 'common-lisp:string)
(common-lisp:deftype upsolver-bucket-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (upsolver-destination-properties (:copier common-lisp:nil)
      (:conc-name "struct-shape-upsolver-destination-properties-"))
   (bucket-name (common-lisp:error ":bucketname is required") :type
    (common-lisp:or upsolver-bucket-name common-lisp:null))
   (bucket-prefix common-lisp:nil :type
    (common-lisp:or bucket-prefix common-lisp:null))
   (s3output-format-config
    (common-lisp:error ":s3outputformatconfig is required") :type
    (common-lisp:or upsolver-s3output-format-config common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'upsolver-destination-properties
                    'make-upsolver-destination-properties))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          upsolver-destination-properties))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          upsolver-destination-properties))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bucket-name))
      (common-lisp:list
       (common-lisp:cons "bucketName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bucket-prefix))
      (common-lisp:list
       (common-lisp:cons "bucketPrefix"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           's3output-format-config))
      (common-lisp:list
       (common-lisp:cons "s3OutputFormatConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          upsolver-destination-properties))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (upsolver-metadata (:copier common-lisp:nil)
      (:conc-name "struct-shape-upsolver-metadata-")))
 (common-lisp:export
  (common-lisp:list 'upsolver-metadata 'make-upsolver-metadata))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input upsolver-metadata))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input upsolver-metadata))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input upsolver-metadata))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (upsolver-s3output-format-config (:copier common-lisp:nil)
      (:conc-name "struct-shape-upsolver-s3output-format-config-"))
   (file-type common-lisp:nil :type
    (common-lisp:or file-type common-lisp:null))
   (prefix-config (common-lisp:error ":prefixconfig is required") :type
    (common-lisp:or prefix-config common-lisp:null))
   (aggregation-config common-lisp:nil :type
    (common-lisp:or aggregation-config common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'upsolver-s3output-format-config
                    'make-upsolver-s3output-format-config))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          upsolver-s3output-format-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          upsolver-s3output-format-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'file-type))
      (common-lisp:list
       (common-lisp:cons "fileType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'prefix-config))
      (common-lisp:list
       (common-lisp:cons "prefixConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'aggregation-config))
      (common-lisp:list
       (common-lisp:cons "aggregationConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          upsolver-s3output-format-config))
   common-lisp:nil))
(common-lisp:deftype username () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition validation-exception
     (appflow-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       validation-exception-message)))
 (common-lisp:export
  (common-lisp:list 'validation-exception 'validation-exception-message)))
(common-lisp:deftype value () 'common-lisp:string)
(common-lisp:deftype veeva-connector-operator () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (veeva-connector-profile-credentials (:copier common-lisp:nil)
      (:conc-name "struct-shape-veeva-connector-profile-credentials-"))
   (username (common-lisp:error ":username is required") :type
    (common-lisp:or username common-lisp:null))
   (password (common-lisp:error ":password is required") :type
    (common-lisp:or password common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'veeva-connector-profile-credentials
                    'make-veeva-connector-profile-credentials))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          veeva-connector-profile-credentials))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          veeva-connector-profile-credentials))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'username))
      (common-lisp:list
       (common-lisp:cons "username"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'password))
      (common-lisp:list
       (common-lisp:cons "password"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          veeva-connector-profile-credentials))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (veeva-connector-profile-properties (:copier common-lisp:nil)
      (:conc-name "struct-shape-veeva-connector-profile-properties-"))
   (instance-url (common-lisp:error ":instanceurl is required") :type
    (common-lisp:or instance-url common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'veeva-connector-profile-properties
                    'make-veeva-connector-profile-properties))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          veeva-connector-profile-properties))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          veeva-connector-profile-properties))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-url))
      (common-lisp:list
       (common-lisp:cons "instanceUrl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          veeva-connector-profile-properties))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (veeva-metadata (:copier common-lisp:nil)
      (:conc-name "struct-shape-veeva-metadata-")))
 (common-lisp:export (common-lisp:list 'veeva-metadata 'make-veeva-metadata))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input veeva-metadata))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input veeva-metadata))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input veeva-metadata))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (veeva-source-properties (:copier common-lisp:nil)
      (:conc-name "struct-shape-veeva-source-properties-"))
   (object (common-lisp:error ":object is required") :type
    (common-lisp:or object common-lisp:null))
   (document-type common-lisp:nil :type
    (common-lisp:or document-type common-lisp:null))
   (include-source-files common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (include-renditions common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (include-all-versions common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'veeva-source-properties 'make-veeva-source-properties))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          veeva-source-properties))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          veeva-source-properties))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'object))
      (common-lisp:list
       (common-lisp:cons "object"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'document-type))
      (common-lisp:list
       (common-lisp:cons "documentType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'include-source-files))
      (common-lisp:list
       (common-lisp:cons "includeSourceFiles"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'include-renditions))
      (common-lisp:list
       (common-lisp:cons "includeRenditions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'include-all-versions))
      (common-lisp:list
       (common-lisp:cons "includeAllVersions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          veeva-source-properties))
   common-lisp:nil))
(common-lisp:deftype warehouse () 'common-lisp:string)
(common-lisp:deftype workgroup-name () 'common-lisp:string)
(common-lisp:deftype write-operation-type () 'common-lisp:string)
(common-lisp:deftype zendesk-connector-operator () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (zendesk-connector-profile-credentials (:copier common-lisp:nil)
      (:conc-name "struct-shape-zendesk-connector-profile-credentials-"))
   (client-id (common-lisp:error ":clientid is required") :type
    (common-lisp:or client-id common-lisp:null))
   (client-secret (common-lisp:error ":clientsecret is required") :type
    (common-lisp:or client-secret common-lisp:null))
   (access-token common-lisp:nil :type
    (common-lisp:or access-token common-lisp:null))
   (o-auth-request common-lisp:nil :type
    (common-lisp:or connector-oauth-request common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'zendesk-connector-profile-credentials
                    'make-zendesk-connector-profile-credentials))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          zendesk-connector-profile-credentials))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          zendesk-connector-profile-credentials))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-id))
      (common-lisp:list
       (common-lisp:cons "clientId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-secret))
      (common-lisp:list
       (common-lisp:cons "clientSecret"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'access-token))
      (common-lisp:list
       (common-lisp:cons "accessToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'o-auth-request))
      (common-lisp:list
       (common-lisp:cons "oAuthRequest"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          zendesk-connector-profile-credentials))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (zendesk-connector-profile-properties (:copier common-lisp:nil)
      (:conc-name "struct-shape-zendesk-connector-profile-properties-"))
   (instance-url (common-lisp:error ":instanceurl is required") :type
    (common-lisp:or instance-url common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'zendesk-connector-profile-properties
                    'make-zendesk-connector-profile-properties))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          zendesk-connector-profile-properties))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          zendesk-connector-profile-properties))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-url))
      (common-lisp:list
       (common-lisp:cons "instanceUrl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          zendesk-connector-profile-properties))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (zendesk-destination-properties (:copier common-lisp:nil)
      (:conc-name "struct-shape-zendesk-destination-properties-"))
   (object (common-lisp:error ":object is required") :type
    (common-lisp:or object common-lisp:null))
   (id-field-names common-lisp:nil :type
    (common-lisp:or id-field-name-list common-lisp:null))
   (error-handling-config common-lisp:nil :type
    (common-lisp:or error-handling-config common-lisp:null))
   (write-operation-type common-lisp:nil :type
    (common-lisp:or write-operation-type common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'zendesk-destination-properties
                    'make-zendesk-destination-properties))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          zendesk-destination-properties))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          zendesk-destination-properties))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'object))
      (common-lisp:list
       (common-lisp:cons "object"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id-field-names))
      (common-lisp:list
       (common-lisp:cons "idFieldNames"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'error-handling-config))
      (common-lisp:list
       (common-lisp:cons "errorHandlingConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'write-operation-type))
      (common-lisp:list
       (common-lisp:cons "writeOperationType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          zendesk-destination-properties))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (zendesk-metadata (:copier common-lisp:nil)
      (:conc-name "struct-shape-zendesk-metadata-"))
   (o-auth-scopes common-lisp:nil :type
    (common-lisp:or oauth-scope-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'zendesk-metadata 'make-zendesk-metadata))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input zendesk-metadata))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input zendesk-metadata))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'o-auth-scopes))
      (common-lisp:list
       (common-lisp:cons "oAuthScopes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input zendesk-metadata))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (zendesk-source-properties (:copier common-lisp:nil)
      (:conc-name "struct-shape-zendesk-source-properties-"))
   (object (common-lisp:error ":object is required") :type
    (common-lisp:or object common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'zendesk-source-properties
                    'make-zendesk-source-properties))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          zendesk-source-properties))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          zendesk-source-properties))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'object))
      (common-lisp:list
       (common-lisp:cons "object"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          zendesk-source-properties))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defun cancel-flow-executions
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key flow-name execution-ids)
   (common-lisp:declare (common-lisp:ignorable flow-name execution-ids))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-cancel-flow-executions-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'appflow-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/cancel-flow-executions"
                                                        "CancelFlowExecutions"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'cancel-flow-executions))
(common-lisp:progn
 (common-lisp:defun create-connector-profile
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key connector-profile-name kms-arn
                     connector-type connector-label connection-mode
                     connector-profile-config client-token)
   (common-lisp:declare
    (common-lisp:ignorable connector-profile-name kms-arn connector-type
     connector-label connection-mode connector-profile-config client-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-connector-profile-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'appflow-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/create-connector-profile"
                                                        "CreateConnectorProfile"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-connector-profile))
(common-lisp:progn
 (common-lisp:defun create-flow
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key flow-name description kms-arn
                     trigger-config source-flow-config
                     destination-flow-config-list tasks tags
                     metadata-catalog-config client-token)
   (common-lisp:declare
    (common-lisp:ignorable flow-name description kms-arn trigger-config
     source-flow-config destination-flow-config-list tasks tags
     metadata-catalog-config client-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-flow-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'appflow-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/create-flow"
                                                        "CreateFlow"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-flow))
(common-lisp:progn
 (common-lisp:defun delete-connector-profile
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key connector-profile-name force-delete)
   (common-lisp:declare
    (common-lisp:ignorable connector-profile-name force-delete))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-connector-profile-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'appflow-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/delete-connector-profile"
                                                        "DeleteConnectorProfile"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-connector-profile))
(common-lisp:progn
 (common-lisp:defun delete-flow
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key flow-name force-delete)
   (common-lisp:declare (common-lisp:ignorable flow-name force-delete))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-flow-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'appflow-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/delete-flow"
                                                        "DeleteFlow"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-flow))
(common-lisp:progn
 (common-lisp:defun describe-connector
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key connector-type connector-label)
   (common-lisp:declare (common-lisp:ignorable connector-type connector-label))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-connector-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'appflow-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/describe-connector"
                                                        "DescribeConnector"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-connector))
(common-lisp:progn
 (common-lisp:defun describe-connector-entity
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key connector-entity-name connector-type
                     connector-profile-name api-version)
   (common-lisp:declare
    (common-lisp:ignorable connector-entity-name connector-type
     connector-profile-name api-version))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-connector-entity-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'appflow-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/describe-connector-entity"
                                                        "DescribeConnectorEntity"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-connector-entity))
(common-lisp:progn
 (common-lisp:defun describe-connector-profiles
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key connector-profile-names connector-type
                     connector-label max-results next-token)
   (common-lisp:declare
    (common-lisp:ignorable connector-profile-names connector-type
     connector-label max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-connector-profiles-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'appflow-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/describe-connector-profiles"
                                                        "DescribeConnectorProfiles"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-connector-profiles))
(common-lisp:progn
 (common-lisp:defun describe-connectors
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key connector-types max-results next-token)
   (common-lisp:declare
    (common-lisp:ignorable connector-types max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-connectors-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'appflow-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/describe-connectors"
                                                        "DescribeConnectors"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-connectors))
(common-lisp:progn
 (common-lisp:defun describe-flow
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key flow-name)
   (common-lisp:declare (common-lisp:ignorable flow-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-flow-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'appflow-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/describe-flow"
                                                        "DescribeFlow"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-flow))
(common-lisp:progn
 (common-lisp:defun describe-flow-execution-records
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key flow-name max-results next-token)
   (common-lisp:declare
    (common-lisp:ignorable flow-name max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-flow-execution-records-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'appflow-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/describe-flow-execution-records"
                                                        "DescribeFlowExecutionRecords"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-flow-execution-records))
(common-lisp:progn
 (common-lisp:defun list-connector-entities
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key connector-profile-name connector-type
                     entities-path api-version max-results next-token)
   (common-lisp:declare
    (common-lisp:ignorable connector-profile-name connector-type entities-path
     api-version max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-connector-entities-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'appflow-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/list-connector-entities"
                                                        "ListConnectorEntities"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-connector-entities))
(common-lisp:progn
 (common-lisp:defun list-connectors
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key max-results next-token)
   (common-lisp:declare (common-lisp:ignorable max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-connectors-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'appflow-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/list-connectors"
                                                        "ListConnectors"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-connectors))
(common-lisp:progn
 (common-lisp:defun list-flows
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key max-results next-token)
   (common-lisp:declare (common-lisp:ignorable max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-flows-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'appflow-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/list-flows"
                                                        "ListFlows"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-flows))
(common-lisp:progn
 (common-lisp:defun list-tags-for-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn)
   (common-lisp:declare (common-lisp:ignorable resource-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-tags-for-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'appflow-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/tags/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'resource-arn))))
                                                        "ListTagsForResource"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-tags-for-resource))
(common-lisp:progn
 (common-lisp:defun register-connector
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key connector-label description
                     connector-provisioning-type connector-provisioning-config
                     client-token)
   (common-lisp:declare
    (common-lisp:ignorable connector-label description
     connector-provisioning-type connector-provisioning-config client-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-register-connector-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'appflow-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/register-connector"
                                                        "RegisterConnector"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'register-connector))
(common-lisp:progn
 (common-lisp:defun reset-connector-metadata-cache
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key connector-profile-name connector-type
                     connector-entity-name entities-path api-version)
   (common-lisp:declare
    (common-lisp:ignorable connector-profile-name connector-type
     connector-entity-name entities-path api-version))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-reset-connector-metadata-cache-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'appflow-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/reset-connector-metadata-cache"
                                                        "ResetConnectorMetadataCache"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'reset-connector-metadata-cache))
(common-lisp:progn
 (common-lisp:defun start-flow
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key flow-name client-token)
   (common-lisp:declare (common-lisp:ignorable flow-name client-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-start-flow-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'appflow-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/start-flow"
                                                        "StartFlow"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'start-flow))
(common-lisp:progn
 (common-lisp:defun stop-flow
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key flow-name)
   (common-lisp:declare (common-lisp:ignorable flow-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-stop-flow-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'appflow-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/stop-flow"
                                                        "StopFlow"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'stop-flow))
(common-lisp:progn
 (common-lisp:defun tag-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn tags)
   (common-lisp:declare (common-lisp:ignorable resource-arn tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-tag-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'appflow-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/tags/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'resource-arn))))
                                                        "TagResource"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'tag-resource))
(common-lisp:progn
 (common-lisp:defun unregister-connector
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key connector-label force-delete)
   (common-lisp:declare (common-lisp:ignorable connector-label force-delete))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-unregister-connector-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'appflow-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/unregister-connector"
                                                        "UnregisterConnector"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'unregister-connector))
(common-lisp:progn
 (common-lisp:defun untag-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn tag-keys)
   (common-lisp:declare (common-lisp:ignorable resource-arn tag-keys))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-untag-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'appflow-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/tags/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'resource-arn))))
                                                        "UntagResource"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'untag-resource))
(common-lisp:progn
 (common-lisp:defun update-connector-profile
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key connector-profile-name connection-mode
                     connector-profile-config client-token)
   (common-lisp:declare
    (common-lisp:ignorable connector-profile-name connection-mode
     connector-profile-config client-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-connector-profile-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'appflow-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/update-connector-profile"
                                                        "UpdateConnectorProfile"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-connector-profile))
(common-lisp:progn
 (common-lisp:defun update-connector-registration
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key connector-label description
                     connector-provisioning-config client-token)
   (common-lisp:declare
    (common-lisp:ignorable connector-label description
     connector-provisioning-config client-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-update-connector-registration-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'appflow-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/update-connector-registration"
                                                        "UpdateConnectorRegistration"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-connector-registration))
(common-lisp:progn
 (common-lisp:defun update-flow
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key flow-name description trigger-config
                     source-flow-config destination-flow-config-list tasks
                     metadata-catalog-config client-token)
   (common-lisp:declare
    (common-lisp:ignorable flow-name description trigger-config
     source-flow-config destination-flow-config-list tasks
     metadata-catalog-config client-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-flow-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'appflow-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/update-flow"
                                                        "UpdateFlow"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-flow))
