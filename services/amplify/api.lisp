;; DO NOT EDIT: File is generated by AWS-SDK/GENERATOR.

(common-lisp:defpackage #:aws-sdk/services/amplify/api
  (:use)
  (:nicknames #:aws/amplify)
  (:import-from #:aws-sdk/generator/shape)
  (:import-from #:aws-sdk/generator/operation)
  (:import-from #:aws-sdk/api)
  (:import-from #:aws-sdk/request)
  (:import-from #:aws-sdk/json-request)
  (:import-from #:aws-sdk/rest-json-request)
  (:import-from #:aws-sdk/rest-xml-request)
  (:import-from #:aws-sdk/query-request)
  (:import-from #:aws-sdk/error))
(common-lisp:in-package #:aws-sdk/services/amplify/api)
(common-lisp:progn
 (common-lisp:define-condition amplify-error
     (aws-sdk/error:aws-error)
     common-lisp:nil)
 (common-lisp:export 'amplify-error))
(common-lisp:progn
 (common-lisp:defclass amplify-request
                       (aws-sdk/generator/service::rest-json-request)
                       common-lisp:nil
                       (:default-initargs :service "amplify" :api-version
                        "2017-07-25" :host-prefix "amplify" :signing-name
                        "amplify" :global-host common-lisp:nil))
 (common-lisp:export 'amplify-request))
(common-lisp:defvar *error-map*
  '(("BadRequestException" . bad-request-exception)
    ("DependentServiceFailureException" . dependent-service-failure-exception)
    ("InternalFailureException" . internal-failure-exception)
    ("LimitExceededException" . limit-exceeded-exception)
    ("NotFoundException" . not-found-exception)
    ("ResourceNotFoundException" . resource-not-found-exception)
    ("UnauthorizedException" . unauthorized-exception)))
(common-lisp:deftype access-token () 'common-lisp:string)
(common-lisp:deftype active-job-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (app (:copier common-lisp:nil) (:conc-name "struct-shape-app-"))
   (app-id (common-lisp:error ":appid is required") :type
    (common-lisp:or app-id common-lisp:null))
   (app-arn (common-lisp:error ":apparn is required") :type
    (common-lisp:or app-arn common-lisp:null))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or name common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-map common-lisp:null))
   (description (common-lisp:error ":description is required") :type
    (common-lisp:or description common-lisp:null))
   (repository (common-lisp:error ":repository is required") :type
    (common-lisp:or repository common-lisp:null))
   (platform (common-lisp:error ":platform is required") :type
    (common-lisp:or platform common-lisp:null))
   (create-time (common-lisp:error ":createtime is required") :type
    (common-lisp:or create-time common-lisp:null))
   (update-time (common-lisp:error ":updatetime is required") :type
    (common-lisp:or update-time common-lisp:null))
   (iam-service-role-arn common-lisp:nil :type
    (common-lisp:or service-role-arn common-lisp:null))
   (environment-variables
    (common-lisp:error ":environmentvariables is required") :type
    (common-lisp:or environment-variables common-lisp:null))
   (default-domain (common-lisp:error ":defaultdomain is required") :type
    (common-lisp:or default-domain common-lisp:null))
   (enable-branch-auto-build
    (common-lisp:error ":enablebranchautobuild is required") :type
    (common-lisp:or enable-branch-auto-build common-lisp:null))
   (enable-branch-auto-deletion common-lisp:nil :type
    (common-lisp:or enable-branch-auto-deletion common-lisp:null))
   (enable-basic-auth (common-lisp:error ":enablebasicauth is required") :type
    (common-lisp:or enable-basic-auth common-lisp:null))
   (basic-auth-credentials common-lisp:nil :type
    (common-lisp:or basic-auth-credentials common-lisp:null))
   (custom-rules common-lisp:nil :type
    (common-lisp:or custom-rules common-lisp:null))
   (production-branch common-lisp:nil :type
    (common-lisp:or production-branch common-lisp:null))
   (build-spec common-lisp:nil :type
    (common-lisp:or build-spec common-lisp:null))
   (custom-headers common-lisp:nil :type
    (common-lisp:or custom-headers common-lisp:null))
   (enable-auto-branch-creation common-lisp:nil :type
    (common-lisp:or enable-auto-branch-creation common-lisp:null))
   (auto-branch-creation-patterns common-lisp:nil :type
    (common-lisp:or auto-branch-creation-patterns common-lisp:null))
   (auto-branch-creation-config common-lisp:nil :type
    (common-lisp:or auto-branch-creation-config common-lisp:null))
   (repository-clone-method common-lisp:nil :type
    (common-lisp:or repository-clone-method common-lisp:null)))
 (common-lisp:export (common-lisp:list 'app 'make-app))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input app))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input app))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'app-id))
      (common-lisp:list
       (common-lisp:cons "appId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'app-arn))
      (common-lisp:list
       (common-lisp:cons "appArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'repository))
      (common-lisp:list
       (common-lisp:cons "repository"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'platform))
      (common-lisp:list
       (common-lisp:cons "platform"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'create-time))
      (common-lisp:list
       (common-lisp:cons "createTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'update-time))
      (common-lisp:list
       (common-lisp:cons "updateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'iam-service-role-arn))
      (common-lisp:list
       (common-lisp:cons "iamServiceRoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'environment-variables))
      (common-lisp:list
       (common-lisp:cons "environmentVariables"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'default-domain))
      (common-lisp:list
       (common-lisp:cons "defaultDomain"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'enable-branch-auto-build))
      (common-lisp:list
       (common-lisp:cons "enableBranchAutoBuild"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'enable-branch-auto-deletion))
      (common-lisp:list
       (common-lisp:cons "enableBranchAutoDeletion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'enable-basic-auth))
      (common-lisp:list
       (common-lisp:cons "enableBasicAuth"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'basic-auth-credentials))
      (common-lisp:list
       (common-lisp:cons "basicAuthCredentials"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'custom-rules))
      (common-lisp:list
       (common-lisp:cons "customRules"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'production-branch))
      (common-lisp:list
       (common-lisp:cons "productionBranch"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'build-spec))
      (common-lisp:list
       (common-lisp:cons "buildSpec"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'custom-headers))
      (common-lisp:list
       (common-lisp:cons "customHeaders"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'enable-auto-branch-creation))
      (common-lisp:list
       (common-lisp:cons "enableAutoBranchCreation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'auto-branch-creation-patterns))
      (common-lisp:list
       (common-lisp:cons "autoBranchCreationPatterns"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'auto-branch-creation-config))
      (common-lisp:list
       (common-lisp:cons "autoBranchCreationConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'repository-clone-method))
      (common-lisp:list
       (common-lisp:cons "repositoryCloneMethod"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input app))
   common-lisp:nil))
(common-lisp:deftype app-arn () 'common-lisp:string)
(common-lisp:deftype app-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype apps () '(trivial-types:proper-list app))
 (common-lisp:defun make-apps
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list app))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (artifact (:copier common-lisp:nil) (:conc-name "struct-shape-artifact-"))
   (artifact-file-name (common-lisp:error ":artifactfilename is required")
    :type (common-lisp:or artifact-file-name common-lisp:null))
   (artifact-id (common-lisp:error ":artifactid is required") :type
    (common-lisp:or artifact-id common-lisp:null)))
 (common-lisp:export (common-lisp:list 'artifact 'make-artifact))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input artifact))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input artifact))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'artifact-file-name))
      (common-lisp:list
       (common-lisp:cons "artifactFileName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'artifact-id))
      (common-lisp:list
       (common-lisp:cons "artifactId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input artifact))
   common-lisp:nil))
(common-lisp:deftype artifact-file-name () 'common-lisp:string)
(common-lisp:deftype artifact-id () 'common-lisp:string)
(common-lisp:deftype artifact-url () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype artifacts () '(trivial-types:proper-list artifact))
 (common-lisp:defun make-artifacts
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list artifact))
   aws-sdk/generator/shape::members))
(common-lisp:deftype artifacts-url () 'common-lisp:string)
(common-lisp:deftype associated-resource () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype associated-resources ()
   '(trivial-types:proper-list associated-resource))
 (common-lisp:defun make-associated-resources
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list associated-resource))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (auto-branch-creation-config (:copier common-lisp:nil)
      (:conc-name "struct-shape-auto-branch-creation-config-"))
   (stage common-lisp:nil :type (common-lisp:or stage common-lisp:null))
   (framework common-lisp:nil :type
    (common-lisp:or framework common-lisp:null))
   (enable-auto-build common-lisp:nil :type
    (common-lisp:or enable-auto-build common-lisp:null))
   (environment-variables common-lisp:nil :type
    (common-lisp:or environment-variables common-lisp:null))
   (basic-auth-credentials common-lisp:nil :type
    (common-lisp:or basic-auth-credentials common-lisp:null))
   (enable-basic-auth common-lisp:nil :type
    (common-lisp:or enable-basic-auth common-lisp:null))
   (enable-performance-mode common-lisp:nil :type
    (common-lisp:or enable-performance-mode common-lisp:null))
   (build-spec common-lisp:nil :type
    (common-lisp:or build-spec common-lisp:null))
   (enable-pull-request-preview common-lisp:nil :type
    (common-lisp:or enable-pull-request-preview common-lisp:null))
   (pull-request-environment-name common-lisp:nil :type
    (common-lisp:or pull-request-environment-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'auto-branch-creation-config
                    'make-auto-branch-creation-config))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          auto-branch-creation-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          auto-branch-creation-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stage))
      (common-lisp:list
       (common-lisp:cons "stage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'framework))
      (common-lisp:list
       (common-lisp:cons "framework"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'enable-auto-build))
      (common-lisp:list
       (common-lisp:cons "enableAutoBuild"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'environment-variables))
      (common-lisp:list
       (common-lisp:cons "environmentVariables"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'basic-auth-credentials))
      (common-lisp:list
       (common-lisp:cons "basicAuthCredentials"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'enable-basic-auth))
      (common-lisp:list
       (common-lisp:cons "enableBasicAuth"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'enable-performance-mode))
      (common-lisp:list
       (common-lisp:cons "enablePerformanceMode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'build-spec))
      (common-lisp:list
       (common-lisp:cons "buildSpec"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'enable-pull-request-preview))
      (common-lisp:list
       (common-lisp:cons "enablePullRequestPreview"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'pull-request-environment-name))
      (common-lisp:list
       (common-lisp:cons "pullRequestEnvironmentName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          auto-branch-creation-config))
   common-lisp:nil))
(common-lisp:deftype auto-branch-creation-pattern () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype auto-branch-creation-patterns ()
   '(trivial-types:proper-list auto-branch-creation-pattern))
 (common-lisp:defun make-auto-branch-creation-patterns
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            auto-branch-creation-pattern))
   aws-sdk/generator/shape::members))
(common-lisp:deftype auto-sub-domain-creation-pattern () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype auto-sub-domain-creation-patterns ()
   '(trivial-types:proper-list auto-sub-domain-creation-pattern))
 (common-lisp:defun make-auto-sub-domain-creation-patterns
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            auto-sub-domain-creation-pattern))
   aws-sdk/generator/shape::members))
(common-lisp:deftype auto-sub-domain-iamrole () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (backend (:copier common-lisp:nil) (:conc-name "struct-shape-backend-"))
   (stack-arn common-lisp:nil :type
    (common-lisp:or stack-arn common-lisp:null)))
 (common-lisp:export (common-lisp:list 'backend 'make-backend))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input backend))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input backend))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stack-arn))
      (common-lisp:list
       (common-lisp:cons "stackArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input backend))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (backend-environment (:copier common-lisp:nil)
      (:conc-name "struct-shape-backend-environment-"))
   (backend-environment-arn
    (common-lisp:error ":backendenvironmentarn is required") :type
    (common-lisp:or backend-environment-arn common-lisp:null))
   (environment-name (common-lisp:error ":environmentname is required") :type
    (common-lisp:or environment-name common-lisp:null))
   (stack-name common-lisp:nil :type
    (common-lisp:or stack-name common-lisp:null))
   (deployment-artifacts common-lisp:nil :type
    (common-lisp:or deployment-artifacts common-lisp:null))
   (create-time (common-lisp:error ":createtime is required") :type
    (common-lisp:or create-time common-lisp:null))
   (update-time (common-lisp:error ":updatetime is required") :type
    (common-lisp:or update-time common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'backend-environment 'make-backend-environment))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input backend-environment))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input backend-environment))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'backend-environment-arn))
      (common-lisp:list
       (common-lisp:cons "backendEnvironmentArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'environment-name))
      (common-lisp:list
       (common-lisp:cons "environmentName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stack-name))
      (common-lisp:list
       (common-lisp:cons "stackName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'deployment-artifacts))
      (common-lisp:list
       (common-lisp:cons "deploymentArtifacts"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'create-time))
      (common-lisp:list
       (common-lisp:cons "createTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'update-time))
      (common-lisp:list
       (common-lisp:cons "updateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input backend-environment))
   common-lisp:nil))
(common-lisp:deftype backend-environment-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype backend-environments ()
   '(trivial-types:proper-list backend-environment))
 (common-lisp:defun make-backend-environments
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list backend-environment))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition bad-request-exception
     (amplify-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       bad-request-exception-message)))
 (common-lisp:export
  (common-lisp:list 'bad-request-exception 'bad-request-exception-message)))
(common-lisp:deftype basic-auth-credentials () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (branch (:copier common-lisp:nil) (:conc-name "struct-shape-branch-"))
   (branch-arn (common-lisp:error ":brancharn is required") :type
    (common-lisp:or branch-arn common-lisp:null))
   (branch-name (common-lisp:error ":branchname is required") :type
    (common-lisp:or branch-name common-lisp:null))
   (description (common-lisp:error ":description is required") :type
    (common-lisp:or description common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-map common-lisp:null))
   (stage (common-lisp:error ":stage is required") :type
    (common-lisp:or stage common-lisp:null))
   (display-name (common-lisp:error ":displayname is required") :type
    (common-lisp:or display-name common-lisp:null))
   (enable-notification (common-lisp:error ":enablenotification is required")
    :type (common-lisp:or enable-notification common-lisp:null))
   (create-time (common-lisp:error ":createtime is required") :type
    (common-lisp:or create-time common-lisp:null))
   (update-time (common-lisp:error ":updatetime is required") :type
    (common-lisp:or update-time common-lisp:null))
   (environment-variables
    (common-lisp:error ":environmentvariables is required") :type
    (common-lisp:or environment-variables common-lisp:null))
   (enable-auto-build (common-lisp:error ":enableautobuild is required") :type
    (common-lisp:or enable-auto-build common-lisp:null))
   (custom-domains (common-lisp:error ":customdomains is required") :type
    (common-lisp:or custom-domains common-lisp:null))
   (framework (common-lisp:error ":framework is required") :type
    (common-lisp:or framework common-lisp:null))
   (active-job-id (common-lisp:error ":activejobid is required") :type
    (common-lisp:or active-job-id common-lisp:null))
   (total-number-of-jobs (common-lisp:error ":totalnumberofjobs is required")
    :type (common-lisp:or total-number-of-jobs common-lisp:null))
   (enable-basic-auth (common-lisp:error ":enablebasicauth is required") :type
    (common-lisp:or enable-basic-auth common-lisp:null))
   (enable-performance-mode common-lisp:nil :type
    (common-lisp:or enable-performance-mode common-lisp:null))
   (thumbnail-url common-lisp:nil :type
    (common-lisp:or thumbnail-url common-lisp:null))
   (basic-auth-credentials common-lisp:nil :type
    (common-lisp:or basic-auth-credentials common-lisp:null))
   (build-spec common-lisp:nil :type
    (common-lisp:or build-spec common-lisp:null))
   (ttl (common-lisp:error ":ttl is required") :type
    (common-lisp:or ttl common-lisp:null))
   (associated-resources common-lisp:nil :type
    (common-lisp:or associated-resources common-lisp:null))
   (enable-pull-request-preview
    (common-lisp:error ":enablepullrequestpreview is required") :type
    (common-lisp:or enable-pull-request-preview common-lisp:null))
   (pull-request-environment-name common-lisp:nil :type
    (common-lisp:or pull-request-environment-name common-lisp:null))
   (destination-branch common-lisp:nil :type
    (common-lisp:or branch-name common-lisp:null))
   (source-branch common-lisp:nil :type
    (common-lisp:or branch-name common-lisp:null))
   (backend-environment-arn common-lisp:nil :type
    (common-lisp:or backend-environment-arn common-lisp:null))
   (backend common-lisp:nil :type (common-lisp:or backend common-lisp:null)))
 (common-lisp:export (common-lisp:list 'branch 'make-branch))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input branch))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input branch))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'branch-arn))
      (common-lisp:list
       (common-lisp:cons "branchArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'branch-name))
      (common-lisp:list
       (common-lisp:cons "branchName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stage))
      (common-lisp:list
       (common-lisp:cons "stage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'display-name))
      (common-lisp:list
       (common-lisp:cons "displayName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'enable-notification))
      (common-lisp:list
       (common-lisp:cons "enableNotification"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'create-time))
      (common-lisp:list
       (common-lisp:cons "createTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'update-time))
      (common-lisp:list
       (common-lisp:cons "updateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'environment-variables))
      (common-lisp:list
       (common-lisp:cons "environmentVariables"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'enable-auto-build))
      (common-lisp:list
       (common-lisp:cons "enableAutoBuild"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'custom-domains))
      (common-lisp:list
       (common-lisp:cons "customDomains"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'framework))
      (common-lisp:list
       (common-lisp:cons "framework"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'active-job-id))
      (common-lisp:list
       (common-lisp:cons "activeJobId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'total-number-of-jobs))
      (common-lisp:list
       (common-lisp:cons "totalNumberOfJobs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'enable-basic-auth))
      (common-lisp:list
       (common-lisp:cons "enableBasicAuth"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'enable-performance-mode))
      (common-lisp:list
       (common-lisp:cons "enablePerformanceMode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'thumbnail-url))
      (common-lisp:list
       (common-lisp:cons "thumbnailUrl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'basic-auth-credentials))
      (common-lisp:list
       (common-lisp:cons "basicAuthCredentials"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'build-spec))
      (common-lisp:list
       (common-lisp:cons "buildSpec"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ttl))
      (common-lisp:list
       (common-lisp:cons "ttl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'associated-resources))
      (common-lisp:list
       (common-lisp:cons "associatedResources"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'enable-pull-request-preview))
      (common-lisp:list
       (common-lisp:cons "enablePullRequestPreview"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'pull-request-environment-name))
      (common-lisp:list
       (common-lisp:cons "pullRequestEnvironmentName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'destination-branch))
      (common-lisp:list
       (common-lisp:cons "destinationBranch"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-branch))
      (common-lisp:list
       (common-lisp:cons "sourceBranch"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'backend-environment-arn))
      (common-lisp:list
       (common-lisp:cons "backendEnvironmentArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'backend))
      (common-lisp:list
       (common-lisp:cons "backend"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input branch))
   common-lisp:nil))
(common-lisp:deftype branch-arn () 'common-lisp:string)
(common-lisp:deftype branch-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype branches () '(trivial-types:proper-list branch))
 (common-lisp:defun make-branches
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list branch))
   aws-sdk/generator/shape::members))
(common-lisp:deftype build-spec () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (certificate (:copier common-lisp:nil)
      (:conc-name "struct-shape-certificate-"))
   (type (common-lisp:error ":type is required") :type
    (common-lisp:or certificate-type common-lisp:null))
   (custom-certificate-arn common-lisp:nil :type
    (common-lisp:or certificate-arn common-lisp:null))
   (certificate-verification-dnsrecord common-lisp:nil :type
    (common-lisp:or certificate-verification-dnsrecord common-lisp:null)))
 (common-lisp:export (common-lisp:list 'certificate 'make-certificate))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input certificate))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input certificate))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'custom-certificate-arn))
      (common-lisp:list
       (common-lisp:cons "customCertificateArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'certificate-verification-dnsrecord))
      (common-lisp:list
       (common-lisp:cons "certificateVerificationDNSRecord"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input certificate))
   common-lisp:nil))
(common-lisp:deftype certificate-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (certificate-settings (:copier common-lisp:nil)
      (:conc-name "struct-shape-certificate-settings-"))
   (type (common-lisp:error ":type is required") :type
    (common-lisp:or certificate-type common-lisp:null))
   (custom-certificate-arn common-lisp:nil :type
    (common-lisp:or certificate-arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'certificate-settings 'make-certificate-settings))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input certificate-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input certificate-settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'custom-certificate-arn))
      (common-lisp:list
       (common-lisp:cons "customCertificateArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input certificate-settings))
   common-lisp:nil))
(common-lisp:deftype certificate-type () 'common-lisp:string)
(common-lisp:deftype certificate-verification-dnsrecord () 'common-lisp:string)
(common-lisp:deftype code () 'common-lisp:string)
(common-lisp:deftype commit-id () 'common-lisp:string)
(common-lisp:deftype commit-message () 'common-lisp:string)
(common-lisp:deftype commit-time () 'common-lisp:string)
(common-lisp:deftype condition () 'common-lisp:string)
(common-lisp:deftype context () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (create-app-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-app-request-"))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or name common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or description common-lisp:null))
   (repository common-lisp:nil :type
    (common-lisp:or repository common-lisp:null))
   (platform common-lisp:nil :type (common-lisp:or platform common-lisp:null))
   (iam-service-role-arn common-lisp:nil :type
    (common-lisp:or service-role-arn common-lisp:null))
   (oauth-token common-lisp:nil :type
    (common-lisp:or oauth-token common-lisp:null))
   (access-token common-lisp:nil :type
    (common-lisp:or access-token common-lisp:null))
   (environment-variables common-lisp:nil :type
    (common-lisp:or environment-variables common-lisp:null))
   (enable-branch-auto-build common-lisp:nil :type
    (common-lisp:or enable-branch-auto-build common-lisp:null))
   (enable-branch-auto-deletion common-lisp:nil :type
    (common-lisp:or enable-branch-auto-deletion common-lisp:null))
   (enable-basic-auth common-lisp:nil :type
    (common-lisp:or enable-basic-auth common-lisp:null))
   (basic-auth-credentials common-lisp:nil :type
    (common-lisp:or basic-auth-credentials common-lisp:null))
   (custom-rules common-lisp:nil :type
    (common-lisp:or custom-rules common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-map common-lisp:null))
   (build-spec common-lisp:nil :type
    (common-lisp:or build-spec common-lisp:null))
   (custom-headers common-lisp:nil :type
    (common-lisp:or custom-headers common-lisp:null))
   (enable-auto-branch-creation common-lisp:nil :type
    (common-lisp:or enable-auto-branch-creation common-lisp:null))
   (auto-branch-creation-patterns common-lisp:nil :type
    (common-lisp:or auto-branch-creation-patterns common-lisp:null))
   (auto-branch-creation-config common-lisp:nil :type
    (common-lisp:or auto-branch-creation-config common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-app-request 'make-create-app-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input create-app-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input create-app-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'repository))
      (common-lisp:list
       (common-lisp:cons "repository"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'platform))
      (common-lisp:list
       (common-lisp:cons "platform"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'iam-service-role-arn))
      (common-lisp:list
       (common-lisp:cons "iamServiceRoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'oauth-token))
      (common-lisp:list
       (common-lisp:cons "oauthToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'access-token))
      (common-lisp:list
       (common-lisp:cons "accessToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'environment-variables))
      (common-lisp:list
       (common-lisp:cons "environmentVariables"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'enable-branch-auto-build))
      (common-lisp:list
       (common-lisp:cons "enableBranchAutoBuild"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'enable-branch-auto-deletion))
      (common-lisp:list
       (common-lisp:cons "enableBranchAutoDeletion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'enable-basic-auth))
      (common-lisp:list
       (common-lisp:cons "enableBasicAuth"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'basic-auth-credentials))
      (common-lisp:list
       (common-lisp:cons "basicAuthCredentials"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'custom-rules))
      (common-lisp:list
       (common-lisp:cons "customRules"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'build-spec))
      (common-lisp:list
       (common-lisp:cons "buildSpec"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'custom-headers))
      (common-lisp:list
       (common-lisp:cons "customHeaders"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'enable-auto-branch-creation))
      (common-lisp:list
       (common-lisp:cons "enableAutoBranchCreation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'auto-branch-creation-patterns))
      (common-lisp:list
       (common-lisp:cons "autoBranchCreationPatterns"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'auto-branch-creation-config))
      (common-lisp:list
       (common-lisp:cons "autoBranchCreationConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input create-app-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-app-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-app-result-"))
   (app (common-lisp:error ":app is required") :type
    (common-lisp:or app common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-app-result 'make-create-app-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input create-app-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input create-app-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'app))
      (common-lisp:list
       (common-lisp:cons "app"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input create-app-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-backend-environment-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-backend-environment-request-"))
   (app-id (common-lisp:error ":appid is required") :type
    (common-lisp:or app-id common-lisp:null))
   (environment-name (common-lisp:error ":environmentname is required") :type
    (common-lisp:or environment-name common-lisp:null))
   (stack-name common-lisp:nil :type
    (common-lisp:or stack-name common-lisp:null))
   (deployment-artifacts common-lisp:nil :type
    (common-lisp:or deployment-artifacts common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-backend-environment-request
                    'make-create-backend-environment-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-backend-environment-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-backend-environment-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'environment-name))
      (common-lisp:list
       (common-lisp:cons "environmentName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stack-name))
      (common-lisp:list
       (common-lisp:cons "stackName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'deployment-artifacts))
      (common-lisp:list
       (common-lisp:cons "deploymentArtifacts"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-backend-environment-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-backend-environment-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-backend-environment-result-"))
   (backend-environment (common-lisp:error ":backendenvironment is required")
    :type (common-lisp:or backend-environment common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-backend-environment-result
                    'make-create-backend-environment-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-backend-environment-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-backend-environment-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'backend-environment))
      (common-lisp:list
       (common-lisp:cons "backendEnvironment"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-backend-environment-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-branch-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-branch-request-"))
   (app-id (common-lisp:error ":appid is required") :type
    (common-lisp:or app-id common-lisp:null))
   (branch-name (common-lisp:error ":branchname is required") :type
    (common-lisp:or branch-name common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or description common-lisp:null))
   (stage common-lisp:nil :type (common-lisp:or stage common-lisp:null))
   (framework common-lisp:nil :type
    (common-lisp:or framework common-lisp:null))
   (enable-notification common-lisp:nil :type
    (common-lisp:or enable-notification common-lisp:null))
   (enable-auto-build common-lisp:nil :type
    (common-lisp:or enable-auto-build common-lisp:null))
   (environment-variables common-lisp:nil :type
    (common-lisp:or environment-variables common-lisp:null))
   (basic-auth-credentials common-lisp:nil :type
    (common-lisp:or basic-auth-credentials common-lisp:null))
   (enable-basic-auth common-lisp:nil :type
    (common-lisp:or enable-basic-auth common-lisp:null))
   (enable-performance-mode common-lisp:nil :type
    (common-lisp:or enable-performance-mode common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-map common-lisp:null))
   (build-spec common-lisp:nil :type
    (common-lisp:or build-spec common-lisp:null))
   (ttl common-lisp:nil :type (common-lisp:or ttl common-lisp:null))
   (display-name common-lisp:nil :type
    (common-lisp:or display-name common-lisp:null))
   (enable-pull-request-preview common-lisp:nil :type
    (common-lisp:or enable-pull-request-preview common-lisp:null))
   (pull-request-environment-name common-lisp:nil :type
    (common-lisp:or pull-request-environment-name common-lisp:null))
   (backend-environment-arn common-lisp:nil :type
    (common-lisp:or backend-environment-arn common-lisp:null))
   (backend common-lisp:nil :type (common-lisp:or backend common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-branch-request 'make-create-branch-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-branch-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-branch-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'branch-name))
      (common-lisp:list
       (common-lisp:cons "branchName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stage))
      (common-lisp:list
       (common-lisp:cons "stage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'framework))
      (common-lisp:list
       (common-lisp:cons "framework"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'enable-notification))
      (common-lisp:list
       (common-lisp:cons "enableNotification"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'enable-auto-build))
      (common-lisp:list
       (common-lisp:cons "enableAutoBuild"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'environment-variables))
      (common-lisp:list
       (common-lisp:cons "environmentVariables"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'basic-auth-credentials))
      (common-lisp:list
       (common-lisp:cons "basicAuthCredentials"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'enable-basic-auth))
      (common-lisp:list
       (common-lisp:cons "enableBasicAuth"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'enable-performance-mode))
      (common-lisp:list
       (common-lisp:cons "enablePerformanceMode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'build-spec))
      (common-lisp:list
       (common-lisp:cons "buildSpec"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ttl))
      (common-lisp:list
       (common-lisp:cons "ttl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'display-name))
      (common-lisp:list
       (common-lisp:cons "displayName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'enable-pull-request-preview))
      (common-lisp:list
       (common-lisp:cons "enablePullRequestPreview"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'pull-request-environment-name))
      (common-lisp:list
       (common-lisp:cons "pullRequestEnvironmentName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'backend-environment-arn))
      (common-lisp:list
       (common-lisp:cons "backendEnvironmentArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'backend))
      (common-lisp:list
       (common-lisp:cons "backend"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-branch-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-branch-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-branch-result-"))
   (branch (common-lisp:error ":branch is required") :type
    (common-lisp:or branch common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-branch-result 'make-create-branch-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input create-branch-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input create-branch-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'branch))
      (common-lisp:list
       (common-lisp:cons "branch"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input create-branch-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-deployment-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-deployment-request-"))
   (app-id (common-lisp:error ":appid is required") :type
    (common-lisp:or app-id common-lisp:null))
   (branch-name (common-lisp:error ":branchname is required") :type
    (common-lisp:or branch-name common-lisp:null))
   (file-map common-lisp:nil :type (common-lisp:or file-map common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-deployment-request
                    'make-create-deployment-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-deployment-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-deployment-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'file-map))
      (common-lisp:list
       (common-lisp:cons "fileMap"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-deployment-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-deployment-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-deployment-result-"))
   (job-id common-lisp:nil :type (common-lisp:or job-id common-lisp:null))
   (file-upload-urls (common-lisp:error ":fileuploadurls is required") :type
    (common-lisp:or file-upload-urls common-lisp:null))
   (zip-upload-url (common-lisp:error ":zipuploadurl is required") :type
    (common-lisp:or upload-url common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-deployment-result 'make-create-deployment-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-deployment-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-deployment-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-id))
      (common-lisp:list
       (common-lisp:cons "jobId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'file-upload-urls))
      (common-lisp:list
       (common-lisp:cons "fileUploadUrls"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'zip-upload-url))
      (common-lisp:list
       (common-lisp:cons "zipUploadUrl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-deployment-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-domain-association-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-domain-association-request-"))
   (app-id (common-lisp:error ":appid is required") :type
    (common-lisp:or app-id common-lisp:null))
   (domain-name (common-lisp:error ":domainname is required") :type
    (common-lisp:or domain-name common-lisp:null))
   (enable-auto-sub-domain common-lisp:nil :type
    (common-lisp:or enable-auto-sub-domain common-lisp:null))
   (sub-domain-settings (common-lisp:error ":subdomainsettings is required")
    :type (common-lisp:or sub-domain-settings common-lisp:null))
   (auto-sub-domain-creation-patterns common-lisp:nil :type
    (common-lisp:or auto-sub-domain-creation-patterns common-lisp:null))
   (auto-sub-domain-iamrole common-lisp:nil :type
    (common-lisp:or auto-sub-domain-iamrole common-lisp:null))
   (certificate-settings common-lisp:nil :type
    (common-lisp:or certificate-settings common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-domain-association-request
                    'make-create-domain-association-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-domain-association-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-domain-association-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-name))
      (common-lisp:list
       (common-lisp:cons "domainName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'enable-auto-sub-domain))
      (common-lisp:list
       (common-lisp:cons "enableAutoSubDomain"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sub-domain-settings))
      (common-lisp:list
       (common-lisp:cons "subDomainSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'auto-sub-domain-creation-patterns))
      (common-lisp:list
       (common-lisp:cons "autoSubDomainCreationPatterns"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'auto-sub-domain-iamrole))
      (common-lisp:list
       (common-lisp:cons "autoSubDomainIAMRole"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'certificate-settings))
      (common-lisp:list
       (common-lisp:cons "certificateSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-domain-association-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-domain-association-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-domain-association-result-"))
   (domain-association (common-lisp:error ":domainassociation is required")
    :type (common-lisp:or domain-association common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-domain-association-result
                    'make-create-domain-association-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-domain-association-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-domain-association-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-association))
      (common-lisp:list
       (common-lisp:cons "domainAssociation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-domain-association-result))
   common-lisp:nil))
(common-lisp:deftype create-time () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (create-webhook-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-webhook-request-"))
   (app-id (common-lisp:error ":appid is required") :type
    (common-lisp:or app-id common-lisp:null))
   (branch-name (common-lisp:error ":branchname is required") :type
    (common-lisp:or branch-name common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or description common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-webhook-request 'make-create-webhook-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-webhook-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-webhook-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'branch-name))
      (common-lisp:list
       (common-lisp:cons "branchName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-webhook-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-webhook-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-webhook-result-"))
   (webhook (common-lisp:error ":webhook is required") :type
    (common-lisp:or webhook common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-webhook-result 'make-create-webhook-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-webhook-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-webhook-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'webhook))
      (common-lisp:list
       (common-lisp:cons "webhook"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-webhook-result))
   common-lisp:nil))
(common-lisp:deftype custom-domain () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype custom-domains ()
   '(trivial-types:proper-list custom-domain))
 (common-lisp:defun make-custom-domains
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list custom-domain))
   aws-sdk/generator/shape::members))
(common-lisp:deftype custom-headers () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (custom-rule (:copier common-lisp:nil)
      (:conc-name "struct-shape-custom-rule-"))
   (source (common-lisp:error ":source is required") :type
    (common-lisp:or source common-lisp:null))
   (target (common-lisp:error ":target is required") :type
    (common-lisp:or target common-lisp:null))
   (status common-lisp:nil :type (common-lisp:or status common-lisp:null))
   (condition common-lisp:nil :type
    (common-lisp:or condition common-lisp:null)))
 (common-lisp:export (common-lisp:list 'custom-rule 'make-custom-rule))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input custom-rule))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input custom-rule))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source))
      (common-lisp:list
       (common-lisp:cons "source"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target))
      (common-lisp:list
       (common-lisp:cons "target"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'condition))
      (common-lisp:list
       (common-lisp:cons "condition"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input custom-rule))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype custom-rules () '(trivial-types:proper-list custom-rule))
 (common-lisp:defun make-custom-rules
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list custom-rule))
   aws-sdk/generator/shape::members))
(common-lisp:deftype dnsrecord () 'common-lisp:string)
(common-lisp:deftype default-domain () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (delete-app-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-app-request-"))
   (app-id (common-lisp:error ":appid is required") :type
    (common-lisp:or app-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-app-request 'make-delete-app-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input delete-app-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input delete-app-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input delete-app-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-app-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-app-result-"))
   (app (common-lisp:error ":app is required") :type
    (common-lisp:or app common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-app-result 'make-delete-app-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input delete-app-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input delete-app-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'app))
      (common-lisp:list
       (common-lisp:cons "app"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input delete-app-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-backend-environment-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-backend-environment-request-"))
   (app-id (common-lisp:error ":appid is required") :type
    (common-lisp:or app-id common-lisp:null))
   (environment-name (common-lisp:error ":environmentname is required") :type
    (common-lisp:or environment-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-backend-environment-request
                    'make-delete-backend-environment-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-backend-environment-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-backend-environment-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-backend-environment-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-backend-environment-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-backend-environment-result-"))
   (backend-environment (common-lisp:error ":backendenvironment is required")
    :type (common-lisp:or backend-environment common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-backend-environment-result
                    'make-delete-backend-environment-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-backend-environment-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-backend-environment-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'backend-environment))
      (common-lisp:list
       (common-lisp:cons "backendEnvironment"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-backend-environment-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-branch-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-branch-request-"))
   (app-id (common-lisp:error ":appid is required") :type
    (common-lisp:or app-id common-lisp:null))
   (branch-name (common-lisp:error ":branchname is required") :type
    (common-lisp:or branch-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-branch-request 'make-delete-branch-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-branch-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-branch-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-branch-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-branch-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-branch-result-"))
   (branch (common-lisp:error ":branch is required") :type
    (common-lisp:or branch common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-branch-result 'make-delete-branch-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input delete-branch-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input delete-branch-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'branch))
      (common-lisp:list
       (common-lisp:cons "branch"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input delete-branch-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-domain-association-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-domain-association-request-"))
   (app-id (common-lisp:error ":appid is required") :type
    (common-lisp:or app-id common-lisp:null))
   (domain-name (common-lisp:error ":domainname is required") :type
    (common-lisp:or domain-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-domain-association-request
                    'make-delete-domain-association-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-domain-association-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-domain-association-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-domain-association-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-domain-association-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-domain-association-result-"))
   (domain-association (common-lisp:error ":domainassociation is required")
    :type (common-lisp:or domain-association common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-domain-association-result
                    'make-delete-domain-association-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-domain-association-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-domain-association-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-association))
      (common-lisp:list
       (common-lisp:cons "domainAssociation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-domain-association-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-job-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-job-request-"))
   (app-id (common-lisp:error ":appid is required") :type
    (common-lisp:or app-id common-lisp:null))
   (branch-name (common-lisp:error ":branchname is required") :type
    (common-lisp:or branch-name common-lisp:null))
   (job-id (common-lisp:error ":jobid is required") :type
    (common-lisp:or job-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-job-request 'make-delete-job-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input delete-job-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input delete-job-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input delete-job-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-job-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-job-result-"))
   (job-summary (common-lisp:error ":jobsummary is required") :type
    (common-lisp:or job-summary common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-job-result 'make-delete-job-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input delete-job-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input delete-job-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-summary))
      (common-lisp:list
       (common-lisp:cons "jobSummary"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input delete-job-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-webhook-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-webhook-request-"))
   (webhook-id (common-lisp:error ":webhookid is required") :type
    (common-lisp:or webhook-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-webhook-request 'make-delete-webhook-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-webhook-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-webhook-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-webhook-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-webhook-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-webhook-result-"))
   (webhook (common-lisp:error ":webhook is required") :type
    (common-lisp:or webhook common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-webhook-result 'make-delete-webhook-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-webhook-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-webhook-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'webhook))
      (common-lisp:list
       (common-lisp:cons "webhook"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-webhook-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition dependent-service-failure-exception
     (amplify-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       dependent-service-failure-exception-message)))
 (common-lisp:export
  (common-lisp:list 'dependent-service-failure-exception
                    'dependent-service-failure-exception-message)))
(common-lisp:deftype deployment-artifacts () 'common-lisp:string)
(common-lisp:deftype description () 'common-lisp:string)
(common-lisp:deftype display-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (domain-association (:copier common-lisp:nil)
      (:conc-name "struct-shape-domain-association-"))
   (domain-association-arn
    (common-lisp:error ":domainassociationarn is required") :type
    (common-lisp:or domain-association-arn common-lisp:null))
   (domain-name (common-lisp:error ":domainname is required") :type
    (common-lisp:or domain-name common-lisp:null))
   (enable-auto-sub-domain
    (common-lisp:error ":enableautosubdomain is required") :type
    (common-lisp:or enable-auto-sub-domain common-lisp:null))
   (auto-sub-domain-creation-patterns common-lisp:nil :type
    (common-lisp:or auto-sub-domain-creation-patterns common-lisp:null))
   (auto-sub-domain-iamrole common-lisp:nil :type
    (common-lisp:or auto-sub-domain-iamrole common-lisp:null))
   (domain-status (common-lisp:error ":domainstatus is required") :type
    (common-lisp:or domain-status common-lisp:null))
   (update-status common-lisp:nil :type
    (common-lisp:or update-status common-lisp:null))
   (status-reason (common-lisp:error ":statusreason is required") :type
    (common-lisp:or status-reason common-lisp:null))
   (certificate-verification-dnsrecord common-lisp:nil :type
    (common-lisp:or certificate-verification-dnsrecord common-lisp:null))
   (sub-domains (common-lisp:error ":subdomains is required") :type
    (common-lisp:or sub-domains common-lisp:null))
   (certificate common-lisp:nil :type
    (common-lisp:or certificate common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'domain-association 'make-domain-association))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input domain-association))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input domain-association))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'domain-association-arn))
      (common-lisp:list
       (common-lisp:cons "domainAssociationArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-name))
      (common-lisp:list
       (common-lisp:cons "domainName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'enable-auto-sub-domain))
      (common-lisp:list
       (common-lisp:cons "enableAutoSubDomain"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'auto-sub-domain-creation-patterns))
      (common-lisp:list
       (common-lisp:cons "autoSubDomainCreationPatterns"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'auto-sub-domain-iamrole))
      (common-lisp:list
       (common-lisp:cons "autoSubDomainIAMRole"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-status))
      (common-lisp:list
       (common-lisp:cons "domainStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'update-status))
      (common-lisp:list
       (common-lisp:cons "updateStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status-reason))
      (common-lisp:list
       (common-lisp:cons "statusReason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'certificate-verification-dnsrecord))
      (common-lisp:list
       (common-lisp:cons "certificateVerificationDNSRecord"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sub-domains))
      (common-lisp:list
       (common-lisp:cons "subDomains"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'certificate))
      (common-lisp:list
       (common-lisp:cons "certificate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input domain-association))
   common-lisp:nil))
(common-lisp:deftype domain-association-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype domain-associations ()
   '(trivial-types:proper-list domain-association))
 (common-lisp:defun make-domain-associations
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list domain-association))
   aws-sdk/generator/shape::members))
(common-lisp:deftype domain-name () 'common-lisp:string)
(common-lisp:deftype domain-prefix () 'common-lisp:string)
(common-lisp:deftype domain-status () 'common-lisp:string)
(common-lisp:deftype enable-auto-branch-creation () 'common-lisp:boolean)
(common-lisp:deftype enable-auto-build () 'common-lisp:boolean)
(common-lisp:deftype enable-auto-sub-domain () 'common-lisp:boolean)
(common-lisp:deftype enable-basic-auth () 'common-lisp:boolean)
(common-lisp:deftype enable-branch-auto-build () 'common-lisp:boolean)
(common-lisp:deftype enable-branch-auto-deletion () 'common-lisp:boolean)
(common-lisp:deftype enable-notification () 'common-lisp:boolean)
(common-lisp:deftype enable-performance-mode () 'common-lisp:boolean)
(common-lisp:deftype enable-pull-request-preview () 'common-lisp:boolean)
(common-lisp:deftype end-time () 'common-lisp:string)
(common-lisp:deftype env-key () 'common-lisp:string)
(common-lisp:deftype env-value () 'common-lisp:string)
(common-lisp:deftype environment-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype environment-variables () 'common-lisp:hash-table)
 (common-lisp:defun make-environment-variables
                    (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:deftype error-message () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype file-map () 'common-lisp:hash-table)
 (common-lisp:defun make-file-map (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:deftype file-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype file-upload-urls () 'common-lisp:hash-table)
 (common-lisp:defun make-file-upload-urls (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:deftype framework () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (generate-access-logs-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-generate-access-logs-request-"))
   (start-time common-lisp:nil :type
    (common-lisp:or start-time common-lisp:null))
   (end-time common-lisp:nil :type (common-lisp:or end-time common-lisp:null))
   (domain-name (common-lisp:error ":domainname is required") :type
    (common-lisp:or domain-name common-lisp:null))
   (app-id (common-lisp:error ":appid is required") :type
    (common-lisp:or app-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'generate-access-logs-request
                    'make-generate-access-logs-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          generate-access-logs-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          generate-access-logs-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start-time))
      (common-lisp:list
       (common-lisp:cons "startTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'end-time))
      (common-lisp:list
       (common-lisp:cons "endTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-name))
      (common-lisp:list
       (common-lisp:cons "domainName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          generate-access-logs-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (generate-access-logs-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-generate-access-logs-result-"))
   (log-url common-lisp:nil :type (common-lisp:or log-url common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'generate-access-logs-result
                    'make-generate-access-logs-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          generate-access-logs-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          generate-access-logs-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'log-url))
      (common-lisp:list
       (common-lisp:cons "logUrl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          generate-access-logs-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-app-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-app-request-"))
   (app-id (common-lisp:error ":appid is required") :type
    (common-lisp:or app-id common-lisp:null)))
 (common-lisp:export (common-lisp:list 'get-app-request 'make-get-app-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-app-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-app-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-app-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-app-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-app-result-"))
   (app (common-lisp:error ":app is required") :type
    (common-lisp:or app common-lisp:null)))
 (common-lisp:export (common-lisp:list 'get-app-result 'make-get-app-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-app-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-app-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'app))
      (common-lisp:list
       (common-lisp:cons "app"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-app-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-artifact-url-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-artifact-url-request-"))
   (artifact-id (common-lisp:error ":artifactid is required") :type
    (common-lisp:or artifact-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-artifact-url-request 'make-get-artifact-url-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-artifact-url-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-artifact-url-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-artifact-url-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-artifact-url-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-artifact-url-result-"))
   (artifact-id (common-lisp:error ":artifactid is required") :type
    (common-lisp:or artifact-id common-lisp:null))
   (artifact-url (common-lisp:error ":artifacturl is required") :type
    (common-lisp:or artifact-url common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-artifact-url-result 'make-get-artifact-url-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-artifact-url-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-artifact-url-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'artifact-id))
      (common-lisp:list
       (common-lisp:cons "artifactId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'artifact-url))
      (common-lisp:list
       (common-lisp:cons "artifactUrl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-artifact-url-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-backend-environment-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-backend-environment-request-"))
   (app-id (common-lisp:error ":appid is required") :type
    (common-lisp:or app-id common-lisp:null))
   (environment-name (common-lisp:error ":environmentname is required") :type
    (common-lisp:or environment-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-backend-environment-request
                    'make-get-backend-environment-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-backend-environment-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-backend-environment-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-backend-environment-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-backend-environment-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-backend-environment-result-"))
   (backend-environment (common-lisp:error ":backendenvironment is required")
    :type (common-lisp:or backend-environment common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-backend-environment-result
                    'make-get-backend-environment-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-backend-environment-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-backend-environment-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'backend-environment))
      (common-lisp:list
       (common-lisp:cons "backendEnvironment"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-backend-environment-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-branch-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-branch-request-"))
   (app-id (common-lisp:error ":appid is required") :type
    (common-lisp:or app-id common-lisp:null))
   (branch-name (common-lisp:error ":branchname is required") :type
    (common-lisp:or branch-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-branch-request 'make-get-branch-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-branch-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-branch-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-branch-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-branch-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-branch-result-"))
   (branch (common-lisp:error ":branch is required") :type
    (common-lisp:or branch common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-branch-result 'make-get-branch-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-branch-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-branch-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'branch))
      (common-lisp:list
       (common-lisp:cons "branch"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-branch-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-domain-association-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-domain-association-request-"))
   (app-id (common-lisp:error ":appid is required") :type
    (common-lisp:or app-id common-lisp:null))
   (domain-name (common-lisp:error ":domainname is required") :type
    (common-lisp:or domain-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-domain-association-request
                    'make-get-domain-association-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-domain-association-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-domain-association-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-domain-association-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-domain-association-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-domain-association-result-"))
   (domain-association (common-lisp:error ":domainassociation is required")
    :type (common-lisp:or domain-association common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-domain-association-result
                    'make-get-domain-association-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-domain-association-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-domain-association-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-association))
      (common-lisp:list
       (common-lisp:cons "domainAssociation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-domain-association-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-job-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-job-request-"))
   (app-id (common-lisp:error ":appid is required") :type
    (common-lisp:or app-id common-lisp:null))
   (branch-name (common-lisp:error ":branchname is required") :type
    (common-lisp:or branch-name common-lisp:null))
   (job-id (common-lisp:error ":jobid is required") :type
    (common-lisp:or job-id common-lisp:null)))
 (common-lisp:export (common-lisp:list 'get-job-request 'make-get-job-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-job-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-job-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-job-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-job-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-job-result-"))
   (job (common-lisp:error ":job is required") :type
    (common-lisp:or job common-lisp:null)))
 (common-lisp:export (common-lisp:list 'get-job-result 'make-get-job-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-job-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-job-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job))
      (common-lisp:list
       (common-lisp:cons "job"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-job-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-webhook-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-webhook-request-"))
   (webhook-id (common-lisp:error ":webhookid is required") :type
    (common-lisp:or webhook-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-webhook-request 'make-get-webhook-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-webhook-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-webhook-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-webhook-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-webhook-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-webhook-result-"))
   (webhook (common-lisp:error ":webhook is required") :type
    (common-lisp:or webhook common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-webhook-result 'make-get-webhook-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-webhook-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-webhook-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'webhook))
      (common-lisp:list
       (common-lisp:cons "webhook"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-webhook-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition internal-failure-exception
     (amplify-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       internal-failure-exception-message)))
 (common-lisp:export
  (common-lisp:list 'internal-failure-exception
                    'internal-failure-exception-message)))
(common-lisp:progn
 (common-lisp:defstruct
     (job (:copier common-lisp:nil) (:conc-name "struct-shape-job-"))
   (summary (common-lisp:error ":summary is required") :type
    (common-lisp:or job-summary common-lisp:null))
   (steps (common-lisp:error ":steps is required") :type
    (common-lisp:or steps common-lisp:null)))
 (common-lisp:export (common-lisp:list 'job 'make-job))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input job))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input job))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'summary))
      (common-lisp:list
       (common-lisp:cons "summary"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'steps))
      (common-lisp:list
       (common-lisp:cons "steps"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input job))
   common-lisp:nil))
(common-lisp:deftype job-arn () 'common-lisp:string)
(common-lisp:deftype job-id () 'common-lisp:string)
(common-lisp:deftype job-reason () 'common-lisp:string)
(common-lisp:deftype job-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype job-summaries ()
   '(trivial-types:proper-list job-summary))
 (common-lisp:defun make-job-summaries
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list job-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (job-summary (:copier common-lisp:nil)
      (:conc-name "struct-shape-job-summary-"))
   (job-arn (common-lisp:error ":jobarn is required") :type
    (common-lisp:or job-arn common-lisp:null))
   (job-id (common-lisp:error ":jobid is required") :type
    (common-lisp:or job-id common-lisp:null))
   (commit-id (common-lisp:error ":commitid is required") :type
    (common-lisp:or commit-id common-lisp:null))
   (commit-message (common-lisp:error ":commitmessage is required") :type
    (common-lisp:or commit-message common-lisp:null))
   (commit-time (common-lisp:error ":committime is required") :type
    (common-lisp:or commit-time common-lisp:null))
   (start-time (common-lisp:error ":starttime is required") :type
    (common-lisp:or start-time common-lisp:null))
   (status (common-lisp:error ":status is required") :type
    (common-lisp:or job-status common-lisp:null))
   (end-time common-lisp:nil :type (common-lisp:or end-time common-lisp:null))
   (job-type (common-lisp:error ":jobtype is required") :type
    (common-lisp:or job-type common-lisp:null)))
 (common-lisp:export (common-lisp:list 'job-summary 'make-job-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input job-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input job-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-arn))
      (common-lisp:list
       (common-lisp:cons "jobArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-id))
      (common-lisp:list
       (common-lisp:cons "jobId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'commit-id))
      (common-lisp:list
       (common-lisp:cons "commitId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'commit-message))
      (common-lisp:list
       (common-lisp:cons "commitMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'commit-time))
      (common-lisp:list
       (common-lisp:cons "commitTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start-time))
      (common-lisp:list
       (common-lisp:cons "startTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'end-time))
      (common-lisp:list
       (common-lisp:cons "endTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-type))
      (common-lisp:list
       (common-lisp:cons "jobType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input job-summary))
   common-lisp:nil))
(common-lisp:deftype job-type () 'common-lisp:string)
(common-lisp:deftype last-deploy-time () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition limit-exceeded-exception
     (amplify-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       limit-exceeded-exception-message)))
 (common-lisp:export
  (common-lisp:list 'limit-exceeded-exception
                    'limit-exceeded-exception-message)))
(common-lisp:progn
 (common-lisp:defstruct
     (list-apps-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-apps-request-"))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or max-results common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-apps-request 'make-list-apps-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-apps-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-apps-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-apps-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-apps-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-apps-result-"))
   (apps (common-lisp:error ":apps is required") :type
    (common-lisp:or apps common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-apps-result 'make-list-apps-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-apps-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-apps-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'apps))
      (common-lisp:list
       (common-lisp:cons "apps"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-apps-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-artifacts-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-artifacts-request-"))
   (app-id (common-lisp:error ":appid is required") :type
    (common-lisp:or app-id common-lisp:null))
   (branch-name (common-lisp:error ":branchname is required") :type
    (common-lisp:or branch-name common-lisp:null))
   (job-id (common-lisp:error ":jobid is required") :type
    (common-lisp:or job-id common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or max-results common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-artifacts-request 'make-list-artifacts-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-artifacts-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-artifacts-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-artifacts-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-artifacts-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-artifacts-result-"))
   (artifacts (common-lisp:error ":artifacts is required") :type
    (common-lisp:or artifacts common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-artifacts-result 'make-list-artifacts-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-artifacts-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-artifacts-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'artifacts))
      (common-lisp:list
       (common-lisp:cons "artifacts"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-artifacts-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-backend-environments-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-backend-environments-request-"))
   (app-id (common-lisp:error ":appid is required") :type
    (common-lisp:or app-id common-lisp:null))
   (environment-name common-lisp:nil :type
    (common-lisp:or environment-name common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or max-results common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-backend-environments-request
                    'make-list-backend-environments-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-backend-environments-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-backend-environments-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-backend-environments-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-backend-environments-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-backend-environments-result-"))
   (backend-environments (common-lisp:error ":backendenvironments is required")
    :type (common-lisp:or backend-environments common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-backend-environments-result
                    'make-list-backend-environments-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-backend-environments-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-backend-environments-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'backend-environments))
      (common-lisp:list
       (common-lisp:cons "backendEnvironments"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-backend-environments-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-branches-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-branches-request-"))
   (app-id (common-lisp:error ":appid is required") :type
    (common-lisp:or app-id common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or max-results common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-branches-request 'make-list-branches-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-branches-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-branches-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-branches-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-branches-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-branches-result-"))
   (branches (common-lisp:error ":branches is required") :type
    (common-lisp:or branches common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-branches-result 'make-list-branches-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-branches-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-branches-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'branches))
      (common-lisp:list
       (common-lisp:cons "branches"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-branches-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-domain-associations-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-domain-associations-request-"))
   (app-id (common-lisp:error ":appid is required") :type
    (common-lisp:or app-id common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or max-results common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-domain-associations-request
                    'make-list-domain-associations-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-domain-associations-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-domain-associations-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-domain-associations-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-domain-associations-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-domain-associations-result-"))
   (domain-associations (common-lisp:error ":domainassociations is required")
    :type (common-lisp:or domain-associations common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-domain-associations-result
                    'make-list-domain-associations-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-domain-associations-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-domain-associations-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-associations))
      (common-lisp:list
       (common-lisp:cons "domainAssociations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-domain-associations-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-jobs-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-jobs-request-"))
   (app-id (common-lisp:error ":appid is required") :type
    (common-lisp:or app-id common-lisp:null))
   (branch-name (common-lisp:error ":branchname is required") :type
    (common-lisp:or branch-name common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or max-results common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-jobs-request 'make-list-jobs-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-jobs-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-jobs-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-jobs-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-jobs-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-jobs-result-"))
   (job-summaries (common-lisp:error ":jobsummaries is required") :type
    (common-lisp:or job-summaries common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-jobs-result 'make-list-jobs-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-jobs-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-jobs-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-summaries))
      (common-lisp:list
       (common-lisp:cons "jobSummaries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-jobs-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-tags-for-resource-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-tags-for-resource-request-"))
   (resource-arn (common-lisp:error ":resourcearn is required") :type
    (common-lisp:or resource-arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-tags-for-resource-request
                    'make-list-tags-for-resource-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-tags-for-resource-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-tags-for-resource-response-"))
   (tags common-lisp:nil :type (common-lisp:or tag-map common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-tags-for-resource-response
                    'make-list-tags-for-resource-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-webhooks-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-webhooks-request-"))
   (app-id (common-lisp:error ":appid is required") :type
    (common-lisp:or app-id common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or max-results common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-webhooks-request 'make-list-webhooks-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-webhooks-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-webhooks-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-webhooks-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-webhooks-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-webhooks-result-"))
   (webhooks (common-lisp:error ":webhooks is required") :type
    (common-lisp:or webhooks common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-webhooks-result 'make-list-webhooks-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-webhooks-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-webhooks-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'webhooks))
      (common-lisp:list
       (common-lisp:cons "webhooks"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-webhooks-result))
   common-lisp:nil))
(common-lisp:deftype log-url () 'common-lisp:string)
(common-lisp:deftype md5hash () 'common-lisp:string)
(common-lisp:deftype max-results () 'common-lisp:integer)
(common-lisp:deftype name () 'common-lisp:string)
(common-lisp:deftype next-token () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition not-found-exception
     (amplify-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       not-found-exception-message)))
 (common-lisp:export
  (common-lisp:list 'not-found-exception 'not-found-exception-message)))
(common-lisp:deftype oauth-token () 'common-lisp:string)
(common-lisp:deftype platform () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (production-branch (:copier common-lisp:nil)
      (:conc-name "struct-shape-production-branch-"))
   (last-deploy-time common-lisp:nil :type
    (common-lisp:or last-deploy-time common-lisp:null))
   (status common-lisp:nil :type (common-lisp:or status common-lisp:null))
   (thumbnail-url common-lisp:nil :type
    (common-lisp:or thumbnail-url common-lisp:null))
   (branch-name common-lisp:nil :type
    (common-lisp:or branch-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'production-branch 'make-production-branch))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input production-branch))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input production-branch))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-deploy-time))
      (common-lisp:list
       (common-lisp:cons "lastDeployTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'thumbnail-url))
      (common-lisp:list
       (common-lisp:cons "thumbnailUrl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'branch-name))
      (common-lisp:list
       (common-lisp:cons "branchName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input production-branch))
   common-lisp:nil))
(common-lisp:deftype pull-request-environment-name () 'common-lisp:string)
(common-lisp:deftype repository () 'common-lisp:string)
(common-lisp:deftype repository-clone-method () 'common-lisp:string)
(common-lisp:deftype resource-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition resource-not-found-exception
     (amplify-error)
     ((code :initarg :code :initform common-lisp:nil :reader
       resource-not-found-exception-code)
      (message :initarg :message :initform common-lisp:nil :reader
       resource-not-found-exception-message)))
 (common-lisp:export
  (common-lisp:list 'resource-not-found-exception
                    'resource-not-found-exception-code
                    'resource-not-found-exception-message)))
(common-lisp:progn
 (common-lisp:deftype screenshots () 'common-lisp:hash-table)
 (common-lisp:defun make-screenshots (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:deftype service-role-arn () 'common-lisp:string)
(common-lisp:deftype source () 'common-lisp:string)
(common-lisp:deftype source-url () 'common-lisp:string)
(common-lisp:deftype stack-arn () 'common-lisp:string)
(common-lisp:deftype stack-name () 'common-lisp:string)
(common-lisp:deftype stage () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (start-deployment-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-start-deployment-request-"))
   (app-id (common-lisp:error ":appid is required") :type
    (common-lisp:or app-id common-lisp:null))
   (branch-name (common-lisp:error ":branchname is required") :type
    (common-lisp:or branch-name common-lisp:null))
   (job-id common-lisp:nil :type (common-lisp:or job-id common-lisp:null))
   (source-url common-lisp:nil :type
    (common-lisp:or source-url common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'start-deployment-request 'make-start-deployment-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-deployment-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-deployment-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-id))
      (common-lisp:list
       (common-lisp:cons "jobId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-url))
      (common-lisp:list
       (common-lisp:cons "sourceUrl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-deployment-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (start-deployment-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-start-deployment-result-"))
   (job-summary (common-lisp:error ":jobsummary is required") :type
    (common-lisp:or job-summary common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'start-deployment-result 'make-start-deployment-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-deployment-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-deployment-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-summary))
      (common-lisp:list
       (common-lisp:cons "jobSummary"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-deployment-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (start-job-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-start-job-request-"))
   (app-id (common-lisp:error ":appid is required") :type
    (common-lisp:or app-id common-lisp:null))
   (branch-name (common-lisp:error ":branchname is required") :type
    (common-lisp:or branch-name common-lisp:null))
   (job-id common-lisp:nil :type (common-lisp:or job-id common-lisp:null))
   (job-type (common-lisp:error ":jobtype is required") :type
    (common-lisp:or job-type common-lisp:null))
   (job-reason common-lisp:nil :type
    (common-lisp:or job-reason common-lisp:null))
   (commit-id common-lisp:nil :type
    (common-lisp:or commit-id common-lisp:null))
   (commit-message common-lisp:nil :type
    (common-lisp:or commit-message common-lisp:null))
   (commit-time common-lisp:nil :type
    (common-lisp:or commit-time common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'start-job-request 'make-start-job-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input start-job-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input start-job-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-id))
      (common-lisp:list
       (common-lisp:cons "jobId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-type))
      (common-lisp:list
       (common-lisp:cons "jobType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-reason))
      (common-lisp:list
       (common-lisp:cons "jobReason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'commit-id))
      (common-lisp:list
       (common-lisp:cons "commitId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'commit-message))
      (common-lisp:list
       (common-lisp:cons "commitMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'commit-time))
      (common-lisp:list
       (common-lisp:cons "commitTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input start-job-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (start-job-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-start-job-result-"))
   (job-summary (common-lisp:error ":jobsummary is required") :type
    (common-lisp:or job-summary common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'start-job-result 'make-start-job-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input start-job-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input start-job-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-summary))
      (common-lisp:list
       (common-lisp:cons "jobSummary"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input start-job-result))
   common-lisp:nil))
(common-lisp:deftype start-time () 'common-lisp:string)
(common-lisp:deftype status () 'common-lisp:string)
(common-lisp:deftype status-reason () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (step (:copier common-lisp:nil) (:conc-name "struct-shape-step-"))
   (step-name (common-lisp:error ":stepname is required") :type
    (common-lisp:or step-name common-lisp:null))
   (start-time (common-lisp:error ":starttime is required") :type
    (common-lisp:or start-time common-lisp:null))
   (status (common-lisp:error ":status is required") :type
    (common-lisp:or job-status common-lisp:null))
   (end-time (common-lisp:error ":endtime is required") :type
    (common-lisp:or end-time common-lisp:null))
   (log-url common-lisp:nil :type (common-lisp:or log-url common-lisp:null))
   (artifacts-url common-lisp:nil :type
    (common-lisp:or artifacts-url common-lisp:null))
   (test-artifacts-url common-lisp:nil :type
    (common-lisp:or test-artifacts-url common-lisp:null))
   (test-config-url common-lisp:nil :type
    (common-lisp:or test-config-url common-lisp:null))
   (screenshots common-lisp:nil :type
    (common-lisp:or screenshots common-lisp:null))
   (status-reason common-lisp:nil :type
    (common-lisp:or status-reason common-lisp:null))
   (context common-lisp:nil :type (common-lisp:or context common-lisp:null)))
 (common-lisp:export (common-lisp:list 'step 'make-step))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input step))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input step))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'step-name))
      (common-lisp:list
       (common-lisp:cons "stepName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start-time))
      (common-lisp:list
       (common-lisp:cons "startTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'end-time))
      (common-lisp:list
       (common-lisp:cons "endTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'log-url))
      (common-lisp:list
       (common-lisp:cons "logUrl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'artifacts-url))
      (common-lisp:list
       (common-lisp:cons "artifactsUrl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'test-artifacts-url))
      (common-lisp:list
       (common-lisp:cons "testArtifactsUrl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'test-config-url))
      (common-lisp:list
       (common-lisp:cons "testConfigUrl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'screenshots))
      (common-lisp:list
       (common-lisp:cons "screenshots"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status-reason))
      (common-lisp:list
       (common-lisp:cons "statusReason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'context))
      (common-lisp:list
       (common-lisp:cons "context"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input step))
   common-lisp:nil))
(common-lisp:deftype step-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype steps () '(trivial-types:proper-list step))
 (common-lisp:defun make-steps
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list step))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (stop-job-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-stop-job-request-"))
   (app-id (common-lisp:error ":appid is required") :type
    (common-lisp:or app-id common-lisp:null))
   (branch-name (common-lisp:error ":branchname is required") :type
    (common-lisp:or branch-name common-lisp:null))
   (job-id (common-lisp:error ":jobid is required") :type
    (common-lisp:or job-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'stop-job-request 'make-stop-job-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input stop-job-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input stop-job-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input stop-job-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (stop-job-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-stop-job-result-"))
   (job-summary (common-lisp:error ":jobsummary is required") :type
    (common-lisp:or job-summary common-lisp:null)))
 (common-lisp:export (common-lisp:list 'stop-job-result 'make-stop-job-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input stop-job-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input stop-job-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-summary))
      (common-lisp:list
       (common-lisp:cons "jobSummary"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input stop-job-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (sub-domain (:copier common-lisp:nil)
      (:conc-name "struct-shape-sub-domain-"))
   (sub-domain-setting (common-lisp:error ":subdomainsetting is required")
    :type (common-lisp:or sub-domain-setting common-lisp:null))
   (verified (common-lisp:error ":verified is required") :type
    (common-lisp:or verified common-lisp:null))
   (dns-record (common-lisp:error ":dnsrecord is required") :type
    (common-lisp:or dnsrecord common-lisp:null)))
 (common-lisp:export (common-lisp:list 'sub-domain 'make-sub-domain))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input sub-domain))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input sub-domain))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sub-domain-setting))
      (common-lisp:list
       (common-lisp:cons "subDomainSetting"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'verified))
      (common-lisp:list
       (common-lisp:cons "verified"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dns-record))
      (common-lisp:list
       (common-lisp:cons "dnsRecord"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input sub-domain))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (sub-domain-setting (:copier common-lisp:nil)
      (:conc-name "struct-shape-sub-domain-setting-"))
   (prefix (common-lisp:error ":prefix is required") :type
    (common-lisp:or domain-prefix common-lisp:null))
   (branch-name (common-lisp:error ":branchname is required") :type
    (common-lisp:or branch-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'sub-domain-setting 'make-sub-domain-setting))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input sub-domain-setting))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input sub-domain-setting))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'prefix))
      (common-lisp:list
       (common-lisp:cons "prefix"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'branch-name))
      (common-lisp:list
       (common-lisp:cons "branchName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input sub-domain-setting))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype sub-domain-settings ()
   '(trivial-types:proper-list sub-domain-setting))
 (common-lisp:defun make-sub-domain-settings
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list sub-domain-setting))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype sub-domains () '(trivial-types:proper-list sub-domain))
 (common-lisp:defun make-sub-domains
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list sub-domain))
   aws-sdk/generator/shape::members))
(common-lisp:deftype ttl () 'common-lisp:string)
(common-lisp:deftype tag-key () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype tag-key-list () '(trivial-types:proper-list tag-key))
 (common-lisp:defun make-tag-key-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list tag-key))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype tag-map () 'common-lisp:hash-table)
 (common-lisp:defun make-tag-map (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:progn
 (common-lisp:defstruct
     (tag-resource-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-tag-resource-request-"))
   (resource-arn (common-lisp:error ":resourcearn is required") :type
    (common-lisp:or resource-arn common-lisp:null))
   (tags (common-lisp:error ":tags is required") :type
    (common-lisp:or tag-map common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'tag-resource-request 'make-tag-resource-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input tag-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input tag-resource-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input tag-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (tag-resource-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-tag-resource-response-")))
 (common-lisp:export
  (common-lisp:list 'tag-resource-response 'make-tag-resource-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          tag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          tag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          tag-resource-response))
   common-lisp:nil))
(common-lisp:deftype tag-value () 'common-lisp:string)
(common-lisp:deftype target () 'common-lisp:string)
(common-lisp:deftype test-artifacts-url () 'common-lisp:string)
(common-lisp:deftype test-config-url () 'common-lisp:string)
(common-lisp:deftype thumbnail-name () 'common-lisp:string)
(common-lisp:deftype thumbnail-url () 'common-lisp:string)
(common-lisp:deftype total-number-of-jobs () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition unauthorized-exception
     (amplify-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       unauthorized-exception-message)))
 (common-lisp:export
  (common-lisp:list 'unauthorized-exception 'unauthorized-exception-message)))
(common-lisp:progn
 (common-lisp:defstruct
     (untag-resource-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-untag-resource-request-"))
   (resource-arn (common-lisp:error ":resourcearn is required") :type
    (common-lisp:or resource-arn common-lisp:null))
   (tag-keys (common-lisp:error ":tagkeys is required") :type
    (common-lisp:or tag-key-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'untag-resource-request 'make-untag-resource-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (untag-resource-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-untag-resource-response-")))
 (common-lisp:export
  (common-lisp:list 'untag-resource-response 'make-untag-resource-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-app-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-app-request-"))
   (app-id (common-lisp:error ":appid is required") :type
    (common-lisp:or app-id common-lisp:null))
   (name common-lisp:nil :type (common-lisp:or name common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or description common-lisp:null))
   (platform common-lisp:nil :type (common-lisp:or platform common-lisp:null))
   (iam-service-role-arn common-lisp:nil :type
    (common-lisp:or service-role-arn common-lisp:null))
   (environment-variables common-lisp:nil :type
    (common-lisp:or environment-variables common-lisp:null))
   (enable-branch-auto-build common-lisp:nil :type
    (common-lisp:or enable-auto-build common-lisp:null))
   (enable-branch-auto-deletion common-lisp:nil :type
    (common-lisp:or enable-branch-auto-deletion common-lisp:null))
   (enable-basic-auth common-lisp:nil :type
    (common-lisp:or enable-basic-auth common-lisp:null))
   (basic-auth-credentials common-lisp:nil :type
    (common-lisp:or basic-auth-credentials common-lisp:null))
   (custom-rules common-lisp:nil :type
    (common-lisp:or custom-rules common-lisp:null))
   (build-spec common-lisp:nil :type
    (common-lisp:or build-spec common-lisp:null))
   (custom-headers common-lisp:nil :type
    (common-lisp:or custom-headers common-lisp:null))
   (enable-auto-branch-creation common-lisp:nil :type
    (common-lisp:or enable-auto-branch-creation common-lisp:null))
   (auto-branch-creation-patterns common-lisp:nil :type
    (common-lisp:or auto-branch-creation-patterns common-lisp:null))
   (auto-branch-creation-config common-lisp:nil :type
    (common-lisp:or auto-branch-creation-config common-lisp:null))
   (repository common-lisp:nil :type
    (common-lisp:or repository common-lisp:null))
   (oauth-token common-lisp:nil :type
    (common-lisp:or oauth-token common-lisp:null))
   (access-token common-lisp:nil :type
    (common-lisp:or access-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-app-request 'make-update-app-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input update-app-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input update-app-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'platform))
      (common-lisp:list
       (common-lisp:cons "platform"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'iam-service-role-arn))
      (common-lisp:list
       (common-lisp:cons "iamServiceRoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'environment-variables))
      (common-lisp:list
       (common-lisp:cons "environmentVariables"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'enable-branch-auto-build))
      (common-lisp:list
       (common-lisp:cons "enableBranchAutoBuild"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'enable-branch-auto-deletion))
      (common-lisp:list
       (common-lisp:cons "enableBranchAutoDeletion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'enable-basic-auth))
      (common-lisp:list
       (common-lisp:cons "enableBasicAuth"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'basic-auth-credentials))
      (common-lisp:list
       (common-lisp:cons "basicAuthCredentials"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'custom-rules))
      (common-lisp:list
       (common-lisp:cons "customRules"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'build-spec))
      (common-lisp:list
       (common-lisp:cons "buildSpec"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'custom-headers))
      (common-lisp:list
       (common-lisp:cons "customHeaders"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'enable-auto-branch-creation))
      (common-lisp:list
       (common-lisp:cons "enableAutoBranchCreation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'auto-branch-creation-patterns))
      (common-lisp:list
       (common-lisp:cons "autoBranchCreationPatterns"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'auto-branch-creation-config))
      (common-lisp:list
       (common-lisp:cons "autoBranchCreationConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'repository))
      (common-lisp:list
       (common-lisp:cons "repository"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'oauth-token))
      (common-lisp:list
       (common-lisp:cons "oauthToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'access-token))
      (common-lisp:list
       (common-lisp:cons "accessToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input update-app-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-app-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-app-result-"))
   (app (common-lisp:error ":app is required") :type
    (common-lisp:or app common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-app-result 'make-update-app-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input update-app-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input update-app-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'app))
      (common-lisp:list
       (common-lisp:cons "app"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input update-app-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-branch-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-branch-request-"))
   (app-id (common-lisp:error ":appid is required") :type
    (common-lisp:or app-id common-lisp:null))
   (branch-name (common-lisp:error ":branchname is required") :type
    (common-lisp:or branch-name common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or description common-lisp:null))
   (framework common-lisp:nil :type
    (common-lisp:or framework common-lisp:null))
   (stage common-lisp:nil :type (common-lisp:or stage common-lisp:null))
   (enable-notification common-lisp:nil :type
    (common-lisp:or enable-notification common-lisp:null))
   (enable-auto-build common-lisp:nil :type
    (common-lisp:or enable-auto-build common-lisp:null))
   (environment-variables common-lisp:nil :type
    (common-lisp:or environment-variables common-lisp:null))
   (basic-auth-credentials common-lisp:nil :type
    (common-lisp:or basic-auth-credentials common-lisp:null))
   (enable-basic-auth common-lisp:nil :type
    (common-lisp:or enable-basic-auth common-lisp:null))
   (enable-performance-mode common-lisp:nil :type
    (common-lisp:or enable-performance-mode common-lisp:null))
   (build-spec common-lisp:nil :type
    (common-lisp:or build-spec common-lisp:null))
   (ttl common-lisp:nil :type (common-lisp:or ttl common-lisp:null))
   (display-name common-lisp:nil :type
    (common-lisp:or display-name common-lisp:null))
   (enable-pull-request-preview common-lisp:nil :type
    (common-lisp:or enable-pull-request-preview common-lisp:null))
   (pull-request-environment-name common-lisp:nil :type
    (common-lisp:or pull-request-environment-name common-lisp:null))
   (backend-environment-arn common-lisp:nil :type
    (common-lisp:or backend-environment-arn common-lisp:null))
   (backend common-lisp:nil :type (common-lisp:or backend common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-branch-request 'make-update-branch-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-branch-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-branch-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'framework))
      (common-lisp:list
       (common-lisp:cons "framework"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stage))
      (common-lisp:list
       (common-lisp:cons "stage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'enable-notification))
      (common-lisp:list
       (common-lisp:cons "enableNotification"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'enable-auto-build))
      (common-lisp:list
       (common-lisp:cons "enableAutoBuild"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'environment-variables))
      (common-lisp:list
       (common-lisp:cons "environmentVariables"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'basic-auth-credentials))
      (common-lisp:list
       (common-lisp:cons "basicAuthCredentials"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'enable-basic-auth))
      (common-lisp:list
       (common-lisp:cons "enableBasicAuth"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'enable-performance-mode))
      (common-lisp:list
       (common-lisp:cons "enablePerformanceMode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'build-spec))
      (common-lisp:list
       (common-lisp:cons "buildSpec"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ttl))
      (common-lisp:list
       (common-lisp:cons "ttl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'display-name))
      (common-lisp:list
       (common-lisp:cons "displayName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'enable-pull-request-preview))
      (common-lisp:list
       (common-lisp:cons "enablePullRequestPreview"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'pull-request-environment-name))
      (common-lisp:list
       (common-lisp:cons "pullRequestEnvironmentName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'backend-environment-arn))
      (common-lisp:list
       (common-lisp:cons "backendEnvironmentArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'backend))
      (common-lisp:list
       (common-lisp:cons "backend"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-branch-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-branch-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-branch-result-"))
   (branch (common-lisp:error ":branch is required") :type
    (common-lisp:or branch common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-branch-result 'make-update-branch-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input update-branch-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input update-branch-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'branch))
      (common-lisp:list
       (common-lisp:cons "branch"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input update-branch-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-domain-association-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-domain-association-request-"))
   (app-id (common-lisp:error ":appid is required") :type
    (common-lisp:or app-id common-lisp:null))
   (domain-name (common-lisp:error ":domainname is required") :type
    (common-lisp:or domain-name common-lisp:null))
   (enable-auto-sub-domain common-lisp:nil :type
    (common-lisp:or enable-auto-sub-domain common-lisp:null))
   (sub-domain-settings common-lisp:nil :type
    (common-lisp:or sub-domain-settings common-lisp:null))
   (auto-sub-domain-creation-patterns common-lisp:nil :type
    (common-lisp:or auto-sub-domain-creation-patterns common-lisp:null))
   (auto-sub-domain-iamrole common-lisp:nil :type
    (common-lisp:or auto-sub-domain-iamrole common-lisp:null))
   (certificate-settings common-lisp:nil :type
    (common-lisp:or certificate-settings common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-domain-association-request
                    'make-update-domain-association-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-domain-association-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-domain-association-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'enable-auto-sub-domain))
      (common-lisp:list
       (common-lisp:cons "enableAutoSubDomain"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sub-domain-settings))
      (common-lisp:list
       (common-lisp:cons "subDomainSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'auto-sub-domain-creation-patterns))
      (common-lisp:list
       (common-lisp:cons "autoSubDomainCreationPatterns"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'auto-sub-domain-iamrole))
      (common-lisp:list
       (common-lisp:cons "autoSubDomainIAMRole"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'certificate-settings))
      (common-lisp:list
       (common-lisp:cons "certificateSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-domain-association-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-domain-association-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-domain-association-result-"))
   (domain-association (common-lisp:error ":domainassociation is required")
    :type (common-lisp:or domain-association common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-domain-association-result
                    'make-update-domain-association-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-domain-association-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-domain-association-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-association))
      (common-lisp:list
       (common-lisp:cons "domainAssociation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-domain-association-result))
   common-lisp:nil))
(common-lisp:deftype update-status () 'common-lisp:string)
(common-lisp:deftype update-time () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (update-webhook-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-webhook-request-"))
   (webhook-id (common-lisp:error ":webhookid is required") :type
    (common-lisp:or webhook-id common-lisp:null))
   (branch-name common-lisp:nil :type
    (common-lisp:or branch-name common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or description common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-webhook-request 'make-update-webhook-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-webhook-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-webhook-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'branch-name))
      (common-lisp:list
       (common-lisp:cons "branchName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-webhook-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-webhook-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-webhook-result-"))
   (webhook (common-lisp:error ":webhook is required") :type
    (common-lisp:or webhook common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-webhook-result 'make-update-webhook-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-webhook-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-webhook-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'webhook))
      (common-lisp:list
       (common-lisp:cons "webhook"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-webhook-result))
   common-lisp:nil))
(common-lisp:deftype upload-url () 'common-lisp:string)
(common-lisp:deftype verified () 'common-lisp:boolean)
(common-lisp:progn
 (common-lisp:defstruct
     (webhook (:copier common-lisp:nil) (:conc-name "struct-shape-webhook-"))
   (webhook-arn (common-lisp:error ":webhookarn is required") :type
    (common-lisp:or webhook-arn common-lisp:null))
   (webhook-id (common-lisp:error ":webhookid is required") :type
    (common-lisp:or webhook-id common-lisp:null))
   (webhook-url (common-lisp:error ":webhookurl is required") :type
    (common-lisp:or webhook-url common-lisp:null))
   (branch-name (common-lisp:error ":branchname is required") :type
    (common-lisp:or branch-name common-lisp:null))
   (description (common-lisp:error ":description is required") :type
    (common-lisp:or description common-lisp:null))
   (create-time (common-lisp:error ":createtime is required") :type
    (common-lisp:or create-time common-lisp:null))
   (update-time (common-lisp:error ":updatetime is required") :type
    (common-lisp:or update-time common-lisp:null)))
 (common-lisp:export (common-lisp:list 'webhook 'make-webhook))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input webhook))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input webhook))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'webhook-arn))
      (common-lisp:list
       (common-lisp:cons "webhookArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'webhook-id))
      (common-lisp:list
       (common-lisp:cons "webhookId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'webhook-url))
      (common-lisp:list
       (common-lisp:cons "webhookUrl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'branch-name))
      (common-lisp:list
       (common-lisp:cons "branchName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'create-time))
      (common-lisp:list
       (common-lisp:cons "createTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'update-time))
      (common-lisp:list
       (common-lisp:cons "updateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input webhook))
   common-lisp:nil))
(common-lisp:deftype webhook-arn () 'common-lisp:string)
(common-lisp:deftype webhook-id () 'common-lisp:string)
(common-lisp:deftype webhook-url () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype webhooks () '(trivial-types:proper-list webhook))
 (common-lisp:defun make-webhooks
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list webhook))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defun create-app
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name description repository platform
                     iam-service-role-arn oauth-token access-token
                     environment-variables enable-branch-auto-build
                     enable-branch-auto-deletion enable-basic-auth
                     basic-auth-credentials custom-rules tags build-spec
                     custom-headers enable-auto-branch-creation
                     auto-branch-creation-patterns auto-branch-creation-config)
   (common-lisp:declare
    (common-lisp:ignorable name description repository platform
     iam-service-role-arn oauth-token access-token environment-variables
     enable-branch-auto-build enable-branch-auto-deletion enable-basic-auth
     basic-auth-credentials custom-rules tags build-spec custom-headers
     enable-auto-branch-creation auto-branch-creation-patterns
     auto-branch-creation-config))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-app-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'amplify-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/apps"
                                                        "CreateApp"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-app))
(common-lisp:progn
 (common-lisp:defun create-backend-environment
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key app-id environment-name stack-name
                     deployment-artifacts)
   (common-lisp:declare
    (common-lisp:ignorable app-id environment-name stack-name
     deployment-artifacts))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-create-backend-environment-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'amplify-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/apps/~A/backendenvironments"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'app-id))))
                                                        "CreateBackendEnvironment"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-backend-environment))
(common-lisp:progn
 (common-lisp:defun create-branch
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key app-id branch-name description stage
                     framework enable-notification enable-auto-build
                     environment-variables basic-auth-credentials
                     enable-basic-auth enable-performance-mode tags build-spec
                     ttl display-name enable-pull-request-preview
                     pull-request-environment-name backend-environment-arn
                     backend)
   (common-lisp:declare
    (common-lisp:ignorable app-id branch-name description stage framework
     enable-notification enable-auto-build environment-variables
     basic-auth-credentials enable-basic-auth enable-performance-mode tags
     build-spec ttl display-name enable-pull-request-preview
     pull-request-environment-name backend-environment-arn backend))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-branch-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'amplify-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/apps/~A/branches"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'app-id))))
                                                        "CreateBranch"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-branch))
(common-lisp:progn
 (common-lisp:defun create-deployment
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key app-id branch-name file-map)
   (common-lisp:declare (common-lisp:ignorable app-id branch-name file-map))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-deployment-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'amplify-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/apps/~A/branches/~A/deployments"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'app-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'branch-name))))
                                                        "CreateDeployment"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-deployment))
(common-lisp:progn
 (common-lisp:defun create-domain-association
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key app-id domain-name enable-auto-sub-domain
                     sub-domain-settings auto-sub-domain-creation-patterns
                     auto-sub-domain-iamrole certificate-settings)
   (common-lisp:declare
    (common-lisp:ignorable app-id domain-name enable-auto-sub-domain
     sub-domain-settings auto-sub-domain-creation-patterns
     auto-sub-domain-iamrole certificate-settings))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-create-domain-association-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'amplify-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/apps/~A/domains"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'app-id))))
                                                        "CreateDomainAssociation"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-domain-association))
(common-lisp:progn
 (common-lisp:defun create-webhook
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key app-id branch-name description)
   (common-lisp:declare (common-lisp:ignorable app-id branch-name description))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-webhook-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'amplify-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/apps/~A/webhooks"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'app-id))))
                                                        "CreateWebhook"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-webhook))
(common-lisp:progn
 (common-lisp:defun delete-app
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key app-id)
   (common-lisp:declare (common-lisp:ignorable app-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-app-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'amplify-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/apps/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'app-id))))
                                                        "DeleteApp"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-app))
(common-lisp:progn
 (common-lisp:defun delete-backend-environment
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key app-id environment-name)
   (common-lisp:declare (common-lisp:ignorable app-id environment-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-delete-backend-environment-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'amplify-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/apps/~A/backendenvironments/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'app-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'environment-name))))
                                                        "DeleteBackendEnvironment"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-backend-environment))
(common-lisp:progn
 (common-lisp:defun delete-branch
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key app-id branch-name)
   (common-lisp:declare (common-lisp:ignorable app-id branch-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-branch-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'amplify-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/apps/~A/branches/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'app-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'branch-name))))
                                                        "DeleteBranch"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-branch))
(common-lisp:progn
 (common-lisp:defun delete-domain-association
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key app-id domain-name)
   (common-lisp:declare (common-lisp:ignorable app-id domain-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-delete-domain-association-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'amplify-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/apps/~A/domains/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'app-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'domain-name))))
                                                        "DeleteDomainAssociation"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-domain-association))
(common-lisp:progn
 (common-lisp:defun delete-job
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key app-id branch-name job-id)
   (common-lisp:declare (common-lisp:ignorable app-id branch-name job-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-job-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'amplify-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/apps/~A/branches/~A/jobs/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'app-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'branch-name))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'job-id))))
                                                        "DeleteJob"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-job))
(common-lisp:progn
 (common-lisp:defun delete-webhook
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key webhook-id)
   (common-lisp:declare (common-lisp:ignorable webhook-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-webhook-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'amplify-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/webhooks/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'webhook-id))))
                                                        "DeleteWebhook"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-webhook))
(common-lisp:progn
 (common-lisp:defun generate-access-logs
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key start-time end-time domain-name app-id)
   (common-lisp:declare
    (common-lisp:ignorable start-time end-time domain-name app-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-generate-access-logs-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'amplify-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/apps/~A/accesslogs"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'app-id))))
                                                        "GenerateAccessLogs"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'generate-access-logs))
(common-lisp:progn
 (common-lisp:defun get-app
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key app-id)
   (common-lisp:declare (common-lisp:ignorable app-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-app-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'amplify-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/apps/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'app-id))))
                                                        "GetApp"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-app))
(common-lisp:progn
 (common-lisp:defun get-artifact-url
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key artifact-id)
   (common-lisp:declare (common-lisp:ignorable artifact-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-artifact-url-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'amplify-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/artifacts/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'artifact-id))))
                                                        "GetArtifactUrl"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-artifact-url))
(common-lisp:progn
 (common-lisp:defun get-backend-environment
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key app-id environment-name)
   (common-lisp:declare (common-lisp:ignorable app-id environment-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-backend-environment-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'amplify-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/apps/~A/backendenvironments/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'app-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'environment-name))))
                                                        "GetBackendEnvironment"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-backend-environment))
(common-lisp:progn
 (common-lisp:defun get-branch
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key app-id branch-name)
   (common-lisp:declare (common-lisp:ignorable app-id branch-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-branch-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'amplify-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/apps/~A/branches/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'app-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'branch-name))))
                                                        "GetBranch"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-branch))
(common-lisp:progn
 (common-lisp:defun get-domain-association
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key app-id domain-name)
   (common-lisp:declare (common-lisp:ignorable app-id domain-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-domain-association-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'amplify-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/apps/~A/domains/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'app-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'domain-name))))
                                                        "GetDomainAssociation"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-domain-association))
(common-lisp:progn
 (common-lisp:defun get-job
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key app-id branch-name job-id)
   (common-lisp:declare (common-lisp:ignorable app-id branch-name job-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-job-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'amplify-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/apps/~A/branches/~A/jobs/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'app-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'branch-name))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'job-id))))
                                                        "GetJob"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-job))
(common-lisp:progn
 (common-lisp:defun get-webhook
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key webhook-id)
   (common-lisp:declare (common-lisp:ignorable webhook-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-webhook-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'amplify-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/webhooks/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'webhook-id))))
                                                        "GetWebhook"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-webhook))
(common-lisp:progn
 (common-lisp:defun list-apps
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key next-token max-results)
   (common-lisp:declare (common-lisp:ignorable next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-apps-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'amplify-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" "/apps"
                                                        "ListApps"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-apps))
(common-lisp:progn
 (common-lisp:defun list-artifacts
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key app-id branch-name job-id next-token
                     max-results)
   (common-lisp:declare
    (common-lisp:ignorable app-id branch-name job-id next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-artifacts-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'amplify-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/apps/~A/branches/~A/jobs/~A/artifacts"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'app-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'branch-name))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'job-id))))
                                                        "ListArtifacts"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-artifacts))
(common-lisp:progn
 (common-lisp:defun list-backend-environments
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key app-id environment-name next-token
                     max-results)
   (common-lisp:declare
    (common-lisp:ignorable app-id environment-name next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-backend-environments-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'amplify-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/apps/~A/backendenvironments"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'app-id))))
                                                        "ListBackendEnvironments"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-backend-environments))
(common-lisp:progn
 (common-lisp:defun list-branches
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key app-id next-token max-results)
   (common-lisp:declare (common-lisp:ignorable app-id next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-branches-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'amplify-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/apps/~A/branches"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'app-id))))
                                                        "ListBranches"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-branches))
(common-lisp:progn
 (common-lisp:defun list-domain-associations
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key app-id next-token max-results)
   (common-lisp:declare (common-lisp:ignorable app-id next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-domain-associations-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'amplify-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/apps/~A/domains"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'app-id))))
                                                        "ListDomainAssociations"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-domain-associations))
(common-lisp:progn
 (common-lisp:defun list-jobs
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key app-id branch-name next-token
                     max-results)
   (common-lisp:declare
    (common-lisp:ignorable app-id branch-name next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-jobs-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'amplify-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/apps/~A/branches/~A/jobs"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'app-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'branch-name))))
                                                        "ListJobs"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-jobs))
(common-lisp:progn
 (common-lisp:defun list-tags-for-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn)
   (common-lisp:declare (common-lisp:ignorable resource-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-tags-for-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'amplify-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/tags/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'resource-arn))))
                                                        "ListTagsForResource"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-tags-for-resource))
(common-lisp:progn
 (common-lisp:defun list-webhooks
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key app-id next-token max-results)
   (common-lisp:declare (common-lisp:ignorable app-id next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-webhooks-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'amplify-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/apps/~A/webhooks"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'app-id))))
                                                        "ListWebhooks"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-webhooks))
(common-lisp:progn
 (common-lisp:defun start-deployment
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key app-id branch-name job-id source-url)
   (common-lisp:declare
    (common-lisp:ignorable app-id branch-name job-id source-url))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-start-deployment-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'amplify-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/apps/~A/branches/~A/deployments/start"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'app-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'branch-name))))
                                                        "StartDeployment"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'start-deployment))
(common-lisp:progn
 (common-lisp:defun start-job
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key app-id branch-name job-id job-type
                     job-reason commit-id commit-message commit-time)
   (common-lisp:declare
    (common-lisp:ignorable app-id branch-name job-id job-type job-reason
     commit-id commit-message commit-time))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-start-job-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'amplify-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/apps/~A/branches/~A/jobs"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'app-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'branch-name))))
                                                        "StartJob"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'start-job))
(common-lisp:progn
 (common-lisp:defun stop-job
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key app-id branch-name job-id)
   (common-lisp:declare (common-lisp:ignorable app-id branch-name job-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-stop-job-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'amplify-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/apps/~A/branches/~A/jobs/~A/stop"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'app-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'branch-name))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'job-id))))
                                                        "StopJob"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'stop-job))
(common-lisp:progn
 (common-lisp:defun tag-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn tags)
   (common-lisp:declare (common-lisp:ignorable resource-arn tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-tag-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'amplify-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/tags/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'resource-arn))))
                                                        "TagResource"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'tag-resource))
(common-lisp:progn
 (common-lisp:defun untag-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn tag-keys)
   (common-lisp:declare (common-lisp:ignorable resource-arn tag-keys))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-untag-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'amplify-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/tags/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'resource-arn))))
                                                        "UntagResource"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'untag-resource))
(common-lisp:progn
 (common-lisp:defun update-app
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key app-id name description platform
                     iam-service-role-arn environment-variables
                     enable-branch-auto-build enable-branch-auto-deletion
                     enable-basic-auth basic-auth-credentials custom-rules
                     build-spec custom-headers enable-auto-branch-creation
                     auto-branch-creation-patterns auto-branch-creation-config
                     repository oauth-token access-token)
   (common-lisp:declare
    (common-lisp:ignorable app-id name description platform
     iam-service-role-arn environment-variables enable-branch-auto-build
     enable-branch-auto-deletion enable-basic-auth basic-auth-credentials
     custom-rules build-spec custom-headers enable-auto-branch-creation
     auto-branch-creation-patterns auto-branch-creation-config repository
     oauth-token access-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-app-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'amplify-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/apps/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'app-id))))
                                                        "UpdateApp"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-app))
(common-lisp:progn
 (common-lisp:defun update-branch
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key app-id branch-name description framework
                     stage enable-notification enable-auto-build
                     environment-variables basic-auth-credentials
                     enable-basic-auth enable-performance-mode build-spec ttl
                     display-name enable-pull-request-preview
                     pull-request-environment-name backend-environment-arn
                     backend)
   (common-lisp:declare
    (common-lisp:ignorable app-id branch-name description framework stage
     enable-notification enable-auto-build environment-variables
     basic-auth-credentials enable-basic-auth enable-performance-mode
     build-spec ttl display-name enable-pull-request-preview
     pull-request-environment-name backend-environment-arn backend))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-branch-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'amplify-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/apps/~A/branches/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'app-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'branch-name))))
                                                        "UpdateBranch"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-branch))
(common-lisp:progn
 (common-lisp:defun update-domain-association
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key app-id domain-name enable-auto-sub-domain
                     sub-domain-settings auto-sub-domain-creation-patterns
                     auto-sub-domain-iamrole certificate-settings)
   (common-lisp:declare
    (common-lisp:ignorable app-id domain-name enable-auto-sub-domain
     sub-domain-settings auto-sub-domain-creation-patterns
     auto-sub-domain-iamrole certificate-settings))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-update-domain-association-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'amplify-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/apps/~A/domains/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'app-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'domain-name))))
                                                        "UpdateDomainAssociation"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-domain-association))
(common-lisp:progn
 (common-lisp:defun update-webhook
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key webhook-id branch-name description)
   (common-lisp:declare
    (common-lisp:ignorable webhook-id branch-name description))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-webhook-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'amplify-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/webhooks/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'webhook-id))))
                                                        "UpdateWebhook"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-webhook))
