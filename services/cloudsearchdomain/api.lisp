;; DO NOT EDIT: File is generated by AWS-SDK/GENERATOR.

(common-lisp:defpackage #:aws-sdk/services/cloudsearchdomain/api
  (:use)
  (:nicknames #:aws/cloudsearchdomain)
  (:import-from #:aws-sdk/generator/shape)
  (:import-from #:aws-sdk/generator/operation)
  (:import-from #:aws-sdk/api)
  (:import-from #:aws-sdk/request)
  (:import-from #:aws-sdk/error))
(common-lisp:in-package #:aws-sdk/services/cloudsearchdomain/api)
(common-lisp:progn
 (common-lisp:defclass cloudsearchdomain-request (aws-sdk/request:request)
                       common-lisp:nil
                       (:default-initargs :service "cloudsearchdomain"))
 (common-lisp:export 'cloudsearchdomain-request))
(common-lisp:progn
 (common-lisp:define-condition cloudsearchdomain-error
     (aws-sdk/error:aws-error)
     common-lisp:nil)
 (common-lisp:export 'cloudsearchdomain-error))
(common-lisp:defvar *error-map*
  '(("DocumentServiceException" . document-service-exception)
    ("SearchException" . search-exception)))
(common-lisp:deftype adds () 'common-lisp:integer)
(common-lisp:deftype blob ()
  '(common-lisp:simple-array (common-lisp:unsigned-byte 8) (common-lisp:*)))
(common-lisp:progn
 (common-lisp:defstruct
     (bucket (:copier common-lisp:nil) (:conc-name "struct-shape-bucket-"))
   (value common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (count common-lisp:nil :type (common-lisp:or long common-lisp:null)))
 (common-lisp:export (common-lisp:list 'bucket 'make-bucket))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input bucket))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input bucket))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'count))
      (common-lisp:list
       (common-lisp:cons "count"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input bucket))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (bucket-info (:copier common-lisp:nil)
      (:conc-name "struct-shape-bucket-info-"))
   (buckets common-lisp:nil :type
    (common-lisp:or bucket-list common-lisp:null)))
 (common-lisp:export (common-lisp:list 'bucket-info 'make-bucket-info))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input bucket-info))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input bucket-info))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'buckets))
      (common-lisp:list
       (common-lisp:cons "buckets"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input bucket-info))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype bucket-list () '(trivial-types:proper-list bucket))
 (common-lisp:defun |make-bucket-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list bucket))
   aws-sdk/generator/shape::members))
(common-lisp:deftype content-type () 'common-lisp:string)
(common-lisp:deftype cursor () 'common-lisp:string)
(common-lisp:deftype deletes () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:define-condition document-service-exception
     (cloudsearchdomain-error)
     ((status :initarg :status :initform common-lisp:nil :reader
       document-service-exception-status)
      (message :initarg :message :initform common-lisp:nil :reader
       document-service-exception-message)))
 (common-lisp:export
  (common-lisp:list 'document-service-exception
                    'document-service-exception-status
                    'document-service-exception-message)))
(common-lisp:progn
 (common-lisp:defstruct
     (document-service-warning (:copier common-lisp:nil)
      (:conc-name "struct-shape-document-service-warning-"))
   (message common-lisp:nil :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'document-service-warning 'make-document-service-warning))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          document-service-warning))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          document-service-warning))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message))
      (common-lisp:list
       (common-lisp:cons "message"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          document-service-warning))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype document-service-warnings ()
   '(trivial-types:proper-list document-service-warning))
 (common-lisp:defun |make-document-service-warnings|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            document-service-warning))
   aws-sdk/generator/shape::members))
(common-lisp:deftype double () 'common-lisp:double-float)
(common-lisp:deftype expr () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype exprs () 'common-lisp:hash-table)
 (common-lisp:defun |make-exprs| (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:deftype facet () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype facets () 'common-lisp:hash-table)
 (common-lisp:defun |make-facets| (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:progn
 (common-lisp:defstruct
     (field-stats (:copier common-lisp:nil)
      (:conc-name "struct-shape-field-stats-"))
   (min common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (max common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (count common-lisp:nil :type (common-lisp:or long common-lisp:null))
   (missing common-lisp:nil :type (common-lisp:or long common-lisp:null))
   (sum common-lisp:nil :type (common-lisp:or double common-lisp:null))
   (sum-of-squares common-lisp:nil :type
    (common-lisp:or double common-lisp:null))
   (mean common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (stddev common-lisp:nil :type (common-lisp:or double common-lisp:null)))
 (common-lisp:export (common-lisp:list 'field-stats 'make-field-stats))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input field-stats))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input field-stats))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'min))
      (common-lisp:list
       (common-lisp:cons "min"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max))
      (common-lisp:list
       (common-lisp:cons "max"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'count))
      (common-lisp:list
       (common-lisp:cons "count"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'missing))
      (common-lisp:list
       (common-lisp:cons "missing"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sum))
      (common-lisp:list
       (common-lisp:cons "sum"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sum-of-squares))
      (common-lisp:list
       (common-lisp:cons "sumOfSquares"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'mean))
      (common-lisp:list
       (common-lisp:cons "mean"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stddev))
      (common-lisp:list
       (common-lisp:cons "stddev"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input field-stats))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype field-value () '(trivial-types:proper-list string))
 (common-lisp:defun |make-field-value|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list string))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype fields () 'common-lisp:hash-table)
 (common-lisp:defun |make-fields| (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:deftype filter-query () 'common-lisp:string)
(common-lisp:deftype highlight () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype highlights () 'common-lisp:hash-table)
 (common-lisp:defun |make-highlights| (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:progn
 (common-lisp:defstruct
     (hit (:copier common-lisp:nil) (:conc-name "struct-shape-hit-"))
   (id common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (fields common-lisp:nil :type (common-lisp:or fields common-lisp:null))
   (exprs common-lisp:nil :type (common-lisp:or exprs common-lisp:null))
   (highlights common-lisp:nil :type
    (common-lisp:or highlights common-lisp:null)))
 (common-lisp:export (common-lisp:list 'hit 'make-hit))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input hit))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input hit))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'fields))
      (common-lisp:list
       (common-lisp:cons "fields"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'exprs))
      (common-lisp:list
       (common-lisp:cons "exprs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'highlights))
      (common-lisp:list
       (common-lisp:cons "highlights"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input hit))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype hit-list () '(trivial-types:proper-list hit))
 (common-lisp:defun |make-hit-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list hit))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (hits (:copier common-lisp:nil) (:conc-name "struct-shape-hits-"))
   (found common-lisp:nil :type (common-lisp:or long common-lisp:null))
   (start common-lisp:nil :type (common-lisp:or long common-lisp:null))
   (cursor common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (hit common-lisp:nil :type (common-lisp:or hit-list common-lisp:null)))
 (common-lisp:export (common-lisp:list 'hits 'make-hits))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input hits))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input hits))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'found))
      (common-lisp:list
       (common-lisp:cons "found"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start))
      (common-lisp:list
       (common-lisp:cons "start"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cursor))
      (common-lisp:list
       (common-lisp:cons "cursor"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'hit))
      (common-lisp:list
       (common-lisp:cons "hit"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input hits))
   common-lisp:nil))
(common-lisp:deftype long () 'common-lisp:integer)
(common-lisp:deftype partial () 'common-lisp:boolean)
(common-lisp:deftype query () 'common-lisp:string)
(common-lisp:deftype query-options () 'common-lisp:string)
(common-lisp:deftype query-parser () 'common-lisp:string)
(common-lisp:deftype return () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition search-exception
     (cloudsearchdomain-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       search-exception-message)))
 (common-lisp:export
  (common-lisp:list 'search-exception 'search-exception-message)))
(common-lisp:progn
 (common-lisp:defstruct
     (search-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-search-request-"))
   (cursor common-lisp:nil :type (common-lisp:or cursor common-lisp:null))
   (expr common-lisp:nil :type (common-lisp:or expr common-lisp:null))
   (facet common-lisp:nil :type (common-lisp:or facet common-lisp:null))
   (filter-query common-lisp:nil :type
    (common-lisp:or filter-query common-lisp:null))
   (highlight common-lisp:nil :type
    (common-lisp:or highlight common-lisp:null))
   (partial common-lisp:nil :type (common-lisp:or partial common-lisp:null))
   (query (common-lisp:error ":query is required") :type
    (common-lisp:or query common-lisp:null))
   (query-options common-lisp:nil :type
    (common-lisp:or query-options common-lisp:null))
   (query-parser common-lisp:nil :type
    (common-lisp:or query-parser common-lisp:null))
   (return common-lisp:nil :type (common-lisp:or return common-lisp:null))
   (size common-lisp:nil :type (common-lisp:or size common-lisp:null))
   (sort common-lisp:nil :type (common-lisp:or sort common-lisp:null))
   (start common-lisp:nil :type (common-lisp:or start common-lisp:null))
   (stats common-lisp:nil :type (common-lisp:or stat common-lisp:null)))
 (common-lisp:export (common-lisp:list 'search-request 'make-search-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input search-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input search-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input search-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (search-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-search-response-"))
   (status common-lisp:nil :type
    (common-lisp:or search-status common-lisp:null))
   (hits common-lisp:nil :type (common-lisp:or hits common-lisp:null))
   (facets common-lisp:nil :type (common-lisp:or facets common-lisp:null))
   (stats common-lisp:nil :type (common-lisp:or stats common-lisp:null)))
 (common-lisp:export (common-lisp:list 'search-response 'make-search-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input search-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input search-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'hits))
      (common-lisp:list
       (common-lisp:cons "hits"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'facets))
      (common-lisp:list
       (common-lisp:cons "facets"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stats))
      (common-lisp:list
       (common-lisp:cons "stats"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input search-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (search-status (:copier common-lisp:nil)
      (:conc-name "struct-shape-search-status-"))
   (timems common-lisp:nil :type (common-lisp:or long common-lisp:null))
   (rid common-lisp:nil :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export (common-lisp:list 'search-status 'make-search-status))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input search-status))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input search-status))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'timems))
      (common-lisp:list
       (common-lisp:cons "timems"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rid))
      (common-lisp:list
       (common-lisp:cons "rid"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input search-status))
   common-lisp:nil))
(common-lisp:deftype size () 'common-lisp:integer)
(common-lisp:deftype sort () 'common-lisp:string)
(common-lisp:deftype start () 'common-lisp:integer)
(common-lisp:deftype stat () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype stats () 'common-lisp:hash-table)
 (common-lisp:defun |make-stats| (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:deftype string () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (suggest-model (:copier common-lisp:nil)
      (:conc-name "struct-shape-suggest-model-"))
   (query common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (found common-lisp:nil :type (common-lisp:or long common-lisp:null))
   (suggestions common-lisp:nil :type
    (common-lisp:or suggestions common-lisp:null)))
 (common-lisp:export (common-lisp:list 'suggest-model 'make-suggest-model))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input suggest-model))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input suggest-model))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'query))
      (common-lisp:list
       (common-lisp:cons "query"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'found))
      (common-lisp:list
       (common-lisp:cons "found"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'suggestions))
      (common-lisp:list
       (common-lisp:cons "suggestions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input suggest-model))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (suggest-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-suggest-request-"))
   (query (common-lisp:error ":query is required") :type
    (common-lisp:or query common-lisp:null))
   (suggester (common-lisp:error ":suggester is required") :type
    (common-lisp:or suggester common-lisp:null))
   (size common-lisp:nil :type
    (common-lisp:or suggestions-size common-lisp:null)))
 (common-lisp:export (common-lisp:list 'suggest-request 'make-suggest-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input suggest-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input suggest-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input suggest-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (suggest-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-suggest-response-"))
   (status common-lisp:nil :type
    (common-lisp:or suggest-status common-lisp:null))
   (suggest common-lisp:nil :type
    (common-lisp:or suggest-model common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'suggest-response 'make-suggest-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input suggest-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input suggest-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'suggest))
      (common-lisp:list
       (common-lisp:cons "suggest"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input suggest-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (suggest-status (:copier common-lisp:nil)
      (:conc-name "struct-shape-suggest-status-"))
   (timems common-lisp:nil :type (common-lisp:or long common-lisp:null))
   (rid common-lisp:nil :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export (common-lisp:list 'suggest-status 'make-suggest-status))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input suggest-status))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input suggest-status))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'timems))
      (common-lisp:list
       (common-lisp:cons "timems"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rid))
      (common-lisp:list
       (common-lisp:cons "rid"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input suggest-status))
   common-lisp:nil))
(common-lisp:deftype suggester () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (suggestion-match (:copier common-lisp:nil)
      (:conc-name "struct-shape-suggestion-match-"))
   (suggestion common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (score common-lisp:nil :type (common-lisp:or long common-lisp:null))
   (id common-lisp:nil :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'suggestion-match 'make-suggestion-match))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input suggestion-match))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input suggestion-match))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'suggestion))
      (common-lisp:list
       (common-lisp:cons "suggestion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'score))
      (common-lisp:list
       (common-lisp:cons "score"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input suggestion-match))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype suggestions ()
   '(trivial-types:proper-list suggestion-match))
 (common-lisp:defun |make-suggestions|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list suggestion-match))
   aws-sdk/generator/shape::members))
(common-lisp:deftype suggestions-size () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defstruct
     (upload-documents-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-upload-documents-request-"))
   (documents (common-lisp:error ":documents is required") :type
    (common-lisp:or blob common-lisp:null))
   (content-type (common-lisp:error ":contenttype is required") :type
    (common-lisp:or content-type common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'upload-documents-request 'make-upload-documents-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          upload-documents-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'content-type))
      (common-lisp:cons "Content-Type" aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          upload-documents-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'documents))
      (common-lisp:list
       (common-lisp:cons "documents"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          upload-documents-request))
   (common-lisp:slot-value aws-sdk/generator/shape::input 'documents)))
(common-lisp:progn
 (common-lisp:defstruct
     (upload-documents-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-upload-documents-response-"))
   (status common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (adds common-lisp:nil :type (common-lisp:or adds common-lisp:null))
   (deletes common-lisp:nil :type (common-lisp:or deletes common-lisp:null))
   (warnings common-lisp:nil :type
    (common-lisp:or document-service-warnings common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'upload-documents-response
                    'make-upload-documents-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          upload-documents-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          upload-documents-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'adds))
      (common-lisp:list
       (common-lisp:cons "adds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'deletes))
      (common-lisp:list
       (common-lisp:cons "deletes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'warnings))
      (common-lisp:list
       (common-lisp:cons "warnings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          upload-documents-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defun search
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key cursor expr facet filter-query highlight
                     partial query query-options query-parser return size sort
                     start stats)
   (common-lisp:declare
    (common-lisp:ignorable cursor expr facet filter-query highlight partial
     query query-options query-parser return size sort start stats))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-search-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'cloudsearchdomain-request aws-sdk/generator/operation::input "GET"
        "/2013-01-01/search?format=sdk&pretty=true" "Search" "2013-01-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'search))
(common-lisp:progn
 (common-lisp:defun suggest
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key query suggester size)
   (common-lisp:declare (common-lisp:ignorable query suggester size))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-suggest-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'cloudsearchdomain-request aws-sdk/generator/operation::input "GET"
        "/2013-01-01/suggest?format=sdk&pretty=true" "Suggest" "2013-01-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'suggest))
(common-lisp:progn
 (common-lisp:defun upload-documents
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key documents content-type)
   (common-lisp:declare (common-lisp:ignorable documents content-type))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-upload-documents-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'cloudsearchdomain-request aws-sdk/generator/operation::input "POST"
        "/2013-01-01/documents/batch?format=sdk" "UploadDocuments"
        "2013-01-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'upload-documents))
