;; DO NOT EDIT: File is generated by AWS-SDK/GENERATOR.

(common-lisp:defpackage #:aws-sdk/services/route53domains/api
  (:use)
  (:nicknames #:aws/route53domains)
  (:import-from #:aws-sdk/generator/shape)
  (:import-from #:aws-sdk/generator/operation)
  (:import-from #:aws-sdk/api)
  (:import-from #:aws-sdk/request)
  (:import-from #:aws-sdk/error))
(common-lisp:in-package #:aws-sdk/services/route53domains/api)
(common-lisp:progn
 (common-lisp:defclass route53domains-request (aws-sdk/request:request)
                       common-lisp:nil
                       (:default-initargs :service "route53domains" :protocol
                        :json))
 (common-lisp:export 'route53domains-request))
(common-lisp:progn
 (common-lisp:define-condition route53domains-error
     (aws-sdk/error:aws-error)
     common-lisp:nil)
 (common-lisp:export 'route53domains-error))
(common-lisp:defvar *error-map*
  '(("DnssecLimitExceeded" . dnssec-limit-exceeded)
    ("DomainLimitExceeded" . domain-limit-exceeded)
    ("DuplicateRequest" . duplicate-request) ("InvalidInput" . invalid-input)
    ("OperationLimitExceeded" . operation-limit-exceeded)
    ("TLDRulesViolation" . tldrules-violation)
    ("UnsupportedTLD" . unsupported-tld)))
(common-lisp:progn
 (common-lisp:defclass accept-domain-transfer-from-another-aws-account-request
                       common-lisp:nil
                       ((password :initarg :password :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %accept-domain-transfer-from-another-aws-account-request-password
                         :initform (common-lisp:error ":password is required"))
                        (domain-name :initarg :domain-name :type
                         (common-lisp:or domain-name common-lisp:null)
                         :accessor
                         %accept-domain-transfer-from-another-aws-account-request-domain-name
                         :initform
                         (common-lisp:error ":domain-name is required"))))
 (common-lisp:export
  (common-lisp:list 'accept-domain-transfer-from-another-aws-account-request
                    'make-accept-domain-transfer-from-another-aws-account-request))
 (common-lisp:defun make-accept-domain-transfer-from-another-aws-account-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key password domain-name)
   (common-lisp:apply #'common-lisp:make-instance
                      'accept-domain-transfer-from-another-aws-account-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          accept-domain-transfer-from-another-aws-account-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          accept-domain-transfer-from-another-aws-account-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-name))
      (common-lisp:list
       (common-lisp:cons "DomainName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'password))
      (common-lisp:list
       (common-lisp:cons "Password"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          accept-domain-transfer-from-another-aws-account-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass accept-domain-transfer-from-another-aws-account-response
                       common-lisp:nil
                       ((operation-id :initarg :operation-id :type
                         (common-lisp:or operation-id common-lisp:null)
                         :accessor
                         %accept-domain-transfer-from-another-aws-account-response-operation-id
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'accept-domain-transfer-from-another-aws-account-response
                    'make-accept-domain-transfer-from-another-aws-account-response))
 (common-lisp:defun make-accept-domain-transfer-from-another-aws-account-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key operation-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'accept-domain-transfer-from-another-aws-account-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          accept-domain-transfer-from-another-aws-account-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          accept-domain-transfer-from-another-aws-account-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'operation-id))
      (common-lisp:list
       (common-lisp:cons "OperationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          accept-domain-transfer-from-another-aws-account-response))
   common-lisp:nil))
(common-lisp:deftype account-id () 'common-lisp:string)
(common-lisp:deftype address-line () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass associate-delegation-signer-to-domain-request
                       common-lisp:nil
                       ((signing-attributes :initarg :signing-attributes :type
                         (common-lisp:or dnssec-signing-attributes
                                         common-lisp:null)
                         :accessor
                         %associate-delegation-signer-to-domain-request-signing-attributes
                         :initform
                         (common-lisp:error ":signing-attributes is required"))
                        (domain-name :initarg :domain-name :type
                         (common-lisp:or domain-name common-lisp:null)
                         :accessor
                         %associate-delegation-signer-to-domain-request-domain-name
                         :initform
                         (common-lisp:error ":domain-name is required"))))
 (common-lisp:export
  (common-lisp:list 'associate-delegation-signer-to-domain-request
                    'make-associate-delegation-signer-to-domain-request))
 (common-lisp:defun make-associate-delegation-signer-to-domain-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key signing-attributes domain-name)
   (common-lisp:apply #'common-lisp:make-instance
                      'associate-delegation-signer-to-domain-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          associate-delegation-signer-to-domain-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          associate-delegation-signer-to-domain-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-name))
      (common-lisp:list
       (common-lisp:cons "DomainName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'signing-attributes))
      (common-lisp:list
       (common-lisp:cons "SigningAttributes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          associate-delegation-signer-to-domain-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass associate-delegation-signer-to-domain-response
                       common-lisp:nil
                       ((operation-id :initarg :operation-id :type
                         (common-lisp:or operation-id common-lisp:null)
                         :accessor
                         %associate-delegation-signer-to-domain-response-operation-id
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'associate-delegation-signer-to-domain-response
                    'make-associate-delegation-signer-to-domain-response))
 (common-lisp:defun make-associate-delegation-signer-to-domain-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key operation-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'associate-delegation-signer-to-domain-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          associate-delegation-signer-to-domain-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          associate-delegation-signer-to-domain-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'operation-id))
      (common-lisp:list
       (common-lisp:cons "OperationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          associate-delegation-signer-to-domain-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass billing-record common-lisp:nil
                       ((price :initarg :price :type
                         (common-lisp:or price common-lisp:null) :accessor
                         %billing-record-price :initform common-lisp:nil)
                        (bill-date :initarg :bill-date :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %billing-record-bill-date :initform common-lisp:nil)
                        (invoice-id :initarg :invoice-id :type
                         (common-lisp:or invoice-id common-lisp:null) :accessor
                         %billing-record-invoice-id :initform common-lisp:nil)
                        (operation :initarg :operation :type
                         (common-lisp:or operation-type common-lisp:null)
                         :accessor %billing-record-operation :initform
                         common-lisp:nil)
                        (domain-name :initarg :domain-name :type
                         (common-lisp:or domain-name common-lisp:null)
                         :accessor %billing-record-domain-name :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'billing-record 'make-billing-record))
 (common-lisp:defun make-billing-record
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key price bill-date invoice-id operation
                     domain-name)
   (common-lisp:apply #'common-lisp:make-instance 'billing-record
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input billing-record))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input billing-record))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-name))
      (common-lisp:list
       (common-lisp:cons "DomainName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'operation))
      (common-lisp:list
       (common-lisp:cons "Operation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'invoice-id))
      (common-lisp:list
       (common-lisp:cons "InvoiceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bill-date))
      (common-lisp:list
       (common-lisp:cons "BillDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'price))
      (common-lisp:list
       (common-lisp:cons "Price"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input billing-record))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype billing-records ()
   '(trivial-types:proper-list billing-record))
 (common-lisp:defun |make-billing-records|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list billing-record))
   aws-sdk/generator/shape::members))
(common-lisp:deftype boolean () 'common-lisp:boolean)
(common-lisp:progn
 (common-lisp:defclass cancel-domain-transfer-to-another-aws-account-request
                       common-lisp:nil
                       ((domain-name :initarg :domain-name :type
                         (common-lisp:or domain-name common-lisp:null)
                         :accessor
                         %cancel-domain-transfer-to-another-aws-account-request-domain-name
                         :initform
                         (common-lisp:error ":domain-name is required"))))
 (common-lisp:export
  (common-lisp:list 'cancel-domain-transfer-to-another-aws-account-request
                    'make-cancel-domain-transfer-to-another-aws-account-request))
 (common-lisp:defun make-cancel-domain-transfer-to-another-aws-account-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key domain-name)
   (common-lisp:apply #'common-lisp:make-instance
                      'cancel-domain-transfer-to-another-aws-account-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          cancel-domain-transfer-to-another-aws-account-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          cancel-domain-transfer-to-another-aws-account-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-name))
      (common-lisp:list
       (common-lisp:cons "DomainName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          cancel-domain-transfer-to-another-aws-account-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass cancel-domain-transfer-to-another-aws-account-response
                       common-lisp:nil
                       ((operation-id :initarg :operation-id :type
                         (common-lisp:or operation-id common-lisp:null)
                         :accessor
                         %cancel-domain-transfer-to-another-aws-account-response-operation-id
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'cancel-domain-transfer-to-another-aws-account-response
                    'make-cancel-domain-transfer-to-another-aws-account-response))
 (common-lisp:defun make-cancel-domain-transfer-to-another-aws-account-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key operation-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'cancel-domain-transfer-to-another-aws-account-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          cancel-domain-transfer-to-another-aws-account-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          cancel-domain-transfer-to-another-aws-account-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'operation-id))
      (common-lisp:list
       (common-lisp:cons "OperationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          cancel-domain-transfer-to-another-aws-account-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass check-domain-availability-request common-lisp:nil
                       ((idn-lang-code :initarg :idn-lang-code :type
                         (common-lisp:or lang-code common-lisp:null) :accessor
                         %check-domain-availability-request-idn-lang-code
                         :initform common-lisp:nil)
                        (domain-name :initarg :domain-name :type
                         (common-lisp:or domain-name common-lisp:null)
                         :accessor
                         %check-domain-availability-request-domain-name
                         :initform
                         (common-lisp:error ":domain-name is required"))))
 (common-lisp:export
  (common-lisp:list 'check-domain-availability-request
                    'make-check-domain-availability-request))
 (common-lisp:defun make-check-domain-availability-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key idn-lang-code domain-name)
   (common-lisp:apply #'common-lisp:make-instance
                      'check-domain-availability-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          check-domain-availability-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          check-domain-availability-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-name))
      (common-lisp:list
       (common-lisp:cons "DomainName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'idn-lang-code))
      (common-lisp:list
       (common-lisp:cons "IdnLangCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          check-domain-availability-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass check-domain-availability-response common-lisp:nil
                       ((availability :initarg :availability :type
                         (common-lisp:or domain-availability common-lisp:null)
                         :accessor
                         %check-domain-availability-response-availability
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'check-domain-availability-response
                    'make-check-domain-availability-response))
 (common-lisp:defun make-check-domain-availability-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key availability)
   (common-lisp:apply #'common-lisp:make-instance
                      'check-domain-availability-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          check-domain-availability-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          check-domain-availability-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'availability))
      (common-lisp:list
       (common-lisp:cons "Availability"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          check-domain-availability-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass check-domain-transferability-request common-lisp:nil
                       ((auth-code :initarg :auth-code :type
                         (common-lisp:or domain-auth-code common-lisp:null)
                         :accessor
                         %check-domain-transferability-request-auth-code
                         :initform common-lisp:nil)
                        (domain-name :initarg :domain-name :type
                         (common-lisp:or domain-name common-lisp:null)
                         :accessor
                         %check-domain-transferability-request-domain-name
                         :initform
                         (common-lisp:error ":domain-name is required"))))
 (common-lisp:export
  (common-lisp:list 'check-domain-transferability-request
                    'make-check-domain-transferability-request))
 (common-lisp:defun make-check-domain-transferability-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key auth-code domain-name)
   (common-lisp:apply #'common-lisp:make-instance
                      'check-domain-transferability-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          check-domain-transferability-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          check-domain-transferability-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-name))
      (common-lisp:list
       (common-lisp:cons "DomainName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'auth-code))
      (common-lisp:list
       (common-lisp:cons "AuthCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          check-domain-transferability-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass check-domain-transferability-response common-lisp:nil
                       ((transferability :initarg :transferability :type
                         (common-lisp:or domain-transferability
                                         common-lisp:null)
                         :accessor
                         %check-domain-transferability-response-transferability
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'check-domain-transferability-response
                    'make-check-domain-transferability-response))
 (common-lisp:defun make-check-domain-transferability-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key transferability)
   (common-lisp:apply #'common-lisp:make-instance
                      'check-domain-transferability-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          check-domain-transferability-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          check-domain-transferability-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'transferability))
      (common-lisp:list
       (common-lisp:cons "Transferability"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          check-domain-transferability-response))
   common-lisp:nil))
(common-lisp:deftype city () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass consent common-lisp:nil
                       ((currency :initarg :currency :type
                         (common-lisp:or currency common-lisp:null) :accessor
                         %consent-currency :initform
                         (common-lisp:error ":currency is required"))
                        (max-price :initarg :max-price :type
                         (common-lisp:or price common-lisp:null) :accessor
                         %consent-max-price :initform
                         (common-lisp:error ":max-price is required"))))
 (common-lisp:export (common-lisp:list 'consent 'make-consent))
 (common-lisp:defun make-consent
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key currency max-price)
   (common-lisp:apply #'common-lisp:make-instance 'consent
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input consent))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input consent))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-price))
      (common-lisp:list
       (common-lisp:cons "MaxPrice"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'currency))
      (common-lisp:list
       (common-lisp:cons "Currency"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input consent))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass contact-detail common-lisp:nil
                       ((extra-params :initarg :extra-params :type
                         (common-lisp:or extra-param-list common-lisp:null)
                         :accessor %contact-detail-extra-params :initform
                         common-lisp:nil)
                        (fax :initarg :fax :type
                         (common-lisp:or contact-number common-lisp:null)
                         :accessor %contact-detail-fax :initform
                         common-lisp:nil)
                        (email :initarg :email :type
                         (common-lisp:or email common-lisp:null) :accessor
                         %contact-detail-email :initform common-lisp:nil)
                        (phone-number :initarg :phone-number :type
                         (common-lisp:or contact-number common-lisp:null)
                         :accessor %contact-detail-phone-number :initform
                         common-lisp:nil)
                        (zip-code :initarg :zip-code :type
                         (common-lisp:or zip-code common-lisp:null) :accessor
                         %contact-detail-zip-code :initform common-lisp:nil)
                        (country-code :initarg :country-code :type
                         (common-lisp:or country-code common-lisp:null)
                         :accessor %contact-detail-country-code :initform
                         common-lisp:nil)
                        (state :initarg :state :type
                         (common-lisp:or state common-lisp:null) :accessor
                         %contact-detail-state :initform common-lisp:nil)
                        (city :initarg :city :type
                         (common-lisp:or city common-lisp:null) :accessor
                         %contact-detail-city :initform common-lisp:nil)
                        (address-line2 :initarg :address-line2 :type
                         (common-lisp:or address-line common-lisp:null)
                         :accessor %contact-detail-address-line2 :initform
                         common-lisp:nil)
                        (address-line1 :initarg :address-line1 :type
                         (common-lisp:or address-line common-lisp:null)
                         :accessor %contact-detail-address-line1 :initform
                         common-lisp:nil)
                        (organization-name :initarg :organization-name :type
                         (common-lisp:or contact-name common-lisp:null)
                         :accessor %contact-detail-organization-name :initform
                         common-lisp:nil)
                        (contact-type :initarg :contact-type :type
                         (common-lisp:or contact-type common-lisp:null)
                         :accessor %contact-detail-contact-type :initform
                         common-lisp:nil)
                        (last-name :initarg :last-name :type
                         (common-lisp:or contact-name common-lisp:null)
                         :accessor %contact-detail-last-name :initform
                         common-lisp:nil)
                        (first-name :initarg :first-name :type
                         (common-lisp:or contact-name common-lisp:null)
                         :accessor %contact-detail-first-name :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'contact-detail 'make-contact-detail))
 (common-lisp:defun make-contact-detail
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key extra-params fax email phone-number
                     zip-code country-code state city address-line2
                     address-line1 organization-name contact-type last-name
                     first-name)
   (common-lisp:apply #'common-lisp:make-instance 'contact-detail
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input contact-detail))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input contact-detail))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'first-name))
      (common-lisp:list
       (common-lisp:cons "FirstName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-name))
      (common-lisp:list
       (common-lisp:cons "LastName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'contact-type))
      (common-lisp:list
       (common-lisp:cons "ContactType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'organization-name))
      (common-lisp:list
       (common-lisp:cons "OrganizationName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'address-line1))
      (common-lisp:list
       (common-lisp:cons "AddressLine1"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'address-line2))
      (common-lisp:list
       (common-lisp:cons "AddressLine2"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'city))
      (common-lisp:list
       (common-lisp:cons "City"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "State"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'country-code))
      (common-lisp:list
       (common-lisp:cons "CountryCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'zip-code))
      (common-lisp:list
       (common-lisp:cons "ZipCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'phone-number))
      (common-lisp:list
       (common-lisp:cons "PhoneNumber"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'email))
      (common-lisp:list
       (common-lisp:cons "Email"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'fax))
      (common-lisp:list
       (common-lisp:cons "Fax"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'extra-params))
      (common-lisp:list
       (common-lisp:cons "ExtraParams"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input contact-detail))
   common-lisp:nil))
(common-lisp:deftype contact-name () 'common-lisp:string)
(common-lisp:deftype contact-number () 'common-lisp:string)
(common-lisp:deftype contact-type () 'common-lisp:string)
(common-lisp:deftype country-code () 'common-lisp:string)
(common-lisp:deftype currency () 'common-lisp:string)
(common-lisp:deftype current-expiry-year () 'common-lisp:integer)
(common-lisp:deftype dnssec () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass delete-domain-request common-lisp:nil
                       ((domain-name :initarg :domain-name :type
                         (common-lisp:or domain-name common-lisp:null)
                         :accessor %delete-domain-request-domain-name :initform
                         (common-lisp:error ":domain-name is required"))))
 (common-lisp:export
  (common-lisp:list 'delete-domain-request 'make-delete-domain-request))
 (common-lisp:defun make-delete-domain-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key domain-name)
   (common-lisp:apply #'common-lisp:make-instance 'delete-domain-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-domain-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-domain-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-name))
      (common-lisp:list
       (common-lisp:cons "DomainName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-domain-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-domain-response common-lisp:nil
                       ((operation-id :initarg :operation-id :type
                         (common-lisp:or operation-id common-lisp:null)
                         :accessor %delete-domain-response-operation-id
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'delete-domain-response 'make-delete-domain-response))
 (common-lisp:defun make-delete-domain-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key operation-id)
   (common-lisp:apply #'common-lisp:make-instance 'delete-domain-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-domain-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-domain-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'operation-id))
      (common-lisp:list
       (common-lisp:cons "OperationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-domain-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-tags-for-domain-request common-lisp:nil
                       ((tags-to-delete :initarg :tags-to-delete :type
                         (common-lisp:or tag-key-list common-lisp:null)
                         :accessor
                         %delete-tags-for-domain-request-tags-to-delete
                         :initform
                         (common-lisp:error ":tags-to-delete is required"))
                        (domain-name :initarg :domain-name :type
                         (common-lisp:or domain-name common-lisp:null)
                         :accessor %delete-tags-for-domain-request-domain-name
                         :initform
                         (common-lisp:error ":domain-name is required"))))
 (common-lisp:export
  (common-lisp:list 'delete-tags-for-domain-request
                    'make-delete-tags-for-domain-request))
 (common-lisp:defun make-delete-tags-for-domain-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tags-to-delete domain-name)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-tags-for-domain-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-tags-for-domain-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-tags-for-domain-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-name))
      (common-lisp:list
       (common-lisp:cons "DomainName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags-to-delete))
      (common-lisp:list
       (common-lisp:cons "TagsToDelete"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-tags-for-domain-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-tags-for-domain-response common-lisp:nil
                       common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'delete-tags-for-domain-response
                    'make-delete-tags-for-domain-response))
 (common-lisp:defun make-delete-tags-for-domain-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-tags-for-domain-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-tags-for-domain-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-tags-for-domain-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-tags-for-domain-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass disable-domain-auto-renew-request common-lisp:nil
                       ((domain-name :initarg :domain-name :type
                         (common-lisp:or domain-name common-lisp:null)
                         :accessor
                         %disable-domain-auto-renew-request-domain-name
                         :initform
                         (common-lisp:error ":domain-name is required"))))
 (common-lisp:export
  (common-lisp:list 'disable-domain-auto-renew-request
                    'make-disable-domain-auto-renew-request))
 (common-lisp:defun make-disable-domain-auto-renew-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key domain-name)
   (common-lisp:apply #'common-lisp:make-instance
                      'disable-domain-auto-renew-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          disable-domain-auto-renew-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          disable-domain-auto-renew-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-name))
      (common-lisp:list
       (common-lisp:cons "DomainName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          disable-domain-auto-renew-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass disable-domain-auto-renew-response common-lisp:nil
                       common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'disable-domain-auto-renew-response
                    'make-disable-domain-auto-renew-response))
 (common-lisp:defun make-disable-domain-auto-renew-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance
                      'disable-domain-auto-renew-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          disable-domain-auto-renew-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          disable-domain-auto-renew-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          disable-domain-auto-renew-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass disable-domain-transfer-lock-request common-lisp:nil
                       ((domain-name :initarg :domain-name :type
                         (common-lisp:or domain-name common-lisp:null)
                         :accessor
                         %disable-domain-transfer-lock-request-domain-name
                         :initform
                         (common-lisp:error ":domain-name is required"))))
 (common-lisp:export
  (common-lisp:list 'disable-domain-transfer-lock-request
                    'make-disable-domain-transfer-lock-request))
 (common-lisp:defun make-disable-domain-transfer-lock-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key domain-name)
   (common-lisp:apply #'common-lisp:make-instance
                      'disable-domain-transfer-lock-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          disable-domain-transfer-lock-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          disable-domain-transfer-lock-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-name))
      (common-lisp:list
       (common-lisp:cons "DomainName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          disable-domain-transfer-lock-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass disable-domain-transfer-lock-response common-lisp:nil
                       ((operation-id :initarg :operation-id :type
                         (common-lisp:or operation-id common-lisp:null)
                         :accessor
                         %disable-domain-transfer-lock-response-operation-id
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'disable-domain-transfer-lock-response
                    'make-disable-domain-transfer-lock-response))
 (common-lisp:defun make-disable-domain-transfer-lock-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key operation-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'disable-domain-transfer-lock-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          disable-domain-transfer-lock-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          disable-domain-transfer-lock-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'operation-id))
      (common-lisp:list
       (common-lisp:cons "OperationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          disable-domain-transfer-lock-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass disassociate-delegation-signer-from-domain-request
                       common-lisp:nil
                       ((id :initarg :id :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %disassociate-delegation-signer-from-domain-request-id
                         :initform (common-lisp:error ":id is required"))
                        (domain-name :initarg :domain-name :type
                         (common-lisp:or domain-name common-lisp:null)
                         :accessor
                         %disassociate-delegation-signer-from-domain-request-domain-name
                         :initform
                         (common-lisp:error ":domain-name is required"))))
 (common-lisp:export
  (common-lisp:list 'disassociate-delegation-signer-from-domain-request
                    'make-disassociate-delegation-signer-from-domain-request))
 (common-lisp:defun make-disassociate-delegation-signer-from-domain-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key id domain-name)
   (common-lisp:apply #'common-lisp:make-instance
                      'disassociate-delegation-signer-from-domain-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-delegation-signer-from-domain-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-delegation-signer-from-domain-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-name))
      (common-lisp:list
       (common-lisp:cons "DomainName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-delegation-signer-from-domain-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass disassociate-delegation-signer-from-domain-response
                       common-lisp:nil
                       ((operation-id :initarg :operation-id :type
                         (common-lisp:or operation-id common-lisp:null)
                         :accessor
                         %disassociate-delegation-signer-from-domain-response-operation-id
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'disassociate-delegation-signer-from-domain-response
                    'make-disassociate-delegation-signer-from-domain-response))
 (common-lisp:defun make-disassociate-delegation-signer-from-domain-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key operation-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'disassociate-delegation-signer-from-domain-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-delegation-signer-from-domain-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-delegation-signer-from-domain-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'operation-id))
      (common-lisp:list
       (common-lisp:cons "OperationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-delegation-signer-from-domain-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass dnssec-key common-lisp:nil
                       ((id :initarg :id :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %dnssec-key-id :initform common-lisp:nil)
                        (key-tag :initarg :key-tag :type
                         (common-lisp:or nullable-integer common-lisp:null)
                         :accessor %dnssec-key-key-tag :initform
                         common-lisp:nil)
                        (digest :initarg :digest :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %dnssec-key-digest :initform common-lisp:nil)
                        (digest-type :initarg :digest-type :type
                         (common-lisp:or nullable-integer common-lisp:null)
                         :accessor %dnssec-key-digest-type :initform
                         common-lisp:nil)
                        (public-key :initarg :public-key :type
                         (common-lisp:or dnssec-public-key common-lisp:null)
                         :accessor %dnssec-key-public-key :initform
                         common-lisp:nil)
                        (flags :initarg :flags :type
                         (common-lisp:or nullable-integer common-lisp:null)
                         :accessor %dnssec-key-flags :initform common-lisp:nil)
                        (algorithm :initarg :algorithm :type
                         (common-lisp:or nullable-integer common-lisp:null)
                         :accessor %dnssec-key-algorithm :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'dnssec-key 'make-dnssec-key))
 (common-lisp:defun make-dnssec-key
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key id key-tag digest digest-type public-key
                     flags algorithm)
   (common-lisp:apply #'common-lisp:make-instance 'dnssec-key
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input dnssec-key))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input dnssec-key))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'algorithm))
      (common-lisp:list
       (common-lisp:cons "Algorithm"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'flags))
      (common-lisp:list
       (common-lisp:cons "Flags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'public-key))
      (common-lisp:list
       (common-lisp:cons "PublicKey"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'digest-type))
      (common-lisp:list
       (common-lisp:cons "DigestType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'digest))
      (common-lisp:list
       (common-lisp:cons "Digest"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key-tag))
      (common-lisp:list
       (common-lisp:cons "KeyTag"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input dnssec-key))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype dnssec-key-list ()
   '(trivial-types:proper-list dnssec-key))
 (common-lisp:defun |make-dnssec-key-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list dnssec-key))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition dnssec-limit-exceeded
     (route53domains-error)
     ((message :initarg :|message| :initform common-lisp:nil :reader
       dnssec-limit-exceeded-message)))
 (common-lisp:export
  (common-lisp:list 'dnssec-limit-exceeded 'dnssec-limit-exceeded-message)))
(common-lisp:deftype dnssec-public-key () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass dnssec-signing-attributes common-lisp:nil
                       ((public-key :initarg :public-key :type
                         (common-lisp:or dnssec-public-key common-lisp:null)
                         :accessor %dnssec-signing-attributes-public-key
                         :initform common-lisp:nil)
                        (flags :initarg :flags :type
                         (common-lisp:or nullable-integer common-lisp:null)
                         :accessor %dnssec-signing-attributes-flags :initform
                         common-lisp:nil)
                        (algorithm :initarg :algorithm :type
                         (common-lisp:or nullable-integer common-lisp:null)
                         :accessor %dnssec-signing-attributes-algorithm
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'dnssec-signing-attributes
                    'make-dnssec-signing-attributes))
 (common-lisp:defun make-dnssec-signing-attributes
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key public-key flags algorithm)
   (common-lisp:apply #'common-lisp:make-instance 'dnssec-signing-attributes
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          dnssec-signing-attributes))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          dnssec-signing-attributes))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'algorithm))
      (common-lisp:list
       (common-lisp:cons "Algorithm"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'flags))
      (common-lisp:list
       (common-lisp:cons "Flags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'public-key))
      (common-lisp:list
       (common-lisp:cons "PublicKey"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          dnssec-signing-attributes))
   common-lisp:nil))
(common-lisp:deftype domain-auth-code () 'common-lisp:string)
(common-lisp:deftype domain-availability () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition domain-limit-exceeded
     (route53domains-error)
     ((message :initarg :|message| :initform common-lisp:nil :reader
       domain-limit-exceeded-message)))
 (common-lisp:export
  (common-lisp:list 'domain-limit-exceeded 'domain-limit-exceeded-message)))
(common-lisp:deftype domain-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass domain-price common-lisp:nil
                       ((restoration-price :initarg :restoration-price :type
                         (common-lisp:or price-with-currency common-lisp:null)
                         :accessor %domain-price-restoration-price :initform
                         common-lisp:nil)
                        (change-ownership-price :initarg
                         :change-ownership-price :type
                         (common-lisp:or price-with-currency common-lisp:null)
                         :accessor %domain-price-change-ownership-price
                         :initform common-lisp:nil)
                        (renewal-price :initarg :renewal-price :type
                         (common-lisp:or price-with-currency common-lisp:null)
                         :accessor %domain-price-renewal-price :initform
                         common-lisp:nil)
                        (transfer-price :initarg :transfer-price :type
                         (common-lisp:or price-with-currency common-lisp:null)
                         :accessor %domain-price-transfer-price :initform
                         common-lisp:nil)
                        (registration-price :initarg :registration-price :type
                         (common-lisp:or price-with-currency common-lisp:null)
                         :accessor %domain-price-registration-price :initform
                         common-lisp:nil)
                        (name :initarg :name :type
                         (common-lisp:or domain-price-name common-lisp:null)
                         :accessor %domain-price-name :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'domain-price 'make-domain-price))
 (common-lisp:defun make-domain-price
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key restoration-price change-ownership-price
                     renewal-price transfer-price registration-price name)
   (common-lisp:apply #'common-lisp:make-instance 'domain-price
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input domain-price))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input domain-price))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'registration-price))
      (common-lisp:list
       (common-lisp:cons "RegistrationPrice"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'transfer-price))
      (common-lisp:list
       (common-lisp:cons "TransferPrice"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'renewal-price))
      (common-lisp:list
       (common-lisp:cons "RenewalPrice"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'change-ownership-price))
      (common-lisp:list
       (common-lisp:cons "ChangeOwnershipPrice"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'restoration-price))
      (common-lisp:list
       (common-lisp:cons "RestorationPrice"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input domain-price))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype domain-price-list ()
   '(trivial-types:proper-list domain-price))
 (common-lisp:defun |make-domain-price-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list domain-price))
   aws-sdk/generator/shape::members))
(common-lisp:deftype domain-price-name () 'common-lisp:string)
(common-lisp:deftype domain-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype domain-status-list ()
   '(trivial-types:proper-list domain-status))
 (common-lisp:defun |make-domain-status-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list domain-status))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass domain-suggestion common-lisp:nil
                       ((availability :initarg :availability :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %domain-suggestion-availability :initform
                         common-lisp:nil)
                        (domain-name :initarg :domain-name :type
                         (common-lisp:or domain-name common-lisp:null)
                         :accessor %domain-suggestion-domain-name :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'domain-suggestion 'make-domain-suggestion))
 (common-lisp:defun make-domain-suggestion
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key availability domain-name)
   (common-lisp:apply #'common-lisp:make-instance 'domain-suggestion
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input domain-suggestion))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input domain-suggestion))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-name))
      (common-lisp:list
       (common-lisp:cons "DomainName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'availability))
      (common-lisp:list
       (common-lisp:cons "Availability"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input domain-suggestion))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype domain-suggestions-list ()
   '(trivial-types:proper-list domain-suggestion))
 (common-lisp:defun |make-domain-suggestions-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list domain-suggestion))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass domain-summary common-lisp:nil
                       ((expiry :initarg :expiry :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %domain-summary-expiry :initform common-lisp:nil)
                        (transfer-lock :initarg :transfer-lock :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         %domain-summary-transfer-lock :initform
                         common-lisp:nil)
                        (auto-renew :initarg :auto-renew :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         %domain-summary-auto-renew :initform common-lisp:nil)
                        (domain-name :initarg :domain-name :type
                         (common-lisp:or domain-name common-lisp:null)
                         :accessor %domain-summary-domain-name :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'domain-summary 'make-domain-summary))
 (common-lisp:defun make-domain-summary
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key expiry transfer-lock auto-renew
                     domain-name)
   (common-lisp:apply #'common-lisp:make-instance 'domain-summary
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input domain-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input domain-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-name))
      (common-lisp:list
       (common-lisp:cons "DomainName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'auto-renew))
      (common-lisp:list
       (common-lisp:cons "AutoRenew"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'transfer-lock))
      (common-lisp:list
       (common-lisp:cons "TransferLock"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'expiry))
      (common-lisp:list
       (common-lisp:cons "Expiry"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input domain-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype domain-summary-list ()
   '(trivial-types:proper-list domain-summary))
 (common-lisp:defun |make-domain-summary-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list domain-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass domain-transferability common-lisp:nil
                       ((transferable :initarg :transferable :type
                         (common-lisp:or transferable common-lisp:null)
                         :accessor %domain-transferability-transferable
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'domain-transferability 'make-domain-transferability))
 (common-lisp:defun make-domain-transferability
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key transferable)
   (common-lisp:apply #'common-lisp:make-instance 'domain-transferability
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          domain-transferability))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          domain-transferability))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'transferable))
      (common-lisp:list
       (common-lisp:cons "Transferable"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          domain-transferability))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition duplicate-request
     (route53domains-error)
     ((message :initarg :|message| :initform common-lisp:nil :reader
       duplicate-request-message)))
 (common-lisp:export
  (common-lisp:list 'duplicate-request 'duplicate-request-message)))
(common-lisp:deftype duration-in-years () 'common-lisp:integer)
(common-lisp:deftype email () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass enable-domain-auto-renew-request common-lisp:nil
                       ((domain-name :initarg :domain-name :type
                         (common-lisp:or domain-name common-lisp:null)
                         :accessor
                         %enable-domain-auto-renew-request-domain-name
                         :initform
                         (common-lisp:error ":domain-name is required"))))
 (common-lisp:export
  (common-lisp:list 'enable-domain-auto-renew-request
                    'make-enable-domain-auto-renew-request))
 (common-lisp:defun make-enable-domain-auto-renew-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key domain-name)
   (common-lisp:apply #'common-lisp:make-instance
                      'enable-domain-auto-renew-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          enable-domain-auto-renew-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          enable-domain-auto-renew-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-name))
      (common-lisp:list
       (common-lisp:cons "DomainName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          enable-domain-auto-renew-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass enable-domain-auto-renew-response common-lisp:nil
                       common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'enable-domain-auto-renew-response
                    'make-enable-domain-auto-renew-response))
 (common-lisp:defun make-enable-domain-auto-renew-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance
                      'enable-domain-auto-renew-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          enable-domain-auto-renew-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          enable-domain-auto-renew-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          enable-domain-auto-renew-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass enable-domain-transfer-lock-request common-lisp:nil
                       ((domain-name :initarg :domain-name :type
                         (common-lisp:or domain-name common-lisp:null)
                         :accessor
                         %enable-domain-transfer-lock-request-domain-name
                         :initform
                         (common-lisp:error ":domain-name is required"))))
 (common-lisp:export
  (common-lisp:list 'enable-domain-transfer-lock-request
                    'make-enable-domain-transfer-lock-request))
 (common-lisp:defun make-enable-domain-transfer-lock-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key domain-name)
   (common-lisp:apply #'common-lisp:make-instance
                      'enable-domain-transfer-lock-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          enable-domain-transfer-lock-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          enable-domain-transfer-lock-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-name))
      (common-lisp:list
       (common-lisp:cons "DomainName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          enable-domain-transfer-lock-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass enable-domain-transfer-lock-response common-lisp:nil
                       ((operation-id :initarg :operation-id :type
                         (common-lisp:or operation-id common-lisp:null)
                         :accessor
                         %enable-domain-transfer-lock-response-operation-id
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'enable-domain-transfer-lock-response
                    'make-enable-domain-transfer-lock-response))
 (common-lisp:defun make-enable-domain-transfer-lock-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key operation-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'enable-domain-transfer-lock-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          enable-domain-transfer-lock-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          enable-domain-transfer-lock-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'operation-id))
      (common-lisp:list
       (common-lisp:cons "OperationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          enable-domain-transfer-lock-response))
   common-lisp:nil))
(common-lisp:deftype error-message () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass extra-param common-lisp:nil
                       ((value :initarg :value :type
                         (common-lisp:or extra-param-value common-lisp:null)
                         :accessor %extra-param-value :initform
                         (common-lisp:error ":value is required"))
                        (name :initarg :name :type
                         (common-lisp:or extra-param-name common-lisp:null)
                         :accessor %extra-param-name :initform
                         (common-lisp:error ":name is required"))))
 (common-lisp:export (common-lisp:list 'extra-param 'make-extra-param))
 (common-lisp:defun make-extra-param
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key value name)
   (common-lisp:apply #'common-lisp:make-instance 'extra-param
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input extra-param))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input extra-param))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "Value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input extra-param))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype extra-param-list ()
   '(trivial-types:proper-list extra-param))
 (common-lisp:defun |make-extra-param-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list extra-param))
   aws-sdk/generator/shape::members))
(common-lisp:deftype extra-param-name () 'common-lisp:string)
(common-lisp:deftype extra-param-value () 'common-lisp:string)
(common-lisp:deftype fiauth-key () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass filter-condition common-lisp:nil
                       ((values :initarg :values :type
                         (common-lisp:or values common-lisp:null) :accessor
                         %filter-condition-values :initform
                         (common-lisp:error ":values is required"))
                        (operator :initarg :operator :type
                         (common-lisp:or operator common-lisp:null) :accessor
                         %filter-condition-operator :initform
                         (common-lisp:error ":operator is required"))
                        (name :initarg :name :type
                         (common-lisp:or list-domains-attribute-name
                                         common-lisp:null)
                         :accessor %filter-condition-name :initform
                         (common-lisp:error ":name is required"))))
 (common-lisp:export
  (common-lisp:list 'filter-condition 'make-filter-condition))
 (common-lisp:defun make-filter-condition
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key values operator name)
   (common-lisp:apply #'common-lisp:make-instance 'filter-condition
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input filter-condition))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input filter-condition))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'operator))
      (common-lisp:list
       (common-lisp:cons "Operator"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'values))
      (common-lisp:list
       (common-lisp:cons "Values"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input filter-condition))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype filter-conditions ()
   '(trivial-types:proper-list filter-condition))
 (common-lisp:defun |make-filter-conditions|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list filter-condition))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass get-contact-reachability-status-request common-lisp:nil
                       ((domain-name :initarg :|domainName| :type
                         (common-lisp:or domain-name common-lisp:null)
                         :accessor
                         %get-contact-reachability-status-request-domain-name
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'get-contact-reachability-status-request
                    'make-get-contact-reachability-status-request))
 (common-lisp:defun make-get-contact-reachability-status-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key domain-name)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-contact-reachability-status-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-contact-reachability-status-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-contact-reachability-status-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-name))
      (common-lisp:list
       (common-lisp:cons "domainName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-contact-reachability-status-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-contact-reachability-status-response common-lisp:nil
                       ((status :initarg :|status| :type
                         (common-lisp:or reachability-status common-lisp:null)
                         :accessor
                         %get-contact-reachability-status-response-status
                         :initform common-lisp:nil)
                        (domain-name :initarg :|domainName| :type
                         (common-lisp:or domain-name common-lisp:null)
                         :accessor
                         %get-contact-reachability-status-response-domain-name
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'get-contact-reachability-status-response
                    'make-get-contact-reachability-status-response))
 (common-lisp:defun make-get-contact-reachability-status-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key status domain-name)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-contact-reachability-status-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-contact-reachability-status-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-contact-reachability-status-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-name))
      (common-lisp:list
       (common-lisp:cons "domainName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-contact-reachability-status-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-domain-detail-request common-lisp:nil
                       ((domain-name :initarg :domain-name :type
                         (common-lisp:or domain-name common-lisp:null)
                         :accessor %get-domain-detail-request-domain-name
                         :initform
                         (common-lisp:error ":domain-name is required"))))
 (common-lisp:export
  (common-lisp:list 'get-domain-detail-request
                    'make-get-domain-detail-request))
 (common-lisp:defun make-get-domain-detail-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key domain-name)
   (common-lisp:apply #'common-lisp:make-instance 'get-domain-detail-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-domain-detail-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-domain-detail-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-name))
      (common-lisp:list
       (common-lisp:cons "DomainName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-domain-detail-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-domain-detail-response common-lisp:nil
                       ((dnssec-keys :initarg :dnssec-keys :type
                         (common-lisp:or dnssec-key-list common-lisp:null)
                         :accessor %get-domain-detail-response-dnssec-keys
                         :initform common-lisp:nil)
                        (status-list :initarg :status-list :type
                         (common-lisp:or domain-status-list common-lisp:null)
                         :accessor %get-domain-detail-response-status-list
                         :initform common-lisp:nil)
                        (dns-sec :initarg :dns-sec :type
                         (common-lisp:or dnssec common-lisp:null) :accessor
                         %get-domain-detail-response-dns-sec :initform
                         common-lisp:nil)
                        (reseller :initarg :reseller :type
                         (common-lisp:or reseller common-lisp:null) :accessor
                         %get-domain-detail-response-reseller :initform
                         common-lisp:nil)
                        (expiration-date :initarg :expiration-date :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %get-domain-detail-response-expiration-date :initform
                         common-lisp:nil)
                        (updated-date :initarg :updated-date :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %get-domain-detail-response-updated-date :initform
                         common-lisp:nil)
                        (creation-date :initarg :creation-date :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %get-domain-detail-response-creation-date :initform
                         common-lisp:nil)
                        (registry-domain-id :initarg :registry-domain-id :type
                         (common-lisp:or registry-domain-id common-lisp:null)
                         :accessor
                         %get-domain-detail-response-registry-domain-id
                         :initform common-lisp:nil)
                        (abuse-contact-phone :initarg :abuse-contact-phone
                         :type (common-lisp:or contact-number common-lisp:null)
                         :accessor
                         %get-domain-detail-response-abuse-contact-phone
                         :initform common-lisp:nil)
                        (abuse-contact-email :initarg :abuse-contact-email
                         :type (common-lisp:or email common-lisp:null)
                         :accessor
                         %get-domain-detail-response-abuse-contact-email
                         :initform common-lisp:nil)
                        (registrar-url :initarg :registrar-url :type
                         (common-lisp:or registrar-url common-lisp:null)
                         :accessor %get-domain-detail-response-registrar-url
                         :initform common-lisp:nil)
                        (who-is-server :initarg :who-is-server :type
                         (common-lisp:or registrar-who-is-server
                                         common-lisp:null)
                         :accessor %get-domain-detail-response-who-is-server
                         :initform common-lisp:nil)
                        (registrar-name :initarg :registrar-name :type
                         (common-lisp:or registrar-name common-lisp:null)
                         :accessor %get-domain-detail-response-registrar-name
                         :initform common-lisp:nil)
                        (tech-privacy :initarg :tech-privacy :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         %get-domain-detail-response-tech-privacy :initform
                         common-lisp:nil)
                        (registrant-privacy :initarg :registrant-privacy :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         %get-domain-detail-response-registrant-privacy
                         :initform common-lisp:nil)
                        (admin-privacy :initarg :admin-privacy :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         %get-domain-detail-response-admin-privacy :initform
                         common-lisp:nil)
                        (tech-contact :initarg :tech-contact :type
                         (common-lisp:or contact-detail common-lisp:null)
                         :accessor %get-domain-detail-response-tech-contact
                         :initform common-lisp:nil)
                        (registrant-contact :initarg :registrant-contact :type
                         (common-lisp:or contact-detail common-lisp:null)
                         :accessor
                         %get-domain-detail-response-registrant-contact
                         :initform common-lisp:nil)
                        (admin-contact :initarg :admin-contact :type
                         (common-lisp:or contact-detail common-lisp:null)
                         :accessor %get-domain-detail-response-admin-contact
                         :initform common-lisp:nil)
                        (auto-renew :initarg :auto-renew :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         %get-domain-detail-response-auto-renew :initform
                         common-lisp:nil)
                        (nameservers :initarg :nameservers :type
                         (common-lisp:or nameserver-list common-lisp:null)
                         :accessor %get-domain-detail-response-nameservers
                         :initform common-lisp:nil)
                        (domain-name :initarg :domain-name :type
                         (common-lisp:or domain-name common-lisp:null)
                         :accessor %get-domain-detail-response-domain-name
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'get-domain-detail-response
                    'make-get-domain-detail-response))
 (common-lisp:defun make-get-domain-detail-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key dnssec-keys status-list dns-sec reseller
                     expiration-date updated-date creation-date
                     registry-domain-id abuse-contact-phone abuse-contact-email
                     registrar-url who-is-server registrar-name tech-privacy
                     registrant-privacy admin-privacy tech-contact
                     registrant-contact admin-contact auto-renew nameservers
                     domain-name)
   (common-lisp:apply #'common-lisp:make-instance 'get-domain-detail-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-domain-detail-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-domain-detail-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-name))
      (common-lisp:list
       (common-lisp:cons "DomainName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'nameservers))
      (common-lisp:list
       (common-lisp:cons "Nameservers"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'auto-renew))
      (common-lisp:list
       (common-lisp:cons "AutoRenew"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'admin-contact))
      (common-lisp:list
       (common-lisp:cons "AdminContact"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'registrant-contact))
      (common-lisp:list
       (common-lisp:cons "RegistrantContact"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tech-contact))
      (common-lisp:list
       (common-lisp:cons "TechContact"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'admin-privacy))
      (common-lisp:list
       (common-lisp:cons "AdminPrivacy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'registrant-privacy))
      (common-lisp:list
       (common-lisp:cons "RegistrantPrivacy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tech-privacy))
      (common-lisp:list
       (common-lisp:cons "TechPrivacy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'registrar-name))
      (common-lisp:list
       (common-lisp:cons "RegistrarName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'who-is-server))
      (common-lisp:list
       (common-lisp:cons "WhoIsServer"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'registrar-url))
      (common-lisp:list
       (common-lisp:cons "RegistrarUrl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'abuse-contact-email))
      (common-lisp:list
       (common-lisp:cons "AbuseContactEmail"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'abuse-contact-phone))
      (common-lisp:list
       (common-lisp:cons "AbuseContactPhone"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'registry-domain-id))
      (common-lisp:list
       (common-lisp:cons "RegistryDomainId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-date))
      (common-lisp:list
       (common-lisp:cons "CreationDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'updated-date))
      (common-lisp:list
       (common-lisp:cons "UpdatedDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'expiration-date))
      (common-lisp:list
       (common-lisp:cons "ExpirationDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'reseller))
      (common-lisp:list
       (common-lisp:cons "Reseller"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dns-sec))
      (common-lisp:list
       (common-lisp:cons "DnsSec"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status-list))
      (common-lisp:list
       (common-lisp:cons "StatusList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dnssec-keys))
      (common-lisp:list
       (common-lisp:cons "DnssecKeys"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-domain-detail-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-domain-suggestions-request common-lisp:nil
                       ((only-available :initarg :only-available :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         %get-domain-suggestions-request-only-available
                         :initform
                         (common-lisp:error ":only-available is required"))
                        (suggestion-count :initarg :suggestion-count :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         %get-domain-suggestions-request-suggestion-count
                         :initform
                         (common-lisp:error ":suggestion-count is required"))
                        (domain-name :initarg :domain-name :type
                         (common-lisp:or domain-name common-lisp:null)
                         :accessor %get-domain-suggestions-request-domain-name
                         :initform
                         (common-lisp:error ":domain-name is required"))))
 (common-lisp:export
  (common-lisp:list 'get-domain-suggestions-request
                    'make-get-domain-suggestions-request))
 (common-lisp:defun make-get-domain-suggestions-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key only-available suggestion-count
                     domain-name)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-domain-suggestions-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-domain-suggestions-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-domain-suggestions-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-name))
      (common-lisp:list
       (common-lisp:cons "DomainName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'suggestion-count))
      (common-lisp:list
       (common-lisp:cons "SuggestionCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'only-available))
      (common-lisp:list
       (common-lisp:cons "OnlyAvailable"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-domain-suggestions-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-domain-suggestions-response common-lisp:nil
                       ((suggestions-list :initarg :suggestions-list :type
                         (common-lisp:or domain-suggestions-list
                                         common-lisp:null)
                         :accessor
                         %get-domain-suggestions-response-suggestions-list
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'get-domain-suggestions-response
                    'make-get-domain-suggestions-response))
 (common-lisp:defun make-get-domain-suggestions-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key suggestions-list)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-domain-suggestions-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-domain-suggestions-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-domain-suggestions-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'suggestions-list))
      (common-lisp:list
       (common-lisp:cons "SuggestionsList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-domain-suggestions-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-operation-detail-request common-lisp:nil
                       ((operation-id :initarg :operation-id :type
                         (common-lisp:or operation-id common-lisp:null)
                         :accessor %get-operation-detail-request-operation-id
                         :initform
                         (common-lisp:error ":operation-id is required"))))
 (common-lisp:export
  (common-lisp:list 'get-operation-detail-request
                    'make-get-operation-detail-request))
 (common-lisp:defun make-get-operation-detail-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key operation-id)
   (common-lisp:apply #'common-lisp:make-instance 'get-operation-detail-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-operation-detail-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-operation-detail-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'operation-id))
      (common-lisp:list
       (common-lisp:cons "OperationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-operation-detail-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-operation-detail-response common-lisp:nil
                       ((status-flag :initarg :status-flag :type
                         (common-lisp:or status-flag common-lisp:null)
                         :accessor %get-operation-detail-response-status-flag
                         :initform common-lisp:nil)
                        (last-updated-date :initarg :last-updated-date :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %get-operation-detail-response-last-updated-date
                         :initform common-lisp:nil)
                        (submitted-date :initarg :submitted-date :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %get-operation-detail-response-submitted-date
                         :initform common-lisp:nil)
                        (type :initarg :type :type
                         (common-lisp:or operation-type common-lisp:null)
                         :accessor %get-operation-detail-response-type
                         :initform common-lisp:nil)
                        (domain-name :initarg :domain-name :type
                         (common-lisp:or domain-name common-lisp:null)
                         :accessor %get-operation-detail-response-domain-name
                         :initform common-lisp:nil)
                        (message :initarg :message :type
                         (common-lisp:or error-message common-lisp:null)
                         :accessor %get-operation-detail-response-message
                         :initform common-lisp:nil)
                        (status :initarg :status :type
                         (common-lisp:or operation-status common-lisp:null)
                         :accessor %get-operation-detail-response-status
                         :initform common-lisp:nil)
                        (operation-id :initarg :operation-id :type
                         (common-lisp:or operation-id common-lisp:null)
                         :accessor %get-operation-detail-response-operation-id
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'get-operation-detail-response
                    'make-get-operation-detail-response))
 (common-lisp:defun make-get-operation-detail-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key status-flag last-updated-date
                     submitted-date type domain-name message status
                     operation-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-operation-detail-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-operation-detail-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-operation-detail-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'operation-id))
      (common-lisp:list
       (common-lisp:cons "OperationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message))
      (common-lisp:list
       (common-lisp:cons "Message"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-name))
      (common-lisp:list
       (common-lisp:cons "DomainName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'submitted-date))
      (common-lisp:list
       (common-lisp:cons "SubmittedDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-updated-date))
      (common-lisp:list
       (common-lisp:cons "LastUpdatedDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status-flag))
      (common-lisp:list
       (common-lisp:cons "StatusFlag"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-operation-detail-response))
   common-lisp:nil))
(common-lisp:deftype glue-ip () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype glue-ip-list () '(trivial-types:proper-list glue-ip))
 (common-lisp:defun |make-glue-ip-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list glue-ip))
   aws-sdk/generator/shape::members))
(common-lisp:deftype host-name () 'common-lisp:string)
(common-lisp:deftype integer () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:define-condition invalid-input
     (route53domains-error)
     ((message :initarg :|message| :initform common-lisp:nil :reader
       invalid-input-message)))
 (common-lisp:export (common-lisp:list 'invalid-input 'invalid-input-message)))
(common-lisp:deftype invoice-id () 'common-lisp:string)
(common-lisp:deftype label () 'common-lisp:string)
(common-lisp:deftype lang-code () 'common-lisp:string)
(common-lisp:deftype list-domains-attribute-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass list-domains-request common-lisp:nil
                       ((max-items :initarg :max-items :type
                         (common-lisp:or page-max-items common-lisp:null)
                         :accessor %list-domains-request-max-items :initform
                         common-lisp:nil)
                        (marker :initarg :marker :type
                         (common-lisp:or page-marker common-lisp:null)
                         :accessor %list-domains-request-marker :initform
                         common-lisp:nil)
                        (sort-condition :initarg :sort-condition :type
                         (common-lisp:or sort-condition common-lisp:null)
                         :accessor %list-domains-request-sort-condition
                         :initform common-lisp:nil)
                        (filter-conditions :initarg :filter-conditions :type
                         (common-lisp:or filter-conditions common-lisp:null)
                         :accessor %list-domains-request-filter-conditions
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-domains-request 'make-list-domains-request))
 (common-lisp:defun make-list-domains-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key max-items marker sort-condition
                     filter-conditions)
   (common-lisp:apply #'common-lisp:make-instance 'list-domains-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-domains-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-domains-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filter-conditions))
      (common-lisp:list
       (common-lisp:cons "FilterConditions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sort-condition))
      (common-lisp:list
       (common-lisp:cons "SortCondition"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-items))
      (common-lisp:list
       (common-lisp:cons "MaxItems"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-domains-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-domains-response common-lisp:nil
                       ((next-page-marker :initarg :next-page-marker :type
                         (common-lisp:or page-marker common-lisp:null)
                         :accessor %list-domains-response-next-page-marker
                         :initform common-lisp:nil)
                        (domains :initarg :domains :type
                         (common-lisp:or domain-summary-list common-lisp:null)
                         :accessor %list-domains-response-domains :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-domains-response 'make-list-domains-response))
 (common-lisp:defun make-list-domains-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-page-marker domains)
   (common-lisp:apply #'common-lisp:make-instance 'list-domains-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-domains-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-domains-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domains))
      (common-lisp:list
       (common-lisp:cons "Domains"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-page-marker))
      (common-lisp:list
       (common-lisp:cons "NextPageMarker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-domains-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-operations-request common-lisp:nil
                       ((sort-order :initarg :sort-order :type
                         (common-lisp:or sort-order common-lisp:null) :accessor
                         %list-operations-request-sort-order :initform
                         common-lisp:nil)
                        (sort-by :initarg :sort-by :type
                         (common-lisp:or list-operations-sort-attribute-name
                                         common-lisp:null)
                         :accessor %list-operations-request-sort-by :initform
                         common-lisp:nil)
                        (type :initarg :type :type
                         (common-lisp:or operation-type-list common-lisp:null)
                         :accessor %list-operations-request-type :initform
                         common-lisp:nil)
                        (status :initarg :status :type
                         (common-lisp:or operation-status-list
                                         common-lisp:null)
                         :accessor %list-operations-request-status :initform
                         common-lisp:nil)
                        (max-items :initarg :max-items :type
                         (common-lisp:or page-max-items common-lisp:null)
                         :accessor %list-operations-request-max-items :initform
                         common-lisp:nil)
                        (marker :initarg :marker :type
                         (common-lisp:or page-marker common-lisp:null)
                         :accessor %list-operations-request-marker :initform
                         common-lisp:nil)
                        (submitted-since :initarg :submitted-since :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %list-operations-request-submitted-since :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-operations-request 'make-list-operations-request))
 (common-lisp:defun make-list-operations-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key sort-order sort-by type status max-items
                     marker submitted-since)
   (common-lisp:apply #'common-lisp:make-instance 'list-operations-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-operations-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-operations-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'submitted-since))
      (common-lisp:list
       (common-lisp:cons "SubmittedSince"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-items))
      (common-lisp:list
       (common-lisp:cons "MaxItems"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sort-by))
      (common-lisp:list
       (common-lisp:cons "SortBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sort-order))
      (common-lisp:list
       (common-lisp:cons "SortOrder"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-operations-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-operations-response common-lisp:nil
                       ((next-page-marker :initarg :next-page-marker :type
                         (common-lisp:or page-marker common-lisp:null)
                         :accessor %list-operations-response-next-page-marker
                         :initform common-lisp:nil)
                        (operations :initarg :operations :type
                         (common-lisp:or operation-summary-list
                                         common-lisp:null)
                         :accessor %list-operations-response-operations
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-operations-response 'make-list-operations-response))
 (common-lisp:defun make-list-operations-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-page-marker operations)
   (common-lisp:apply #'common-lisp:make-instance 'list-operations-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-operations-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-operations-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'operations))
      (common-lisp:list
       (common-lisp:cons "Operations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-page-marker))
      (common-lisp:list
       (common-lisp:cons "NextPageMarker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-operations-response))
   common-lisp:nil))
(common-lisp:deftype list-operations-sort-attribute-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass list-prices-request common-lisp:nil
                       ((max-items :initarg :max-items :type
                         (common-lisp:or page-max-items common-lisp:null)
                         :accessor %list-prices-request-max-items :initform
                         common-lisp:nil)
                        (marker :initarg :marker :type
                         (common-lisp:or page-marker common-lisp:null)
                         :accessor %list-prices-request-marker :initform
                         common-lisp:nil)
                        (tld :initarg :tld :type
                         (common-lisp:or tld-name common-lisp:null) :accessor
                         %list-prices-request-tld :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-prices-request 'make-list-prices-request))
 (common-lisp:defun make-list-prices-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key max-items marker tld)
   (common-lisp:apply #'common-lisp:make-instance 'list-prices-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-prices-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-prices-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tld))
      (common-lisp:list
       (common-lisp:cons "Tld"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-items))
      (common-lisp:list
       (common-lisp:cons "MaxItems"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-prices-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-prices-response common-lisp:nil
                       ((next-page-marker :initarg :next-page-marker :type
                         (common-lisp:or page-marker common-lisp:null)
                         :accessor %list-prices-response-next-page-marker
                         :initform common-lisp:nil)
                        (prices :initarg :prices :type
                         (common-lisp:or domain-price-list common-lisp:null)
                         :accessor %list-prices-response-prices :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-prices-response 'make-list-prices-response))
 (common-lisp:defun make-list-prices-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-page-marker prices)
   (common-lisp:apply #'common-lisp:make-instance 'list-prices-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-prices-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-prices-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'prices))
      (common-lisp:list
       (common-lisp:cons "Prices"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-page-marker))
      (common-lisp:list
       (common-lisp:cons "NextPageMarker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-prices-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-tags-for-domain-request common-lisp:nil
                       ((domain-name :initarg :domain-name :type
                         (common-lisp:or domain-name common-lisp:null)
                         :accessor %list-tags-for-domain-request-domain-name
                         :initform
                         (common-lisp:error ":domain-name is required"))))
 (common-lisp:export
  (common-lisp:list 'list-tags-for-domain-request
                    'make-list-tags-for-domain-request))
 (common-lisp:defun make-list-tags-for-domain-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key domain-name)
   (common-lisp:apply #'common-lisp:make-instance 'list-tags-for-domain-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-domain-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-domain-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-name))
      (common-lisp:list
       (common-lisp:cons "DomainName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-domain-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-tags-for-domain-response common-lisp:nil
                       ((tag-list :initarg :tag-list :type
                         (common-lisp:or tag-list common-lisp:null) :accessor
                         %list-tags-for-domain-response-tag-list :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-tags-for-domain-response
                    'make-list-tags-for-domain-response))
 (common-lisp:defun make-list-tags-for-domain-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tag-list)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-tags-for-domain-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-domain-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-domain-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tag-list))
      (common-lisp:list
       (common-lisp:cons "TagList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-domain-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass nameserver common-lisp:nil
                       ((glue-ips :initarg :glue-ips :type
                         (common-lisp:or glue-ip-list common-lisp:null)
                         :accessor %nameserver-glue-ips :initform
                         common-lisp:nil)
                        (name :initarg :name :type
                         (common-lisp:or host-name common-lisp:null) :accessor
                         %nameserver-name :initform
                         (common-lisp:error ":name is required"))))
 (common-lisp:export (common-lisp:list 'nameserver 'make-nameserver))
 (common-lisp:defun make-nameserver
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key glue-ips name)
   (common-lisp:apply #'common-lisp:make-instance 'nameserver
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input nameserver))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input nameserver))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'glue-ips))
      (common-lisp:list
       (common-lisp:cons "GlueIps"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input nameserver))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype nameserver-list ()
   '(trivial-types:proper-list nameserver))
 (common-lisp:defun |make-nameserver-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list nameserver))
   aws-sdk/generator/shape::members))
(common-lisp:deftype nullable-integer () 'common-lisp:integer)
(common-lisp:deftype operation-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition operation-limit-exceeded
     (route53domains-error)
     ((message :initarg :|message| :initform common-lisp:nil :reader
       operation-limit-exceeded-message)))
 (common-lisp:export
  (common-lisp:list 'operation-limit-exceeded
                    'operation-limit-exceeded-message)))
(common-lisp:deftype operation-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype operation-status-list ()
   '(trivial-types:proper-list operation-status))
 (common-lisp:defun |make-operation-status-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list operation-status))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass operation-summary common-lisp:nil
                       ((last-updated-date :initarg :last-updated-date :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %operation-summary-last-updated-date :initform
                         common-lisp:nil)
                        (status-flag :initarg :status-flag :type
                         (common-lisp:or status-flag common-lisp:null)
                         :accessor %operation-summary-status-flag :initform
                         common-lisp:nil)
                        (message :initarg :message :type
                         (common-lisp:or error-message common-lisp:null)
                         :accessor %operation-summary-message :initform
                         common-lisp:nil)
                        (domain-name :initarg :domain-name :type
                         (common-lisp:or domain-name common-lisp:null)
                         :accessor %operation-summary-domain-name :initform
                         common-lisp:nil)
                        (submitted-date :initarg :submitted-date :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %operation-summary-submitted-date :initform
                         common-lisp:nil)
                        (type :initarg :type :type
                         (common-lisp:or operation-type common-lisp:null)
                         :accessor %operation-summary-type :initform
                         common-lisp:nil)
                        (status :initarg :status :type
                         (common-lisp:or operation-status common-lisp:null)
                         :accessor %operation-summary-status :initform
                         common-lisp:nil)
                        (operation-id :initarg :operation-id :type
                         (common-lisp:or operation-id common-lisp:null)
                         :accessor %operation-summary-operation-id :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'operation-summary 'make-operation-summary))
 (common-lisp:defun make-operation-summary
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key last-updated-date status-flag message
                     domain-name submitted-date type status operation-id)
   (common-lisp:apply #'common-lisp:make-instance 'operation-summary
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input operation-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input operation-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'operation-id))
      (common-lisp:list
       (common-lisp:cons "OperationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'submitted-date))
      (common-lisp:list
       (common-lisp:cons "SubmittedDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-name))
      (common-lisp:list
       (common-lisp:cons "DomainName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message))
      (common-lisp:list
       (common-lisp:cons "Message"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status-flag))
      (common-lisp:list
       (common-lisp:cons "StatusFlag"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-updated-date))
      (common-lisp:list
       (common-lisp:cons "LastUpdatedDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input operation-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype operation-summary-list ()
   '(trivial-types:proper-list operation-summary))
 (common-lisp:defun |make-operation-summary-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list operation-summary))
   aws-sdk/generator/shape::members))
(common-lisp:deftype operation-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype operation-type-list ()
   '(trivial-types:proper-list operation-type))
 (common-lisp:defun |make-operation-type-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list operation-type))
   aws-sdk/generator/shape::members))
(common-lisp:deftype operator () 'common-lisp:string)
(common-lisp:deftype page-marker () 'common-lisp:string)
(common-lisp:deftype page-max-items () 'common-lisp:integer)
(common-lisp:deftype price () 'common-lisp:double-float)
(common-lisp:progn
 (common-lisp:defclass price-with-currency common-lisp:nil
                       ((currency :initarg :currency :type
                         (common-lisp:or currency common-lisp:null) :accessor
                         %price-with-currency-currency :initform
                         (common-lisp:error ":currency is required"))
                        (price :initarg :price :type
                         (common-lisp:or price common-lisp:null) :accessor
                         %price-with-currency-price :initform
                         (common-lisp:error ":price is required"))))
 (common-lisp:export
  (common-lisp:list 'price-with-currency 'make-price-with-currency))
 (common-lisp:defun make-price-with-currency
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key currency price)
   (common-lisp:apply #'common-lisp:make-instance 'price-with-currency
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input price-with-currency))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input price-with-currency))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'price))
      (common-lisp:list
       (common-lisp:cons "Price"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'currency))
      (common-lisp:list
       (common-lisp:cons "Currency"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input price-with-currency))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass push-domain-request common-lisp:nil
                       ((target :initarg :target :type
                         (common-lisp:or label common-lisp:null) :accessor
                         %push-domain-request-target :initform
                         (common-lisp:error ":target is required"))
                        (domain-name :initarg :domain-name :type
                         (common-lisp:or domain-name common-lisp:null)
                         :accessor %push-domain-request-domain-name :initform
                         (common-lisp:error ":domain-name is required"))))
 (common-lisp:export
  (common-lisp:list 'push-domain-request 'make-push-domain-request))
 (common-lisp:defun make-push-domain-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key target domain-name)
   (common-lisp:apply #'common-lisp:make-instance 'push-domain-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input push-domain-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input push-domain-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-name))
      (common-lisp:list
       (common-lisp:cons "DomainName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target))
      (common-lisp:list
       (common-lisp:cons "Target"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input push-domain-request))
   common-lisp:nil))
(common-lisp:deftype reachability-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass register-domain-request common-lisp:nil
                       ((privacy-protect-tech-contact :initarg
                         :privacy-protect-tech-contact :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         %register-domain-request-privacy-protect-tech-contact
                         :initform common-lisp:nil)
                        (privacy-protect-registrant-contact :initarg
                         :privacy-protect-registrant-contact :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         %register-domain-request-privacy-protect-registrant-contact
                         :initform common-lisp:nil)
                        (privacy-protect-admin-contact :initarg
                         :privacy-protect-admin-contact :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         %register-domain-request-privacy-protect-admin-contact
                         :initform common-lisp:nil)
                        (tech-contact :initarg :tech-contact :type
                         (common-lisp:or contact-detail common-lisp:null)
                         :accessor %register-domain-request-tech-contact
                         :initform
                         (common-lisp:error ":tech-contact is required"))
                        (registrant-contact :initarg :registrant-contact :type
                         (common-lisp:or contact-detail common-lisp:null)
                         :accessor %register-domain-request-registrant-contact
                         :initform
                         (common-lisp:error ":registrant-contact is required"))
                        (admin-contact :initarg :admin-contact :type
                         (common-lisp:or contact-detail common-lisp:null)
                         :accessor %register-domain-request-admin-contact
                         :initform
                         (common-lisp:error ":admin-contact is required"))
                        (auto-renew :initarg :auto-renew :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         %register-domain-request-auto-renew :initform
                         common-lisp:nil)
                        (duration-in-years :initarg :duration-in-years :type
                         (common-lisp:or duration-in-years common-lisp:null)
                         :accessor %register-domain-request-duration-in-years
                         :initform
                         (common-lisp:error ":duration-in-years is required"))
                        (idn-lang-code :initarg :idn-lang-code :type
                         (common-lisp:or lang-code common-lisp:null) :accessor
                         %register-domain-request-idn-lang-code :initform
                         common-lisp:nil)
                        (domain-name :initarg :domain-name :type
                         (common-lisp:or domain-name common-lisp:null)
                         :accessor %register-domain-request-domain-name
                         :initform
                         (common-lisp:error ":domain-name is required"))))
 (common-lisp:export
  (common-lisp:list 'register-domain-request 'make-register-domain-request))
 (common-lisp:defun make-register-domain-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key privacy-protect-tech-contact
                     privacy-protect-registrant-contact
                     privacy-protect-admin-contact tech-contact
                     registrant-contact admin-contact auto-renew
                     duration-in-years idn-lang-code domain-name)
   (common-lisp:apply #'common-lisp:make-instance 'register-domain-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          register-domain-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          register-domain-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-name))
      (common-lisp:list
       (common-lisp:cons "DomainName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'idn-lang-code))
      (common-lisp:list
       (common-lisp:cons "IdnLangCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'duration-in-years))
      (common-lisp:list
       (common-lisp:cons "DurationInYears"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'auto-renew))
      (common-lisp:list
       (common-lisp:cons "AutoRenew"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'admin-contact))
      (common-lisp:list
       (common-lisp:cons "AdminContact"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'registrant-contact))
      (common-lisp:list
       (common-lisp:cons "RegistrantContact"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tech-contact))
      (common-lisp:list
       (common-lisp:cons "TechContact"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'privacy-protect-admin-contact))
      (common-lisp:list
       (common-lisp:cons "PrivacyProtectAdminContact"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'privacy-protect-registrant-contact))
      (common-lisp:list
       (common-lisp:cons "PrivacyProtectRegistrantContact"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'privacy-protect-tech-contact))
      (common-lisp:list
       (common-lisp:cons "PrivacyProtectTechContact"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          register-domain-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass register-domain-response common-lisp:nil
                       ((operation-id :initarg :operation-id :type
                         (common-lisp:or operation-id common-lisp:null)
                         :accessor %register-domain-response-operation-id
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'register-domain-response 'make-register-domain-response))
 (common-lisp:defun make-register-domain-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key operation-id)
   (common-lisp:apply #'common-lisp:make-instance 'register-domain-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          register-domain-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          register-domain-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'operation-id))
      (common-lisp:list
       (common-lisp:cons "OperationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          register-domain-response))
   common-lisp:nil))
(common-lisp:deftype registrar-name () 'common-lisp:string)
(common-lisp:deftype registrar-url () 'common-lisp:string)
(common-lisp:deftype registrar-who-is-server () 'common-lisp:string)
(common-lisp:deftype registry-domain-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass reject-domain-transfer-from-another-aws-account-request
                       common-lisp:nil
                       ((domain-name :initarg :domain-name :type
                         (common-lisp:or domain-name common-lisp:null)
                         :accessor
                         %reject-domain-transfer-from-another-aws-account-request-domain-name
                         :initform
                         (common-lisp:error ":domain-name is required"))))
 (common-lisp:export
  (common-lisp:list 'reject-domain-transfer-from-another-aws-account-request
                    'make-reject-domain-transfer-from-another-aws-account-request))
 (common-lisp:defun make-reject-domain-transfer-from-another-aws-account-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key domain-name)
   (common-lisp:apply #'common-lisp:make-instance
                      'reject-domain-transfer-from-another-aws-account-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          reject-domain-transfer-from-another-aws-account-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          reject-domain-transfer-from-another-aws-account-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-name))
      (common-lisp:list
       (common-lisp:cons "DomainName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          reject-domain-transfer-from-another-aws-account-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass reject-domain-transfer-from-another-aws-account-response
                       common-lisp:nil
                       ((operation-id :initarg :operation-id :type
                         (common-lisp:or operation-id common-lisp:null)
                         :accessor
                         %reject-domain-transfer-from-another-aws-account-response-operation-id
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'reject-domain-transfer-from-another-aws-account-response
                    'make-reject-domain-transfer-from-another-aws-account-response))
 (common-lisp:defun make-reject-domain-transfer-from-another-aws-account-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key operation-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'reject-domain-transfer-from-another-aws-account-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          reject-domain-transfer-from-another-aws-account-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          reject-domain-transfer-from-another-aws-account-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'operation-id))
      (common-lisp:list
       (common-lisp:cons "OperationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          reject-domain-transfer-from-another-aws-account-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass renew-domain-request common-lisp:nil
                       ((current-expiry-year :initarg :current-expiry-year
                         :type
                         (common-lisp:or current-expiry-year common-lisp:null)
                         :accessor %renew-domain-request-current-expiry-year
                         :initform
                         (common-lisp:error
                          ":current-expiry-year is required"))
                        (duration-in-years :initarg :duration-in-years :type
                         (common-lisp:or duration-in-years common-lisp:null)
                         :accessor %renew-domain-request-duration-in-years
                         :initform common-lisp:nil)
                        (domain-name :initarg :domain-name :type
                         (common-lisp:or domain-name common-lisp:null)
                         :accessor %renew-domain-request-domain-name :initform
                         (common-lisp:error ":domain-name is required"))))
 (common-lisp:export
  (common-lisp:list 'renew-domain-request 'make-renew-domain-request))
 (common-lisp:defun make-renew-domain-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key current-expiry-year duration-in-years
                     domain-name)
   (common-lisp:apply #'common-lisp:make-instance 'renew-domain-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input renew-domain-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input renew-domain-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-name))
      (common-lisp:list
       (common-lisp:cons "DomainName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'duration-in-years))
      (common-lisp:list
       (common-lisp:cons "DurationInYears"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'current-expiry-year))
      (common-lisp:list
       (common-lisp:cons "CurrentExpiryYear"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input renew-domain-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass renew-domain-response common-lisp:nil
                       ((operation-id :initarg :operation-id :type
                         (common-lisp:or operation-id common-lisp:null)
                         :accessor %renew-domain-response-operation-id
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'renew-domain-response 'make-renew-domain-response))
 (common-lisp:defun make-renew-domain-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key operation-id)
   (common-lisp:apply #'common-lisp:make-instance 'renew-domain-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          renew-domain-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          renew-domain-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'operation-id))
      (common-lisp:list
       (common-lisp:cons "OperationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          renew-domain-response))
   common-lisp:nil))
(common-lisp:deftype reseller () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass resend-contact-reachability-email-request
                       common-lisp:nil
                       ((domain-name :initarg :|domainName| :type
                         (common-lisp:or domain-name common-lisp:null)
                         :accessor
                         %resend-contact-reachability-email-request-domain-name
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'resend-contact-reachability-email-request
                    'make-resend-contact-reachability-email-request))
 (common-lisp:defun make-resend-contact-reachability-email-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key domain-name)
   (common-lisp:apply #'common-lisp:make-instance
                      'resend-contact-reachability-email-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          resend-contact-reachability-email-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          resend-contact-reachability-email-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-name))
      (common-lisp:list
       (common-lisp:cons "domainName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          resend-contact-reachability-email-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass resend-contact-reachability-email-response
                       common-lisp:nil
                       ((is-already-verified :initarg :|isAlreadyVerified|
                         :type (common-lisp:or boolean common-lisp:null)
                         :accessor
                         %resend-contact-reachability-email-response-is-already-verified
                         :initform common-lisp:nil)
                        (email-address :initarg :|emailAddress| :type
                         (common-lisp:or email common-lisp:null) :accessor
                         %resend-contact-reachability-email-response-email-address
                         :initform common-lisp:nil)
                        (domain-name :initarg :|domainName| :type
                         (common-lisp:or domain-name common-lisp:null)
                         :accessor
                         %resend-contact-reachability-email-response-domain-name
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'resend-contact-reachability-email-response
                    'make-resend-contact-reachability-email-response))
 (common-lisp:defun make-resend-contact-reachability-email-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key is-already-verified email-address
                     domain-name)
   (common-lisp:apply #'common-lisp:make-instance
                      'resend-contact-reachability-email-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          resend-contact-reachability-email-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          resend-contact-reachability-email-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-name))
      (common-lisp:list
       (common-lisp:cons "domainName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'email-address))
      (common-lisp:list
       (common-lisp:cons "emailAddress"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'is-already-verified))
      (common-lisp:list
       (common-lisp:cons "isAlreadyVerified"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          resend-contact-reachability-email-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass resend-operation-authorization-request common-lisp:nil
                       ((operation-id :initarg :operation-id :type
                         (common-lisp:or operation-id common-lisp:null)
                         :accessor
                         %resend-operation-authorization-request-operation-id
                         :initform
                         (common-lisp:error ":operation-id is required"))))
 (common-lisp:export
  (common-lisp:list 'resend-operation-authorization-request
                    'make-resend-operation-authorization-request))
 (common-lisp:defun make-resend-operation-authorization-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key operation-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'resend-operation-authorization-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          resend-operation-authorization-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          resend-operation-authorization-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'operation-id))
      (common-lisp:list
       (common-lisp:cons "OperationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          resend-operation-authorization-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass retrieve-domain-auth-code-request common-lisp:nil
                       ((domain-name :initarg :domain-name :type
                         (common-lisp:or domain-name common-lisp:null)
                         :accessor
                         %retrieve-domain-auth-code-request-domain-name
                         :initform
                         (common-lisp:error ":domain-name is required"))))
 (common-lisp:export
  (common-lisp:list 'retrieve-domain-auth-code-request
                    'make-retrieve-domain-auth-code-request))
 (common-lisp:defun make-retrieve-domain-auth-code-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key domain-name)
   (common-lisp:apply #'common-lisp:make-instance
                      'retrieve-domain-auth-code-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          retrieve-domain-auth-code-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          retrieve-domain-auth-code-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-name))
      (common-lisp:list
       (common-lisp:cons "DomainName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          retrieve-domain-auth-code-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass retrieve-domain-auth-code-response common-lisp:nil
                       ((auth-code :initarg :auth-code :type
                         (common-lisp:or domain-auth-code common-lisp:null)
                         :accessor
                         %retrieve-domain-auth-code-response-auth-code
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'retrieve-domain-auth-code-response
                    'make-retrieve-domain-auth-code-response))
 (common-lisp:defun make-retrieve-domain-auth-code-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key auth-code)
   (common-lisp:apply #'common-lisp:make-instance
                      'retrieve-domain-auth-code-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          retrieve-domain-auth-code-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          retrieve-domain-auth-code-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'auth-code))
      (common-lisp:list
       (common-lisp:cons "AuthCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          retrieve-domain-auth-code-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass sort-condition common-lisp:nil
                       ((sort-order :initarg :sort-order :type
                         (common-lisp:or sort-order common-lisp:null) :accessor
                         %sort-condition-sort-order :initform
                         (common-lisp:error ":sort-order is required"))
                        (name :initarg :name :type
                         (common-lisp:or list-domains-attribute-name
                                         common-lisp:null)
                         :accessor %sort-condition-name :initform
                         (common-lisp:error ":name is required"))))
 (common-lisp:export (common-lisp:list 'sort-condition 'make-sort-condition))
 (common-lisp:defun make-sort-condition
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key sort-order name)
   (common-lisp:apply #'common-lisp:make-instance 'sort-condition
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input sort-condition))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input sort-condition))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sort-order))
      (common-lisp:list
       (common-lisp:cons "SortOrder"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input sort-condition))
   common-lisp:nil))
(common-lisp:deftype sort-order () 'common-lisp:string)
(common-lisp:deftype state () 'common-lisp:string)
(common-lisp:deftype status-flag () 'common-lisp:string)
(common-lisp:deftype string () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition tldrules-violation
     (route53domains-error)
     ((message :initarg :|message| :initform common-lisp:nil :reader
       tldrules-violation-message)))
 (common-lisp:export
  (common-lisp:list 'tldrules-violation 'tldrules-violation-message)))
(common-lisp:progn
 (common-lisp:defclass tag common-lisp:nil
                       ((value :initarg :value :type
                         (common-lisp:or tag-value common-lisp:null) :accessor
                         %tag-value :initform common-lisp:nil)
                        (key :initarg :key :type
                         (common-lisp:or tag-key common-lisp:null) :accessor
                         %tag-key :initform common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'tag 'make-tag))
 (common-lisp:defun make-tag
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key value key)
   (common-lisp:apply #'common-lisp:make-instance 'tag
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input tag))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input tag))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key))
      (common-lisp:list
       (common-lisp:cons "Key"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "Value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input tag))
   common-lisp:nil))
(common-lisp:deftype tag-key () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype tag-key-list () '(trivial-types:proper-list tag-key))
 (common-lisp:defun |make-tag-key-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list tag-key))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype tag-list () '(trivial-types:proper-list tag))
 (common-lisp:defun |make-tag-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list tag))
   aws-sdk/generator/shape::members))
(common-lisp:deftype tag-value () 'common-lisp:string)
(common-lisp:deftype timestamp () 'common-lisp:string)
(common-lisp:deftype tld-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass transfer-domain-request common-lisp:nil
                       ((privacy-protect-tech-contact :initarg
                         :privacy-protect-tech-contact :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         %transfer-domain-request-privacy-protect-tech-contact
                         :initform common-lisp:nil)
                        (privacy-protect-registrant-contact :initarg
                         :privacy-protect-registrant-contact :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         %transfer-domain-request-privacy-protect-registrant-contact
                         :initform common-lisp:nil)
                        (privacy-protect-admin-contact :initarg
                         :privacy-protect-admin-contact :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         %transfer-domain-request-privacy-protect-admin-contact
                         :initform common-lisp:nil)
                        (tech-contact :initarg :tech-contact :type
                         (common-lisp:or contact-detail common-lisp:null)
                         :accessor %transfer-domain-request-tech-contact
                         :initform
                         (common-lisp:error ":tech-contact is required"))
                        (registrant-contact :initarg :registrant-contact :type
                         (common-lisp:or contact-detail common-lisp:null)
                         :accessor %transfer-domain-request-registrant-contact
                         :initform
                         (common-lisp:error ":registrant-contact is required"))
                        (admin-contact :initarg :admin-contact :type
                         (common-lisp:or contact-detail common-lisp:null)
                         :accessor %transfer-domain-request-admin-contact
                         :initform
                         (common-lisp:error ":admin-contact is required"))
                        (auto-renew :initarg :auto-renew :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         %transfer-domain-request-auto-renew :initform
                         common-lisp:nil)
                        (auth-code :initarg :auth-code :type
                         (common-lisp:or domain-auth-code common-lisp:null)
                         :accessor %transfer-domain-request-auth-code :initform
                         common-lisp:nil)
                        (nameservers :initarg :nameservers :type
                         (common-lisp:or nameserver-list common-lisp:null)
                         :accessor %transfer-domain-request-nameservers
                         :initform common-lisp:nil)
                        (duration-in-years :initarg :duration-in-years :type
                         (common-lisp:or duration-in-years common-lisp:null)
                         :accessor %transfer-domain-request-duration-in-years
                         :initform
                         (common-lisp:error ":duration-in-years is required"))
                        (idn-lang-code :initarg :idn-lang-code :type
                         (common-lisp:or lang-code common-lisp:null) :accessor
                         %transfer-domain-request-idn-lang-code :initform
                         common-lisp:nil)
                        (domain-name :initarg :domain-name :type
                         (common-lisp:or domain-name common-lisp:null)
                         :accessor %transfer-domain-request-domain-name
                         :initform
                         (common-lisp:error ":domain-name is required"))))
 (common-lisp:export
  (common-lisp:list 'transfer-domain-request 'make-transfer-domain-request))
 (common-lisp:defun make-transfer-domain-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key privacy-protect-tech-contact
                     privacy-protect-registrant-contact
                     privacy-protect-admin-contact tech-contact
                     registrant-contact admin-contact auto-renew auth-code
                     nameservers duration-in-years idn-lang-code domain-name)
   (common-lisp:apply #'common-lisp:make-instance 'transfer-domain-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          transfer-domain-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          transfer-domain-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-name))
      (common-lisp:list
       (common-lisp:cons "DomainName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'idn-lang-code))
      (common-lisp:list
       (common-lisp:cons "IdnLangCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'duration-in-years))
      (common-lisp:list
       (common-lisp:cons "DurationInYears"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'nameservers))
      (common-lisp:list
       (common-lisp:cons "Nameservers"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'auth-code))
      (common-lisp:list
       (common-lisp:cons "AuthCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'auto-renew))
      (common-lisp:list
       (common-lisp:cons "AutoRenew"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'admin-contact))
      (common-lisp:list
       (common-lisp:cons "AdminContact"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'registrant-contact))
      (common-lisp:list
       (common-lisp:cons "RegistrantContact"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tech-contact))
      (common-lisp:list
       (common-lisp:cons "TechContact"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'privacy-protect-admin-contact))
      (common-lisp:list
       (common-lisp:cons "PrivacyProtectAdminContact"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'privacy-protect-registrant-contact))
      (common-lisp:list
       (common-lisp:cons "PrivacyProtectRegistrantContact"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'privacy-protect-tech-contact))
      (common-lisp:list
       (common-lisp:cons "PrivacyProtectTechContact"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          transfer-domain-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass transfer-domain-response common-lisp:nil
                       ((operation-id :initarg :operation-id :type
                         (common-lisp:or operation-id common-lisp:null)
                         :accessor %transfer-domain-response-operation-id
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'transfer-domain-response 'make-transfer-domain-response))
 (common-lisp:defun make-transfer-domain-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key operation-id)
   (common-lisp:apply #'common-lisp:make-instance 'transfer-domain-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          transfer-domain-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          transfer-domain-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'operation-id))
      (common-lisp:list
       (common-lisp:cons "OperationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          transfer-domain-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass transfer-domain-to-another-aws-account-request
                       common-lisp:nil
                       ((account-id :initarg :account-id :type
                         (common-lisp:or account-id common-lisp:null) :accessor
                         %transfer-domain-to-another-aws-account-request-account-id
                         :initform
                         (common-lisp:error ":account-id is required"))
                        (domain-name :initarg :domain-name :type
                         (common-lisp:or domain-name common-lisp:null)
                         :accessor
                         %transfer-domain-to-another-aws-account-request-domain-name
                         :initform
                         (common-lisp:error ":domain-name is required"))))
 (common-lisp:export
  (common-lisp:list 'transfer-domain-to-another-aws-account-request
                    'make-transfer-domain-to-another-aws-account-request))
 (common-lisp:defun make-transfer-domain-to-another-aws-account-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key account-id domain-name)
   (common-lisp:apply #'common-lisp:make-instance
                      'transfer-domain-to-another-aws-account-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          transfer-domain-to-another-aws-account-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          transfer-domain-to-another-aws-account-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-name))
      (common-lisp:list
       (common-lisp:cons "DomainName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-id))
      (common-lisp:list
       (common-lisp:cons "AccountId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          transfer-domain-to-another-aws-account-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass transfer-domain-to-another-aws-account-response
                       common-lisp:nil
                       ((password :initarg :password :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %transfer-domain-to-another-aws-account-response-password
                         :initform common-lisp:nil)
                        (operation-id :initarg :operation-id :type
                         (common-lisp:or operation-id common-lisp:null)
                         :accessor
                         %transfer-domain-to-another-aws-account-response-operation-id
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'transfer-domain-to-another-aws-account-response
                    'make-transfer-domain-to-another-aws-account-response))
 (common-lisp:defun make-transfer-domain-to-another-aws-account-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key password operation-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'transfer-domain-to-another-aws-account-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          transfer-domain-to-another-aws-account-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          transfer-domain-to-another-aws-account-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'operation-id))
      (common-lisp:list
       (common-lisp:cons "OperationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'password))
      (common-lisp:list
       (common-lisp:cons "Password"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          transfer-domain-to-another-aws-account-response))
   common-lisp:nil))
(common-lisp:deftype transferable () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition unsupported-tld
     (route53domains-error)
     ((message :initarg :|message| :initform common-lisp:nil :reader
       unsupported-tld-message)))
 (common-lisp:export
  (common-lisp:list 'unsupported-tld 'unsupported-tld-message)))
(common-lisp:progn
 (common-lisp:defclass update-domain-contact-privacy-request common-lisp:nil
                       ((tech-privacy :initarg :tech-privacy :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         %update-domain-contact-privacy-request-tech-privacy
                         :initform common-lisp:nil)
                        (registrant-privacy :initarg :registrant-privacy :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         %update-domain-contact-privacy-request-registrant-privacy
                         :initform common-lisp:nil)
                        (admin-privacy :initarg :admin-privacy :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         %update-domain-contact-privacy-request-admin-privacy
                         :initform common-lisp:nil)
                        (domain-name :initarg :domain-name :type
                         (common-lisp:or domain-name common-lisp:null)
                         :accessor
                         %update-domain-contact-privacy-request-domain-name
                         :initform
                         (common-lisp:error ":domain-name is required"))))
 (common-lisp:export
  (common-lisp:list 'update-domain-contact-privacy-request
                    'make-update-domain-contact-privacy-request))
 (common-lisp:defun make-update-domain-contact-privacy-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tech-privacy registrant-privacy
                     admin-privacy domain-name)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-domain-contact-privacy-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-domain-contact-privacy-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-domain-contact-privacy-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-name))
      (common-lisp:list
       (common-lisp:cons "DomainName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'admin-privacy))
      (common-lisp:list
       (common-lisp:cons "AdminPrivacy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'registrant-privacy))
      (common-lisp:list
       (common-lisp:cons "RegistrantPrivacy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tech-privacy))
      (common-lisp:list
       (common-lisp:cons "TechPrivacy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-domain-contact-privacy-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-domain-contact-privacy-response common-lisp:nil
                       ((operation-id :initarg :operation-id :type
                         (common-lisp:or operation-id common-lisp:null)
                         :accessor
                         %update-domain-contact-privacy-response-operation-id
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'update-domain-contact-privacy-response
                    'make-update-domain-contact-privacy-response))
 (common-lisp:defun make-update-domain-contact-privacy-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key operation-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-domain-contact-privacy-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-domain-contact-privacy-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-domain-contact-privacy-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'operation-id))
      (common-lisp:list
       (common-lisp:cons "OperationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-domain-contact-privacy-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-domain-contact-request common-lisp:nil
                       ((consent :initarg :consent :type
                         (common-lisp:or consent common-lisp:null) :accessor
                         %update-domain-contact-request-consent :initform
                         common-lisp:nil)
                        (tech-contact :initarg :tech-contact :type
                         (common-lisp:or contact-detail common-lisp:null)
                         :accessor %update-domain-contact-request-tech-contact
                         :initform common-lisp:nil)
                        (registrant-contact :initarg :registrant-contact :type
                         (common-lisp:or contact-detail common-lisp:null)
                         :accessor
                         %update-domain-contact-request-registrant-contact
                         :initform common-lisp:nil)
                        (admin-contact :initarg :admin-contact :type
                         (common-lisp:or contact-detail common-lisp:null)
                         :accessor %update-domain-contact-request-admin-contact
                         :initform common-lisp:nil)
                        (domain-name :initarg :domain-name :type
                         (common-lisp:or domain-name common-lisp:null)
                         :accessor %update-domain-contact-request-domain-name
                         :initform
                         (common-lisp:error ":domain-name is required"))))
 (common-lisp:export
  (common-lisp:list 'update-domain-contact-request
                    'make-update-domain-contact-request))
 (common-lisp:defun make-update-domain-contact-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key consent tech-contact registrant-contact
                     admin-contact domain-name)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-domain-contact-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-domain-contact-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-domain-contact-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-name))
      (common-lisp:list
       (common-lisp:cons "DomainName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'admin-contact))
      (common-lisp:list
       (common-lisp:cons "AdminContact"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'registrant-contact))
      (common-lisp:list
       (common-lisp:cons "RegistrantContact"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tech-contact))
      (common-lisp:list
       (common-lisp:cons "TechContact"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'consent))
      (common-lisp:list
       (common-lisp:cons "Consent"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-domain-contact-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-domain-contact-response common-lisp:nil
                       ((operation-id :initarg :operation-id :type
                         (common-lisp:or operation-id common-lisp:null)
                         :accessor %update-domain-contact-response-operation-id
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'update-domain-contact-response
                    'make-update-domain-contact-response))
 (common-lisp:defun make-update-domain-contact-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key operation-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-domain-contact-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-domain-contact-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-domain-contact-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'operation-id))
      (common-lisp:list
       (common-lisp:cons "OperationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-domain-contact-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-domain-nameservers-request common-lisp:nil
                       ((nameservers :initarg :nameservers :type
                         (common-lisp:or nameserver-list common-lisp:null)
                         :accessor
                         %update-domain-nameservers-request-nameservers
                         :initform
                         (common-lisp:error ":nameservers is required"))
                        (fiauth-key :initarg :fiauth-key :type
                         (common-lisp:or fiauth-key common-lisp:null) :accessor
                         %update-domain-nameservers-request-fiauth-key
                         :initform common-lisp:nil)
                        (domain-name :initarg :domain-name :type
                         (common-lisp:or domain-name common-lisp:null)
                         :accessor
                         %update-domain-nameservers-request-domain-name
                         :initform
                         (common-lisp:error ":domain-name is required"))))
 (common-lisp:export
  (common-lisp:list 'update-domain-nameservers-request
                    'make-update-domain-nameservers-request))
 (common-lisp:defun make-update-domain-nameservers-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key nameservers fiauth-key domain-name)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-domain-nameservers-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-domain-nameservers-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-domain-nameservers-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-name))
      (common-lisp:list
       (common-lisp:cons "DomainName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'fiauth-key))
      (common-lisp:list
       (common-lisp:cons "FIAuthKey"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'nameservers))
      (common-lisp:list
       (common-lisp:cons "Nameservers"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-domain-nameservers-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-domain-nameservers-response common-lisp:nil
                       ((operation-id :initarg :operation-id :type
                         (common-lisp:or operation-id common-lisp:null)
                         :accessor
                         %update-domain-nameservers-response-operation-id
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'update-domain-nameservers-response
                    'make-update-domain-nameservers-response))
 (common-lisp:defun make-update-domain-nameservers-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key operation-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-domain-nameservers-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-domain-nameservers-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-domain-nameservers-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'operation-id))
      (common-lisp:list
       (common-lisp:cons "OperationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-domain-nameservers-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-tags-for-domain-request common-lisp:nil
                       ((tags-to-update :initarg :tags-to-update :type
                         (common-lisp:or tag-list common-lisp:null) :accessor
                         %update-tags-for-domain-request-tags-to-update
                         :initform common-lisp:nil)
                        (domain-name :initarg :domain-name :type
                         (common-lisp:or domain-name common-lisp:null)
                         :accessor %update-tags-for-domain-request-domain-name
                         :initform
                         (common-lisp:error ":domain-name is required"))))
 (common-lisp:export
  (common-lisp:list 'update-tags-for-domain-request
                    'make-update-tags-for-domain-request))
 (common-lisp:defun make-update-tags-for-domain-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tags-to-update domain-name)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-tags-for-domain-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-tags-for-domain-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-tags-for-domain-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-name))
      (common-lisp:list
       (common-lisp:cons "DomainName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags-to-update))
      (common-lisp:list
       (common-lisp:cons "TagsToUpdate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-tags-for-domain-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-tags-for-domain-response common-lisp:nil
                       common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'update-tags-for-domain-response
                    'make-update-tags-for-domain-response))
 (common-lisp:defun make-update-tags-for-domain-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-tags-for-domain-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-tags-for-domain-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-tags-for-domain-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-tags-for-domain-response))
   common-lisp:nil))
(common-lisp:deftype value () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype values () '(trivial-types:proper-list value))
 (common-lisp:defun |make-values|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list value))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass view-billing-request common-lisp:nil
                       ((max-items :initarg :max-items :type
                         (common-lisp:or page-max-items common-lisp:null)
                         :accessor %view-billing-request-max-items :initform
                         common-lisp:nil)
                        (marker :initarg :marker :type
                         (common-lisp:or page-marker common-lisp:null)
                         :accessor %view-billing-request-marker :initform
                         common-lisp:nil)
                        (end :initarg :end :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %view-billing-request-end :initform common-lisp:nil)
                        (start :initarg :start :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %view-billing-request-start :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'view-billing-request 'make-view-billing-request))
 (common-lisp:defun make-view-billing-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key max-items marker end start)
   (common-lisp:apply #'common-lisp:make-instance 'view-billing-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input view-billing-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input view-billing-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start))
      (common-lisp:list
       (common-lisp:cons "Start"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'end))
      (common-lisp:list
       (common-lisp:cons "End"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-items))
      (common-lisp:list
       (common-lisp:cons "MaxItems"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input view-billing-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass view-billing-response common-lisp:nil
                       ((billing-records :initarg :billing-records :type
                         (common-lisp:or billing-records common-lisp:null)
                         :accessor %view-billing-response-billing-records
                         :initform common-lisp:nil)
                        (next-page-marker :initarg :next-page-marker :type
                         (common-lisp:or page-marker common-lisp:null)
                         :accessor %view-billing-response-next-page-marker
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'view-billing-response 'make-view-billing-response))
 (common-lisp:defun make-view-billing-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key billing-records next-page-marker)
   (common-lisp:apply #'common-lisp:make-instance 'view-billing-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          view-billing-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          view-billing-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-page-marker))
      (common-lisp:list
       (common-lisp:cons "NextPageMarker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'billing-records))
      (common-lisp:list
       (common-lisp:cons "BillingRecords"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          view-billing-response))
   common-lisp:nil))
(common-lisp:deftype zip-code () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defun accept-domain-transfer-from-another-aws-account
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key domain-name password)
   (common-lisp:declare (common-lisp:ignorable domain-name password))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-accept-domain-transfer-from-another-aws-account-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'route53domains-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "AcceptDomainTransferFromAnotherAwsAccount"
                                                        "2014-05-15"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'accept-domain-transfer-from-another-aws-account))
(common-lisp:progn
 (common-lisp:defun associate-delegation-signer-to-domain
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key domain-name signing-attributes)
   (common-lisp:declare (common-lisp:ignorable domain-name signing-attributes))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-associate-delegation-signer-to-domain-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'route53domains-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "AssociateDelegationSignerToDomain"
                                                        "2014-05-15"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'associate-delegation-signer-to-domain))
(common-lisp:progn
 (common-lisp:defun cancel-domain-transfer-to-another-aws-account
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key domain-name)
   (common-lisp:declare (common-lisp:ignorable domain-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-cancel-domain-transfer-to-another-aws-account-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'route53domains-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "CancelDomainTransferToAnotherAwsAccount"
                                                        "2014-05-15"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'cancel-domain-transfer-to-another-aws-account))
(common-lisp:progn
 (common-lisp:defun check-domain-availability
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key domain-name idn-lang-code)
   (common-lisp:declare (common-lisp:ignorable domain-name idn-lang-code))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-check-domain-availability-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'route53domains-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "CheckDomainAvailability"
                                                        "2014-05-15"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'check-domain-availability))
(common-lisp:progn
 (common-lisp:defun check-domain-transferability
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key domain-name auth-code)
   (common-lisp:declare (common-lisp:ignorable domain-name auth-code))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-check-domain-transferability-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'route53domains-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "CheckDomainTransferability"
                                                        "2014-05-15"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'check-domain-transferability))
(common-lisp:progn
 (common-lisp:defun delete-domain
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key domain-name)
   (common-lisp:declare (common-lisp:ignorable domain-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-domain-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'route53domains-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "DeleteDomain"
                                                        "2014-05-15"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-domain))
(common-lisp:progn
 (common-lisp:defun delete-tags-for-domain
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key domain-name tags-to-delete)
   (common-lisp:declare (common-lisp:ignorable domain-name tags-to-delete))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-tags-for-domain-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'route53domains-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "DeleteTagsForDomain"
                                                        "2014-05-15"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-tags-for-domain))
(common-lisp:progn
 (common-lisp:defun disable-domain-auto-renew
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key domain-name)
   (common-lisp:declare (common-lisp:ignorable domain-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-disable-domain-auto-renew-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'route53domains-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "DisableDomainAutoRenew"
                                                        "2014-05-15"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'disable-domain-auto-renew))
(common-lisp:progn
 (common-lisp:defun disable-domain-transfer-lock
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key domain-name)
   (common-lisp:declare (common-lisp:ignorable domain-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-disable-domain-transfer-lock-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'route53domains-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "DisableDomainTransferLock"
                                                        "2014-05-15"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'disable-domain-transfer-lock))
(common-lisp:progn
 (common-lisp:defun disassociate-delegation-signer-from-domain
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key domain-name id)
   (common-lisp:declare (common-lisp:ignorable domain-name id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-disassociate-delegation-signer-from-domain-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'route53domains-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "DisassociateDelegationSignerFromDomain"
                                                        "2014-05-15"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'disassociate-delegation-signer-from-domain))
(common-lisp:progn
 (common-lisp:defun enable-domain-auto-renew
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key domain-name)
   (common-lisp:declare (common-lisp:ignorable domain-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-enable-domain-auto-renew-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'route53domains-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "EnableDomainAutoRenew"
                                                        "2014-05-15"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'enable-domain-auto-renew))
(common-lisp:progn
 (common-lisp:defun enable-domain-transfer-lock
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key domain-name)
   (common-lisp:declare (common-lisp:ignorable domain-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-enable-domain-transfer-lock-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'route53domains-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "EnableDomainTransferLock"
                                                        "2014-05-15"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'enable-domain-transfer-lock))
(common-lisp:progn
 (common-lisp:defun get-contact-reachability-status
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key domain-name)
   (common-lisp:declare (common-lisp:ignorable domain-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-get-contact-reachability-status-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'route53domains-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "GetContactReachabilityStatus"
                                                        "2014-05-15"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-contact-reachability-status))
(common-lisp:progn
 (common-lisp:defun get-domain-detail
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key domain-name)
   (common-lisp:declare (common-lisp:ignorable domain-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-domain-detail-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'route53domains-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "GetDomainDetail"
                                                        "2014-05-15"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-domain-detail))
(common-lisp:progn
 (common-lisp:defun get-domain-suggestions
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key domain-name suggestion-count
                     only-available)
   (common-lisp:declare
    (common-lisp:ignorable domain-name suggestion-count only-available))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-domain-suggestions-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'route53domains-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "GetDomainSuggestions"
                                                        "2014-05-15"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-domain-suggestions))
(common-lisp:progn
 (common-lisp:defun get-operation-detail
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key operation-id)
   (common-lisp:declare (common-lisp:ignorable operation-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-operation-detail-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'route53domains-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "GetOperationDetail"
                                                        "2014-05-15"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-operation-detail))
(common-lisp:progn
 (common-lisp:defun list-domains
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key filter-conditions sort-condition marker
                     max-items)
   (common-lisp:declare
    (common-lisp:ignorable filter-conditions sort-condition marker max-items))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-domains-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'route53domains-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "ListDomains"
                                                        "2014-05-15"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-domains))
(common-lisp:progn
 (common-lisp:defun list-operations
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key submitted-since marker max-items status
                     type sort-by sort-order)
   (common-lisp:declare
    (common-lisp:ignorable submitted-since marker max-items status type sort-by
     sort-order))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-operations-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'route53domains-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "ListOperations"
                                                        "2014-05-15"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-operations))
(common-lisp:progn
 (common-lisp:defun list-prices
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key tld marker max-items)
   (common-lisp:declare (common-lisp:ignorable tld marker max-items))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-prices-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'route53domains-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "ListPrices"
                                                        "2014-05-15"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-prices))
(common-lisp:progn
 (common-lisp:defun list-tags-for-domain
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key domain-name)
   (common-lisp:declare (common-lisp:ignorable domain-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-tags-for-domain-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'route53domains-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "ListTagsForDomain"
                                                        "2014-05-15"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-tags-for-domain))
(common-lisp:progn
 (common-lisp:defun push-domain
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key domain-name target)
   (common-lisp:declare (common-lisp:ignorable domain-name target))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-push-domain-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'route53domains-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "PushDomain"
                                                        "2014-05-15"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'push-domain))
(common-lisp:progn
 (common-lisp:defun register-domain
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key domain-name idn-lang-code
                     duration-in-years auto-renew admin-contact
                     registrant-contact tech-contact
                     privacy-protect-admin-contact
                     privacy-protect-registrant-contact
                     privacy-protect-tech-contact)
   (common-lisp:declare
    (common-lisp:ignorable domain-name idn-lang-code duration-in-years
     auto-renew admin-contact registrant-contact tech-contact
     privacy-protect-admin-contact privacy-protect-registrant-contact
     privacy-protect-tech-contact))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-register-domain-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'route53domains-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "RegisterDomain"
                                                        "2014-05-15"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'register-domain))
(common-lisp:progn
 (common-lisp:defun reject-domain-transfer-from-another-aws-account
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key domain-name)
   (common-lisp:declare (common-lisp:ignorable domain-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-reject-domain-transfer-from-another-aws-account-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'route53domains-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "RejectDomainTransferFromAnotherAwsAccount"
                                                        "2014-05-15"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'reject-domain-transfer-from-another-aws-account))
(common-lisp:progn
 (common-lisp:defun renew-domain
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key domain-name duration-in-years
                     current-expiry-year)
   (common-lisp:declare
    (common-lisp:ignorable domain-name duration-in-years current-expiry-year))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-renew-domain-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'route53domains-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "RenewDomain"
                                                        "2014-05-15"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'renew-domain))
(common-lisp:progn
 (common-lisp:defun resend-contact-reachability-email
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key domain-name)
   (common-lisp:declare (common-lisp:ignorable domain-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-resend-contact-reachability-email-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'route53domains-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "ResendContactReachabilityEmail"
                                                        "2014-05-15"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'resend-contact-reachability-email))
(common-lisp:progn
 (common-lisp:defun resend-operation-authorization
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key operation-id)
   (common-lisp:declare (common-lisp:ignorable operation-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-resend-operation-authorization-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'route53domains-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "ResendOperationAuthorization"
                                                        "2014-05-15"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'resend-operation-authorization))
(common-lisp:progn
 (common-lisp:defun retrieve-domain-auth-code
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key domain-name)
   (common-lisp:declare (common-lisp:ignorable domain-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-retrieve-domain-auth-code-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'route53domains-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "RetrieveDomainAuthCode"
                                                        "2014-05-15"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'retrieve-domain-auth-code))
(common-lisp:progn
 (common-lisp:defun transfer-domain
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key domain-name idn-lang-code
                     duration-in-years nameservers auth-code auto-renew
                     admin-contact registrant-contact tech-contact
                     privacy-protect-admin-contact
                     privacy-protect-registrant-contact
                     privacy-protect-tech-contact)
   (common-lisp:declare
    (common-lisp:ignorable domain-name idn-lang-code duration-in-years
     nameservers auth-code auto-renew admin-contact registrant-contact
     tech-contact privacy-protect-admin-contact
     privacy-protect-registrant-contact privacy-protect-tech-contact))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-transfer-domain-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'route53domains-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "TransferDomain"
                                                        "2014-05-15"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'transfer-domain))
(common-lisp:progn
 (common-lisp:defun transfer-domain-to-another-aws-account
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key domain-name account-id)
   (common-lisp:declare (common-lisp:ignorable domain-name account-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-transfer-domain-to-another-aws-account-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'route53domains-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "TransferDomainToAnotherAwsAccount"
                                                        "2014-05-15"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'transfer-domain-to-another-aws-account))
(common-lisp:progn
 (common-lisp:defun update-domain-contact
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key domain-name admin-contact
                     registrant-contact tech-contact consent)
   (common-lisp:declare
    (common-lisp:ignorable domain-name admin-contact registrant-contact
     tech-contact consent))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-domain-contact-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'route53domains-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "UpdateDomainContact"
                                                        "2014-05-15"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-domain-contact))
(common-lisp:progn
 (common-lisp:defun update-domain-contact-privacy
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key domain-name admin-privacy
                     registrant-privacy tech-privacy)
   (common-lisp:declare
    (common-lisp:ignorable domain-name admin-privacy registrant-privacy
     tech-privacy))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-update-domain-contact-privacy-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'route53domains-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "UpdateDomainContactPrivacy"
                                                        "2014-05-15"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-domain-contact-privacy))
(common-lisp:progn
 (common-lisp:defun update-domain-nameservers
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key domain-name fiauth-key nameservers)
   (common-lisp:declare
    (common-lisp:ignorable domain-name fiauth-key nameservers))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-update-domain-nameservers-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'route53domains-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "UpdateDomainNameservers"
                                                        "2014-05-15"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-domain-nameservers))
(common-lisp:progn
 (common-lisp:defun update-tags-for-domain
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key domain-name tags-to-update)
   (common-lisp:declare (common-lisp:ignorable domain-name tags-to-update))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-tags-for-domain-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'route53domains-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "UpdateTagsForDomain"
                                                        "2014-05-15"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-tags-for-domain))
(common-lisp:progn
 (common-lisp:defun view-billing
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key start end marker max-items)
   (common-lisp:declare (common-lisp:ignorable start end marker max-items))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-view-billing-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'route53domains-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "ViewBilling"
                                                        "2014-05-15"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'view-billing))
