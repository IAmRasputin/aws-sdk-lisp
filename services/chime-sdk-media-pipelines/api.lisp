;; DO NOT EDIT: File is generated by AWS-SDK/GENERATOR.

(common-lisp:defpackage #:aws-sdk/services/chime-sdk-media-pipelines/api
  (:use)
  (:nicknames #:aws/chime-sdk-media-pipelines)
  (:import-from #:aws-sdk/generator/shape)
  (:import-from #:aws-sdk/generator/operation)
  (:import-from #:aws-sdk/api)
  (:import-from #:aws-sdk/request)
  (:import-from #:aws-sdk/error))
(common-lisp:in-package #:aws-sdk/services/chime-sdk-media-pipelines/api)
(common-lisp:progn
 (common-lisp:defclass chime-sdk-media-pipelines-request
                       (aws-sdk/request:request) common-lisp:nil
                       (:default-initargs :service
                        "chime-sdk-media-pipelines"))
 (common-lisp:export 'chime-sdk-media-pipelines-request))
(common-lisp:progn
 (common-lisp:define-condition chime-sdk-media-pipelines-error
     (aws-sdk/error:aws-error)
     common-lisp:nil)
 (common-lisp:export 'chime-sdk-media-pipelines-error))
(common-lisp:defvar *error-map*
  '(("BadRequestException" . bad-request-exception)
    ("ForbiddenException" . forbidden-exception)
    ("NotFoundException" . not-found-exception)
    ("ResourceLimitExceededException" . resource-limit-exceeded-exception)
    ("ServiceFailureException" . service-failure-exception)
    ("ServiceUnavailableException" . service-unavailable-exception)
    ("ThrottledClientException" . throttled-client-exception)
    ("UnauthorizedClientException" . unauthorized-client-exception)))
(common-lisp:deftype amazon-resource-name () 'common-lisp:string)
(common-lisp:deftype arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (artifacts-concatenation-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-artifacts-concatenation-configuration-"))
   (audio (common-lisp:error ":audio is required") :type
    (common-lisp:or audio-concatenation-configuration common-lisp:null))
   (video (common-lisp:error ":video is required") :type
    (common-lisp:or video-concatenation-configuration common-lisp:null))
   (content (common-lisp:error ":content is required") :type
    (common-lisp:or content-concatenation-configuration common-lisp:null))
   (data-channel (common-lisp:error ":data-channel is required") :type
    (common-lisp:or data-channel-concatenation-configuration common-lisp:null))
   (transcription-messages
    (common-lisp:error ":transcription-messages is required") :type
    (common-lisp:or transcription-messages-concatenation-configuration
                    common-lisp:null))
   (meeting-events (common-lisp:error ":meeting-events is required") :type
    (common-lisp:or meeting-events-concatenation-configuration
                    common-lisp:null))
   (composited-video (common-lisp:error ":composited-video is required") :type
    (common-lisp:or composited-video-concatenation-configuration
                    common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'artifacts-concatenation-configuration
                    'make-artifacts-concatenation-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          artifacts-concatenation-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          artifacts-concatenation-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'audio))
      (common-lisp:list
       (common-lisp:cons "Audio"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'video))
      (common-lisp:list
       (common-lisp:cons "Video"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'content))
      (common-lisp:list
       (common-lisp:cons "Content"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-channel))
      (common-lisp:list
       (common-lisp:cons "DataChannel"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'transcription-messages))
      (common-lisp:list
       (common-lisp:cons "TranscriptionMessages"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'meeting-events))
      (common-lisp:list
       (common-lisp:cons "MeetingEvents"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'composited-video))
      (common-lisp:list
       (common-lisp:cons "CompositedVideo"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          artifacts-concatenation-configuration))
   common-lisp:nil))
(common-lisp:deftype artifacts-concatenation-state () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (artifacts-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-artifacts-configuration-"))
   (audio (common-lisp:error ":audio is required") :type
    (common-lisp:or audio-artifacts-configuration common-lisp:null))
   (video (common-lisp:error ":video is required") :type
    (common-lisp:or video-artifacts-configuration common-lisp:null))
   (content (common-lisp:error ":content is required") :type
    (common-lisp:or content-artifacts-configuration common-lisp:null))
   (composited-video common-lisp:nil :type
    (common-lisp:or composited-video-artifacts-configuration
                    common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'artifacts-configuration 'make-artifacts-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          artifacts-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          artifacts-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'audio))
      (common-lisp:list
       (common-lisp:cons "Audio"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'video))
      (common-lisp:list
       (common-lisp:cons "Video"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'content))
      (common-lisp:list
       (common-lisp:cons "Content"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'composited-video))
      (common-lisp:list
       (common-lisp:cons "CompositedVideo"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          artifacts-configuration))
   common-lisp:nil))
(common-lisp:deftype artifacts-state () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype attendee-id-list ()
   '(trivial-types:proper-list guid-string))
 (common-lisp:defun |make-attendee-id-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list guid-string))
   aws-sdk/generator/shape::members))
(common-lisp:deftype audio-artifacts-concatenation-state () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (audio-artifacts-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-audio-artifacts-configuration-"))
   (mux-type (common-lisp:error ":mux-type is required") :type
    (common-lisp:or audio-mux-type common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'audio-artifacts-configuration
                    'make-audio-artifacts-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          audio-artifacts-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          audio-artifacts-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'mux-type))
      (common-lisp:list
       (common-lisp:cons "MuxType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          audio-artifacts-configuration))
   common-lisp:nil))
(common-lisp:deftype audio-channels-option () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (audio-concatenation-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-audio-concatenation-configuration-"))
   (state (common-lisp:error ":state is required") :type
    (common-lisp:or audio-artifacts-concatenation-state common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'audio-concatenation-configuration
                    'make-audio-concatenation-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          audio-concatenation-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          audio-concatenation-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "State"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          audio-concatenation-configuration))
   common-lisp:nil))
(common-lisp:deftype audio-mux-type () 'common-lisp:string)
(common-lisp:deftype audio-sample-rate-option () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition bad-request-exception
     (chime-sdk-media-pipelines-error)
     ((code :initarg :code :initform common-lisp:nil :reader
       bad-request-exception-code)
      (message :initarg :message :initform common-lisp:nil :reader
       bad-request-exception-message)
      (request-id :initarg :request-id :initform common-lisp:nil :reader
       bad-request-exception-request-id)))
 (common-lisp:export
  (common-lisp:list 'bad-request-exception 'bad-request-exception-code
                    'bad-request-exception-message
                    'bad-request-exception-request-id)))
(common-lisp:progn
 (common-lisp:defstruct
     (chime-sdk-meeting-concatenation-configuration (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-chime-sdk-meeting-concatenation-configuration-"))
   (artifacts-configuration
    (common-lisp:error ":artifacts-configuration is required") :type
    (common-lisp:or artifacts-concatenation-configuration common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'chime-sdk-meeting-concatenation-configuration
                    'make-chime-sdk-meeting-concatenation-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          chime-sdk-meeting-concatenation-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          chime-sdk-meeting-concatenation-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'artifacts-configuration))
      (common-lisp:list
       (common-lisp:cons "ArtifactsConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          chime-sdk-meeting-concatenation-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (chime-sdk-meeting-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-chime-sdk-meeting-configuration-"))
   (source-configuration common-lisp:nil :type
    (common-lisp:or source-configuration common-lisp:null))
   (artifacts-configuration common-lisp:nil :type
    (common-lisp:or artifacts-configuration common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'chime-sdk-meeting-configuration
                    'make-chime-sdk-meeting-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          chime-sdk-meeting-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          chime-sdk-meeting-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'source-configuration))
      (common-lisp:list
       (common-lisp:cons "SourceConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'artifacts-configuration))
      (common-lisp:list
       (common-lisp:cons "ArtifactsConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          chime-sdk-meeting-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (chime-sdk-meeting-live-connector-configuration (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-chime-sdk-meeting-live-connector-configuration-"))
   (arn (common-lisp:error ":arn is required") :type
    (common-lisp:or arn common-lisp:null))
   (mux-type (common-lisp:error ":mux-type is required") :type
    (common-lisp:or live-connector-mux-type common-lisp:null))
   (composited-video common-lisp:nil :type
    (common-lisp:or composited-video-artifacts-configuration common-lisp:null))
   (source-configuration common-lisp:nil :type
    (common-lisp:or source-configuration common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'chime-sdk-meeting-live-connector-configuration
                    'make-chime-sdk-meeting-live-connector-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          chime-sdk-meeting-live-connector-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          chime-sdk-meeting-live-connector-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'mux-type))
      (common-lisp:list
       (common-lisp:cons "MuxType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'composited-video))
      (common-lisp:list
       (common-lisp:cons "CompositedVideo"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'source-configuration))
      (common-lisp:list
       (common-lisp:cons "SourceConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          chime-sdk-meeting-live-connector-configuration))
   common-lisp:nil))
(common-lisp:deftype client-request-token () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (composited-video-artifacts-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-composited-video-artifacts-configuration-"))
   (layout common-lisp:nil :type
    (common-lisp:or layout-option common-lisp:null))
   (resolution common-lisp:nil :type
    (common-lisp:or resolution-option common-lisp:null))
   (grid-view-configuration
    (common-lisp:error ":grid-view-configuration is required") :type
    (common-lisp:or grid-view-configuration common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'composited-video-artifacts-configuration
                    'make-composited-video-artifacts-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          composited-video-artifacts-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          composited-video-artifacts-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'layout))
      (common-lisp:list
       (common-lisp:cons "Layout"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resolution))
      (common-lisp:list
       (common-lisp:cons "Resolution"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'grid-view-configuration))
      (common-lisp:list
       (common-lisp:cons "GridViewConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          composited-video-artifacts-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (composited-video-concatenation-configuration (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-composited-video-concatenation-configuration-"))
   (state (common-lisp:error ":state is required") :type
    (common-lisp:or artifacts-concatenation-state common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'composited-video-concatenation-configuration
                    'make-composited-video-concatenation-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          composited-video-concatenation-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          composited-video-concatenation-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "State"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          composited-video-concatenation-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (concatenation-sink (:copier common-lisp:nil)
      (:conc-name "struct-shape-concatenation-sink-"))
   (type (common-lisp:error ":type is required") :type
    (common-lisp:or concatenation-sink-type common-lisp:null))
   (s3bucket-sink-configuration
    (common-lisp:error ":s3bucket-sink-configuration is required") :type
    (common-lisp:or s3bucket-sink-configuration common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'concatenation-sink 'make-concatenation-sink))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input concatenation-sink))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input concatenation-sink))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           's3bucket-sink-configuration))
      (common-lisp:list
       (common-lisp:cons "S3BucketSinkConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input concatenation-sink))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype concatenation-sink-list ()
   '(trivial-types:proper-list concatenation-sink))
 (common-lisp:defun |make-concatenation-sink-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list concatenation-sink))
   aws-sdk/generator/shape::members))
(common-lisp:deftype concatenation-sink-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (concatenation-source (:copier common-lisp:nil)
      (:conc-name "struct-shape-concatenation-source-"))
   (type (common-lisp:error ":type is required") :type
    (common-lisp:or concatenation-source-type common-lisp:null))
   (media-capture-pipeline-source-configuration
    (common-lisp:error
     ":media-capture-pipeline-source-configuration is required")
    :type
    (common-lisp:or media-capture-pipeline-source-configuration
                    common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'concatenation-source 'make-concatenation-source))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input concatenation-source))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input concatenation-source))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'media-capture-pipeline-source-configuration))
      (common-lisp:list
       (common-lisp:cons "MediaCapturePipelineSourceConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input concatenation-source))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype concatenation-source-list ()
   '(trivial-types:proper-list concatenation-source))
 (common-lisp:defun |make-concatenation-source-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list concatenation-source))
   aws-sdk/generator/shape::members))
(common-lisp:deftype concatenation-source-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (content-artifacts-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-content-artifacts-configuration-"))
   (state (common-lisp:error ":state is required") :type
    (common-lisp:or artifacts-state common-lisp:null))
   (mux-type common-lisp:nil :type
    (common-lisp:or content-mux-type common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'content-artifacts-configuration
                    'make-content-artifacts-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          content-artifacts-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          content-artifacts-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "State"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'mux-type))
      (common-lisp:list
       (common-lisp:cons "MuxType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          content-artifacts-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (content-concatenation-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-content-concatenation-configuration-"))
   (state (common-lisp:error ":state is required") :type
    (common-lisp:or artifacts-concatenation-state common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'content-concatenation-configuration
                    'make-content-concatenation-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          content-concatenation-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          content-concatenation-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "State"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          content-concatenation-configuration))
   common-lisp:nil))
(common-lisp:deftype content-mux-type () 'common-lisp:string)
(common-lisp:deftype content-share-layout-option () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (create-media-capture-pipeline-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-media-capture-pipeline-request-"))
   (source-type (common-lisp:error ":source-type is required") :type
    (common-lisp:or media-pipeline-source-type common-lisp:null))
   (source-arn (common-lisp:error ":source-arn is required") :type
    (common-lisp:or arn common-lisp:null))
   (sink-type (common-lisp:error ":sink-type is required") :type
    (common-lisp:or media-pipeline-sink-type common-lisp:null))
   (sink-arn (common-lisp:error ":sink-arn is required") :type
    (common-lisp:or arn common-lisp:null))
   (client-request-token common-lisp:nil :type
    (common-lisp:or client-request-token common-lisp:null))
   (chime-sdk-meeting-configuration common-lisp:nil :type
    (common-lisp:or chime-sdk-meeting-configuration common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-media-capture-pipeline-request
                    'make-create-media-capture-pipeline-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-media-capture-pipeline-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-media-capture-pipeline-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-type))
      (common-lisp:list
       (common-lisp:cons "SourceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-arn))
      (common-lisp:list
       (common-lisp:cons "SourceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sink-type))
      (common-lisp:list
       (common-lisp:cons "SinkType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sink-arn))
      (common-lisp:list
       (common-lisp:cons "SinkArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'client-request-token))
      (common-lisp:list
       (common-lisp:cons "ClientRequestToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'chime-sdk-meeting-configuration))
      (common-lisp:list
       (common-lisp:cons "ChimeSdkMeetingConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-media-capture-pipeline-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-media-capture-pipeline-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-media-capture-pipeline-response-"))
   (media-capture-pipeline common-lisp:nil :type
    (common-lisp:or media-capture-pipeline common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-media-capture-pipeline-response
                    'make-create-media-capture-pipeline-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-media-capture-pipeline-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-media-capture-pipeline-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'media-capture-pipeline))
      (common-lisp:list
       (common-lisp:cons "MediaCapturePipeline"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-media-capture-pipeline-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-media-concatenation-pipeline-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-media-concatenation-pipeline-request-"))
   (sources (common-lisp:error ":sources is required") :type
    (common-lisp:or concatenation-source-list common-lisp:null))
   (sinks (common-lisp:error ":sinks is required") :type
    (common-lisp:or concatenation-sink-list common-lisp:null))
   (client-request-token common-lisp:nil :type
    (common-lisp:or client-request-token common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-media-concatenation-pipeline-request
                    'make-create-media-concatenation-pipeline-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-media-concatenation-pipeline-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-media-concatenation-pipeline-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sources))
      (common-lisp:list
       (common-lisp:cons "Sources"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sinks))
      (common-lisp:list
       (common-lisp:cons "Sinks"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'client-request-token))
      (common-lisp:list
       (common-lisp:cons "ClientRequestToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-media-concatenation-pipeline-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-media-concatenation-pipeline-response (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-create-media-concatenation-pipeline-response-"))
   (media-concatenation-pipeline common-lisp:nil :type
    (common-lisp:or media-concatenation-pipeline common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-media-concatenation-pipeline-response
                    'make-create-media-concatenation-pipeline-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-media-concatenation-pipeline-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-media-concatenation-pipeline-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'media-concatenation-pipeline))
      (common-lisp:list
       (common-lisp:cons "MediaConcatenationPipeline"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-media-concatenation-pipeline-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-media-live-connector-pipeline-request (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-create-media-live-connector-pipeline-request-"))
   (sources (common-lisp:error ":sources is required") :type
    (common-lisp:or live-connector-source-list common-lisp:null))
   (sinks (common-lisp:error ":sinks is required") :type
    (common-lisp:or live-connector-sink-list common-lisp:null))
   (client-request-token common-lisp:nil :type
    (common-lisp:or client-request-token common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-media-live-connector-pipeline-request
                    'make-create-media-live-connector-pipeline-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-media-live-connector-pipeline-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-media-live-connector-pipeline-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sources))
      (common-lisp:list
       (common-lisp:cons "Sources"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sinks))
      (common-lisp:list
       (common-lisp:cons "Sinks"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'client-request-token))
      (common-lisp:list
       (common-lisp:cons "ClientRequestToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-media-live-connector-pipeline-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-media-live-connector-pipeline-response (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-create-media-live-connector-pipeline-response-"))
   (media-live-connector-pipeline common-lisp:nil :type
    (common-lisp:or media-live-connector-pipeline common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-media-live-connector-pipeline-response
                    'make-create-media-live-connector-pipeline-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-media-live-connector-pipeline-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-media-live-connector-pipeline-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'media-live-connector-pipeline))
      (common-lisp:list
       (common-lisp:cons "MediaLiveConnectorPipeline"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-media-live-connector-pipeline-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (data-channel-concatenation-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-data-channel-concatenation-configuration-"))
   (state (common-lisp:error ":state is required") :type
    (common-lisp:or artifacts-concatenation-state common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'data-channel-concatenation-configuration
                    'make-data-channel-concatenation-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          data-channel-concatenation-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          data-channel-concatenation-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "State"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          data-channel-concatenation-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-media-capture-pipeline-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-media-capture-pipeline-request-"))
   (media-pipeline-id (common-lisp:error ":media-pipeline-id is required")
    :type (common-lisp:or guid-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-media-capture-pipeline-request
                    'make-delete-media-capture-pipeline-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-media-capture-pipeline-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-media-capture-pipeline-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-media-capture-pipeline-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-media-pipeline-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-media-pipeline-request-"))
   (media-pipeline-id (common-lisp:error ":media-pipeline-id is required")
    :type (common-lisp:or guid-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-media-pipeline-request
                    'make-delete-media-pipeline-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-media-pipeline-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-media-pipeline-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-media-pipeline-request))
   common-lisp:nil))
(common-lisp:deftype error-code () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype external-user-id-list ()
   '(trivial-types:proper-list external-user-id-type))
 (common-lisp:defun |make-external-user-id-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list external-user-id-type))
   aws-sdk/generator/shape::members))
(common-lisp:deftype external-user-id-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition forbidden-exception
     (chime-sdk-media-pipelines-error)
     ((code :initarg :code :initform common-lisp:nil :reader
       forbidden-exception-code)
      (message :initarg :message :initform common-lisp:nil :reader
       forbidden-exception-message)
      (request-id :initarg :request-id :initform common-lisp:nil :reader
       forbidden-exception-request-id)))
 (common-lisp:export
  (common-lisp:list 'forbidden-exception 'forbidden-exception-code
                    'forbidden-exception-message
                    'forbidden-exception-request-id)))
(common-lisp:progn
 (common-lisp:defstruct
     (get-media-capture-pipeline-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-media-capture-pipeline-request-"))
   (media-pipeline-id (common-lisp:error ":media-pipeline-id is required")
    :type (common-lisp:or guid-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-media-capture-pipeline-request
                    'make-get-media-capture-pipeline-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-media-capture-pipeline-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-media-capture-pipeline-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-media-capture-pipeline-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-media-capture-pipeline-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-media-capture-pipeline-response-"))
   (media-capture-pipeline common-lisp:nil :type
    (common-lisp:or media-capture-pipeline common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-media-capture-pipeline-response
                    'make-get-media-capture-pipeline-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-media-capture-pipeline-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-media-capture-pipeline-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'media-capture-pipeline))
      (common-lisp:list
       (common-lisp:cons "MediaCapturePipeline"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-media-capture-pipeline-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-media-pipeline-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-media-pipeline-request-"))
   (media-pipeline-id (common-lisp:error ":media-pipeline-id is required")
    :type (common-lisp:or guid-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-media-pipeline-request
                    'make-get-media-pipeline-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-media-pipeline-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-media-pipeline-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-media-pipeline-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-media-pipeline-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-media-pipeline-response-"))
   (media-pipeline common-lisp:nil :type
    (common-lisp:or media-pipeline common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-media-pipeline-response
                    'make-get-media-pipeline-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-media-pipeline-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-media-pipeline-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'media-pipeline))
      (common-lisp:list
       (common-lisp:cons "MediaPipeline"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-media-pipeline-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (grid-view-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-grid-view-configuration-"))
   (content-share-layout
    (common-lisp:error ":content-share-layout is required") :type
    (common-lisp:or content-share-layout-option common-lisp:null))
   (presenter-only-configuration common-lisp:nil :type
    (common-lisp:or presenter-only-configuration common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'grid-view-configuration 'make-grid-view-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          grid-view-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          grid-view-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'content-share-layout))
      (common-lisp:list
       (common-lisp:cons "ContentShareLayout"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'presenter-only-configuration))
      (common-lisp:list
       (common-lisp:cons "PresenterOnlyConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          grid-view-configuration))
   common-lisp:nil))
(common-lisp:deftype guid-string () 'common-lisp:string)
(common-lisp:deftype iso8601timestamp () 'common-lisp:string)
(common-lisp:deftype layout-option () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (list-media-capture-pipelines-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-media-capture-pipelines-request-"))
   (next-token common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or result-max common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-media-capture-pipelines-request
                    'make-list-media-capture-pipelines-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-media-capture-pipelines-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-media-capture-pipelines-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-media-capture-pipelines-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-media-capture-pipelines-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-media-capture-pipelines-response-"))
   (media-capture-pipelines common-lisp:nil :type
    (common-lisp:or media-capture-pipeline-summary-list common-lisp:null))
   (next-token common-lisp:nil :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-media-capture-pipelines-response
                    'make-list-media-capture-pipelines-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-media-capture-pipelines-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-media-capture-pipelines-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'media-capture-pipelines))
      (common-lisp:list
       (common-lisp:cons "MediaCapturePipelines"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-media-capture-pipelines-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-media-pipelines-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-media-pipelines-request-"))
   (next-token common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or result-max common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-media-pipelines-request
                    'make-list-media-pipelines-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-media-pipelines-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-media-pipelines-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-media-pipelines-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-media-pipelines-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-media-pipelines-response-"))
   (media-pipelines common-lisp:nil :type
    (common-lisp:or media-pipeline-list common-lisp:null))
   (next-token common-lisp:nil :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-media-pipelines-response
                    'make-list-media-pipelines-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-media-pipelines-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-media-pipelines-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'media-pipelines))
      (common-lisp:list
       (common-lisp:cons "MediaPipelines"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-media-pipelines-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-tags-for-resource-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-tags-for-resource-request-"))
   (resource-arn (common-lisp:error ":resource-arn is required") :type
    (common-lisp:or amazon-resource-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-tags-for-resource-request
                    'make-list-tags-for-resource-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-tags-for-resource-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-tags-for-resource-response-"))
   (tags common-lisp:nil :type (common-lisp:or tag-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-tags-for-resource-response
                    'make-list-tags-for-resource-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-response))
   common-lisp:nil))
(common-lisp:deftype live-connector-mux-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (live-connector-rtmpconfiguration (:copier common-lisp:nil)
      (:conc-name "struct-shape-live-connector-rtmpconfiguration-"))
   (url (common-lisp:error ":url is required") :type
    (common-lisp:or sensitive-string common-lisp:null))
   (audio-channels common-lisp:nil :type
    (common-lisp:or audio-channels-option common-lisp:null))
   (audio-sample-rate common-lisp:nil :type
    (common-lisp:or audio-sample-rate-option common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'live-connector-rtmpconfiguration
                    'make-live-connector-rtmpconfiguration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          live-connector-rtmpconfiguration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          live-connector-rtmpconfiguration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'url))
      (common-lisp:list
       (common-lisp:cons "Url"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'audio-channels))
      (common-lisp:list
       (common-lisp:cons "AudioChannels"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'audio-sample-rate))
      (common-lisp:list
       (common-lisp:cons "AudioSampleRate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          live-connector-rtmpconfiguration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (live-connector-sink-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-live-connector-sink-configuration-"))
   (sink-type (common-lisp:error ":sink-type is required") :type
    (common-lisp:or live-connector-sink-type common-lisp:null))
   (rtmpconfiguration (common-lisp:error ":rtmpconfiguration is required")
    :type (common-lisp:or live-connector-rtmpconfiguration common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'live-connector-sink-configuration
                    'make-live-connector-sink-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          live-connector-sink-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          live-connector-sink-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sink-type))
      (common-lisp:list
       (common-lisp:cons "SinkType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rtmpconfiguration))
      (common-lisp:list
       (common-lisp:cons "RTMPConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          live-connector-sink-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype live-connector-sink-list ()
   '(trivial-types:proper-list live-connector-sink-configuration))
 (common-lisp:defun |make-live-connector-sink-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            live-connector-sink-configuration))
   aws-sdk/generator/shape::members))
(common-lisp:deftype live-connector-sink-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (live-connector-source-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-live-connector-source-configuration-"))
   (source-type (common-lisp:error ":source-type is required") :type
    (common-lisp:or live-connector-source-type common-lisp:null))
   (chime-sdk-meeting-live-connector-configuration
    (common-lisp:error
     ":chime-sdk-meeting-live-connector-configuration is required")
    :type
    (common-lisp:or chime-sdk-meeting-live-connector-configuration
                    common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'live-connector-source-configuration
                    'make-live-connector-source-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          live-connector-source-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          live-connector-source-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-type))
      (common-lisp:list
       (common-lisp:cons "SourceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'chime-sdk-meeting-live-connector-configuration))
      (common-lisp:list
       (common-lisp:cons "ChimeSdkMeetingLiveConnectorConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          live-connector-source-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype live-connector-source-list ()
   '(trivial-types:proper-list live-connector-source-configuration))
 (common-lisp:defun |make-live-connector-source-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            live-connector-source-configuration))
   aws-sdk/generator/shape::members))
(common-lisp:deftype live-connector-source-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (media-capture-pipeline (:copier common-lisp:nil)
      (:conc-name "struct-shape-media-capture-pipeline-"))
   (media-pipeline-id common-lisp:nil :type
    (common-lisp:or guid-string common-lisp:null))
   (media-pipeline-arn common-lisp:nil :type
    (common-lisp:or amazon-resource-name common-lisp:null))
   (source-type common-lisp:nil :type
    (common-lisp:or media-pipeline-source-type common-lisp:null))
   (source-arn common-lisp:nil :type (common-lisp:or arn common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or media-pipeline-status common-lisp:null))
   (sink-type common-lisp:nil :type
    (common-lisp:or media-pipeline-sink-type common-lisp:null))
   (sink-arn common-lisp:nil :type (common-lisp:or arn common-lisp:null))
   (created-timestamp common-lisp:nil :type
    (common-lisp:or iso8601timestamp common-lisp:null))
   (updated-timestamp common-lisp:nil :type
    (common-lisp:or iso8601timestamp common-lisp:null))
   (chime-sdk-meeting-configuration common-lisp:nil :type
    (common-lisp:or chime-sdk-meeting-configuration common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'media-capture-pipeline 'make-media-capture-pipeline))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          media-capture-pipeline))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          media-capture-pipeline))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'media-pipeline-id))
      (common-lisp:list
       (common-lisp:cons "MediaPipelineId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'media-pipeline-arn))
      (common-lisp:list
       (common-lisp:cons "MediaPipelineArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-type))
      (common-lisp:list
       (common-lisp:cons "SourceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-arn))
      (common-lisp:list
       (common-lisp:cons "SourceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sink-type))
      (common-lisp:list
       (common-lisp:cons "SinkType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sink-arn))
      (common-lisp:list
       (common-lisp:cons "SinkArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-timestamp))
      (common-lisp:list
       (common-lisp:cons "CreatedTimestamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'updated-timestamp))
      (common-lisp:list
       (common-lisp:cons "UpdatedTimestamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'chime-sdk-meeting-configuration))
      (common-lisp:list
       (common-lisp:cons "ChimeSdkMeetingConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          media-capture-pipeline))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (media-capture-pipeline-source-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-media-capture-pipeline-source-configuration-"))
   (media-pipeline-arn (common-lisp:error ":media-pipeline-arn is required")
    :type (common-lisp:or arn common-lisp:null))
   (chime-sdk-meeting-configuration
    (common-lisp:error ":chime-sdk-meeting-configuration is required") :type
    (common-lisp:or chime-sdk-meeting-concatenation-configuration
                    common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'media-capture-pipeline-source-configuration
                    'make-media-capture-pipeline-source-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          media-capture-pipeline-source-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          media-capture-pipeline-source-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'media-pipeline-arn))
      (common-lisp:list
       (common-lisp:cons "MediaPipelineArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'chime-sdk-meeting-configuration))
      (common-lisp:list
       (common-lisp:cons "ChimeSdkMeetingConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          media-capture-pipeline-source-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (media-capture-pipeline-summary (:copier common-lisp:nil)
      (:conc-name "struct-shape-media-capture-pipeline-summary-"))
   (media-pipeline-id common-lisp:nil :type
    (common-lisp:or guid-string common-lisp:null))
   (media-pipeline-arn common-lisp:nil :type
    (common-lisp:or amazon-resource-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'media-capture-pipeline-summary
                    'make-media-capture-pipeline-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          media-capture-pipeline-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          media-capture-pipeline-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'media-pipeline-id))
      (common-lisp:list
       (common-lisp:cons "MediaPipelineId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'media-pipeline-arn))
      (common-lisp:list
       (common-lisp:cons "MediaPipelineArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          media-capture-pipeline-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype media-capture-pipeline-summary-list ()
   '(trivial-types:proper-list media-capture-pipeline-summary))
 (common-lisp:defun |make-media-capture-pipeline-summary-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            media-capture-pipeline-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (media-concatenation-pipeline (:copier common-lisp:nil)
      (:conc-name "struct-shape-media-concatenation-pipeline-"))
   (media-pipeline-id common-lisp:nil :type
    (common-lisp:or guid-string common-lisp:null))
   (media-pipeline-arn common-lisp:nil :type
    (common-lisp:or amazon-resource-name common-lisp:null))
   (sources common-lisp:nil :type
    (common-lisp:or concatenation-source-list common-lisp:null))
   (sinks common-lisp:nil :type
    (common-lisp:or concatenation-sink-list common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or media-pipeline-status common-lisp:null))
   (created-timestamp common-lisp:nil :type
    (common-lisp:or iso8601timestamp common-lisp:null))
   (updated-timestamp common-lisp:nil :type
    (common-lisp:or iso8601timestamp common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'media-concatenation-pipeline
                    'make-media-concatenation-pipeline))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          media-concatenation-pipeline))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          media-concatenation-pipeline))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'media-pipeline-id))
      (common-lisp:list
       (common-lisp:cons "MediaPipelineId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'media-pipeline-arn))
      (common-lisp:list
       (common-lisp:cons "MediaPipelineArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sources))
      (common-lisp:list
       (common-lisp:cons "Sources"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sinks))
      (common-lisp:list
       (common-lisp:cons "Sinks"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-timestamp))
      (common-lisp:list
       (common-lisp:cons "CreatedTimestamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'updated-timestamp))
      (common-lisp:list
       (common-lisp:cons "UpdatedTimestamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          media-concatenation-pipeline))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (media-live-connector-pipeline (:copier common-lisp:nil)
      (:conc-name "struct-shape-media-live-connector-pipeline-"))
   (sources common-lisp:nil :type
    (common-lisp:or live-connector-source-list common-lisp:null))
   (sinks common-lisp:nil :type
    (common-lisp:or live-connector-sink-list common-lisp:null))
   (media-pipeline-id common-lisp:nil :type
    (common-lisp:or guid-string common-lisp:null))
   (media-pipeline-arn common-lisp:nil :type
    (common-lisp:or amazon-resource-name common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or media-pipeline-status common-lisp:null))
   (created-timestamp common-lisp:nil :type
    (common-lisp:or iso8601timestamp common-lisp:null))
   (updated-timestamp common-lisp:nil :type
    (common-lisp:or iso8601timestamp common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'media-live-connector-pipeline
                    'make-media-live-connector-pipeline))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          media-live-connector-pipeline))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          media-live-connector-pipeline))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sources))
      (common-lisp:list
       (common-lisp:cons "Sources"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sinks))
      (common-lisp:list
       (common-lisp:cons "Sinks"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'media-pipeline-id))
      (common-lisp:list
       (common-lisp:cons "MediaPipelineId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'media-pipeline-arn))
      (common-lisp:list
       (common-lisp:cons "MediaPipelineArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-timestamp))
      (common-lisp:list
       (common-lisp:cons "CreatedTimestamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'updated-timestamp))
      (common-lisp:list
       (common-lisp:cons "UpdatedTimestamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          media-live-connector-pipeline))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (media-pipeline (:copier common-lisp:nil)
      (:conc-name "struct-shape-media-pipeline-"))
   (media-capture-pipeline common-lisp:nil :type
    (common-lisp:or media-capture-pipeline common-lisp:null))
   (media-live-connector-pipeline common-lisp:nil :type
    (common-lisp:or media-live-connector-pipeline common-lisp:null))
   (media-concatenation-pipeline common-lisp:nil :type
    (common-lisp:or media-concatenation-pipeline common-lisp:null)))
 (common-lisp:export (common-lisp:list 'media-pipeline 'make-media-pipeline))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input media-pipeline))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input media-pipeline))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'media-capture-pipeline))
      (common-lisp:list
       (common-lisp:cons "MediaCapturePipeline"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'media-live-connector-pipeline))
      (common-lisp:list
       (common-lisp:cons "MediaLiveConnectorPipeline"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'media-concatenation-pipeline))
      (common-lisp:list
       (common-lisp:cons "MediaConcatenationPipeline"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input media-pipeline))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype media-pipeline-list ()
   '(trivial-types:proper-list media-pipeline-summary))
 (common-lisp:defun |make-media-pipeline-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list media-pipeline-summary))
   aws-sdk/generator/shape::members))
(common-lisp:deftype media-pipeline-sink-type () 'common-lisp:string)
(common-lisp:deftype media-pipeline-source-type () 'common-lisp:string)
(common-lisp:deftype media-pipeline-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (media-pipeline-summary (:copier common-lisp:nil)
      (:conc-name "struct-shape-media-pipeline-summary-"))
   (media-pipeline-id common-lisp:nil :type
    (common-lisp:or guid-string common-lisp:null))
   (media-pipeline-arn common-lisp:nil :type
    (common-lisp:or amazon-resource-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'media-pipeline-summary 'make-media-pipeline-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          media-pipeline-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          media-pipeline-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'media-pipeline-id))
      (common-lisp:list
       (common-lisp:cons "MediaPipelineId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'media-pipeline-arn))
      (common-lisp:list
       (common-lisp:cons "MediaPipelineArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          media-pipeline-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (meeting-events-concatenation-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-meeting-events-concatenation-configuration-"))
   (state (common-lisp:error ":state is required") :type
    (common-lisp:or artifacts-concatenation-state common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'meeting-events-concatenation-configuration
                    'make-meeting-events-concatenation-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          meeting-events-concatenation-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          meeting-events-concatenation-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "State"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          meeting-events-concatenation-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition not-found-exception
     (chime-sdk-media-pipelines-error)
     ((code :initarg :code :initform common-lisp:nil :reader
       not-found-exception-code)
      (message :initarg :message :initform common-lisp:nil :reader
       not-found-exception-message)
      (request-id :initarg :request-id :initform common-lisp:nil :reader
       not-found-exception-request-id)))
 (common-lisp:export
  (common-lisp:list 'not-found-exception 'not-found-exception-code
                    'not-found-exception-message
                    'not-found-exception-request-id)))
(common-lisp:progn
 (common-lisp:defstruct
     (presenter-only-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-presenter-only-configuration-"))
   (presenter-position common-lisp:nil :type
    (common-lisp:or presenter-position common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'presenter-only-configuration
                    'make-presenter-only-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          presenter-only-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          presenter-only-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'presenter-position))
      (common-lisp:list
       (common-lisp:cons "PresenterPosition"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          presenter-only-configuration))
   common-lisp:nil))
(common-lisp:deftype presenter-position () 'common-lisp:string)
(common-lisp:deftype resolution-option () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition resource-limit-exceeded-exception
     (chime-sdk-media-pipelines-error)
     ((code :initarg :code :initform common-lisp:nil :reader
       resource-limit-exceeded-exception-code)
      (message :initarg :message :initform common-lisp:nil :reader
       resource-limit-exceeded-exception-message)
      (request-id :initarg :request-id :initform common-lisp:nil :reader
       resource-limit-exceeded-exception-request-id)))
 (common-lisp:export
  (common-lisp:list 'resource-limit-exceeded-exception
                    'resource-limit-exceeded-exception-code
                    'resource-limit-exceeded-exception-message
                    'resource-limit-exceeded-exception-request-id)))
(common-lisp:deftype result-max () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defstruct
     (s3bucket-sink-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-s3bucket-sink-configuration-"))
   (destination (common-lisp:error ":destination is required") :type
    (common-lisp:or arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 's3bucket-sink-configuration
                    'make-s3bucket-sink-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          s3bucket-sink-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          s3bucket-sink-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'destination))
      (common-lisp:list
       (common-lisp:cons "Destination"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          s3bucket-sink-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (selected-video-streams (:copier common-lisp:nil)
      (:conc-name "struct-shape-selected-video-streams-"))
   (attendee-ids common-lisp:nil :type
    (common-lisp:or attendee-id-list common-lisp:null))
   (external-user-ids common-lisp:nil :type
    (common-lisp:or external-user-id-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'selected-video-streams 'make-selected-video-streams))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          selected-video-streams))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          selected-video-streams))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'attendee-ids))
      (common-lisp:list
       (common-lisp:cons "AttendeeIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'external-user-ids))
      (common-lisp:list
       (common-lisp:cons "ExternalUserIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          selected-video-streams))
   common-lisp:nil))
(common-lisp:deftype sensitive-string () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition service-failure-exception
     (chime-sdk-media-pipelines-error)
     ((code :initarg :code :initform common-lisp:nil :reader
       service-failure-exception-code)
      (message :initarg :message :initform common-lisp:nil :reader
       service-failure-exception-message)
      (request-id :initarg :request-id :initform common-lisp:nil :reader
       service-failure-exception-request-id)))
 (common-lisp:export
  (common-lisp:list 'service-failure-exception 'service-failure-exception-code
                    'service-failure-exception-message
                    'service-failure-exception-request-id)))
(common-lisp:progn
 (common-lisp:define-condition service-unavailable-exception
     (chime-sdk-media-pipelines-error)
     ((code :initarg :code :initform common-lisp:nil :reader
       service-unavailable-exception-code)
      (message :initarg :message :initform common-lisp:nil :reader
       service-unavailable-exception-message)
      (request-id :initarg :request-id :initform common-lisp:nil :reader
       service-unavailable-exception-request-id)))
 (common-lisp:export
  (common-lisp:list 'service-unavailable-exception
                    'service-unavailable-exception-code
                    'service-unavailable-exception-message
                    'service-unavailable-exception-request-id)))
(common-lisp:progn
 (common-lisp:defstruct
     (source-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-source-configuration-"))
   (selected-video-streams common-lisp:nil :type
    (common-lisp:or selected-video-streams common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'source-configuration 'make-source-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input source-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input source-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'selected-video-streams))
      (common-lisp:list
       (common-lisp:cons "SelectedVideoStreams"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input source-configuration))
   common-lisp:nil))
(common-lisp:deftype string () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (tag (:copier common-lisp:nil) (:conc-name "struct-shape-tag-"))
   (key (common-lisp:error ":key is required") :type
    (common-lisp:or tag-key common-lisp:null))
   (value (common-lisp:error ":value is required") :type
    (common-lisp:or tag-value common-lisp:null)))
 (common-lisp:export (common-lisp:list 'tag 'make-tag))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input tag))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input tag))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key))
      (common-lisp:list
       (common-lisp:cons "Key"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "Value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input tag))
   common-lisp:nil))
(common-lisp:deftype tag-key () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype tag-key-list () '(trivial-types:proper-list tag-key))
 (common-lisp:defun |make-tag-key-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list tag-key))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype tag-list () '(trivial-types:proper-list tag))
 (common-lisp:defun |make-tag-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list tag))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (tag-resource-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-tag-resource-request-"))
   (resource-arn (common-lisp:error ":resource-arn is required") :type
    (common-lisp:or amazon-resource-name common-lisp:null))
   (tags (common-lisp:error ":tags is required") :type
    (common-lisp:or tag-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'tag-resource-request 'make-tag-resource-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input tag-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input tag-resource-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-arn))
      (common-lisp:list
       (common-lisp:cons "ResourceARN"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input tag-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (tag-resource-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-tag-resource-response-")))
 (common-lisp:export
  (common-lisp:list 'tag-resource-response 'make-tag-resource-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          tag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          tag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          tag-resource-response))
   common-lisp:nil))
(common-lisp:deftype tag-value () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition throttled-client-exception
     (chime-sdk-media-pipelines-error)
     ((code :initarg :code :initform common-lisp:nil :reader
       throttled-client-exception-code)
      (message :initarg :message :initform common-lisp:nil :reader
       throttled-client-exception-message)
      (request-id :initarg :request-id :initform common-lisp:nil :reader
       throttled-client-exception-request-id)))
 (common-lisp:export
  (common-lisp:list 'throttled-client-exception
                    'throttled-client-exception-code
                    'throttled-client-exception-message
                    'throttled-client-exception-request-id)))
(common-lisp:progn
 (common-lisp:defstruct
     (transcription-messages-concatenation-configuration
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-transcription-messages-concatenation-configuration-"))
   (state (common-lisp:error ":state is required") :type
    (common-lisp:or artifacts-concatenation-state common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'transcription-messages-concatenation-configuration
                    'make-transcription-messages-concatenation-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          transcription-messages-concatenation-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          transcription-messages-concatenation-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "State"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          transcription-messages-concatenation-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition unauthorized-client-exception
     (chime-sdk-media-pipelines-error)
     ((code :initarg :code :initform common-lisp:nil :reader
       unauthorized-client-exception-code)
      (message :initarg :message :initform common-lisp:nil :reader
       unauthorized-client-exception-message)
      (request-id :initarg :request-id :initform common-lisp:nil :reader
       unauthorized-client-exception-request-id)))
 (common-lisp:export
  (common-lisp:list 'unauthorized-client-exception
                    'unauthorized-client-exception-code
                    'unauthorized-client-exception-message
                    'unauthorized-client-exception-request-id)))
(common-lisp:progn
 (common-lisp:defstruct
     (untag-resource-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-untag-resource-request-"))
   (resource-arn (common-lisp:error ":resource-arn is required") :type
    (common-lisp:or amazon-resource-name common-lisp:null))
   (tag-keys (common-lisp:error ":tag-keys is required") :type
    (common-lisp:or tag-key-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'untag-resource-request 'make-untag-resource-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-arn))
      (common-lisp:list
       (common-lisp:cons "ResourceARN"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tag-keys))
      (common-lisp:list
       (common-lisp:cons "TagKeys"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (untag-resource-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-untag-resource-response-")))
 (common-lisp:export
  (common-lisp:list 'untag-resource-response 'make-untag-resource-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (video-artifacts-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-video-artifacts-configuration-"))
   (state (common-lisp:error ":state is required") :type
    (common-lisp:or artifacts-state common-lisp:null))
   (mux-type common-lisp:nil :type
    (common-lisp:or video-mux-type common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'video-artifacts-configuration
                    'make-video-artifacts-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          video-artifacts-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          video-artifacts-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "State"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'mux-type))
      (common-lisp:list
       (common-lisp:cons "MuxType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          video-artifacts-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (video-concatenation-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-video-concatenation-configuration-"))
   (state (common-lisp:error ":state is required") :type
    (common-lisp:or artifacts-concatenation-state common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'video-concatenation-configuration
                    'make-video-concatenation-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          video-concatenation-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          video-concatenation-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "State"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          video-concatenation-configuration))
   common-lisp:nil))
(common-lisp:deftype video-mux-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defun create-media-capture-pipeline
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key source-type source-arn sink-type sink-arn
                     client-request-token chime-sdk-meeting-configuration tags)
   (common-lisp:declare
    (common-lisp:ignorable source-type source-arn sink-type sink-arn
     client-request-token chime-sdk-meeting-configuration tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-create-media-capture-pipeline-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'chime-sdk-media-pipelines-request aws-sdk/generator/operation::input
        "POST" "/sdk-media-capture-pipelines" "CreateMediaCapturePipeline"
        "2021-07-15"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-media-capture-pipeline))
(common-lisp:progn
 (common-lisp:defun create-media-concatenation-pipeline
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key sources sinks client-request-token tags)
   (common-lisp:declare
    (common-lisp:ignorable sources sinks client-request-token tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-create-media-concatenation-pipeline-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'chime-sdk-media-pipelines-request aws-sdk/generator/operation::input
        "POST" "/sdk-media-concatenation-pipelines"
        "CreateMediaConcatenationPipeline" "2021-07-15"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-media-concatenation-pipeline))
(common-lisp:progn
 (common-lisp:defun create-media-live-connector-pipeline
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key sources sinks client-request-token tags)
   (common-lisp:declare
    (common-lisp:ignorable sources sinks client-request-token tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-create-media-live-connector-pipeline-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'chime-sdk-media-pipelines-request aws-sdk/generator/operation::input
        "POST" "/sdk-media-live-connector-pipelines"
        "CreateMediaLiveConnectorPipeline" "2021-07-15"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-media-live-connector-pipeline))
(common-lisp:progn
 (common-lisp:defun delete-media-capture-pipeline
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key media-pipeline-id)
   (common-lisp:declare (common-lisp:ignorable media-pipeline-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-delete-media-capture-pipeline-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'chime-sdk-media-pipelines-request aws-sdk/generator/operation::input
        "DELETE"
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil "/sdk-media-capture-pipelines/~A"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'media-pipeline-id))))
        "DeleteMediaCapturePipeline" "2021-07-15"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-media-capture-pipeline))
(common-lisp:progn
 (common-lisp:defun delete-media-pipeline
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key media-pipeline-id)
   (common-lisp:declare (common-lisp:ignorable media-pipeline-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-media-pipeline-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'chime-sdk-media-pipelines-request aws-sdk/generator/operation::input
        "DELETE"
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil "/sdk-media-pipelines/~A"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'media-pipeline-id))))
        "DeleteMediaPipeline" "2021-07-15"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-media-pipeline))
(common-lisp:progn
 (common-lisp:defun get-media-capture-pipeline
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key media-pipeline-id)
   (common-lisp:declare (common-lisp:ignorable media-pipeline-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-get-media-capture-pipeline-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'chime-sdk-media-pipelines-request aws-sdk/generator/operation::input
        "GET"
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil "/sdk-media-capture-pipelines/~A"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'media-pipeline-id))))
        "GetMediaCapturePipeline" "2021-07-15"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-media-capture-pipeline))
(common-lisp:progn
 (common-lisp:defun get-media-pipeline
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key media-pipeline-id)
   (common-lisp:declare (common-lisp:ignorable media-pipeline-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-media-pipeline-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'chime-sdk-media-pipelines-request aws-sdk/generator/operation::input
        "GET"
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil "/sdk-media-pipelines/~A"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'media-pipeline-id))))
        "GetMediaPipeline" "2021-07-15"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-media-pipeline))
(common-lisp:progn
 (common-lisp:defun list-media-capture-pipelines
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key next-token max-results)
   (common-lisp:declare (common-lisp:ignorable next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-media-capture-pipelines-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'chime-sdk-media-pipelines-request aws-sdk/generator/operation::input
        "GET" "/sdk-media-capture-pipelines" "ListMediaCapturePipelines"
        "2021-07-15"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-media-capture-pipelines))
(common-lisp:progn
 (common-lisp:defun list-media-pipelines
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key next-token max-results)
   (common-lisp:declare (common-lisp:ignorable next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-media-pipelines-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'chime-sdk-media-pipelines-request aws-sdk/generator/operation::input
        "GET" "/sdk-media-pipelines" "ListMediaPipelines" "2021-07-15"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-media-pipelines))
(common-lisp:progn
 (common-lisp:defun list-tags-for-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn)
   (common-lisp:declare (common-lisp:ignorable resource-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-tags-for-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'chime-sdk-media-pipelines-request aws-sdk/generator/operation::input
        "GET" "/tags" "ListTagsForResource" "2021-07-15"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-tags-for-resource))
(common-lisp:progn
 (common-lisp:defun tag-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn tags)
   (common-lisp:declare (common-lisp:ignorable resource-arn tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-tag-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'chime-sdk-media-pipelines-request aws-sdk/generator/operation::input
        "POST" "/tags?operation=tag-resource" "TagResource" "2021-07-15"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'tag-resource))
(common-lisp:progn
 (common-lisp:defun untag-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn tag-keys)
   (common-lisp:declare (common-lisp:ignorable resource-arn tag-keys))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-untag-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'chime-sdk-media-pipelines-request aws-sdk/generator/operation::input
        "POST" "/tags?operation=untag-resource" "UntagResource" "2021-07-15"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'untag-resource))
