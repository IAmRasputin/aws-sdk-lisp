;; DO NOT EDIT: File is generated by AWS-SDK/GENERATOR.

(common-lisp:defpackage #:aws-sdk/services/chime-sdk-media-pipelines/api
  (:use)
  (:nicknames #:aws/chime-sdk-media-pipelines)
  (:import-from #:aws-sdk/generator/shape)
  (:import-from #:aws-sdk/generator/operation)
  (:import-from #:aws-sdk/api)
  (:import-from #:aws-sdk/request)
  (:import-from #:aws-sdk/json-request)
  (:import-from #:aws-sdk/rest-json-request)
  (:import-from #:aws-sdk/rest-xml-request)
  (:import-from #:aws-sdk/query-request)
  (:import-from #:aws-sdk/error))
(common-lisp:in-package #:aws-sdk/services/chime-sdk-media-pipelines/api)
(common-lisp:progn
 (common-lisp:define-condition chime-sdk-media-pipelines-error
     (aws-sdk/error:aws-error)
     common-lisp:nil)
 (common-lisp:export 'chime-sdk-media-pipelines-error))
(common-lisp:progn
 (common-lisp:defclass chime-sdk-media-pipelines-request
                       (aws-sdk/generator/service::rest-json-request)
                       common-lisp:nil
                       (:default-initargs :service "chime-sdk-media-pipelines"
                        :api-version "2021-07-15" :host-prefix
                        "media-pipelines-chime" :signing-name "chime"
                        :global-host common-lisp:nil))
 (common-lisp:export 'chime-sdk-media-pipelines-request))
(common-lisp:defvar *error-map*
  '(("BadRequestException" . bad-request-exception)
    ("ConflictException" . conflict-exception)
    ("ForbiddenException" . forbidden-exception)
    ("NotFoundException" . not-found-exception)
    ("ResourceLimitExceededException" . resource-limit-exceeded-exception)
    ("ServiceFailureException" . service-failure-exception)
    ("ServiceUnavailableException" . service-unavailable-exception)
    ("ThrottledClientException" . throttled-client-exception)
    ("UnauthorizedClientException" . unauthorized-client-exception)))
(common-lisp:progn
 (common-lisp:defstruct
     (active-speaker-only-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-active-speaker-only-configuration-"))
   (active-speaker-position common-lisp:nil :type
    (common-lisp:or active-speaker-position common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'active-speaker-only-configuration
                    'make-active-speaker-only-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          active-speaker-only-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          active-speaker-only-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'active-speaker-position))
      (common-lisp:list
       (common-lisp:cons "ActiveSpeakerPosition"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          active-speaker-only-configuration))
   common-lisp:nil))
(common-lisp:deftype active-speaker-position () 'common-lisp:string)
(common-lisp:deftype amazon-resource-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (amazon-transcribe-call-analytics-processor-configuration
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-amazon-transcribe-call-analytics-processor-configuration-"))
   (language-code (common-lisp:error ":language-code is required") :type
    (common-lisp:or call-analytics-language-code common-lisp:null))
   (vocabulary-name common-lisp:nil :type
    (common-lisp:or vocabulary-name common-lisp:null))
   (vocabulary-filter-name common-lisp:nil :type
    (common-lisp:or vocabulary-filter-name common-lisp:null))
   (vocabulary-filter-method common-lisp:nil :type
    (common-lisp:or vocabulary-filter-method common-lisp:null))
   (language-model-name common-lisp:nil :type
    (common-lisp:or model-name common-lisp:null))
   (enable-partial-results-stabilization common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (partial-results-stability common-lisp:nil :type
    (common-lisp:or partial-results-stability common-lisp:null))
   (content-identification-type common-lisp:nil :type
    (common-lisp:or content-type common-lisp:null))
   (content-redaction-type common-lisp:nil :type
    (common-lisp:or content-type common-lisp:null))
   (pii-entity-types common-lisp:nil :type
    (common-lisp:or pii-entity-types common-lisp:null))
   (filter-partial-results common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (post-call-analytics-settings common-lisp:nil :type
    (common-lisp:or post-call-analytics-settings common-lisp:null))
   (call-analytics-stream-categories common-lisp:nil :type
    (common-lisp:or category-name-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'amazon-transcribe-call-analytics-processor-configuration
                    'make-amazon-transcribe-call-analytics-processor-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          amazon-transcribe-call-analytics-processor-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          amazon-transcribe-call-analytics-processor-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'language-code))
      (common-lisp:list
       (common-lisp:cons "LanguageCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vocabulary-name))
      (common-lisp:list
       (common-lisp:cons "VocabularyName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'vocabulary-filter-name))
      (common-lisp:list
       (common-lisp:cons "VocabularyFilterName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'vocabulary-filter-method))
      (common-lisp:list
       (common-lisp:cons "VocabularyFilterMethod"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'language-model-name))
      (common-lisp:list
       (common-lisp:cons "LanguageModelName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'enable-partial-results-stabilization))
      (common-lisp:list
       (common-lisp:cons "EnablePartialResultsStabilization"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'partial-results-stability))
      (common-lisp:list
       (common-lisp:cons "PartialResultsStability"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'content-identification-type))
      (common-lisp:list
       (common-lisp:cons "ContentIdentificationType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'content-redaction-type))
      (common-lisp:list
       (common-lisp:cons "ContentRedactionType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pii-entity-types))
      (common-lisp:list
       (common-lisp:cons "PiiEntityTypes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'filter-partial-results))
      (common-lisp:list
       (common-lisp:cons "FilterPartialResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'post-call-analytics-settings))
      (common-lisp:list
       (common-lisp:cons "PostCallAnalyticsSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'call-analytics-stream-categories))
      (common-lisp:list
       (common-lisp:cons "CallAnalyticsStreamCategories"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          amazon-transcribe-call-analytics-processor-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (amazon-transcribe-processor-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-amazon-transcribe-processor-configuration-"))
   (language-code common-lisp:nil :type
    (common-lisp:or call-analytics-language-code common-lisp:null))
   (vocabulary-name common-lisp:nil :type
    (common-lisp:or vocabulary-name common-lisp:null))
   (vocabulary-filter-name common-lisp:nil :type
    (common-lisp:or vocabulary-filter-name common-lisp:null))
   (vocabulary-filter-method common-lisp:nil :type
    (common-lisp:or vocabulary-filter-method common-lisp:null))
   (show-speaker-label common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (enable-partial-results-stabilization common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (partial-results-stability common-lisp:nil :type
    (common-lisp:or partial-results-stability common-lisp:null))
   (content-identification-type common-lisp:nil :type
    (common-lisp:or content-type common-lisp:null))
   (content-redaction-type common-lisp:nil :type
    (common-lisp:or content-type common-lisp:null))
   (pii-entity-types common-lisp:nil :type
    (common-lisp:or pii-entity-types common-lisp:null))
   (language-model-name common-lisp:nil :type
    (common-lisp:or model-name common-lisp:null))
   (filter-partial-results common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (identify-language common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (language-options common-lisp:nil :type
    (common-lisp:or language-options common-lisp:null))
   (preferred-language common-lisp:nil :type
    (common-lisp:or call-analytics-language-code common-lisp:null))
   (vocabulary-names common-lisp:nil :type
    (common-lisp:or vocabulary-names common-lisp:null))
   (vocabulary-filter-names common-lisp:nil :type
    (common-lisp:or vocabulary-filter-names common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'amazon-transcribe-processor-configuration
                    'make-amazon-transcribe-processor-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          amazon-transcribe-processor-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          amazon-transcribe-processor-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'language-code))
      (common-lisp:list
       (common-lisp:cons "LanguageCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vocabulary-name))
      (common-lisp:list
       (common-lisp:cons "VocabularyName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'vocabulary-filter-name))
      (common-lisp:list
       (common-lisp:cons "VocabularyFilterName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'vocabulary-filter-method))
      (common-lisp:list
       (common-lisp:cons "VocabularyFilterMethod"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'show-speaker-label))
      (common-lisp:list
       (common-lisp:cons "ShowSpeakerLabel"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'enable-partial-results-stabilization))
      (common-lisp:list
       (common-lisp:cons "EnablePartialResultsStabilization"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'partial-results-stability))
      (common-lisp:list
       (common-lisp:cons "PartialResultsStability"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'content-identification-type))
      (common-lisp:list
       (common-lisp:cons "ContentIdentificationType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'content-redaction-type))
      (common-lisp:list
       (common-lisp:cons "ContentRedactionType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pii-entity-types))
      (common-lisp:list
       (common-lisp:cons "PiiEntityTypes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'language-model-name))
      (common-lisp:list
       (common-lisp:cons "LanguageModelName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'filter-partial-results))
      (common-lisp:list
       (common-lisp:cons "FilterPartialResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'identify-language))
      (common-lisp:list
       (common-lisp:cons "IdentifyLanguage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'language-options))
      (common-lisp:list
       (common-lisp:cons "LanguageOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'preferred-language))
      (common-lisp:list
       (common-lisp:cons "PreferredLanguage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vocabulary-names))
      (common-lisp:list
       (common-lisp:cons "VocabularyNames"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'vocabulary-filter-names))
      (common-lisp:list
       (common-lisp:cons "VocabularyFilterNames"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          amazon-transcribe-processor-configuration))
   common-lisp:nil))
(common-lisp:deftype arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (artifacts-concatenation-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-artifacts-concatenation-configuration-"))
   (audio (common-lisp:error ":audio is required") :type
    (common-lisp:or audio-concatenation-configuration common-lisp:null))
   (video (common-lisp:error ":video is required") :type
    (common-lisp:or video-concatenation-configuration common-lisp:null))
   (content (common-lisp:error ":content is required") :type
    (common-lisp:or content-concatenation-configuration common-lisp:null))
   (data-channel (common-lisp:error ":data-channel is required") :type
    (common-lisp:or data-channel-concatenation-configuration common-lisp:null))
   (transcription-messages
    (common-lisp:error ":transcription-messages is required") :type
    (common-lisp:or transcription-messages-concatenation-configuration
                    common-lisp:null))
   (meeting-events (common-lisp:error ":meeting-events is required") :type
    (common-lisp:or meeting-events-concatenation-configuration
                    common-lisp:null))
   (composited-video (common-lisp:error ":composited-video is required") :type
    (common-lisp:or composited-video-concatenation-configuration
                    common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'artifacts-concatenation-configuration
                    'make-artifacts-concatenation-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          artifacts-concatenation-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          artifacts-concatenation-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'audio))
      (common-lisp:list
       (common-lisp:cons "Audio"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'video))
      (common-lisp:list
       (common-lisp:cons "Video"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'content))
      (common-lisp:list
       (common-lisp:cons "Content"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-channel))
      (common-lisp:list
       (common-lisp:cons "DataChannel"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'transcription-messages))
      (common-lisp:list
       (common-lisp:cons "TranscriptionMessages"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'meeting-events))
      (common-lisp:list
       (common-lisp:cons "MeetingEvents"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'composited-video))
      (common-lisp:list
       (common-lisp:cons "CompositedVideo"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          artifacts-concatenation-configuration))
   common-lisp:nil))
(common-lisp:deftype artifacts-concatenation-state () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (artifacts-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-artifacts-configuration-"))
   (audio (common-lisp:error ":audio is required") :type
    (common-lisp:or audio-artifacts-configuration common-lisp:null))
   (video (common-lisp:error ":video is required") :type
    (common-lisp:or video-artifacts-configuration common-lisp:null))
   (content (common-lisp:error ":content is required") :type
    (common-lisp:or content-artifacts-configuration common-lisp:null))
   (composited-video common-lisp:nil :type
    (common-lisp:or composited-video-artifacts-configuration
                    common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'artifacts-configuration 'make-artifacts-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          artifacts-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          artifacts-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'audio))
      (common-lisp:list
       (common-lisp:cons "Audio"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'video))
      (common-lisp:list
       (common-lisp:cons "Video"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'content))
      (common-lisp:list
       (common-lisp:cons "Content"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'composited-video))
      (common-lisp:list
       (common-lisp:cons "CompositedVideo"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          artifacts-configuration))
   common-lisp:nil))
(common-lisp:deftype artifacts-state () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype attendee-id-list ()
   '(trivial-types:proper-list guid-string))
 (common-lisp:defun make-attendee-id-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list guid-string))
   aws-sdk/generator/shape::members))
(common-lisp:deftype audio-artifacts-concatenation-state () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (audio-artifacts-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-audio-artifacts-configuration-"))
   (mux-type (common-lisp:error ":mux-type is required") :type
    (common-lisp:or audio-mux-type common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'audio-artifacts-configuration
                    'make-audio-artifacts-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          audio-artifacts-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          audio-artifacts-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'mux-type))
      (common-lisp:list
       (common-lisp:cons "MuxType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          audio-artifacts-configuration))
   common-lisp:nil))
(common-lisp:deftype audio-channels-option () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (audio-concatenation-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-audio-concatenation-configuration-"))
   (state (common-lisp:error ":state is required") :type
    (common-lisp:or audio-artifacts-concatenation-state common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'audio-concatenation-configuration
                    'make-audio-concatenation-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          audio-concatenation-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          audio-concatenation-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "State"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          audio-concatenation-configuration))
   common-lisp:nil))
(common-lisp:deftype audio-mux-type () 'common-lisp:string)
(common-lisp:deftype audio-sample-rate-option () 'common-lisp:string)
(common-lisp:deftype aws-region () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition bad-request-exception
     (chime-sdk-media-pipelines-error)
     ((code :initarg :code :initform common-lisp:nil :reader
       bad-request-exception-code)
      (message :initarg :message :initform common-lisp:nil :reader
       bad-request-exception-message)
      (request-id :initarg :request-id :initform common-lisp:nil :reader
       bad-request-exception-request-id)))
 (common-lisp:export
  (common-lisp:list 'bad-request-exception 'bad-request-exception-code
                    'bad-request-exception-message
                    'bad-request-exception-request-id)))
(common-lisp:deftype boolean () 'common-lisp:boolean)
(common-lisp:deftype border-color () 'common-lisp:string)
(common-lisp:deftype border-thickness () 'common-lisp:integer)
(common-lisp:deftype call-analytics-language-code () 'common-lisp:string)
(common-lisp:deftype canvas-orientation () 'common-lisp:string)
(common-lisp:deftype category-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype category-name-list ()
   '(trivial-types:proper-list category-name))
 (common-lisp:defun make-category-name-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list category-name))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (channel-definition (:copier common-lisp:nil)
      (:conc-name "struct-shape-channel-definition-"))
   (channel-id (common-lisp:error ":channel-id is required") :type
    (common-lisp:or channel-id common-lisp:null))
   (participant-role common-lisp:nil :type
    (common-lisp:or participant-role common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'channel-definition 'make-channel-definition))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input channel-definition))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input channel-definition))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'channel-id))
      (common-lisp:list
       (common-lisp:cons "ChannelId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'participant-role))
      (common-lisp:list
       (common-lisp:cons "ParticipantRole"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input channel-definition))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype channel-definitions ()
   '(trivial-types:proper-list channel-definition))
 (common-lisp:defun make-channel-definitions
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list channel-definition))
   aws-sdk/generator/shape::members))
(common-lisp:deftype channel-id () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defstruct
     (chime-sdk-meeting-concatenation-configuration (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-chime-sdk-meeting-concatenation-configuration-"))
   (artifacts-configuration
    (common-lisp:error ":artifacts-configuration is required") :type
    (common-lisp:or artifacts-concatenation-configuration common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'chime-sdk-meeting-concatenation-configuration
                    'make-chime-sdk-meeting-concatenation-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          chime-sdk-meeting-concatenation-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          chime-sdk-meeting-concatenation-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'artifacts-configuration))
      (common-lisp:list
       (common-lisp:cons "ArtifactsConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          chime-sdk-meeting-concatenation-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (chime-sdk-meeting-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-chime-sdk-meeting-configuration-"))
   (source-configuration common-lisp:nil :type
    (common-lisp:or source-configuration common-lisp:null))
   (artifacts-configuration common-lisp:nil :type
    (common-lisp:or artifacts-configuration common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'chime-sdk-meeting-configuration
                    'make-chime-sdk-meeting-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          chime-sdk-meeting-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          chime-sdk-meeting-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'source-configuration))
      (common-lisp:list
       (common-lisp:cons "SourceConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'artifacts-configuration))
      (common-lisp:list
       (common-lisp:cons "ArtifactsConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          chime-sdk-meeting-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (chime-sdk-meeting-live-connector-configuration (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-chime-sdk-meeting-live-connector-configuration-"))
   (arn (common-lisp:error ":arn is required") :type
    (common-lisp:or arn common-lisp:null))
   (mux-type (common-lisp:error ":mux-type is required") :type
    (common-lisp:or live-connector-mux-type common-lisp:null))
   (composited-video common-lisp:nil :type
    (common-lisp:or composited-video-artifacts-configuration common-lisp:null))
   (source-configuration common-lisp:nil :type
    (common-lisp:or source-configuration common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'chime-sdk-meeting-live-connector-configuration
                    'make-chime-sdk-meeting-live-connector-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          chime-sdk-meeting-live-connector-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          chime-sdk-meeting-live-connector-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'mux-type))
      (common-lisp:list
       (common-lisp:cons "MuxType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'composited-video))
      (common-lisp:list
       (common-lisp:cons "CompositedVideo"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'source-configuration))
      (common-lisp:list
       (common-lisp:cons "SourceConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          chime-sdk-meeting-live-connector-configuration))
   common-lisp:nil))
(common-lisp:deftype client-request-token () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (composited-video-artifacts-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-composited-video-artifacts-configuration-"))
   (layout common-lisp:nil :type
    (common-lisp:or layout-option common-lisp:null))
   (resolution common-lisp:nil :type
    (common-lisp:or resolution-option common-lisp:null))
   (grid-view-configuration
    (common-lisp:error ":grid-view-configuration is required") :type
    (common-lisp:or grid-view-configuration common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'composited-video-artifacts-configuration
                    'make-composited-video-artifacts-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          composited-video-artifacts-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          composited-video-artifacts-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'layout))
      (common-lisp:list
       (common-lisp:cons "Layout"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resolution))
      (common-lisp:list
       (common-lisp:cons "Resolution"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'grid-view-configuration))
      (common-lisp:list
       (common-lisp:cons "GridViewConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          composited-video-artifacts-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (composited-video-concatenation-configuration (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-composited-video-concatenation-configuration-"))
   (state (common-lisp:error ":state is required") :type
    (common-lisp:or artifacts-concatenation-state common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'composited-video-concatenation-configuration
                    'make-composited-video-concatenation-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          composited-video-concatenation-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          composited-video-concatenation-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "State"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          composited-video-concatenation-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (concatenation-sink (:copier common-lisp:nil)
      (:conc-name "struct-shape-concatenation-sink-"))
   (type (common-lisp:error ":type is required") :type
    (common-lisp:or concatenation-sink-type common-lisp:null))
   (s3bucket-sink-configuration
    (common-lisp:error ":s3bucket-sink-configuration is required") :type
    (common-lisp:or s3bucket-sink-configuration common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'concatenation-sink 'make-concatenation-sink))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input concatenation-sink))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input concatenation-sink))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           's3bucket-sink-configuration))
      (common-lisp:list
       (common-lisp:cons "S3BucketSinkConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input concatenation-sink))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype concatenation-sink-list ()
   '(trivial-types:proper-list concatenation-sink))
 (common-lisp:defun make-concatenation-sink-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list concatenation-sink))
   aws-sdk/generator/shape::members))
(common-lisp:deftype concatenation-sink-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (concatenation-source (:copier common-lisp:nil)
      (:conc-name "struct-shape-concatenation-source-"))
   (type (common-lisp:error ":type is required") :type
    (common-lisp:or concatenation-source-type common-lisp:null))
   (media-capture-pipeline-source-configuration
    (common-lisp:error
     ":media-capture-pipeline-source-configuration is required")
    :type
    (common-lisp:or media-capture-pipeline-source-configuration
                    common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'concatenation-source 'make-concatenation-source))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input concatenation-source))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input concatenation-source))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'media-capture-pipeline-source-configuration))
      (common-lisp:list
       (common-lisp:cons "MediaCapturePipelineSourceConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input concatenation-source))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype concatenation-source-list ()
   '(trivial-types:proper-list concatenation-source))
 (common-lisp:defun make-concatenation-source-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list concatenation-source))
   aws-sdk/generator/shape::members))
(common-lisp:deftype concatenation-source-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition conflict-exception
     (chime-sdk-media-pipelines-error)
     ((code :initarg :code :initform common-lisp:nil :reader
       conflict-exception-code)
      (message :initarg :message :initform common-lisp:nil :reader
       conflict-exception-message)
      (request-id :initarg :request-id :initform common-lisp:nil :reader
       conflict-exception-request-id)))
 (common-lisp:export
  (common-lisp:list 'conflict-exception 'conflict-exception-code
                    'conflict-exception-message
                    'conflict-exception-request-id)))
(common-lisp:progn
 (common-lisp:defstruct
     (content-artifacts-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-content-artifacts-configuration-"))
   (state (common-lisp:error ":state is required") :type
    (common-lisp:or artifacts-state common-lisp:null))
   (mux-type common-lisp:nil :type
    (common-lisp:or content-mux-type common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'content-artifacts-configuration
                    'make-content-artifacts-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          content-artifacts-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          content-artifacts-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "State"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'mux-type))
      (common-lisp:list
       (common-lisp:cons "MuxType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          content-artifacts-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (content-concatenation-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-content-concatenation-configuration-"))
   (state (common-lisp:error ":state is required") :type
    (common-lisp:or artifacts-concatenation-state common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'content-concatenation-configuration
                    'make-content-concatenation-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          content-concatenation-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          content-concatenation-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "State"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          content-concatenation-configuration))
   common-lisp:nil))
(common-lisp:deftype content-mux-type () 'common-lisp:string)
(common-lisp:deftype content-redaction-output () 'common-lisp:string)
(common-lisp:deftype content-share-layout-option () 'common-lisp:string)
(common-lisp:deftype content-type () 'common-lisp:string)
(common-lisp:deftype corner-radius () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defstruct
     (create-media-capture-pipeline-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-media-capture-pipeline-request-"))
   (source-type (common-lisp:error ":source-type is required") :type
    (common-lisp:or media-pipeline-source-type common-lisp:null))
   (source-arn (common-lisp:error ":source-arn is required") :type
    (common-lisp:or arn common-lisp:null))
   (sink-type (common-lisp:error ":sink-type is required") :type
    (common-lisp:or media-pipeline-sink-type common-lisp:null))
   (sink-arn (common-lisp:error ":sink-arn is required") :type
    (common-lisp:or arn common-lisp:null))
   (client-request-token common-lisp:nil :type
    (common-lisp:or client-request-token common-lisp:null))
   (chime-sdk-meeting-configuration common-lisp:nil :type
    (common-lisp:or chime-sdk-meeting-configuration common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-media-capture-pipeline-request
                    'make-create-media-capture-pipeline-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-media-capture-pipeline-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-media-capture-pipeline-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-type))
      (common-lisp:list
       (common-lisp:cons "SourceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-arn))
      (common-lisp:list
       (common-lisp:cons "SourceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sink-type))
      (common-lisp:list
       (common-lisp:cons "SinkType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sink-arn))
      (common-lisp:list
       (common-lisp:cons "SinkArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'client-request-token))
      (common-lisp:list
       (common-lisp:cons "ClientRequestToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'chime-sdk-meeting-configuration))
      (common-lisp:list
       (common-lisp:cons "ChimeSdkMeetingConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-media-capture-pipeline-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-media-capture-pipeline-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-media-capture-pipeline-response-"))
   (media-capture-pipeline common-lisp:nil :type
    (common-lisp:or media-capture-pipeline common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-media-capture-pipeline-response
                    'make-create-media-capture-pipeline-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-media-capture-pipeline-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-media-capture-pipeline-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'media-capture-pipeline))
      (common-lisp:list
       (common-lisp:cons "MediaCapturePipeline"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-media-capture-pipeline-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-media-concatenation-pipeline-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-media-concatenation-pipeline-request-"))
   (sources (common-lisp:error ":sources is required") :type
    (common-lisp:or concatenation-source-list common-lisp:null))
   (sinks (common-lisp:error ":sinks is required") :type
    (common-lisp:or concatenation-sink-list common-lisp:null))
   (client-request-token common-lisp:nil :type
    (common-lisp:or client-request-token common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-media-concatenation-pipeline-request
                    'make-create-media-concatenation-pipeline-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-media-concatenation-pipeline-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-media-concatenation-pipeline-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sources))
      (common-lisp:list
       (common-lisp:cons "Sources"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sinks))
      (common-lisp:list
       (common-lisp:cons "Sinks"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'client-request-token))
      (common-lisp:list
       (common-lisp:cons "ClientRequestToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-media-concatenation-pipeline-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-media-concatenation-pipeline-response (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-create-media-concatenation-pipeline-response-"))
   (media-concatenation-pipeline common-lisp:nil :type
    (common-lisp:or media-concatenation-pipeline common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-media-concatenation-pipeline-response
                    'make-create-media-concatenation-pipeline-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-media-concatenation-pipeline-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-media-concatenation-pipeline-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'media-concatenation-pipeline))
      (common-lisp:list
       (common-lisp:cons "MediaConcatenationPipeline"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-media-concatenation-pipeline-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-media-insights-pipeline-configuration-request
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-create-media-insights-pipeline-configuration-request-"))
   (media-insights-pipeline-configuration-name
    (common-lisp:error
     ":media-insights-pipeline-configuration-name is required")
    :type
    (common-lisp:or media-insights-pipeline-configuration-name-string
                    common-lisp:null))
   (resource-access-role-arn
    (common-lisp:error ":resource-access-role-arn is required") :type
    (common-lisp:or arn common-lisp:null))
   (real-time-alert-configuration common-lisp:nil :type
    (common-lisp:or real-time-alert-configuration common-lisp:null))
   (elements (common-lisp:error ":elements is required") :type
    (common-lisp:or media-insights-pipeline-configuration-elements
                    common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-list common-lisp:null))
   (client-request-token common-lisp:nil :type
    (common-lisp:or client-request-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-media-insights-pipeline-configuration-request
                    'make-create-media-insights-pipeline-configuration-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-media-insights-pipeline-configuration-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-media-insights-pipeline-configuration-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'media-insights-pipeline-configuration-name))
      (common-lisp:list
       (common-lisp:cons "MediaInsightsPipelineConfigurationName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'resource-access-role-arn))
      (common-lisp:list
       (common-lisp:cons "ResourceAccessRoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'real-time-alert-configuration))
      (common-lisp:list
       (common-lisp:cons "RealTimeAlertConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'elements))
      (common-lisp:list
       (common-lisp:cons "Elements"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'client-request-token))
      (common-lisp:list
       (common-lisp:cons "ClientRequestToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-media-insights-pipeline-configuration-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-media-insights-pipeline-configuration-response
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-create-media-insights-pipeline-configuration-response-"))
   (media-insights-pipeline-configuration common-lisp:nil :type
    (common-lisp:or media-insights-pipeline-configuration common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-media-insights-pipeline-configuration-response
                    'make-create-media-insights-pipeline-configuration-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-media-insights-pipeline-configuration-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-media-insights-pipeline-configuration-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'media-insights-pipeline-configuration))
      (common-lisp:list
       (common-lisp:cons "MediaInsightsPipelineConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-media-insights-pipeline-configuration-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-media-insights-pipeline-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-media-insights-pipeline-request-"))
   (media-insights-pipeline-configuration-arn
    (common-lisp:error
     ":media-insights-pipeline-configuration-arn is required")
    :type (common-lisp:or arn common-lisp:null))
   (kinesis-video-stream-source-runtime-configuration common-lisp:nil :type
    (common-lisp:or kinesis-video-stream-source-runtime-configuration
                    common-lisp:null))
   (media-insights-runtime-metadata common-lisp:nil :type
    (common-lisp:or media-insights-runtime-metadata common-lisp:null))
   (kinesis-video-stream-recording-source-runtime-configuration common-lisp:nil
    :type
    (common-lisp:or kinesis-video-stream-recording-source-runtime-configuration
                    common-lisp:null))
   (s3recording-sink-runtime-configuration common-lisp:nil :type
    (common-lisp:or s3recording-sink-runtime-configuration common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-list common-lisp:null))
   (client-request-token common-lisp:nil :type
    (common-lisp:or client-request-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-media-insights-pipeline-request
                    'make-create-media-insights-pipeline-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-media-insights-pipeline-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-media-insights-pipeline-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'media-insights-pipeline-configuration-arn))
      (common-lisp:list
       (common-lisp:cons "MediaInsightsPipelineConfigurationArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'kinesis-video-stream-source-runtime-configuration))
      (common-lisp:list
       (common-lisp:cons "KinesisVideoStreamSourceRuntimeConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'media-insights-runtime-metadata))
      (common-lisp:list
       (common-lisp:cons "MediaInsightsRuntimeMetadata"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'kinesis-video-stream-recording-source-runtime-configuration))
      (common-lisp:list
       (common-lisp:cons
        "KinesisVideoStreamRecordingSourceRuntimeConfiguration"
        (aws-sdk/generator/shape::input-params
         aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           's3recording-sink-runtime-configuration))
      (common-lisp:list
       (common-lisp:cons "S3RecordingSinkRuntimeConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'client-request-token))
      (common-lisp:list
       (common-lisp:cons "ClientRequestToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-media-insights-pipeline-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-media-insights-pipeline-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-media-insights-pipeline-response-"))
   (media-insights-pipeline
    (common-lisp:error ":media-insights-pipeline is required") :type
    (common-lisp:or media-insights-pipeline common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-media-insights-pipeline-response
                    'make-create-media-insights-pipeline-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-media-insights-pipeline-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-media-insights-pipeline-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'media-insights-pipeline))
      (common-lisp:list
       (common-lisp:cons "MediaInsightsPipeline"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-media-insights-pipeline-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-media-live-connector-pipeline-request (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-create-media-live-connector-pipeline-request-"))
   (sources (common-lisp:error ":sources is required") :type
    (common-lisp:or live-connector-source-list common-lisp:null))
   (sinks (common-lisp:error ":sinks is required") :type
    (common-lisp:or live-connector-sink-list common-lisp:null))
   (client-request-token common-lisp:nil :type
    (common-lisp:or client-request-token common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-media-live-connector-pipeline-request
                    'make-create-media-live-connector-pipeline-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-media-live-connector-pipeline-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-media-live-connector-pipeline-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sources))
      (common-lisp:list
       (common-lisp:cons "Sources"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sinks))
      (common-lisp:list
       (common-lisp:cons "Sinks"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'client-request-token))
      (common-lisp:list
       (common-lisp:cons "ClientRequestToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-media-live-connector-pipeline-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-media-live-connector-pipeline-response (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-create-media-live-connector-pipeline-response-"))
   (media-live-connector-pipeline common-lisp:nil :type
    (common-lisp:or media-live-connector-pipeline common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-media-live-connector-pipeline-response
                    'make-create-media-live-connector-pipeline-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-media-live-connector-pipeline-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-media-live-connector-pipeline-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'media-live-connector-pipeline))
      (common-lisp:list
       (common-lisp:cons "MediaLiveConnectorPipeline"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-media-live-connector-pipeline-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-media-pipeline-kinesis-video-stream-pool-request
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-create-media-pipeline-kinesis-video-stream-pool-request-"))
   (stream-configuration
    (common-lisp:error ":stream-configuration is required") :type
    (common-lisp:or kinesis-video-stream-configuration common-lisp:null))
   (pool-name (common-lisp:error ":pool-name is required") :type
    (common-lisp:or kinesis-video-stream-pool-name common-lisp:null))
   (client-request-token common-lisp:nil :type
    (common-lisp:or client-request-token common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-media-pipeline-kinesis-video-stream-pool-request
                    'make-create-media-pipeline-kinesis-video-stream-pool-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-media-pipeline-kinesis-video-stream-pool-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-media-pipeline-kinesis-video-stream-pool-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'stream-configuration))
      (common-lisp:list
       (common-lisp:cons "StreamConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pool-name))
      (common-lisp:list
       (common-lisp:cons "PoolName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'client-request-token))
      (common-lisp:list
       (common-lisp:cons "ClientRequestToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-media-pipeline-kinesis-video-stream-pool-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-media-pipeline-kinesis-video-stream-pool-response
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-create-media-pipeline-kinesis-video-stream-pool-response-"))
   (kinesis-video-stream-pool-configuration common-lisp:nil :type
    (common-lisp:or kinesis-video-stream-pool-configuration common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-media-pipeline-kinesis-video-stream-pool-response
                    'make-create-media-pipeline-kinesis-video-stream-pool-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-media-pipeline-kinesis-video-stream-pool-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-media-pipeline-kinesis-video-stream-pool-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'kinesis-video-stream-pool-configuration))
      (common-lisp:list
       (common-lisp:cons "KinesisVideoStreamPoolConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-media-pipeline-kinesis-video-stream-pool-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-media-stream-pipeline-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-media-stream-pipeline-request-"))
   (sources (common-lisp:error ":sources is required") :type
    (common-lisp:or media-stream-source-list common-lisp:null))
   (sinks (common-lisp:error ":sinks is required") :type
    (common-lisp:or media-stream-sink-list common-lisp:null))
   (client-request-token common-lisp:nil :type
    (common-lisp:or client-request-token common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-media-stream-pipeline-request
                    'make-create-media-stream-pipeline-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-media-stream-pipeline-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-media-stream-pipeline-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sources))
      (common-lisp:list
       (common-lisp:cons "Sources"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sinks))
      (common-lisp:list
       (common-lisp:cons "Sinks"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'client-request-token))
      (common-lisp:list
       (common-lisp:cons "ClientRequestToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-media-stream-pipeline-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-media-stream-pipeline-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-media-stream-pipeline-response-"))
   (media-stream-pipeline common-lisp:nil :type
    (common-lisp:or media-stream-pipeline common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-media-stream-pipeline-response
                    'make-create-media-stream-pipeline-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-media-stream-pipeline-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-media-stream-pipeline-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'media-stream-pipeline))
      (common-lisp:list
       (common-lisp:cons "MediaStreamPipeline"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-media-stream-pipeline-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (data-channel-concatenation-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-data-channel-concatenation-configuration-"))
   (state (common-lisp:error ":state is required") :type
    (common-lisp:or artifacts-concatenation-state common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'data-channel-concatenation-configuration
                    'make-data-channel-concatenation-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          data-channel-concatenation-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          data-channel-concatenation-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "State"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          data-channel-concatenation-configuration))
   common-lisp:nil))
(common-lisp:deftype data-retention-change-in-hours () 'common-lisp:integer)
(common-lisp:deftype data-retention-in-hours () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defstruct
     (delete-media-capture-pipeline-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-media-capture-pipeline-request-"))
   (media-pipeline-id (common-lisp:error ":media-pipeline-id is required")
    :type (common-lisp:or guid-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-media-capture-pipeline-request
                    'make-delete-media-capture-pipeline-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-media-capture-pipeline-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-media-capture-pipeline-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-media-capture-pipeline-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-media-insights-pipeline-configuration-request
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-delete-media-insights-pipeline-configuration-request-"))
   (identifier (common-lisp:error ":identifier is required") :type
    (common-lisp:or non-empty-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-media-insights-pipeline-configuration-request
                    'make-delete-media-insights-pipeline-configuration-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-media-insights-pipeline-configuration-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-media-insights-pipeline-configuration-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-media-insights-pipeline-configuration-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-media-pipeline-kinesis-video-stream-pool-request
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-delete-media-pipeline-kinesis-video-stream-pool-request-"))
   (identifier (common-lisp:error ":identifier is required") :type
    (common-lisp:or non-empty-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-media-pipeline-kinesis-video-stream-pool-request
                    'make-delete-media-pipeline-kinesis-video-stream-pool-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-media-pipeline-kinesis-video-stream-pool-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-media-pipeline-kinesis-video-stream-pool-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-media-pipeline-kinesis-video-stream-pool-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-media-pipeline-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-media-pipeline-request-"))
   (media-pipeline-id (common-lisp:error ":media-pipeline-id is required")
    :type (common-lisp:or guid-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-media-pipeline-request
                    'make-delete-media-pipeline-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-media-pipeline-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-media-pipeline-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-media-pipeline-request))
   common-lisp:nil))
(common-lisp:deftype error-code () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype external-user-id-list ()
   '(trivial-types:proper-list external-user-id-type))
 (common-lisp:defun make-external-user-id-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list external-user-id-type))
   aws-sdk/generator/shape::members))
(common-lisp:deftype external-user-id-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition forbidden-exception
     (chime-sdk-media-pipelines-error)
     ((code :initarg :code :initform common-lisp:nil :reader
       forbidden-exception-code)
      (message :initarg :message :initform common-lisp:nil :reader
       forbidden-exception-message)
      (request-id :initarg :request-id :initform common-lisp:nil :reader
       forbidden-exception-request-id)))
 (common-lisp:export
  (common-lisp:list 'forbidden-exception 'forbidden-exception-code
                    'forbidden-exception-message
                    'forbidden-exception-request-id)))
(common-lisp:deftype fragment-number-string () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (fragment-selector (:copier common-lisp:nil)
      (:conc-name "struct-shape-fragment-selector-"))
   (fragment-selector-type
    (common-lisp:error ":fragment-selector-type is required") :type
    (common-lisp:or fragment-selector-type common-lisp:null))
   (timestamp-range (common-lisp:error ":timestamp-range is required") :type
    (common-lisp:or timestamp-range common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'fragment-selector 'make-fragment-selector))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input fragment-selector))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input fragment-selector))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'fragment-selector-type))
      (common-lisp:list
       (common-lisp:cons "FragmentSelectorType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'timestamp-range))
      (common-lisp:list
       (common-lisp:cons "TimestampRange"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input fragment-selector))
   common-lisp:nil))
(common-lisp:deftype fragment-selector-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (get-media-capture-pipeline-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-media-capture-pipeline-request-"))
   (media-pipeline-id (common-lisp:error ":media-pipeline-id is required")
    :type (common-lisp:or guid-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-media-capture-pipeline-request
                    'make-get-media-capture-pipeline-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-media-capture-pipeline-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-media-capture-pipeline-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-media-capture-pipeline-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-media-capture-pipeline-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-media-capture-pipeline-response-"))
   (media-capture-pipeline common-lisp:nil :type
    (common-lisp:or media-capture-pipeline common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-media-capture-pipeline-response
                    'make-get-media-capture-pipeline-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-media-capture-pipeline-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-media-capture-pipeline-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'media-capture-pipeline))
      (common-lisp:list
       (common-lisp:cons "MediaCapturePipeline"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-media-capture-pipeline-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-media-insights-pipeline-configuration-request
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-get-media-insights-pipeline-configuration-request-"))
   (identifier (common-lisp:error ":identifier is required") :type
    (common-lisp:or non-empty-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-media-insights-pipeline-configuration-request
                    'make-get-media-insights-pipeline-configuration-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-media-insights-pipeline-configuration-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-media-insights-pipeline-configuration-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-media-insights-pipeline-configuration-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-media-insights-pipeline-configuration-response
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-get-media-insights-pipeline-configuration-response-"))
   (media-insights-pipeline-configuration common-lisp:nil :type
    (common-lisp:or media-insights-pipeline-configuration common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-media-insights-pipeline-configuration-response
                    'make-get-media-insights-pipeline-configuration-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-media-insights-pipeline-configuration-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-media-insights-pipeline-configuration-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'media-insights-pipeline-configuration))
      (common-lisp:list
       (common-lisp:cons "MediaInsightsPipelineConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-media-insights-pipeline-configuration-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-media-pipeline-kinesis-video-stream-pool-request
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-get-media-pipeline-kinesis-video-stream-pool-request-"))
   (identifier (common-lisp:error ":identifier is required") :type
    (common-lisp:or non-empty-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-media-pipeline-kinesis-video-stream-pool-request
                    'make-get-media-pipeline-kinesis-video-stream-pool-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-media-pipeline-kinesis-video-stream-pool-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-media-pipeline-kinesis-video-stream-pool-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-media-pipeline-kinesis-video-stream-pool-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-media-pipeline-kinesis-video-stream-pool-response
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-get-media-pipeline-kinesis-video-stream-pool-response-"))
   (kinesis-video-stream-pool-configuration common-lisp:nil :type
    (common-lisp:or kinesis-video-stream-pool-configuration common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-media-pipeline-kinesis-video-stream-pool-response
                    'make-get-media-pipeline-kinesis-video-stream-pool-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-media-pipeline-kinesis-video-stream-pool-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-media-pipeline-kinesis-video-stream-pool-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'kinesis-video-stream-pool-configuration))
      (common-lisp:list
       (common-lisp:cons "KinesisVideoStreamPoolConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-media-pipeline-kinesis-video-stream-pool-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-media-pipeline-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-media-pipeline-request-"))
   (media-pipeline-id (common-lisp:error ":media-pipeline-id is required")
    :type (common-lisp:or guid-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-media-pipeline-request
                    'make-get-media-pipeline-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-media-pipeline-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-media-pipeline-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-media-pipeline-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-media-pipeline-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-media-pipeline-response-"))
   (media-pipeline common-lisp:nil :type
    (common-lisp:or media-pipeline common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-media-pipeline-response
                    'make-get-media-pipeline-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-media-pipeline-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-media-pipeline-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'media-pipeline))
      (common-lisp:list
       (common-lisp:cons "MediaPipeline"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-media-pipeline-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-speaker-search-task-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-speaker-search-task-request-"))
   (identifier (common-lisp:error ":identifier is required") :type
    (common-lisp:or non-empty-string common-lisp:null))
   (speaker-search-task-id
    (common-lisp:error ":speaker-search-task-id is required") :type
    (common-lisp:or guid-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-speaker-search-task-request
                    'make-get-speaker-search-task-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-speaker-search-task-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-speaker-search-task-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-speaker-search-task-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-speaker-search-task-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-speaker-search-task-response-"))
   (speaker-search-task common-lisp:nil :type
    (common-lisp:or speaker-search-task common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-speaker-search-task-response
                    'make-get-speaker-search-task-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-speaker-search-task-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-speaker-search-task-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'speaker-search-task))
      (common-lisp:list
       (common-lisp:cons "SpeakerSearchTask"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-speaker-search-task-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-voice-tone-analysis-task-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-voice-tone-analysis-task-request-"))
   (identifier (common-lisp:error ":identifier is required") :type
    (common-lisp:or non-empty-string common-lisp:null))
   (voice-tone-analysis-task-id
    (common-lisp:error ":voice-tone-analysis-task-id is required") :type
    (common-lisp:or guid-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-voice-tone-analysis-task-request
                    'make-get-voice-tone-analysis-task-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-voice-tone-analysis-task-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-voice-tone-analysis-task-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-voice-tone-analysis-task-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-voice-tone-analysis-task-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-voice-tone-analysis-task-response-"))
   (voice-tone-analysis-task common-lisp:nil :type
    (common-lisp:or voice-tone-analysis-task common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-voice-tone-analysis-task-response
                    'make-get-voice-tone-analysis-task-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-voice-tone-analysis-task-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-voice-tone-analysis-task-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'voice-tone-analysis-task))
      (common-lisp:list
       (common-lisp:cons "VoiceToneAnalysisTask"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-voice-tone-analysis-task-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (grid-view-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-grid-view-configuration-"))
   (content-share-layout
    (common-lisp:error ":content-share-layout is required") :type
    (common-lisp:or content-share-layout-option common-lisp:null))
   (presenter-only-configuration common-lisp:nil :type
    (common-lisp:or presenter-only-configuration common-lisp:null))
   (active-speaker-only-configuration common-lisp:nil :type
    (common-lisp:or active-speaker-only-configuration common-lisp:null))
   (horizontal-layout-configuration common-lisp:nil :type
    (common-lisp:or horizontal-layout-configuration common-lisp:null))
   (vertical-layout-configuration common-lisp:nil :type
    (common-lisp:or vertical-layout-configuration common-lisp:null))
   (video-attribute common-lisp:nil :type
    (common-lisp:or video-attribute common-lisp:null))
   (canvas-orientation common-lisp:nil :type
    (common-lisp:or canvas-orientation common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'grid-view-configuration 'make-grid-view-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          grid-view-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          grid-view-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'content-share-layout))
      (common-lisp:list
       (common-lisp:cons "ContentShareLayout"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'presenter-only-configuration))
      (common-lisp:list
       (common-lisp:cons "PresenterOnlyConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'active-speaker-only-configuration))
      (common-lisp:list
       (common-lisp:cons "ActiveSpeakerOnlyConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'horizontal-layout-configuration))
      (common-lisp:list
       (common-lisp:cons "HorizontalLayoutConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'vertical-layout-configuration))
      (common-lisp:list
       (common-lisp:cons "VerticalLayoutConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'video-attribute))
      (common-lisp:list
       (common-lisp:cons "VideoAttribute"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'canvas-orientation))
      (common-lisp:list
       (common-lisp:cons "CanvasOrientation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          grid-view-configuration))
   common-lisp:nil))
(common-lisp:deftype guid-string () 'common-lisp:string)
(common-lisp:deftype highlight-color () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (horizontal-layout-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-horizontal-layout-configuration-"))
   (tile-order common-lisp:nil :type
    (common-lisp:or tile-order common-lisp:null))
   (tile-position common-lisp:nil :type
    (common-lisp:or horizontal-tile-position common-lisp:null))
   (tile-count common-lisp:nil :type
    (common-lisp:or tile-count common-lisp:null))
   (tile-aspect-ratio common-lisp:nil :type
    (common-lisp:or tile-aspect-ratio common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'horizontal-layout-configuration
                    'make-horizontal-layout-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          horizontal-layout-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          horizontal-layout-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tile-order))
      (common-lisp:list
       (common-lisp:cons "TileOrder"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tile-position))
      (common-lisp:list
       (common-lisp:cons "TilePosition"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tile-count))
      (common-lisp:list
       (common-lisp:cons "TileCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tile-aspect-ratio))
      (common-lisp:list
       (common-lisp:cons "TileAspectRatio"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          horizontal-layout-configuration))
   common-lisp:nil))
(common-lisp:deftype horizontal-tile-position () 'common-lisp:string)
(common-lisp:deftype iso8601timestamp () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (issue-detection-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-issue-detection-configuration-"))
   (rule-name (common-lisp:error ":rule-name is required") :type
    (common-lisp:or rule-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'issue-detection-configuration
                    'make-issue-detection-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          issue-detection-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          issue-detection-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rule-name))
      (common-lisp:list
       (common-lisp:cons "RuleName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          issue-detection-configuration))
   common-lisp:nil))
(common-lisp:deftype keyword () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (keyword-match-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-keyword-match-configuration-"))
   (rule-name (common-lisp:error ":rule-name is required") :type
    (common-lisp:or rule-name common-lisp:null))
   (keywords (common-lisp:error ":keywords is required") :type
    (common-lisp:or keyword-match-word-list common-lisp:null))
   (negate common-lisp:nil :type (common-lisp:or boolean common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'keyword-match-configuration
                    'make-keyword-match-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          keyword-match-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          keyword-match-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rule-name))
      (common-lisp:list
       (common-lisp:cons "RuleName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'keywords))
      (common-lisp:list
       (common-lisp:cons "Keywords"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'negate))
      (common-lisp:list
       (common-lisp:cons "Negate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          keyword-match-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype keyword-match-word-list ()
   '(trivial-types:proper-list keyword))
 (common-lisp:defun make-keyword-match-word-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list keyword))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (kinesis-data-stream-sink-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-kinesis-data-stream-sink-configuration-"))
   (insights-target common-lisp:nil :type
    (common-lisp:or arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'kinesis-data-stream-sink-configuration
                    'make-kinesis-data-stream-sink-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          kinesis-data-stream-sink-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          kinesis-data-stream-sink-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'insights-target))
      (common-lisp:list
       (common-lisp:cons "InsightsTarget"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          kinesis-data-stream-sink-configuration))
   common-lisp:nil))
(common-lisp:deftype kinesis-video-stream-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (kinesis-video-stream-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-kinesis-video-stream-configuration-"))
   (region (common-lisp:error ":region is required") :type
    (common-lisp:or aws-region common-lisp:null))
   (data-retention-in-hours common-lisp:nil :type
    (common-lisp:or data-retention-in-hours common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'kinesis-video-stream-configuration
                    'make-kinesis-video-stream-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          kinesis-video-stream-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          kinesis-video-stream-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'region))
      (common-lisp:list
       (common-lisp:cons "Region"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'data-retention-in-hours))
      (common-lisp:list
       (common-lisp:cons "DataRetentionInHours"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          kinesis-video-stream-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (kinesis-video-stream-configuration-update (:copier common-lisp:nil)
      (:conc-name "struct-shape-kinesis-video-stream-configuration-update-"))
   (data-retention-in-hours common-lisp:nil :type
    (common-lisp:or data-retention-change-in-hours common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'kinesis-video-stream-configuration-update
                    'make-kinesis-video-stream-configuration-update))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          kinesis-video-stream-configuration-update))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          kinesis-video-stream-configuration-update))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'data-retention-in-hours))
      (common-lisp:list
       (common-lisp:cons "DataRetentionInHours"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          kinesis-video-stream-configuration-update))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (kinesis-video-stream-pool-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-kinesis-video-stream-pool-configuration-"))
   (pool-arn common-lisp:nil :type (common-lisp:or arn common-lisp:null))
   (pool-name common-lisp:nil :type
    (common-lisp:or kinesis-video-stream-pool-name common-lisp:null))
   (pool-id common-lisp:nil :type
    (common-lisp:or kinesis-video-stream-pool-id common-lisp:null))
   (pool-status common-lisp:nil :type
    (common-lisp:or kinesis-video-stream-pool-status common-lisp:null))
   (pool-size common-lisp:nil :type
    (common-lisp:or kinesis-video-stream-pool-size common-lisp:null))
   (stream-configuration common-lisp:nil :type
    (common-lisp:or kinesis-video-stream-configuration common-lisp:null))
   (created-timestamp common-lisp:nil :type
    (common-lisp:or iso8601timestamp common-lisp:null))
   (updated-timestamp common-lisp:nil :type
    (common-lisp:or iso8601timestamp common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'kinesis-video-stream-pool-configuration
                    'make-kinesis-video-stream-pool-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          kinesis-video-stream-pool-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          kinesis-video-stream-pool-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pool-arn))
      (common-lisp:list
       (common-lisp:cons "PoolArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pool-name))
      (common-lisp:list
       (common-lisp:cons "PoolName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pool-id))
      (common-lisp:list
       (common-lisp:cons "PoolId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pool-status))
      (common-lisp:list
       (common-lisp:cons "PoolStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pool-size))
      (common-lisp:list
       (common-lisp:cons "PoolSize"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'stream-configuration))
      (common-lisp:list
       (common-lisp:cons "StreamConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-timestamp))
      (common-lisp:list
       (common-lisp:cons "CreatedTimestamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'updated-timestamp))
      (common-lisp:list
       (common-lisp:cons "UpdatedTimestamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          kinesis-video-stream-pool-configuration))
   common-lisp:nil))
(common-lisp:deftype kinesis-video-stream-pool-id () 'common-lisp:string)
(common-lisp:deftype kinesis-video-stream-pool-name () 'common-lisp:string)
(common-lisp:deftype kinesis-video-stream-pool-size () 'common-lisp:integer)
(common-lisp:deftype kinesis-video-stream-pool-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (kinesis-video-stream-pool-summary (:copier common-lisp:nil)
      (:conc-name "struct-shape-kinesis-video-stream-pool-summary-"))
   (pool-name common-lisp:nil :type
    (common-lisp:or kinesis-video-stream-pool-name common-lisp:null))
   (pool-id common-lisp:nil :type
    (common-lisp:or kinesis-video-stream-pool-id common-lisp:null))
   (pool-arn common-lisp:nil :type (common-lisp:or arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'kinesis-video-stream-pool-summary
                    'make-kinesis-video-stream-pool-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          kinesis-video-stream-pool-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          kinesis-video-stream-pool-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pool-name))
      (common-lisp:list
       (common-lisp:cons "PoolName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pool-id))
      (common-lisp:list
       (common-lisp:cons "PoolId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pool-arn))
      (common-lisp:list
       (common-lisp:cons "PoolArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          kinesis-video-stream-pool-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype kinesis-video-stream-pool-summary-list ()
   '(trivial-types:proper-list kinesis-video-stream-pool-summary))
 (common-lisp:defun make-kinesis-video-stream-pool-summary-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            kinesis-video-stream-pool-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (kinesis-video-stream-recording-source-runtime-configuration
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-kinesis-video-stream-recording-source-runtime-configuration-"))
   (streams (common-lisp:error ":streams is required") :type
    (common-lisp:or recording-stream-list common-lisp:null))
   (fragment-selector (common-lisp:error ":fragment-selector is required")
    :type (common-lisp:or fragment-selector common-lisp:null)))
 (common-lisp:export
  (common-lisp:list
   'kinesis-video-stream-recording-source-runtime-configuration
   'make-kinesis-video-stream-recording-source-runtime-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          kinesis-video-stream-recording-source-runtime-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          kinesis-video-stream-recording-source-runtime-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'streams))
      (common-lisp:list
       (common-lisp:cons "Streams"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'fragment-selector))
      (common-lisp:list
       (common-lisp:cons "FragmentSelector"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          kinesis-video-stream-recording-source-runtime-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (kinesis-video-stream-source-runtime-configuration
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-kinesis-video-stream-source-runtime-configuration-"))
   (streams (common-lisp:error ":streams is required") :type
    (common-lisp:or streams common-lisp:null))
   (media-encoding (common-lisp:error ":media-encoding is required") :type
    (common-lisp:or media-encoding common-lisp:null))
   (media-sample-rate (common-lisp:error ":media-sample-rate is required")
    :type (common-lisp:or media-sample-rate-hertz common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'kinesis-video-stream-source-runtime-configuration
                    'make-kinesis-video-stream-source-runtime-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          kinesis-video-stream-source-runtime-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          kinesis-video-stream-source-runtime-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'streams))
      (common-lisp:list
       (common-lisp:cons "Streams"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'media-encoding))
      (common-lisp:list
       (common-lisp:cons "MediaEncoding"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'media-sample-rate))
      (common-lisp:list
       (common-lisp:cons "MediaSampleRate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          kinesis-video-stream-source-runtime-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (kinesis-video-stream-source-task-configuration (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-kinesis-video-stream-source-task-configuration-"))
   (stream-arn (common-lisp:error ":stream-arn is required") :type
    (common-lisp:or kinesis-video-stream-arn common-lisp:null))
   (channel-id (common-lisp:error ":channel-id is required") :type
    (common-lisp:or channel-id common-lisp:null))
   (fragment-number common-lisp:nil :type
    (common-lisp:or fragment-number-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'kinesis-video-stream-source-task-configuration
                    'make-kinesis-video-stream-source-task-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          kinesis-video-stream-source-task-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          kinesis-video-stream-source-task-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stream-arn))
      (common-lisp:list
       (common-lisp:cons "StreamArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'channel-id))
      (common-lisp:list
       (common-lisp:cons "ChannelId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'fragment-number))
      (common-lisp:list
       (common-lisp:cons "FragmentNumber"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          kinesis-video-stream-source-task-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (lambda-function-sink-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-lambda-function-sink-configuration-"))
   (insights-target common-lisp:nil :type
    (common-lisp:or arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'lambda-function-sink-configuration
                    'make-lambda-function-sink-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          lambda-function-sink-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          lambda-function-sink-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'insights-target))
      (common-lisp:list
       (common-lisp:cons "InsightsTarget"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          lambda-function-sink-configuration))
   common-lisp:nil))
(common-lisp:deftype language-options () 'common-lisp:string)
(common-lisp:deftype layout-option () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (list-media-capture-pipelines-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-media-capture-pipelines-request-"))
   (next-token common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or result-max common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-media-capture-pipelines-request
                    'make-list-media-capture-pipelines-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-media-capture-pipelines-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-media-capture-pipelines-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-media-capture-pipelines-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-media-capture-pipelines-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-media-capture-pipelines-response-"))
   (media-capture-pipelines common-lisp:nil :type
    (common-lisp:or media-capture-pipeline-summary-list common-lisp:null))
   (next-token common-lisp:nil :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-media-capture-pipelines-response
                    'make-list-media-capture-pipelines-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-media-capture-pipelines-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-media-capture-pipelines-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'media-capture-pipelines))
      (common-lisp:list
       (common-lisp:cons "MediaCapturePipelines"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-media-capture-pipelines-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-media-insights-pipeline-configurations-request
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-list-media-insights-pipeline-configurations-request-"))
   (next-token common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or result-max common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-media-insights-pipeline-configurations-request
                    'make-list-media-insights-pipeline-configurations-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-media-insights-pipeline-configurations-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-media-insights-pipeline-configurations-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-media-insights-pipeline-configurations-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-media-insights-pipeline-configurations-response
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-list-media-insights-pipeline-configurations-response-"))
   (media-insights-pipeline-configurations common-lisp:nil :type
    (common-lisp:or media-insights-pipeline-configuration-summary-list
                    common-lisp:null))
   (next-token common-lisp:nil :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-media-insights-pipeline-configurations-response
                    'make-list-media-insights-pipeline-configurations-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-media-insights-pipeline-configurations-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-media-insights-pipeline-configurations-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'media-insights-pipeline-configurations))
      (common-lisp:list
       (common-lisp:cons "MediaInsightsPipelineConfigurations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-media-insights-pipeline-configurations-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-media-pipeline-kinesis-video-stream-pools-request
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-list-media-pipeline-kinesis-video-stream-pools-request-"))
   (next-token common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or result-max common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-media-pipeline-kinesis-video-stream-pools-request
                    'make-list-media-pipeline-kinesis-video-stream-pools-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-media-pipeline-kinesis-video-stream-pools-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-media-pipeline-kinesis-video-stream-pools-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-media-pipeline-kinesis-video-stream-pools-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-media-pipeline-kinesis-video-stream-pools-response
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-list-media-pipeline-kinesis-video-stream-pools-response-"))
   (kinesis-video-stream-pools common-lisp:nil :type
    (common-lisp:or kinesis-video-stream-pool-summary-list common-lisp:null))
   (next-token common-lisp:nil :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-media-pipeline-kinesis-video-stream-pools-response
                    'make-list-media-pipeline-kinesis-video-stream-pools-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-media-pipeline-kinesis-video-stream-pools-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-media-pipeline-kinesis-video-stream-pools-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'kinesis-video-stream-pools))
      (common-lisp:list
       (common-lisp:cons "KinesisVideoStreamPools"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-media-pipeline-kinesis-video-stream-pools-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-media-pipelines-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-media-pipelines-request-"))
   (next-token common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or result-max common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-media-pipelines-request
                    'make-list-media-pipelines-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-media-pipelines-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-media-pipelines-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-media-pipelines-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-media-pipelines-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-media-pipelines-response-"))
   (media-pipelines common-lisp:nil :type
    (common-lisp:or media-pipeline-list common-lisp:null))
   (next-token common-lisp:nil :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-media-pipelines-response
                    'make-list-media-pipelines-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-media-pipelines-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-media-pipelines-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'media-pipelines))
      (common-lisp:list
       (common-lisp:cons "MediaPipelines"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-media-pipelines-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-tags-for-resource-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-tags-for-resource-request-"))
   (resource-arn (common-lisp:error ":resource-arn is required") :type
    (common-lisp:or amazon-resource-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-tags-for-resource-request
                    'make-list-tags-for-resource-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-tags-for-resource-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-tags-for-resource-response-"))
   (tags common-lisp:nil :type (common-lisp:or tag-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-tags-for-resource-response
                    'make-list-tags-for-resource-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-response))
   common-lisp:nil))
(common-lisp:deftype live-connector-mux-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (live-connector-rtmpconfiguration (:copier common-lisp:nil)
      (:conc-name "struct-shape-live-connector-rtmpconfiguration-"))
   (url (common-lisp:error ":url is required") :type
    (common-lisp:or sensitive-string common-lisp:null))
   (audio-channels common-lisp:nil :type
    (common-lisp:or audio-channels-option common-lisp:null))
   (audio-sample-rate common-lisp:nil :type
    (common-lisp:or audio-sample-rate-option common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'live-connector-rtmpconfiguration
                    'make-live-connector-rtmpconfiguration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          live-connector-rtmpconfiguration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          live-connector-rtmpconfiguration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'url))
      (common-lisp:list
       (common-lisp:cons "Url"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'audio-channels))
      (common-lisp:list
       (common-lisp:cons "AudioChannels"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'audio-sample-rate))
      (common-lisp:list
       (common-lisp:cons "AudioSampleRate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          live-connector-rtmpconfiguration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (live-connector-sink-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-live-connector-sink-configuration-"))
   (sink-type (common-lisp:error ":sink-type is required") :type
    (common-lisp:or live-connector-sink-type common-lisp:null))
   (rtmpconfiguration (common-lisp:error ":rtmpconfiguration is required")
    :type (common-lisp:or live-connector-rtmpconfiguration common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'live-connector-sink-configuration
                    'make-live-connector-sink-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          live-connector-sink-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          live-connector-sink-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sink-type))
      (common-lisp:list
       (common-lisp:cons "SinkType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rtmpconfiguration))
      (common-lisp:list
       (common-lisp:cons "RTMPConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          live-connector-sink-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype live-connector-sink-list ()
   '(trivial-types:proper-list live-connector-sink-configuration))
 (common-lisp:defun make-live-connector-sink-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            live-connector-sink-configuration))
   aws-sdk/generator/shape::members))
(common-lisp:deftype live-connector-sink-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (live-connector-source-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-live-connector-source-configuration-"))
   (source-type (common-lisp:error ":source-type is required") :type
    (common-lisp:or live-connector-source-type common-lisp:null))
   (chime-sdk-meeting-live-connector-configuration
    (common-lisp:error
     ":chime-sdk-meeting-live-connector-configuration is required")
    :type
    (common-lisp:or chime-sdk-meeting-live-connector-configuration
                    common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'live-connector-source-configuration
                    'make-live-connector-source-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          live-connector-source-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          live-connector-source-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-type))
      (common-lisp:list
       (common-lisp:cons "SourceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'chime-sdk-meeting-live-connector-configuration))
      (common-lisp:list
       (common-lisp:cons "ChimeSdkMeetingLiveConnectorConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          live-connector-source-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype live-connector-source-list ()
   '(trivial-types:proper-list live-connector-source-configuration))
 (common-lisp:defun make-live-connector-source-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            live-connector-source-configuration))
   aws-sdk/generator/shape::members))
(common-lisp:deftype live-connector-source-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (media-capture-pipeline (:copier common-lisp:nil)
      (:conc-name "struct-shape-media-capture-pipeline-"))
   (media-pipeline-id common-lisp:nil :type
    (common-lisp:or guid-string common-lisp:null))
   (media-pipeline-arn common-lisp:nil :type
    (common-lisp:or amazon-resource-name common-lisp:null))
   (source-type common-lisp:nil :type
    (common-lisp:or media-pipeline-source-type common-lisp:null))
   (source-arn common-lisp:nil :type (common-lisp:or arn common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or media-pipeline-status common-lisp:null))
   (sink-type common-lisp:nil :type
    (common-lisp:or media-pipeline-sink-type common-lisp:null))
   (sink-arn common-lisp:nil :type (common-lisp:or arn common-lisp:null))
   (created-timestamp common-lisp:nil :type
    (common-lisp:or iso8601timestamp common-lisp:null))
   (updated-timestamp common-lisp:nil :type
    (common-lisp:or iso8601timestamp common-lisp:null))
   (chime-sdk-meeting-configuration common-lisp:nil :type
    (common-lisp:or chime-sdk-meeting-configuration common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'media-capture-pipeline 'make-media-capture-pipeline))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          media-capture-pipeline))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          media-capture-pipeline))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'media-pipeline-id))
      (common-lisp:list
       (common-lisp:cons "MediaPipelineId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'media-pipeline-arn))
      (common-lisp:list
       (common-lisp:cons "MediaPipelineArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-type))
      (common-lisp:list
       (common-lisp:cons "SourceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-arn))
      (common-lisp:list
       (common-lisp:cons "SourceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sink-type))
      (common-lisp:list
       (common-lisp:cons "SinkType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sink-arn))
      (common-lisp:list
       (common-lisp:cons "SinkArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-timestamp))
      (common-lisp:list
       (common-lisp:cons "CreatedTimestamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'updated-timestamp))
      (common-lisp:list
       (common-lisp:cons "UpdatedTimestamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'chime-sdk-meeting-configuration))
      (common-lisp:list
       (common-lisp:cons "ChimeSdkMeetingConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          media-capture-pipeline))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (media-capture-pipeline-source-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-media-capture-pipeline-source-configuration-"))
   (media-pipeline-arn (common-lisp:error ":media-pipeline-arn is required")
    :type (common-lisp:or arn common-lisp:null))
   (chime-sdk-meeting-configuration
    (common-lisp:error ":chime-sdk-meeting-configuration is required") :type
    (common-lisp:or chime-sdk-meeting-concatenation-configuration
                    common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'media-capture-pipeline-source-configuration
                    'make-media-capture-pipeline-source-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          media-capture-pipeline-source-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          media-capture-pipeline-source-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'media-pipeline-arn))
      (common-lisp:list
       (common-lisp:cons "MediaPipelineArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'chime-sdk-meeting-configuration))
      (common-lisp:list
       (common-lisp:cons "ChimeSdkMeetingConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          media-capture-pipeline-source-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (media-capture-pipeline-summary (:copier common-lisp:nil)
      (:conc-name "struct-shape-media-capture-pipeline-summary-"))
   (media-pipeline-id common-lisp:nil :type
    (common-lisp:or guid-string common-lisp:null))
   (media-pipeline-arn common-lisp:nil :type
    (common-lisp:or amazon-resource-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'media-capture-pipeline-summary
                    'make-media-capture-pipeline-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          media-capture-pipeline-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          media-capture-pipeline-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'media-pipeline-id))
      (common-lisp:list
       (common-lisp:cons "MediaPipelineId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'media-pipeline-arn))
      (common-lisp:list
       (common-lisp:cons "MediaPipelineArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          media-capture-pipeline-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype media-capture-pipeline-summary-list ()
   '(trivial-types:proper-list media-capture-pipeline-summary))
 (common-lisp:defun make-media-capture-pipeline-summary-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            media-capture-pipeline-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (media-concatenation-pipeline (:copier common-lisp:nil)
      (:conc-name "struct-shape-media-concatenation-pipeline-"))
   (media-pipeline-id common-lisp:nil :type
    (common-lisp:or guid-string common-lisp:null))
   (media-pipeline-arn common-lisp:nil :type
    (common-lisp:or amazon-resource-name common-lisp:null))
   (sources common-lisp:nil :type
    (common-lisp:or concatenation-source-list common-lisp:null))
   (sinks common-lisp:nil :type
    (common-lisp:or concatenation-sink-list common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or media-pipeline-status common-lisp:null))
   (created-timestamp common-lisp:nil :type
    (common-lisp:or iso8601timestamp common-lisp:null))
   (updated-timestamp common-lisp:nil :type
    (common-lisp:or iso8601timestamp common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'media-concatenation-pipeline
                    'make-media-concatenation-pipeline))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          media-concatenation-pipeline))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          media-concatenation-pipeline))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'media-pipeline-id))
      (common-lisp:list
       (common-lisp:cons "MediaPipelineId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'media-pipeline-arn))
      (common-lisp:list
       (common-lisp:cons "MediaPipelineArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sources))
      (common-lisp:list
       (common-lisp:cons "Sources"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sinks))
      (common-lisp:list
       (common-lisp:cons "Sinks"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-timestamp))
      (common-lisp:list
       (common-lisp:cons "CreatedTimestamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'updated-timestamp))
      (common-lisp:list
       (common-lisp:cons "UpdatedTimestamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          media-concatenation-pipeline))
   common-lisp:nil))
(common-lisp:deftype media-encoding () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (media-insights-pipeline (:copier common-lisp:nil)
      (:conc-name "struct-shape-media-insights-pipeline-"))
   (media-pipeline-id common-lisp:nil :type
    (common-lisp:or guid-string common-lisp:null))
   (media-pipeline-arn common-lisp:nil :type
    (common-lisp:or arn common-lisp:null))
   (media-insights-pipeline-configuration-arn common-lisp:nil :type
    (common-lisp:or arn common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or media-pipeline-status common-lisp:null))
   (kinesis-video-stream-source-runtime-configuration common-lisp:nil :type
    (common-lisp:or kinesis-video-stream-source-runtime-configuration
                    common-lisp:null))
   (media-insights-runtime-metadata common-lisp:nil :type
    (common-lisp:or media-insights-runtime-metadata common-lisp:null))
   (kinesis-video-stream-recording-source-runtime-configuration common-lisp:nil
    :type
    (common-lisp:or kinesis-video-stream-recording-source-runtime-configuration
                    common-lisp:null))
   (s3recording-sink-runtime-configuration common-lisp:nil :type
    (common-lisp:or s3recording-sink-runtime-configuration common-lisp:null))
   (created-timestamp common-lisp:nil :type
    (common-lisp:or iso8601timestamp common-lisp:null))
   (element-statuses common-lisp:nil :type
    (common-lisp:or media-insights-pipeline-element-statuses
                    common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'media-insights-pipeline 'make-media-insights-pipeline))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          media-insights-pipeline))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          media-insights-pipeline))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'media-pipeline-id))
      (common-lisp:list
       (common-lisp:cons "MediaPipelineId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'media-pipeline-arn))
      (common-lisp:list
       (common-lisp:cons "MediaPipelineArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'media-insights-pipeline-configuration-arn))
      (common-lisp:list
       (common-lisp:cons "MediaInsightsPipelineConfigurationArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'kinesis-video-stream-source-runtime-configuration))
      (common-lisp:list
       (common-lisp:cons "KinesisVideoStreamSourceRuntimeConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'media-insights-runtime-metadata))
      (common-lisp:list
       (common-lisp:cons "MediaInsightsRuntimeMetadata"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'kinesis-video-stream-recording-source-runtime-configuration))
      (common-lisp:list
       (common-lisp:cons
        "KinesisVideoStreamRecordingSourceRuntimeConfiguration"
        (aws-sdk/generator/shape::input-params
         aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           's3recording-sink-runtime-configuration))
      (common-lisp:list
       (common-lisp:cons "S3RecordingSinkRuntimeConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-timestamp))
      (common-lisp:list
       (common-lisp:cons "CreatedTimestamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'element-statuses))
      (common-lisp:list
       (common-lisp:cons "ElementStatuses"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          media-insights-pipeline))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (media-insights-pipeline-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-media-insights-pipeline-configuration-"))
   (media-insights-pipeline-configuration-name common-lisp:nil :type
    (common-lisp:or media-insights-pipeline-configuration-name-string
                    common-lisp:null))
   (media-insights-pipeline-configuration-arn common-lisp:nil :type
    (common-lisp:or arn common-lisp:null))
   (resource-access-role-arn common-lisp:nil :type
    (common-lisp:or arn common-lisp:null))
   (real-time-alert-configuration common-lisp:nil :type
    (common-lisp:or real-time-alert-configuration common-lisp:null))
   (elements common-lisp:nil :type
    (common-lisp:or media-insights-pipeline-configuration-elements
                    common-lisp:null))
   (media-insights-pipeline-configuration-id common-lisp:nil :type
    (common-lisp:or guid-string common-lisp:null))
   (created-timestamp common-lisp:nil :type
    (common-lisp:or iso8601timestamp common-lisp:null))
   (updated-timestamp common-lisp:nil :type
    (common-lisp:or iso8601timestamp common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'media-insights-pipeline-configuration
                    'make-media-insights-pipeline-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          media-insights-pipeline-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          media-insights-pipeline-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'media-insights-pipeline-configuration-name))
      (common-lisp:list
       (common-lisp:cons "MediaInsightsPipelineConfigurationName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'media-insights-pipeline-configuration-arn))
      (common-lisp:list
       (common-lisp:cons "MediaInsightsPipelineConfigurationArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'resource-access-role-arn))
      (common-lisp:list
       (common-lisp:cons "ResourceAccessRoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'real-time-alert-configuration))
      (common-lisp:list
       (common-lisp:cons "RealTimeAlertConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'elements))
      (common-lisp:list
       (common-lisp:cons "Elements"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'media-insights-pipeline-configuration-id))
      (common-lisp:list
       (common-lisp:cons "MediaInsightsPipelineConfigurationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-timestamp))
      (common-lisp:list
       (common-lisp:cons "CreatedTimestamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'updated-timestamp))
      (common-lisp:list
       (common-lisp:cons "UpdatedTimestamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          media-insights-pipeline-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (media-insights-pipeline-configuration-element (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-media-insights-pipeline-configuration-element-"))
   (type (common-lisp:error ":type is required") :type
    (common-lisp:or media-insights-pipeline-configuration-element-type
                    common-lisp:null))
   (amazon-transcribe-call-analytics-processor-configuration common-lisp:nil
    :type
    (common-lisp:or amazon-transcribe-call-analytics-processor-configuration
                    common-lisp:null))
   (amazon-transcribe-processor-configuration common-lisp:nil :type
    (common-lisp:or amazon-transcribe-processor-configuration
                    common-lisp:null))
   (kinesis-data-stream-sink-configuration common-lisp:nil :type
    (common-lisp:or kinesis-data-stream-sink-configuration common-lisp:null))
   (s3recording-sink-configuration common-lisp:nil :type
    (common-lisp:or s3recording-sink-configuration common-lisp:null))
   (voice-analytics-processor-configuration common-lisp:nil :type
    (common-lisp:or voice-analytics-processor-configuration common-lisp:null))
   (lambda-function-sink-configuration common-lisp:nil :type
    (common-lisp:or lambda-function-sink-configuration common-lisp:null))
   (sqs-queue-sink-configuration common-lisp:nil :type
    (common-lisp:or sqs-queue-sink-configuration common-lisp:null))
   (sns-topic-sink-configuration common-lisp:nil :type
    (common-lisp:or sns-topic-sink-configuration common-lisp:null))
   (voice-enhancement-sink-configuration common-lisp:nil :type
    (common-lisp:or voice-enhancement-sink-configuration common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'media-insights-pipeline-configuration-element
                    'make-media-insights-pipeline-configuration-element))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          media-insights-pipeline-configuration-element))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          media-insights-pipeline-configuration-element))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'amazon-transcribe-call-analytics-processor-configuration))
      (common-lisp:list
       (common-lisp:cons "AmazonTranscribeCallAnalyticsProcessorConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'amazon-transcribe-processor-configuration))
      (common-lisp:list
       (common-lisp:cons "AmazonTranscribeProcessorConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'kinesis-data-stream-sink-configuration))
      (common-lisp:list
       (common-lisp:cons "KinesisDataStreamSinkConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           's3recording-sink-configuration))
      (common-lisp:list
       (common-lisp:cons "S3RecordingSinkConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'voice-analytics-processor-configuration))
      (common-lisp:list
       (common-lisp:cons "VoiceAnalyticsProcessorConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'lambda-function-sink-configuration))
      (common-lisp:list
       (common-lisp:cons "LambdaFunctionSinkConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'sqs-queue-sink-configuration))
      (common-lisp:list
       (common-lisp:cons "SqsQueueSinkConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'sns-topic-sink-configuration))
      (common-lisp:list
       (common-lisp:cons "SnsTopicSinkConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'voice-enhancement-sink-configuration))
      (common-lisp:list
       (common-lisp:cons "VoiceEnhancementSinkConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          media-insights-pipeline-configuration-element))
   common-lisp:nil))
(common-lisp:deftype media-insights-pipeline-configuration-element-type ()
  'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype media-insights-pipeline-configuration-elements ()
   '(trivial-types:proper-list media-insights-pipeline-configuration-element))
 (common-lisp:defun make-media-insights-pipeline-configuration-elements
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            media-insights-pipeline-configuration-element))
   aws-sdk/generator/shape::members))
(common-lisp:deftype media-insights-pipeline-configuration-name-string ()
  'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (media-insights-pipeline-configuration-summary (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-media-insights-pipeline-configuration-summary-"))
   (media-insights-pipeline-configuration-name common-lisp:nil :type
    (common-lisp:or media-insights-pipeline-configuration-name-string
                    common-lisp:null))
   (media-insights-pipeline-configuration-id common-lisp:nil :type
    (common-lisp:or guid-string common-lisp:null))
   (media-insights-pipeline-configuration-arn common-lisp:nil :type
    (common-lisp:or arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'media-insights-pipeline-configuration-summary
                    'make-media-insights-pipeline-configuration-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          media-insights-pipeline-configuration-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          media-insights-pipeline-configuration-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'media-insights-pipeline-configuration-name))
      (common-lisp:list
       (common-lisp:cons "MediaInsightsPipelineConfigurationName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'media-insights-pipeline-configuration-id))
      (common-lisp:list
       (common-lisp:cons "MediaInsightsPipelineConfigurationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'media-insights-pipeline-configuration-arn))
      (common-lisp:list
       (common-lisp:cons "MediaInsightsPipelineConfigurationArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          media-insights-pipeline-configuration-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype media-insights-pipeline-configuration-summary-list ()
   '(trivial-types:proper-list media-insights-pipeline-configuration-summary))
 (common-lisp:defun make-media-insights-pipeline-configuration-summary-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            media-insights-pipeline-configuration-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (media-insights-pipeline-element-status (:copier common-lisp:nil)
      (:conc-name "struct-shape-media-insights-pipeline-element-status-"))
   (type common-lisp:nil :type
    (common-lisp:or media-insights-pipeline-configuration-element-type
                    common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or media-pipeline-element-status common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'media-insights-pipeline-element-status
                    'make-media-insights-pipeline-element-status))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          media-insights-pipeline-element-status))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          media-insights-pipeline-element-status))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          media-insights-pipeline-element-status))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype media-insights-pipeline-element-statuses ()
   '(trivial-types:proper-list media-insights-pipeline-element-status))
 (common-lisp:defun make-media-insights-pipeline-element-statuses
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            media-insights-pipeline-element-status))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype media-insights-runtime-metadata ()
   'common-lisp:hash-table)
 (common-lisp:defun make-media-insights-runtime-metadata
                    (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:progn
 (common-lisp:defstruct
     (media-live-connector-pipeline (:copier common-lisp:nil)
      (:conc-name "struct-shape-media-live-connector-pipeline-"))
   (sources common-lisp:nil :type
    (common-lisp:or live-connector-source-list common-lisp:null))
   (sinks common-lisp:nil :type
    (common-lisp:or live-connector-sink-list common-lisp:null))
   (media-pipeline-id common-lisp:nil :type
    (common-lisp:or guid-string common-lisp:null))
   (media-pipeline-arn common-lisp:nil :type
    (common-lisp:or amazon-resource-name common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or media-pipeline-status common-lisp:null))
   (created-timestamp common-lisp:nil :type
    (common-lisp:or iso8601timestamp common-lisp:null))
   (updated-timestamp common-lisp:nil :type
    (common-lisp:or iso8601timestamp common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'media-live-connector-pipeline
                    'make-media-live-connector-pipeline))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          media-live-connector-pipeline))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          media-live-connector-pipeline))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sources))
      (common-lisp:list
       (common-lisp:cons "Sources"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sinks))
      (common-lisp:list
       (common-lisp:cons "Sinks"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'media-pipeline-id))
      (common-lisp:list
       (common-lisp:cons "MediaPipelineId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'media-pipeline-arn))
      (common-lisp:list
       (common-lisp:cons "MediaPipelineArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-timestamp))
      (common-lisp:list
       (common-lisp:cons "CreatedTimestamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'updated-timestamp))
      (common-lisp:list
       (common-lisp:cons "UpdatedTimestamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          media-live-connector-pipeline))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (media-pipeline (:copier common-lisp:nil)
      (:conc-name "struct-shape-media-pipeline-"))
   (media-capture-pipeline common-lisp:nil :type
    (common-lisp:or media-capture-pipeline common-lisp:null))
   (media-live-connector-pipeline common-lisp:nil :type
    (common-lisp:or media-live-connector-pipeline common-lisp:null))
   (media-concatenation-pipeline common-lisp:nil :type
    (common-lisp:or media-concatenation-pipeline common-lisp:null))
   (media-insights-pipeline common-lisp:nil :type
    (common-lisp:or media-insights-pipeline common-lisp:null))
   (media-stream-pipeline common-lisp:nil :type
    (common-lisp:or media-stream-pipeline common-lisp:null)))
 (common-lisp:export (common-lisp:list 'media-pipeline 'make-media-pipeline))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input media-pipeline))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input media-pipeline))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'media-capture-pipeline))
      (common-lisp:list
       (common-lisp:cons "MediaCapturePipeline"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'media-live-connector-pipeline))
      (common-lisp:list
       (common-lisp:cons "MediaLiveConnectorPipeline"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'media-concatenation-pipeline))
      (common-lisp:list
       (common-lisp:cons "MediaConcatenationPipeline"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'media-insights-pipeline))
      (common-lisp:list
       (common-lisp:cons "MediaInsightsPipeline"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'media-stream-pipeline))
      (common-lisp:list
       (common-lisp:cons "MediaStreamPipeline"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input media-pipeline))
   common-lisp:nil))
(common-lisp:deftype media-pipeline-element-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype media-pipeline-list ()
   '(trivial-types:proper-list media-pipeline-summary))
 (common-lisp:defun make-media-pipeline-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list media-pipeline-summary))
   aws-sdk/generator/shape::members))
(common-lisp:deftype media-pipeline-sink-type () 'common-lisp:string)
(common-lisp:deftype media-pipeline-source-type () 'common-lisp:string)
(common-lisp:deftype media-pipeline-status () 'common-lisp:string)
(common-lisp:deftype media-pipeline-status-update () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (media-pipeline-summary (:copier common-lisp:nil)
      (:conc-name "struct-shape-media-pipeline-summary-"))
   (media-pipeline-id common-lisp:nil :type
    (common-lisp:or guid-string common-lisp:null))
   (media-pipeline-arn common-lisp:nil :type
    (common-lisp:or amazon-resource-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'media-pipeline-summary 'make-media-pipeline-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          media-pipeline-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          media-pipeline-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'media-pipeline-id))
      (common-lisp:list
       (common-lisp:cons "MediaPipelineId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'media-pipeline-arn))
      (common-lisp:list
       (common-lisp:cons "MediaPipelineArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          media-pipeline-summary))
   common-lisp:nil))
(common-lisp:deftype media-pipeline-task-status () 'common-lisp:string)
(common-lisp:deftype media-sample-rate-hertz () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defstruct
     (media-stream-pipeline (:copier common-lisp:nil)
      (:conc-name "struct-shape-media-stream-pipeline-"))
   (media-pipeline-id common-lisp:nil :type
    (common-lisp:or guid-string common-lisp:null))
   (media-pipeline-arn common-lisp:nil :type
    (common-lisp:or amazon-resource-name common-lisp:null))
   (created-timestamp common-lisp:nil :type
    (common-lisp:or iso8601timestamp common-lisp:null))
   (updated-timestamp common-lisp:nil :type
    (common-lisp:or iso8601timestamp common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or media-pipeline-status common-lisp:null))
   (sources common-lisp:nil :type
    (common-lisp:or media-stream-source-list common-lisp:null))
   (sinks common-lisp:nil :type
    (common-lisp:or media-stream-sink-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'media-stream-pipeline 'make-media-stream-pipeline))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          media-stream-pipeline))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          media-stream-pipeline))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'media-pipeline-id))
      (common-lisp:list
       (common-lisp:cons "MediaPipelineId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'media-pipeline-arn))
      (common-lisp:list
       (common-lisp:cons "MediaPipelineArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-timestamp))
      (common-lisp:list
       (common-lisp:cons "CreatedTimestamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'updated-timestamp))
      (common-lisp:list
       (common-lisp:cons "UpdatedTimestamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sources))
      (common-lisp:list
       (common-lisp:cons "Sources"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sinks))
      (common-lisp:list
       (common-lisp:cons "Sinks"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          media-stream-pipeline))
   common-lisp:nil))
(common-lisp:deftype media-stream-pipeline-sink-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (media-stream-sink (:copier common-lisp:nil)
      (:conc-name "struct-shape-media-stream-sink-"))
   (sink-arn (common-lisp:error ":sink-arn is required") :type
    (common-lisp:or arn common-lisp:null))
   (sink-type (common-lisp:error ":sink-type is required") :type
    (common-lisp:or media-stream-pipeline-sink-type common-lisp:null))
   (reserved-stream-capacity
    (common-lisp:error ":reserved-stream-capacity is required") :type
    (common-lisp:or reserved-stream-capacity common-lisp:null))
   (media-stream-type (common-lisp:error ":media-stream-type is required")
    :type (common-lisp:or media-stream-type common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'media-stream-sink 'make-media-stream-sink))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input media-stream-sink))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input media-stream-sink))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sink-arn))
      (common-lisp:list
       (common-lisp:cons "SinkArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sink-type))
      (common-lisp:list
       (common-lisp:cons "SinkType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'reserved-stream-capacity))
      (common-lisp:list
       (common-lisp:cons "ReservedStreamCapacity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'media-stream-type))
      (common-lisp:list
       (common-lisp:cons "MediaStreamType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input media-stream-sink))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype media-stream-sink-list ()
   '(trivial-types:proper-list media-stream-sink))
 (common-lisp:defun make-media-stream-sink-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list media-stream-sink))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (media-stream-source (:copier common-lisp:nil)
      (:conc-name "struct-shape-media-stream-source-"))
   (source-type (common-lisp:error ":source-type is required") :type
    (common-lisp:or media-pipeline-source-type common-lisp:null))
   (source-arn (common-lisp:error ":source-arn is required") :type
    (common-lisp:or arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'media-stream-source 'make-media-stream-source))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input media-stream-source))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input media-stream-source))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-type))
      (common-lisp:list
       (common-lisp:cons "SourceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-arn))
      (common-lisp:list
       (common-lisp:cons "SourceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input media-stream-source))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype media-stream-source-list ()
   '(trivial-types:proper-list media-stream-source))
 (common-lisp:defun make-media-stream-source-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list media-stream-source))
   aws-sdk/generator/shape::members))
(common-lisp:deftype media-stream-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (meeting-events-concatenation-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-meeting-events-concatenation-configuration-"))
   (state (common-lisp:error ":state is required") :type
    (common-lisp:or artifacts-concatenation-state common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'meeting-events-concatenation-configuration
                    'make-meeting-events-concatenation-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          meeting-events-concatenation-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          meeting-events-concatenation-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "State"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          meeting-events-concatenation-configuration))
   common-lisp:nil))
(common-lisp:deftype model-name () 'common-lisp:string)
(common-lisp:deftype non-empty-string () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition not-found-exception
     (chime-sdk-media-pipelines-error)
     ((code :initarg :code :initform common-lisp:nil :reader
       not-found-exception-code)
      (message :initarg :message :initform common-lisp:nil :reader
       not-found-exception-message)
      (request-id :initarg :request-id :initform common-lisp:nil :reader
       not-found-exception-request-id)))
 (common-lisp:export
  (common-lisp:list 'not-found-exception 'not-found-exception-code
                    'not-found-exception-message
                    'not-found-exception-request-id)))
(common-lisp:deftype number-of-channels () 'common-lisp:integer)
(common-lisp:deftype partial-results-stability () 'common-lisp:string)
(common-lisp:deftype participant-role () 'common-lisp:string)
(common-lisp:deftype pii-entity-types () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (post-call-analytics-settings (:copier common-lisp:nil)
      (:conc-name "struct-shape-post-call-analytics-settings-"))
   (output-location (common-lisp:error ":output-location is required") :type
    (common-lisp:or string common-lisp:null))
   (data-access-role-arn
    (common-lisp:error ":data-access-role-arn is required") :type
    (common-lisp:or string common-lisp:null))
   (content-redaction-output common-lisp:nil :type
    (common-lisp:or content-redaction-output common-lisp:null))
   (output-encryption-kmskey-id common-lisp:nil :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'post-call-analytics-settings
                    'make-post-call-analytics-settings))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          post-call-analytics-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          post-call-analytics-settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'output-location))
      (common-lisp:list
       (common-lisp:cons "OutputLocation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'data-access-role-arn))
      (common-lisp:list
       (common-lisp:cons "DataAccessRoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'content-redaction-output))
      (common-lisp:list
       (common-lisp:cons "ContentRedactionOutput"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'output-encryption-kmskey-id))
      (common-lisp:list
       (common-lisp:cons "OutputEncryptionKMSKeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          post-call-analytics-settings))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (presenter-only-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-presenter-only-configuration-"))
   (presenter-position common-lisp:nil :type
    (common-lisp:or presenter-position common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'presenter-only-configuration
                    'make-presenter-only-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          presenter-only-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          presenter-only-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'presenter-position))
      (common-lisp:list
       (common-lisp:cons "PresenterPosition"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          presenter-only-configuration))
   common-lisp:nil))
(common-lisp:deftype presenter-position () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (real-time-alert-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-real-time-alert-configuration-"))
   (disabled common-lisp:nil :type (common-lisp:or boolean common-lisp:null))
   (rules common-lisp:nil :type
    (common-lisp:or real-time-alert-rule-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'real-time-alert-configuration
                    'make-real-time-alert-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          real-time-alert-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          real-time-alert-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'disabled))
      (common-lisp:list
       (common-lisp:cons "Disabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rules))
      (common-lisp:list
       (common-lisp:cons "Rules"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          real-time-alert-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (real-time-alert-rule (:copier common-lisp:nil)
      (:conc-name "struct-shape-real-time-alert-rule-"))
   (type (common-lisp:error ":type is required") :type
    (common-lisp:or real-time-alert-rule-type common-lisp:null))
   (keyword-match-configuration common-lisp:nil :type
    (common-lisp:or keyword-match-configuration common-lisp:null))
   (sentiment-configuration common-lisp:nil :type
    (common-lisp:or sentiment-configuration common-lisp:null))
   (issue-detection-configuration common-lisp:nil :type
    (common-lisp:or issue-detection-configuration common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'real-time-alert-rule 'make-real-time-alert-rule))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input real-time-alert-rule))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input real-time-alert-rule))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'keyword-match-configuration))
      (common-lisp:list
       (common-lisp:cons "KeywordMatchConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'sentiment-configuration))
      (common-lisp:list
       (common-lisp:cons "SentimentConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'issue-detection-configuration))
      (common-lisp:list
       (common-lisp:cons "IssueDetectionConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input real-time-alert-rule))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype real-time-alert-rule-list ()
   '(trivial-types:proper-list real-time-alert-rule))
 (common-lisp:defun make-real-time-alert-rule-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list real-time-alert-rule))
   aws-sdk/generator/shape::members))
(common-lisp:deftype real-time-alert-rule-type () 'common-lisp:string)
(common-lisp:deftype recording-file-format () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (recording-stream-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-recording-stream-configuration-"))
   (stream-arn common-lisp:nil :type
    (common-lisp:or kinesis-video-stream-arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'recording-stream-configuration
                    'make-recording-stream-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          recording-stream-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          recording-stream-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stream-arn))
      (common-lisp:list
       (common-lisp:cons "StreamArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          recording-stream-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype recording-stream-list ()
   '(trivial-types:proper-list recording-stream-configuration))
 (common-lisp:defun make-recording-stream-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            recording-stream-configuration))
   aws-sdk/generator/shape::members))
(common-lisp:deftype reserved-stream-capacity () 'common-lisp:integer)
(common-lisp:deftype resolution-option () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition resource-limit-exceeded-exception
     (chime-sdk-media-pipelines-error)
     ((code :initarg :code :initform common-lisp:nil :reader
       resource-limit-exceeded-exception-code)
      (message :initarg :message :initform common-lisp:nil :reader
       resource-limit-exceeded-exception-message)
      (request-id :initarg :request-id :initform common-lisp:nil :reader
       resource-limit-exceeded-exception-request-id)))
 (common-lisp:export
  (common-lisp:list 'resource-limit-exceeded-exception
                    'resource-limit-exceeded-exception-code
                    'resource-limit-exceeded-exception-message
                    'resource-limit-exceeded-exception-request-id)))
(common-lisp:deftype result-max () 'common-lisp:integer)
(common-lisp:deftype rule-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (s3bucket-sink-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-s3bucket-sink-configuration-"))
   (destination (common-lisp:error ":destination is required") :type
    (common-lisp:or arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 's3bucket-sink-configuration
                    'make-s3bucket-sink-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          s3bucket-sink-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          s3bucket-sink-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'destination))
      (common-lisp:list
       (common-lisp:cons "Destination"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          s3bucket-sink-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (s3recording-sink-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-s3recording-sink-configuration-"))
   (destination common-lisp:nil :type (common-lisp:or arn common-lisp:null))
   (recording-file-format common-lisp:nil :type
    (common-lisp:or recording-file-format common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 's3recording-sink-configuration
                    'make-s3recording-sink-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          s3recording-sink-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          s3recording-sink-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'destination))
      (common-lisp:list
       (common-lisp:cons "Destination"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'recording-file-format))
      (common-lisp:list
       (common-lisp:cons "RecordingFileFormat"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          s3recording-sink-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (s3recording-sink-runtime-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-s3recording-sink-runtime-configuration-"))
   (destination (common-lisp:error ":destination is required") :type
    (common-lisp:or arn common-lisp:null))
   (recording-file-format
    (common-lisp:error ":recording-file-format is required") :type
    (common-lisp:or recording-file-format common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 's3recording-sink-runtime-configuration
                    'make-s3recording-sink-runtime-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          s3recording-sink-runtime-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          s3recording-sink-runtime-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'destination))
      (common-lisp:list
       (common-lisp:cons "Destination"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'recording-file-format))
      (common-lisp:list
       (common-lisp:cons "RecordingFileFormat"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          s3recording-sink-runtime-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (selected-video-streams (:copier common-lisp:nil)
      (:conc-name "struct-shape-selected-video-streams-"))
   (attendee-ids common-lisp:nil :type
    (common-lisp:or attendee-id-list common-lisp:null))
   (external-user-ids common-lisp:nil :type
    (common-lisp:or external-user-id-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'selected-video-streams 'make-selected-video-streams))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          selected-video-streams))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          selected-video-streams))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'attendee-ids))
      (common-lisp:list
       (common-lisp:cons "AttendeeIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'external-user-ids))
      (common-lisp:list
       (common-lisp:cons "ExternalUserIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          selected-video-streams))
   common-lisp:nil))
(common-lisp:deftype sensitive-string () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (sentiment-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-sentiment-configuration-"))
   (rule-name (common-lisp:error ":rule-name is required") :type
    (common-lisp:or rule-name common-lisp:null))
   (sentiment-type (common-lisp:error ":sentiment-type is required") :type
    (common-lisp:or sentiment-type common-lisp:null))
   (time-period (common-lisp:error ":time-period is required") :type
    (common-lisp:or sentiment-time-period-in-seconds common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'sentiment-configuration 'make-sentiment-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          sentiment-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          sentiment-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rule-name))
      (common-lisp:list
       (common-lisp:cons "RuleName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sentiment-type))
      (common-lisp:list
       (common-lisp:cons "SentimentType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'time-period))
      (common-lisp:list
       (common-lisp:cons "TimePeriod"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          sentiment-configuration))
   common-lisp:nil))
(common-lisp:deftype sentiment-time-period-in-seconds () 'common-lisp:integer)
(common-lisp:deftype sentiment-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition service-failure-exception
     (chime-sdk-media-pipelines-error)
     ((code :initarg :code :initform common-lisp:nil :reader
       service-failure-exception-code)
      (message :initarg :message :initform common-lisp:nil :reader
       service-failure-exception-message)
      (request-id :initarg :request-id :initform common-lisp:nil :reader
       service-failure-exception-request-id)))
 (common-lisp:export
  (common-lisp:list 'service-failure-exception 'service-failure-exception-code
                    'service-failure-exception-message
                    'service-failure-exception-request-id)))
(common-lisp:progn
 (common-lisp:define-condition service-unavailable-exception
     (chime-sdk-media-pipelines-error)
     ((code :initarg :code :initform common-lisp:nil :reader
       service-unavailable-exception-code)
      (message :initarg :message :initform common-lisp:nil :reader
       service-unavailable-exception-message)
      (request-id :initarg :request-id :initform common-lisp:nil :reader
       service-unavailable-exception-request-id)))
 (common-lisp:export
  (common-lisp:list 'service-unavailable-exception
                    'service-unavailable-exception-code
                    'service-unavailable-exception-message
                    'service-unavailable-exception-request-id)))
(common-lisp:progn
 (common-lisp:defstruct
     (sns-topic-sink-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-sns-topic-sink-configuration-"))
   (insights-target common-lisp:nil :type
    (common-lisp:or arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'sns-topic-sink-configuration
                    'make-sns-topic-sink-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          sns-topic-sink-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          sns-topic-sink-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'insights-target))
      (common-lisp:list
       (common-lisp:cons "InsightsTarget"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          sns-topic-sink-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (source-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-source-configuration-"))
   (selected-video-streams common-lisp:nil :type
    (common-lisp:or selected-video-streams common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'source-configuration 'make-source-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input source-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input source-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'selected-video-streams))
      (common-lisp:list
       (common-lisp:cons "SelectedVideoStreams"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input source-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (speaker-search-task (:copier common-lisp:nil)
      (:conc-name "struct-shape-speaker-search-task-"))
   (speaker-search-task-id common-lisp:nil :type
    (common-lisp:or guid-string common-lisp:null))
   (speaker-search-task-status common-lisp:nil :type
    (common-lisp:or media-pipeline-task-status common-lisp:null))
   (created-timestamp common-lisp:nil :type
    (common-lisp:or iso8601timestamp common-lisp:null))
   (updated-timestamp common-lisp:nil :type
    (common-lisp:or iso8601timestamp common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'speaker-search-task 'make-speaker-search-task))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input speaker-search-task))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input speaker-search-task))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'speaker-search-task-id))
      (common-lisp:list
       (common-lisp:cons "SpeakerSearchTaskId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'speaker-search-task-status))
      (common-lisp:list
       (common-lisp:cons "SpeakerSearchTaskStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-timestamp))
      (common-lisp:list
       (common-lisp:cons "CreatedTimestamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'updated-timestamp))
      (common-lisp:list
       (common-lisp:cons "UpdatedTimestamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input speaker-search-task))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (sqs-queue-sink-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-sqs-queue-sink-configuration-"))
   (insights-target common-lisp:nil :type
    (common-lisp:or arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'sqs-queue-sink-configuration
                    'make-sqs-queue-sink-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          sqs-queue-sink-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          sqs-queue-sink-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'insights-target))
      (common-lisp:list
       (common-lisp:cons "InsightsTarget"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          sqs-queue-sink-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (start-speaker-search-task-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-start-speaker-search-task-request-"))
   (identifier (common-lisp:error ":identifier is required") :type
    (common-lisp:or non-empty-string common-lisp:null))
   (voice-profile-domain-arn
    (common-lisp:error ":voice-profile-domain-arn is required") :type
    (common-lisp:or arn common-lisp:null))
   (kinesis-video-stream-source-task-configuration common-lisp:nil :type
    (common-lisp:or kinesis-video-stream-source-task-configuration
                    common-lisp:null))
   (client-request-token common-lisp:nil :type
    (common-lisp:or client-request-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'start-speaker-search-task-request
                    'make-start-speaker-search-task-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-speaker-search-task-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-speaker-search-task-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'voice-profile-domain-arn))
      (common-lisp:list
       (common-lisp:cons "VoiceProfileDomainArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'kinesis-video-stream-source-task-configuration))
      (common-lisp:list
       (common-lisp:cons "KinesisVideoStreamSourceTaskConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'client-request-token))
      (common-lisp:list
       (common-lisp:cons "ClientRequestToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-speaker-search-task-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (start-speaker-search-task-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-start-speaker-search-task-response-"))
   (speaker-search-task common-lisp:nil :type
    (common-lisp:or speaker-search-task common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'start-speaker-search-task-response
                    'make-start-speaker-search-task-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-speaker-search-task-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-speaker-search-task-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'speaker-search-task))
      (common-lisp:list
       (common-lisp:cons "SpeakerSearchTask"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-speaker-search-task-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (start-voice-tone-analysis-task-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-start-voice-tone-analysis-task-request-"))
   (identifier (common-lisp:error ":identifier is required") :type
    (common-lisp:or non-empty-string common-lisp:null))
   (language-code (common-lisp:error ":language-code is required") :type
    (common-lisp:or voice-analytics-language-code common-lisp:null))
   (kinesis-video-stream-source-task-configuration common-lisp:nil :type
    (common-lisp:or kinesis-video-stream-source-task-configuration
                    common-lisp:null))
   (client-request-token common-lisp:nil :type
    (common-lisp:or client-request-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'start-voice-tone-analysis-task-request
                    'make-start-voice-tone-analysis-task-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-voice-tone-analysis-task-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-voice-tone-analysis-task-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'language-code))
      (common-lisp:list
       (common-lisp:cons "LanguageCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'kinesis-video-stream-source-task-configuration))
      (common-lisp:list
       (common-lisp:cons "KinesisVideoStreamSourceTaskConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'client-request-token))
      (common-lisp:list
       (common-lisp:cons "ClientRequestToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-voice-tone-analysis-task-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (start-voice-tone-analysis-task-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-start-voice-tone-analysis-task-response-"))
   (voice-tone-analysis-task common-lisp:nil :type
    (common-lisp:or voice-tone-analysis-task common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'start-voice-tone-analysis-task-response
                    'make-start-voice-tone-analysis-task-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-voice-tone-analysis-task-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-voice-tone-analysis-task-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'voice-tone-analysis-task))
      (common-lisp:list
       (common-lisp:cons "VoiceToneAnalysisTask"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-voice-tone-analysis-task-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (stop-speaker-search-task-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-stop-speaker-search-task-request-"))
   (identifier (common-lisp:error ":identifier is required") :type
    (common-lisp:or non-empty-string common-lisp:null))
   (speaker-search-task-id
    (common-lisp:error ":speaker-search-task-id is required") :type
    (common-lisp:or guid-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'stop-speaker-search-task-request
                    'make-stop-speaker-search-task-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          stop-speaker-search-task-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          stop-speaker-search-task-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          stop-speaker-search-task-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (stop-voice-tone-analysis-task-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-stop-voice-tone-analysis-task-request-"))
   (identifier (common-lisp:error ":identifier is required") :type
    (common-lisp:or non-empty-string common-lisp:null))
   (voice-tone-analysis-task-id
    (common-lisp:error ":voice-tone-analysis-task-id is required") :type
    (common-lisp:or guid-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'stop-voice-tone-analysis-task-request
                    'make-stop-voice-tone-analysis-task-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          stop-voice-tone-analysis-task-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          stop-voice-tone-analysis-task-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          stop-voice-tone-analysis-task-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (stream-channel-definition (:copier common-lisp:nil)
      (:conc-name "struct-shape-stream-channel-definition-"))
   (number-of-channels (common-lisp:error ":number-of-channels is required")
    :type (common-lisp:or number-of-channels common-lisp:null))
   (channel-definitions common-lisp:nil :type
    (common-lisp:or channel-definitions common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'stream-channel-definition
                    'make-stream-channel-definition))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          stream-channel-definition))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          stream-channel-definition))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'number-of-channels))
      (common-lisp:list
       (common-lisp:cons "NumberOfChannels"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'channel-definitions))
      (common-lisp:list
       (common-lisp:cons "ChannelDefinitions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          stream-channel-definition))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (stream-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-stream-configuration-"))
   (stream-arn (common-lisp:error ":stream-arn is required") :type
    (common-lisp:or kinesis-video-stream-arn common-lisp:null))
   (fragment-number common-lisp:nil :type
    (common-lisp:or fragment-number-string common-lisp:null))
   (stream-channel-definition
    (common-lisp:error ":stream-channel-definition is required") :type
    (common-lisp:or stream-channel-definition common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'stream-configuration 'make-stream-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input stream-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input stream-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stream-arn))
      (common-lisp:list
       (common-lisp:cons "StreamArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'fragment-number))
      (common-lisp:list
       (common-lisp:cons "FragmentNumber"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'stream-channel-definition))
      (common-lisp:list
       (common-lisp:cons "StreamChannelDefinition"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input stream-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype streams ()
   '(trivial-types:proper-list stream-configuration))
 (common-lisp:defun make-streams
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list stream-configuration))
   aws-sdk/generator/shape::members))
(common-lisp:deftype string () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (tag (:copier common-lisp:nil) (:conc-name "struct-shape-tag-"))
   (key (common-lisp:error ":key is required") :type
    (common-lisp:or tag-key common-lisp:null))
   (value (common-lisp:error ":value is required") :type
    (common-lisp:or tag-value common-lisp:null)))
 (common-lisp:export (common-lisp:list 'tag 'make-tag))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input tag))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input tag))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key))
      (common-lisp:list
       (common-lisp:cons "Key"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "Value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input tag))
   common-lisp:nil))
(common-lisp:deftype tag-key () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype tag-key-list () '(trivial-types:proper-list tag-key))
 (common-lisp:defun make-tag-key-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list tag-key))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype tag-list () '(trivial-types:proper-list tag))
 (common-lisp:defun make-tag-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list tag))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (tag-resource-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-tag-resource-request-"))
   (resource-arn (common-lisp:error ":resource-arn is required") :type
    (common-lisp:or amazon-resource-name common-lisp:null))
   (tags (common-lisp:error ":tags is required") :type
    (common-lisp:or tag-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'tag-resource-request 'make-tag-resource-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input tag-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input tag-resource-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-arn))
      (common-lisp:list
       (common-lisp:cons "ResourceARN"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input tag-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (tag-resource-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-tag-resource-response-")))
 (common-lisp:export
  (common-lisp:list 'tag-resource-response 'make-tag-resource-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          tag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          tag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          tag-resource-response))
   common-lisp:nil))
(common-lisp:deftype tag-value () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition throttled-client-exception
     (chime-sdk-media-pipelines-error)
     ((code :initarg :code :initform common-lisp:nil :reader
       throttled-client-exception-code)
      (message :initarg :message :initform common-lisp:nil :reader
       throttled-client-exception-message)
      (request-id :initarg :request-id :initform common-lisp:nil :reader
       throttled-client-exception-request-id)))
 (common-lisp:export
  (common-lisp:list 'throttled-client-exception
                    'throttled-client-exception-code
                    'throttled-client-exception-message
                    'throttled-client-exception-request-id)))
(common-lisp:deftype tile-aspect-ratio () 'common-lisp:string)
(common-lisp:deftype tile-count () 'common-lisp:integer)
(common-lisp:deftype tile-order () 'common-lisp:string)
(common-lisp:deftype timestamp () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (timestamp-range (:copier common-lisp:nil)
      (:conc-name "struct-shape-timestamp-range-"))
   (start-timestamp (common-lisp:error ":start-timestamp is required") :type
    (common-lisp:or timestamp common-lisp:null))
   (end-timestamp (common-lisp:error ":end-timestamp is required") :type
    (common-lisp:or timestamp common-lisp:null)))
 (common-lisp:export (common-lisp:list 'timestamp-range 'make-timestamp-range))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input timestamp-range))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input timestamp-range))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start-timestamp))
      (common-lisp:list
       (common-lisp:cons "StartTimestamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'end-timestamp))
      (common-lisp:list
       (common-lisp:cons "EndTimestamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input timestamp-range))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (transcription-messages-concatenation-configuration
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-transcription-messages-concatenation-configuration-"))
   (state (common-lisp:error ":state is required") :type
    (common-lisp:or artifacts-concatenation-state common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'transcription-messages-concatenation-configuration
                    'make-transcription-messages-concatenation-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          transcription-messages-concatenation-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          transcription-messages-concatenation-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "State"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          transcription-messages-concatenation-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition unauthorized-client-exception
     (chime-sdk-media-pipelines-error)
     ((code :initarg :code :initform common-lisp:nil :reader
       unauthorized-client-exception-code)
      (message :initarg :message :initform common-lisp:nil :reader
       unauthorized-client-exception-message)
      (request-id :initarg :request-id :initform common-lisp:nil :reader
       unauthorized-client-exception-request-id)))
 (common-lisp:export
  (common-lisp:list 'unauthorized-client-exception
                    'unauthorized-client-exception-code
                    'unauthorized-client-exception-message
                    'unauthorized-client-exception-request-id)))
(common-lisp:progn
 (common-lisp:defstruct
     (untag-resource-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-untag-resource-request-"))
   (resource-arn (common-lisp:error ":resource-arn is required") :type
    (common-lisp:or amazon-resource-name common-lisp:null))
   (tag-keys (common-lisp:error ":tag-keys is required") :type
    (common-lisp:or tag-key-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'untag-resource-request 'make-untag-resource-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-arn))
      (common-lisp:list
       (common-lisp:cons "ResourceARN"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tag-keys))
      (common-lisp:list
       (common-lisp:cons "TagKeys"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (untag-resource-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-untag-resource-response-")))
 (common-lisp:export
  (common-lisp:list 'untag-resource-response 'make-untag-resource-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-media-insights-pipeline-configuration-request
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-update-media-insights-pipeline-configuration-request-"))
   (identifier (common-lisp:error ":identifier is required") :type
    (common-lisp:or non-empty-string common-lisp:null))
   (resource-access-role-arn
    (common-lisp:error ":resource-access-role-arn is required") :type
    (common-lisp:or arn common-lisp:null))
   (real-time-alert-configuration common-lisp:nil :type
    (common-lisp:or real-time-alert-configuration common-lisp:null))
   (elements (common-lisp:error ":elements is required") :type
    (common-lisp:or media-insights-pipeline-configuration-elements
                    common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-media-insights-pipeline-configuration-request
                    'make-update-media-insights-pipeline-configuration-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-media-insights-pipeline-configuration-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-media-insights-pipeline-configuration-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'resource-access-role-arn))
      (common-lisp:list
       (common-lisp:cons "ResourceAccessRoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'real-time-alert-configuration))
      (common-lisp:list
       (common-lisp:cons "RealTimeAlertConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'elements))
      (common-lisp:list
       (common-lisp:cons "Elements"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-media-insights-pipeline-configuration-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-media-insights-pipeline-configuration-response
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-update-media-insights-pipeline-configuration-response-"))
   (media-insights-pipeline-configuration common-lisp:nil :type
    (common-lisp:or media-insights-pipeline-configuration common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-media-insights-pipeline-configuration-response
                    'make-update-media-insights-pipeline-configuration-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-media-insights-pipeline-configuration-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-media-insights-pipeline-configuration-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'media-insights-pipeline-configuration))
      (common-lisp:list
       (common-lisp:cons "MediaInsightsPipelineConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-media-insights-pipeline-configuration-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-media-insights-pipeline-status-request (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-update-media-insights-pipeline-status-request-"))
   (identifier (common-lisp:error ":identifier is required") :type
    (common-lisp:or non-empty-string common-lisp:null))
   (update-status (common-lisp:error ":update-status is required") :type
    (common-lisp:or media-pipeline-status-update common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-media-insights-pipeline-status-request
                    'make-update-media-insights-pipeline-status-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-media-insights-pipeline-status-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-media-insights-pipeline-status-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'update-status))
      (common-lisp:list
       (common-lisp:cons "UpdateStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-media-insights-pipeline-status-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-media-pipeline-kinesis-video-stream-pool-request
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-update-media-pipeline-kinesis-video-stream-pool-request-"))
   (identifier (common-lisp:error ":identifier is required") :type
    (common-lisp:or non-empty-string common-lisp:null))
   (stream-configuration common-lisp:nil :type
    (common-lisp:or kinesis-video-stream-configuration-update
                    common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-media-pipeline-kinesis-video-stream-pool-request
                    'make-update-media-pipeline-kinesis-video-stream-pool-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-media-pipeline-kinesis-video-stream-pool-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-media-pipeline-kinesis-video-stream-pool-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'stream-configuration))
      (common-lisp:list
       (common-lisp:cons "StreamConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-media-pipeline-kinesis-video-stream-pool-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-media-pipeline-kinesis-video-stream-pool-response
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-update-media-pipeline-kinesis-video-stream-pool-response-"))
   (kinesis-video-stream-pool-configuration common-lisp:nil :type
    (common-lisp:or kinesis-video-stream-pool-configuration common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-media-pipeline-kinesis-video-stream-pool-response
                    'make-update-media-pipeline-kinesis-video-stream-pool-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-media-pipeline-kinesis-video-stream-pool-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-media-pipeline-kinesis-video-stream-pool-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'kinesis-video-stream-pool-configuration))
      (common-lisp:list
       (common-lisp:cons "KinesisVideoStreamPoolConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-media-pipeline-kinesis-video-stream-pool-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (vertical-layout-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-vertical-layout-configuration-"))
   (tile-order common-lisp:nil :type
    (common-lisp:or tile-order common-lisp:null))
   (tile-position common-lisp:nil :type
    (common-lisp:or vertical-tile-position common-lisp:null))
   (tile-count common-lisp:nil :type
    (common-lisp:or tile-count common-lisp:null))
   (tile-aspect-ratio common-lisp:nil :type
    (common-lisp:or tile-aspect-ratio common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'vertical-layout-configuration
                    'make-vertical-layout-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          vertical-layout-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          vertical-layout-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tile-order))
      (common-lisp:list
       (common-lisp:cons "TileOrder"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tile-position))
      (common-lisp:list
       (common-lisp:cons "TilePosition"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tile-count))
      (common-lisp:list
       (common-lisp:cons "TileCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tile-aspect-ratio))
      (common-lisp:list
       (common-lisp:cons "TileAspectRatio"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          vertical-layout-configuration))
   common-lisp:nil))
(common-lisp:deftype vertical-tile-position () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (video-artifacts-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-video-artifacts-configuration-"))
   (state (common-lisp:error ":state is required") :type
    (common-lisp:or artifacts-state common-lisp:null))
   (mux-type common-lisp:nil :type
    (common-lisp:or video-mux-type common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'video-artifacts-configuration
                    'make-video-artifacts-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          video-artifacts-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          video-artifacts-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "State"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'mux-type))
      (common-lisp:list
       (common-lisp:cons "MuxType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          video-artifacts-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (video-attribute (:copier common-lisp:nil)
      (:conc-name "struct-shape-video-attribute-"))
   (corner-radius common-lisp:nil :type
    (common-lisp:or corner-radius common-lisp:null))
   (border-color common-lisp:nil :type
    (common-lisp:or border-color common-lisp:null))
   (highlight-color common-lisp:nil :type
    (common-lisp:or highlight-color common-lisp:null))
   (border-thickness common-lisp:nil :type
    (common-lisp:or border-thickness common-lisp:null)))
 (common-lisp:export (common-lisp:list 'video-attribute 'make-video-attribute))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input video-attribute))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input video-attribute))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'corner-radius))
      (common-lisp:list
       (common-lisp:cons "CornerRadius"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'border-color))
      (common-lisp:list
       (common-lisp:cons "BorderColor"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'highlight-color))
      (common-lisp:list
       (common-lisp:cons "HighlightColor"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'border-thickness))
      (common-lisp:list
       (common-lisp:cons "BorderThickness"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input video-attribute))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (video-concatenation-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-video-concatenation-configuration-"))
   (state (common-lisp:error ":state is required") :type
    (common-lisp:or artifacts-concatenation-state common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'video-concatenation-configuration
                    'make-video-concatenation-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          video-concatenation-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          video-concatenation-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "State"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          video-concatenation-configuration))
   common-lisp:nil))
(common-lisp:deftype video-mux-type () 'common-lisp:string)
(common-lisp:deftype vocabulary-filter-method () 'common-lisp:string)
(common-lisp:deftype vocabulary-filter-name () 'common-lisp:string)
(common-lisp:deftype vocabulary-filter-names () 'common-lisp:string)
(common-lisp:deftype vocabulary-name () 'common-lisp:string)
(common-lisp:deftype vocabulary-names () 'common-lisp:string)
(common-lisp:deftype voice-analytics-configuration-status ()
  'common-lisp:string)
(common-lisp:deftype voice-analytics-language-code () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (voice-analytics-processor-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-voice-analytics-processor-configuration-"))
   (speaker-search-status common-lisp:nil :type
    (common-lisp:or voice-analytics-configuration-status common-lisp:null))
   (voice-tone-analysis-status common-lisp:nil :type
    (common-lisp:or voice-analytics-configuration-status common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'voice-analytics-processor-configuration
                    'make-voice-analytics-processor-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          voice-analytics-processor-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          voice-analytics-processor-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'speaker-search-status))
      (common-lisp:list
       (common-lisp:cons "SpeakerSearchStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'voice-tone-analysis-status))
      (common-lisp:list
       (common-lisp:cons "VoiceToneAnalysisStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          voice-analytics-processor-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (voice-enhancement-sink-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-voice-enhancement-sink-configuration-"))
   (disabled common-lisp:nil :type (common-lisp:or boolean common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'voice-enhancement-sink-configuration
                    'make-voice-enhancement-sink-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          voice-enhancement-sink-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          voice-enhancement-sink-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'disabled))
      (common-lisp:list
       (common-lisp:cons "Disabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          voice-enhancement-sink-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (voice-tone-analysis-task (:copier common-lisp:nil)
      (:conc-name "struct-shape-voice-tone-analysis-task-"))
   (voice-tone-analysis-task-id common-lisp:nil :type
    (common-lisp:or guid-string common-lisp:null))
   (voice-tone-analysis-task-status common-lisp:nil :type
    (common-lisp:or media-pipeline-task-status common-lisp:null))
   (created-timestamp common-lisp:nil :type
    (common-lisp:or iso8601timestamp common-lisp:null))
   (updated-timestamp common-lisp:nil :type
    (common-lisp:or iso8601timestamp common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'voice-tone-analysis-task 'make-voice-tone-analysis-task))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          voice-tone-analysis-task))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          voice-tone-analysis-task))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'voice-tone-analysis-task-id))
      (common-lisp:list
       (common-lisp:cons "VoiceToneAnalysisTaskId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'voice-tone-analysis-task-status))
      (common-lisp:list
       (common-lisp:cons "VoiceToneAnalysisTaskStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-timestamp))
      (common-lisp:list
       (common-lisp:cons "CreatedTimestamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'updated-timestamp))
      (common-lisp:list
       (common-lisp:cons "UpdatedTimestamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          voice-tone-analysis-task))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defun create-media-capture-pipeline
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key source-type source-arn sink-type sink-arn
                     client-request-token chime-sdk-meeting-configuration tags)
   (common-lisp:declare
    (common-lisp:ignorable source-type source-arn sink-type sink-arn
     client-request-token chime-sdk-meeting-configuration tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-create-media-capture-pipeline-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'chime-sdk-media-pipelines-request aws-sdk/generator/operation::input
        "POST" "/sdk-media-capture-pipelines" "CreateMediaCapturePipeline"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-media-capture-pipeline))
(common-lisp:progn
 (common-lisp:defun create-media-concatenation-pipeline
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key sources sinks client-request-token tags)
   (common-lisp:declare
    (common-lisp:ignorable sources sinks client-request-token tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-create-media-concatenation-pipeline-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'chime-sdk-media-pipelines-request aws-sdk/generator/operation::input
        "POST" "/sdk-media-concatenation-pipelines"
        "CreateMediaConcatenationPipeline"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-media-concatenation-pipeline))
(common-lisp:progn
 (common-lisp:defun create-media-insights-pipeline
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key media-insights-pipeline-configuration-arn
                     kinesis-video-stream-source-runtime-configuration
                     media-insights-runtime-metadata
                     kinesis-video-stream-recording-source-runtime-configuration
                     s3recording-sink-runtime-configuration tags
                     client-request-token)
   (common-lisp:declare
    (common-lisp:ignorable media-insights-pipeline-configuration-arn
     kinesis-video-stream-source-runtime-configuration
     media-insights-runtime-metadata
     kinesis-video-stream-recording-source-runtime-configuration
     s3recording-sink-runtime-configuration tags client-request-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-create-media-insights-pipeline-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'chime-sdk-media-pipelines-request aws-sdk/generator/operation::input
        "POST" "/media-insights-pipelines" "CreateMediaInsightsPipeline"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-media-insights-pipeline))
(common-lisp:progn
 (common-lisp:defun create-media-insights-pipeline-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key
                     media-insights-pipeline-configuration-name
                     resource-access-role-arn real-time-alert-configuration
                     elements tags client-request-token)
   (common-lisp:declare
    (common-lisp:ignorable media-insights-pipeline-configuration-name
     resource-access-role-arn real-time-alert-configuration elements tags
     client-request-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-create-media-insights-pipeline-configuration-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'chime-sdk-media-pipelines-request aws-sdk/generator/operation::input
        "POST" "/media-insights-pipeline-configurations"
        "CreateMediaInsightsPipelineConfiguration"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-media-insights-pipeline-configuration))
(common-lisp:progn
 (common-lisp:defun create-media-live-connector-pipeline
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key sources sinks client-request-token tags)
   (common-lisp:declare
    (common-lisp:ignorable sources sinks client-request-token tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-create-media-live-connector-pipeline-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'chime-sdk-media-pipelines-request aws-sdk/generator/operation::input
        "POST" "/sdk-media-live-connector-pipelines"
        "CreateMediaLiveConnectorPipeline"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-media-live-connector-pipeline))
(common-lisp:progn
 (common-lisp:defun create-media-pipeline-kinesis-video-stream-pool
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key stream-configuration pool-name
                     client-request-token tags)
   (common-lisp:declare
    (common-lisp:ignorable stream-configuration pool-name client-request-token
     tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-create-media-pipeline-kinesis-video-stream-pool-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'chime-sdk-media-pipelines-request aws-sdk/generator/operation::input
        "POST" "/media-pipeline-kinesis-video-stream-pools"
        "CreateMediaPipelineKinesisVideoStreamPool"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-media-pipeline-kinesis-video-stream-pool))
(common-lisp:progn
 (common-lisp:defun create-media-stream-pipeline
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key sources sinks client-request-token tags)
   (common-lisp:declare
    (common-lisp:ignorable sources sinks client-request-token tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-create-media-stream-pipeline-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'chime-sdk-media-pipelines-request aws-sdk/generator/operation::input
        "POST" "/sdk-media-stream-pipelines" "CreateMediaStreamPipeline"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-media-stream-pipeline))
(common-lisp:progn
 (common-lisp:defun delete-media-capture-pipeline
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key media-pipeline-id)
   (common-lisp:declare (common-lisp:ignorable media-pipeline-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-delete-media-capture-pipeline-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'chime-sdk-media-pipelines-request aws-sdk/generator/operation::input
        "DELETE"
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil "/sdk-media-capture-pipelines/~A"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'media-pipeline-id))))
        "DeleteMediaCapturePipeline"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-media-capture-pipeline))
(common-lisp:progn
 (common-lisp:defun delete-media-insights-pipeline-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key identifier)
   (common-lisp:declare (common-lisp:ignorable identifier))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-delete-media-insights-pipeline-configuration-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'chime-sdk-media-pipelines-request aws-sdk/generator/operation::input
        "DELETE"
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil
                              "/media-insights-pipeline-configurations/~A"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'identifier))))
        "DeleteMediaInsightsPipelineConfiguration"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-media-insights-pipeline-configuration))
(common-lisp:progn
 (common-lisp:defun delete-media-pipeline
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key media-pipeline-id)
   (common-lisp:declare (common-lisp:ignorable media-pipeline-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-media-pipeline-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'chime-sdk-media-pipelines-request aws-sdk/generator/operation::input
        "DELETE"
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil "/sdk-media-pipelines/~A"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'media-pipeline-id))))
        "DeleteMediaPipeline"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-media-pipeline))
(common-lisp:progn
 (common-lisp:defun delete-media-pipeline-kinesis-video-stream-pool
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key identifier)
   (common-lisp:declare (common-lisp:ignorable identifier))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-delete-media-pipeline-kinesis-video-stream-pool-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'chime-sdk-media-pipelines-request aws-sdk/generator/operation::input
        "DELETE"
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil
                              "/media-pipeline-kinesis-video-stream-pools/~A"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'identifier))))
        "DeleteMediaPipelineKinesisVideoStreamPool"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-media-pipeline-kinesis-video-stream-pool))
(common-lisp:progn
 (common-lisp:defun get-media-capture-pipeline
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key media-pipeline-id)
   (common-lisp:declare (common-lisp:ignorable media-pipeline-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-get-media-capture-pipeline-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'chime-sdk-media-pipelines-request aws-sdk/generator/operation::input
        "GET"
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil "/sdk-media-capture-pipelines/~A"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'media-pipeline-id))))
        "GetMediaCapturePipeline"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-media-capture-pipeline))
(common-lisp:progn
 (common-lisp:defun get-media-insights-pipeline-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key identifier)
   (common-lisp:declare (common-lisp:ignorable identifier))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-get-media-insights-pipeline-configuration-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'chime-sdk-media-pipelines-request aws-sdk/generator/operation::input
        "GET"
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil
                              "/media-insights-pipeline-configurations/~A"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'identifier))))
        "GetMediaInsightsPipelineConfiguration"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-media-insights-pipeline-configuration))
(common-lisp:progn
 (common-lisp:defun get-media-pipeline
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key media-pipeline-id)
   (common-lisp:declare (common-lisp:ignorable media-pipeline-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-media-pipeline-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'chime-sdk-media-pipelines-request aws-sdk/generator/operation::input
        "GET"
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil "/sdk-media-pipelines/~A"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'media-pipeline-id))))
        "GetMediaPipeline"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-media-pipeline))
(common-lisp:progn
 (common-lisp:defun get-media-pipeline-kinesis-video-stream-pool
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key identifier)
   (common-lisp:declare (common-lisp:ignorable identifier))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-get-media-pipeline-kinesis-video-stream-pool-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'chime-sdk-media-pipelines-request aws-sdk/generator/operation::input
        "GET"
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil
                              "/media-pipeline-kinesis-video-stream-pools/~A"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'identifier))))
        "GetMediaPipelineKinesisVideoStreamPool"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-media-pipeline-kinesis-video-stream-pool))
(common-lisp:progn
 (common-lisp:defun get-speaker-search-task
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key identifier speaker-search-task-id)
   (common-lisp:declare
    (common-lisp:ignorable identifier speaker-search-task-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-speaker-search-task-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'chime-sdk-media-pipelines-request aws-sdk/generator/operation::input
        "GET"
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil
                              "/media-insights-pipelines/~A/speaker-search-tasks/~A"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'identifier))
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'speaker-search-task-id))))
        "GetSpeakerSearchTask"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-speaker-search-task))
(common-lisp:progn
 (common-lisp:defun get-voice-tone-analysis-task
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key identifier voice-tone-analysis-task-id)
   (common-lisp:declare
    (common-lisp:ignorable identifier voice-tone-analysis-task-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-get-voice-tone-analysis-task-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'chime-sdk-media-pipelines-request aws-sdk/generator/operation::input
        "GET"
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil
                              "/media-insights-pipelines/~A/voice-tone-analysis-tasks/~A"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'identifier))
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'voice-tone-analysis-task-id))))
        "GetVoiceToneAnalysisTask"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-voice-tone-analysis-task))
(common-lisp:progn
 (common-lisp:defun list-media-capture-pipelines
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key next-token max-results)
   (common-lisp:declare (common-lisp:ignorable next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-media-capture-pipelines-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'chime-sdk-media-pipelines-request aws-sdk/generator/operation::input
        "GET" "/sdk-media-capture-pipelines" "ListMediaCapturePipelines"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-media-capture-pipelines))
(common-lisp:progn
 (common-lisp:defun list-media-insights-pipeline-configurations
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key next-token max-results)
   (common-lisp:declare (common-lisp:ignorable next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-media-insights-pipeline-configurations-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'chime-sdk-media-pipelines-request aws-sdk/generator/operation::input
        "GET" "/media-insights-pipeline-configurations"
        "ListMediaInsightsPipelineConfigurations"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-media-insights-pipeline-configurations))
(common-lisp:progn
 (common-lisp:defun list-media-pipeline-kinesis-video-stream-pools
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key next-token max-results)
   (common-lisp:declare (common-lisp:ignorable next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-media-pipeline-kinesis-video-stream-pools-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'chime-sdk-media-pipelines-request aws-sdk/generator/operation::input
        "GET" "/media-pipeline-kinesis-video-stream-pools"
        "ListMediaPipelineKinesisVideoStreamPools"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-media-pipeline-kinesis-video-stream-pools))
(common-lisp:progn
 (common-lisp:defun list-media-pipelines
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key next-token max-results)
   (common-lisp:declare (common-lisp:ignorable next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-media-pipelines-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'chime-sdk-media-pipelines-request aws-sdk/generator/operation::input
        "GET" "/sdk-media-pipelines" "ListMediaPipelines"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-media-pipelines))
(common-lisp:progn
 (common-lisp:defun list-tags-for-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn)
   (common-lisp:declare (common-lisp:ignorable resource-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-tags-for-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'chime-sdk-media-pipelines-request aws-sdk/generator/operation::input
        "GET" "/tags" "ListTagsForResource"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-tags-for-resource))
(common-lisp:progn
 (common-lisp:defun start-speaker-search-task
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key identifier voice-profile-domain-arn
                     kinesis-video-stream-source-task-configuration
                     client-request-token)
   (common-lisp:declare
    (common-lisp:ignorable identifier voice-profile-domain-arn
     kinesis-video-stream-source-task-configuration client-request-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-start-speaker-search-task-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'chime-sdk-media-pipelines-request aws-sdk/generator/operation::input
        "POST"
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil
                              "/media-insights-pipelines/~A/speaker-search-tasks?operation=start"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'identifier))))
        "StartSpeakerSearchTask"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'start-speaker-search-task))
(common-lisp:progn
 (common-lisp:defun start-voice-tone-analysis-task
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key identifier language-code
                     kinesis-video-stream-source-task-configuration
                     client-request-token)
   (common-lisp:declare
    (common-lisp:ignorable identifier language-code
     kinesis-video-stream-source-task-configuration client-request-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-start-voice-tone-analysis-task-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'chime-sdk-media-pipelines-request aws-sdk/generator/operation::input
        "POST"
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil
                              "/media-insights-pipelines/~A/voice-tone-analysis-tasks?operation=start"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'identifier))))
        "StartVoiceToneAnalysisTask"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'start-voice-tone-analysis-task))
(common-lisp:progn
 (common-lisp:defun stop-speaker-search-task
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key identifier speaker-search-task-id)
   (common-lisp:declare
    (common-lisp:ignorable identifier speaker-search-task-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-stop-speaker-search-task-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'chime-sdk-media-pipelines-request aws-sdk/generator/operation::input
        "POST"
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil
                              "/media-insights-pipelines/~A/speaker-search-tasks/~A?operation=stop"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'identifier))
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'speaker-search-task-id))))
        "StopSpeakerSearchTask"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'stop-speaker-search-task))
(common-lisp:progn
 (common-lisp:defun stop-voice-tone-analysis-task
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key identifier voice-tone-analysis-task-id)
   (common-lisp:declare
    (common-lisp:ignorable identifier voice-tone-analysis-task-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-stop-voice-tone-analysis-task-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'chime-sdk-media-pipelines-request aws-sdk/generator/operation::input
        "POST"
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil
                              "/media-insights-pipelines/~A/voice-tone-analysis-tasks/~A?operation=stop"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'identifier))
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'voice-tone-analysis-task-id))))
        "StopVoiceToneAnalysisTask"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'stop-voice-tone-analysis-task))
(common-lisp:progn
 (common-lisp:defun tag-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn tags)
   (common-lisp:declare (common-lisp:ignorable resource-arn tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-tag-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'chime-sdk-media-pipelines-request aws-sdk/generator/operation::input
        "POST" "/tags?operation=tag-resource" "TagResource"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'tag-resource))
(common-lisp:progn
 (common-lisp:defun untag-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn tag-keys)
   (common-lisp:declare (common-lisp:ignorable resource-arn tag-keys))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-untag-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'chime-sdk-media-pipelines-request aws-sdk/generator/operation::input
        "POST" "/tags?operation=untag-resource" "UntagResource"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'untag-resource))
(common-lisp:progn
 (common-lisp:defun update-media-insights-pipeline-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key identifier resource-access-role-arn
                     real-time-alert-configuration elements)
   (common-lisp:declare
    (common-lisp:ignorable identifier resource-access-role-arn
     real-time-alert-configuration elements))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-update-media-insights-pipeline-configuration-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'chime-sdk-media-pipelines-request aws-sdk/generator/operation::input
        "PUT"
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil
                              "/media-insights-pipeline-configurations/~A"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'identifier))))
        "UpdateMediaInsightsPipelineConfiguration"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-media-insights-pipeline-configuration))
(common-lisp:progn
 (common-lisp:defun update-media-insights-pipeline-status
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key identifier update-status)
   (common-lisp:declare (common-lisp:ignorable identifier update-status))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-update-media-insights-pipeline-status-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'chime-sdk-media-pipelines-request aws-sdk/generator/operation::input
        "PUT"
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil
                              "/media-insights-pipeline-status/~A"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'identifier))))
        "UpdateMediaInsightsPipelineStatus"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-media-insights-pipeline-status))
(common-lisp:progn
 (common-lisp:defun update-media-pipeline-kinesis-video-stream-pool
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key identifier stream-configuration)
   (common-lisp:declare
    (common-lisp:ignorable identifier stream-configuration))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-update-media-pipeline-kinesis-video-stream-pool-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'chime-sdk-media-pipelines-request aws-sdk/generator/operation::input
        "PUT"
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil
                              "/media-pipeline-kinesis-video-stream-pools/~A"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'identifier))))
        "UpdateMediaPipelineKinesisVideoStreamPool"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-media-pipeline-kinesis-video-stream-pool))
