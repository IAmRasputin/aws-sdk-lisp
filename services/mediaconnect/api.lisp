;; DO NOT EDIT: File is generated by AWS-SDK/GENERATOR.

(common-lisp:defpackage #:aws-sdk/services/mediaconnect/api
  (:use)
  (:nicknames #:aws/mediaconnect)
  (:import-from #:aws-sdk/generator/shape)
  (:import-from #:aws-sdk/generator/operation)
  (:import-from #:aws-sdk/api)
  (:import-from #:aws-sdk/request)
  (:import-from #:aws-sdk/error))
(common-lisp:in-package #:aws-sdk/services/mediaconnect/api)
(common-lisp:progn
 (common-lisp:defclass mediaconnect-request (aws-sdk/request:request)
                       common-lisp:nil
                       (:default-initargs :service "mediaconnect" :protocol
                        :rest-json))
 (common-lisp:export 'mediaconnect-request))
(common-lisp:progn
 (common-lisp:define-condition mediaconnect-error
     (aws-sdk/error:aws-error)
     common-lisp:nil)
 (common-lisp:export 'mediaconnect-error))
(common-lisp:defvar *error-map*
  '(("AddFlowOutputs420Exception" . add-flow-outputs420exception)
    ("BadRequestException" . bad-request-exception)
    ("ConflictException" . conflict-exception)
    ("CreateBridge420Exception" . create-bridge420exception)
    ("CreateFlow420Exception" . create-flow420exception)
    ("CreateGateway420Exception" . create-gateway420exception)
    ("ForbiddenException" . forbidden-exception)
    ("GrantFlowEntitlements420Exception" . grant-flow-entitlements420exception)
    ("InternalServerErrorException" . internal-server-error-exception)
    ("NotFoundException" . not-found-exception)
    ("ServiceUnavailableException" . service-unavailable-exception)
    ("TooManyRequestsException" . too-many-requests-exception)))
(common-lisp:progn
 (common-lisp:defclass add-bridge-flow-source-request common-lisp:nil
                       ((name :initarg :name :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %add-bridge-flow-source-request-name :initform
                         (common-lisp:error ":name is required"))
                        (flow-vpc-interface-attachment :initarg
                         :flow-vpc-interface-attachment :type
                         (common-lisp:or vpc-interface-attachment
                                         common-lisp:null)
                         :accessor
                         %add-bridge-flow-source-request-flow-vpc-interface-attachment
                         :initform common-lisp:nil)
                        (flow-arn :initarg :flow-arn :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %add-bridge-flow-source-request-flow-arn :initform
                         (common-lisp:error ":flow-arn is required"))))
 (common-lisp:export
  (common-lisp:list 'add-bridge-flow-source-request
                    'make-add-bridge-flow-source-request))
 (common-lisp:defun make-add-bridge-flow-source-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key name flow-vpc-interface-attachment
                     flow-arn)
   (common-lisp:apply #'common-lisp:make-instance
                      'add-bridge-flow-source-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          add-bridge-flow-source-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          add-bridge-flow-source-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'flow-arn))
      (common-lisp:list
       (common-lisp:cons "FlowArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'flow-vpc-interface-attachment))
      (common-lisp:list
       (common-lisp:cons "FlowVpcInterfaceAttachment"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          add-bridge-flow-source-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass add-bridge-network-output-request common-lisp:nil
                       ((ttl :initarg :ttl :type
                         (common-lisp:or |__integer| common-lisp:null)
                         :accessor %add-bridge-network-output-request-ttl
                         :initform (common-lisp:error ":ttl is required"))
                        (protocol :initarg :protocol :type
                         (common-lisp:or protocol common-lisp:null) :accessor
                         %add-bridge-network-output-request-protocol :initform
                         (common-lisp:error ":protocol is required"))
                        (port :initarg :port :type
                         (common-lisp:or |__integer| common-lisp:null)
                         :accessor %add-bridge-network-output-request-port
                         :initform (common-lisp:error ":port is required"))
                        (network-name :initarg :network-name :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %add-bridge-network-output-request-network-name
                         :initform
                         (common-lisp:error ":network-name is required"))
                        (name :initarg :name :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %add-bridge-network-output-request-name :initform
                         (common-lisp:error ":name is required"))
                        (ip-address :initarg :ip-address :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %add-bridge-network-output-request-ip-address
                         :initform
                         (common-lisp:error ":ip-address is required"))))
 (common-lisp:export
  (common-lisp:list 'add-bridge-network-output-request
                    'make-add-bridge-network-output-request))
 (common-lisp:defun make-add-bridge-network-output-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key ttl protocol port network-name name
                     ip-address)
   (common-lisp:apply #'common-lisp:make-instance
                      'add-bridge-network-output-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          add-bridge-network-output-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          add-bridge-network-output-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ip-address))
      (common-lisp:list
       (common-lisp:cons "IpAddress"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'network-name))
      (common-lisp:list
       (common-lisp:cons "NetworkName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'port))
      (common-lisp:list
       (common-lisp:cons "Port"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'protocol))
      (common-lisp:list
       (common-lisp:cons "Protocol"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ttl))
      (common-lisp:list
       (common-lisp:cons "Ttl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          add-bridge-network-output-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass add-bridge-network-source-request common-lisp:nil
                       ((protocol :initarg :protocol :type
                         (common-lisp:or protocol common-lisp:null) :accessor
                         %add-bridge-network-source-request-protocol :initform
                         (common-lisp:error ":protocol is required"))
                        (port :initarg :port :type
                         (common-lisp:or |__integer| common-lisp:null)
                         :accessor %add-bridge-network-source-request-port
                         :initform (common-lisp:error ":port is required"))
                        (network-name :initarg :network-name :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %add-bridge-network-source-request-network-name
                         :initform
                         (common-lisp:error ":network-name is required"))
                        (name :initarg :name :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %add-bridge-network-source-request-name :initform
                         (common-lisp:error ":name is required"))
                        (multicast-ip :initarg :multicast-ip :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %add-bridge-network-source-request-multicast-ip
                         :initform
                         (common-lisp:error ":multicast-ip is required"))))
 (common-lisp:export
  (common-lisp:list 'add-bridge-network-source-request
                    'make-add-bridge-network-source-request))
 (common-lisp:defun make-add-bridge-network-source-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key protocol port network-name name
                     multicast-ip)
   (common-lisp:apply #'common-lisp:make-instance
                      'add-bridge-network-source-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          add-bridge-network-source-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          add-bridge-network-source-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'multicast-ip))
      (common-lisp:list
       (common-lisp:cons "MulticastIp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'network-name))
      (common-lisp:list
       (common-lisp:cons "NetworkName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'port))
      (common-lisp:list
       (common-lisp:cons "Port"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'protocol))
      (common-lisp:list
       (common-lisp:cons "Protocol"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          add-bridge-network-source-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass add-bridge-output-request common-lisp:nil
                       ((network-output :initarg :network-output :type
                         (common-lisp:or add-bridge-network-output-request
                                         common-lisp:null)
                         :accessor %add-bridge-output-request-network-output
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'add-bridge-output-request
                    'make-add-bridge-output-request))
 (common-lisp:defun make-add-bridge-output-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key network-output)
   (common-lisp:apply #'common-lisp:make-instance 'add-bridge-output-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          add-bridge-output-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          add-bridge-output-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'network-output))
      (common-lisp:list
       (common-lisp:cons "NetworkOutput"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          add-bridge-output-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass add-bridge-outputs-request common-lisp:nil
                       ((outputs :initarg :outputs :type
                         (common-lisp:or |__listOfAddBridgeOutputRequest|
                                         common-lisp:null)
                         :accessor %add-bridge-outputs-request-outputs
                         :initform (common-lisp:error ":outputs is required"))
                        (bridge-arn :initarg :bridge-arn :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %add-bridge-outputs-request-bridge-arn :initform
                         (common-lisp:error ":bridge-arn is required"))))
 (common-lisp:export
  (common-lisp:list 'add-bridge-outputs-request
                    'make-add-bridge-outputs-request))
 (common-lisp:defun make-add-bridge-outputs-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key outputs bridge-arn)
   (common-lisp:apply #'common-lisp:make-instance 'add-bridge-outputs-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          add-bridge-outputs-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          add-bridge-outputs-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'outputs))
      (common-lisp:list
       (common-lisp:cons "Outputs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          add-bridge-outputs-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass add-bridge-outputs-response common-lisp:nil
                       ((outputs :initarg :outputs :type
                         (common-lisp:or |__listOfBridgeOutput|
                                         common-lisp:null)
                         :accessor %add-bridge-outputs-response-outputs
                         :initform common-lisp:nil)
                        (bridge-arn :initarg :bridge-arn :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %add-bridge-outputs-response-bridge-arn :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'add-bridge-outputs-response
                    'make-add-bridge-outputs-response))
 (common-lisp:defun make-add-bridge-outputs-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key outputs bridge-arn)
   (common-lisp:apply #'common-lisp:make-instance 'add-bridge-outputs-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          add-bridge-outputs-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          add-bridge-outputs-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bridge-arn))
      (common-lisp:list
       (common-lisp:cons "BridgeArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'outputs))
      (common-lisp:list
       (common-lisp:cons "Outputs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          add-bridge-outputs-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass add-bridge-source-request common-lisp:nil
                       ((network-source :initarg :network-source :type
                         (common-lisp:or add-bridge-network-source-request
                                         common-lisp:null)
                         :accessor %add-bridge-source-request-network-source
                         :initform common-lisp:nil)
                        (flow-source :initarg :flow-source :type
                         (common-lisp:or add-bridge-flow-source-request
                                         common-lisp:null)
                         :accessor %add-bridge-source-request-flow-source
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'add-bridge-source-request
                    'make-add-bridge-source-request))
 (common-lisp:defun make-add-bridge-source-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key network-source flow-source)
   (common-lisp:apply #'common-lisp:make-instance 'add-bridge-source-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          add-bridge-source-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          add-bridge-source-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'flow-source))
      (common-lisp:list
       (common-lisp:cons "FlowSource"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'network-source))
      (common-lisp:list
       (common-lisp:cons "NetworkSource"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          add-bridge-source-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass add-bridge-sources-request common-lisp:nil
                       ((sources :initarg :sources :type
                         (common-lisp:or |__listOfAddBridgeSourceRequest|
                                         common-lisp:null)
                         :accessor %add-bridge-sources-request-sources
                         :initform (common-lisp:error ":sources is required"))
                        (bridge-arn :initarg :bridge-arn :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %add-bridge-sources-request-bridge-arn :initform
                         (common-lisp:error ":bridge-arn is required"))))
 (common-lisp:export
  (common-lisp:list 'add-bridge-sources-request
                    'make-add-bridge-sources-request))
 (common-lisp:defun make-add-bridge-sources-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key sources bridge-arn)
   (common-lisp:apply #'common-lisp:make-instance 'add-bridge-sources-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          add-bridge-sources-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          add-bridge-sources-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sources))
      (common-lisp:list
       (common-lisp:cons "Sources"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          add-bridge-sources-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass add-bridge-sources-response common-lisp:nil
                       ((sources :initarg :sources :type
                         (common-lisp:or |__listOfBridgeSource|
                                         common-lisp:null)
                         :accessor %add-bridge-sources-response-sources
                         :initform common-lisp:nil)
                        (bridge-arn :initarg :bridge-arn :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %add-bridge-sources-response-bridge-arn :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'add-bridge-sources-response
                    'make-add-bridge-sources-response))
 (common-lisp:defun make-add-bridge-sources-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key sources bridge-arn)
   (common-lisp:apply #'common-lisp:make-instance 'add-bridge-sources-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          add-bridge-sources-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          add-bridge-sources-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bridge-arn))
      (common-lisp:list
       (common-lisp:cons "BridgeArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sources))
      (common-lisp:list
       (common-lisp:cons "Sources"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          add-bridge-sources-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass add-egress-gateway-bridge-request common-lisp:nil
                       ((max-bitrate :initarg :max-bitrate :type
                         (common-lisp:or |__integer| common-lisp:null)
                         :accessor
                         %add-egress-gateway-bridge-request-max-bitrate
                         :initform
                         (common-lisp:error ":max-bitrate is required"))))
 (common-lisp:export
  (common-lisp:list 'add-egress-gateway-bridge-request
                    'make-add-egress-gateway-bridge-request))
 (common-lisp:defun make-add-egress-gateway-bridge-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key max-bitrate)
   (common-lisp:apply #'common-lisp:make-instance
                      'add-egress-gateway-bridge-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          add-egress-gateway-bridge-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          add-egress-gateway-bridge-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-bitrate))
      (common-lisp:list
       (common-lisp:cons "MaxBitrate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          add-egress-gateway-bridge-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass add-flow-media-streams-request common-lisp:nil
                       ((media-streams :initarg :media-streams :type
                         (common-lisp:or |__listOfAddMediaStreamRequest|
                                         common-lisp:null)
                         :accessor
                         %add-flow-media-streams-request-media-streams
                         :initform
                         (common-lisp:error ":media-streams is required"))
                        (flow-arn :initarg :flow-arn :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %add-flow-media-streams-request-flow-arn :initform
                         (common-lisp:error ":flow-arn is required"))))
 (common-lisp:export
  (common-lisp:list 'add-flow-media-streams-request
                    'make-add-flow-media-streams-request))
 (common-lisp:defun make-add-flow-media-streams-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key media-streams flow-arn)
   (common-lisp:apply #'common-lisp:make-instance
                      'add-flow-media-streams-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          add-flow-media-streams-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          add-flow-media-streams-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'media-streams))
      (common-lisp:list
       (common-lisp:cons "MediaStreams"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          add-flow-media-streams-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass add-flow-media-streams-response common-lisp:nil
                       ((media-streams :initarg :media-streams :type
                         (common-lisp:or |__listOfMediaStream|
                                         common-lisp:null)
                         :accessor
                         %add-flow-media-streams-response-media-streams
                         :initform common-lisp:nil)
                        (flow-arn :initarg :flow-arn :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %add-flow-media-streams-response-flow-arn :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'add-flow-media-streams-response
                    'make-add-flow-media-streams-response))
 (common-lisp:defun make-add-flow-media-streams-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key media-streams flow-arn)
   (common-lisp:apply #'common-lisp:make-instance
                      'add-flow-media-streams-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          add-flow-media-streams-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          add-flow-media-streams-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'flow-arn))
      (common-lisp:list
       (common-lisp:cons "FlowArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'media-streams))
      (common-lisp:list
       (common-lisp:cons "MediaStreams"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          add-flow-media-streams-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition add-flow-outputs420exception
     (mediaconnect-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       add-flow-outputs420exception-message)))
 (common-lisp:export
  (common-lisp:list 'add-flow-outputs420exception
                    'add-flow-outputs420exception-message)))
(common-lisp:progn
 (common-lisp:defclass add-flow-outputs-request common-lisp:nil
                       ((outputs :initarg :outputs :type
                         (common-lisp:or |__listOfAddOutputRequest|
                                         common-lisp:null)
                         :accessor %add-flow-outputs-request-outputs :initform
                         (common-lisp:error ":outputs is required"))
                        (flow-arn :initarg :flow-arn :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %add-flow-outputs-request-flow-arn :initform
                         (common-lisp:error ":flow-arn is required"))))
 (common-lisp:export
  (common-lisp:list 'add-flow-outputs-request 'make-add-flow-outputs-request))
 (common-lisp:defun make-add-flow-outputs-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key outputs flow-arn)
   (common-lisp:apply #'common-lisp:make-instance 'add-flow-outputs-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          add-flow-outputs-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          add-flow-outputs-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'outputs))
      (common-lisp:list
       (common-lisp:cons "Outputs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          add-flow-outputs-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass add-flow-outputs-response common-lisp:nil
                       ((outputs :initarg :outputs :type
                         (common-lisp:or |__listOfOutput| common-lisp:null)
                         :accessor %add-flow-outputs-response-outputs :initform
                         common-lisp:nil)
                        (flow-arn :initarg :flow-arn :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %add-flow-outputs-response-flow-arn :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'add-flow-outputs-response
                    'make-add-flow-outputs-response))
 (common-lisp:defun make-add-flow-outputs-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key outputs flow-arn)
   (common-lisp:apply #'common-lisp:make-instance 'add-flow-outputs-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          add-flow-outputs-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          add-flow-outputs-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'flow-arn))
      (common-lisp:list
       (common-lisp:cons "FlowArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'outputs))
      (common-lisp:list
       (common-lisp:cons "Outputs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          add-flow-outputs-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass add-flow-sources-request common-lisp:nil
                       ((sources :initarg :sources :type
                         (common-lisp:or |__listOfSetSourceRequest|
                                         common-lisp:null)
                         :accessor %add-flow-sources-request-sources :initform
                         (common-lisp:error ":sources is required"))
                        (flow-arn :initarg :flow-arn :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %add-flow-sources-request-flow-arn :initform
                         (common-lisp:error ":flow-arn is required"))))
 (common-lisp:export
  (common-lisp:list 'add-flow-sources-request 'make-add-flow-sources-request))
 (common-lisp:defun make-add-flow-sources-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key sources flow-arn)
   (common-lisp:apply #'common-lisp:make-instance 'add-flow-sources-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          add-flow-sources-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          add-flow-sources-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sources))
      (common-lisp:list
       (common-lisp:cons "Sources"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          add-flow-sources-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass add-flow-sources-response common-lisp:nil
                       ((sources :initarg :sources :type
                         (common-lisp:or |__listOfSource| common-lisp:null)
                         :accessor %add-flow-sources-response-sources :initform
                         common-lisp:nil)
                        (flow-arn :initarg :flow-arn :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %add-flow-sources-response-flow-arn :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'add-flow-sources-response
                    'make-add-flow-sources-response))
 (common-lisp:defun make-add-flow-sources-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key sources flow-arn)
   (common-lisp:apply #'common-lisp:make-instance 'add-flow-sources-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          add-flow-sources-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          add-flow-sources-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'flow-arn))
      (common-lisp:list
       (common-lisp:cons "FlowArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sources))
      (common-lisp:list
       (common-lisp:cons "Sources"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          add-flow-sources-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass add-flow-vpc-interfaces-request common-lisp:nil
                       ((vpc-interfaces :initarg :vpc-interfaces :type
                         (common-lisp:or |__listOfVpcInterfaceRequest|
                                         common-lisp:null)
                         :accessor
                         %add-flow-vpc-interfaces-request-vpc-interfaces
                         :initform
                         (common-lisp:error ":vpc-interfaces is required"))
                        (flow-arn :initarg :flow-arn :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %add-flow-vpc-interfaces-request-flow-arn :initform
                         (common-lisp:error ":flow-arn is required"))))
 (common-lisp:export
  (common-lisp:list 'add-flow-vpc-interfaces-request
                    'make-add-flow-vpc-interfaces-request))
 (common-lisp:defun make-add-flow-vpc-interfaces-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key vpc-interfaces flow-arn)
   (common-lisp:apply #'common-lisp:make-instance
                      'add-flow-vpc-interfaces-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          add-flow-vpc-interfaces-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          add-flow-vpc-interfaces-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpc-interfaces))
      (common-lisp:list
       (common-lisp:cons "VpcInterfaces"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          add-flow-vpc-interfaces-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass add-flow-vpc-interfaces-response common-lisp:nil
                       ((vpc-interfaces :initarg :vpc-interfaces :type
                         (common-lisp:or |__listOfVpcInterface|
                                         common-lisp:null)
                         :accessor
                         %add-flow-vpc-interfaces-response-vpc-interfaces
                         :initform common-lisp:nil)
                        (flow-arn :initarg :flow-arn :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %add-flow-vpc-interfaces-response-flow-arn :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'add-flow-vpc-interfaces-response
                    'make-add-flow-vpc-interfaces-response))
 (common-lisp:defun make-add-flow-vpc-interfaces-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key vpc-interfaces flow-arn)
   (common-lisp:apply #'common-lisp:make-instance
                      'add-flow-vpc-interfaces-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          add-flow-vpc-interfaces-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          add-flow-vpc-interfaces-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'flow-arn))
      (common-lisp:list
       (common-lisp:cons "FlowArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpc-interfaces))
      (common-lisp:list
       (common-lisp:cons "VpcInterfaces"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          add-flow-vpc-interfaces-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass add-ingress-gateway-bridge-request common-lisp:nil
                       ((max-outputs :initarg :max-outputs :type
                         (common-lisp:or |__integer| common-lisp:null)
                         :accessor
                         %add-ingress-gateway-bridge-request-max-outputs
                         :initform
                         (common-lisp:error ":max-outputs is required"))
                        (max-bitrate :initarg :max-bitrate :type
                         (common-lisp:or |__integer| common-lisp:null)
                         :accessor
                         %add-ingress-gateway-bridge-request-max-bitrate
                         :initform
                         (common-lisp:error ":max-bitrate is required"))))
 (common-lisp:export
  (common-lisp:list 'add-ingress-gateway-bridge-request
                    'make-add-ingress-gateway-bridge-request))
 (common-lisp:defun make-add-ingress-gateway-bridge-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key max-outputs max-bitrate)
   (common-lisp:apply #'common-lisp:make-instance
                      'add-ingress-gateway-bridge-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          add-ingress-gateway-bridge-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          add-ingress-gateway-bridge-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-bitrate))
      (common-lisp:list
       (common-lisp:cons "MaxBitrate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-outputs))
      (common-lisp:list
       (common-lisp:cons "MaxOutputs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          add-ingress-gateway-bridge-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass add-maintenance common-lisp:nil
                       ((maintenance-start-hour :initarg
                         :maintenance-start-hour :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %add-maintenance-maintenance-start-hour :initform
                         (common-lisp:error
                          ":maintenance-start-hour is required"))
                        (maintenance-day :initarg :maintenance-day :type
                         (common-lisp:or maintenance-day common-lisp:null)
                         :accessor %add-maintenance-maintenance-day :initform
                         (common-lisp:error ":maintenance-day is required"))))
 (common-lisp:export (common-lisp:list 'add-maintenance 'make-add-maintenance))
 (common-lisp:defun make-add-maintenance
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key maintenance-start-hour maintenance-day)
   (common-lisp:apply #'common-lisp:make-instance 'add-maintenance
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input add-maintenance))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input add-maintenance))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'maintenance-day))
      (common-lisp:list
       (common-lisp:cons "MaintenanceDay"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'maintenance-start-hour))
      (common-lisp:list
       (common-lisp:cons "MaintenanceStartHour"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input add-maintenance))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass add-media-stream-request common-lisp:nil
                       ((video-format :initarg :video-format :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %add-media-stream-request-video-format :initform
                         common-lisp:nil)
                        (media-stream-type :initarg :media-stream-type :type
                         (common-lisp:or media-stream-type common-lisp:null)
                         :accessor %add-media-stream-request-media-stream-type
                         :initform
                         (common-lisp:error ":media-stream-type is required"))
                        (media-stream-name :initarg :media-stream-name :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %add-media-stream-request-media-stream-name :initform
                         (common-lisp:error ":media-stream-name is required"))
                        (media-stream-id :initarg :media-stream-id :type
                         (common-lisp:or |__integer| common-lisp:null)
                         :accessor %add-media-stream-request-media-stream-id
                         :initform
                         (common-lisp:error ":media-stream-id is required"))
                        (description :initarg :description :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %add-media-stream-request-description :initform
                         common-lisp:nil)
                        (clock-rate :initarg :clock-rate :type
                         (common-lisp:or |__integer| common-lisp:null)
                         :accessor %add-media-stream-request-clock-rate
                         :initform common-lisp:nil)
                        (attributes :initarg :attributes :type
                         (common-lisp:or media-stream-attributes-request
                                         common-lisp:null)
                         :accessor %add-media-stream-request-attributes
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'add-media-stream-request 'make-add-media-stream-request))
 (common-lisp:defun make-add-media-stream-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key video-format media-stream-type
                     media-stream-name media-stream-id description clock-rate
                     attributes)
   (common-lisp:apply #'common-lisp:make-instance 'add-media-stream-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          add-media-stream-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          add-media-stream-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'attributes))
      (common-lisp:list
       (common-lisp:cons "Attributes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'clock-rate))
      (common-lisp:list
       (common-lisp:cons "ClockRate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'media-stream-id))
      (common-lisp:list
       (common-lisp:cons "MediaStreamId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'media-stream-name))
      (common-lisp:list
       (common-lisp:cons "MediaStreamName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'media-stream-type))
      (common-lisp:list
       (common-lisp:cons "MediaStreamType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'video-format))
      (common-lisp:list
       (common-lisp:cons "VideoFormat"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          add-media-stream-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass add-output-request common-lisp:nil
                       ((vpc-interface-attachment :initarg
                         :vpc-interface-attachment :type
                         (common-lisp:or vpc-interface-attachment
                                         common-lisp:null)
                         :accessor %add-output-request-vpc-interface-attachment
                         :initform common-lisp:nil)
                        (stream-id :initarg :stream-id :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %add-output-request-stream-id :initform
                         common-lisp:nil)
                        (smoothing-latency :initarg :smoothing-latency :type
                         (common-lisp:or |__integer| common-lisp:null)
                         :accessor %add-output-request-smoothing-latency
                         :initform common-lisp:nil)
                        (sender-control-port :initarg :sender-control-port
                         :type (common-lisp:or |__integer| common-lisp:null)
                         :accessor %add-output-request-sender-control-port
                         :initform common-lisp:nil)
                        (remote-id :initarg :remote-id :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %add-output-request-remote-id :initform
                         common-lisp:nil)
                        (protocol :initarg :protocol :type
                         (common-lisp:or protocol common-lisp:null) :accessor
                         %add-output-request-protocol :initform
                         (common-lisp:error ":protocol is required"))
                        (port :initarg :port :type
                         (common-lisp:or |__integer| common-lisp:null)
                         :accessor %add-output-request-port :initform
                         common-lisp:nil)
                        (name :initarg :name :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %add-output-request-name :initform common-lisp:nil)
                        (min-latency :initarg :min-latency :type
                         (common-lisp:or |__integer| common-lisp:null)
                         :accessor %add-output-request-min-latency :initform
                         common-lisp:nil)
                        (media-stream-output-configurations :initarg
                         :media-stream-output-configurations :type
                         (common-lisp:or
                          |__listOfMediaStreamOutputConfigurationRequest|
                          common-lisp:null)
                         :accessor
                         %add-output-request-media-stream-output-configurations
                         :initform common-lisp:nil)
                        (max-latency :initarg :max-latency :type
                         (common-lisp:or |__integer| common-lisp:null)
                         :accessor %add-output-request-max-latency :initform
                         common-lisp:nil)
                        (encryption :initarg :encryption :type
                         (common-lisp:or encryption common-lisp:null) :accessor
                         %add-output-request-encryption :initform
                         common-lisp:nil)
                        (destination :initarg :destination :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %add-output-request-destination :initform
                         common-lisp:nil)
                        (description :initarg :description :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %add-output-request-description :initform
                         common-lisp:nil)
                        (cidr-allow-list :initarg :cidr-allow-list :type
                         (common-lisp:or |__listOf__string| common-lisp:null)
                         :accessor %add-output-request-cidr-allow-list
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'add-output-request 'make-add-output-request))
 (common-lisp:defun make-add-output-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key vpc-interface-attachment stream-id
                     smoothing-latency sender-control-port remote-id protocol
                     port name min-latency media-stream-output-configurations
                     max-latency encryption destination description
                     cidr-allow-list)
   (common-lisp:apply #'common-lisp:make-instance 'add-output-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input add-output-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input add-output-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cidr-allow-list))
      (common-lisp:list
       (common-lisp:cons "CidrAllowList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'destination))
      (common-lisp:list
       (common-lisp:cons "Destination"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'encryption))
      (common-lisp:list
       (common-lisp:cons "Encryption"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-latency))
      (common-lisp:list
       (common-lisp:cons "MaxLatency"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'media-stream-output-configurations))
      (common-lisp:list
       (common-lisp:cons "MediaStreamOutputConfigurations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'min-latency))
      (common-lisp:list
       (common-lisp:cons "MinLatency"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'port))
      (common-lisp:list
       (common-lisp:cons "Port"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'protocol))
      (common-lisp:list
       (common-lisp:cons "Protocol"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'remote-id))
      (common-lisp:list
       (common-lisp:cons "RemoteId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sender-control-port))
      (common-lisp:list
       (common-lisp:cons "SenderControlPort"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'smoothing-latency))
      (common-lisp:list
       (common-lisp:cons "SmoothingLatency"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stream-id))
      (common-lisp:list
       (common-lisp:cons "StreamId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'vpc-interface-attachment))
      (common-lisp:list
       (common-lisp:cons "VpcInterfaceAttachment"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input add-output-request))
   common-lisp:nil))
(common-lisp:deftype algorithm () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition bad-request-exception
     (mediaconnect-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       bad-request-exception-message)))
 (common-lisp:export
  (common-lisp:list 'bad-request-exception 'bad-request-exception-message)))
(common-lisp:progn
 (common-lisp:defclass bridge common-lisp:nil
                       ((sources :initarg :sources :type
                         (common-lisp:or |__listOfBridgeSource|
                                         common-lisp:null)
                         :accessor %bridge-sources :initform common-lisp:nil)
                        (source-failover-config :initarg
                         :source-failover-config :type
                         (common-lisp:or failover-config common-lisp:null)
                         :accessor %bridge-source-failover-config :initform
                         common-lisp:nil)
                        (placement-arn :initarg :placement-arn :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %bridge-placement-arn :initform
                         (common-lisp:error ":placement-arn is required"))
                        (outputs :initarg :outputs :type
                         (common-lisp:or |__listOfBridgeOutput|
                                         common-lisp:null)
                         :accessor %bridge-outputs :initform common-lisp:nil)
                        (name :initarg :name :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %bridge-name :initform
                         (common-lisp:error ":name is required"))
                        (ingress-gateway-bridge :initarg
                         :ingress-gateway-bridge :type
                         (common-lisp:or ingress-gateway-bridge
                                         common-lisp:null)
                         :accessor %bridge-ingress-gateway-bridge :initform
                         common-lisp:nil)
                        (egress-gateway-bridge :initarg :egress-gateway-bridge
                         :type
                         (common-lisp:or egress-gateway-bridge
                                         common-lisp:null)
                         :accessor %bridge-egress-gateway-bridge :initform
                         common-lisp:nil)
                        (bridge-state :initarg :bridge-state :type
                         (common-lisp:or bridge-state common-lisp:null)
                         :accessor %bridge-bridge-state :initform
                         (common-lisp:error ":bridge-state is required"))
                        (bridge-messages :initarg :bridge-messages :type
                         (common-lisp:or |__listOfMessageDetail|
                                         common-lisp:null)
                         :accessor %bridge-bridge-messages :initform
                         common-lisp:nil)
                        (bridge-arn :initarg :bridge-arn :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %bridge-bridge-arn :initform
                         (common-lisp:error ":bridge-arn is required"))))
 (common-lisp:export (common-lisp:list 'bridge 'make-bridge))
 (common-lisp:defun make-bridge
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key sources source-failover-config
                     placement-arn outputs name ingress-gateway-bridge
                     egress-gateway-bridge bridge-state bridge-messages
                     bridge-arn)
   (common-lisp:apply #'common-lisp:make-instance 'bridge
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input bridge))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input bridge))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bridge-arn))
      (common-lisp:list
       (common-lisp:cons "BridgeArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bridge-messages))
      (common-lisp:list
       (common-lisp:cons "BridgeMessages"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bridge-state))
      (common-lisp:list
       (common-lisp:cons "BridgeState"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'egress-gateway-bridge))
      (common-lisp:list
       (common-lisp:cons "EgressGatewayBridge"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'ingress-gateway-bridge))
      (common-lisp:list
       (common-lisp:cons "IngressGatewayBridge"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'outputs))
      (common-lisp:list
       (common-lisp:cons "Outputs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'placement-arn))
      (common-lisp:list
       (common-lisp:cons "PlacementArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'source-failover-config))
      (common-lisp:list
       (common-lisp:cons "SourceFailoverConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sources))
      (common-lisp:list
       (common-lisp:cons "Sources"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input bridge))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass bridge-flow-output common-lisp:nil
                       ((name :initarg :name :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %bridge-flow-output-name :initform
                         (common-lisp:error ":name is required"))
                        (flow-source-arn :initarg :flow-source-arn :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %bridge-flow-output-flow-source-arn :initform
                         (common-lisp:error ":flow-source-arn is required"))
                        (flow-arn :initarg :flow-arn :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %bridge-flow-output-flow-arn :initform
                         (common-lisp:error ":flow-arn is required"))))
 (common-lisp:export
  (common-lisp:list 'bridge-flow-output 'make-bridge-flow-output))
 (common-lisp:defun make-bridge-flow-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key name flow-source-arn flow-arn)
   (common-lisp:apply #'common-lisp:make-instance 'bridge-flow-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input bridge-flow-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input bridge-flow-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'flow-arn))
      (common-lisp:list
       (common-lisp:cons "FlowArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'flow-source-arn))
      (common-lisp:list
       (common-lisp:cons "FlowSourceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input bridge-flow-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass bridge-flow-source common-lisp:nil
                       ((output-arn :initarg :output-arn :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %bridge-flow-source-output-arn :initform
                         common-lisp:nil)
                        (name :initarg :name :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %bridge-flow-source-name :initform
                         (common-lisp:error ":name is required"))
                        (flow-vpc-interface-attachment :initarg
                         :flow-vpc-interface-attachment :type
                         (common-lisp:or vpc-interface-attachment
                                         common-lisp:null)
                         :accessor
                         %bridge-flow-source-flow-vpc-interface-attachment
                         :initform common-lisp:nil)
                        (flow-arn :initarg :flow-arn :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %bridge-flow-source-flow-arn :initform
                         (common-lisp:error ":flow-arn is required"))))
 (common-lisp:export
  (common-lisp:list 'bridge-flow-source 'make-bridge-flow-source))
 (common-lisp:defun make-bridge-flow-source
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key output-arn name
                     flow-vpc-interface-attachment flow-arn)
   (common-lisp:apply #'common-lisp:make-instance 'bridge-flow-source
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input bridge-flow-source))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input bridge-flow-source))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'flow-arn))
      (common-lisp:list
       (common-lisp:cons "FlowArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'flow-vpc-interface-attachment))
      (common-lisp:list
       (common-lisp:cons "FlowVpcInterfaceAttachment"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'output-arn))
      (common-lisp:list
       (common-lisp:cons "OutputArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input bridge-flow-source))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass bridge-network-output common-lisp:nil
                       ((ttl :initarg :ttl :type
                         (common-lisp:or |__integer| common-lisp:null)
                         :accessor %bridge-network-output-ttl :initform
                         (common-lisp:error ":ttl is required"))
                        (protocol :initarg :protocol :type
                         (common-lisp:or protocol common-lisp:null) :accessor
                         %bridge-network-output-protocol :initform
                         (common-lisp:error ":protocol is required"))
                        (port :initarg :port :type
                         (common-lisp:or |__integer| common-lisp:null)
                         :accessor %bridge-network-output-port :initform
                         (common-lisp:error ":port is required"))
                        (network-name :initarg :network-name :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %bridge-network-output-network-name :initform
                         (common-lisp:error ":network-name is required"))
                        (name :initarg :name :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %bridge-network-output-name :initform
                         (common-lisp:error ":name is required"))
                        (ip-address :initarg :ip-address :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %bridge-network-output-ip-address :initform
                         (common-lisp:error ":ip-address is required"))))
 (common-lisp:export
  (common-lisp:list 'bridge-network-output 'make-bridge-network-output))
 (common-lisp:defun make-bridge-network-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key ttl protocol port network-name name
                     ip-address)
   (common-lisp:apply #'common-lisp:make-instance 'bridge-network-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          bridge-network-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          bridge-network-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ip-address))
      (common-lisp:list
       (common-lisp:cons "IpAddress"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'network-name))
      (common-lisp:list
       (common-lisp:cons "NetworkName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'port))
      (common-lisp:list
       (common-lisp:cons "Port"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'protocol))
      (common-lisp:list
       (common-lisp:cons "Protocol"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ttl))
      (common-lisp:list
       (common-lisp:cons "Ttl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          bridge-network-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass bridge-network-source common-lisp:nil
                       ((protocol :initarg :protocol :type
                         (common-lisp:or protocol common-lisp:null) :accessor
                         %bridge-network-source-protocol :initform
                         (common-lisp:error ":protocol is required"))
                        (port :initarg :port :type
                         (common-lisp:or |__integer| common-lisp:null)
                         :accessor %bridge-network-source-port :initform
                         (common-lisp:error ":port is required"))
                        (network-name :initarg :network-name :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %bridge-network-source-network-name :initform
                         (common-lisp:error ":network-name is required"))
                        (name :initarg :name :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %bridge-network-source-name :initform
                         (common-lisp:error ":name is required"))
                        (multicast-ip :initarg :multicast-ip :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %bridge-network-source-multicast-ip :initform
                         (common-lisp:error ":multicast-ip is required"))))
 (common-lisp:export
  (common-lisp:list 'bridge-network-source 'make-bridge-network-source))
 (common-lisp:defun make-bridge-network-source
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key protocol port network-name name
                     multicast-ip)
   (common-lisp:apply #'common-lisp:make-instance 'bridge-network-source
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          bridge-network-source))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          bridge-network-source))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'multicast-ip))
      (common-lisp:list
       (common-lisp:cons "MulticastIp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'network-name))
      (common-lisp:list
       (common-lisp:cons "NetworkName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'port))
      (common-lisp:list
       (common-lisp:cons "Port"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'protocol))
      (common-lisp:list
       (common-lisp:cons "Protocol"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          bridge-network-source))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass bridge-output common-lisp:nil
                       ((network-output :initarg :network-output :type
                         (common-lisp:or bridge-network-output
                                         common-lisp:null)
                         :accessor %bridge-output-network-output :initform
                         common-lisp:nil)
                        (flow-output :initarg :flow-output :type
                         (common-lisp:or bridge-flow-output common-lisp:null)
                         :accessor %bridge-output-flow-output :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'bridge-output 'make-bridge-output))
 (common-lisp:defun make-bridge-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key network-output flow-output)
   (common-lisp:apply #'common-lisp:make-instance 'bridge-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input bridge-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input bridge-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'flow-output))
      (common-lisp:list
       (common-lisp:cons "FlowOutput"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'network-output))
      (common-lisp:list
       (common-lisp:cons "NetworkOutput"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input bridge-output))
   common-lisp:nil))
(common-lisp:deftype bridge-placement () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass bridge-source common-lisp:nil
                       ((network-source :initarg :network-source :type
                         (common-lisp:or bridge-network-source
                                         common-lisp:null)
                         :accessor %bridge-source-network-source :initform
                         common-lisp:nil)
                        (flow-source :initarg :flow-source :type
                         (common-lisp:or bridge-flow-source common-lisp:null)
                         :accessor %bridge-source-flow-source :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'bridge-source 'make-bridge-source))
 (common-lisp:defun make-bridge-source
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key network-source flow-source)
   (common-lisp:apply #'common-lisp:make-instance 'bridge-source
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input bridge-source))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input bridge-source))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'flow-source))
      (common-lisp:list
       (common-lisp:cons "FlowSource"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'network-source))
      (common-lisp:list
       (common-lisp:cons "NetworkSource"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input bridge-source))
   common-lisp:nil))
(common-lisp:deftype bridge-state () 'common-lisp:string)
(common-lisp:deftype colorimetry () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition conflict-exception
     (mediaconnect-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       conflict-exception-message)))
 (common-lisp:export
  (common-lisp:list 'conflict-exception 'conflict-exception-message)))
(common-lisp:deftype connection-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition create-bridge420exception
     (mediaconnect-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       create-bridge420exception-message)))
 (common-lisp:export
  (common-lisp:list 'create-bridge420exception
                    'create-bridge420exception-message)))
(common-lisp:progn
 (common-lisp:defclass create-bridge-request common-lisp:nil
                       ((sources :initarg :sources :type
                         (common-lisp:or |__listOfAddBridgeSourceRequest|
                                         common-lisp:null)
                         :accessor %create-bridge-request-sources :initform
                         (common-lisp:error ":sources is required"))
                        (source-failover-config :initarg
                         :source-failover-config :type
                         (common-lisp:or failover-config common-lisp:null)
                         :accessor
                         %create-bridge-request-source-failover-config
                         :initform common-lisp:nil)
                        (placement-arn :initarg :placement-arn :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %create-bridge-request-placement-arn :initform
                         (common-lisp:error ":placement-arn is required"))
                        (outputs :initarg :outputs :type
                         (common-lisp:or |__listOfAddBridgeOutputRequest|
                                         common-lisp:null)
                         :accessor %create-bridge-request-outputs :initform
                         common-lisp:nil)
                        (name :initarg :name :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %create-bridge-request-name :initform
                         (common-lisp:error ":name is required"))
                        (ingress-gateway-bridge :initarg
                         :ingress-gateway-bridge :type
                         (common-lisp:or add-ingress-gateway-bridge-request
                                         common-lisp:null)
                         :accessor
                         %create-bridge-request-ingress-gateway-bridge
                         :initform common-lisp:nil)
                        (egress-gateway-bridge :initarg :egress-gateway-bridge
                         :type
                         (common-lisp:or add-egress-gateway-bridge-request
                                         common-lisp:null)
                         :accessor %create-bridge-request-egress-gateway-bridge
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'create-bridge-request 'make-create-bridge-request))
 (common-lisp:defun make-create-bridge-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key sources source-failover-config
                     placement-arn outputs name ingress-gateway-bridge
                     egress-gateway-bridge)
   (common-lisp:apply #'common-lisp:make-instance 'create-bridge-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-bridge-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-bridge-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'egress-gateway-bridge))
      (common-lisp:list
       (common-lisp:cons "EgressGatewayBridge"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'ingress-gateway-bridge))
      (common-lisp:list
       (common-lisp:cons "IngressGatewayBridge"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'outputs))
      (common-lisp:list
       (common-lisp:cons "Outputs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'placement-arn))
      (common-lisp:list
       (common-lisp:cons "PlacementArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'source-failover-config))
      (common-lisp:list
       (common-lisp:cons "SourceFailoverConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sources))
      (common-lisp:list
       (common-lisp:cons "Sources"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-bridge-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-bridge-response common-lisp:nil
                       ((bridge :initarg :bridge :type
                         (common-lisp:or bridge common-lisp:null) :accessor
                         %create-bridge-response-bridge :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'create-bridge-response 'make-create-bridge-response))
 (common-lisp:defun make-create-bridge-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key bridge)
   (common-lisp:apply #'common-lisp:make-instance 'create-bridge-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-bridge-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-bridge-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bridge))
      (common-lisp:list
       (common-lisp:cons "Bridge"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-bridge-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition create-flow420exception
     (mediaconnect-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       create-flow420exception-message)))
 (common-lisp:export
  (common-lisp:list 'create-flow420exception 'create-flow420exception-message)))
(common-lisp:progn
 (common-lisp:defclass create-flow-request common-lisp:nil
                       ((maintenance :initarg :maintenance :type
                         (common-lisp:or add-maintenance common-lisp:null)
                         :accessor %create-flow-request-maintenance :initform
                         common-lisp:nil)
                        (vpc-interfaces :initarg :vpc-interfaces :type
                         (common-lisp:or |__listOfVpcInterfaceRequest|
                                         common-lisp:null)
                         :accessor %create-flow-request-vpc-interfaces
                         :initform common-lisp:nil)
                        (sources :initarg :sources :type
                         (common-lisp:or |__listOfSetSourceRequest|
                                         common-lisp:null)
                         :accessor %create-flow-request-sources :initform
                         common-lisp:nil)
                        (source-failover-config :initarg
                         :source-failover-config :type
                         (common-lisp:or failover-config common-lisp:null)
                         :accessor %create-flow-request-source-failover-config
                         :initform common-lisp:nil)
                        (source :initarg :source :type
                         (common-lisp:or set-source-request common-lisp:null)
                         :accessor %create-flow-request-source :initform
                         common-lisp:nil)
                        (outputs :initarg :outputs :type
                         (common-lisp:or |__listOfAddOutputRequest|
                                         common-lisp:null)
                         :accessor %create-flow-request-outputs :initform
                         common-lisp:nil)
                        (name :initarg :name :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %create-flow-request-name :initform
                         (common-lisp:error ":name is required"))
                        (media-streams :initarg :media-streams :type
                         (common-lisp:or |__listOfAddMediaStreamRequest|
                                         common-lisp:null)
                         :accessor %create-flow-request-media-streams :initform
                         common-lisp:nil)
                        (entitlements :initarg :entitlements :type
                         (common-lisp:or |__listOfGrantEntitlementRequest|
                                         common-lisp:null)
                         :accessor %create-flow-request-entitlements :initform
                         common-lisp:nil)
                        (availability-zone :initarg :availability-zone :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %create-flow-request-availability-zone :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'create-flow-request 'make-create-flow-request))
 (common-lisp:defun make-create-flow-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key maintenance vpc-interfaces sources
                     source-failover-config source outputs name media-streams
                     entitlements availability-zone)
   (common-lisp:apply #'common-lisp:make-instance 'create-flow-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input create-flow-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input create-flow-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'availability-zone))
      (common-lisp:list
       (common-lisp:cons "AvailabilityZone"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'entitlements))
      (common-lisp:list
       (common-lisp:cons "Entitlements"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'media-streams))
      (common-lisp:list
       (common-lisp:cons "MediaStreams"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'outputs))
      (common-lisp:list
       (common-lisp:cons "Outputs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source))
      (common-lisp:list
       (common-lisp:cons "Source"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'source-failover-config))
      (common-lisp:list
       (common-lisp:cons "SourceFailoverConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sources))
      (common-lisp:list
       (common-lisp:cons "Sources"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpc-interfaces))
      (common-lisp:list
       (common-lisp:cons "VpcInterfaces"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'maintenance))
      (common-lisp:list
       (common-lisp:cons "Maintenance"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input create-flow-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-flow-response common-lisp:nil
                       ((flow :initarg :flow :type
                         (common-lisp:or flow common-lisp:null) :accessor
                         %create-flow-response-flow :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'create-flow-response 'make-create-flow-response))
 (common-lisp:defun make-create-flow-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key flow)
   (common-lisp:apply #'common-lisp:make-instance 'create-flow-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input create-flow-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input create-flow-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'flow))
      (common-lisp:list
       (common-lisp:cons "Flow"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input create-flow-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition create-gateway420exception
     (mediaconnect-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       create-gateway420exception-message)))
 (common-lisp:export
  (common-lisp:list 'create-gateway420exception
                    'create-gateway420exception-message)))
(common-lisp:progn
 (common-lisp:defclass create-gateway-request common-lisp:nil
                       ((networks :initarg :networks :type
                         (common-lisp:or |__listOfGatewayNetwork|
                                         common-lisp:null)
                         :accessor %create-gateway-request-networks :initform
                         (common-lisp:error ":networks is required"))
                        (name :initarg :name :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %create-gateway-request-name :initform
                         (common-lisp:error ":name is required"))
                        (egress-cidr-blocks :initarg :egress-cidr-blocks :type
                         (common-lisp:or |__listOf__string| common-lisp:null)
                         :accessor %create-gateway-request-egress-cidr-blocks
                         :initform
                         (common-lisp:error
                          ":egress-cidr-blocks is required"))))
 (common-lisp:export
  (common-lisp:list 'create-gateway-request 'make-create-gateway-request))
 (common-lisp:defun make-create-gateway-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key networks name egress-cidr-blocks)
   (common-lisp:apply #'common-lisp:make-instance 'create-gateway-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-gateway-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-gateway-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'egress-cidr-blocks))
      (common-lisp:list
       (common-lisp:cons "EgressCidrBlocks"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'networks))
      (common-lisp:list
       (common-lisp:cons "Networks"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-gateway-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-gateway-response common-lisp:nil
                       ((gateway :initarg :gateway :type
                         (common-lisp:or gateway common-lisp:null) :accessor
                         %create-gateway-response-gateway :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'create-gateway-response 'make-create-gateway-response))
 (common-lisp:defun make-create-gateway-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key gateway)
   (common-lisp:apply #'common-lisp:make-instance 'create-gateway-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-gateway-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-gateway-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'gateway))
      (common-lisp:list
       (common-lisp:cons "Gateway"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-gateway-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-bridge-request common-lisp:nil
                       ((bridge-arn :initarg :bridge-arn :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %delete-bridge-request-bridge-arn :initform
                         (common-lisp:error ":bridge-arn is required"))))
 (common-lisp:export
  (common-lisp:list 'delete-bridge-request 'make-delete-bridge-request))
 (common-lisp:defun make-delete-bridge-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key bridge-arn)
   (common-lisp:apply #'common-lisp:make-instance 'delete-bridge-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-bridge-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-bridge-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-bridge-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-bridge-response common-lisp:nil
                       ((bridge-arn :initarg :bridge-arn :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %delete-bridge-response-bridge-arn :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'delete-bridge-response 'make-delete-bridge-response))
 (common-lisp:defun make-delete-bridge-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key bridge-arn)
   (common-lisp:apply #'common-lisp:make-instance 'delete-bridge-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-bridge-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-bridge-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bridge-arn))
      (common-lisp:list
       (common-lisp:cons "BridgeArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-bridge-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-flow-request common-lisp:nil
                       ((flow-arn :initarg :flow-arn :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %delete-flow-request-flow-arn :initform
                         (common-lisp:error ":flow-arn is required"))))
 (common-lisp:export
  (common-lisp:list 'delete-flow-request 'make-delete-flow-request))
 (common-lisp:defun make-delete-flow-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key flow-arn)
   (common-lisp:apply #'common-lisp:make-instance 'delete-flow-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input delete-flow-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input delete-flow-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input delete-flow-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-flow-response common-lisp:nil
                       ((status :initarg :status :type
                         (common-lisp:or status common-lisp:null) :accessor
                         %delete-flow-response-status :initform
                         common-lisp:nil)
                        (flow-arn :initarg :flow-arn :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %delete-flow-response-flow-arn :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'delete-flow-response 'make-delete-flow-response))
 (common-lisp:defun make-delete-flow-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key status flow-arn)
   (common-lisp:apply #'common-lisp:make-instance 'delete-flow-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input delete-flow-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input delete-flow-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'flow-arn))
      (common-lisp:list
       (common-lisp:cons "FlowArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input delete-flow-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-gateway-request common-lisp:nil
                       ((gateway-arn :initarg :gateway-arn :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %delete-gateway-request-gateway-arn :initform
                         (common-lisp:error ":gateway-arn is required"))))
 (common-lisp:export
  (common-lisp:list 'delete-gateway-request 'make-delete-gateway-request))
 (common-lisp:defun make-delete-gateway-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key gateway-arn)
   (common-lisp:apply #'common-lisp:make-instance 'delete-gateway-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-gateway-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-gateway-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-gateway-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-gateway-response common-lisp:nil
                       ((gateway-arn :initarg :gateway-arn :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %delete-gateway-response-gateway-arn :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'delete-gateway-response 'make-delete-gateway-response))
 (common-lisp:defun make-delete-gateway-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key gateway-arn)
   (common-lisp:apply #'common-lisp:make-instance 'delete-gateway-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-gateway-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-gateway-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'gateway-arn))
      (common-lisp:list
       (common-lisp:cons "GatewayArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-gateway-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass deregister-gateway-instance-request common-lisp:nil
                       ((gateway-instance-arn :initarg :gateway-instance-arn
                         :type (common-lisp:or |__string| common-lisp:null)
                         :accessor
                         %deregister-gateway-instance-request-gateway-instance-arn
                         :initform
                         (common-lisp:error
                          ":gateway-instance-arn is required"))
                        (force :initarg :force :type
                         (common-lisp:or |__boolean| common-lisp:null)
                         :accessor %deregister-gateway-instance-request-force
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'deregister-gateway-instance-request
                    'make-deregister-gateway-instance-request))
 (common-lisp:defun make-deregister-gateway-instance-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key gateway-instance-arn force)
   (common-lisp:apply #'common-lisp:make-instance
                      'deregister-gateway-instance-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          deregister-gateway-instance-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          deregister-gateway-instance-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          deregister-gateway-instance-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass deregister-gateway-instance-response common-lisp:nil
                       ((instance-state :initarg :instance-state :type
                         (common-lisp:or instance-state common-lisp:null)
                         :accessor
                         %deregister-gateway-instance-response-instance-state
                         :initform common-lisp:nil)
                        (gateway-instance-arn :initarg :gateway-instance-arn
                         :type (common-lisp:or |__string| common-lisp:null)
                         :accessor
                         %deregister-gateway-instance-response-gateway-instance-arn
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'deregister-gateway-instance-response
                    'make-deregister-gateway-instance-response))
 (common-lisp:defun make-deregister-gateway-instance-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key instance-state gateway-instance-arn)
   (common-lisp:apply #'common-lisp:make-instance
                      'deregister-gateway-instance-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          deregister-gateway-instance-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          deregister-gateway-instance-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'gateway-instance-arn))
      (common-lisp:list
       (common-lisp:cons "GatewayInstanceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-state))
      (common-lisp:list
       (common-lisp:cons "InstanceState"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          deregister-gateway-instance-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-bridge-request common-lisp:nil
                       ((bridge-arn :initarg :bridge-arn :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %describe-bridge-request-bridge-arn :initform
                         (common-lisp:error ":bridge-arn is required"))))
 (common-lisp:export
  (common-lisp:list 'describe-bridge-request 'make-describe-bridge-request))
 (common-lisp:defun make-describe-bridge-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key bridge-arn)
   (common-lisp:apply #'common-lisp:make-instance 'describe-bridge-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-bridge-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-bridge-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-bridge-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-bridge-response common-lisp:nil
                       ((bridge :initarg :bridge :type
                         (common-lisp:or bridge common-lisp:null) :accessor
                         %describe-bridge-response-bridge :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-bridge-response 'make-describe-bridge-response))
 (common-lisp:defun make-describe-bridge-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key bridge)
   (common-lisp:apply #'common-lisp:make-instance 'describe-bridge-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-bridge-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-bridge-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bridge))
      (common-lisp:list
       (common-lisp:cons "Bridge"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-bridge-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-flow-request common-lisp:nil
                       ((flow-arn :initarg :flow-arn :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %describe-flow-request-flow-arn :initform
                         (common-lisp:error ":flow-arn is required"))))
 (common-lisp:export
  (common-lisp:list 'describe-flow-request 'make-describe-flow-request))
 (common-lisp:defun make-describe-flow-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key flow-arn)
   (common-lisp:apply #'common-lisp:make-instance 'describe-flow-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-flow-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-flow-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-flow-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-flow-response common-lisp:nil
                       ((messages :initarg :messages :type
                         (common-lisp:or messages common-lisp:null) :accessor
                         %describe-flow-response-messages :initform
                         common-lisp:nil)
                        (flow :initarg :flow :type
                         (common-lisp:or flow common-lisp:null) :accessor
                         %describe-flow-response-flow :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-flow-response 'make-describe-flow-response))
 (common-lisp:defun make-describe-flow-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key messages flow)
   (common-lisp:apply #'common-lisp:make-instance 'describe-flow-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-flow-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-flow-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'flow))
      (common-lisp:list
       (common-lisp:cons "Flow"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'messages))
      (common-lisp:list
       (common-lisp:cons "Messages"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-flow-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-gateway-instance-request common-lisp:nil
                       ((gateway-instance-arn :initarg :gateway-instance-arn
                         :type (common-lisp:or |__string| common-lisp:null)
                         :accessor
                         %describe-gateway-instance-request-gateway-instance-arn
                         :initform
                         (common-lisp:error
                          ":gateway-instance-arn is required"))))
 (common-lisp:export
  (common-lisp:list 'describe-gateway-instance-request
                    'make-describe-gateway-instance-request))
 (common-lisp:defun make-describe-gateway-instance-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key gateway-instance-arn)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-gateway-instance-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-gateway-instance-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-gateway-instance-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-gateway-instance-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-gateway-instance-response common-lisp:nil
                       ((gateway-instance :initarg :gateway-instance :type
                         (common-lisp:or gateway-instance common-lisp:null)
                         :accessor
                         %describe-gateway-instance-response-gateway-instance
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-gateway-instance-response
                    'make-describe-gateway-instance-response))
 (common-lisp:defun make-describe-gateway-instance-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key gateway-instance)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-gateway-instance-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-gateway-instance-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-gateway-instance-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'gateway-instance))
      (common-lisp:list
       (common-lisp:cons "GatewayInstance"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-gateway-instance-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-gateway-request common-lisp:nil
                       ((gateway-arn :initarg :gateway-arn :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %describe-gateway-request-gateway-arn :initform
                         (common-lisp:error ":gateway-arn is required"))))
 (common-lisp:export
  (common-lisp:list 'describe-gateway-request 'make-describe-gateway-request))
 (common-lisp:defun make-describe-gateway-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key gateway-arn)
   (common-lisp:apply #'common-lisp:make-instance 'describe-gateway-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-gateway-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-gateway-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-gateway-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-gateway-response common-lisp:nil
                       ((gateway :initarg :gateway :type
                         (common-lisp:or gateway common-lisp:null) :accessor
                         %describe-gateway-response-gateway :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-gateway-response
                    'make-describe-gateway-response))
 (common-lisp:defun make-describe-gateway-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key gateway)
   (common-lisp:apply #'common-lisp:make-instance 'describe-gateway-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-gateway-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-gateway-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'gateway))
      (common-lisp:list
       (common-lisp:cons "Gateway"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-gateway-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-offering-request common-lisp:nil
                       ((offering-arn :initarg :offering-arn :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %describe-offering-request-offering-arn :initform
                         (common-lisp:error ":offering-arn is required"))))
 (common-lisp:export
  (common-lisp:list 'describe-offering-request
                    'make-describe-offering-request))
 (common-lisp:defun make-describe-offering-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key offering-arn)
   (common-lisp:apply #'common-lisp:make-instance 'describe-offering-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-offering-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-offering-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-offering-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-offering-response common-lisp:nil
                       ((offering :initarg :offering :type
                         (common-lisp:or offering common-lisp:null) :accessor
                         %describe-offering-response-offering :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-offering-response
                    'make-describe-offering-response))
 (common-lisp:defun make-describe-offering-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key offering)
   (common-lisp:apply #'common-lisp:make-instance 'describe-offering-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-offering-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-offering-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'offering))
      (common-lisp:list
       (common-lisp:cons "Offering"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-offering-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-reservation-request common-lisp:nil
                       ((reservation-arn :initarg :reservation-arn :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %describe-reservation-request-reservation-arn
                         :initform
                         (common-lisp:error ":reservation-arn is required"))))
 (common-lisp:export
  (common-lisp:list 'describe-reservation-request
                    'make-describe-reservation-request))
 (common-lisp:defun make-describe-reservation-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key reservation-arn)
   (common-lisp:apply #'common-lisp:make-instance 'describe-reservation-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-reservation-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-reservation-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-reservation-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-reservation-response common-lisp:nil
                       ((reservation :initarg :reservation :type
                         (common-lisp:or reservation common-lisp:null)
                         :accessor %describe-reservation-response-reservation
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-reservation-response
                    'make-describe-reservation-response))
 (common-lisp:defun make-describe-reservation-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key reservation)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-reservation-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-reservation-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-reservation-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'reservation))
      (common-lisp:list
       (common-lisp:cons "Reservation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-reservation-response))
   common-lisp:nil))
(common-lisp:deftype desired-state () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass destination-configuration common-lisp:nil
                       ((outbound-ip :initarg :outbound-ip :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %destination-configuration-outbound-ip :initform
                         (common-lisp:error ":outbound-ip is required"))
                        (interface :initarg :interface :type
                         (common-lisp:or interface common-lisp:null) :accessor
                         %destination-configuration-interface :initform
                         (common-lisp:error ":interface is required"))
                        (destination-port :initarg :destination-port :type
                         (common-lisp:or |__integer| common-lisp:null)
                         :accessor %destination-configuration-destination-port
                         :initform
                         (common-lisp:error ":destination-port is required"))
                        (destination-ip :initarg :destination-ip :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %destination-configuration-destination-ip :initform
                         (common-lisp:error ":destination-ip is required"))))
 (common-lisp:export
  (common-lisp:list 'destination-configuration
                    'make-destination-configuration))
 (common-lisp:defun make-destination-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key outbound-ip interface destination-port
                     destination-ip)
   (common-lisp:apply #'common-lisp:make-instance 'destination-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          destination-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          destination-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'destination-ip))
      (common-lisp:list
       (common-lisp:cons "DestinationIp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'destination-port))
      (common-lisp:list
       (common-lisp:cons "DestinationPort"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'interface))
      (common-lisp:list
       (common-lisp:cons "Interface"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'outbound-ip))
      (common-lisp:list
       (common-lisp:cons "OutboundIp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          destination-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass destination-configuration-request common-lisp:nil
                       ((interface :initarg :interface :type
                         (common-lisp:or interface-request common-lisp:null)
                         :accessor %destination-configuration-request-interface
                         :initform
                         (common-lisp:error ":interface is required"))
                        (destination-port :initarg :destination-port :type
                         (common-lisp:or |__integer| common-lisp:null)
                         :accessor
                         %destination-configuration-request-destination-port
                         :initform
                         (common-lisp:error ":destination-port is required"))
                        (destination-ip :initarg :destination-ip :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %destination-configuration-request-destination-ip
                         :initform
                         (common-lisp:error ":destination-ip is required"))))
 (common-lisp:export
  (common-lisp:list 'destination-configuration-request
                    'make-destination-configuration-request))
 (common-lisp:defun make-destination-configuration-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key interface destination-port
                     destination-ip)
   (common-lisp:apply #'common-lisp:make-instance
                      'destination-configuration-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          destination-configuration-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          destination-configuration-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'destination-ip))
      (common-lisp:list
       (common-lisp:cons "DestinationIp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'destination-port))
      (common-lisp:list
       (common-lisp:cons "DestinationPort"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'interface))
      (common-lisp:list
       (common-lisp:cons "Interface"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          destination-configuration-request))
   common-lisp:nil))
(common-lisp:deftype duration-units () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass egress-gateway-bridge common-lisp:nil
                       ((max-bitrate :initarg :max-bitrate :type
                         (common-lisp:or |__integer| common-lisp:null)
                         :accessor %egress-gateway-bridge-max-bitrate :initform
                         (common-lisp:error ":max-bitrate is required"))
                        (instance-id :initarg :instance-id :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %egress-gateway-bridge-instance-id :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'egress-gateway-bridge 'make-egress-gateway-bridge))
 (common-lisp:defun make-egress-gateway-bridge
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key max-bitrate instance-id)
   (common-lisp:apply #'common-lisp:make-instance 'egress-gateway-bridge
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          egress-gateway-bridge))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          egress-gateway-bridge))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-id))
      (common-lisp:list
       (common-lisp:cons "InstanceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-bitrate))
      (common-lisp:list
       (common-lisp:cons "MaxBitrate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          egress-gateway-bridge))
   common-lisp:nil))
(common-lisp:deftype encoder-profile () 'common-lisp:string)
(common-lisp:deftype encoding-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass encoding-parameters common-lisp:nil
                       ((encoder-profile :initarg :encoder-profile :type
                         (common-lisp:or encoder-profile common-lisp:null)
                         :accessor %encoding-parameters-encoder-profile
                         :initform
                         (common-lisp:error ":encoder-profile is required"))
                        (compression-factor :initarg :compression-factor :type
                         (common-lisp:or |__double| common-lisp:null) :accessor
                         %encoding-parameters-compression-factor :initform
                         (common-lisp:error
                          ":compression-factor is required"))))
 (common-lisp:export
  (common-lisp:list 'encoding-parameters 'make-encoding-parameters))
 (common-lisp:defun make-encoding-parameters
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key encoder-profile compression-factor)
   (common-lisp:apply #'common-lisp:make-instance 'encoding-parameters
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input encoding-parameters))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input encoding-parameters))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'compression-factor))
      (common-lisp:list
       (common-lisp:cons "CompressionFactor"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'encoder-profile))
      (common-lisp:list
       (common-lisp:cons "EncoderProfile"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input encoding-parameters))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass encoding-parameters-request common-lisp:nil
                       ((encoder-profile :initarg :encoder-profile :type
                         (common-lisp:or encoder-profile common-lisp:null)
                         :accessor %encoding-parameters-request-encoder-profile
                         :initform
                         (common-lisp:error ":encoder-profile is required"))
                        (compression-factor :initarg :compression-factor :type
                         (common-lisp:or |__double| common-lisp:null) :accessor
                         %encoding-parameters-request-compression-factor
                         :initform
                         (common-lisp:error
                          ":compression-factor is required"))))
 (common-lisp:export
  (common-lisp:list 'encoding-parameters-request
                    'make-encoding-parameters-request))
 (common-lisp:defun make-encoding-parameters-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key encoder-profile compression-factor)
   (common-lisp:apply #'common-lisp:make-instance 'encoding-parameters-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          encoding-parameters-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          encoding-parameters-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'compression-factor))
      (common-lisp:list
       (common-lisp:cons "CompressionFactor"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'encoder-profile))
      (common-lisp:list
       (common-lisp:cons "EncoderProfile"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          encoding-parameters-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass encryption common-lisp:nil
                       ((url :initarg :url :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %encryption-url :initform common-lisp:nil)
                        (secret-arn :initarg :secret-arn :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %encryption-secret-arn :initform common-lisp:nil)
                        (role-arn :initarg :role-arn :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %encryption-role-arn :initform
                         (common-lisp:error ":role-arn is required"))
                        (resource-id :initarg :resource-id :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %encryption-resource-id :initform common-lisp:nil)
                        (region :initarg :region :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %encryption-region :initform common-lisp:nil)
                        (key-type :initarg :key-type :type
                         (common-lisp:or key-type common-lisp:null) :accessor
                         %encryption-key-type :initform common-lisp:nil)
                        (device-id :initarg :device-id :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %encryption-device-id :initform common-lisp:nil)
                        (constant-initialization-vector :initarg
                         :constant-initialization-vector :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %encryption-constant-initialization-vector :initform
                         common-lisp:nil)
                        (algorithm :initarg :algorithm :type
                         (common-lisp:or algorithm common-lisp:null) :accessor
                         %encryption-algorithm :initform common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'encryption 'make-encryption))
 (common-lisp:defun make-encryption
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key url secret-arn role-arn resource-id
                     region key-type device-id constant-initialization-vector
                     algorithm)
   (common-lisp:apply #'common-lisp:make-instance 'encryption
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input encryption))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input encryption))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'algorithm))
      (common-lisp:list
       (common-lisp:cons "Algorithm"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'constant-initialization-vector))
      (common-lisp:list
       (common-lisp:cons "ConstantInitializationVector"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'device-id))
      (common-lisp:list
       (common-lisp:cons "DeviceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key-type))
      (common-lisp:list
       (common-lisp:cons "KeyType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'region))
      (common-lisp:list
       (common-lisp:cons "Region"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-id))
      (common-lisp:list
       (common-lisp:cons "ResourceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "RoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'secret-arn))
      (common-lisp:list
       (common-lisp:cons "SecretArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'url))
      (common-lisp:list
       (common-lisp:cons "Url"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input encryption))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass entitlement common-lisp:nil
                       ((subscribers :initarg :subscribers :type
                         (common-lisp:or |__listOf__string| common-lisp:null)
                         :accessor %entitlement-subscribers :initform
                         (common-lisp:error ":subscribers is required"))
                        (name :initarg :name :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %entitlement-name :initform
                         (common-lisp:error ":name is required"))
                        (entitlement-status :initarg :entitlement-status :type
                         (common-lisp:or entitlement-status common-lisp:null)
                         :accessor %entitlement-entitlement-status :initform
                         common-lisp:nil)
                        (entitlement-arn :initarg :entitlement-arn :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %entitlement-entitlement-arn :initform
                         (common-lisp:error ":entitlement-arn is required"))
                        (encryption :initarg :encryption :type
                         (common-lisp:or encryption common-lisp:null) :accessor
                         %entitlement-encryption :initform common-lisp:nil)
                        (description :initarg :description :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %entitlement-description :initform common-lisp:nil)
                        (data-transfer-subscriber-fee-percent :initarg
                         :data-transfer-subscriber-fee-percent :type
                         (common-lisp:or |__integer| common-lisp:null)
                         :accessor
                         %entitlement-data-transfer-subscriber-fee-percent
                         :initform common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'entitlement 'make-entitlement))
 (common-lisp:defun make-entitlement
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key subscribers name entitlement-status
                     entitlement-arn encryption description
                     data-transfer-subscriber-fee-percent)
   (common-lisp:apply #'common-lisp:make-instance 'entitlement
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input entitlement))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input entitlement))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'data-transfer-subscriber-fee-percent))
      (common-lisp:list
       (common-lisp:cons "DataTransferSubscriberFeePercent"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'encryption))
      (common-lisp:list
       (common-lisp:cons "Encryption"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'entitlement-arn))
      (common-lisp:list
       (common-lisp:cons "EntitlementArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'entitlement-status))
      (common-lisp:list
       (common-lisp:cons "EntitlementStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subscribers))
      (common-lisp:list
       (common-lisp:cons "Subscribers"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input entitlement))
   common-lisp:nil))
(common-lisp:deftype entitlement-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass failover-config common-lisp:nil
                       ((state :initarg :state :type
                         (common-lisp:or state common-lisp:null) :accessor
                         %failover-config-state :initform common-lisp:nil)
                        (source-priority :initarg :source-priority :type
                         (common-lisp:or source-priority common-lisp:null)
                         :accessor %failover-config-source-priority :initform
                         common-lisp:nil)
                        (recovery-window :initarg :recovery-window :type
                         (common-lisp:or |__integer| common-lisp:null)
                         :accessor %failover-config-recovery-window :initform
                         common-lisp:nil)
                        (failover-mode :initarg :failover-mode :type
                         (common-lisp:or failover-mode common-lisp:null)
                         :accessor %failover-config-failover-mode :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'failover-config 'make-failover-config))
 (common-lisp:defun make-failover-config
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key state source-priority recovery-window
                     failover-mode)
   (common-lisp:apply #'common-lisp:make-instance 'failover-config
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input failover-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input failover-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'failover-mode))
      (common-lisp:list
       (common-lisp:cons "FailoverMode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'recovery-window))
      (common-lisp:list
       (common-lisp:cons "RecoveryWindow"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-priority))
      (common-lisp:list
       (common-lisp:cons "SourcePriority"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "State"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input failover-config))
   common-lisp:nil))
(common-lisp:deftype failover-mode () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass flow common-lisp:nil
                       ((maintenance :initarg :maintenance :type
                         (common-lisp:or maintenance common-lisp:null)
                         :accessor %flow-maintenance :initform common-lisp:nil)
                        (vpc-interfaces :initarg :vpc-interfaces :type
                         (common-lisp:or |__listOfVpcInterface|
                                         common-lisp:null)
                         :accessor %flow-vpc-interfaces :initform
                         common-lisp:nil)
                        (status :initarg :status :type
                         (common-lisp:or status common-lisp:null) :accessor
                         %flow-status :initform
                         (common-lisp:error ":status is required"))
                        (sources :initarg :sources :type
                         (common-lisp:or |__listOfSource| common-lisp:null)
                         :accessor %flow-sources :initform common-lisp:nil)
                        (source-failover-config :initarg
                         :source-failover-config :type
                         (common-lisp:or failover-config common-lisp:null)
                         :accessor %flow-source-failover-config :initform
                         common-lisp:nil)
                        (source :initarg :source :type
                         (common-lisp:or source common-lisp:null) :accessor
                         %flow-source :initform
                         (common-lisp:error ":source is required"))
                        (outputs :initarg :outputs :type
                         (common-lisp:or |__listOfOutput| common-lisp:null)
                         :accessor %flow-outputs :initform
                         (common-lisp:error ":outputs is required"))
                        (name :initarg :name :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %flow-name :initform
                         (common-lisp:error ":name is required"))
                        (media-streams :initarg :media-streams :type
                         (common-lisp:or |__listOfMediaStream|
                                         common-lisp:null)
                         :accessor %flow-media-streams :initform
                         common-lisp:nil)
                        (flow-arn :initarg :flow-arn :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %flow-flow-arn :initform
                         (common-lisp:error ":flow-arn is required"))
                        (entitlements :initarg :entitlements :type
                         (common-lisp:or |__listOfEntitlement|
                                         common-lisp:null)
                         :accessor %flow-entitlements :initform
                         (common-lisp:error ":entitlements is required"))
                        (egress-ip :initarg :egress-ip :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %flow-egress-ip :initform common-lisp:nil)
                        (description :initarg :description :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %flow-description :initform common-lisp:nil)
                        (availability-zone :initarg :availability-zone :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %flow-availability-zone :initform
                         (common-lisp:error
                          ":availability-zone is required"))))
 (common-lisp:export (common-lisp:list 'flow 'make-flow))
 (common-lisp:defun make-flow
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key maintenance vpc-interfaces status sources
                     source-failover-config source outputs name media-streams
                     flow-arn entitlements egress-ip description
                     availability-zone)
   (common-lisp:apply #'common-lisp:make-instance 'flow
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input flow))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input flow))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'availability-zone))
      (common-lisp:list
       (common-lisp:cons "AvailabilityZone"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'egress-ip))
      (common-lisp:list
       (common-lisp:cons "EgressIp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'entitlements))
      (common-lisp:list
       (common-lisp:cons "Entitlements"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'flow-arn))
      (common-lisp:list
       (common-lisp:cons "FlowArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'media-streams))
      (common-lisp:list
       (common-lisp:cons "MediaStreams"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'outputs))
      (common-lisp:list
       (common-lisp:cons "Outputs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source))
      (common-lisp:list
       (common-lisp:cons "Source"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'source-failover-config))
      (common-lisp:list
       (common-lisp:cons "SourceFailoverConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sources))
      (common-lisp:list
       (common-lisp:cons "Sources"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpc-interfaces))
      (common-lisp:list
       (common-lisp:cons "VpcInterfaces"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'maintenance))
      (common-lisp:list
       (common-lisp:cons "Maintenance"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input flow))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass fmtp common-lisp:nil
                       ((tcs :initarg :tcs :type
                         (common-lisp:or tcs common-lisp:null) :accessor
                         %fmtp-tcs :initform common-lisp:nil)
                        (scan-mode :initarg :scan-mode :type
                         (common-lisp:or scan-mode common-lisp:null) :accessor
                         %fmtp-scan-mode :initform common-lisp:nil)
                        (range :initarg :range :type
                         (common-lisp:or range common-lisp:null) :accessor
                         %fmtp-range :initform common-lisp:nil)
                        (par :initarg :par :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %fmtp-par :initform common-lisp:nil)
                        (exact-framerate :initarg :exact-framerate :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %fmtp-exact-framerate :initform common-lisp:nil)
                        (colorimetry :initarg :colorimetry :type
                         (common-lisp:or colorimetry common-lisp:null)
                         :accessor %fmtp-colorimetry :initform common-lisp:nil)
                        (channel-order :initarg :channel-order :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %fmtp-channel-order :initform common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'fmtp 'make-fmtp))
 (common-lisp:defun make-fmtp
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tcs scan-mode range par exact-framerate
                     colorimetry channel-order)
   (common-lisp:apply #'common-lisp:make-instance 'fmtp
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input fmtp))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input fmtp))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'channel-order))
      (common-lisp:list
       (common-lisp:cons "ChannelOrder"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'colorimetry))
      (common-lisp:list
       (common-lisp:cons "Colorimetry"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'exact-framerate))
      (common-lisp:list
       (common-lisp:cons "ExactFramerate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'par))
      (common-lisp:list
       (common-lisp:cons "Par"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'range))
      (common-lisp:list
       (common-lisp:cons "Range"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'scan-mode))
      (common-lisp:list
       (common-lisp:cons "ScanMode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tcs))
      (common-lisp:list
       (common-lisp:cons "Tcs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input fmtp))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass fmtp-request common-lisp:nil
                       ((tcs :initarg :tcs :type
                         (common-lisp:or tcs common-lisp:null) :accessor
                         %fmtp-request-tcs :initform common-lisp:nil)
                        (scan-mode :initarg :scan-mode :type
                         (common-lisp:or scan-mode common-lisp:null) :accessor
                         %fmtp-request-scan-mode :initform common-lisp:nil)
                        (range :initarg :range :type
                         (common-lisp:or range common-lisp:null) :accessor
                         %fmtp-request-range :initform common-lisp:nil)
                        (par :initarg :par :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %fmtp-request-par :initform common-lisp:nil)
                        (exact-framerate :initarg :exact-framerate :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %fmtp-request-exact-framerate :initform
                         common-lisp:nil)
                        (colorimetry :initarg :colorimetry :type
                         (common-lisp:or colorimetry common-lisp:null)
                         :accessor %fmtp-request-colorimetry :initform
                         common-lisp:nil)
                        (channel-order :initarg :channel-order :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %fmtp-request-channel-order :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'fmtp-request 'make-fmtp-request))
 (common-lisp:defun make-fmtp-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tcs scan-mode range par exact-framerate
                     colorimetry channel-order)
   (common-lisp:apply #'common-lisp:make-instance 'fmtp-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input fmtp-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input fmtp-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'channel-order))
      (common-lisp:list
       (common-lisp:cons "ChannelOrder"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'colorimetry))
      (common-lisp:list
       (common-lisp:cons "Colorimetry"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'exact-framerate))
      (common-lisp:list
       (common-lisp:cons "ExactFramerate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'par))
      (common-lisp:list
       (common-lisp:cons "Par"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'range))
      (common-lisp:list
       (common-lisp:cons "Range"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'scan-mode))
      (common-lisp:list
       (common-lisp:cons "ScanMode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tcs))
      (common-lisp:list
       (common-lisp:cons "Tcs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input fmtp-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition forbidden-exception
     (mediaconnect-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       forbidden-exception-message)))
 (common-lisp:export
  (common-lisp:list 'forbidden-exception 'forbidden-exception-message)))
(common-lisp:progn
 (common-lisp:defclass gateway common-lisp:nil
                       ((networks :initarg :networks :type
                         (common-lisp:or |__listOfGatewayNetwork|
                                         common-lisp:null)
                         :accessor %gateway-networks :initform
                         (common-lisp:error ":networks is required"))
                        (name :initarg :name :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %gateway-name :initform
                         (common-lisp:error ":name is required"))
                        (gateway-state :initarg :gateway-state :type
                         (common-lisp:or gateway-state common-lisp:null)
                         :accessor %gateway-gateway-state :initform
                         common-lisp:nil)
                        (gateway-messages :initarg :gateway-messages :type
                         (common-lisp:or |__listOfMessageDetail|
                                         common-lisp:null)
                         :accessor %gateway-gateway-messages :initform
                         common-lisp:nil)
                        (gateway-arn :initarg :gateway-arn :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %gateway-gateway-arn :initform
                         (common-lisp:error ":gateway-arn is required"))
                        (egress-cidr-blocks :initarg :egress-cidr-blocks :type
                         (common-lisp:or |__listOf__string| common-lisp:null)
                         :accessor %gateway-egress-cidr-blocks :initform
                         (common-lisp:error
                          ":egress-cidr-blocks is required"))))
 (common-lisp:export (common-lisp:list 'gateway 'make-gateway))
 (common-lisp:defun make-gateway
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key networks name gateway-state
                     gateway-messages gateway-arn egress-cidr-blocks)
   (common-lisp:apply #'common-lisp:make-instance 'gateway
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input gateway))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input gateway))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'egress-cidr-blocks))
      (common-lisp:list
       (common-lisp:cons "EgressCidrBlocks"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'gateway-arn))
      (common-lisp:list
       (common-lisp:cons "GatewayArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'gateway-messages))
      (common-lisp:list
       (common-lisp:cons "GatewayMessages"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'gateway-state))
      (common-lisp:list
       (common-lisp:cons "GatewayState"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'networks))
      (common-lisp:list
       (common-lisp:cons "Networks"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input gateway))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass gateway-bridge-source common-lisp:nil
                       ((vpc-interface-attachment :initarg
                         :vpc-interface-attachment :type
                         (common-lisp:or vpc-interface-attachment
                                         common-lisp:null)
                         :accessor
                         %gateway-bridge-source-vpc-interface-attachment
                         :initform common-lisp:nil)
                        (bridge-arn :initarg :bridge-arn :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %gateway-bridge-source-bridge-arn :initform
                         (common-lisp:error ":bridge-arn is required"))))
 (common-lisp:export
  (common-lisp:list 'gateway-bridge-source 'make-gateway-bridge-source))
 (common-lisp:defun make-gateway-bridge-source
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key vpc-interface-attachment bridge-arn)
   (common-lisp:apply #'common-lisp:make-instance 'gateway-bridge-source
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          gateway-bridge-source))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          gateway-bridge-source))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bridge-arn))
      (common-lisp:list
       (common-lisp:cons "BridgeArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'vpc-interface-attachment))
      (common-lisp:list
       (common-lisp:cons "VpcInterfaceAttachment"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          gateway-bridge-source))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass gateway-instance common-lisp:nil
                       ((running-bridge-count :initarg :running-bridge-count
                         :type (common-lisp:or |__integer| common-lisp:null)
                         :accessor %gateway-instance-running-bridge-count
                         :initform
                         (common-lisp:error
                          ":running-bridge-count is required"))
                        (instance-state :initarg :instance-state :type
                         (common-lisp:or instance-state common-lisp:null)
                         :accessor %gateway-instance-instance-state :initform
                         (common-lisp:error ":instance-state is required"))
                        (instance-messages :initarg :instance-messages :type
                         (common-lisp:or |__listOfMessageDetail|
                                         common-lisp:null)
                         :accessor %gateway-instance-instance-messages
                         :initform common-lisp:nil)
                        (instance-id :initarg :instance-id :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %gateway-instance-instance-id :initform
                         (common-lisp:error ":instance-id is required"))
                        (gateway-instance-arn :initarg :gateway-instance-arn
                         :type (common-lisp:or |__string| common-lisp:null)
                         :accessor %gateway-instance-gateway-instance-arn
                         :initform
                         (common-lisp:error
                          ":gateway-instance-arn is required"))
                        (gateway-arn :initarg :gateway-arn :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %gateway-instance-gateway-arn :initform
                         (common-lisp:error ":gateway-arn is required"))
                        (connection-status :initarg :connection-status :type
                         (common-lisp:or connection-status common-lisp:null)
                         :accessor %gateway-instance-connection-status
                         :initform
                         (common-lisp:error ":connection-status is required"))
                        (bridge-placement :initarg :bridge-placement :type
                         (common-lisp:or bridge-placement common-lisp:null)
                         :accessor %gateway-instance-bridge-placement :initform
                         (common-lisp:error ":bridge-placement is required"))))
 (common-lisp:export
  (common-lisp:list 'gateway-instance 'make-gateway-instance))
 (common-lisp:defun make-gateway-instance
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key running-bridge-count instance-state
                     instance-messages instance-id gateway-instance-arn
                     gateway-arn connection-status bridge-placement)
   (common-lisp:apply #'common-lisp:make-instance 'gateway-instance
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input gateway-instance))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input gateway-instance))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bridge-placement))
      (common-lisp:list
       (common-lisp:cons "BridgePlacement"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'connection-status))
      (common-lisp:list
       (common-lisp:cons "ConnectionStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'gateway-arn))
      (common-lisp:list
       (common-lisp:cons "GatewayArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'gateway-instance-arn))
      (common-lisp:list
       (common-lisp:cons "GatewayInstanceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-id))
      (common-lisp:list
       (common-lisp:cons "InstanceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-messages))
      (common-lisp:list
       (common-lisp:cons "InstanceMessages"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-state))
      (common-lisp:list
       (common-lisp:cons "InstanceState"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'running-bridge-count))
      (common-lisp:list
       (common-lisp:cons "RunningBridgeCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input gateway-instance))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass gateway-network common-lisp:nil
                       ((name :initarg :name :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %gateway-network-name :initform
                         (common-lisp:error ":name is required"))
                        (cidr-block :initarg :cidr-block :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %gateway-network-cidr-block :initform
                         (common-lisp:error ":cidr-block is required"))))
 (common-lisp:export (common-lisp:list 'gateway-network 'make-gateway-network))
 (common-lisp:defun make-gateway-network
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key name cidr-block)
   (common-lisp:apply #'common-lisp:make-instance 'gateway-network
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input gateway-network))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input gateway-network))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cidr-block))
      (common-lisp:list
       (common-lisp:cons "CidrBlock"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input gateway-network))
   common-lisp:nil))
(common-lisp:deftype gateway-state () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass grant-entitlement-request common-lisp:nil
                       ((subscribers :initarg :subscribers :type
                         (common-lisp:or |__listOf__string| common-lisp:null)
                         :accessor %grant-entitlement-request-subscribers
                         :initform
                         (common-lisp:error ":subscribers is required"))
                        (name :initarg :name :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %grant-entitlement-request-name :initform
                         common-lisp:nil)
                        (entitlement-status :initarg :entitlement-status :type
                         (common-lisp:or entitlement-status common-lisp:null)
                         :accessor
                         %grant-entitlement-request-entitlement-status
                         :initform common-lisp:nil)
                        (encryption :initarg :encryption :type
                         (common-lisp:or encryption common-lisp:null) :accessor
                         %grant-entitlement-request-encryption :initform
                         common-lisp:nil)
                        (description :initarg :description :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %grant-entitlement-request-description :initform
                         common-lisp:nil)
                        (data-transfer-subscriber-fee-percent :initarg
                         :data-transfer-subscriber-fee-percent :type
                         (common-lisp:or |__integer| common-lisp:null)
                         :accessor
                         %grant-entitlement-request-data-transfer-subscriber-fee-percent
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'grant-entitlement-request
                    'make-grant-entitlement-request))
 (common-lisp:defun make-grant-entitlement-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key subscribers name entitlement-status
                     encryption description
                     data-transfer-subscriber-fee-percent)
   (common-lisp:apply #'common-lisp:make-instance 'grant-entitlement-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          grant-entitlement-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          grant-entitlement-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'data-transfer-subscriber-fee-percent))
      (common-lisp:list
       (common-lisp:cons "DataTransferSubscriberFeePercent"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'encryption))
      (common-lisp:list
       (common-lisp:cons "Encryption"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'entitlement-status))
      (common-lisp:list
       (common-lisp:cons "EntitlementStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subscribers))
      (common-lisp:list
       (common-lisp:cons "Subscribers"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          grant-entitlement-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition grant-flow-entitlements420exception
     (mediaconnect-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       grant-flow-entitlements420exception-message)))
 (common-lisp:export
  (common-lisp:list 'grant-flow-entitlements420exception
                    'grant-flow-entitlements420exception-message)))
(common-lisp:progn
 (common-lisp:defclass grant-flow-entitlements-request common-lisp:nil
                       ((flow-arn :initarg :flow-arn :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %grant-flow-entitlements-request-flow-arn :initform
                         (common-lisp:error ":flow-arn is required"))
                        (entitlements :initarg :entitlements :type
                         (common-lisp:or |__listOfGrantEntitlementRequest|
                                         common-lisp:null)
                         :accessor
                         %grant-flow-entitlements-request-entitlements
                         :initform
                         (common-lisp:error ":entitlements is required"))))
 (common-lisp:export
  (common-lisp:list 'grant-flow-entitlements-request
                    'make-grant-flow-entitlements-request))
 (common-lisp:defun make-grant-flow-entitlements-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key flow-arn entitlements)
   (common-lisp:apply #'common-lisp:make-instance
                      'grant-flow-entitlements-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          grant-flow-entitlements-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          grant-flow-entitlements-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'entitlements))
      (common-lisp:list
       (common-lisp:cons "Entitlements"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          grant-flow-entitlements-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass grant-flow-entitlements-response common-lisp:nil
                       ((flow-arn :initarg :flow-arn :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %grant-flow-entitlements-response-flow-arn :initform
                         common-lisp:nil)
                        (entitlements :initarg :entitlements :type
                         (common-lisp:or |__listOfEntitlement|
                                         common-lisp:null)
                         :accessor
                         %grant-flow-entitlements-response-entitlements
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'grant-flow-entitlements-response
                    'make-grant-flow-entitlements-response))
 (common-lisp:defun make-grant-flow-entitlements-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key flow-arn entitlements)
   (common-lisp:apply #'common-lisp:make-instance
                      'grant-flow-entitlements-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          grant-flow-entitlements-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          grant-flow-entitlements-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'entitlements))
      (common-lisp:list
       (common-lisp:cons "Entitlements"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'flow-arn))
      (common-lisp:list
       (common-lisp:cons "FlowArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          grant-flow-entitlements-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass ingress-gateway-bridge common-lisp:nil
                       ((max-outputs :initarg :max-outputs :type
                         (common-lisp:or |__integer| common-lisp:null)
                         :accessor %ingress-gateway-bridge-max-outputs
                         :initform
                         (common-lisp:error ":max-outputs is required"))
                        (max-bitrate :initarg :max-bitrate :type
                         (common-lisp:or |__integer| common-lisp:null)
                         :accessor %ingress-gateway-bridge-max-bitrate
                         :initform
                         (common-lisp:error ":max-bitrate is required"))
                        (instance-id :initarg :instance-id :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %ingress-gateway-bridge-instance-id :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'ingress-gateway-bridge 'make-ingress-gateway-bridge))
 (common-lisp:defun make-ingress-gateway-bridge
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key max-outputs max-bitrate instance-id)
   (common-lisp:apply #'common-lisp:make-instance 'ingress-gateway-bridge
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          ingress-gateway-bridge))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          ingress-gateway-bridge))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-id))
      (common-lisp:list
       (common-lisp:cons "InstanceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-bitrate))
      (common-lisp:list
       (common-lisp:cons "MaxBitrate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-outputs))
      (common-lisp:list
       (common-lisp:cons "MaxOutputs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          ingress-gateway-bridge))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass input-configuration common-lisp:nil
                       ((interface :initarg :interface :type
                         (common-lisp:or interface common-lisp:null) :accessor
                         %input-configuration-interface :initform
                         (common-lisp:error ":interface is required"))
                        (input-port :initarg :input-port :type
                         (common-lisp:or |__integer| common-lisp:null)
                         :accessor %input-configuration-input-port :initform
                         (common-lisp:error ":input-port is required"))
                        (input-ip :initarg :input-ip :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %input-configuration-input-ip :initform
                         (common-lisp:error ":input-ip is required"))))
 (common-lisp:export
  (common-lisp:list 'input-configuration 'make-input-configuration))
 (common-lisp:defun make-input-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key interface input-port input-ip)
   (common-lisp:apply #'common-lisp:make-instance 'input-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input input-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input input-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'input-ip))
      (common-lisp:list
       (common-lisp:cons "InputIp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'input-port))
      (common-lisp:list
       (common-lisp:cons "InputPort"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'interface))
      (common-lisp:list
       (common-lisp:cons "Interface"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input input-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass input-configuration-request common-lisp:nil
                       ((interface :initarg :interface :type
                         (common-lisp:or interface-request common-lisp:null)
                         :accessor %input-configuration-request-interface
                         :initform
                         (common-lisp:error ":interface is required"))
                        (input-port :initarg :input-port :type
                         (common-lisp:or |__integer| common-lisp:null)
                         :accessor %input-configuration-request-input-port
                         :initform
                         (common-lisp:error ":input-port is required"))))
 (common-lisp:export
  (common-lisp:list 'input-configuration-request
                    'make-input-configuration-request))
 (common-lisp:defun make-input-configuration-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key interface input-port)
   (common-lisp:apply #'common-lisp:make-instance 'input-configuration-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          input-configuration-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          input-configuration-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'input-port))
      (common-lisp:list
       (common-lisp:cons "InputPort"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'interface))
      (common-lisp:list
       (common-lisp:cons "Interface"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          input-configuration-request))
   common-lisp:nil))
(common-lisp:deftype instance-state () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass interface common-lisp:nil
                       ((name :initarg :name :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %interface-name :initform
                         (common-lisp:error ":name is required"))))
 (common-lisp:export (common-lisp:list 'interface 'make-interface))
 (common-lisp:defun make-interface
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key name)
   (common-lisp:apply #'common-lisp:make-instance 'interface
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input interface))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input interface))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input interface))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass interface-request common-lisp:nil
                       ((name :initarg :name :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %interface-request-name :initform
                         (common-lisp:error ":name is required"))))
 (common-lisp:export
  (common-lisp:list 'interface-request 'make-interface-request))
 (common-lisp:defun make-interface-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key name)
   (common-lisp:apply #'common-lisp:make-instance 'interface-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input interface-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input interface-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input interface-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition internal-server-error-exception
     (mediaconnect-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       internal-server-error-exception-message)))
 (common-lisp:export
  (common-lisp:list 'internal-server-error-exception
                    'internal-server-error-exception-message)))
(common-lisp:deftype key-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass list-bridges-request common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %list-bridges-request-next-token :initform
                         common-lisp:nil)
                        (max-results :initarg :max-results :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor %list-bridges-request-max-results :initform
                         common-lisp:nil)
                        (filter-arn :initarg :filter-arn :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %list-bridges-request-filter-arn :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-bridges-request 'make-list-bridges-request))
 (common-lisp:defun make-list-bridges-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token max-results filter-arn)
   (common-lisp:apply #'common-lisp:make-instance 'list-bridges-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-bridges-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-bridges-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-bridges-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-bridges-response common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %list-bridges-response-next-token :initform
                         common-lisp:nil)
                        (bridges :initarg :bridges :type
                         (common-lisp:or |__listOfListedBridge|
                                         common-lisp:null)
                         :accessor %list-bridges-response-bridges :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-bridges-response 'make-list-bridges-response))
 (common-lisp:defun make-list-bridges-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token bridges)
   (common-lisp:apply #'common-lisp:make-instance 'list-bridges-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-bridges-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-bridges-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bridges))
      (common-lisp:list
       (common-lisp:cons "Bridges"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-bridges-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-entitlements-request common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %list-entitlements-request-next-token :initform
                         common-lisp:nil)
                        (max-results :initarg :max-results :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor %list-entitlements-request-max-results
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-entitlements-request
                    'make-list-entitlements-request))
 (common-lisp:defun make-list-entitlements-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token max-results)
   (common-lisp:apply #'common-lisp:make-instance 'list-entitlements-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-entitlements-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-entitlements-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-entitlements-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-entitlements-response common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %list-entitlements-response-next-token :initform
                         common-lisp:nil)
                        (entitlements :initarg :entitlements :type
                         (common-lisp:or |__listOfListedEntitlement|
                                         common-lisp:null)
                         :accessor %list-entitlements-response-entitlements
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-entitlements-response
                    'make-list-entitlements-response))
 (common-lisp:defun make-list-entitlements-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token entitlements)
   (common-lisp:apply #'common-lisp:make-instance 'list-entitlements-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-entitlements-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-entitlements-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'entitlements))
      (common-lisp:list
       (common-lisp:cons "Entitlements"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-entitlements-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-flows-request common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %list-flows-request-next-token :initform
                         common-lisp:nil)
                        (max-results :initarg :max-results :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor %list-flows-request-max-results :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-flows-request 'make-list-flows-request))
 (common-lisp:defun make-list-flows-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token max-results)
   (common-lisp:apply #'common-lisp:make-instance 'list-flows-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-flows-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-flows-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-flows-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-flows-response common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %list-flows-response-next-token :initform
                         common-lisp:nil)
                        (flows :initarg :flows :type
                         (common-lisp:or |__listOfListedFlow| common-lisp:null)
                         :accessor %list-flows-response-flows :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-flows-response 'make-list-flows-response))
 (common-lisp:defun make-list-flows-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token flows)
   (common-lisp:apply #'common-lisp:make-instance 'list-flows-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-flows-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-flows-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'flows))
      (common-lisp:list
       (common-lisp:cons "Flows"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-flows-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-gateway-instances-request common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %list-gateway-instances-request-next-token :initform
                         common-lisp:nil)
                        (max-results :initarg :max-results :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor %list-gateway-instances-request-max-results
                         :initform common-lisp:nil)
                        (filter-arn :initarg :filter-arn :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %list-gateway-instances-request-filter-arn :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-gateway-instances-request
                    'make-list-gateway-instances-request))
 (common-lisp:defun make-list-gateway-instances-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token max-results filter-arn)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-gateway-instances-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-gateway-instances-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-gateway-instances-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-gateway-instances-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-gateway-instances-response common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %list-gateway-instances-response-next-token :initform
                         common-lisp:nil)
                        (instances :initarg :instances :type
                         (common-lisp:or |__listOfListedGatewayInstance|
                                         common-lisp:null)
                         :accessor %list-gateway-instances-response-instances
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-gateway-instances-response
                    'make-list-gateway-instances-response))
 (common-lisp:defun make-list-gateway-instances-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token instances)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-gateway-instances-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-gateway-instances-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-gateway-instances-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instances))
      (common-lisp:list
       (common-lisp:cons "Instances"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-gateway-instances-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-gateways-request common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %list-gateways-request-next-token :initform
                         common-lisp:nil)
                        (max-results :initarg :max-results :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor %list-gateways-request-max-results :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-gateways-request 'make-list-gateways-request))
 (common-lisp:defun make-list-gateways-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token max-results)
   (common-lisp:apply #'common-lisp:make-instance 'list-gateways-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-gateways-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-gateways-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-gateways-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-gateways-response common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %list-gateways-response-next-token :initform
                         common-lisp:nil)
                        (gateways :initarg :gateways :type
                         (common-lisp:or |__listOfListedGateway|
                                         common-lisp:null)
                         :accessor %list-gateways-response-gateways :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-gateways-response 'make-list-gateways-response))
 (common-lisp:defun make-list-gateways-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token gateways)
   (common-lisp:apply #'common-lisp:make-instance 'list-gateways-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-gateways-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-gateways-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'gateways))
      (common-lisp:list
       (common-lisp:cons "Gateways"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-gateways-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-offerings-request common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %list-offerings-request-next-token :initform
                         common-lisp:nil)
                        (max-results :initarg :max-results :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor %list-offerings-request-max-results
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-offerings-request 'make-list-offerings-request))
 (common-lisp:defun make-list-offerings-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token max-results)
   (common-lisp:apply #'common-lisp:make-instance 'list-offerings-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-offerings-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-offerings-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-offerings-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-offerings-response common-lisp:nil
                       ((offerings :initarg :offerings :type
                         (common-lisp:or |__listOfOffering| common-lisp:null)
                         :accessor %list-offerings-response-offerings :initform
                         common-lisp:nil)
                        (next-token :initarg :next-token :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %list-offerings-response-next-token :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-offerings-response 'make-list-offerings-response))
 (common-lisp:defun make-list-offerings-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key offerings next-token)
   (common-lisp:apply #'common-lisp:make-instance 'list-offerings-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-offerings-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-offerings-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'offerings))
      (common-lisp:list
       (common-lisp:cons "Offerings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-offerings-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-reservations-request common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %list-reservations-request-next-token :initform
                         common-lisp:nil)
                        (max-results :initarg :max-results :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor %list-reservations-request-max-results
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-reservations-request
                    'make-list-reservations-request))
 (common-lisp:defun make-list-reservations-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token max-results)
   (common-lisp:apply #'common-lisp:make-instance 'list-reservations-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-reservations-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-reservations-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-reservations-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-reservations-response common-lisp:nil
                       ((reservations :initarg :reservations :type
                         (common-lisp:or |__listOfReservation|
                                         common-lisp:null)
                         :accessor %list-reservations-response-reservations
                         :initform common-lisp:nil)
                        (next-token :initarg :next-token :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %list-reservations-response-next-token :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-reservations-response
                    'make-list-reservations-response))
 (common-lisp:defun make-list-reservations-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key reservations next-token)
   (common-lisp:apply #'common-lisp:make-instance 'list-reservations-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-reservations-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-reservations-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'reservations))
      (common-lisp:list
       (common-lisp:cons "Reservations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-reservations-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-tags-for-resource-request common-lisp:nil
                       ((resource-arn :initarg :resource-arn :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %list-tags-for-resource-request-resource-arn :initform
                         (common-lisp:error ":resource-arn is required"))))
 (common-lisp:export
  (common-lisp:list 'list-tags-for-resource-request
                    'make-list-tags-for-resource-request))
 (common-lisp:defun make-list-tags-for-resource-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key resource-arn)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-tags-for-resource-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-tags-for-resource-response common-lisp:nil
                       ((tags :initarg :tags :type
                         (common-lisp:or |__mapOf__string| common-lisp:null)
                         :accessor %list-tags-for-resource-response-tags
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-tags-for-resource-response
                    'make-list-tags-for-resource-response))
 (common-lisp:defun make-list-tags-for-resource-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tags)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-tags-for-resource-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass listed-bridge common-lisp:nil
                       ((placement-arn :initarg :placement-arn :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %listed-bridge-placement-arn :initform
                         (common-lisp:error ":placement-arn is required"))
                        (name :initarg :name :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %listed-bridge-name :initform
                         (common-lisp:error ":name is required"))
                        (bridge-type :initarg :bridge-type :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %listed-bridge-bridge-type :initform
                         (common-lisp:error ":bridge-type is required"))
                        (bridge-state :initarg :bridge-state :type
                         (common-lisp:or bridge-state common-lisp:null)
                         :accessor %listed-bridge-bridge-state :initform
                         (common-lisp:error ":bridge-state is required"))
                        (bridge-arn :initarg :bridge-arn :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %listed-bridge-bridge-arn :initform
                         (common-lisp:error ":bridge-arn is required"))))
 (common-lisp:export (common-lisp:list 'listed-bridge 'make-listed-bridge))
 (common-lisp:defun make-listed-bridge
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key placement-arn name bridge-type
                     bridge-state bridge-arn)
   (common-lisp:apply #'common-lisp:make-instance 'listed-bridge
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input listed-bridge))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input listed-bridge))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bridge-arn))
      (common-lisp:list
       (common-lisp:cons "BridgeArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bridge-state))
      (common-lisp:list
       (common-lisp:cons "BridgeState"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bridge-type))
      (common-lisp:list
       (common-lisp:cons "BridgeType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'placement-arn))
      (common-lisp:list
       (common-lisp:cons "PlacementArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input listed-bridge))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass listed-entitlement common-lisp:nil
                       ((entitlement-name :initarg :entitlement-name :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %listed-entitlement-entitlement-name :initform
                         (common-lisp:error ":entitlement-name is required"))
                        (entitlement-arn :initarg :entitlement-arn :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %listed-entitlement-entitlement-arn :initform
                         (common-lisp:error ":entitlement-arn is required"))
                        (data-transfer-subscriber-fee-percent :initarg
                         :data-transfer-subscriber-fee-percent :type
                         (common-lisp:or |__integer| common-lisp:null)
                         :accessor
                         %listed-entitlement-data-transfer-subscriber-fee-percent
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'listed-entitlement 'make-listed-entitlement))
 (common-lisp:defun make-listed-entitlement
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key entitlement-name entitlement-arn
                     data-transfer-subscriber-fee-percent)
   (common-lisp:apply #'common-lisp:make-instance 'listed-entitlement
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input listed-entitlement))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input listed-entitlement))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'data-transfer-subscriber-fee-percent))
      (common-lisp:list
       (common-lisp:cons "DataTransferSubscriberFeePercent"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'entitlement-arn))
      (common-lisp:list
       (common-lisp:cons "EntitlementArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'entitlement-name))
      (common-lisp:list
       (common-lisp:cons "EntitlementName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input listed-entitlement))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass listed-flow common-lisp:nil
                       ((maintenance :initarg :maintenance :type
                         (common-lisp:or maintenance common-lisp:null)
                         :accessor %listed-flow-maintenance :initform
                         common-lisp:nil)
                        (status :initarg :status :type
                         (common-lisp:or status common-lisp:null) :accessor
                         %listed-flow-status :initform
                         (common-lisp:error ":status is required"))
                        (source-type :initarg :source-type :type
                         (common-lisp:or source-type common-lisp:null)
                         :accessor %listed-flow-source-type :initform
                         (common-lisp:error ":source-type is required"))
                        (name :initarg :name :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %listed-flow-name :initform
                         (common-lisp:error ":name is required"))
                        (flow-arn :initarg :flow-arn :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %listed-flow-flow-arn :initform
                         (common-lisp:error ":flow-arn is required"))
                        (description :initarg :description :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %listed-flow-description :initform
                         (common-lisp:error ":description is required"))
                        (availability-zone :initarg :availability-zone :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %listed-flow-availability-zone :initform
                         (common-lisp:error
                          ":availability-zone is required"))))
 (common-lisp:export (common-lisp:list 'listed-flow 'make-listed-flow))
 (common-lisp:defun make-listed-flow
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key maintenance status source-type name
                     flow-arn description availability-zone)
   (common-lisp:apply #'common-lisp:make-instance 'listed-flow
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input listed-flow))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input listed-flow))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'availability-zone))
      (common-lisp:list
       (common-lisp:cons "AvailabilityZone"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'flow-arn))
      (common-lisp:list
       (common-lisp:cons "FlowArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-type))
      (common-lisp:list
       (common-lisp:cons "SourceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'maintenance))
      (common-lisp:list
       (common-lisp:cons "Maintenance"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input listed-flow))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass listed-gateway common-lisp:nil
                       ((name :initarg :name :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %listed-gateway-name :initform
                         (common-lisp:error ":name is required"))
                        (gateway-state :initarg :gateway-state :type
                         (common-lisp:or gateway-state common-lisp:null)
                         :accessor %listed-gateway-gateway-state :initform
                         (common-lisp:error ":gateway-state is required"))
                        (gateway-arn :initarg :gateway-arn :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %listed-gateway-gateway-arn :initform
                         (common-lisp:error ":gateway-arn is required"))))
 (common-lisp:export (common-lisp:list 'listed-gateway 'make-listed-gateway))
 (common-lisp:defun make-listed-gateway
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key name gateway-state gateway-arn)
   (common-lisp:apply #'common-lisp:make-instance 'listed-gateway
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input listed-gateway))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input listed-gateway))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'gateway-arn))
      (common-lisp:list
       (common-lisp:cons "GatewayArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'gateway-state))
      (common-lisp:list
       (common-lisp:cons "GatewayState"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input listed-gateway))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass listed-gateway-instance common-lisp:nil
                       ((instance-state :initarg :instance-state :type
                         (common-lisp:or instance-state common-lisp:null)
                         :accessor %listed-gateway-instance-instance-state
                         :initform common-lisp:nil)
                        (instance-id :initarg :instance-id :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %listed-gateway-instance-instance-id :initform
                         (common-lisp:error ":instance-id is required"))
                        (gateway-instance-arn :initarg :gateway-instance-arn
                         :type (common-lisp:or |__string| common-lisp:null)
                         :accessor
                         %listed-gateway-instance-gateway-instance-arn
                         :initform
                         (common-lisp:error
                          ":gateway-instance-arn is required"))
                        (gateway-arn :initarg :gateway-arn :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %listed-gateway-instance-gateway-arn :initform
                         (common-lisp:error ":gateway-arn is required"))))
 (common-lisp:export
  (common-lisp:list 'listed-gateway-instance 'make-listed-gateway-instance))
 (common-lisp:defun make-listed-gateway-instance
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key instance-state instance-id
                     gateway-instance-arn gateway-arn)
   (common-lisp:apply #'common-lisp:make-instance 'listed-gateway-instance
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          listed-gateway-instance))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          listed-gateway-instance))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'gateway-arn))
      (common-lisp:list
       (common-lisp:cons "GatewayArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'gateway-instance-arn))
      (common-lisp:list
       (common-lisp:cons "GatewayInstanceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-id))
      (common-lisp:list
       (common-lisp:cons "InstanceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-state))
      (common-lisp:list
       (common-lisp:cons "InstanceState"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          listed-gateway-instance))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass maintenance common-lisp:nil
                       ((maintenance-start-hour :initarg
                         :maintenance-start-hour :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %maintenance-maintenance-start-hour :initform
                         common-lisp:nil)
                        (maintenance-scheduled-date :initarg
                         :maintenance-scheduled-date :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %maintenance-maintenance-scheduled-date :initform
                         common-lisp:nil)
                        (maintenance-deadline :initarg :maintenance-deadline
                         :type (common-lisp:or |__string| common-lisp:null)
                         :accessor %maintenance-maintenance-deadline :initform
                         common-lisp:nil)
                        (maintenance-day :initarg :maintenance-day :type
                         (common-lisp:or maintenance-day common-lisp:null)
                         :accessor %maintenance-maintenance-day :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'maintenance 'make-maintenance))
 (common-lisp:defun make-maintenance
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key maintenance-start-hour
                     maintenance-scheduled-date maintenance-deadline
                     maintenance-day)
   (common-lisp:apply #'common-lisp:make-instance 'maintenance
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input maintenance))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input maintenance))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'maintenance-day))
      (common-lisp:list
       (common-lisp:cons "MaintenanceDay"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'maintenance-deadline))
      (common-lisp:list
       (common-lisp:cons "MaintenanceDeadline"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'maintenance-scheduled-date))
      (common-lisp:list
       (common-lisp:cons "MaintenanceScheduledDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'maintenance-start-hour))
      (common-lisp:list
       (common-lisp:cons "MaintenanceStartHour"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input maintenance))
   common-lisp:nil))
(common-lisp:deftype maintenance-day () 'common-lisp:string)
(common-lisp:deftype max-results () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass media-stream common-lisp:nil
                       ((video-format :initarg :video-format :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %media-stream-video-format :initform common-lisp:nil)
                        (media-stream-type :initarg :media-stream-type :type
                         (common-lisp:or media-stream-type common-lisp:null)
                         :accessor %media-stream-media-stream-type :initform
                         (common-lisp:error ":media-stream-type is required"))
                        (media-stream-name :initarg :media-stream-name :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %media-stream-media-stream-name :initform
                         (common-lisp:error ":media-stream-name is required"))
                        (media-stream-id :initarg :media-stream-id :type
                         (common-lisp:or |__integer| common-lisp:null)
                         :accessor %media-stream-media-stream-id :initform
                         (common-lisp:error ":media-stream-id is required"))
                        (fmt :initarg :fmt :type
                         (common-lisp:or |__integer| common-lisp:null)
                         :accessor %media-stream-fmt :initform
                         (common-lisp:error ":fmt is required"))
                        (description :initarg :description :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %media-stream-description :initform common-lisp:nil)
                        (clock-rate :initarg :clock-rate :type
                         (common-lisp:or |__integer| common-lisp:null)
                         :accessor %media-stream-clock-rate :initform
                         common-lisp:nil)
                        (attributes :initarg :attributes :type
                         (common-lisp:or media-stream-attributes
                                         common-lisp:null)
                         :accessor %media-stream-attributes :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'media-stream 'make-media-stream))
 (common-lisp:defun make-media-stream
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key video-format media-stream-type
                     media-stream-name media-stream-id fmt description
                     clock-rate attributes)
   (common-lisp:apply #'common-lisp:make-instance 'media-stream
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input media-stream))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input media-stream))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'attributes))
      (common-lisp:list
       (common-lisp:cons "Attributes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'clock-rate))
      (common-lisp:list
       (common-lisp:cons "ClockRate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'fmt))
      (common-lisp:list
       (common-lisp:cons "Fmt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'media-stream-id))
      (common-lisp:list
       (common-lisp:cons "MediaStreamId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'media-stream-name))
      (common-lisp:list
       (common-lisp:cons "MediaStreamName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'media-stream-type))
      (common-lisp:list
       (common-lisp:cons "MediaStreamType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'video-format))
      (common-lisp:list
       (common-lisp:cons "VideoFormat"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input media-stream))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass media-stream-attributes common-lisp:nil
                       ((lang :initarg :lang :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %media-stream-attributes-lang :initform
                         common-lisp:nil)
                        (fmtp :initarg :fmtp :type
                         (common-lisp:or fmtp common-lisp:null) :accessor
                         %media-stream-attributes-fmtp :initform
                         (common-lisp:error ":fmtp is required"))))
 (common-lisp:export
  (common-lisp:list 'media-stream-attributes 'make-media-stream-attributes))
 (common-lisp:defun make-media-stream-attributes
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key lang fmtp)
   (common-lisp:apply #'common-lisp:make-instance 'media-stream-attributes
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          media-stream-attributes))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          media-stream-attributes))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'fmtp))
      (common-lisp:list
       (common-lisp:cons "Fmtp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'lang))
      (common-lisp:list
       (common-lisp:cons "Lang"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          media-stream-attributes))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass media-stream-attributes-request common-lisp:nil
                       ((lang :initarg :lang :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %media-stream-attributes-request-lang :initform
                         common-lisp:nil)
                        (fmtp :initarg :fmtp :type
                         (common-lisp:or fmtp-request common-lisp:null)
                         :accessor %media-stream-attributes-request-fmtp
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'media-stream-attributes-request
                    'make-media-stream-attributes-request))
 (common-lisp:defun make-media-stream-attributes-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key lang fmtp)
   (common-lisp:apply #'common-lisp:make-instance
                      'media-stream-attributes-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          media-stream-attributes-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          media-stream-attributes-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'fmtp))
      (common-lisp:list
       (common-lisp:cons "Fmtp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'lang))
      (common-lisp:list
       (common-lisp:cons "Lang"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          media-stream-attributes-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass media-stream-output-configuration common-lisp:nil
                       ((media-stream-name :initarg :media-stream-name :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %media-stream-output-configuration-media-stream-name
                         :initform
                         (common-lisp:error ":media-stream-name is required"))
                        (encoding-parameters :initarg :encoding-parameters
                         :type
                         (common-lisp:or encoding-parameters common-lisp:null)
                         :accessor
                         %media-stream-output-configuration-encoding-parameters
                         :initform common-lisp:nil)
                        (encoding-name :initarg :encoding-name :type
                         (common-lisp:or encoding-name common-lisp:null)
                         :accessor
                         %media-stream-output-configuration-encoding-name
                         :initform
                         (common-lisp:error ":encoding-name is required"))
                        (destination-configurations :initarg
                         :destination-configurations :type
                         (common-lisp:or |__listOfDestinationConfiguration|
                                         common-lisp:null)
                         :accessor
                         %media-stream-output-configuration-destination-configurations
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'media-stream-output-configuration
                    'make-media-stream-output-configuration))
 (common-lisp:defun make-media-stream-output-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key media-stream-name encoding-parameters
                     encoding-name destination-configurations)
   (common-lisp:apply #'common-lisp:make-instance
                      'media-stream-output-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          media-stream-output-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          media-stream-output-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'destination-configurations))
      (common-lisp:list
       (common-lisp:cons "DestinationConfigurations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'encoding-name))
      (common-lisp:list
       (common-lisp:cons "EncodingName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'encoding-parameters))
      (common-lisp:list
       (common-lisp:cons "EncodingParameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'media-stream-name))
      (common-lisp:list
       (common-lisp:cons "MediaStreamName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          media-stream-output-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass media-stream-output-configuration-request
                       common-lisp:nil
                       ((media-stream-name :initarg :media-stream-name :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %media-stream-output-configuration-request-media-stream-name
                         :initform
                         (common-lisp:error ":media-stream-name is required"))
                        (encoding-parameters :initarg :encoding-parameters
                         :type
                         (common-lisp:or encoding-parameters-request
                                         common-lisp:null)
                         :accessor
                         %media-stream-output-configuration-request-encoding-parameters
                         :initform common-lisp:nil)
                        (encoding-name :initarg :encoding-name :type
                         (common-lisp:or encoding-name common-lisp:null)
                         :accessor
                         %media-stream-output-configuration-request-encoding-name
                         :initform
                         (common-lisp:error ":encoding-name is required"))
                        (destination-configurations :initarg
                         :destination-configurations :type
                         (common-lisp:or
                          |__listOfDestinationConfigurationRequest|
                          common-lisp:null)
                         :accessor
                         %media-stream-output-configuration-request-destination-configurations
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'media-stream-output-configuration-request
                    'make-media-stream-output-configuration-request))
 (common-lisp:defun make-media-stream-output-configuration-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key media-stream-name encoding-parameters
                     encoding-name destination-configurations)
   (common-lisp:apply #'common-lisp:make-instance
                      'media-stream-output-configuration-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          media-stream-output-configuration-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          media-stream-output-configuration-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'destination-configurations))
      (common-lisp:list
       (common-lisp:cons "DestinationConfigurations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'encoding-name))
      (common-lisp:list
       (common-lisp:cons "EncodingName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'encoding-parameters))
      (common-lisp:list
       (common-lisp:cons "EncodingParameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'media-stream-name))
      (common-lisp:list
       (common-lisp:cons "MediaStreamName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          media-stream-output-configuration-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass media-stream-source-configuration common-lisp:nil
                       ((media-stream-name :initarg :media-stream-name :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %media-stream-source-configuration-media-stream-name
                         :initform
                         (common-lisp:error ":media-stream-name is required"))
                        (input-configurations :initarg :input-configurations
                         :type
                         (common-lisp:or |__listOfInputConfiguration|
                                         common-lisp:null)
                         :accessor
                         %media-stream-source-configuration-input-configurations
                         :initform common-lisp:nil)
                        (encoding-name :initarg :encoding-name :type
                         (common-lisp:or encoding-name common-lisp:null)
                         :accessor
                         %media-stream-source-configuration-encoding-name
                         :initform
                         (common-lisp:error ":encoding-name is required"))))
 (common-lisp:export
  (common-lisp:list 'media-stream-source-configuration
                    'make-media-stream-source-configuration))
 (common-lisp:defun make-media-stream-source-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key media-stream-name input-configurations
                     encoding-name)
   (common-lisp:apply #'common-lisp:make-instance
                      'media-stream-source-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          media-stream-source-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          media-stream-source-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'encoding-name))
      (common-lisp:list
       (common-lisp:cons "EncodingName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'input-configurations))
      (common-lisp:list
       (common-lisp:cons "InputConfigurations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'media-stream-name))
      (common-lisp:list
       (common-lisp:cons "MediaStreamName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          media-stream-source-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass media-stream-source-configuration-request
                       common-lisp:nil
                       ((media-stream-name :initarg :media-stream-name :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %media-stream-source-configuration-request-media-stream-name
                         :initform
                         (common-lisp:error ":media-stream-name is required"))
                        (input-configurations :initarg :input-configurations
                         :type
                         (common-lisp:or |__listOfInputConfigurationRequest|
                                         common-lisp:null)
                         :accessor
                         %media-stream-source-configuration-request-input-configurations
                         :initform common-lisp:nil)
                        (encoding-name :initarg :encoding-name :type
                         (common-lisp:or encoding-name common-lisp:null)
                         :accessor
                         %media-stream-source-configuration-request-encoding-name
                         :initform
                         (common-lisp:error ":encoding-name is required"))))
 (common-lisp:export
  (common-lisp:list 'media-stream-source-configuration-request
                    'make-media-stream-source-configuration-request))
 (common-lisp:defun make-media-stream-source-configuration-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key media-stream-name input-configurations
                     encoding-name)
   (common-lisp:apply #'common-lisp:make-instance
                      'media-stream-source-configuration-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          media-stream-source-configuration-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          media-stream-source-configuration-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'encoding-name))
      (common-lisp:list
       (common-lisp:cons "EncodingName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'input-configurations))
      (common-lisp:list
       (common-lisp:cons "InputConfigurations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'media-stream-name))
      (common-lisp:list
       (common-lisp:cons "MediaStreamName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          media-stream-source-configuration-request))
   common-lisp:nil))
(common-lisp:deftype media-stream-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass message-detail common-lisp:nil
                       ((resource-name :initarg :resource-name :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %message-detail-resource-name :initform
                         common-lisp:nil)
                        (message :initarg :message :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %message-detail-message :initform
                         (common-lisp:error ":message is required"))
                        (code :initarg :code :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %message-detail-code :initform
                         (common-lisp:error ":code is required"))))
 (common-lisp:export (common-lisp:list 'message-detail 'make-message-detail))
 (common-lisp:defun make-message-detail
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key resource-name message code)
   (common-lisp:apply #'common-lisp:make-instance 'message-detail
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input message-detail))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input message-detail))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'code))
      (common-lisp:list
       (common-lisp:cons "Code"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message))
      (common-lisp:list
       (common-lisp:cons "Message"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-name))
      (common-lisp:list
       (common-lisp:cons "ResourceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input message-detail))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass messages common-lisp:nil
                       ((errors :initarg :errors :type
                         (common-lisp:or |__listOf__string| common-lisp:null)
                         :accessor %messages-errors :initform
                         (common-lisp:error ":errors is required"))))
 (common-lisp:export (common-lisp:list 'messages 'make-messages))
 (common-lisp:defun make-messages
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key errors)
   (common-lisp:apply #'common-lisp:make-instance 'messages
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input messages))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input messages))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'errors))
      (common-lisp:list
       (common-lisp:cons "Errors"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input messages))
   common-lisp:nil))
(common-lisp:deftype network-interface-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition not-found-exception
     (mediaconnect-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       not-found-exception-message)))
 (common-lisp:export
  (common-lisp:list 'not-found-exception 'not-found-exception-message)))
(common-lisp:progn
 (common-lisp:defclass offering common-lisp:nil
                       ((resource-specification :initarg
                         :resource-specification :type
                         (common-lisp:or resource-specification
                                         common-lisp:null)
                         :accessor %offering-resource-specification :initform
                         (common-lisp:error
                          ":resource-specification is required"))
                        (price-units :initarg :price-units :type
                         (common-lisp:or price-units common-lisp:null)
                         :accessor %offering-price-units :initform
                         (common-lisp:error ":price-units is required"))
                        (price-per-unit :initarg :price-per-unit :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %offering-price-per-unit :initform
                         (common-lisp:error ":price-per-unit is required"))
                        (offering-description :initarg :offering-description
                         :type (common-lisp:or |__string| common-lisp:null)
                         :accessor %offering-offering-description :initform
                         (common-lisp:error
                          ":offering-description is required"))
                        (offering-arn :initarg :offering-arn :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %offering-offering-arn :initform
                         (common-lisp:error ":offering-arn is required"))
                        (duration-units :initarg :duration-units :type
                         (common-lisp:or duration-units common-lisp:null)
                         :accessor %offering-duration-units :initform
                         (common-lisp:error ":duration-units is required"))
                        (duration :initarg :duration :type
                         (common-lisp:or |__integer| common-lisp:null)
                         :accessor %offering-duration :initform
                         (common-lisp:error ":duration is required"))
                        (currency-code :initarg :currency-code :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %offering-currency-code :initform
                         (common-lisp:error ":currency-code is required"))))
 (common-lisp:export (common-lisp:list 'offering 'make-offering))
 (common-lisp:defun make-offering
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key resource-specification price-units
                     price-per-unit offering-description offering-arn
                     duration-units duration currency-code)
   (common-lisp:apply #'common-lisp:make-instance 'offering
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input offering))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input offering))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'currency-code))
      (common-lisp:list
       (common-lisp:cons "CurrencyCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'duration))
      (common-lisp:list
       (common-lisp:cons "Duration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'duration-units))
      (common-lisp:list
       (common-lisp:cons "DurationUnits"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'offering-arn))
      (common-lisp:list
       (common-lisp:cons "OfferingArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'offering-description))
      (common-lisp:list
       (common-lisp:cons "OfferingDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'price-per-unit))
      (common-lisp:list
       (common-lisp:cons "PricePerUnit"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'price-units))
      (common-lisp:list
       (common-lisp:cons "PriceUnits"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'resource-specification))
      (common-lisp:list
       (common-lisp:cons "ResourceSpecification"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input offering))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass output common-lisp:nil
                       ((bridge-ports :initarg :bridge-ports :type
                         (common-lisp:or |__listOf__integer| common-lisp:null)
                         :accessor %output-bridge-ports :initform
                         common-lisp:nil)
                        (bridge-arn :initarg :bridge-arn :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %output-bridge-arn :initform common-lisp:nil)
                        (vpc-interface-attachment :initarg
                         :vpc-interface-attachment :type
                         (common-lisp:or vpc-interface-attachment
                                         common-lisp:null)
                         :accessor %output-vpc-interface-attachment :initform
                         common-lisp:nil)
                        (transport :initarg :transport :type
                         (common-lisp:or transport common-lisp:null) :accessor
                         %output-transport :initform common-lisp:nil)
                        (port :initarg :port :type
                         (common-lisp:or |__integer| common-lisp:null)
                         :accessor %output-port :initform common-lisp:nil)
                        (output-arn :initarg :output-arn :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %output-output-arn :initform
                         (common-lisp:error ":output-arn is required"))
                        (name :initarg :name :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %output-name :initform
                         (common-lisp:error ":name is required"))
                        (media-stream-output-configurations :initarg
                         :media-stream-output-configurations :type
                         (common-lisp:or
                          |__listOfMediaStreamOutputConfiguration|
                          common-lisp:null)
                         :accessor %output-media-stream-output-configurations
                         :initform common-lisp:nil)
                        (media-live-input-arn :initarg :media-live-input-arn
                         :type (common-lisp:or |__string| common-lisp:null)
                         :accessor %output-media-live-input-arn :initform
                         common-lisp:nil)
                        (listener-address :initarg :listener-address :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %output-listener-address :initform common-lisp:nil)
                        (entitlement-arn :initarg :entitlement-arn :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %output-entitlement-arn :initform common-lisp:nil)
                        (encryption :initarg :encryption :type
                         (common-lisp:or encryption common-lisp:null) :accessor
                         %output-encryption :initform common-lisp:nil)
                        (destination :initarg :destination :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %output-destination :initform common-lisp:nil)
                        (description :initarg :description :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %output-description :initform common-lisp:nil)
                        (data-transfer-subscriber-fee-percent :initarg
                         :data-transfer-subscriber-fee-percent :type
                         (common-lisp:or |__integer| common-lisp:null)
                         :accessor %output-data-transfer-subscriber-fee-percent
                         :initform common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'output 'make-output))
 (common-lisp:defun make-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key bridge-ports bridge-arn
                     vpc-interface-attachment transport port output-arn name
                     media-stream-output-configurations media-live-input-arn
                     listener-address entitlement-arn encryption destination
                     description data-transfer-subscriber-fee-percent)
   (common-lisp:apply #'common-lisp:make-instance 'output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'data-transfer-subscriber-fee-percent))
      (common-lisp:list
       (common-lisp:cons "DataTransferSubscriberFeePercent"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'destination))
      (common-lisp:list
       (common-lisp:cons "Destination"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'encryption))
      (common-lisp:list
       (common-lisp:cons "Encryption"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'entitlement-arn))
      (common-lisp:list
       (common-lisp:cons "EntitlementArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'listener-address))
      (common-lisp:list
       (common-lisp:cons "ListenerAddress"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'media-live-input-arn))
      (common-lisp:list
       (common-lisp:cons "MediaLiveInputArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'media-stream-output-configurations))
      (common-lisp:list
       (common-lisp:cons "MediaStreamOutputConfigurations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'output-arn))
      (common-lisp:list
       (common-lisp:cons "OutputArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'port))
      (common-lisp:list
       (common-lisp:cons "Port"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'transport))
      (common-lisp:list
       (common-lisp:cons "Transport"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'vpc-interface-attachment))
      (common-lisp:list
       (common-lisp:cons "VpcInterfaceAttachment"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bridge-arn))
      (common-lisp:list
       (common-lisp:cons "BridgeArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bridge-ports))
      (common-lisp:list
       (common-lisp:cons "BridgePorts"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input output))
   common-lisp:nil))
(common-lisp:deftype price-units () 'common-lisp:string)
(common-lisp:deftype protocol () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass purchase-offering-request common-lisp:nil
                       ((start :initarg :start :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %purchase-offering-request-start :initform
                         (common-lisp:error ":start is required"))
                        (reservation-name :initarg :reservation-name :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %purchase-offering-request-reservation-name :initform
                         (common-lisp:error ":reservation-name is required"))
                        (offering-arn :initarg :offering-arn :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %purchase-offering-request-offering-arn :initform
                         (common-lisp:error ":offering-arn is required"))))
 (common-lisp:export
  (common-lisp:list 'purchase-offering-request
                    'make-purchase-offering-request))
 (common-lisp:defun make-purchase-offering-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key start reservation-name offering-arn)
   (common-lisp:apply #'common-lisp:make-instance 'purchase-offering-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          purchase-offering-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          purchase-offering-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'reservation-name))
      (common-lisp:list
       (common-lisp:cons "ReservationName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start))
      (common-lisp:list
       (common-lisp:cons "Start"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          purchase-offering-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass purchase-offering-response common-lisp:nil
                       ((reservation :initarg :reservation :type
                         (common-lisp:or reservation common-lisp:null)
                         :accessor %purchase-offering-response-reservation
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'purchase-offering-response
                    'make-purchase-offering-response))
 (common-lisp:defun make-purchase-offering-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key reservation)
   (common-lisp:apply #'common-lisp:make-instance 'purchase-offering-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          purchase-offering-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          purchase-offering-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'reservation))
      (common-lisp:list
       (common-lisp:cons "Reservation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          purchase-offering-response))
   common-lisp:nil))
(common-lisp:deftype range () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass remove-bridge-output-request common-lisp:nil
                       ((output-name :initarg :output-name :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %remove-bridge-output-request-output-name :initform
                         (common-lisp:error ":output-name is required"))
                        (bridge-arn :initarg :bridge-arn :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %remove-bridge-output-request-bridge-arn :initform
                         (common-lisp:error ":bridge-arn is required"))))
 (common-lisp:export
  (common-lisp:list 'remove-bridge-output-request
                    'make-remove-bridge-output-request))
 (common-lisp:defun make-remove-bridge-output-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key output-name bridge-arn)
   (common-lisp:apply #'common-lisp:make-instance 'remove-bridge-output-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          remove-bridge-output-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          remove-bridge-output-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          remove-bridge-output-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass remove-bridge-output-response common-lisp:nil
                       ((output-name :initarg :output-name :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %remove-bridge-output-response-output-name :initform
                         common-lisp:nil)
                        (bridge-arn :initarg :bridge-arn :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %remove-bridge-output-response-bridge-arn :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'remove-bridge-output-response
                    'make-remove-bridge-output-response))
 (common-lisp:defun make-remove-bridge-output-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key output-name bridge-arn)
   (common-lisp:apply #'common-lisp:make-instance
                      'remove-bridge-output-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          remove-bridge-output-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          remove-bridge-output-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bridge-arn))
      (common-lisp:list
       (common-lisp:cons "BridgeArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'output-name))
      (common-lisp:list
       (common-lisp:cons "OutputName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          remove-bridge-output-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass remove-bridge-source-request common-lisp:nil
                       ((source-name :initarg :source-name :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %remove-bridge-source-request-source-name :initform
                         (common-lisp:error ":source-name is required"))
                        (bridge-arn :initarg :bridge-arn :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %remove-bridge-source-request-bridge-arn :initform
                         (common-lisp:error ":bridge-arn is required"))))
 (common-lisp:export
  (common-lisp:list 'remove-bridge-source-request
                    'make-remove-bridge-source-request))
 (common-lisp:defun make-remove-bridge-source-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key source-name bridge-arn)
   (common-lisp:apply #'common-lisp:make-instance 'remove-bridge-source-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          remove-bridge-source-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          remove-bridge-source-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          remove-bridge-source-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass remove-bridge-source-response common-lisp:nil
                       ((source-name :initarg :source-name :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %remove-bridge-source-response-source-name :initform
                         common-lisp:nil)
                        (bridge-arn :initarg :bridge-arn :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %remove-bridge-source-response-bridge-arn :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'remove-bridge-source-response
                    'make-remove-bridge-source-response))
 (common-lisp:defun make-remove-bridge-source-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key source-name bridge-arn)
   (common-lisp:apply #'common-lisp:make-instance
                      'remove-bridge-source-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          remove-bridge-source-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          remove-bridge-source-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bridge-arn))
      (common-lisp:list
       (common-lisp:cons "BridgeArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-name))
      (common-lisp:list
       (common-lisp:cons "SourceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          remove-bridge-source-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass remove-flow-media-stream-request common-lisp:nil
                       ((media-stream-name :initarg :media-stream-name :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %remove-flow-media-stream-request-media-stream-name
                         :initform
                         (common-lisp:error ":media-stream-name is required"))
                        (flow-arn :initarg :flow-arn :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %remove-flow-media-stream-request-flow-arn :initform
                         (common-lisp:error ":flow-arn is required"))))
 (common-lisp:export
  (common-lisp:list 'remove-flow-media-stream-request
                    'make-remove-flow-media-stream-request))
 (common-lisp:defun make-remove-flow-media-stream-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key media-stream-name flow-arn)
   (common-lisp:apply #'common-lisp:make-instance
                      'remove-flow-media-stream-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          remove-flow-media-stream-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          remove-flow-media-stream-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          remove-flow-media-stream-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass remove-flow-media-stream-response common-lisp:nil
                       ((media-stream-name :initarg :media-stream-name :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %remove-flow-media-stream-response-media-stream-name
                         :initform common-lisp:nil)
                        (flow-arn :initarg :flow-arn :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %remove-flow-media-stream-response-flow-arn :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'remove-flow-media-stream-response
                    'make-remove-flow-media-stream-response))
 (common-lisp:defun make-remove-flow-media-stream-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key media-stream-name flow-arn)
   (common-lisp:apply #'common-lisp:make-instance
                      'remove-flow-media-stream-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          remove-flow-media-stream-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          remove-flow-media-stream-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'flow-arn))
      (common-lisp:list
       (common-lisp:cons "FlowArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'media-stream-name))
      (common-lisp:list
       (common-lisp:cons "MediaStreamName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          remove-flow-media-stream-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass remove-flow-output-request common-lisp:nil
                       ((output-arn :initarg :output-arn :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %remove-flow-output-request-output-arn :initform
                         (common-lisp:error ":output-arn is required"))
                        (flow-arn :initarg :flow-arn :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %remove-flow-output-request-flow-arn :initform
                         (common-lisp:error ":flow-arn is required"))))
 (common-lisp:export
  (common-lisp:list 'remove-flow-output-request
                    'make-remove-flow-output-request))
 (common-lisp:defun make-remove-flow-output-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key output-arn flow-arn)
   (common-lisp:apply #'common-lisp:make-instance 'remove-flow-output-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          remove-flow-output-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          remove-flow-output-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          remove-flow-output-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass remove-flow-output-response common-lisp:nil
                       ((output-arn :initarg :output-arn :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %remove-flow-output-response-output-arn :initform
                         common-lisp:nil)
                        (flow-arn :initarg :flow-arn :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %remove-flow-output-response-flow-arn :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'remove-flow-output-response
                    'make-remove-flow-output-response))
 (common-lisp:defun make-remove-flow-output-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key output-arn flow-arn)
   (common-lisp:apply #'common-lisp:make-instance 'remove-flow-output-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          remove-flow-output-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          remove-flow-output-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'flow-arn))
      (common-lisp:list
       (common-lisp:cons "FlowArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'output-arn))
      (common-lisp:list
       (common-lisp:cons "OutputArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          remove-flow-output-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass remove-flow-source-request common-lisp:nil
                       ((source-arn :initarg :source-arn :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %remove-flow-source-request-source-arn :initform
                         (common-lisp:error ":source-arn is required"))
                        (flow-arn :initarg :flow-arn :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %remove-flow-source-request-flow-arn :initform
                         (common-lisp:error ":flow-arn is required"))))
 (common-lisp:export
  (common-lisp:list 'remove-flow-source-request
                    'make-remove-flow-source-request))
 (common-lisp:defun make-remove-flow-source-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key source-arn flow-arn)
   (common-lisp:apply #'common-lisp:make-instance 'remove-flow-source-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          remove-flow-source-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          remove-flow-source-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          remove-flow-source-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass remove-flow-source-response common-lisp:nil
                       ((source-arn :initarg :source-arn :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %remove-flow-source-response-source-arn :initform
                         common-lisp:nil)
                        (flow-arn :initarg :flow-arn :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %remove-flow-source-response-flow-arn :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'remove-flow-source-response
                    'make-remove-flow-source-response))
 (common-lisp:defun make-remove-flow-source-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key source-arn flow-arn)
   (common-lisp:apply #'common-lisp:make-instance 'remove-flow-source-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          remove-flow-source-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          remove-flow-source-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'flow-arn))
      (common-lisp:list
       (common-lisp:cons "FlowArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-arn))
      (common-lisp:list
       (common-lisp:cons "SourceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          remove-flow-source-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass remove-flow-vpc-interface-request common-lisp:nil
                       ((vpc-interface-name :initarg :vpc-interface-name :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %remove-flow-vpc-interface-request-vpc-interface-name
                         :initform
                         (common-lisp:error ":vpc-interface-name is required"))
                        (flow-arn :initarg :flow-arn :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %remove-flow-vpc-interface-request-flow-arn :initform
                         (common-lisp:error ":flow-arn is required"))))
 (common-lisp:export
  (common-lisp:list 'remove-flow-vpc-interface-request
                    'make-remove-flow-vpc-interface-request))
 (common-lisp:defun make-remove-flow-vpc-interface-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key vpc-interface-name flow-arn)
   (common-lisp:apply #'common-lisp:make-instance
                      'remove-flow-vpc-interface-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          remove-flow-vpc-interface-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          remove-flow-vpc-interface-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          remove-flow-vpc-interface-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass remove-flow-vpc-interface-response common-lisp:nil
                       ((vpc-interface-name :initarg :vpc-interface-name :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %remove-flow-vpc-interface-response-vpc-interface-name
                         :initform common-lisp:nil)
                        (non-deleted-network-interface-ids :initarg
                         :non-deleted-network-interface-ids :type
                         (common-lisp:or |__listOf__string| common-lisp:null)
                         :accessor
                         %remove-flow-vpc-interface-response-non-deleted-network-interface-ids
                         :initform common-lisp:nil)
                        (flow-arn :initarg :flow-arn :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %remove-flow-vpc-interface-response-flow-arn :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'remove-flow-vpc-interface-response
                    'make-remove-flow-vpc-interface-response))
 (common-lisp:defun make-remove-flow-vpc-interface-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key vpc-interface-name
                     non-deleted-network-interface-ids flow-arn)
   (common-lisp:apply #'common-lisp:make-instance
                      'remove-flow-vpc-interface-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          remove-flow-vpc-interface-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          remove-flow-vpc-interface-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'flow-arn))
      (common-lisp:list
       (common-lisp:cons "FlowArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'non-deleted-network-interface-ids))
      (common-lisp:list
       (common-lisp:cons "NonDeletedNetworkInterfaceIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpc-interface-name))
      (common-lisp:list
       (common-lisp:cons "VpcInterfaceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          remove-flow-vpc-interface-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass reservation common-lisp:nil
                       ((start :initarg :start :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %reservation-start :initform
                         (common-lisp:error ":start is required"))
                        (resource-specification :initarg
                         :resource-specification :type
                         (common-lisp:or resource-specification
                                         common-lisp:null)
                         :accessor %reservation-resource-specification
                         :initform
                         (common-lisp:error
                          ":resource-specification is required"))
                        (reservation-state :initarg :reservation-state :type
                         (common-lisp:or reservation-state common-lisp:null)
                         :accessor %reservation-reservation-state :initform
                         (common-lisp:error ":reservation-state is required"))
                        (reservation-name :initarg :reservation-name :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %reservation-reservation-name :initform
                         (common-lisp:error ":reservation-name is required"))
                        (reservation-arn :initarg :reservation-arn :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %reservation-reservation-arn :initform
                         (common-lisp:error ":reservation-arn is required"))
                        (price-units :initarg :price-units :type
                         (common-lisp:or price-units common-lisp:null)
                         :accessor %reservation-price-units :initform
                         (common-lisp:error ":price-units is required"))
                        (price-per-unit :initarg :price-per-unit :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %reservation-price-per-unit :initform
                         (common-lisp:error ":price-per-unit is required"))
                        (offering-description :initarg :offering-description
                         :type (common-lisp:or |__string| common-lisp:null)
                         :accessor %reservation-offering-description :initform
                         (common-lisp:error
                          ":offering-description is required"))
                        (offering-arn :initarg :offering-arn :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %reservation-offering-arn :initform
                         (common-lisp:error ":offering-arn is required"))
                        (end :initarg :end :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %reservation-end :initform
                         (common-lisp:error ":end is required"))
                        (duration-units :initarg :duration-units :type
                         (common-lisp:or duration-units common-lisp:null)
                         :accessor %reservation-duration-units :initform
                         (common-lisp:error ":duration-units is required"))
                        (duration :initarg :duration :type
                         (common-lisp:or |__integer| common-lisp:null)
                         :accessor %reservation-duration :initform
                         (common-lisp:error ":duration is required"))
                        (currency-code :initarg :currency-code :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %reservation-currency-code :initform
                         (common-lisp:error ":currency-code is required"))))
 (common-lisp:export (common-lisp:list 'reservation 'make-reservation))
 (common-lisp:defun make-reservation
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key start resource-specification
                     reservation-state reservation-name reservation-arn
                     price-units price-per-unit offering-description
                     offering-arn end duration-units duration currency-code)
   (common-lisp:apply #'common-lisp:make-instance 'reservation
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input reservation))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input reservation))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'currency-code))
      (common-lisp:list
       (common-lisp:cons "CurrencyCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'duration))
      (common-lisp:list
       (common-lisp:cons "Duration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'duration-units))
      (common-lisp:list
       (common-lisp:cons "DurationUnits"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'end))
      (common-lisp:list
       (common-lisp:cons "End"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'offering-arn))
      (common-lisp:list
       (common-lisp:cons "OfferingArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'offering-description))
      (common-lisp:list
       (common-lisp:cons "OfferingDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'price-per-unit))
      (common-lisp:list
       (common-lisp:cons "PricePerUnit"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'price-units))
      (common-lisp:list
       (common-lisp:cons "PriceUnits"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'reservation-arn))
      (common-lisp:list
       (common-lisp:cons "ReservationArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'reservation-name))
      (common-lisp:list
       (common-lisp:cons "ReservationName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'reservation-state))
      (common-lisp:list
       (common-lisp:cons "ReservationState"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'resource-specification))
      (common-lisp:list
       (common-lisp:cons "ResourceSpecification"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start))
      (common-lisp:list
       (common-lisp:cons "Start"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input reservation))
   common-lisp:nil))
(common-lisp:deftype reservation-state () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass resource-specification common-lisp:nil
                       ((resource-type :initarg :resource-type :type
                         (common-lisp:or resource-type common-lisp:null)
                         :accessor %resource-specification-resource-type
                         :initform
                         (common-lisp:error ":resource-type is required"))
                        (reserved-bitrate :initarg :reserved-bitrate :type
                         (common-lisp:or |__integer| common-lisp:null)
                         :accessor %resource-specification-reserved-bitrate
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'resource-specification 'make-resource-specification))
 (common-lisp:defun make-resource-specification
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key resource-type reserved-bitrate)
   (common-lisp:apply #'common-lisp:make-instance 'resource-specification
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          resource-specification))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          resource-specification))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'reserved-bitrate))
      (common-lisp:list
       (common-lisp:cons "ReservedBitrate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-type))
      (common-lisp:list
       (common-lisp:cons "ResourceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          resource-specification))
   common-lisp:nil))
(common-lisp:deftype resource-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass response-error common-lisp:nil
                       ((message :initarg :message :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %response-error-message :initform
                         (common-lisp:error ":message is required"))))
 (common-lisp:export (common-lisp:list 'response-error 'make-response-error))
 (common-lisp:defun make-response-error
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key message)
   (common-lisp:apply #'common-lisp:make-instance 'response-error
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input response-error))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input response-error))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message))
      (common-lisp:list
       (common-lisp:cons "Message"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input response-error))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass revoke-flow-entitlement-request common-lisp:nil
                       ((flow-arn :initarg :flow-arn :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %revoke-flow-entitlement-request-flow-arn :initform
                         (common-lisp:error ":flow-arn is required"))
                        (entitlement-arn :initarg :entitlement-arn :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %revoke-flow-entitlement-request-entitlement-arn
                         :initform
                         (common-lisp:error ":entitlement-arn is required"))))
 (common-lisp:export
  (common-lisp:list 'revoke-flow-entitlement-request
                    'make-revoke-flow-entitlement-request))
 (common-lisp:defun make-revoke-flow-entitlement-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key flow-arn entitlement-arn)
   (common-lisp:apply #'common-lisp:make-instance
                      'revoke-flow-entitlement-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          revoke-flow-entitlement-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          revoke-flow-entitlement-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          revoke-flow-entitlement-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass revoke-flow-entitlement-response common-lisp:nil
                       ((flow-arn :initarg :flow-arn :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %revoke-flow-entitlement-response-flow-arn :initform
                         common-lisp:nil)
                        (entitlement-arn :initarg :entitlement-arn :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %revoke-flow-entitlement-response-entitlement-arn
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'revoke-flow-entitlement-response
                    'make-revoke-flow-entitlement-response))
 (common-lisp:defun make-revoke-flow-entitlement-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key flow-arn entitlement-arn)
   (common-lisp:apply #'common-lisp:make-instance
                      'revoke-flow-entitlement-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          revoke-flow-entitlement-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          revoke-flow-entitlement-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'entitlement-arn))
      (common-lisp:list
       (common-lisp:cons "EntitlementArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'flow-arn))
      (common-lisp:list
       (common-lisp:cons "FlowArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          revoke-flow-entitlement-response))
   common-lisp:nil))
(common-lisp:deftype scan-mode () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition service-unavailable-exception
     (mediaconnect-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       service-unavailable-exception-message)))
 (common-lisp:export
  (common-lisp:list 'service-unavailable-exception
                    'service-unavailable-exception-message)))
(common-lisp:progn
 (common-lisp:defclass set-gateway-bridge-source-request common-lisp:nil
                       ((vpc-interface-attachment :initarg
                         :vpc-interface-attachment :type
                         (common-lisp:or vpc-interface-attachment
                                         common-lisp:null)
                         :accessor
                         %set-gateway-bridge-source-request-vpc-interface-attachment
                         :initform common-lisp:nil)
                        (bridge-arn :initarg :bridge-arn :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %set-gateway-bridge-source-request-bridge-arn
                         :initform
                         (common-lisp:error ":bridge-arn is required"))))
 (common-lisp:export
  (common-lisp:list 'set-gateway-bridge-source-request
                    'make-set-gateway-bridge-source-request))
 (common-lisp:defun make-set-gateway-bridge-source-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key vpc-interface-attachment bridge-arn)
   (common-lisp:apply #'common-lisp:make-instance
                      'set-gateway-bridge-source-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          set-gateway-bridge-source-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          set-gateway-bridge-source-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bridge-arn))
      (common-lisp:list
       (common-lisp:cons "BridgeArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'vpc-interface-attachment))
      (common-lisp:list
       (common-lisp:cons "VpcInterfaceAttachment"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          set-gateway-bridge-source-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass set-source-request common-lisp:nil
                       ((gateway-bridge-source :initarg :gateway-bridge-source
                         :type
                         (common-lisp:or set-gateway-bridge-source-request
                                         common-lisp:null)
                         :accessor %set-source-request-gateway-bridge-source
                         :initform common-lisp:nil)
                        (whitelist-cidr :initarg :whitelist-cidr :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %set-source-request-whitelist-cidr :initform
                         common-lisp:nil)
                        (vpc-interface-name :initarg :vpc-interface-name :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %set-source-request-vpc-interface-name :initform
                         common-lisp:nil)
                        (stream-id :initarg :stream-id :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %set-source-request-stream-id :initform
                         common-lisp:nil)
                        (source-listener-port :initarg :source-listener-port
                         :type (common-lisp:or |__integer| common-lisp:null)
                         :accessor %set-source-request-source-listener-port
                         :initform common-lisp:nil)
                        (source-listener-address :initarg
                         :source-listener-address :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %set-source-request-source-listener-address :initform
                         common-lisp:nil)
                        (sender-ip-address :initarg :sender-ip-address :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %set-source-request-sender-ip-address :initform
                         common-lisp:nil)
                        (sender-control-port :initarg :sender-control-port
                         :type (common-lisp:or |__integer| common-lisp:null)
                         :accessor %set-source-request-sender-control-port
                         :initform common-lisp:nil)
                        (protocol :initarg :protocol :type
                         (common-lisp:or protocol common-lisp:null) :accessor
                         %set-source-request-protocol :initform
                         common-lisp:nil)
                        (name :initarg :name :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %set-source-request-name :initform common-lisp:nil)
                        (min-latency :initarg :min-latency :type
                         (common-lisp:or |__integer| common-lisp:null)
                         :accessor %set-source-request-min-latency :initform
                         common-lisp:nil)
                        (media-stream-source-configurations :initarg
                         :media-stream-source-configurations :type
                         (common-lisp:or
                          |__listOfMediaStreamSourceConfigurationRequest|
                          common-lisp:null)
                         :accessor
                         %set-source-request-media-stream-source-configurations
                         :initform common-lisp:nil)
                        (max-sync-buffer :initarg :max-sync-buffer :type
                         (common-lisp:or |__integer| common-lisp:null)
                         :accessor %set-source-request-max-sync-buffer
                         :initform common-lisp:nil)
                        (max-latency :initarg :max-latency :type
                         (common-lisp:or |__integer| common-lisp:null)
                         :accessor %set-source-request-max-latency :initform
                         common-lisp:nil)
                        (max-bitrate :initarg :max-bitrate :type
                         (common-lisp:or |__integer| common-lisp:null)
                         :accessor %set-source-request-max-bitrate :initform
                         common-lisp:nil)
                        (ingest-port :initarg :ingest-port :type
                         (common-lisp:or |__integer| common-lisp:null)
                         :accessor %set-source-request-ingest-port :initform
                         common-lisp:nil)
                        (entitlement-arn :initarg :entitlement-arn :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %set-source-request-entitlement-arn :initform
                         common-lisp:nil)
                        (description :initarg :description :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %set-source-request-description :initform
                         common-lisp:nil)
                        (decryption :initarg :decryption :type
                         (common-lisp:or encryption common-lisp:null) :accessor
                         %set-source-request-decryption :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'set-source-request 'make-set-source-request))
 (common-lisp:defun make-set-source-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key gateway-bridge-source whitelist-cidr
                     vpc-interface-name stream-id source-listener-port
                     source-listener-address sender-ip-address
                     sender-control-port protocol name min-latency
                     media-stream-source-configurations max-sync-buffer
                     max-latency max-bitrate ingest-port entitlement-arn
                     description decryption)
   (common-lisp:apply #'common-lisp:make-instance 'set-source-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input set-source-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input set-source-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'decryption))
      (common-lisp:list
       (common-lisp:cons "Decryption"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'entitlement-arn))
      (common-lisp:list
       (common-lisp:cons "EntitlementArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ingest-port))
      (common-lisp:list
       (common-lisp:cons "IngestPort"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-bitrate))
      (common-lisp:list
       (common-lisp:cons "MaxBitrate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-latency))
      (common-lisp:list
       (common-lisp:cons "MaxLatency"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-sync-buffer))
      (common-lisp:list
       (common-lisp:cons "MaxSyncBuffer"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'media-stream-source-configurations))
      (common-lisp:list
       (common-lisp:cons "MediaStreamSourceConfigurations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'min-latency))
      (common-lisp:list
       (common-lisp:cons "MinLatency"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'protocol))
      (common-lisp:list
       (common-lisp:cons "Protocol"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sender-control-port))
      (common-lisp:list
       (common-lisp:cons "SenderControlPort"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sender-ip-address))
      (common-lisp:list
       (common-lisp:cons "SenderIpAddress"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'source-listener-address))
      (common-lisp:list
       (common-lisp:cons "SourceListenerAddress"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'source-listener-port))
      (common-lisp:list
       (common-lisp:cons "SourceListenerPort"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stream-id))
      (common-lisp:list
       (common-lisp:cons "StreamId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpc-interface-name))
      (common-lisp:list
       (common-lisp:cons "VpcInterfaceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'whitelist-cidr))
      (common-lisp:list
       (common-lisp:cons "WhitelistCidr"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'gateway-bridge-source))
      (common-lisp:list
       (common-lisp:cons "GatewayBridgeSource"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input set-source-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass source common-lisp:nil
                       ((gateway-bridge-source :initarg :gateway-bridge-source
                         :type
                         (common-lisp:or gateway-bridge-source
                                         common-lisp:null)
                         :accessor %source-gateway-bridge-source :initform
                         common-lisp:nil)
                        (whitelist-cidr :initarg :whitelist-cidr :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %source-whitelist-cidr :initform common-lisp:nil)
                        (vpc-interface-name :initarg :vpc-interface-name :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %source-vpc-interface-name :initform common-lisp:nil)
                        (transport :initarg :transport :type
                         (common-lisp:or transport common-lisp:null) :accessor
                         %source-transport :initform common-lisp:nil)
                        (source-arn :initarg :source-arn :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %source-source-arn :initform
                         (common-lisp:error ":source-arn is required"))
                        (sender-ip-address :initarg :sender-ip-address :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %source-sender-ip-address :initform common-lisp:nil)
                        (sender-control-port :initarg :sender-control-port
                         :type (common-lisp:or |__integer| common-lisp:null)
                         :accessor %source-sender-control-port :initform
                         common-lisp:nil)
                        (name :initarg :name :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %source-name :initform
                         (common-lisp:error ":name is required"))
                        (media-stream-source-configurations :initarg
                         :media-stream-source-configurations :type
                         (common-lisp:or
                          |__listOfMediaStreamSourceConfiguration|
                          common-lisp:null)
                         :accessor %source-media-stream-source-configurations
                         :initform common-lisp:nil)
                        (ingest-port :initarg :ingest-port :type
                         (common-lisp:or |__integer| common-lisp:null)
                         :accessor %source-ingest-port :initform
                         common-lisp:nil)
                        (ingest-ip :initarg :ingest-ip :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %source-ingest-ip :initform common-lisp:nil)
                        (entitlement-arn :initarg :entitlement-arn :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %source-entitlement-arn :initform common-lisp:nil)
                        (description :initarg :description :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %source-description :initform common-lisp:nil)
                        (decryption :initarg :decryption :type
                         (common-lisp:or encryption common-lisp:null) :accessor
                         %source-decryption :initform common-lisp:nil)
                        (data-transfer-subscriber-fee-percent :initarg
                         :data-transfer-subscriber-fee-percent :type
                         (common-lisp:or |__integer| common-lisp:null)
                         :accessor %source-data-transfer-subscriber-fee-percent
                         :initform common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'source 'make-source))
 (common-lisp:defun make-source
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key gateway-bridge-source whitelist-cidr
                     vpc-interface-name transport source-arn sender-ip-address
                     sender-control-port name
                     media-stream-source-configurations ingest-port ingest-ip
                     entitlement-arn description decryption
                     data-transfer-subscriber-fee-percent)
   (common-lisp:apply #'common-lisp:make-instance 'source
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input source))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input source))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'data-transfer-subscriber-fee-percent))
      (common-lisp:list
       (common-lisp:cons "DataTransferSubscriberFeePercent"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'decryption))
      (common-lisp:list
       (common-lisp:cons "Decryption"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'entitlement-arn))
      (common-lisp:list
       (common-lisp:cons "EntitlementArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ingest-ip))
      (common-lisp:list
       (common-lisp:cons "IngestIp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ingest-port))
      (common-lisp:list
       (common-lisp:cons "IngestPort"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'media-stream-source-configurations))
      (common-lisp:list
       (common-lisp:cons "MediaStreamSourceConfigurations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sender-control-port))
      (common-lisp:list
       (common-lisp:cons "SenderControlPort"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sender-ip-address))
      (common-lisp:list
       (common-lisp:cons "SenderIpAddress"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-arn))
      (common-lisp:list
       (common-lisp:cons "SourceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'transport))
      (common-lisp:list
       (common-lisp:cons "Transport"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpc-interface-name))
      (common-lisp:list
       (common-lisp:cons "VpcInterfaceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'whitelist-cidr))
      (common-lisp:list
       (common-lisp:cons "WhitelistCidr"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'gateway-bridge-source))
      (common-lisp:list
       (common-lisp:cons "GatewayBridgeSource"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input source))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass source-priority common-lisp:nil
                       ((primary-source :initarg :primary-source :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %source-priority-primary-source :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'source-priority 'make-source-priority))
 (common-lisp:defun make-source-priority
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key primary-source)
   (common-lisp:apply #'common-lisp:make-instance 'source-priority
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input source-priority))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input source-priority))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'primary-source))
      (common-lisp:list
       (common-lisp:cons "PrimarySource"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input source-priority))
   common-lisp:nil))
(common-lisp:deftype source-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass start-flow-request common-lisp:nil
                       ((flow-arn :initarg :flow-arn :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %start-flow-request-flow-arn :initform
                         (common-lisp:error ":flow-arn is required"))))
 (common-lisp:export
  (common-lisp:list 'start-flow-request 'make-start-flow-request))
 (common-lisp:defun make-start-flow-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key flow-arn)
   (common-lisp:apply #'common-lisp:make-instance 'start-flow-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input start-flow-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input start-flow-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input start-flow-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass start-flow-response common-lisp:nil
                       ((status :initarg :status :type
                         (common-lisp:or status common-lisp:null) :accessor
                         %start-flow-response-status :initform common-lisp:nil)
                        (flow-arn :initarg :flow-arn :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %start-flow-response-flow-arn :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'start-flow-response 'make-start-flow-response))
 (common-lisp:defun make-start-flow-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key status flow-arn)
   (common-lisp:apply #'common-lisp:make-instance 'start-flow-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input start-flow-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input start-flow-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'flow-arn))
      (common-lisp:list
       (common-lisp:cons "FlowArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input start-flow-response))
   common-lisp:nil))
(common-lisp:deftype state () 'common-lisp:string)
(common-lisp:deftype status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass stop-flow-request common-lisp:nil
                       ((flow-arn :initarg :flow-arn :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %stop-flow-request-flow-arn :initform
                         (common-lisp:error ":flow-arn is required"))))
 (common-lisp:export
  (common-lisp:list 'stop-flow-request 'make-stop-flow-request))
 (common-lisp:defun make-stop-flow-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key flow-arn)
   (common-lisp:apply #'common-lisp:make-instance 'stop-flow-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input stop-flow-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input stop-flow-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input stop-flow-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass stop-flow-response common-lisp:nil
                       ((status :initarg :status :type
                         (common-lisp:or status common-lisp:null) :accessor
                         %stop-flow-response-status :initform common-lisp:nil)
                        (flow-arn :initarg :flow-arn :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %stop-flow-response-flow-arn :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'stop-flow-response 'make-stop-flow-response))
 (common-lisp:defun make-stop-flow-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key status flow-arn)
   (common-lisp:apply #'common-lisp:make-instance 'stop-flow-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input stop-flow-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input stop-flow-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'flow-arn))
      (common-lisp:list
       (common-lisp:cons "FlowArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input stop-flow-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass tag-resource-request common-lisp:nil
                       ((tags :initarg :tags :type
                         (common-lisp:or |__mapOf__string| common-lisp:null)
                         :accessor %tag-resource-request-tags :initform
                         (common-lisp:error ":tags is required"))
                        (resource-arn :initarg :resource-arn :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %tag-resource-request-resource-arn :initform
                         (common-lisp:error ":resource-arn is required"))))
 (common-lisp:export
  (common-lisp:list 'tag-resource-request 'make-tag-resource-request))
 (common-lisp:defun make-tag-resource-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tags resource-arn)
   (common-lisp:apply #'common-lisp:make-instance 'tag-resource-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input tag-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input tag-resource-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input tag-resource-request))
   common-lisp:nil))
(common-lisp:deftype tcs () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition too-many-requests-exception
     (mediaconnect-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       too-many-requests-exception-message)))
 (common-lisp:export
  (common-lisp:list 'too-many-requests-exception
                    'too-many-requests-exception-message)))
(common-lisp:progn
 (common-lisp:defclass transport common-lisp:nil
                       ((stream-id :initarg :stream-id :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %transport-stream-id :initform common-lisp:nil)
                        (source-listener-port :initarg :source-listener-port
                         :type (common-lisp:or |__integer| common-lisp:null)
                         :accessor %transport-source-listener-port :initform
                         common-lisp:nil)
                        (source-listener-address :initarg
                         :source-listener-address :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %transport-source-listener-address :initform
                         common-lisp:nil)
                        (smoothing-latency :initarg :smoothing-latency :type
                         (common-lisp:or |__integer| common-lisp:null)
                         :accessor %transport-smoothing-latency :initform
                         common-lisp:nil)
                        (sender-ip-address :initarg :sender-ip-address :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %transport-sender-ip-address :initform
                         common-lisp:nil)
                        (sender-control-port :initarg :sender-control-port
                         :type (common-lisp:or |__integer| common-lisp:null)
                         :accessor %transport-sender-control-port :initform
                         common-lisp:nil)
                        (remote-id :initarg :remote-id :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %transport-remote-id :initform common-lisp:nil)
                        (protocol :initarg :protocol :type
                         (common-lisp:or protocol common-lisp:null) :accessor
                         %transport-protocol :initform
                         (common-lisp:error ":protocol is required"))
                        (min-latency :initarg :min-latency :type
                         (common-lisp:or |__integer| common-lisp:null)
                         :accessor %transport-min-latency :initform
                         common-lisp:nil)
                        (max-sync-buffer :initarg :max-sync-buffer :type
                         (common-lisp:or |__integer| common-lisp:null)
                         :accessor %transport-max-sync-buffer :initform
                         common-lisp:nil)
                        (max-latency :initarg :max-latency :type
                         (common-lisp:or |__integer| common-lisp:null)
                         :accessor %transport-max-latency :initform
                         common-lisp:nil)
                        (max-bitrate :initarg :max-bitrate :type
                         (common-lisp:or |__integer| common-lisp:null)
                         :accessor %transport-max-bitrate :initform
                         common-lisp:nil)
                        (cidr-allow-list :initarg :cidr-allow-list :type
                         (common-lisp:or |__listOf__string| common-lisp:null)
                         :accessor %transport-cidr-allow-list :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'transport 'make-transport))
 (common-lisp:defun make-transport
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key stream-id source-listener-port
                     source-listener-address smoothing-latency
                     sender-ip-address sender-control-port remote-id protocol
                     min-latency max-sync-buffer max-latency max-bitrate
                     cidr-allow-list)
   (common-lisp:apply #'common-lisp:make-instance 'transport
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input transport))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input transport))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cidr-allow-list))
      (common-lisp:list
       (common-lisp:cons "CidrAllowList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-bitrate))
      (common-lisp:list
       (common-lisp:cons "MaxBitrate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-latency))
      (common-lisp:list
       (common-lisp:cons "MaxLatency"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-sync-buffer))
      (common-lisp:list
       (common-lisp:cons "MaxSyncBuffer"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'min-latency))
      (common-lisp:list
       (common-lisp:cons "MinLatency"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'protocol))
      (common-lisp:list
       (common-lisp:cons "Protocol"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'remote-id))
      (common-lisp:list
       (common-lisp:cons "RemoteId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sender-control-port))
      (common-lisp:list
       (common-lisp:cons "SenderControlPort"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sender-ip-address))
      (common-lisp:list
       (common-lisp:cons "SenderIpAddress"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'smoothing-latency))
      (common-lisp:list
       (common-lisp:cons "SmoothingLatency"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'source-listener-address))
      (common-lisp:list
       (common-lisp:cons "SourceListenerAddress"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'source-listener-port))
      (common-lisp:list
       (common-lisp:cons "SourceListenerPort"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stream-id))
      (common-lisp:list
       (common-lisp:cons "StreamId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input transport))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass untag-resource-request common-lisp:nil
                       ((tag-keys :initarg :tag-keys :type
                         (common-lisp:or |__listOf__string| common-lisp:null)
                         :accessor %untag-resource-request-tag-keys :initform
                         (common-lisp:error ":tag-keys is required"))
                        (resource-arn :initarg :resource-arn :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %untag-resource-request-resource-arn :initform
                         (common-lisp:error ":resource-arn is required"))))
 (common-lisp:export
  (common-lisp:list 'untag-resource-request 'make-untag-resource-request))
 (common-lisp:defun make-untag-resource-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tag-keys resource-arn)
   (common-lisp:apply #'common-lisp:make-instance 'untag-resource-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-bridge-flow-source-request common-lisp:nil
                       ((flow-vpc-interface-attachment :initarg
                         :flow-vpc-interface-attachment :type
                         (common-lisp:or vpc-interface-attachment
                                         common-lisp:null)
                         :accessor
                         %update-bridge-flow-source-request-flow-vpc-interface-attachment
                         :initform common-lisp:nil)
                        (flow-arn :initarg :flow-arn :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %update-bridge-flow-source-request-flow-arn :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'update-bridge-flow-source-request
                    'make-update-bridge-flow-source-request))
 (common-lisp:defun make-update-bridge-flow-source-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key flow-vpc-interface-attachment flow-arn)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-bridge-flow-source-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-bridge-flow-source-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-bridge-flow-source-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'flow-arn))
      (common-lisp:list
       (common-lisp:cons "FlowArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'flow-vpc-interface-attachment))
      (common-lisp:list
       (common-lisp:cons "FlowVpcInterfaceAttachment"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-bridge-flow-source-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-bridge-network-output-request common-lisp:nil
                       ((ttl :initarg :ttl :type
                         (common-lisp:or |__integer| common-lisp:null)
                         :accessor %update-bridge-network-output-request-ttl
                         :initform common-lisp:nil)
                        (protocol :initarg :protocol :type
                         (common-lisp:or protocol common-lisp:null) :accessor
                         %update-bridge-network-output-request-protocol
                         :initform common-lisp:nil)
                        (port :initarg :port :type
                         (common-lisp:or |__integer| common-lisp:null)
                         :accessor %update-bridge-network-output-request-port
                         :initform common-lisp:nil)
                        (network-name :initarg :network-name :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %update-bridge-network-output-request-network-name
                         :initform common-lisp:nil)
                        (ip-address :initarg :ip-address :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %update-bridge-network-output-request-ip-address
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'update-bridge-network-output-request
                    'make-update-bridge-network-output-request))
 (common-lisp:defun make-update-bridge-network-output-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key ttl protocol port network-name
                     ip-address)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-bridge-network-output-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-bridge-network-output-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-bridge-network-output-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ip-address))
      (common-lisp:list
       (common-lisp:cons "IpAddress"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'network-name))
      (common-lisp:list
       (common-lisp:cons "NetworkName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'port))
      (common-lisp:list
       (common-lisp:cons "Port"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'protocol))
      (common-lisp:list
       (common-lisp:cons "Protocol"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ttl))
      (common-lisp:list
       (common-lisp:cons "Ttl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-bridge-network-output-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-bridge-network-source-request common-lisp:nil
                       ((protocol :initarg :protocol :type
                         (common-lisp:or protocol common-lisp:null) :accessor
                         %update-bridge-network-source-request-protocol
                         :initform common-lisp:nil)
                        (port :initarg :port :type
                         (common-lisp:or |__integer| common-lisp:null)
                         :accessor %update-bridge-network-source-request-port
                         :initform common-lisp:nil)
                        (network-name :initarg :network-name :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %update-bridge-network-source-request-network-name
                         :initform common-lisp:nil)
                        (multicast-ip :initarg :multicast-ip :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %update-bridge-network-source-request-multicast-ip
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'update-bridge-network-source-request
                    'make-update-bridge-network-source-request))
 (common-lisp:defun make-update-bridge-network-source-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key protocol port network-name multicast-ip)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-bridge-network-source-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-bridge-network-source-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-bridge-network-source-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'multicast-ip))
      (common-lisp:list
       (common-lisp:cons "MulticastIp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'network-name))
      (common-lisp:list
       (common-lisp:cons "NetworkName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'port))
      (common-lisp:list
       (common-lisp:cons "Port"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'protocol))
      (common-lisp:list
       (common-lisp:cons "Protocol"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-bridge-network-source-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-bridge-output-request common-lisp:nil
                       ((output-name :initarg :output-name :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %update-bridge-output-request-output-name :initform
                         (common-lisp:error ":output-name is required"))
                        (network-output :initarg :network-output :type
                         (common-lisp:or update-bridge-network-output-request
                                         common-lisp:null)
                         :accessor %update-bridge-output-request-network-output
                         :initform common-lisp:nil)
                        (bridge-arn :initarg :bridge-arn :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %update-bridge-output-request-bridge-arn :initform
                         (common-lisp:error ":bridge-arn is required"))))
 (common-lisp:export
  (common-lisp:list 'update-bridge-output-request
                    'make-update-bridge-output-request))
 (common-lisp:defun make-update-bridge-output-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key output-name network-output bridge-arn)
   (common-lisp:apply #'common-lisp:make-instance 'update-bridge-output-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-bridge-output-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-bridge-output-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'network-output))
      (common-lisp:list
       (common-lisp:cons "NetworkOutput"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-bridge-output-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-bridge-output-response common-lisp:nil
                       ((output :initarg :output :type
                         (common-lisp:or bridge-output common-lisp:null)
                         :accessor %update-bridge-output-response-output
                         :initform common-lisp:nil)
                        (bridge-arn :initarg :bridge-arn :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %update-bridge-output-response-bridge-arn :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'update-bridge-output-response
                    'make-update-bridge-output-response))
 (common-lisp:defun make-update-bridge-output-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key output bridge-arn)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-bridge-output-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-bridge-output-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-bridge-output-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bridge-arn))
      (common-lisp:list
       (common-lisp:cons "BridgeArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'output))
      (common-lisp:list
       (common-lisp:cons "Output"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-bridge-output-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-bridge-request common-lisp:nil
                       ((source-failover-config :initarg
                         :source-failover-config :type
                         (common-lisp:or update-failover-config
                                         common-lisp:null)
                         :accessor
                         %update-bridge-request-source-failover-config
                         :initform common-lisp:nil)
                        (ingress-gateway-bridge :initarg
                         :ingress-gateway-bridge :type
                         (common-lisp:or update-ingress-gateway-bridge-request
                                         common-lisp:null)
                         :accessor
                         %update-bridge-request-ingress-gateway-bridge
                         :initform common-lisp:nil)
                        (egress-gateway-bridge :initarg :egress-gateway-bridge
                         :type
                         (common-lisp:or update-egress-gateway-bridge-request
                                         common-lisp:null)
                         :accessor %update-bridge-request-egress-gateway-bridge
                         :initform common-lisp:nil)
                        (bridge-arn :initarg :bridge-arn :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %update-bridge-request-bridge-arn :initform
                         (common-lisp:error ":bridge-arn is required"))))
 (common-lisp:export
  (common-lisp:list 'update-bridge-request 'make-update-bridge-request))
 (common-lisp:defun make-update-bridge-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key source-failover-config
                     ingress-gateway-bridge egress-gateway-bridge bridge-arn)
   (common-lisp:apply #'common-lisp:make-instance 'update-bridge-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-bridge-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-bridge-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'egress-gateway-bridge))
      (common-lisp:list
       (common-lisp:cons "EgressGatewayBridge"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'ingress-gateway-bridge))
      (common-lisp:list
       (common-lisp:cons "IngressGatewayBridge"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'source-failover-config))
      (common-lisp:list
       (common-lisp:cons "SourceFailoverConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-bridge-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-bridge-response common-lisp:nil
                       ((bridge :initarg :bridge :type
                         (common-lisp:or bridge common-lisp:null) :accessor
                         %update-bridge-response-bridge :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'update-bridge-response 'make-update-bridge-response))
 (common-lisp:defun make-update-bridge-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key bridge)
   (common-lisp:apply #'common-lisp:make-instance 'update-bridge-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-bridge-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-bridge-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bridge))
      (common-lisp:list
       (common-lisp:cons "Bridge"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-bridge-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-bridge-source-request common-lisp:nil
                       ((source-name :initarg :source-name :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %update-bridge-source-request-source-name :initform
                         (common-lisp:error ":source-name is required"))
                        (network-source :initarg :network-source :type
                         (common-lisp:or update-bridge-network-source-request
                                         common-lisp:null)
                         :accessor %update-bridge-source-request-network-source
                         :initform common-lisp:nil)
                        (flow-source :initarg :flow-source :type
                         (common-lisp:or update-bridge-flow-source-request
                                         common-lisp:null)
                         :accessor %update-bridge-source-request-flow-source
                         :initform common-lisp:nil)
                        (bridge-arn :initarg :bridge-arn :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %update-bridge-source-request-bridge-arn :initform
                         (common-lisp:error ":bridge-arn is required"))))
 (common-lisp:export
  (common-lisp:list 'update-bridge-source-request
                    'make-update-bridge-source-request))
 (common-lisp:defun make-update-bridge-source-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key source-name network-source flow-source
                     bridge-arn)
   (common-lisp:apply #'common-lisp:make-instance 'update-bridge-source-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-bridge-source-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-bridge-source-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'flow-source))
      (common-lisp:list
       (common-lisp:cons "FlowSource"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'network-source))
      (common-lisp:list
       (common-lisp:cons "NetworkSource"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-bridge-source-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-bridge-source-response common-lisp:nil
                       ((source :initarg :source :type
                         (common-lisp:or bridge-source common-lisp:null)
                         :accessor %update-bridge-source-response-source
                         :initform common-lisp:nil)
                        (bridge-arn :initarg :bridge-arn :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %update-bridge-source-response-bridge-arn :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'update-bridge-source-response
                    'make-update-bridge-source-response))
 (common-lisp:defun make-update-bridge-source-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key source bridge-arn)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-bridge-source-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-bridge-source-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-bridge-source-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bridge-arn))
      (common-lisp:list
       (common-lisp:cons "BridgeArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source))
      (common-lisp:list
       (common-lisp:cons "Source"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-bridge-source-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-bridge-state-request common-lisp:nil
                       ((desired-state :initarg :desired-state :type
                         (common-lisp:or desired-state common-lisp:null)
                         :accessor %update-bridge-state-request-desired-state
                         :initform
                         (common-lisp:error ":desired-state is required"))
                        (bridge-arn :initarg :bridge-arn :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %update-bridge-state-request-bridge-arn :initform
                         (common-lisp:error ":bridge-arn is required"))))
 (common-lisp:export
  (common-lisp:list 'update-bridge-state-request
                    'make-update-bridge-state-request))
 (common-lisp:defun make-update-bridge-state-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key desired-state bridge-arn)
   (common-lisp:apply #'common-lisp:make-instance 'update-bridge-state-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-bridge-state-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-bridge-state-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'desired-state))
      (common-lisp:list
       (common-lisp:cons "DesiredState"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-bridge-state-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-bridge-state-response common-lisp:nil
                       ((desired-state :initarg :desired-state :type
                         (common-lisp:or desired-state common-lisp:null)
                         :accessor %update-bridge-state-response-desired-state
                         :initform common-lisp:nil)
                        (bridge-arn :initarg :bridge-arn :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %update-bridge-state-response-bridge-arn :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'update-bridge-state-response
                    'make-update-bridge-state-response))
 (common-lisp:defun make-update-bridge-state-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key desired-state bridge-arn)
   (common-lisp:apply #'common-lisp:make-instance 'update-bridge-state-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-bridge-state-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-bridge-state-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bridge-arn))
      (common-lisp:list
       (common-lisp:cons "BridgeArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'desired-state))
      (common-lisp:list
       (common-lisp:cons "DesiredState"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-bridge-state-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-egress-gateway-bridge-request common-lisp:nil
                       ((max-bitrate :initarg :max-bitrate :type
                         (common-lisp:or |__integer| common-lisp:null)
                         :accessor
                         %update-egress-gateway-bridge-request-max-bitrate
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'update-egress-gateway-bridge-request
                    'make-update-egress-gateway-bridge-request))
 (common-lisp:defun make-update-egress-gateway-bridge-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key max-bitrate)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-egress-gateway-bridge-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-egress-gateway-bridge-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-egress-gateway-bridge-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-bitrate))
      (common-lisp:list
       (common-lisp:cons "MaxBitrate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-egress-gateway-bridge-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-encryption common-lisp:nil
                       ((url :initarg :url :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %update-encryption-url :initform common-lisp:nil)
                        (secret-arn :initarg :secret-arn :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %update-encryption-secret-arn :initform
                         common-lisp:nil)
                        (role-arn :initarg :role-arn :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %update-encryption-role-arn :initform common-lisp:nil)
                        (resource-id :initarg :resource-id :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %update-encryption-resource-id :initform
                         common-lisp:nil)
                        (region :initarg :region :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %update-encryption-region :initform common-lisp:nil)
                        (key-type :initarg :key-type :type
                         (common-lisp:or key-type common-lisp:null) :accessor
                         %update-encryption-key-type :initform common-lisp:nil)
                        (device-id :initarg :device-id :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %update-encryption-device-id :initform
                         common-lisp:nil)
                        (constant-initialization-vector :initarg
                         :constant-initialization-vector :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %update-encryption-constant-initialization-vector
                         :initform common-lisp:nil)
                        (algorithm :initarg :algorithm :type
                         (common-lisp:or algorithm common-lisp:null) :accessor
                         %update-encryption-algorithm :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'update-encryption 'make-update-encryption))
 (common-lisp:defun make-update-encryption
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key url secret-arn role-arn resource-id
                     region key-type device-id constant-initialization-vector
                     algorithm)
   (common-lisp:apply #'common-lisp:make-instance 'update-encryption
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input update-encryption))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input update-encryption))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'algorithm))
      (common-lisp:list
       (common-lisp:cons "Algorithm"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'constant-initialization-vector))
      (common-lisp:list
       (common-lisp:cons "ConstantInitializationVector"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'device-id))
      (common-lisp:list
       (common-lisp:cons "DeviceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key-type))
      (common-lisp:list
       (common-lisp:cons "KeyType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'region))
      (common-lisp:list
       (common-lisp:cons "Region"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-id))
      (common-lisp:list
       (common-lisp:cons "ResourceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "RoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'secret-arn))
      (common-lisp:list
       (common-lisp:cons "SecretArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'url))
      (common-lisp:list
       (common-lisp:cons "Url"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input update-encryption))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-failover-config common-lisp:nil
                       ((state :initarg :state :type
                         (common-lisp:or state common-lisp:null) :accessor
                         %update-failover-config-state :initform
                         common-lisp:nil)
                        (source-priority :initarg :source-priority :type
                         (common-lisp:or source-priority common-lisp:null)
                         :accessor %update-failover-config-source-priority
                         :initform common-lisp:nil)
                        (recovery-window :initarg :recovery-window :type
                         (common-lisp:or |__integer| common-lisp:null)
                         :accessor %update-failover-config-recovery-window
                         :initform common-lisp:nil)
                        (failover-mode :initarg :failover-mode :type
                         (common-lisp:or failover-mode common-lisp:null)
                         :accessor %update-failover-config-failover-mode
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'update-failover-config 'make-update-failover-config))
 (common-lisp:defun make-update-failover-config
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key state source-priority recovery-window
                     failover-mode)
   (common-lisp:apply #'common-lisp:make-instance 'update-failover-config
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-failover-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-failover-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'failover-mode))
      (common-lisp:list
       (common-lisp:cons "FailoverMode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'recovery-window))
      (common-lisp:list
       (common-lisp:cons "RecoveryWindow"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-priority))
      (common-lisp:list
       (common-lisp:cons "SourcePriority"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "State"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-failover-config))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-flow-entitlement-request common-lisp:nil
                       ((subscribers :initarg :subscribers :type
                         (common-lisp:or |__listOf__string| common-lisp:null)
                         :accessor %update-flow-entitlement-request-subscribers
                         :initform common-lisp:nil)
                        (flow-arn :initarg :flow-arn :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %update-flow-entitlement-request-flow-arn :initform
                         (common-lisp:error ":flow-arn is required"))
                        (entitlement-status :initarg :entitlement-status :type
                         (common-lisp:or entitlement-status common-lisp:null)
                         :accessor
                         %update-flow-entitlement-request-entitlement-status
                         :initform common-lisp:nil)
                        (entitlement-arn :initarg :entitlement-arn :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %update-flow-entitlement-request-entitlement-arn
                         :initform
                         (common-lisp:error ":entitlement-arn is required"))
                        (encryption :initarg :encryption :type
                         (common-lisp:or update-encryption common-lisp:null)
                         :accessor %update-flow-entitlement-request-encryption
                         :initform common-lisp:nil)
                        (description :initarg :description :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %update-flow-entitlement-request-description :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'update-flow-entitlement-request
                    'make-update-flow-entitlement-request))
 (common-lisp:defun make-update-flow-entitlement-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key subscribers flow-arn entitlement-status
                     entitlement-arn encryption description)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-flow-entitlement-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-flow-entitlement-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-flow-entitlement-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'encryption))
      (common-lisp:list
       (common-lisp:cons "Encryption"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'entitlement-status))
      (common-lisp:list
       (common-lisp:cons "EntitlementStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subscribers))
      (common-lisp:list
       (common-lisp:cons "Subscribers"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-flow-entitlement-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-flow-entitlement-response common-lisp:nil
                       ((flow-arn :initarg :flow-arn :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %update-flow-entitlement-response-flow-arn :initform
                         common-lisp:nil)
                        (entitlement :initarg :entitlement :type
                         (common-lisp:or entitlement common-lisp:null)
                         :accessor
                         %update-flow-entitlement-response-entitlement
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'update-flow-entitlement-response
                    'make-update-flow-entitlement-response))
 (common-lisp:defun make-update-flow-entitlement-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key flow-arn entitlement)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-flow-entitlement-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-flow-entitlement-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-flow-entitlement-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'entitlement))
      (common-lisp:list
       (common-lisp:cons "Entitlement"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'flow-arn))
      (common-lisp:list
       (common-lisp:cons "FlowArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-flow-entitlement-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-flow-media-stream-request common-lisp:nil
                       ((video-format :initarg :video-format :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %update-flow-media-stream-request-video-format
                         :initform common-lisp:nil)
                        (media-stream-type :initarg :media-stream-type :type
                         (common-lisp:or media-stream-type common-lisp:null)
                         :accessor
                         %update-flow-media-stream-request-media-stream-type
                         :initform common-lisp:nil)
                        (media-stream-name :initarg :media-stream-name :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %update-flow-media-stream-request-media-stream-name
                         :initform
                         (common-lisp:error ":media-stream-name is required"))
                        (flow-arn :initarg :flow-arn :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %update-flow-media-stream-request-flow-arn :initform
                         (common-lisp:error ":flow-arn is required"))
                        (description :initarg :description :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %update-flow-media-stream-request-description
                         :initform common-lisp:nil)
                        (clock-rate :initarg :clock-rate :type
                         (common-lisp:or |__integer| common-lisp:null)
                         :accessor %update-flow-media-stream-request-clock-rate
                         :initform common-lisp:nil)
                        (attributes :initarg :attributes :type
                         (common-lisp:or media-stream-attributes-request
                                         common-lisp:null)
                         :accessor %update-flow-media-stream-request-attributes
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'update-flow-media-stream-request
                    'make-update-flow-media-stream-request))
 (common-lisp:defun make-update-flow-media-stream-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key video-format media-stream-type
                     media-stream-name flow-arn description clock-rate
                     attributes)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-flow-media-stream-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-flow-media-stream-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-flow-media-stream-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'attributes))
      (common-lisp:list
       (common-lisp:cons "Attributes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'clock-rate))
      (common-lisp:list
       (common-lisp:cons "ClockRate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'media-stream-type))
      (common-lisp:list
       (common-lisp:cons "MediaStreamType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'video-format))
      (common-lisp:list
       (common-lisp:cons "VideoFormat"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-flow-media-stream-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-flow-media-stream-response common-lisp:nil
                       ((media-stream :initarg :media-stream :type
                         (common-lisp:or media-stream common-lisp:null)
                         :accessor
                         %update-flow-media-stream-response-media-stream
                         :initform common-lisp:nil)
                        (flow-arn :initarg :flow-arn :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %update-flow-media-stream-response-flow-arn :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'update-flow-media-stream-response
                    'make-update-flow-media-stream-response))
 (common-lisp:defun make-update-flow-media-stream-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key media-stream flow-arn)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-flow-media-stream-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-flow-media-stream-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-flow-media-stream-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'flow-arn))
      (common-lisp:list
       (common-lisp:cons "FlowArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'media-stream))
      (common-lisp:list
       (common-lisp:cons "MediaStream"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-flow-media-stream-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-flow-output-request common-lisp:nil
                       ((vpc-interface-attachment :initarg
                         :vpc-interface-attachment :type
                         (common-lisp:or vpc-interface-attachment
                                         common-lisp:null)
                         :accessor
                         %update-flow-output-request-vpc-interface-attachment
                         :initform common-lisp:nil)
                        (stream-id :initarg :stream-id :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %update-flow-output-request-stream-id :initform
                         common-lisp:nil)
                        (smoothing-latency :initarg :smoothing-latency :type
                         (common-lisp:or |__integer| common-lisp:null)
                         :accessor
                         %update-flow-output-request-smoothing-latency
                         :initform common-lisp:nil)
                        (sender-ip-address :initarg :sender-ip-address :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %update-flow-output-request-sender-ip-address
                         :initform common-lisp:nil)
                        (sender-control-port :initarg :sender-control-port
                         :type (common-lisp:or |__integer| common-lisp:null)
                         :accessor
                         %update-flow-output-request-sender-control-port
                         :initform common-lisp:nil)
                        (remote-id :initarg :remote-id :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %update-flow-output-request-remote-id :initform
                         common-lisp:nil)
                        (protocol :initarg :protocol :type
                         (common-lisp:or protocol common-lisp:null) :accessor
                         %update-flow-output-request-protocol :initform
                         common-lisp:nil)
                        (port :initarg :port :type
                         (common-lisp:or |__integer| common-lisp:null)
                         :accessor %update-flow-output-request-port :initform
                         common-lisp:nil)
                        (output-arn :initarg :output-arn :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %update-flow-output-request-output-arn :initform
                         (common-lisp:error ":output-arn is required"))
                        (min-latency :initarg :min-latency :type
                         (common-lisp:or |__integer| common-lisp:null)
                         :accessor %update-flow-output-request-min-latency
                         :initform common-lisp:nil)
                        (media-stream-output-configurations :initarg
                         :media-stream-output-configurations :type
                         (common-lisp:or
                          |__listOfMediaStreamOutputConfigurationRequest|
                          common-lisp:null)
                         :accessor
                         %update-flow-output-request-media-stream-output-configurations
                         :initform common-lisp:nil)
                        (max-latency :initarg :max-latency :type
                         (common-lisp:or |__integer| common-lisp:null)
                         :accessor %update-flow-output-request-max-latency
                         :initform common-lisp:nil)
                        (flow-arn :initarg :flow-arn :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %update-flow-output-request-flow-arn :initform
                         (common-lisp:error ":flow-arn is required"))
                        (encryption :initarg :encryption :type
                         (common-lisp:or update-encryption common-lisp:null)
                         :accessor %update-flow-output-request-encryption
                         :initform common-lisp:nil)
                        (destination :initarg :destination :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %update-flow-output-request-destination :initform
                         common-lisp:nil)
                        (description :initarg :description :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %update-flow-output-request-description :initform
                         common-lisp:nil)
                        (cidr-allow-list :initarg :cidr-allow-list :type
                         (common-lisp:or |__listOf__string| common-lisp:null)
                         :accessor %update-flow-output-request-cidr-allow-list
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'update-flow-output-request
                    'make-update-flow-output-request))
 (common-lisp:defun make-update-flow-output-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key vpc-interface-attachment stream-id
                     smoothing-latency sender-ip-address sender-control-port
                     remote-id protocol port output-arn min-latency
                     media-stream-output-configurations max-latency flow-arn
                     encryption destination description cidr-allow-list)
   (common-lisp:apply #'common-lisp:make-instance 'update-flow-output-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-flow-output-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-flow-output-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cidr-allow-list))
      (common-lisp:list
       (common-lisp:cons "CidrAllowList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'destination))
      (common-lisp:list
       (common-lisp:cons "Destination"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'encryption))
      (common-lisp:list
       (common-lisp:cons "Encryption"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-latency))
      (common-lisp:list
       (common-lisp:cons "MaxLatency"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'media-stream-output-configurations))
      (common-lisp:list
       (common-lisp:cons "MediaStreamOutputConfigurations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'min-latency))
      (common-lisp:list
       (common-lisp:cons "MinLatency"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'port))
      (common-lisp:list
       (common-lisp:cons "Port"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'protocol))
      (common-lisp:list
       (common-lisp:cons "Protocol"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'remote-id))
      (common-lisp:list
       (common-lisp:cons "RemoteId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sender-control-port))
      (common-lisp:list
       (common-lisp:cons "SenderControlPort"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sender-ip-address))
      (common-lisp:list
       (common-lisp:cons "SenderIpAddress"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'smoothing-latency))
      (common-lisp:list
       (common-lisp:cons "SmoothingLatency"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stream-id))
      (common-lisp:list
       (common-lisp:cons "StreamId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'vpc-interface-attachment))
      (common-lisp:list
       (common-lisp:cons "VpcInterfaceAttachment"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-flow-output-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-flow-output-response common-lisp:nil
                       ((output :initarg :output :type
                         (common-lisp:or output common-lisp:null) :accessor
                         %update-flow-output-response-output :initform
                         common-lisp:nil)
                        (flow-arn :initarg :flow-arn :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %update-flow-output-response-flow-arn :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'update-flow-output-response
                    'make-update-flow-output-response))
 (common-lisp:defun make-update-flow-output-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key output flow-arn)
   (common-lisp:apply #'common-lisp:make-instance 'update-flow-output-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-flow-output-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-flow-output-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'flow-arn))
      (common-lisp:list
       (common-lisp:cons "FlowArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'output))
      (common-lisp:list
       (common-lisp:cons "Output"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-flow-output-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-flow-request common-lisp:nil
                       ((maintenance :initarg :maintenance :type
                         (common-lisp:or update-maintenance common-lisp:null)
                         :accessor %update-flow-request-maintenance :initform
                         common-lisp:nil)
                        (source-failover-config :initarg
                         :source-failover-config :type
                         (common-lisp:or update-failover-config
                                         common-lisp:null)
                         :accessor %update-flow-request-source-failover-config
                         :initform common-lisp:nil)
                        (flow-arn :initarg :flow-arn :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %update-flow-request-flow-arn :initform
                         (common-lisp:error ":flow-arn is required"))))
 (common-lisp:export
  (common-lisp:list 'update-flow-request 'make-update-flow-request))
 (common-lisp:defun make-update-flow-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key maintenance source-failover-config
                     flow-arn)
   (common-lisp:apply #'common-lisp:make-instance 'update-flow-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input update-flow-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input update-flow-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'source-failover-config))
      (common-lisp:list
       (common-lisp:cons "SourceFailoverConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'maintenance))
      (common-lisp:list
       (common-lisp:cons "Maintenance"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input update-flow-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-flow-response common-lisp:nil
                       ((flow :initarg :flow :type
                         (common-lisp:or flow common-lisp:null) :accessor
                         %update-flow-response-flow :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'update-flow-response 'make-update-flow-response))
 (common-lisp:defun make-update-flow-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key flow)
   (common-lisp:apply #'common-lisp:make-instance 'update-flow-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input update-flow-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input update-flow-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'flow))
      (common-lisp:list
       (common-lisp:cons "Flow"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input update-flow-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-flow-source-request common-lisp:nil
                       ((gateway-bridge-source :initarg :gateway-bridge-source
                         :type
                         (common-lisp:or update-gateway-bridge-source-request
                                         common-lisp:null)
                         :accessor
                         %update-flow-source-request-gateway-bridge-source
                         :initform common-lisp:nil)
                        (whitelist-cidr :initarg :whitelist-cidr :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %update-flow-source-request-whitelist-cidr :initform
                         common-lisp:nil)
                        (vpc-interface-name :initarg :vpc-interface-name :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %update-flow-source-request-vpc-interface-name
                         :initform common-lisp:nil)
                        (stream-id :initarg :stream-id :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %update-flow-source-request-stream-id :initform
                         common-lisp:nil)
                        (source-listener-port :initarg :source-listener-port
                         :type (common-lisp:or |__integer| common-lisp:null)
                         :accessor
                         %update-flow-source-request-source-listener-port
                         :initform common-lisp:nil)
                        (source-listener-address :initarg
                         :source-listener-address :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %update-flow-source-request-source-listener-address
                         :initform common-lisp:nil)
                        (source-arn :initarg :source-arn :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %update-flow-source-request-source-arn :initform
                         (common-lisp:error ":source-arn is required"))
                        (sender-ip-address :initarg :sender-ip-address :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %update-flow-source-request-sender-ip-address
                         :initform common-lisp:nil)
                        (sender-control-port :initarg :sender-control-port
                         :type (common-lisp:or |__integer| common-lisp:null)
                         :accessor
                         %update-flow-source-request-sender-control-port
                         :initform common-lisp:nil)
                        (protocol :initarg :protocol :type
                         (common-lisp:or protocol common-lisp:null) :accessor
                         %update-flow-source-request-protocol :initform
                         common-lisp:nil)
                        (min-latency :initarg :min-latency :type
                         (common-lisp:or |__integer| common-lisp:null)
                         :accessor %update-flow-source-request-min-latency
                         :initform common-lisp:nil)
                        (media-stream-source-configurations :initarg
                         :media-stream-source-configurations :type
                         (common-lisp:or
                          |__listOfMediaStreamSourceConfigurationRequest|
                          common-lisp:null)
                         :accessor
                         %update-flow-source-request-media-stream-source-configurations
                         :initform common-lisp:nil)
                        (max-sync-buffer :initarg :max-sync-buffer :type
                         (common-lisp:or |__integer| common-lisp:null)
                         :accessor %update-flow-source-request-max-sync-buffer
                         :initform common-lisp:nil)
                        (max-latency :initarg :max-latency :type
                         (common-lisp:or |__integer| common-lisp:null)
                         :accessor %update-flow-source-request-max-latency
                         :initform common-lisp:nil)
                        (max-bitrate :initarg :max-bitrate :type
                         (common-lisp:or |__integer| common-lisp:null)
                         :accessor %update-flow-source-request-max-bitrate
                         :initform common-lisp:nil)
                        (ingest-port :initarg :ingest-port :type
                         (common-lisp:or |__integer| common-lisp:null)
                         :accessor %update-flow-source-request-ingest-port
                         :initform common-lisp:nil)
                        (flow-arn :initarg :flow-arn :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %update-flow-source-request-flow-arn :initform
                         (common-lisp:error ":flow-arn is required"))
                        (entitlement-arn :initarg :entitlement-arn :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %update-flow-source-request-entitlement-arn :initform
                         common-lisp:nil)
                        (description :initarg :description :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %update-flow-source-request-description :initform
                         common-lisp:nil)
                        (decryption :initarg :decryption :type
                         (common-lisp:or update-encryption common-lisp:null)
                         :accessor %update-flow-source-request-decryption
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'update-flow-source-request
                    'make-update-flow-source-request))
 (common-lisp:defun make-update-flow-source-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key gateway-bridge-source whitelist-cidr
                     vpc-interface-name stream-id source-listener-port
                     source-listener-address source-arn sender-ip-address
                     sender-control-port protocol min-latency
                     media-stream-source-configurations max-sync-buffer
                     max-latency max-bitrate ingest-port flow-arn
                     entitlement-arn description decryption)
   (common-lisp:apply #'common-lisp:make-instance 'update-flow-source-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-flow-source-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-flow-source-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'decryption))
      (common-lisp:list
       (common-lisp:cons "Decryption"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'entitlement-arn))
      (common-lisp:list
       (common-lisp:cons "EntitlementArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ingest-port))
      (common-lisp:list
       (common-lisp:cons "IngestPort"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-bitrate))
      (common-lisp:list
       (common-lisp:cons "MaxBitrate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-latency))
      (common-lisp:list
       (common-lisp:cons "MaxLatency"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-sync-buffer))
      (common-lisp:list
       (common-lisp:cons "MaxSyncBuffer"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'media-stream-source-configurations))
      (common-lisp:list
       (common-lisp:cons "MediaStreamSourceConfigurations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'min-latency))
      (common-lisp:list
       (common-lisp:cons "MinLatency"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'protocol))
      (common-lisp:list
       (common-lisp:cons "Protocol"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sender-control-port))
      (common-lisp:list
       (common-lisp:cons "SenderControlPort"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sender-ip-address))
      (common-lisp:list
       (common-lisp:cons "SenderIpAddress"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'source-listener-address))
      (common-lisp:list
       (common-lisp:cons "SourceListenerAddress"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'source-listener-port))
      (common-lisp:list
       (common-lisp:cons "SourceListenerPort"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stream-id))
      (common-lisp:list
       (common-lisp:cons "StreamId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpc-interface-name))
      (common-lisp:list
       (common-lisp:cons "VpcInterfaceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'whitelist-cidr))
      (common-lisp:list
       (common-lisp:cons "WhitelistCidr"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'gateway-bridge-source))
      (common-lisp:list
       (common-lisp:cons "GatewayBridgeSource"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-flow-source-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-flow-source-response common-lisp:nil
                       ((source :initarg :source :type
                         (common-lisp:or source common-lisp:null) :accessor
                         %update-flow-source-response-source :initform
                         common-lisp:nil)
                        (flow-arn :initarg :flow-arn :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %update-flow-source-response-flow-arn :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'update-flow-source-response
                    'make-update-flow-source-response))
 (common-lisp:defun make-update-flow-source-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key source flow-arn)
   (common-lisp:apply #'common-lisp:make-instance 'update-flow-source-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-flow-source-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-flow-source-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'flow-arn))
      (common-lisp:list
       (common-lisp:cons "FlowArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source))
      (common-lisp:list
       (common-lisp:cons "Source"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-flow-source-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-gateway-bridge-source-request common-lisp:nil
                       ((vpc-interface-attachment :initarg
                         :vpc-interface-attachment :type
                         (common-lisp:or vpc-interface-attachment
                                         common-lisp:null)
                         :accessor
                         %update-gateway-bridge-source-request-vpc-interface-attachment
                         :initform common-lisp:nil)
                        (bridge-arn :initarg :bridge-arn :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %update-gateway-bridge-source-request-bridge-arn
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'update-gateway-bridge-source-request
                    'make-update-gateway-bridge-source-request))
 (common-lisp:defun make-update-gateway-bridge-source-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key vpc-interface-attachment bridge-arn)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-gateway-bridge-source-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-gateway-bridge-source-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-gateway-bridge-source-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bridge-arn))
      (common-lisp:list
       (common-lisp:cons "BridgeArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'vpc-interface-attachment))
      (common-lisp:list
       (common-lisp:cons "VpcInterfaceAttachment"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-gateway-bridge-source-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-gateway-instance-request common-lisp:nil
                       ((gateway-instance-arn :initarg :gateway-instance-arn
                         :type (common-lisp:or |__string| common-lisp:null)
                         :accessor
                         %update-gateway-instance-request-gateway-instance-arn
                         :initform
                         (common-lisp:error
                          ":gateway-instance-arn is required"))
                        (bridge-placement :initarg :bridge-placement :type
                         (common-lisp:or bridge-placement common-lisp:null)
                         :accessor
                         %update-gateway-instance-request-bridge-placement
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'update-gateway-instance-request
                    'make-update-gateway-instance-request))
 (common-lisp:defun make-update-gateway-instance-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key gateway-instance-arn bridge-placement)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-gateway-instance-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-gateway-instance-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-gateway-instance-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bridge-placement))
      (common-lisp:list
       (common-lisp:cons "BridgePlacement"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-gateway-instance-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-gateway-instance-response common-lisp:nil
                       ((gateway-instance-arn :initarg :gateway-instance-arn
                         :type (common-lisp:or |__string| common-lisp:null)
                         :accessor
                         %update-gateway-instance-response-gateway-instance-arn
                         :initform common-lisp:nil)
                        (bridge-placement :initarg :bridge-placement :type
                         (common-lisp:or bridge-placement common-lisp:null)
                         :accessor
                         %update-gateway-instance-response-bridge-placement
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'update-gateway-instance-response
                    'make-update-gateway-instance-response))
 (common-lisp:defun make-update-gateway-instance-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key gateway-instance-arn bridge-placement)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-gateway-instance-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-gateway-instance-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-gateway-instance-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bridge-placement))
      (common-lisp:list
       (common-lisp:cons "BridgePlacement"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'gateway-instance-arn))
      (common-lisp:list
       (common-lisp:cons "GatewayInstanceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-gateway-instance-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-ingress-gateway-bridge-request common-lisp:nil
                       ((max-outputs :initarg :max-outputs :type
                         (common-lisp:or |__integer| common-lisp:null)
                         :accessor
                         %update-ingress-gateway-bridge-request-max-outputs
                         :initform common-lisp:nil)
                        (max-bitrate :initarg :max-bitrate :type
                         (common-lisp:or |__integer| common-lisp:null)
                         :accessor
                         %update-ingress-gateway-bridge-request-max-bitrate
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'update-ingress-gateway-bridge-request
                    'make-update-ingress-gateway-bridge-request))
 (common-lisp:defun make-update-ingress-gateway-bridge-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key max-outputs max-bitrate)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-ingress-gateway-bridge-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-ingress-gateway-bridge-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-ingress-gateway-bridge-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-bitrate))
      (common-lisp:list
       (common-lisp:cons "MaxBitrate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-outputs))
      (common-lisp:list
       (common-lisp:cons "MaxOutputs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-ingress-gateway-bridge-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-maintenance common-lisp:nil
                       ((maintenance-start-hour :initarg
                         :maintenance-start-hour :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %update-maintenance-maintenance-start-hour :initform
                         common-lisp:nil)
                        (maintenance-scheduled-date :initarg
                         :maintenance-scheduled-date :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %update-maintenance-maintenance-scheduled-date
                         :initform common-lisp:nil)
                        (maintenance-day :initarg :maintenance-day :type
                         (common-lisp:or maintenance-day common-lisp:null)
                         :accessor %update-maintenance-maintenance-day
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'update-maintenance 'make-update-maintenance))
 (common-lisp:defun make-update-maintenance
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key maintenance-start-hour
                     maintenance-scheduled-date maintenance-day)
   (common-lisp:apply #'common-lisp:make-instance 'update-maintenance
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input update-maintenance))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input update-maintenance))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'maintenance-day))
      (common-lisp:list
       (common-lisp:cons "MaintenanceDay"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'maintenance-scheduled-date))
      (common-lisp:list
       (common-lisp:cons "MaintenanceScheduledDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'maintenance-start-hour))
      (common-lisp:list
       (common-lisp:cons "MaintenanceStartHour"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input update-maintenance))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass vpc-interface common-lisp:nil
                       ((subnet-id :initarg :subnet-id :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %vpc-interface-subnet-id :initform
                         (common-lisp:error ":subnet-id is required"))
                        (security-group-ids :initarg :security-group-ids :type
                         (common-lisp:or |__listOf__string| common-lisp:null)
                         :accessor %vpc-interface-security-group-ids :initform
                         (common-lisp:error ":security-group-ids is required"))
                        (role-arn :initarg :role-arn :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %vpc-interface-role-arn :initform
                         (common-lisp:error ":role-arn is required"))
                        (network-interface-type :initarg
                         :network-interface-type :type
                         (common-lisp:or network-interface-type
                                         common-lisp:null)
                         :accessor %vpc-interface-network-interface-type
                         :initform
                         (common-lisp:error
                          ":network-interface-type is required"))
                        (network-interface-ids :initarg :network-interface-ids
                         :type
                         (common-lisp:or |__listOf__string| common-lisp:null)
                         :accessor %vpc-interface-network-interface-ids
                         :initform
                         (common-lisp:error
                          ":network-interface-ids is required"))
                        (name :initarg :name :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %vpc-interface-name :initform
                         (common-lisp:error ":name is required"))))
 (common-lisp:export (common-lisp:list 'vpc-interface 'make-vpc-interface))
 (common-lisp:defun make-vpc-interface
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key subnet-id security-group-ids role-arn
                     network-interface-type network-interface-ids name)
   (common-lisp:apply #'common-lisp:make-instance 'vpc-interface
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input vpc-interface))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input vpc-interface))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'network-interface-ids))
      (common-lisp:list
       (common-lisp:cons "NetworkInterfaceIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'network-interface-type))
      (common-lisp:list
       (common-lisp:cons "NetworkInterfaceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "RoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'security-group-ids))
      (common-lisp:list
       (common-lisp:cons "SecurityGroupIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subnet-id))
      (common-lisp:list
       (common-lisp:cons "SubnetId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input vpc-interface))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass vpc-interface-attachment common-lisp:nil
                       ((vpc-interface-name :initarg :vpc-interface-name :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %vpc-interface-attachment-vpc-interface-name :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'vpc-interface-attachment 'make-vpc-interface-attachment))
 (common-lisp:defun make-vpc-interface-attachment
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key vpc-interface-name)
   (common-lisp:apply #'common-lisp:make-instance 'vpc-interface-attachment
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          vpc-interface-attachment))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          vpc-interface-attachment))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpc-interface-name))
      (common-lisp:list
       (common-lisp:cons "VpcInterfaceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          vpc-interface-attachment))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass vpc-interface-request common-lisp:nil
                       ((subnet-id :initarg :subnet-id :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %vpc-interface-request-subnet-id :initform
                         (common-lisp:error ":subnet-id is required"))
                        (security-group-ids :initarg :security-group-ids :type
                         (common-lisp:or |__listOf__string| common-lisp:null)
                         :accessor %vpc-interface-request-security-group-ids
                         :initform
                         (common-lisp:error ":security-group-ids is required"))
                        (role-arn :initarg :role-arn :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %vpc-interface-request-role-arn :initform
                         (common-lisp:error ":role-arn is required"))
                        (network-interface-type :initarg
                         :network-interface-type :type
                         (common-lisp:or network-interface-type
                                         common-lisp:null)
                         :accessor
                         %vpc-interface-request-network-interface-type
                         :initform common-lisp:nil)
                        (name :initarg :name :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %vpc-interface-request-name :initform
                         (common-lisp:error ":name is required"))))
 (common-lisp:export
  (common-lisp:list 'vpc-interface-request 'make-vpc-interface-request))
 (common-lisp:defun make-vpc-interface-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key subnet-id security-group-ids role-arn
                     network-interface-type name)
   (common-lisp:apply #'common-lisp:make-instance 'vpc-interface-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          vpc-interface-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          vpc-interface-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'network-interface-type))
      (common-lisp:list
       (common-lisp:cons "NetworkInterfaceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "RoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'security-group-ids))
      (common-lisp:list
       (common-lisp:cons "SecurityGroupIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subnet-id))
      (common-lisp:list
       (common-lisp:cons "SubnetId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          vpc-interface-request))
   common-lisp:nil))
(common-lisp:deftype |__boolean| () 'common-lisp:boolean)
(common-lisp:deftype |__double| () 'common-lisp:double-float)
(common-lisp:deftype |__integer| () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:deftype |__listOfAddBridgeOutputRequest| ()
   '(trivial-types:proper-list add-bridge-output-request))
 (common-lisp:defun |make-__listofaddbridgeoutputrequest|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            add-bridge-output-request))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype |__listOfAddBridgeSourceRequest| ()
   '(trivial-types:proper-list add-bridge-source-request))
 (common-lisp:defun |make-__listofaddbridgesourcerequest|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            add-bridge-source-request))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype |__listOfAddMediaStreamRequest| ()
   '(trivial-types:proper-list add-media-stream-request))
 (common-lisp:defun |make-__listofaddmediastreamrequest|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            add-media-stream-request))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype |__listOfAddOutputRequest| ()
   '(trivial-types:proper-list add-output-request))
 (common-lisp:defun |make-__listofaddoutputrequest|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list add-output-request))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype |__listOfBridgeOutput| ()
   '(trivial-types:proper-list bridge-output))
 (common-lisp:defun |make-__listofbridgeoutput|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list bridge-output))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype |__listOfBridgeSource| ()
   '(trivial-types:proper-list bridge-source))
 (common-lisp:defun |make-__listofbridgesource|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list bridge-source))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype |__listOfDestinationConfiguration| ()
   '(trivial-types:proper-list destination-configuration))
 (common-lisp:defun |make-__listofdestinationconfiguration|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            destination-configuration))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype |__listOfDestinationConfigurationRequest| ()
   '(trivial-types:proper-list destination-configuration-request))
 (common-lisp:defun |make-__listofdestinationconfigurationrequest|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            destination-configuration-request))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype |__listOfEntitlement| ()
   '(trivial-types:proper-list entitlement))
 (common-lisp:defun |make-__listofentitlement|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list entitlement))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype |__listOfGatewayNetwork| ()
   '(trivial-types:proper-list gateway-network))
 (common-lisp:defun |make-__listofgatewaynetwork|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list gateway-network))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype |__listOfGrantEntitlementRequest| ()
   '(trivial-types:proper-list grant-entitlement-request))
 (common-lisp:defun |make-__listofgrantentitlementrequest|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            grant-entitlement-request))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype |__listOfInputConfiguration| ()
   '(trivial-types:proper-list input-configuration))
 (common-lisp:defun |make-__listofinputconfiguration|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list input-configuration))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype |__listOfInputConfigurationRequest| ()
   '(trivial-types:proper-list input-configuration-request))
 (common-lisp:defun |make-__listofinputconfigurationrequest|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            input-configuration-request))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype |__listOfListedBridge| ()
   '(trivial-types:proper-list listed-bridge))
 (common-lisp:defun |make-__listoflistedbridge|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list listed-bridge))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype |__listOfListedEntitlement| ()
   '(trivial-types:proper-list listed-entitlement))
 (common-lisp:defun |make-__listoflistedentitlement|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list listed-entitlement))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype |__listOfListedFlow| ()
   '(trivial-types:proper-list listed-flow))
 (common-lisp:defun |make-__listoflistedflow|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list listed-flow))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype |__listOfListedGateway| ()
   '(trivial-types:proper-list listed-gateway))
 (common-lisp:defun |make-__listoflistedgateway|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list listed-gateway))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype |__listOfListedGatewayInstance| ()
   '(trivial-types:proper-list listed-gateway-instance))
 (common-lisp:defun |make-__listoflistedgatewayinstance|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list listed-gateway-instance))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype |__listOfMediaStream| ()
   '(trivial-types:proper-list media-stream))
 (common-lisp:defun |make-__listofmediastream|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list media-stream))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype |__listOfMediaStreamOutputConfiguration| ()
   '(trivial-types:proper-list media-stream-output-configuration))
 (common-lisp:defun |make-__listofmediastreamoutputconfiguration|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            media-stream-output-configuration))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype |__listOfMediaStreamOutputConfigurationRequest| ()
   '(trivial-types:proper-list media-stream-output-configuration-request))
 (common-lisp:defun |make-__listofmediastreamoutputconfigurationrequest|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            media-stream-output-configuration-request))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype |__listOfMediaStreamSourceConfiguration| ()
   '(trivial-types:proper-list media-stream-source-configuration))
 (common-lisp:defun |make-__listofmediastreamsourceconfiguration|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            media-stream-source-configuration))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype |__listOfMediaStreamSourceConfigurationRequest| ()
   '(trivial-types:proper-list media-stream-source-configuration-request))
 (common-lisp:defun |make-__listofmediastreamsourceconfigurationrequest|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            media-stream-source-configuration-request))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype |__listOfMessageDetail| ()
   '(trivial-types:proper-list message-detail))
 (common-lisp:defun |make-__listofmessagedetail|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list message-detail))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype |__listOfOffering| ()
   '(trivial-types:proper-list offering))
 (common-lisp:defun |make-__listofoffering|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list offering))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype |__listOfOutput| () '(trivial-types:proper-list output))
 (common-lisp:defun |make-__listofoutput|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list output))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype |__listOfReservation| ()
   '(trivial-types:proper-list reservation))
 (common-lisp:defun |make-__listofreservation|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list reservation))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype |__listOfSetSourceRequest| ()
   '(trivial-types:proper-list set-source-request))
 (common-lisp:defun |make-__listofsetsourcerequest|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list set-source-request))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype |__listOfSource| () '(trivial-types:proper-list source))
 (common-lisp:defun |make-__listofsource|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list source))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype |__listOfVpcInterface| ()
   '(trivial-types:proper-list vpc-interface))
 (common-lisp:defun |make-__listofvpcinterface|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list vpc-interface))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype |__listOfVpcInterfaceRequest| ()
   '(trivial-types:proper-list vpc-interface-request))
 (common-lisp:defun |make-__listofvpcinterfacerequest|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list vpc-interface-request))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype |__listOf__integer| ()
   '(trivial-types:proper-list |__integer|))
 (common-lisp:defun |make-__listof__integer|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list |__integer|))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype |__listOf__string| ()
   '(trivial-types:proper-list |__string|))
 (common-lisp:defun |make-__listof__string|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list |__string|))
   aws-sdk/generator/shape::members))
(common-lisp:deftype |__long| () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:deftype |__mapOf__string| () 'common-lisp:hash-table)
 (common-lisp:defun |make-__mapof__string|
                    (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:deftype |__string| () 'common-lisp:string)
(common-lisp:deftype |__timestampIso8601| () 'common-lisp:string)
(common-lisp:deftype |__timestampUnix| () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defun add-bridge-outputs
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key bridge-arn outputs)
   (common-lisp:declare (common-lisp:ignorable bridge-arn outputs))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-add-bridge-outputs-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'mediaconnect-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v1/bridges/~A/outputs"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'bridge-arn))))
                                                        "AddBridgeOutputs"
                                                        "2018-11-14"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'add-bridge-outputs))
(common-lisp:progn
 (common-lisp:defun add-bridge-sources
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key bridge-arn sources)
   (common-lisp:declare (common-lisp:ignorable bridge-arn sources))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-add-bridge-sources-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'mediaconnect-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v1/bridges/~A/sources"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'bridge-arn))))
                                                        "AddBridgeSources"
                                                        "2018-11-14"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'add-bridge-sources))
(common-lisp:progn
 (common-lisp:defun add-flow-media-streams
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key flow-arn media-streams)
   (common-lisp:declare (common-lisp:ignorable flow-arn media-streams))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-add-flow-media-streams-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'mediaconnect-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v1/flows/~A/mediaStreams"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'flow-arn))))
                                                        "AddFlowMediaStreams"
                                                        "2018-11-14"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'add-flow-media-streams))
(common-lisp:progn
 (common-lisp:defun add-flow-outputs
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key flow-arn outputs)
   (common-lisp:declare (common-lisp:ignorable flow-arn outputs))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-add-flow-outputs-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'mediaconnect-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v1/flows/~A/outputs"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'flow-arn))))
                                                        "AddFlowOutputs"
                                                        "2018-11-14"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'add-flow-outputs))
(common-lisp:progn
 (common-lisp:defun add-flow-sources
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key flow-arn sources)
   (common-lisp:declare (common-lisp:ignorable flow-arn sources))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-add-flow-sources-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'mediaconnect-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v1/flows/~A/source"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'flow-arn))))
                                                        "AddFlowSources"
                                                        "2018-11-14"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'add-flow-sources))
(common-lisp:progn
 (common-lisp:defun add-flow-vpc-interfaces
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key flow-arn vpc-interfaces)
   (common-lisp:declare (common-lisp:ignorable flow-arn vpc-interfaces))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-add-flow-vpc-interfaces-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'mediaconnect-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v1/flows/~A/vpcInterfaces"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'flow-arn))))
                                                        "AddFlowVpcInterfaces"
                                                        "2018-11-14"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'add-flow-vpc-interfaces))
(common-lisp:progn
 (common-lisp:defun create-bridge
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key egress-gateway-bridge
                     ingress-gateway-bridge name outputs placement-arn
                     source-failover-config sources)
   (common-lisp:declare
    (common-lisp:ignorable egress-gateway-bridge ingress-gateway-bridge name
     outputs placement-arn source-failover-config sources))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-bridge-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'mediaconnect-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        "/v1/bridges"
                                                        "CreateBridge"
                                                        "2018-11-14"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-bridge))
(common-lisp:progn
 (common-lisp:defun create-flow
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key availability-zone entitlements
                     media-streams name outputs source source-failover-config
                     sources vpc-interfaces maintenance)
   (common-lisp:declare
    (common-lisp:ignorable availability-zone entitlements media-streams name
     outputs source source-failover-config sources vpc-interfaces maintenance))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-flow-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'mediaconnect-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        "/v1/flows"
                                                        "CreateFlow"
                                                        "2018-11-14"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-flow))
(common-lisp:progn
 (common-lisp:defun create-gateway
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key egress-cidr-blocks name networks)
   (common-lisp:declare
    (common-lisp:ignorable egress-cidr-blocks name networks))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-gateway-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'mediaconnect-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        "/v1/gateways"
                                                        "CreateGateway"
                                                        "2018-11-14"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-gateway))
(common-lisp:progn
 (common-lisp:defun delete-bridge
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key bridge-arn)
   (common-lisp:declare (common-lisp:ignorable bridge-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-bridge-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'mediaconnect-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v1/bridges/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'bridge-arn))))
                                                        "DeleteBridge"
                                                        "2018-11-14"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-bridge))
(common-lisp:progn
 (common-lisp:defun delete-flow
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key flow-arn)
   (common-lisp:declare (common-lisp:ignorable flow-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-flow-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'mediaconnect-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v1/flows/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'flow-arn))))
                                                        "DeleteFlow"
                                                        "2018-11-14"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-flow))
(common-lisp:progn
 (common-lisp:defun delete-gateway
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key gateway-arn)
   (common-lisp:declare (common-lisp:ignorable gateway-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-gateway-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'mediaconnect-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v1/gateways/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'gateway-arn))))
                                                        "DeleteGateway"
                                                        "2018-11-14"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-gateway))
(common-lisp:progn
 (common-lisp:defun deregister-gateway-instance
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key force gateway-instance-arn)
   (common-lisp:declare (common-lisp:ignorable force gateway-instance-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-deregister-gateway-instance-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'mediaconnect-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v1/gateway-instances/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'gateway-instance-arn))))
                                                        "DeregisterGatewayInstance"
                                                        "2018-11-14"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'deregister-gateway-instance))
(common-lisp:progn
 (common-lisp:defun describe-bridge
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key bridge-arn)
   (common-lisp:declare (common-lisp:ignorable bridge-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-bridge-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'mediaconnect-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v1/bridges/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'bridge-arn))))
                                                        "DescribeBridge"
                                                        "2018-11-14"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-bridge))
(common-lisp:progn
 (common-lisp:defun describe-flow
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key flow-arn)
   (common-lisp:declare (common-lisp:ignorable flow-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-flow-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'mediaconnect-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v1/flows/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'flow-arn))))
                                                        "DescribeFlow"
                                                        "2018-11-14"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-flow))
(common-lisp:progn
 (common-lisp:defun describe-gateway
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key gateway-arn)
   (common-lisp:declare (common-lisp:ignorable gateway-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-gateway-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'mediaconnect-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v1/gateways/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'gateway-arn))))
                                                        "DescribeGateway"
                                                        "2018-11-14"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-gateway))
(common-lisp:progn
 (common-lisp:defun describe-gateway-instance
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key gateway-instance-arn)
   (common-lisp:declare (common-lisp:ignorable gateway-instance-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-gateway-instance-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'mediaconnect-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v1/gateway-instances/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'gateway-instance-arn))))
                                                        "DescribeGatewayInstance"
                                                        "2018-11-14"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-gateway-instance))
(common-lisp:progn
 (common-lisp:defun describe-offering
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key offering-arn)
   (common-lisp:declare (common-lisp:ignorable offering-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-offering-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'mediaconnect-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v1/offerings/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'offering-arn))))
                                                        "DescribeOffering"
                                                        "2018-11-14"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-offering))
(common-lisp:progn
 (common-lisp:defun describe-reservation
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key reservation-arn)
   (common-lisp:declare (common-lisp:ignorable reservation-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-reservation-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'mediaconnect-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v1/reservations/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'reservation-arn))))
                                                        "DescribeReservation"
                                                        "2018-11-14"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-reservation))
(common-lisp:progn
 (common-lisp:defun grant-flow-entitlements
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key entitlements flow-arn)
   (common-lisp:declare (common-lisp:ignorable entitlements flow-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-grant-flow-entitlements-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'mediaconnect-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v1/flows/~A/entitlements"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'flow-arn))))
                                                        "GrantFlowEntitlements"
                                                        "2018-11-14"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'grant-flow-entitlements))
(common-lisp:progn
 (common-lisp:defun list-bridges
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key filter-arn max-results next-token)
   (common-lisp:declare
    (common-lisp:ignorable filter-arn max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-bridges-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'mediaconnect-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        "/v1/bridges"
                                                        "ListBridges"
                                                        "2018-11-14"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-bridges))
(common-lisp:progn
 (common-lisp:defun list-entitlements
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key max-results next-token)
   (common-lisp:declare (common-lisp:ignorable max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-entitlements-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'mediaconnect-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        "/v1/entitlements"
                                                        "ListEntitlements"
                                                        "2018-11-14"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-entitlements))
(common-lisp:progn
 (common-lisp:defun list-flows
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key max-results next-token)
   (common-lisp:declare (common-lisp:ignorable max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-flows-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'mediaconnect-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        "/v1/flows" "ListFlows"
                                                        "2018-11-14"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-flows))
(common-lisp:progn
 (common-lisp:defun list-gateway-instances
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key filter-arn max-results next-token)
   (common-lisp:declare
    (common-lisp:ignorable filter-arn max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-gateway-instances-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'mediaconnect-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        "/v1/gateway-instances"
                                                        "ListGatewayInstances"
                                                        "2018-11-14"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-gateway-instances))
(common-lisp:progn
 (common-lisp:defun list-gateways
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key max-results next-token)
   (common-lisp:declare (common-lisp:ignorable max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-gateways-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'mediaconnect-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        "/v1/gateways"
                                                        "ListGateways"
                                                        "2018-11-14"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-gateways))
(common-lisp:progn
 (common-lisp:defun list-offerings
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key max-results next-token)
   (common-lisp:declare (common-lisp:ignorable max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-offerings-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'mediaconnect-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        "/v1/offerings"
                                                        "ListOfferings"
                                                        "2018-11-14"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-offerings))
(common-lisp:progn
 (common-lisp:defun list-reservations
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key max-results next-token)
   (common-lisp:declare (common-lisp:ignorable max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-reservations-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'mediaconnect-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        "/v1/reservations"
                                                        "ListReservations"
                                                        "2018-11-14"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-reservations))
(common-lisp:progn
 (common-lisp:defun list-tags-for-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn)
   (common-lisp:declare (common-lisp:ignorable resource-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-tags-for-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'mediaconnect-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/tags/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'resource-arn))))
                                                        "ListTagsForResource"
                                                        "2018-11-14"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-tags-for-resource))
(common-lisp:progn
 (common-lisp:defun purchase-offering
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key offering-arn reservation-name start)
   (common-lisp:declare
    (common-lisp:ignorable offering-arn reservation-name start))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-purchase-offering-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'mediaconnect-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v1/offerings/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'offering-arn))))
                                                        "PurchaseOffering"
                                                        "2018-11-14"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'purchase-offering))
(common-lisp:progn
 (common-lisp:defun remove-bridge-output
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key bridge-arn output-name)
   (common-lisp:declare (common-lisp:ignorable bridge-arn output-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-remove-bridge-output-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'mediaconnect-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v1/bridges/~A/outputs/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'bridge-arn))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'output-name))))
                                                        "RemoveBridgeOutput"
                                                        "2018-11-14"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'remove-bridge-output))
(common-lisp:progn
 (common-lisp:defun remove-bridge-source
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key bridge-arn source-name)
   (common-lisp:declare (common-lisp:ignorable bridge-arn source-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-remove-bridge-source-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'mediaconnect-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v1/bridges/~A/sources/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'bridge-arn))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'source-name))))
                                                        "RemoveBridgeSource"
                                                        "2018-11-14"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'remove-bridge-source))
(common-lisp:progn
 (common-lisp:defun remove-flow-media-stream
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key flow-arn media-stream-name)
   (common-lisp:declare (common-lisp:ignorable flow-arn media-stream-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-remove-flow-media-stream-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'mediaconnect-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v1/flows/~A/mediaStreams/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'flow-arn))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'media-stream-name))))
                                                        "RemoveFlowMediaStream"
                                                        "2018-11-14"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'remove-flow-media-stream))
(common-lisp:progn
 (common-lisp:defun remove-flow-output
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key flow-arn output-arn)
   (common-lisp:declare (common-lisp:ignorable flow-arn output-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-remove-flow-output-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'mediaconnect-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v1/flows/~A/outputs/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'flow-arn))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'output-arn))))
                                                        "RemoveFlowOutput"
                                                        "2018-11-14"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'remove-flow-output))
(common-lisp:progn
 (common-lisp:defun remove-flow-source
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key flow-arn source-arn)
   (common-lisp:declare (common-lisp:ignorable flow-arn source-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-remove-flow-source-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'mediaconnect-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v1/flows/~A/source/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'flow-arn))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'source-arn))))
                                                        "RemoveFlowSource"
                                                        "2018-11-14"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'remove-flow-source))
(common-lisp:progn
 (common-lisp:defun remove-flow-vpc-interface
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key flow-arn vpc-interface-name)
   (common-lisp:declare (common-lisp:ignorable flow-arn vpc-interface-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-remove-flow-vpc-interface-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'mediaconnect-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v1/flows/~A/vpcInterfaces/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'flow-arn))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'vpc-interface-name))))
                                                        "RemoveFlowVpcInterface"
                                                        "2018-11-14"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'remove-flow-vpc-interface))
(common-lisp:progn
 (common-lisp:defun revoke-flow-entitlement
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key entitlement-arn flow-arn)
   (common-lisp:declare (common-lisp:ignorable entitlement-arn flow-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-revoke-flow-entitlement-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'mediaconnect-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v1/flows/~A/entitlements/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'flow-arn))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'entitlement-arn))))
                                                        "RevokeFlowEntitlement"
                                                        "2018-11-14"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'revoke-flow-entitlement))
(common-lisp:progn
 (common-lisp:defun start-flow
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key flow-arn)
   (common-lisp:declare (common-lisp:ignorable flow-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-start-flow-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'mediaconnect-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v1/flows/start/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'flow-arn))))
                                                        "StartFlow"
                                                        "2018-11-14"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'start-flow))
(common-lisp:progn
 (common-lisp:defun stop-flow
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key flow-arn)
   (common-lisp:declare (common-lisp:ignorable flow-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-stop-flow-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'mediaconnect-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v1/flows/stop/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'flow-arn))))
                                                        "StopFlow"
                                                        "2018-11-14"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'stop-flow))
(common-lisp:progn
 (common-lisp:defun tag-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn tags)
   (common-lisp:declare (common-lisp:ignorable resource-arn tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-tag-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'mediaconnect-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/tags/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'resource-arn))))
                                                        "TagResource"
                                                        "2018-11-14"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'tag-resource))
(common-lisp:progn
 (common-lisp:defun untag-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn tag-keys)
   (common-lisp:declare (common-lisp:ignorable resource-arn tag-keys))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-untag-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'mediaconnect-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/tags/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'resource-arn))))
                                                        "UntagResource"
                                                        "2018-11-14"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'untag-resource))
(common-lisp:progn
 (common-lisp:defun update-bridge
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key bridge-arn egress-gateway-bridge
                     ingress-gateway-bridge source-failover-config)
   (common-lisp:declare
    (common-lisp:ignorable bridge-arn egress-gateway-bridge
     ingress-gateway-bridge source-failover-config))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-bridge-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'mediaconnect-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v1/bridges/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'bridge-arn))))
                                                        "UpdateBridge"
                                                        "2018-11-14"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-bridge))
(common-lisp:progn
 (common-lisp:defun update-bridge-output
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key bridge-arn network-output output-name)
   (common-lisp:declare
    (common-lisp:ignorable bridge-arn network-output output-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-bridge-output-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'mediaconnect-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v1/bridges/~A/outputs/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'bridge-arn))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'output-name))))
                                                        "UpdateBridgeOutput"
                                                        "2018-11-14"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-bridge-output))
(common-lisp:progn
 (common-lisp:defun update-bridge-source
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key bridge-arn flow-source network-source
                     source-name)
   (common-lisp:declare
    (common-lisp:ignorable bridge-arn flow-source network-source source-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-bridge-source-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'mediaconnect-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v1/bridges/~A/sources/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'bridge-arn))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'source-name))))
                                                        "UpdateBridgeSource"
                                                        "2018-11-14"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-bridge-source))
(common-lisp:progn
 (common-lisp:defun update-bridge-state
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key bridge-arn desired-state)
   (common-lisp:declare (common-lisp:ignorable bridge-arn desired-state))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-bridge-state-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'mediaconnect-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v1/bridges/~A/state"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'bridge-arn))))
                                                        "UpdateBridgeState"
                                                        "2018-11-14"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-bridge-state))
(common-lisp:progn
 (common-lisp:defun update-flow
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key flow-arn source-failover-config
                     maintenance)
   (common-lisp:declare
    (common-lisp:ignorable flow-arn source-failover-config maintenance))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-flow-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'mediaconnect-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v1/flows/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'flow-arn))))
                                                        "UpdateFlow"
                                                        "2018-11-14"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-flow))
(common-lisp:progn
 (common-lisp:defun update-flow-entitlement
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key description encryption entitlement-arn
                     entitlement-status flow-arn subscribers)
   (common-lisp:declare
    (common-lisp:ignorable description encryption entitlement-arn
     entitlement-status flow-arn subscribers))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-flow-entitlement-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'mediaconnect-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v1/flows/~A/entitlements/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'flow-arn))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'entitlement-arn))))
                                                        "UpdateFlowEntitlement"
                                                        "2018-11-14"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-flow-entitlement))
(common-lisp:progn
 (common-lisp:defun update-flow-media-stream
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key attributes clock-rate description
                     flow-arn media-stream-name media-stream-type video-format)
   (common-lisp:declare
    (common-lisp:ignorable attributes clock-rate description flow-arn
     media-stream-name media-stream-type video-format))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-flow-media-stream-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'mediaconnect-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v1/flows/~A/mediaStreams/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'flow-arn))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'media-stream-name))))
                                                        "UpdateFlowMediaStream"
                                                        "2018-11-14"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-flow-media-stream))
(common-lisp:progn
 (common-lisp:defun update-flow-output
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key cidr-allow-list description destination
                     encryption flow-arn max-latency
                     media-stream-output-configurations min-latency output-arn
                     port protocol remote-id sender-control-port
                     sender-ip-address smoothing-latency stream-id
                     vpc-interface-attachment)
   (common-lisp:declare
    (common-lisp:ignorable cidr-allow-list description destination encryption
     flow-arn max-latency media-stream-output-configurations min-latency
     output-arn port protocol remote-id sender-control-port sender-ip-address
     smoothing-latency stream-id vpc-interface-attachment))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-flow-output-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'mediaconnect-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v1/flows/~A/outputs/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'flow-arn))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'output-arn))))
                                                        "UpdateFlowOutput"
                                                        "2018-11-14"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-flow-output))
(common-lisp:progn
 (common-lisp:defun update-flow-source
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key decryption description entitlement-arn
                     flow-arn ingest-port max-bitrate max-latency
                     max-sync-buffer media-stream-source-configurations
                     min-latency protocol sender-control-port sender-ip-address
                     source-arn source-listener-address source-listener-port
                     stream-id vpc-interface-name whitelist-cidr
                     gateway-bridge-source)
   (common-lisp:declare
    (common-lisp:ignorable decryption description entitlement-arn flow-arn
     ingest-port max-bitrate max-latency max-sync-buffer
     media-stream-source-configurations min-latency protocol
     sender-control-port sender-ip-address source-arn source-listener-address
     source-listener-port stream-id vpc-interface-name whitelist-cidr
     gateway-bridge-source))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-flow-source-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'mediaconnect-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v1/flows/~A/source/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'flow-arn))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'source-arn))))
                                                        "UpdateFlowSource"
                                                        "2018-11-14"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-flow-source))
(common-lisp:progn
 (common-lisp:defun update-gateway-instance
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key bridge-placement gateway-instance-arn)
   (common-lisp:declare
    (common-lisp:ignorable bridge-placement gateway-instance-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-gateway-instance-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'mediaconnect-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v1/gateway-instances/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'gateway-instance-arn))))
                                                        "UpdateGatewayInstance"
                                                        "2018-11-14"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-gateway-instance))
